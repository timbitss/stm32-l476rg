
UART-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a34  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000904  08006bc0  08006bc0  00016bc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074c4  080074c4  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  080074c4  080074c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074cc  080074cc  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074cc  080074cc  000174cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074d0  080074d0  000174d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080074d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  20000100  080075d4  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  080075d4  00020614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107f4  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a97  00000000  00000000  00030924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  000333c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  00034010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a100  00000000  00000000  00034b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e861  00000000  00000000  0005ec40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5e72  00000000  00000000  0006d4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00163313  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003544  00000000  00000000  00163368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006ba4 	.word	0x08006ba4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	08006ba4 	.word	0x08006ba4

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	; 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	3c01      	subs	r4, #1
 8000318:	bf28      	it	cs
 800031a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031e:	d2e9      	bcs.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c6:	bf08      	it	eq
 80004c8:	4770      	bxeq	lr
 80004ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ce:	bf04      	itt	eq
 80004d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e4:	e71c      	b.n	8000320 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aed8 	beq.w	80002ce <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6bd      	b.n	80002ce <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <__aeabi_dmul>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000562:	bf1d      	ittte	ne
 8000564:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000568:	ea94 0f0c 	teqne	r4, ip
 800056c:	ea95 0f0c 	teqne	r5, ip
 8000570:	f000 f8de 	bleq	8000730 <__aeabi_dmul+0x1dc>
 8000574:	442c      	add	r4, r5
 8000576:	ea81 0603 	eor.w	r6, r1, r3
 800057a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000582:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000586:	bf18      	it	ne
 8000588:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800058c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000594:	d038      	beq.n	8000608 <__aeabi_dmul+0xb4>
 8000596:	fba0 ce02 	umull	ip, lr, r0, r2
 800059a:	f04f 0500 	mov.w	r5, #0
 800059e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005aa:	f04f 0600 	mov.w	r6, #0
 80005ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b2:	f09c 0f00 	teq	ip, #0
 80005b6:	bf18      	it	ne
 80005b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c8:	d204      	bcs.n	80005d4 <__aeabi_dmul+0x80>
 80005ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ce:	416d      	adcs	r5, r5
 80005d0:	eb46 0606 	adc.w	r6, r6, r6
 80005d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005ec:	bf88      	it	hi
 80005ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f2:	d81e      	bhi.n	8000632 <__aeabi_dmul+0xde>
 80005f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f8:	bf08      	it	eq
 80005fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fe:	f150 0000 	adcs.w	r0, r0, #0
 8000602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800060c:	ea46 0101 	orr.w	r1, r6, r1
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	ea81 0103 	eor.w	r1, r1, r3
 8000618:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800061c:	bfc2      	ittt	gt
 800061e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000622:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000626:	bd70      	popgt	{r4, r5, r6, pc}
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f04f 0e00 	mov.w	lr, #0
 8000630:	3c01      	subs	r4, #1
 8000632:	f300 80ab 	bgt.w	800078c <__aeabi_dmul+0x238>
 8000636:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063a:	bfde      	ittt	le
 800063c:	2000      	movle	r0, #0
 800063e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000642:	bd70      	pople	{r4, r5, r6, pc}
 8000644:	f1c4 0400 	rsb	r4, r4, #0
 8000648:	3c20      	subs	r4, #32
 800064a:	da35      	bge.n	80006b8 <__aeabi_dmul+0x164>
 800064c:	340c      	adds	r4, #12
 800064e:	dc1b      	bgt.n	8000688 <__aeabi_dmul+0x134>
 8000650:	f104 0414 	add.w	r4, r4, #20
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f305 	lsl.w	r3, r0, r5
 800065c:	fa20 f004 	lsr.w	r0, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800066c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000670:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000674:	fa21 f604 	lsr.w	r6, r1, r4
 8000678:	eb42 0106 	adc.w	r1, r2, r6
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f1c4 040c 	rsb	r4, r4, #12
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f304 	lsl.w	r3, r0, r4
 8000694:	fa20 f005 	lsr.w	r0, r0, r5
 8000698:	fa01 f204 	lsl.w	r2, r1, r4
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	f141 0100 	adc.w	r1, r1, #0
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f205 	lsl.w	r2, r0, r5
 80006c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c4:	fa20 f304 	lsr.w	r3, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea43 0302 	orr.w	r3, r3, r2
 80006d0:	fa21 f004 	lsr.w	r0, r1, r4
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	fa21 f204 	lsr.w	r2, r1, r4
 80006dc:	ea20 0002 	bic.w	r0, r0, r2
 80006e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f094 0f00 	teq	r4, #0
 80006f4:	d10f      	bne.n	8000716 <__aeabi_dmul+0x1c2>
 80006f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fa:	0040      	lsls	r0, r0, #1
 80006fc:	eb41 0101 	adc.w	r1, r1, r1
 8000700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000704:	bf08      	it	eq
 8000706:	3c01      	subeq	r4, #1
 8000708:	d0f7      	beq.n	80006fa <__aeabi_dmul+0x1a6>
 800070a:	ea41 0106 	orr.w	r1, r1, r6
 800070e:	f095 0f00 	teq	r5, #0
 8000712:	bf18      	it	ne
 8000714:	4770      	bxne	lr
 8000716:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071a:	0052      	lsls	r2, r2, #1
 800071c:	eb43 0303 	adc.w	r3, r3, r3
 8000720:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3d01      	subeq	r5, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1c6>
 800072a:	ea43 0306 	orr.w	r3, r3, r6
 800072e:	4770      	bx	lr
 8000730:	ea94 0f0c 	teq	r4, ip
 8000734:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000738:	bf18      	it	ne
 800073a:	ea95 0f0c 	teqne	r5, ip
 800073e:	d00c      	beq.n	800075a <__aeabi_dmul+0x206>
 8000740:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000744:	bf18      	it	ne
 8000746:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074a:	d1d1      	bne.n	80006f0 <__aeabi_dmul+0x19c>
 800074c:	ea81 0103 	eor.w	r1, r1, r3
 8000750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075e:	bf06      	itte	eq
 8000760:	4610      	moveq	r0, r2
 8000762:	4619      	moveq	r1, r3
 8000764:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000768:	d019      	beq.n	800079e <__aeabi_dmul+0x24a>
 800076a:	ea94 0f0c 	teq	r4, ip
 800076e:	d102      	bne.n	8000776 <__aeabi_dmul+0x222>
 8000770:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000774:	d113      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000776:	ea95 0f0c 	teq	r5, ip
 800077a:	d105      	bne.n	8000788 <__aeabi_dmul+0x234>
 800077c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000780:	bf1c      	itt	ne
 8000782:	4610      	movne	r0, r2
 8000784:	4619      	movne	r1, r3
 8000786:	d10a      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000794:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a6:	bd70      	pop	{r4, r5, r6, pc}

080007a8 <__aeabi_ddiv>:
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b6:	bf1d      	ittte	ne
 80007b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007bc:	ea94 0f0c 	teqne	r4, ip
 80007c0:	ea95 0f0c 	teqne	r5, ip
 80007c4:	f000 f8a7 	bleq	8000916 <__aeabi_ddiv+0x16e>
 80007c8:	eba4 0405 	sub.w	r4, r4, r5
 80007cc:	ea81 0e03 	eor.w	lr, r1, r3
 80007d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d8:	f000 8088 	beq.w	80008ec <__aeabi_ddiv+0x144>
 80007dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000800:	429d      	cmp	r5, r3
 8000802:	bf08      	it	eq
 8000804:	4296      	cmpeq	r6, r2
 8000806:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080e:	d202      	bcs.n	8000816 <__aeabi_ddiv+0x6e>
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	1ab6      	subs	r6, r6, r2
 8000818:	eb65 0503 	sbc.w	r5, r5, r3
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000826:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 000c 	orrcs.w	r0, r0, ip
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000884:	ea55 0e06 	orrs.w	lr, r5, r6
 8000888:	d018      	beq.n	80008bc <__aeabi_ddiv+0x114>
 800088a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000892:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000896:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a6:	d1c0      	bne.n	800082a <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	d10b      	bne.n	80008c6 <__aeabi_ddiv+0x11e>
 80008ae:	ea41 0100 	orr.w	r1, r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ba:	e7b6      	b.n	800082a <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	bf04      	itt	eq
 80008c2:	4301      	orreq	r1, r0
 80008c4:	2000      	moveq	r0, #0
 80008c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ca:	bf88      	it	hi
 80008cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d0:	f63f aeaf 	bhi.w	8000632 <__aeabi_dmul+0xde>
 80008d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d8:	bf04      	itt	eq
 80008da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e2:	f150 0000 	adcs.w	r0, r0, #0
 80008e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f8:	bfc2      	ittt	gt
 80008fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000902:	bd70      	popgt	{r4, r5, r6, pc}
 8000904:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000908:	f04f 0e00 	mov.w	lr, #0
 800090c:	3c01      	subs	r4, #1
 800090e:	e690      	b.n	8000632 <__aeabi_dmul+0xde>
 8000910:	ea45 0e06 	orr.w	lr, r5, r6
 8000914:	e68d      	b.n	8000632 <__aeabi_dmul+0xde>
 8000916:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091a:	ea94 0f0c 	teq	r4, ip
 800091e:	bf08      	it	eq
 8000920:	ea95 0f0c 	teqeq	r5, ip
 8000924:	f43f af3b 	beq.w	800079e <__aeabi_dmul+0x24a>
 8000928:	ea94 0f0c 	teq	r4, ip
 800092c:	d10a      	bne.n	8000944 <__aeabi_ddiv+0x19c>
 800092e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000932:	f47f af34 	bne.w	800079e <__aeabi_dmul+0x24a>
 8000936:	ea95 0f0c 	teq	r5, ip
 800093a:	f47f af25 	bne.w	8000788 <__aeabi_dmul+0x234>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e72c      	b.n	800079e <__aeabi_dmul+0x24a>
 8000944:	ea95 0f0c 	teq	r5, ip
 8000948:	d106      	bne.n	8000958 <__aeabi_ddiv+0x1b0>
 800094a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094e:	f43f aefd 	beq.w	800074c <__aeabi_dmul+0x1f8>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e722      	b.n	800079e <__aeabi_dmul+0x24a>
 8000958:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800095c:	bf18      	it	ne
 800095e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000962:	f47f aec5 	bne.w	80006f0 <__aeabi_dmul+0x19c>
 8000966:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096a:	f47f af0d 	bne.w	8000788 <__aeabi_dmul+0x234>
 800096e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000972:	f47f aeeb 	bne.w	800074c <__aeabi_dmul+0x1f8>
 8000976:	e712      	b.n	800079e <__aeabi_dmul+0x24a>

08000978 <__gedf2>:
 8000978:	f04f 3cff 	mov.w	ip, #4294967295
 800097c:	e006      	b.n	800098c <__cmpdf2+0x4>
 800097e:	bf00      	nop

08000980 <__ledf2>:
 8000980:	f04f 0c01 	mov.w	ip, #1
 8000984:	e002      	b.n	800098c <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__cmpdf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	bf18      	it	ne
 800099e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a2:	d01b      	beq.n	80009dc <__cmpdf2+0x54>
 80009a4:	b001      	add	sp, #4
 80009a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009aa:	bf0c      	ite	eq
 80009ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b0:	ea91 0f03 	teqne	r1, r3
 80009b4:	bf02      	ittt	eq
 80009b6:	ea90 0f02 	teqeq	r0, r2
 80009ba:	2000      	moveq	r0, #0
 80009bc:	4770      	bxeq	lr
 80009be:	f110 0f00 	cmn.w	r0, #0
 80009c2:	ea91 0f03 	teq	r1, r3
 80009c6:	bf58      	it	pl
 80009c8:	4299      	cmppl	r1, r3
 80009ca:	bf08      	it	eq
 80009cc:	4290      	cmpeq	r0, r2
 80009ce:	bf2c      	ite	cs
 80009d0:	17d8      	asrcs	r0, r3, #31
 80009d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d6:	f040 0001 	orr.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	d102      	bne.n	80009ec <__cmpdf2+0x64>
 80009e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ea:	d107      	bne.n	80009fc <__cmpdf2+0x74>
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d1d6      	bne.n	80009a4 <__cmpdf2+0x1c>
 80009f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fa:	d0d3      	beq.n	80009a4 <__cmpdf2+0x1c>
 80009fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_cdrcmple>:
 8000a04:	4684      	mov	ip, r0
 8000a06:	4610      	mov	r0, r2
 8000a08:	4662      	mov	r2, ip
 8000a0a:	468c      	mov	ip, r1
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4663      	mov	r3, ip
 8000a10:	e000      	b.n	8000a14 <__aeabi_cdcmpeq>
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdcmpeq>:
 8000a14:	b501      	push	{r0, lr}
 8000a16:	f7ff ffb7 	bl	8000988 <__cmpdf2>
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	bf48      	it	mi
 8000a1e:	f110 0f00 	cmnmi.w	r0, #0
 8000a22:	bd01      	pop	{r0, pc}

08000a24 <__aeabi_dcmpeq>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff fff4 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a2c:	bf0c      	ite	eq
 8000a2e:	2001      	moveq	r0, #1
 8000a30:	2000      	movne	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmplt>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffea 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a40:	bf34      	ite	cc
 8000a42:	2001      	movcc	r0, #1
 8000a44:	2000      	movcs	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmple>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffe0 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpge>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffce 	bl	8000a04 <__aeabi_cdrcmple>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpgt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffc4 	bl	8000a04 <__aeabi_cdrcmple>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2iz>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d215      	bcs.n	8000abe <__aeabi_d2iz+0x36>
 8000a92:	d511      	bpl.n	8000ab8 <__aeabi_d2iz+0x30>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d912      	bls.n	8000ac4 <__aeabi_d2iz+0x3c>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	bf18      	it	ne
 8000ab4:	4240      	negne	r0, r0
 8000ab6:	4770      	bx	lr
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac2:	d105      	bne.n	8000ad0 <__aeabi_d2iz+0x48>
 8000ac4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	bf08      	it	eq
 8000aca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_d2uiz>:
 8000ad8:	004a      	lsls	r2, r1, #1
 8000ada:	d211      	bcs.n	8000b00 <__aeabi_d2uiz+0x28>
 8000adc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae0:	d211      	bcs.n	8000b06 <__aeabi_d2uiz+0x2e>
 8000ae2:	d50d      	bpl.n	8000b00 <__aeabi_d2uiz+0x28>
 8000ae4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aec:	d40e      	bmi.n	8000b0c <__aeabi_d2uiz+0x34>
 8000aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_d2uiz+0x3a>
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_uldivmod>:
 8000b18:	b953      	cbnz	r3, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1a:	b94a      	cbnz	r2, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	bf08      	it	eq
 8000b20:	2800      	cmpeq	r0, #0
 8000b22:	bf1c      	itt	ne
 8000b24:	f04f 31ff 	movne.w	r1, #4294967295
 8000b28:	f04f 30ff 	movne.w	r0, #4294967295
 8000b2c:	f000 b96e 	b.w	8000e0c <__aeabi_idiv0>
 8000b30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b38:	f000 f806 	bl	8000b48 <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4770      	bx	lr

08000b48 <__udivmoddi4>:
 8000b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b4c:	9d08      	ldr	r5, [sp, #32]
 8000b4e:	4604      	mov	r4, r0
 8000b50:	468c      	mov	ip, r1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f040 8083 	bne.w	8000c5e <__udivmoddi4+0x116>
 8000b58:	428a      	cmp	r2, r1
 8000b5a:	4617      	mov	r7, r2
 8000b5c:	d947      	bls.n	8000bee <__udivmoddi4+0xa6>
 8000b5e:	fab2 f282 	clz	r2, r2
 8000b62:	b142      	cbz	r2, 8000b76 <__udivmoddi4+0x2e>
 8000b64:	f1c2 0020 	rsb	r0, r2, #32
 8000b68:	fa24 f000 	lsr.w	r0, r4, r0
 8000b6c:	4091      	lsls	r1, r2
 8000b6e:	4097      	lsls	r7, r2
 8000b70:	ea40 0c01 	orr.w	ip, r0, r1
 8000b74:	4094      	lsls	r4, r2
 8000b76:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b7a:	0c23      	lsrs	r3, r4, #16
 8000b7c:	fbbc f6f8 	udiv	r6, ip, r8
 8000b80:	fa1f fe87 	uxth.w	lr, r7
 8000b84:	fb08 c116 	mls	r1, r8, r6, ip
 8000b88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8c:	fb06 f10e 	mul.w	r1, r6, lr
 8000b90:	4299      	cmp	r1, r3
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x60>
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b9a:	f080 8119 	bcs.w	8000dd0 <__udivmoddi4+0x288>
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	f240 8116 	bls.w	8000dd0 <__udivmoddi4+0x288>
 8000ba4:	3e02      	subs	r6, #2
 8000ba6:	443b      	add	r3, r7
 8000ba8:	1a5b      	subs	r3, r3, r1
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x8c>
 8000bc0:	193c      	adds	r4, r7, r4
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	f080 8105 	bcs.w	8000dd4 <__udivmoddi4+0x28c>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f240 8102 	bls.w	8000dd4 <__udivmoddi4+0x28c>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	443c      	add	r4, r7
 8000bd4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd8:	eba4 040e 	sub.w	r4, r4, lr
 8000bdc:	2600      	movs	r6, #0
 8000bde:	b11d      	cbz	r5, 8000be8 <__udivmoddi4+0xa0>
 8000be0:	40d4      	lsrs	r4, r2
 8000be2:	2300      	movs	r3, #0
 8000be4:	e9c5 4300 	strd	r4, r3, [r5]
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	b902      	cbnz	r2, 8000bf2 <__udivmoddi4+0xaa>
 8000bf0:	deff      	udf	#255	; 0xff
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	2a00      	cmp	r2, #0
 8000bf8:	d150      	bne.n	8000c9c <__udivmoddi4+0x154>
 8000bfa:	1bcb      	subs	r3, r1, r7
 8000bfc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c00:	fa1f f887 	uxth.w	r8, r7
 8000c04:	2601      	movs	r6, #1
 8000c06:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c0a:	0c21      	lsrs	r1, r4, #16
 8000c0c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c14:	fb08 f30c 	mul.w	r3, r8, ip
 8000c18:	428b      	cmp	r3, r1
 8000c1a:	d907      	bls.n	8000c2c <__udivmoddi4+0xe4>
 8000c1c:	1879      	adds	r1, r7, r1
 8000c1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c22:	d202      	bcs.n	8000c2a <__udivmoddi4+0xe2>
 8000c24:	428b      	cmp	r3, r1
 8000c26:	f200 80e9 	bhi.w	8000dfc <__udivmoddi4+0x2b4>
 8000c2a:	4684      	mov	ip, r0
 8000c2c:	1ac9      	subs	r1, r1, r3
 8000c2e:	b2a3      	uxth	r3, r4
 8000c30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c34:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c38:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c3c:	fb08 f800 	mul.w	r8, r8, r0
 8000c40:	45a0      	cmp	r8, r4
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x10c>
 8000c44:	193c      	adds	r4, r7, r4
 8000c46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x10a>
 8000c4c:	45a0      	cmp	r8, r4
 8000c4e:	f200 80d9 	bhi.w	8000e04 <__udivmoddi4+0x2bc>
 8000c52:	4618      	mov	r0, r3
 8000c54:	eba4 0408 	sub.w	r4, r4, r8
 8000c58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c5c:	e7bf      	b.n	8000bde <__udivmoddi4+0x96>
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x12e>
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	f000 80b1 	beq.w	8000dca <__udivmoddi4+0x282>
 8000c68:	2600      	movs	r6, #0
 8000c6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6e:	4630      	mov	r0, r6
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	fab3 f683 	clz	r6, r3
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	d14a      	bne.n	8000d14 <__udivmoddi4+0x1cc>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d302      	bcc.n	8000c88 <__udivmoddi4+0x140>
 8000c82:	4282      	cmp	r2, r0
 8000c84:	f200 80b8 	bhi.w	8000df8 <__udivmoddi4+0x2b0>
 8000c88:	1a84      	subs	r4, r0, r2
 8000c8a:	eb61 0103 	sbc.w	r1, r1, r3
 8000c8e:	2001      	movs	r0, #1
 8000c90:	468c      	mov	ip, r1
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	d0a8      	beq.n	8000be8 <__udivmoddi4+0xa0>
 8000c96:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c9a:	e7a5      	b.n	8000be8 <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f603 	lsr.w	r6, r0, r3
 8000ca4:	4097      	lsls	r7, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cae:	40d9      	lsrs	r1, r3
 8000cb0:	4330      	orrs	r0, r6
 8000cb2:	0c03      	lsrs	r3, r0, #16
 8000cb4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cb8:	fa1f f887 	uxth.w	r8, r7
 8000cbc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc4:	fb06 f108 	mul.w	r1, r6, r8
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	fa04 f402 	lsl.w	r4, r4, r2
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x19c>
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cd6:	f080 808d 	bcs.w	8000df4 <__udivmoddi4+0x2ac>
 8000cda:	4299      	cmp	r1, r3
 8000cdc:	f240 808a 	bls.w	8000df4 <__udivmoddi4+0x2ac>
 8000ce0:	3e02      	subs	r6, #2
 8000ce2:	443b      	add	r3, r7
 8000ce4:	1a5b      	subs	r3, r3, r1
 8000ce6:	b281      	uxth	r1, r0
 8000ce8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb00 f308 	mul.w	r3, r0, r8
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x1c4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d02:	d273      	bcs.n	8000dec <__udivmoddi4+0x2a4>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	d971      	bls.n	8000dec <__udivmoddi4+0x2a4>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4439      	add	r1, r7
 8000d0c:	1acb      	subs	r3, r1, r3
 8000d0e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d12:	e778      	b.n	8000c06 <__udivmoddi4+0xbe>
 8000d14:	f1c6 0c20 	rsb	ip, r6, #32
 8000d18:	fa03 f406 	lsl.w	r4, r3, r6
 8000d1c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d20:	431c      	orrs	r4, r3
 8000d22:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d26:	fa01 f306 	lsl.w	r3, r1, r6
 8000d2a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d2e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d32:	431f      	orrs	r7, r3
 8000d34:	0c3b      	lsrs	r3, r7, #16
 8000d36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d3a:	fa1f f884 	uxth.w	r8, r4
 8000d3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d42:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d46:	fb09 fa08 	mul.w	sl, r9, r8
 8000d4a:	458a      	cmp	sl, r1
 8000d4c:	fa02 f206 	lsl.w	r2, r2, r6
 8000d50:	fa00 f306 	lsl.w	r3, r0, r6
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x220>
 8000d56:	1861      	adds	r1, r4, r1
 8000d58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d5c:	d248      	bcs.n	8000df0 <__udivmoddi4+0x2a8>
 8000d5e:	458a      	cmp	sl, r1
 8000d60:	d946      	bls.n	8000df0 <__udivmoddi4+0x2a8>
 8000d62:	f1a9 0902 	sub.w	r9, r9, #2
 8000d66:	4421      	add	r1, r4
 8000d68:	eba1 010a 	sub.w	r1, r1, sl
 8000d6c:	b2bf      	uxth	r7, r7
 8000d6e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d72:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d76:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d7a:	fb00 f808 	mul.w	r8, r0, r8
 8000d7e:	45b8      	cmp	r8, r7
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x24a>
 8000d82:	19e7      	adds	r7, r4, r7
 8000d84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d88:	d22e      	bcs.n	8000de8 <__udivmoddi4+0x2a0>
 8000d8a:	45b8      	cmp	r8, r7
 8000d8c:	d92c      	bls.n	8000de8 <__udivmoddi4+0x2a0>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4427      	add	r7, r4
 8000d92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d96:	eba7 0708 	sub.w	r7, r7, r8
 8000d9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9e:	454f      	cmp	r7, r9
 8000da0:	46c6      	mov	lr, r8
 8000da2:	4649      	mov	r1, r9
 8000da4:	d31a      	bcc.n	8000ddc <__udivmoddi4+0x294>
 8000da6:	d017      	beq.n	8000dd8 <__udivmoddi4+0x290>
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x27a>
 8000daa:	ebb3 020e 	subs.w	r2, r3, lr
 8000dae:	eb67 0701 	sbc.w	r7, r7, r1
 8000db2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000db6:	40f2      	lsrs	r2, r6
 8000db8:	ea4c 0202 	orr.w	r2, ip, r2
 8000dbc:	40f7      	lsrs	r7, r6
 8000dbe:	e9c5 2700 	strd	r2, r7, [r5]
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	462e      	mov	r6, r5
 8000dcc:	4628      	mov	r0, r5
 8000dce:	e70b      	b.n	8000be8 <__udivmoddi4+0xa0>
 8000dd0:	4606      	mov	r6, r0
 8000dd2:	e6e9      	b.n	8000ba8 <__udivmoddi4+0x60>
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	e6fd      	b.n	8000bd4 <__udivmoddi4+0x8c>
 8000dd8:	4543      	cmp	r3, r8
 8000dda:	d2e5      	bcs.n	8000da8 <__udivmoddi4+0x260>
 8000ddc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000de0:	eb69 0104 	sbc.w	r1, r9, r4
 8000de4:	3801      	subs	r0, #1
 8000de6:	e7df      	b.n	8000da8 <__udivmoddi4+0x260>
 8000de8:	4608      	mov	r0, r1
 8000dea:	e7d2      	b.n	8000d92 <__udivmoddi4+0x24a>
 8000dec:	4660      	mov	r0, ip
 8000dee:	e78d      	b.n	8000d0c <__udivmoddi4+0x1c4>
 8000df0:	4681      	mov	r9, r0
 8000df2:	e7b9      	b.n	8000d68 <__udivmoddi4+0x220>
 8000df4:	4666      	mov	r6, ip
 8000df6:	e775      	b.n	8000ce4 <__udivmoddi4+0x19c>
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e74a      	b.n	8000c92 <__udivmoddi4+0x14a>
 8000dfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e00:	4439      	add	r1, r7
 8000e02:	e713      	b.n	8000c2c <__udivmoddi4+0xe4>
 8000e04:	3802      	subs	r0, #2
 8000e06:	443c      	add	r4, r7
 8000e08:	e724      	b.n	8000c54 <__udivmoddi4+0x10c>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <cmd_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t cmd_init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
	LOGI(TAG, "Initialized command module.");
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <cmd_init+0x50>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d01a      	beq.n	8000e54 <cmd_init+0x44>
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <cmd_init+0x54>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	dd16      	ble.n	8000e54 <cmd_init+0x44>
 8000e26:	f003 f991 	bl	800414c <HAL_GetTick>
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <cmd_init+0x58>)
 8000e30:	fba2 2303 	umull	r2, r3, r2, r3
 8000e34:	0999      	lsrs	r1, r3, #6
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <cmd_init+0x58>)
 8000e3a:	fba2 0203 	umull	r0, r2, r2, r3
 8000e3e:	0992      	lsrs	r2, r2, #6
 8000e40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e44:	fb00 f202 	mul.w	r2, r0, r2
 8000e48:	1a9a      	subs	r2, r3, r2
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <cmd_init+0x5c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4808      	ldr	r0, [pc, #32]	; (8000e70 <cmd_init+0x60>)
 8000e50:	f000 fc70 	bl	8001734 <log_printf>
    return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000054 	.word	0x20000054
 8000e64:	20000058 	.word	0x20000058
 8000e68:	10624dd3 	.word	0x10624dd3
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	08006bc4 	.word	0x08006bc4

08000e74 <cmd_register>:

mod_err_t cmd_register(const cmd_client_info *_client_info)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < CMD_MAX_CLIENTS; i++)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e01d      	b.n	8000ebe <cmd_register+0x4a>
    {
        if (client_infos[i] == NULL || strcasecmp(client_infos[i]->client_name, _client_info->client_name) == 0)
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <cmd_register+0x5c>)
 8000e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00d      	beq.n	8000eaa <cmd_register+0x36>
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <cmd_register+0x5c>)
 8000e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	f005 fe42 	bl	8006b28 <strcasecmp>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d106      	bne.n	8000eb8 <cmd_register+0x44>
        {
            client_infos[i] = _client_info;
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	4908      	ldr	r1, [pc, #32]	; (8000ed0 <cmd_register+0x5c>)
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return MOD_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e006      	b.n	8000ec6 <cmd_register+0x52>
    for (uint8_t i = 0; i < CMD_MAX_CLIENTS; i++)
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	2b09      	cmp	r3, #9
 8000ec2:	d9de      	bls.n	8000e82 <cmd_register+0xe>
        }
    }
    return MOD_ERR_RESOURCE;
 8000ec4:	2302      	movs	r3, #2
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000011c 	.word	0x2000011c

08000ed4 <cmd_execute>:

mod_err_t cmd_execute(char *cmd_line)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b092      	sub	sp, #72	; 0x48
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	6078      	str	r0, [r7, #4]
    LOGI(TAG, "Command received: %s", cmd_line);
 8000edc:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <cmd_execute+0xcc>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d01d      	beq.n	8000f20 <cmd_execute+0x4c>
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <cmd_execute+0xd0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	dd19      	ble.n	8000f20 <cmd_execute+0x4c>
 8000eec:	f003 f92e 	bl	800414c <HAL_GetTick>
 8000ef0:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ef4:	4a2c      	ldr	r2, [pc, #176]	; (8000fa8 <cmd_execute+0xd4>)
 8000ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8000efa:	0999      	lsrs	r1, r3, #6
 8000efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000efe:	4a2a      	ldr	r2, [pc, #168]	; (8000fa8 <cmd_execute+0xd4>)
 8000f00:	fba2 0203 	umull	r0, r2, r2, r3
 8000f04:	0992      	lsrs	r2, r2, #6
 8000f06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f0a:	fb00 f202 	mul.w	r2, r0, r2
 8000f0e:	1a9a      	subs	r2, r3, r2
 8000f10:	4b26      	ldr	r3, [pc, #152]	; (8000fac <cmd_execute+0xd8>)
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4825      	ldr	r0, [pc, #148]	; (8000fb0 <cmd_execute+0xdc>)
 8000f1c:	f000 fc0a 	bl	8001734 <log_printf>
    uint32_t num_tokens = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	637b      	str	r3, [r7, #52]	; 0x34
    const char *tokens[CMD_MAX_TOKENS] = {0}; // Store individual tokens as strings.
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	2228      	movs	r2, #40	; 0x28
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f005 fd39 	bl	80069a4 <memset>

    /* Tokenize command line */
    mod_err_t err = tokenize(cmd_line, tokens, &num_tokens);
 8000f32:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 f839 	bl	8000fb4 <tokenize>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (err)
 8000f48:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <cmd_execute+0x82>
    {
        return err;
 8000f50:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f54:	e01f      	b.n	8000f96 <cmd_execute+0xc2>
    }

    /* If there are no tokens, nothing to do. */
    if (num_tokens == 0)
 8000f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d101      	bne.n	8000f60 <cmd_execute+0x8c>
    {
        return MOD_OK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e01a      	b.n	8000f96 <cmd_execute+0xc2>
    }

    /* Handle help/? command. */
    err = help_handler(tokens);
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 f8a9 	bl	80010bc <help_handler>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if(err != MOD_DID_NOTHING)
 8000f70:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d002      	beq.n	8000f7e <cmd_execute+0xaa>
    {
        return err;
 8000f78:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7c:	e00b      	b.n	8000f96 <cmd_execute+0xc2>
    }
   
    err = client_command_handler(tokens, num_tokens);
 8000f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f922 	bl	80011d0 <client_command_handler>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    return err;
 8000f92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3740      	adds	r7, #64	; 0x40
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000054 	.word	0x20000054
 8000fa4:	20000058 	.word	0x20000058
 8000fa8:	10624dd3 	.word	0x10624dd3
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	08006bfc 	.word	0x08006bfc

08000fb4 <tokenize>:
 * @return MOD_OK if successful, "MOD_ERR_" otherwise.
 * 
 * Tokens include name of client, command, and arguments passed.
 */
static mod_err_t tokenize(char *str_to_tokenize, const char **tokens, uint32_t *num_tokens)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
    char *ptr = str_to_tokenize;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	61fb      	str	r3, [r7, #28]
    uint32_t token_count = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]

    /* Iterate through each token. */
    while (1)
    {
        /* Find start of token. */
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 8000fc8:	e002      	b.n	8000fd0 <tokenize+0x1c>
        {
            ptr++;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	61fb      	str	r3, [r7, #28]
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d009      	beq.n	8000fec <tokenize+0x38>
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	4a31      	ldr	r2, [pc, #196]	; (80010a4 <tokenize+0xf0>)
 8000fe0:	4413      	add	r3, r2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1ee      	bne.n	8000fca <tokenize+0x16>
        }

        if (*ptr == '\0') // Found end of line.
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d04c      	beq.n	800108e <tokenize+0xda>
        {
            break;
        }
        else
        {
            if (token_count >= CMD_MAX_TOKENS)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	2b09      	cmp	r3, #9
 8000ff8:	d920      	bls.n	800103c <tokenize+0x88>
            {
                LOGW(TAG, "Too many tokens");
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <tokenize+0xf4>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d01a      	beq.n	8001038 <tokenize+0x84>
 8001002:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <tokenize+0xf8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b01      	cmp	r3, #1
 8001008:	dd16      	ble.n	8001038 <tokenize+0x84>
 800100a:	f003 f89f 	bl	800414c <HAL_GetTick>
 800100e:	6178      	str	r0, [r7, #20]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	4a27      	ldr	r2, [pc, #156]	; (80010b0 <tokenize+0xfc>)
 8001014:	fba2 2303 	umull	r2, r3, r2, r3
 8001018:	0999      	lsrs	r1, r3, #6
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	4a24      	ldr	r2, [pc, #144]	; (80010b0 <tokenize+0xfc>)
 800101e:	fba2 0203 	umull	r0, r2, r2, r3
 8001022:	0992      	lsrs	r2, r2, #6
 8001024:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001028:	fb00 f202 	mul.w	r2, r0, r2
 800102c:	1a9a      	subs	r2, r3, r2
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <tokenize+0x100>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4821      	ldr	r0, [pc, #132]	; (80010b8 <tokenize+0x104>)
 8001034:	f000 fb7e 	bl	8001734 <log_printf>
                return MOD_ERR_BAD_CMD;
 8001038:	2303      	movs	r3, #3
 800103a:	e02f      	b.n	800109c <tokenize+0xe8>
            }
            else
            {   
                /* Record pointer to start of token, then find end of token. */
                tokens[token_count] = ptr;
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	4413      	add	r3, r2
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	601a      	str	r2, [r3, #0]
                ptr++;
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	3301      	adds	r3, #1
 800104c:	61fb      	str	r3, [r7, #28]
                token_count++;
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	3301      	adds	r3, #1
 8001052:	61bb      	str	r3, [r7, #24]
                while (*ptr != '\0' && !isspace((unsigned char)*ptr))
 8001054:	e002      	b.n	800105c <tokenize+0xa8>
                {
                    ptr++;
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3301      	adds	r3, #1
 800105a:	61fb      	str	r3, [r7, #28]
                while (*ptr != '\0' && !isspace((unsigned char)*ptr))
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d009      	beq.n	8001078 <tokenize+0xc4>
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <tokenize+0xf0>)
 800106c:	4413      	add	r3, r2
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	f003 0308 	and.w	r3, r3, #8
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0ee      	beq.n	8001056 <tokenize+0xa2>
                }
                if (*ptr != '\0')
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <tokenize+0xde>
                {
                    *ptr = '\0'; // Terminate end of token.
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
                    ptr++;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3301      	adds	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 800108c:	e7a0      	b.n	8000fd0 <tokenize+0x1c>
            break;
 800108e:	bf00      	nop
 8001090:	e000      	b.n	8001094 <tokenize+0xe0>
                }
                else
                {
                    break; // Found end of line ('\0'), no more tokens.
 8001092:	bf00      	nop
                }
            }
        }
    }

    *num_tokens = token_count;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	601a      	str	r2, [r3, #0]
    return MOD_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3720      	adds	r7, #32
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	080073c0 	.word	0x080073c0
 80010a8:	20000054 	.word	0x20000054
 80010ac:	20000058 	.word	0x20000058
 80010b0:	10624dd3 	.word	0x10624dd3
 80010b4:	20000000 	.word	0x20000000
 80010b8:	08006d10 	.word	0x08006d10

080010bc <help_handler>:
 *         otherwise a "MOD_ERR" value.
 * 
 * Iterates through each client infos 
 */
static mod_err_t help_handler(const char** tokens)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
    if (strcasecmp("help", tokens[0]) == 0 || strcasecmp("?", tokens[0]) == 0)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4837      	ldr	r0, [pc, #220]	; (80011a8 <help_handler+0xec>)
 80010cc:	f005 fd2c 	bl	8006b28 <strcasecmp>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <help_handler+0x2c>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	4833      	ldr	r0, [pc, #204]	; (80011ac <help_handler+0xf0>)
 80010de:	f005 fd23 	bl	8006b28 <strcasecmp>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d159      	bne.n	800119c <help_handler+0xe0>
    {
        /* Iterate through commands of each client. */
        for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	75fb      	strb	r3, [r7, #23]
 80010ec:	e04b      	b.n	8001186 <help_handler+0xca>
        {
            const cmd_client_info *ci = client_infos[i];
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
 80010f0:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <help_handler+0xf4>)
 80010f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f6:	613b      	str	r3, [r7, #16]

            LOG("%s (", ci->client_name);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	482d      	ldr	r0, [pc, #180]	; (80011b4 <help_handler+0xf8>)
 8001100:	f000 fb18 	bl	8001734 <log_printf>

            if (ci->num_u16_pms > 0 && ci->num_cmds == 0)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d007      	beq.n	800111c <help_handler+0x60>
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d103      	bne.n	800111c <help_handler+0x60>
			{
                /* If client provided pm info only, display pm command. */
				LOG("pm)\r\n");
 8001114:	4828      	ldr	r0, [pc, #160]	; (80011b8 <help_handler+0xfc>)
 8001116:	f000 fb0d 	bl	8001734 <log_printf>
				continue;
 800111a:	e031      	b.n	8001180 <help_handler+0xc4>
			}
            else if(ci->num_cmds == 0)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d02c      	beq.n	800117e <help_handler+0xc2>
            {
            	continue;
            }
            else
            {
            	uint8_t i2 = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	75bb      	strb	r3, [r7, #22]
            	for (i2 = 0; i2 < ci->num_cmds; i2++)
 8001128:	2300      	movs	r3, #0
 800112a:	75bb      	strb	r3, [r7, #22]
 800112c:	e017      	b.n	800115e <help_handler+0xa2>
            	{
					const cmd_cmd_info* cci = &(ci->cmds[i2]);
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	6899      	ldr	r1, [r3, #8]
 8001132:	7dba      	ldrb	r2, [r7, #22]
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	60fb      	str	r3, [r7, #12]
					LOG("%s%s", i2 == 0 ? "" : ", ", cci->cmd_name);
 8001140:	7dbb      	ldrb	r3, [r7, #22]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <help_handler+0x8e>
 8001146:	491d      	ldr	r1, [pc, #116]	; (80011bc <help_handler+0x100>)
 8001148:	e000      	b.n	800114c <help_handler+0x90>
 800114a:	491d      	ldr	r1, [pc, #116]	; (80011c0 <help_handler+0x104>)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	481c      	ldr	r0, [pc, #112]	; (80011c4 <help_handler+0x108>)
 8001154:	f000 faee 	bl	8001734 <log_printf>
            	for (i2 = 0; i2 < ci->num_cmds; i2++)
 8001158:	7dbb      	ldrb	r3, [r7, #22]
 800115a:	3301      	adds	r3, #1
 800115c:	75bb      	strb	r3, [r7, #22]
 800115e:	7dba      	ldrb	r2, [r7, #22]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	d3e2      	bcc.n	800112e <help_handler+0x72>
            	}
              	if (ci->num_u16_pms > 0)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <help_handler+0xba>
				{
					LOG(", pm");
 8001170:	4815      	ldr	r0, [pc, #84]	; (80011c8 <help_handler+0x10c>)
 8001172:	f000 fadf 	bl	8001734 <log_printf>
				}
              	LOG(")\r\n");
 8001176:	4815      	ldr	r0, [pc, #84]	; (80011cc <help_handler+0x110>)
 8001178:	f000 fadc 	bl	8001734 <log_printf>
 800117c:	e000      	b.n	8001180 <help_handler+0xc4>
            	continue;
 800117e:	bf00      	nop
        for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	3301      	adds	r3, #1
 8001184:	75fb      	strb	r3, [r7, #23]
 8001186:	7dfb      	ldrb	r3, [r7, #23]
 8001188:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <help_handler+0xf4>)
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <help_handler+0xdc>
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	2b09      	cmp	r3, #9
 8001196:	d9aa      	bls.n	80010ee <help_handler+0x32>
            }
        }

        return MOD_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	e000      	b.n	800119e <help_handler+0xe2>
    }

    return MOD_DID_NOTHING; // Not a top-level help command.
 800119c:	2308      	movs	r3, #8
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	08006d3c 	.word	0x08006d3c
 80011ac:	08006d44 	.word	0x08006d44
 80011b0:	2000011c 	.word	0x2000011c
 80011b4:	08006d48 	.word	0x08006d48
 80011b8:	08006d54 	.word	0x08006d54
 80011bc:	08006d64 	.word	0x08006d64
 80011c0:	08006d68 	.word	0x08006d68
 80011c4:	08006d6c 	.word	0x08006d6c
 80011c8:	08006d78 	.word	0x08006d78
 80011cc:	08006d84 	.word	0x08006d84

080011d0 <client_command_handler>:
 * @return MOD_OK if successful, 
 *         MOD_DID_NOTHING if not a client command, 
 *         otherwise a "MOD_ERR" value.
 */
static mod_err_t client_command_handler(const char** tokens, uint32_t num_tokens)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 80011da:	2300      	movs	r3, #0
 80011dc:	77fb      	strb	r3, [r7, #31]
 80011de:	e11c      	b.n	800141a <client_command_handler+0x24a>
    {
        const cmd_client_info* ci = client_infos[i];
 80011e0:	7ffb      	ldrb	r3, [r7, #31]
 80011e2:	4aa2      	ldr	r2, [pc, #648]	; (800146c <client_command_handler+0x29c>)
 80011e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e8:	617b      	str	r3, [r7, #20]

        /* Look for correct client first */
        if (strcasecmp(tokens[0], ci->client_name) != 0)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4619      	mov	r1, r3
 80011f4:	4610      	mov	r0, r2
 80011f6:	f005 fc97 	bl	8006b28 <strcasecmp>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <client_command_handler+0x38>
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001200:	7ffb      	ldrb	r3, [r7, #31]
 8001202:	3301      	adds	r3, #1
 8001204:	77fb      	strb	r3, [r7, #31]
 8001206:	e108      	b.n	800141a <client_command_handler+0x24a>
        {
            continue;
        }

        /* If there is no command with client, assume they want help. */
        if (num_tokens == 1)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d103      	bne.n	8001216 <client_command_handler+0x46>
        {
            tokens[1] = "help";
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3304      	adds	r3, #4
 8001212:	4a97      	ldr	r2, [pc, #604]	; (8001470 <client_command_handler+0x2a0>)
 8001214:	601a      	str	r2, [r3, #0]
        }

        /* Handle help command directly. */
        if (strcasecmp(tokens[1], "help") == 0 || strcasecmp(tokens[1], "?") == 0)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3304      	adds	r3, #4
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4994      	ldr	r1, [pc, #592]	; (8001470 <client_command_handler+0x2a0>)
 800121e:	4618      	mov	r0, r3
 8001220:	f005 fc82 	bl	8006b28 <strcasecmp>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d009      	beq.n	800123e <client_command_handler+0x6e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3304      	adds	r3, #4
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4990      	ldr	r1, [pc, #576]	; (8001474 <client_command_handler+0x2a4>)
 8001232:	4618      	mov	r0, r3
 8001234:	f005 fc78 	bl	8006b28 <strcasecmp>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d128      	bne.n	8001290 <client_command_handler+0xc0>
        {
        	/* Print out all commands associated with client */
            for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 800123e:	2300      	movs	r3, #0
 8001240:	77bb      	strb	r3, [r7, #30]
 8001242:	e014      	b.n	800126e <client_command_handler+0x9e>
            {
                const cmd_cmd_info* cci = &(ci->cmds[i2]);
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	6899      	ldr	r1, [r3, #8]
 8001248:	7fba      	ldrb	r2, [r7, #30]
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	60fb      	str	r3, [r7, #12]
                LOG("%s %s: %s\r\n", ci->client_name, cci->cmd_name, cci->help);
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	6819      	ldr	r1, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	4885      	ldr	r0, [pc, #532]	; (8001478 <client_command_handler+0x2a8>)
 8001264:	f000 fa66 	bl	8001734 <log_printf>
            for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 8001268:	7fbb      	ldrb	r3, [r7, #30]
 800126a:	3301      	adds	r3, #1
 800126c:	77bb      	strb	r3, [r7, #30]
 800126e:	7fba      	ldrb	r2, [r7, #30]
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	429a      	cmp	r2, r3
 8001276:	d3e5      	bcc.n	8001244 <client_command_handler+0x74>
            }
            /* If client provided pm info, print help for pm command also. */
            if (ci->num_u16_pms > 0)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d005      	beq.n	800128c <client_command_handler+0xbc>
            {
                LOG("%s pm: get or clear performance measurements, "
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	487d      	ldr	r0, [pc, #500]	; (800147c <client_command_handler+0x2ac>)
 8001288:	f000 fa54 	bl	8001734 <log_printf>
                        "args: [clear] \r\n", ci->client_name);
            }

            return MOD_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	e0e8      	b.n	8001462 <client_command_handler+0x292>
        }


        /* Handle pm command directly. */
        if (strcasecmp(tokens[1], "pm") == 0)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3304      	adds	r3, #4
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	497a      	ldr	r1, [pc, #488]	; (8001480 <client_command_handler+0x2b0>)
 8001298:	4618      	mov	r0, r3
 800129a:	f005 fc45 	bl	8006b28 <strcasecmp>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d150      	bne.n	8001346 <client_command_handler+0x176>
        {
            if (ci->num_u16_pms > 0)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d04a      	beq.n	8001342 <client_command_handler+0x172>
            {
                bool clear = (num_tokens >= 3 && strcasecmp(tokens[2], "clear") == 0);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d90b      	bls.n	80012ca <client_command_handler+0xfa>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3308      	adds	r3, #8
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4972      	ldr	r1, [pc, #456]	; (8001484 <client_command_handler+0x2b4>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f005 fc34 	bl	8006b28 <strcasecmp>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <client_command_handler+0xfa>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <client_command_handler+0xfc>
 80012ca:	2300      	movs	r3, #0
 80012cc:	74fb      	strb	r3, [r7, #19]
 80012ce:	7cfb      	ldrb	r3, [r7, #19]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	74fb      	strb	r3, [r7, #19]
                if (clear)
 80012d6:	7cfb      	ldrb	r3, [r7, #19]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d006      	beq.n	80012ea <client_command_handler+0x11a>
                {
                    LOG("Clearing %s performance measurements\r\n", ci->client_name);
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	4869      	ldr	r0, [pc, #420]	; (8001488 <client_command_handler+0x2b8>)
 80012e4:	f000 fa26 	bl	8001734 <log_printf>
 80012e8:	e005      	b.n	80012f6 <client_command_handler+0x126>
                }
                else
                {
                    LOG("%s pms:\r\n", ci->client_name);
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4619      	mov	r1, r3
 80012f0:	4866      	ldr	r0, [pc, #408]	; (800148c <client_command_handler+0x2bc>)
 80012f2:	f000 fa1f 	bl	8001734 <log_printf>
                }
                for (uint8_t i2 = 0; i2 < ci->num_u16_pms; i2++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	777b      	strb	r3, [r7, #29]
 80012fa:	e01d      	b.n	8001338 <client_command_handler+0x168>
                {
                    if (clear)
 80012fc:	7cfb      	ldrb	r3, [r7, #19]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <client_command_handler+0x142>
                    {
                        ci->u16_pms[i2] = 0;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	691a      	ldr	r2, [r3, #16]
 8001306:	7f7b      	ldrb	r3, [r7, #29]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	2200      	movs	r2, #0
 800130e:	801a      	strh	r2, [r3, #0]
 8001310:	e00f      	b.n	8001332 <client_command_handler+0x162>
                    }
                    else
                    {
                        LOG("%s: %d\r\n", ci->u16_pm_names[i2], ci->u16_pms[i2]);
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	695a      	ldr	r2, [r3, #20]
 8001316:	7f7b      	ldrb	r3, [r7, #29]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	6819      	ldr	r1, [r3, #0]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	691a      	ldr	r2, [r3, #16]
 8001322:	7f7b      	ldrb	r3, [r7, #29]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	4858      	ldr	r0, [pc, #352]	; (8001490 <client_command_handler+0x2c0>)
 800132e:	f000 fa01 	bl	8001734 <log_printf>
                for (uint8_t i2 = 0; i2 < ci->num_u16_pms; i2++)
 8001332:	7f7b      	ldrb	r3, [r7, #29]
 8001334:	3301      	adds	r3, #1
 8001336:	777b      	strb	r3, [r7, #29]
 8001338:	7f7a      	ldrb	r2, [r7, #29]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	429a      	cmp	r2, r3
 8001340:	d3dc      	bcc.n	80012fc <client_command_handler+0x12c>
                    }
                }
            }

            return MOD_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e08d      	b.n	8001462 <client_command_handler+0x292>
        }


        /* Look for command within client. */
        for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 8001346:	2300      	movs	r3, #0
 8001348:	773b      	strb	r3, [r7, #28]
 800134a:	e056      	b.n	80013fa <client_command_handler+0x22a>
        {
            if (strcasecmp(tokens[1], ci->cmds[i2].cmd_name) == 0)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3304      	adds	r3, #4
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	6899      	ldr	r1, [r3, #8]
 8001356:	7f3a      	ldrb	r2, [r7, #28]
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	f005 fbdf 	bl	8006b28 <strcasecmp>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d141      	bne.n	80013f4 <client_command_handler+0x224>
            {
                if(num_tokens == 3 && (strcasecmp(tokens[2], "help") == 0 || strcasecmp(tokens[2], "?") == 0))
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2b03      	cmp	r3, #3
 8001374:	d12d      	bne.n	80013d2 <client_command_handler+0x202>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3308      	adds	r3, #8
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	493c      	ldr	r1, [pc, #240]	; (8001470 <client_command_handler+0x2a0>)
 800137e:	4618      	mov	r0, r3
 8001380:	f005 fbd2 	bl	8006b28 <strcasecmp>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d009      	beq.n	800139e <client_command_handler+0x1ce>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3308      	adds	r3, #8
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4938      	ldr	r1, [pc, #224]	; (8001474 <client_command_handler+0x2a4>)
 8001392:	4618      	mov	r0, r3
 8001394:	f005 fbc8 	bl	8006b28 <strcasecmp>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d119      	bne.n	80013d2 <client_command_handler+0x202>
                {
                    LOG("%s %s: %s\r\n", ci->client_name, ci->cmds[i2].cmd_name, ci->cmds[i2].help);
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	6899      	ldr	r1, [r3, #8]
 80013a6:	7f3a      	ldrb	r2, [r7, #28]
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	681c      	ldr	r4, [r3, #0]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	6899      	ldr	r1, [r3, #8]
 80013b8:	7f3a      	ldrb	r2, [r7, #28]
 80013ba:	4613      	mov	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	440b      	add	r3, r1
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	4622      	mov	r2, r4
 80013c8:	4601      	mov	r1, r0
 80013ca:	482b      	ldr	r0, [pc, #172]	; (8001478 <client_command_handler+0x2a8>)
 80013cc:	f000 f9b2 	bl	8001734 <log_printf>
 80013d0:	e00e      	b.n	80013f0 <client_command_handler+0x220>
                }
                else 
                {
                    ci->cmds[i2].cb(num_tokens - 2, tokens + 2); // Ignore client and command tokens.
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	6899      	ldr	r1, [r3, #8]
 80013d6:	7f3a      	ldrb	r2, [r7, #28]
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	1e90      	subs	r0, r2, #2
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	4611      	mov	r1, r2
 80013ee:	4798      	blx	r3
                }
                return MOD_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	e036      	b.n	8001462 <client_command_handler+0x292>
        for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 80013f4:	7f3b      	ldrb	r3, [r7, #28]
 80013f6:	3301      	adds	r3, #1
 80013f8:	773b      	strb	r3, [r7, #28]
 80013fa:	7f3a      	ldrb	r2, [r7, #28]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	d3a3      	bcc.n	800134c <client_command_handler+0x17c>
            }
        }

        LOG("No such command (%s %s)\r\n", tokens[0], tokens[1]);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6819      	ldr	r1, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3304      	adds	r3, #4
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	4820      	ldr	r0, [pc, #128]	; (8001494 <client_command_handler+0x2c4>)
 8001412:	f000 f98f 	bl	8001734 <log_printf>
        return MOD_ERR_BAD_CMD;
 8001416:	2303      	movs	r3, #3
 8001418:	e023      	b.n	8001462 <client_command_handler+0x292>
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 800141a:	7ffb      	ldrb	r3, [r7, #31]
 800141c:	4a13      	ldr	r2, [pc, #76]	; (800146c <client_command_handler+0x29c>)
 800141e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <client_command_handler+0x25e>
 8001426:	7ffb      	ldrb	r3, [r7, #31]
 8001428:	2b09      	cmp	r3, #9
 800142a:	f67f aed9 	bls.w	80011e0 <client_command_handler+0x10>
    }

    /* Could not find client */
    LOG("No such command ");
 800142e:	481a      	ldr	r0, [pc, #104]	; (8001498 <client_command_handler+0x2c8>)
 8001430:	f000 f980 	bl	8001734 <log_printf>
    for(uint8_t i = 0; i < num_tokens ; i++)
 8001434:	2300      	movs	r3, #0
 8001436:	76fb      	strb	r3, [r7, #27]
 8001438:	e00b      	b.n	8001452 <client_command_handler+0x282>
    {
        LOG("%s ", tokens[i]);
 800143a:	7efb      	ldrb	r3, [r7, #27]
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	4815      	ldr	r0, [pc, #84]	; (800149c <client_command_handler+0x2cc>)
 8001448:	f000 f974 	bl	8001734 <log_printf>
    for(uint8_t i = 0; i < num_tokens ; i++)
 800144c:	7efb      	ldrb	r3, [r7, #27]
 800144e:	3301      	adds	r3, #1
 8001450:	76fb      	strb	r3, [r7, #27]
 8001452:	7efb      	ldrb	r3, [r7, #27]
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	d8ef      	bhi.n	800143a <client_command_handler+0x26a>
    }
    LOG("\r\n");
 800145a:	4811      	ldr	r0, [pc, #68]	; (80014a0 <client_command_handler+0x2d0>)
 800145c:	f000 f96a 	bl	8001734 <log_printf>
    return MOD_ERR_BAD_CMD; 
 8001460:	2303      	movs	r3, #3
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd90      	pop	{r4, r7, pc}
 800146a:	bf00      	nop
 800146c:	2000011c 	.word	0x2000011c
 8001470:	08006d3c 	.word	0x08006d3c
 8001474:	08006d44 	.word	0x08006d44
 8001478:	08006d90 	.word	0x08006d90
 800147c:	08006da4 	.word	0x08006da4
 8001480:	08006dec 	.word	0x08006dec
 8001484:	08006df0 	.word	0x08006df0
 8001488:	08006df8 	.word	0x08006df8
 800148c:	08006e28 	.word	0x08006e28
 8001490:	08006e3c 	.word	0x08006e3c
 8001494:	08006e4c 	.word	0x08006e4c
 8001498:	08006e70 	.word	0x08006e70
 800149c:	08006e88 	.word	0x08006e88
 80014a0:	08006e94 	.word	0x08006e94

080014a4 <console_init>:
 * @brief Initialize console module instance.
 *
 * @return MOD_OK for success.
 */
mod_err_t console_init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
    memset(&console, 0, sizeof(console));
 80014aa:	222c      	movs	r2, #44	; 0x2c
 80014ac:	2100      	movs	r1, #0
 80014ae:	4813      	ldr	r0, [pc, #76]	; (80014fc <console_init+0x58>)
 80014b0:	f005 fa78 	bl	80069a4 <memset>
    LOGI(TAG, "Initialized console.");
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <console_init+0x5c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d01a      	beq.n	80014f2 <console_init+0x4e>
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <console_init+0x60>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	dd16      	ble.n	80014f2 <console_init+0x4e>
 80014c4:	f002 fe42 	bl	800414c <HAL_GetTick>
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <console_init+0x64>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	0999      	lsrs	r1, r3, #6
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <console_init+0x64>)
 80014d8:	fba2 0203 	umull	r0, r2, r2, r3
 80014dc:	0992      	lsrs	r2, r2, #6
 80014de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e2:	fb00 f202 	mul.w	r2, r0, r2
 80014e6:	1a9a      	subs	r2, r3, r2
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <console_init+0x68>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4808      	ldr	r0, [pc, #32]	; (8001510 <console_init+0x6c>)
 80014ee:	f000 f921 	bl	8001734 <log_printf>
    return MOD_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000144 	.word	0x20000144
 8001500:	20000054 	.word	0x20000054
 8001504:	20000058 	.word	0x20000058
 8001508:	10624dd3 	.word	0x10624dd3
 800150c:	20000004 	.word	0x20000004
 8001510:	08006ea8 	.word	0x08006ea8

08001514 <console_run>:


mod_err_t console_run(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
    char c;
    if (!console.first_run_done)
 800151a:	4b50      	ldr	r3, [pc, #320]	; (800165c <console_run+0x148>)
 800151c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001520:	f083 0301 	eor.w	r3, r3, #1
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 808a 	beq.w	8001640 <console_run+0x12c>
    {
        console.first_run_done = true;
 800152c:	4b4b      	ldr	r3, [pc, #300]	; (800165c <console_run+0x148>)
 800152e:	2201      	movs	r2, #1
 8001530:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        LOG(PROMPT);
 8001534:	484a      	ldr	r0, [pc, #296]	; (8001660 <console_run+0x14c>)
 8001536:	f000 f8fd 	bl	8001734 <log_printf>
    }

    /* Process all characters in UART's receive buffer. */
    while (uart_getc(&c))
 800153a:	e081      	b.n	8001640 <console_run+0x12c>
    {
        /* Execute command once Enter key is pressed. */
        if (c == '\n' || c == '\r')
 800153c:	78bb      	ldrb	r3, [r7, #2]
 800153e:	2b0a      	cmp	r3, #10
 8001540:	d002      	beq.n	8001548 <console_run+0x34>
 8001542:	78bb      	ldrb	r3, [r7, #2]
 8001544:	2b0d      	cmp	r3, #13
 8001546:	d112      	bne.n	800156e <console_run+0x5a>
        {
            console.cmd_buf[console.num_cmd_buf_chars] = '\0'; // Signal end of command string.
 8001548:	4b44      	ldr	r3, [pc, #272]	; (800165c <console_run+0x148>)
 800154a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800154c:	461a      	mov	r2, r3
 800154e:	4b43      	ldr	r3, [pc, #268]	; (800165c <console_run+0x148>)
 8001550:	2100      	movs	r1, #0
 8001552:	5499      	strb	r1, [r3, r2]
            LOG("\r\n");
 8001554:	4843      	ldr	r0, [pc, #268]	; (8001664 <console_run+0x150>)
 8001556:	f000 f8ed 	bl	8001734 <log_printf>
            cmd_execute(console.cmd_buf); // Execute command's callback function.
 800155a:	4840      	ldr	r0, [pc, #256]	; (800165c <console_run+0x148>)
 800155c:	f7ff fcba 	bl	8000ed4 <cmd_execute>
            console.num_cmd_buf_chars = 0;
 8001560:	4b3e      	ldr	r3, [pc, #248]	; (800165c <console_run+0x148>)
 8001562:	2200      	movs	r2, #0
 8001564:	851a      	strh	r2, [r3, #40]	; 0x28
            LOG(PROMPT);
 8001566:	483e      	ldr	r0, [pc, #248]	; (8001660 <console_run+0x14c>)
 8001568:	f000 f8e4 	bl	8001734 <log_printf>
            continue;
 800156c:	e068      	b.n	8001640 <console_run+0x12c>
        }
        /* Delete a character when Backspace key is pressed. */
        if (c == '\b' || c == '\x7f')
 800156e:	78bb      	ldrb	r3, [r7, #2]
 8001570:	2b08      	cmp	r3, #8
 8001572:	d002      	beq.n	800157a <console_run+0x66>
 8001574:	78bb      	ldrb	r3, [r7, #2]
 8001576:	2b7f      	cmp	r3, #127	; 0x7f
 8001578:	d10d      	bne.n	8001596 <console_run+0x82>
        {
            if (console.num_cmd_buf_chars > 0)
 800157a:	4b38      	ldr	r3, [pc, #224]	; (800165c <console_run+0x148>)
 800157c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800157e:	2b00      	cmp	r3, #0
 8001580:	d05e      	beq.n	8001640 <console_run+0x12c>
            {
                LOG("\x7f");
 8001582:	4839      	ldr	r0, [pc, #228]	; (8001668 <console_run+0x154>)
 8001584:	f000 f8d6 	bl	8001734 <log_printf>
                console.num_cmd_buf_chars--; // "Overwrite" last character.
 8001588:	4b34      	ldr	r3, [pc, #208]	; (800165c <console_run+0x148>)
 800158a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158c:	3b01      	subs	r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b32      	ldr	r3, [pc, #200]	; (800165c <console_run+0x148>)
 8001592:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            continue;
 8001594:	e054      	b.n	8001640 <console_run+0x12c>
        }
        /* Toggle logging on and off LOG_TOGGLE_CHAR key is pressed. */
        if (c == LOG_TOGGLE_CHAR)
 8001596:	78bb      	ldrb	r3, [r7, #2]
 8001598:	2b09      	cmp	r3, #9
 800159a:	d111      	bne.n	80015c0 <console_run+0xac>
        {
            bool log_active = log_toggle();
 800159c:	f000 f8b8 	bl	8001710 <log_toggle>
 80015a0:	4603      	mov	r3, r0
 80015a2:	70fb      	strb	r3, [r7, #3]
            LOG("\r\n<Logging %s>\r\n", log_active ? "on" : "off");
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <console_run+0x9a>
 80015aa:	4b30      	ldr	r3, [pc, #192]	; (800166c <console_run+0x158>)
 80015ac:	e000      	b.n	80015b0 <console_run+0x9c>
 80015ae:	4b30      	ldr	r3, [pc, #192]	; (8001670 <console_run+0x15c>)
 80015b0:	4619      	mov	r1, r3
 80015b2:	4830      	ldr	r0, [pc, #192]	; (8001674 <console_run+0x160>)
 80015b4:	f000 f8be 	bl	8001734 <log_printf>
            LOG(PROMPT);
 80015b8:	4829      	ldr	r0, [pc, #164]	; (8001660 <console_run+0x14c>)
 80015ba:	f000 f8bb 	bl	8001734 <log_printf>
            continue;
 80015be:	e03f      	b.n	8001640 <console_run+0x12c>
        }
        /* Echo the character back. */
        if (isprint(c))
 80015c0:	78bb      	ldrb	r3, [r7, #2]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a2c      	ldr	r2, [pc, #176]	; (8001678 <console_run+0x164>)
 80015c6:	4413      	add	r3, r2
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	f003 0397 	and.w	r3, r3, #151	; 0x97
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d036      	beq.n	8001640 <console_run+0x12c>
        {
            if (console.num_cmd_buf_chars < (CONSOLE_CMD_BUF_SIZE - 1))
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <console_run+0x148>)
 80015d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d6:	2b26      	cmp	r3, #38	; 0x26
 80015d8:	d80f      	bhi.n	80015fa <console_run+0xe6>
            {
                console.cmd_buf[console.num_cmd_buf_chars++] = c;
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <console_run+0x148>)
 80015dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	b291      	uxth	r1, r2
 80015e2:	4a1e      	ldr	r2, [pc, #120]	; (800165c <console_run+0x148>)
 80015e4:	8511      	strh	r1, [r2, #40]	; 0x28
 80015e6:	461a      	mov	r2, r3
 80015e8:	78b9      	ldrb	r1, [r7, #2]
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <console_run+0x148>)
 80015ec:	5499      	strb	r1, [r3, r2]
                LOG("%c", c);
 80015ee:	78bb      	ldrb	r3, [r7, #2]
 80015f0:	4619      	mov	r1, r3
 80015f2:	4822      	ldr	r0, [pc, #136]	; (800167c <console_run+0x168>)
 80015f4:	f000 f89e 	bl	8001734 <log_printf>
 80015f8:	e021      	b.n	800163e <console_run+0x12a>
            }
            else
            {
                /* No space in buffer, so ring terminal bell. */
                LOGW(TAG, "No more space in command buffer.");
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <console_run+0x16c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d01a      	beq.n	8001638 <console_run+0x124>
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <console_run+0x170>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b01      	cmp	r3, #1
 8001608:	dd16      	ble.n	8001638 <console_run+0x124>
 800160a:	f002 fd9f 	bl	800414c <HAL_GetTick>
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <console_run+0x174>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	0999      	lsrs	r1, r3, #6
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a1a      	ldr	r2, [pc, #104]	; (8001688 <console_run+0x174>)
 800161e:	fba2 0203 	umull	r0, r2, r2, r3
 8001622:	0992      	lsrs	r2, r2, #6
 8001624:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001628:	fb00 f202 	mul.w	r2, r0, r2
 800162c:	1a9a      	subs	r2, r3, r2
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <console_run+0x178>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4817      	ldr	r0, [pc, #92]	; (8001690 <console_run+0x17c>)
 8001634:	f000 f87e 	bl	8001734 <log_printf>
                LOG("\a");
 8001638:	4816      	ldr	r0, [pc, #88]	; (8001694 <console_run+0x180>)
 800163a:	f000 f87b 	bl	8001734 <log_printf>
            }
            continue;
 800163e:	bf00      	nop
    while (uart_getc(&c))
 8001640:	1cbb      	adds	r3, r7, #2
 8001642:	4618      	mov	r0, r3
 8001644:	f002 fba0 	bl	8003d88 <uart_getc>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	f47f af76 	bne.w	800153c <console_run+0x28>
        }
    }

    return MOD_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000144 	.word	0x20000144
 8001660:	08006ed8 	.word	0x08006ed8
 8001664:	08006ee4 	.word	0x08006ee4
 8001668:	08006ef0 	.word	0x08006ef0
 800166c:	08006efc 	.word	0x08006efc
 8001670:	08006f00 	.word	0x08006f00
 8001674:	08006f04 	.word	0x08006f04
 8001678:	080073c0 	.word	0x080073c0
 800167c:	08006f1c 	.word	0x08006f1c
 8001680:	20000054 	.word	0x20000054
 8001684:	20000058 	.word	0x20000058
 8001688:	10624dd3 	.word	0x10624dd3
 800168c:	20000004 	.word	0x20000004
 8001690:	08006f28 	.word	0x08006f28
 8001694:	08006f64 	.word	0x08006f64

08001698 <log_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t log_init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
    SLIST_INIT(&log_head); // Initialize linked list by setting head pointer to NULL
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <log_init+0x5c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
    LOGI(TAG, "Initialized log module");
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <log_init+0x60>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d01a      	beq.n	80016e2 <log_init+0x4a>
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <log_init+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	dd16      	ble.n	80016e2 <log_init+0x4a>
 80016b4:	f002 fd4a 	bl	800414c <HAL_GetTick>
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a10      	ldr	r2, [pc, #64]	; (8001700 <log_init+0x68>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	0999      	lsrs	r1, r3, #6
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <log_init+0x68>)
 80016c8:	fba2 0203 	umull	r0, r2, r2, r3
 80016cc:	0992      	lsrs	r2, r2, #6
 80016ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016d2:	fb00 f202 	mul.w	r2, r0, r2
 80016d6:	1a9a      	subs	r2, r3, r2
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <log_init+0x6c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	480a      	ldr	r0, [pc, #40]	; (8001708 <log_init+0x70>)
 80016de:	f000 f829 	bl	8001734 <log_printf>
    return cmd_register(&log_client_info);
 80016e2:	480a      	ldr	r0, [pc, #40]	; (800170c <log_init+0x74>)
 80016e4:	f7ff fbc6 	bl	8000e74 <cmd_register>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000170 	.word	0x20000170
 80016f8:	20000054 	.word	0x20000054
 80016fc:	20000058 	.word	0x20000058
 8001700:	10624dd3 	.word	0x10624dd3
 8001704:	20000050 	.word	0x20000050
 8001708:	08007074 	.word	0x08007074
 800170c:	20000038 	.word	0x20000038

08001710 <log_toggle>:

bool log_toggle(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
    _log_active = _log_active ? false : true;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <log_toggle+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	f083 0301 	eor.w	r3, r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <log_toggle+0x20>)
 8001720:	701a      	strb	r2, [r3, #0]
    return _log_active;
 8001722:	4b03      	ldr	r3, [pc, #12]	; (8001730 <log_toggle+0x20>)
 8001724:	781b      	ldrb	r3, [r3, #0]
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	20000054 	.word	0x20000054

08001734 <log_printf>:
{
    return _log_active;
}

void log_printf(const char *fmt, ...)
{
 8001734:	b40f      	push	{r0, r1, r2, r3}
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	607b      	str	r3, [r7, #4]
    vprintf(fmt, args);
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	6938      	ldr	r0, [r7, #16]
 8001746:	f002 f81b 	bl	8003780 <vprintf_>
    va_end(args);
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001754:	b004      	add	sp, #16
 8001756:	4770      	bx	lr

08001758 <log_level_str>:
 * @param level The log level as an integer.
 *
 * @return Log level as a string. Otherwise, "INVALID".
 */
static const char *log_level_str(int32_t level)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    if (level < ARRAY_SIZE(log_level_names))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b05      	cmp	r3, #5
 8001764:	d804      	bhi.n	8001770 <log_level_str+0x18>
    {
        return log_level_names[level];
 8001766:	4a06      	ldr	r2, [pc, #24]	; (8001780 <log_level_str+0x28>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	e000      	b.n	8001772 <log_level_str+0x1a>
    }
    return "INVALID";
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <log_level_str+0x2c>)
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000008 	.word	0x20000008
 8001784:	080070a8 	.word	0x080070a8

08001788 <log_level_int>:
 * @param level_name The log level as a string.
 *
 * @return Log level as an int, or -1 on error.
 */
static int32_t log_level_int(const char *level_name)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
    for (uint8_t level = 0; level < ARRAY_SIZE(log_level_names); level++)
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	e00f      	b.n	80017b6 <log_level_int+0x2e>
    {
        if (strcasecmp(level_name, log_level_names[level]) == 0)
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <log_level_int+0x40>)
 800179a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179e:	4619      	mov	r1, r3
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f005 f9c1 	bl	8006b28 <strcasecmp>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <log_level_int+0x28>
        {
            return level;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	e007      	b.n	80017c0 <log_level_int+0x38>
    for (uint8_t level = 0; level < ARRAY_SIZE(log_level_names); level++)
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	3301      	adds	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d9ec      	bls.n	8001796 <log_level_int+0xe>
        }
    }

    return -1; // Log level not found.
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000008 	.word	0x20000008

080017cc <cmd_log_get>:
 * @return 0 if successful, 1 otherwise.
 *
 * Log levels include global log level and individual tag log levels that override global level.
 */
static uint32_t cmd_log_get(uint32_t argc, const char **argv)
{
 80017cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ce:	b08b      	sub	sp, #44	; 0x2c
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
    LOGI(TAG, "Global log level: (%s)", log_level_str(_global_log_level));
 80017d6:	4b35      	ldr	r3, [pc, #212]	; (80018ac <cmd_log_get+0xe0>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d024      	beq.n	8001828 <cmd_log_get+0x5c>
 80017de:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <cmd_log_get+0xe4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	dd20      	ble.n	8001828 <cmd_log_get+0x5c>
 80017e6:	f002 fcb1 	bl	800414c <HAL_GetTick>
 80017ea:	61b8      	str	r0, [r7, #24]
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	4a31      	ldr	r2, [pc, #196]	; (80018b4 <cmd_log_get+0xe8>)
 80017f0:	fba2 2303 	umull	r2, r3, r2, r3
 80017f4:	099d      	lsrs	r5, r3, #6
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	4a2e      	ldr	r2, [pc, #184]	; (80018b4 <cmd_log_get+0xe8>)
 80017fa:	fba2 1203 	umull	r1, r2, r2, r3
 80017fe:	0994      	lsrs	r4, r2, #6
 8001800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001804:	fb02 f204 	mul.w	r2, r2, r4
 8001808:	1a9c      	subs	r4, r3, r2
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <cmd_log_get+0xec>)
 800180c:	681e      	ldr	r6, [r3, #0]
 800180e:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <cmd_log_get+0xe4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ffa0 	bl	8001758 <log_level_str>
 8001818:	4603      	mov	r3, r0
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	4633      	mov	r3, r6
 800181e:	4622      	mov	r2, r4
 8001820:	4629      	mov	r1, r5
 8001822:	4826      	ldr	r0, [pc, #152]	; (80018bc <cmd_log_get+0xf0>)
 8001824:	f7ff ff86 	bl	8001734 <log_printf>

    if(!SLIST_EMPTY(&log_head))
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <cmd_log_get+0xf4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d038      	beq.n	80018a2 <cmd_log_get+0xd6>
    {
    	Log_entry *p = NULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
    	SLIST_FOREACH(p, &log_head, entries)
 8001834:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <cmd_log_get+0xf4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	e02f      	b.n	800189c <cmd_log_get+0xd0>
    	{
    		LOGI(TAG, "%s log level: (%s)", p->tag, log_level_str(p->level));
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <cmd_log_get+0xe0>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d028      	beq.n	8001896 <cmd_log_get+0xca>
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <cmd_log_get+0xe4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b02      	cmp	r3, #2
 800184a:	dd24      	ble.n	8001896 <cmd_log_get+0xca>
 800184c:	f002 fc7e 	bl	800414c <HAL_GetTick>
 8001850:	6178      	str	r0, [r7, #20]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <cmd_log_get+0xe8>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	099e      	lsrs	r6, r3, #6
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <cmd_log_get+0xe8>)
 8001860:	fba2 1203 	umull	r1, r2, r2, r3
 8001864:	0994      	lsrs	r4, r2, #6
 8001866:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800186a:	fb02 f204 	mul.w	r2, r2, r4
 800186e:	1a9c      	subs	r4, r3, r2
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <cmd_log_get+0xec>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	1d5d      	adds	r5, r3, #5
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	791b      	ldrb	r3, [r3, #4]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff6a 	bl	8001758 <log_level_str>
 8001884:	4603      	mov	r3, r0
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	9500      	str	r5, [sp, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4622      	mov	r2, r4
 800188e:	4631      	mov	r1, r6
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <cmd_log_get+0xf8>)
 8001892:	f7ff ff4f 	bl	8001734 <log_printf>
    	SLIST_FOREACH(p, &log_head, entries)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1cc      	bne.n	800183c <cmd_log_get+0x70>
    	}
    }

    return 0;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3724      	adds	r7, #36	; 0x24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ac:	20000054 	.word	0x20000054
 80018b0:	20000058 	.word	0x20000058
 80018b4:	10624dd3 	.word	0x10624dd3
 80018b8:	20000050 	.word	0x20000050
 80018bc:	080070b0 	.word	0x080070b0
 80018c0:	20000170 	.word	0x20000170
 80018c4:	080070e4 	.word	0x080070e4

080018c8 <cmd_log_set>:
 * @return 0 if successful, 1 otherwise.
 *
 * TTYS command format: > log set <tag> <level>.
 */
static uint32_t cmd_log_set(uint32_t argc, const char **argv)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
    if (argc != 2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d020      	beq.n	800191a <cmd_log_set+0x52>
    {
        LOGW(TAG, "Missing log level arguments");
 80018d8:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <cmd_log_set+0xd0>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d01a      	beq.n	8001916 <cmd_log_set+0x4e>
 80018e0:	4b2e      	ldr	r3, [pc, #184]	; (800199c <cmd_log_set+0xd4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	dd16      	ble.n	8001916 <cmd_log_set+0x4e>
 80018e8:	f002 fc30 	bl	800414c <HAL_GetTick>
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4a2b      	ldr	r2, [pc, #172]	; (80019a0 <cmd_log_set+0xd8>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	0999      	lsrs	r1, r3, #6
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4a29      	ldr	r2, [pc, #164]	; (80019a0 <cmd_log_set+0xd8>)
 80018fc:	fba2 0203 	umull	r0, r2, r2, r3
 8001900:	0992      	lsrs	r2, r2, #6
 8001902:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001906:	fb00 f202 	mul.w	r2, r0, r2
 800190a:	1a9a      	subs	r2, r3, r2
 800190c:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <cmd_log_set+0xdc>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4825      	ldr	r0, [pc, #148]	; (80019a8 <cmd_log_set+0xe0>)
 8001912:	f7ff ff0f 	bl	8001734 <log_printf>
        return 1; // Should include only 1 argument.
 8001916:	2301      	movs	r3, #1
 8001918:	e039      	b.n	800198e <cmd_log_set+0xc6>
    }
    else
    {
        int32_t new_log_level = log_level_int(argv[1]);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	3304      	adds	r3, #4
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff31 	bl	8001788 <log_level_int>
 8001926:	6178      	str	r0, [r7, #20]
        if (new_log_level == -1)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192e:	d125      	bne.n	800197c <cmd_log_set+0xb4>
        {
            LOGW(TAG, "Log level (%s) not recognized", argv[1]);
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <cmd_log_set+0xd0>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01f      	beq.n	8001978 <cmd_log_set+0xb0>
 8001938:	4b18      	ldr	r3, [pc, #96]	; (800199c <cmd_log_set+0xd4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	dd1b      	ble.n	8001978 <cmd_log_set+0xb0>
 8001940:	f002 fc04 	bl	800414c <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4a15      	ldr	r2, [pc, #84]	; (80019a0 <cmd_log_set+0xd8>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	0999      	lsrs	r1, r3, #6
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <cmd_log_set+0xd8>)
 8001954:	fba2 0203 	umull	r0, r2, r2, r3
 8001958:	0992      	lsrs	r2, r2, #6
 800195a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800195e:	fb00 f202 	mul.w	r2, r0, r2
 8001962:	1a9a      	subs	r2, r3, r2
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <cmd_log_set+0xdc>)
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	3304      	adds	r3, #4
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	4603      	mov	r3, r0
 8001972:	480e      	ldr	r0, [pc, #56]	; (80019ac <cmd_log_set+0xe4>)
 8001974:	f7ff fede 	bl	8001734 <log_printf>
            return 1;
 8001978:	2301      	movs	r3, #1
 800197a:	e008      	b.n	800198e <cmd_log_set+0xc6>
        }
        else
        {	             // tag , level
            log_level_set(argv[0], new_log_level);				    
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	4611      	mov	r1, r2
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f812 	bl	80019b0 <log_level_set>
            return 0;
 800198c:	2300      	movs	r3, #0
        }
    }
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000054 	.word	0x20000054
 800199c:	20000058 	.word	0x20000058
 80019a0:	10624dd3 	.word	0x10624dd3
 80019a4:	20000050 	.word	0x20000050
 80019a8:	08007114 	.word	0x08007114
 80019ac:	0800714c 	.word	0x0800714c

080019b0 <log_level_set>:
 * @param level Desired log level.
 *
 * @note Wild-card tag resets log level of all tags to given value.
 */
static void log_level_set(const char* tag, log_level_t level)
{
 80019b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b2:	b08d      	sub	sp, #52	; 0x34
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	460b      	mov	r3, r1
 80019ba:	72fb      	strb	r3, [r7, #11]
	Log_entry *p = NULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	; 0x24

	/* Set global log level and delete linked list containing tag entries. */
	if(strcmp("*", tag) == 0)
 80019c0:	68f9      	ldr	r1, [r7, #12]
 80019c2:	487a      	ldr	r0, [pc, #488]	; (8001bac <log_level_set+0x1fc>)
 80019c4:	f7fe fc00 	bl	80001c8 <strcmp>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d15d      	bne.n	8001a8a <log_level_set+0xda>
	{
		_global_log_level = level;
 80019ce:	7afb      	ldrb	r3, [r7, #11]
 80019d0:	4a77      	ldr	r2, [pc, #476]	; (8001bb0 <log_level_set+0x200>)
 80019d2:	6013      	str	r3, [r2, #0]

		LOGI(TAG, "Deleting tag list nodes");
 80019d4:	4b77      	ldr	r3, [pc, #476]	; (8001bb4 <log_level_set+0x204>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d026      	beq.n	8001a2a <log_level_set+0x7a>
 80019dc:	4b74      	ldr	r3, [pc, #464]	; (8001bb0 <log_level_set+0x200>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	dd22      	ble.n	8001a2a <log_level_set+0x7a>
 80019e4:	f002 fbb2 	bl	800414c <HAL_GetTick>
 80019e8:	6178      	str	r0, [r7, #20]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	4a72      	ldr	r2, [pc, #456]	; (8001bb8 <log_level_set+0x208>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0999      	lsrs	r1, r3, #6
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	4a70      	ldr	r2, [pc, #448]	; (8001bb8 <log_level_set+0x208>)
 80019f8:	fba2 0203 	umull	r0, r2, r2, r3
 80019fc:	0992      	lsrs	r2, r2, #6
 80019fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a02:	fb00 f202 	mul.w	r2, r0, r2
 8001a06:	1a9a      	subs	r2, r3, r2
 8001a08:	4b6c      	ldr	r3, [pc, #432]	; (8001bbc <log_level_set+0x20c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	486c      	ldr	r0, [pc, #432]	; (8001bc0 <log_level_set+0x210>)
 8001a0e:	f7ff fe91 	bl	8001734 <log_printf>
		while (!SLIST_EMPTY(&log_head))
 8001a12:	e00a      	b.n	8001a2a <log_level_set+0x7a>
		{
		   p = SLIST_FIRST(&log_head);
 8001a14:	4b6b      	ldr	r3, [pc, #428]	; (8001bc4 <log_level_set+0x214>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
		   SLIST_REMOVE_HEAD(&log_head, entries);
 8001a1a:	4b6a      	ldr	r3, [pc, #424]	; (8001bc4 <log_level_set+0x214>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a68      	ldr	r2, [pc, #416]	; (8001bc4 <log_level_set+0x214>)
 8001a22:	6013      	str	r3, [r2, #0]
		   free(p);
 8001a24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a26:	f004 ffb5 	bl	8006994 <free>
		while (!SLIST_EMPTY(&log_head))
 8001a2a:	4b66      	ldr	r3, [pc, #408]	; (8001bc4 <log_level_set+0x214>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <log_level_set+0x64>
		}

		LOGI(TAG, "Global log level set to (%s)", log_level_str(_global_log_level));
 8001a32:	4b60      	ldr	r3, [pc, #384]	; (8001bb4 <log_level_set+0x204>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 80af 	beq.w	8001b9a <log_level_set+0x1ea>
 8001a3c:	4b5c      	ldr	r3, [pc, #368]	; (8001bb0 <log_level_set+0x200>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	f340 80aa 	ble.w	8001b9a <log_level_set+0x1ea>
 8001a46:	f002 fb81 	bl	800414c <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4a5a      	ldr	r2, [pc, #360]	; (8001bb8 <log_level_set+0x208>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	099d      	lsrs	r5, r3, #6
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4a57      	ldr	r2, [pc, #348]	; (8001bb8 <log_level_set+0x208>)
 8001a5a:	fba2 1203 	umull	r1, r2, r2, r3
 8001a5e:	0994      	lsrs	r4, r2, #6
 8001a60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a64:	fb02 f204 	mul.w	r2, r2, r4
 8001a68:	1a9c      	subs	r4, r3, r2
 8001a6a:	4b54      	ldr	r3, [pc, #336]	; (8001bbc <log_level_set+0x20c>)
 8001a6c:	681e      	ldr	r6, [r3, #0]
 8001a6e:	4b50      	ldr	r3, [pc, #320]	; (8001bb0 <log_level_set+0x200>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fe70 	bl	8001758 <log_level_str>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	4633      	mov	r3, r6
 8001a7e:	4622      	mov	r2, r4
 8001a80:	4629      	mov	r1, r5
 8001a82:	4851      	ldr	r0, [pc, #324]	; (8001bc8 <log_level_set+0x218>)
 8001a84:	f7ff fe56 	bl	8001734 <log_printf>
		return;
 8001a88:	e087      	b.n	8001b9a <log_level_set+0x1ea>
	}

	/* Check if tag is already saved in linked list. */
    SLIST_FOREACH(p, &log_head, entries)
 8001a8a:	4b4e      	ldr	r3, [pc, #312]	; (8001bc4 <log_level_set+0x214>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a90:	e03c      	b.n	8001b0c <log_level_set+0x15c>
    {
        if (strcmp(p->tag, tag) == 0)
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	3305      	adds	r3, #5
 8001a96:	68f9      	ldr	r1, [r7, #12]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fb95 	bl	80001c8 <strcmp>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d130      	bne.n	8001b06 <log_level_set+0x156>
        {
            p->level = level;
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	7afa      	ldrb	r2, [r7, #11]
 8001aa8:	711a      	strb	r2, [r3, #4]
            LOGI(TAG, "%s log level set to (%s)", p->tag, log_level_str(p->level));
 8001aaa:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <log_level_set+0x204>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d075      	beq.n	8001b9e <log_level_set+0x1ee>
 8001ab2:	4b3f      	ldr	r3, [pc, #252]	; (8001bb0 <log_level_set+0x200>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	dd71      	ble.n	8001b9e <log_level_set+0x1ee>
 8001aba:	f002 fb47 	bl	800414c <HAL_GetTick>
 8001abe:	61b8      	str	r0, [r7, #24]
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	4a3d      	ldr	r2, [pc, #244]	; (8001bb8 <log_level_set+0x208>)
 8001ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac8:	099e      	lsrs	r6, r3, #6
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4a3a      	ldr	r2, [pc, #232]	; (8001bb8 <log_level_set+0x208>)
 8001ace:	fba2 1203 	umull	r1, r2, r2, r3
 8001ad2:	0994      	lsrs	r4, r2, #6
 8001ad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ad8:	fb02 f204 	mul.w	r2, r2, r4
 8001adc:	1a9c      	subs	r4, r3, r2
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <log_level_set+0x20c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	1d5d      	adds	r5, r3, #5
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	791b      	ldrb	r3, [r3, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fe33 	bl	8001758 <log_level_str>
 8001af2:	4603      	mov	r3, r0
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	9500      	str	r5, [sp, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4622      	mov	r2, r4
 8001afc:	4631      	mov	r1, r6
 8001afe:	4833      	ldr	r0, [pc, #204]	; (8001bcc <log_level_set+0x21c>)
 8001b00:	f7ff fe18 	bl	8001734 <log_printf>
            return;
 8001b04:	e04b      	b.n	8001b9e <log_level_set+0x1ee>
    SLIST_FOREACH(p, &log_head, entries)
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1bf      	bne.n	8001a92 <log_level_set+0xe2>
        }
    }

    /* Tag not found in list, add new entry. */
	Log_entry *new_entry = (Log_entry *)malloc(sizeof(Log_entry));
 8001b12:	2010      	movs	r0, #16
 8001b14:	f004 ff36 	bl	8006984 <malloc>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	623b      	str	r3, [r7, #32]
	new_entry->level = level;
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	7afa      	ldrb	r2, [r7, #11]
 8001b20:	711a      	strb	r2, [r3, #4]
	strncpy(new_entry->tag, tag, sizeof(new_entry->tag));
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	3305      	adds	r3, #5
 8001b26:	220a      	movs	r2, #10
 8001b28:	68f9      	ldr	r1, [r7, #12]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f005 f818 	bl	8006b60 <strncpy>
	SLIST_INSERT_HEAD(&log_head, new_entry, entries);
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <log_level_set+0x214>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	4a22      	ldr	r2, [pc, #136]	; (8001bc4 <log_level_set+0x214>)
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	6013      	str	r3, [r2, #0]

	LOGI(TAG, "Added tag (%s) to list with level (%s)", new_entry->tag, log_level_str(new_entry->level));
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <log_level_set+0x204>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d02d      	beq.n	8001ba2 <log_level_set+0x1f2>
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <log_level_set+0x200>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	dd29      	ble.n	8001ba2 <log_level_set+0x1f2>
 8001b4e:	f002 fafd 	bl	800414c <HAL_GetTick>
 8001b52:	61f8      	str	r0, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	4a18      	ldr	r2, [pc, #96]	; (8001bb8 <log_level_set+0x208>)
 8001b58:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5c:	099e      	lsrs	r6, r3, #6
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <log_level_set+0x208>)
 8001b62:	fba2 1203 	umull	r1, r2, r2, r3
 8001b66:	0994      	lsrs	r4, r2, #6
 8001b68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b6c:	fb02 f204 	mul.w	r2, r2, r4
 8001b70:	1a9c      	subs	r4, r3, r2
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <log_level_set+0x20c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	1d5d      	adds	r5, r3, #5
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	791b      	ldrb	r3, [r3, #4]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fde9 	bl	8001758 <log_level_str>
 8001b86:	4603      	mov	r3, r0
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	9500      	str	r5, [sp, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4622      	mov	r2, r4
 8001b90:	4631      	mov	r1, r6
 8001b92:	480f      	ldr	r0, [pc, #60]	; (8001bd0 <log_level_set+0x220>)
 8001b94:	f7ff fdce 	bl	8001734 <log_printf>
	return;
 8001b98:	e003      	b.n	8001ba2 <log_level_set+0x1f2>
		return;
 8001b9a:	bf00      	nop
 8001b9c:	e002      	b.n	8001ba4 <log_level_set+0x1f4>
            return;
 8001b9e:	bf00      	nop
 8001ba0:	e000      	b.n	8001ba4 <log_level_set+0x1f4>
	return;
 8001ba2:	bf00      	nop
}
 8001ba4:	372c      	adds	r7, #44	; 0x2c
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	bf00      	nop
 8001bac:	08007188 	.word	0x08007188
 8001bb0:	20000058 	.word	0x20000058
 8001bb4:	20000054 	.word	0x20000054
 8001bb8:	10624dd3 	.word	0x10624dd3
 8001bbc:	20000050 	.word	0x20000050
 8001bc0:	0800718c 	.word	0x0800718c
 8001bc4:	20000170 	.word	0x20000170
 8001bc8:	080071c0 	.word	0x080071c0
 8001bcc:	080071f8 	.word	0x080071f8
 8001bd0:	0800722c 	.word	0x0800722c

08001bd4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f043 0201 	orr.w	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	601a      	str	r2, [r3, #0]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	609a      	str	r2, [r3, #8]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	40021000 	.word	0x40021000

08001c50 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c5c:	4907      	ldr	r1, [pc, #28]	; (8001c7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	40021000 	.word	0x40021000

08001c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c86:	f002 f9f1 	bl	800406c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c8a:	f000 f821 	bl	8001cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c8e:	f000 f8e5 	bl	8001e5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c92:	f000 f893 	bl	8001dbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_config_t uart_cfg = {.uart_reg_base = USART2, .irq_num = USART2_IRQn};
 8001c96:	4a0d      	ldr	r2, [pc, #52]	; (8001ccc <main+0x4c>)
 8001c98:	463b      	mov	r3, r7
 8001c9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c9e:	e883 0003 	stmia.w	r3, {r0, r1}
  uart_init(&uart_cfg);
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f001 ff5d 	bl	8003b64 <uart_init>
  console_init();
 8001caa:	f7ff fbfb 	bl	80014a4 <console_init>
  cmd_init();
 8001cae:	f7ff f8af 	bl	8000e10 <cmd_init>
  log_init();
 8001cb2:	f7ff fcf1 	bl	8001698 <log_init>
  uart_start();
 8001cb6:	f001 ffbd 	bl	8003c34 <uart_start>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2120      	movs	r1, #32
 8001cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc2:	f002 fcdf 	bl	8004684 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  console_run();
 8001cc6:	f7ff fc25 	bl	8001514 <console_run>
 8001cca:	e7fc      	b.n	8001cc6 <main+0x46>
 8001ccc:	08007270 	.word	0x08007270

08001cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b0b8      	sub	sp, #224	; 0xe0
 8001cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cd6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cda:	2244      	movs	r2, #68	; 0x44
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 fe60 	bl	80069a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	2288      	movs	r2, #136	; 0x88
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f004 fe52 	bl	80069a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d00:	2302      	movs	r3, #2
 8001d02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d0e:	2310      	movs	r3, #16
 8001d10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d14:	2302      	movs	r3, #2
 8001d16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d20:	2301      	movs	r3, #1
 8001d22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001d26:	230a      	movs	r3, #10
 8001d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d2c:	2307      	movs	r3, #7
 8001d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d32:	2302      	movs	r3, #2
 8001d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d42:	4618      	mov	r0, r3
 8001d44:	f002 fd1a 	bl	800477c <HAL_RCC_OscConfig>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001d4e:	f000 f8ed 	bl	8001f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d52:	230f      	movs	r3, #15
 8001d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d70:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d74:	2104      	movs	r1, #4
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 f8e6 	bl	8004f48 <HAL_RCC_ClockConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001d82:	f000 f8d3 	bl	8001f2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d86:	2302      	movs	r3, #2
 8001d88:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d8e:	463b      	mov	r3, r7
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 faa7 	bl	80052e4 <HAL_RCCEx_PeriphCLKConfig>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001d9c:	f000 f8c6 	bl	8001f2c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001da0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001da4:	f002 fc94 	bl	80046d0 <HAL_PWREx_ControlVoltageScaling>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001dae:	f000 f8bd 	bl	8001f2c <Error_Handler>
  }
}
 8001db2:	bf00      	nop
 8001db4:	37e0      	adds	r7, #224	; 0xe0
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08e      	sub	sp, #56	; 0x38
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001dc2:	f107 031c 	add.w	r3, r7, #28
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
 8001dd0:	611a      	str	r2, [r3, #16]
 8001dd2:	615a      	str	r2, [r3, #20]
 8001dd4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
 8001de4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001de6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001dea:	f7ff ff31 	bl	8001c50 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001dee:	2001      	movs	r0, #1
 8001df0:	f7ff ff16 	bl	8001c20 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001df4:	230c      	movs	r3, #12
 8001df6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001e08:	2307      	movs	r3, #7
 8001e0a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e14:	f004 f86d 	bl	8005ef2 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001e18:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001e1c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001e2a:	230c      	movs	r3, #12
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001e32:	2300      	movs	r3, #0
 8001e34:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4806      	ldr	r0, [pc, #24]	; (8001e58 <MX_USART2_UART_Init+0x9c>)
 8001e3e:	f004 fcfb 	bl	8006838 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_USART2_UART_Init+0x9c>)
 8001e44:	f7ff fed6 	bl	8001bf4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001e48:	4803      	ldr	r0, [pc, #12]	; (8001e58 <MX_USART2_UART_Init+0x9c>)
 8001e4a:	f7ff fec3 	bl	8001bd4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	3738      	adds	r7, #56	; 0x38
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40004400 	.word	0x40004400

08001e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
 8001e70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e72:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <MX_GPIO_Init+0xc4>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	4a2a      	ldr	r2, [pc, #168]	; (8001f20 <MX_GPIO_Init+0xc4>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <MX_GPIO_Init+0xc4>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <MX_GPIO_Init+0xc4>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	4a24      	ldr	r2, [pc, #144]	; (8001f20 <MX_GPIO_Init+0xc4>)
 8001e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e96:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <MX_GPIO_Init+0xc4>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <MX_GPIO_Init+0xc4>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <MX_GPIO_Init+0xc4>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eae:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <MX_GPIO_Init+0xc4>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <MX_GPIO_Init+0xc4>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	4a18      	ldr	r2, [pc, #96]	; (8001f20 <MX_GPIO_Init+0xc4>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <MX_GPIO_Init+0xc4>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2120      	movs	r1, #32
 8001ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eda:	f002 fbd3 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <MX_GPIO_Init+0xc8>)
 8001ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	480d      	ldr	r0, [pc, #52]	; (8001f28 <MX_GPIO_Init+0xcc>)
 8001ef4:	f002 fa1c 	bl	8004330 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efc:	2301      	movs	r3, #1
 8001efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f12:	f002 fa0d 	bl	8004330 <HAL_GPIO_Init>

}
 8001f16:	bf00      	nop
 8001f18:	3728      	adds	r7, #40	; 0x28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	10210000 	.word	0x10210000
 8001f28:	48000800 	.word	0x48000800

08001f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f30:	b672      	cpsid	i
}
 8001f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <Error_Handler+0x8>

08001f36 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	4603      	mov	r3, r0
 8001f44:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	4603      	mov	r3, r0
 8001f60:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <_out_char+0x1e>
    uart_putc(character);
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f001 febc 	bl	8003ce8 <uart_putc>
  }
}
 8001f70:	bf00      	nop
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	e002      	b.n	8001f8e <_strnlen_s+0x16>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d004      	beq.n	8001fa0 <_strnlen_s+0x28>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	1e5a      	subs	r2, r3, #1
 8001f9a:	603a      	str	r2, [r7, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1f3      	bne.n	8001f88 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	1ad3      	subs	r3, r2, r3
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	2b2f      	cmp	r3, #47	; 0x2f
 8001fc0:	d904      	bls.n	8001fcc <_is_digit+0x1a>
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	2b39      	cmp	r3, #57	; 0x39
 8001fc6:	d801      	bhi.n	8001fcc <_is_digit+0x1a>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <_is_digit+0x1c>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001fec:	e00e      	b.n	800200c <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	1c59      	adds	r1, r3, #1
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6011      	str	r1, [r2, #0]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	4403      	add	r3, r0
 8002008:	3b30      	subs	r3, #48	; 0x30
 800200a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ffcd 	bl	8001fb2 <_is_digit>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1e7      	bne.n	8001fee <_atoi+0xe>
  }
  return i;
 800201e:	68fb      	ldr	r3, [r7, #12]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800203a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d125      	bne.n	8002090 <_out_rev+0x68>
 8002044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d120      	bne.n	8002090 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e00a      	b.n	800206a <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	1c53      	adds	r3, r2, #1
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	68fc      	ldr	r4, [r7, #12]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	2020      	movs	r0, #32
 8002062:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	3301      	adds	r3, #1
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206e:	429a      	cmp	r2, r3
 8002070:	d3f0      	bcc.n	8002054 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8002072:	e00d      	b.n	8002090 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002076:	3b01      	subs	r3, #1
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800207a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207e:	4413      	add	r3, r2
 8002080:	7818      	ldrb	r0, [r3, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	1c53      	adds	r3, r2, #1
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	68fc      	ldr	r4, [r7, #12]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	47a0      	blx	r4
  while (len) {
 8002090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1ee      	bne.n	8002074 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00e      	beq.n	80020be <_out_rev+0x96>
    while (idx - start_idx < width) {
 80020a0:	e007      	b.n	80020b2 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	1c53      	adds	r3, r2, #1
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	68fc      	ldr	r4, [r7, #12]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	2020      	movs	r0, #32
 80020b0:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d8f1      	bhi.n	80020a2 <_out_rev+0x7a>
    }
  }

  return idx;
 80020be:	687b      	ldr	r3, [r7, #4]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd90      	pop	{r4, r7, pc}

080020c8 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af04      	add	r7, sp, #16
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d136      	bne.n	800214e <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80020e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d018      	beq.n	8002118 <_ntoa_format+0x50>
 80020e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d013      	beq.n	8002118 <_ntoa_format+0x50>
 80020f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d104      	bne.n	8002102 <_ntoa_format+0x3a>
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <_ntoa_format+0x50>
      width--;
 8002102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002104:	3b01      	subs	r3, #1
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002108:	e006      	b.n	8002118 <_ntoa_format+0x50>
      buf[len++] = '0';
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	61fa      	str	r2, [r7, #28]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4413      	add	r3, r2
 8002114:	2230      	movs	r2, #48	; 0x30
 8002116:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211c:	429a      	cmp	r2, r3
 800211e:	d20a      	bcs.n	8002136 <_ntoa_format+0x6e>
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b1f      	cmp	r3, #31
 8002124:	d9f1      	bls.n	800210a <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002126:	e006      	b.n	8002136 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	61fa      	str	r2, [r7, #28]
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4413      	add	r3, r2
 8002132:	2230      	movs	r2, #48	; 0x30
 8002134:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d006      	beq.n	800214e <_ntoa_format+0x86>
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002144:	429a      	cmp	r2, r3
 8002146:	d202      	bcs.n	800214e <_ntoa_format+0x86>
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b1f      	cmp	r3, #31
 800214c:	d9ec      	bls.n	8002128 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800214e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b00      	cmp	r3, #0
 8002156:	d058      	beq.n	800220a <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215e:	2b00      	cmp	r3, #0
 8002160:	d116      	bne.n	8002190 <_ntoa_format+0xc8>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d013      	beq.n	8002190 <_ntoa_format+0xc8>
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	429a      	cmp	r2, r3
 800216e:	d003      	beq.n	8002178 <_ntoa_format+0xb0>
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002174:	429a      	cmp	r2, r3
 8002176:	d10b      	bne.n	8002190 <_ntoa_format+0xc8>
      len--;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	3b01      	subs	r3, #1
 800217c:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <_ntoa_format+0xc8>
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	2b10      	cmp	r3, #16
 8002188:	d102      	bne.n	8002190 <_ntoa_format+0xc8>
        len--;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b01      	subs	r3, #1
 800218e:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	2b10      	cmp	r3, #16
 8002194:	d10f      	bne.n	80021b6 <_ntoa_format+0xee>
 8002196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10a      	bne.n	80021b6 <_ntoa_format+0xee>
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b1f      	cmp	r3, #31
 80021a4:	d807      	bhi.n	80021b6 <_ntoa_format+0xee>
      buf[len++] = 'x';
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	61fa      	str	r2, [r7, #28]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4413      	add	r3, r2
 80021b0:	2278      	movs	r2, #120	; 0x78
 80021b2:	701a      	strb	r2, [r3, #0]
 80021b4:	e01f      	b.n	80021f6 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	2b10      	cmp	r3, #16
 80021ba:	d10f      	bne.n	80021dc <_ntoa_format+0x114>
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <_ntoa_format+0x114>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	2b1f      	cmp	r3, #31
 80021ca:	d807      	bhi.n	80021dc <_ntoa_format+0x114>
      buf[len++] = 'X';
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	61fa      	str	r2, [r7, #28]
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4413      	add	r3, r2
 80021d6:	2258      	movs	r2, #88	; 0x58
 80021d8:	701a      	strb	r2, [r3, #0]
 80021da:	e00c      	b.n	80021f6 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d109      	bne.n	80021f6 <_ntoa_format+0x12e>
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	2b1f      	cmp	r3, #31
 80021e6:	d806      	bhi.n	80021f6 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	61fa      	str	r2, [r7, #28]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4413      	add	r3, r2
 80021f2:	2262      	movs	r2, #98	; 0x62
 80021f4:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	2b1f      	cmp	r3, #31
 80021fa:	d806      	bhi.n	800220a <_ntoa_format+0x142>
      buf[len++] = '0';
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	61fa      	str	r2, [r7, #28]
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4413      	add	r3, r2
 8002206:	2230      	movs	r2, #48	; 0x30
 8002208:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	2b1f      	cmp	r3, #31
 800220e:	d824      	bhi.n	800225a <_ntoa_format+0x192>
    if (negative) {
 8002210:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <_ntoa_format+0x160>
      buf[len++] = '-';
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	61fa      	str	r2, [r7, #28]
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4413      	add	r3, r2
 8002222:	222d      	movs	r2, #45	; 0x2d
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e018      	b.n	800225a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	61fa      	str	r2, [r7, #28]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4413      	add	r3, r2
 800223c:	222b      	movs	r2, #43	; 0x2b
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	e00b      	b.n	800225a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d006      	beq.n	800225a <_ntoa_format+0x192>
      buf[len++] = ' ';
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	61fa      	str	r2, [r7, #28]
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4413      	add	r3, r2
 8002256:	2220      	movs	r2, #32
 8002258:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225c:	9303      	str	r3, [sp, #12]
 800225e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002260:	9302      	str	r3, [sp, #8]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68b9      	ldr	r1, [r7, #8]
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f7ff fed9 	bl	8002028 <_out_rev>
 8002276:	4603      	mov	r3, r0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b096      	sub	sp, #88	; 0x58
 8002284:	af08      	add	r7, sp, #32
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002294:	2b00      	cmp	r3, #0
 8002296:	d103      	bne.n	80022a0 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800229a:	f023 0310 	bic.w	r3, r3, #16
 800229e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80022a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <_ntoa_long+0x30>
 80022aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d033      	beq.n	8002318 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 80022b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80022b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80022ba:	fb01 f202 	mul.w	r2, r1, r2
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80022c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022c8:	2b09      	cmp	r3, #9
 80022ca:	d804      	bhi.n	80022d6 <_ntoa_long+0x56>
 80022cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022d0:	3330      	adds	r3, #48	; 0x30
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	e00d      	b.n	80022f2 <_ntoa_long+0x72>
 80022d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <_ntoa_long+0x64>
 80022e0:	2241      	movs	r2, #65	; 0x41
 80022e2:	e000      	b.n	80022e6 <_ntoa_long+0x66>
 80022e4:	2261      	movs	r2, #97	; 0x61
 80022e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022ea:	4413      	add	r3, r2
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	3b0a      	subs	r3, #10
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f4:	1c59      	adds	r1, r3, #1
 80022f6:	6379      	str	r1, [r7, #52]	; 0x34
 80022f8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022fc:	440b      	add	r3, r1
 80022fe:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002302:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800230c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <_ntoa_long+0x98>
 8002312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002314:	2b1f      	cmp	r3, #31
 8002316:	d9cb      	bls.n	80022b0 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800231a:	9306      	str	r3, [sp, #24]
 800231c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800231e:	9305      	str	r3, [sp, #20]
 8002320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002322:	9304      	str	r3, [sp, #16]
 8002324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002326:	9303      	str	r3, [sp, #12]
 8002328:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800232c:	9302      	str	r3, [sp, #8]
 800232e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	f107 0310 	add.w	r3, r7, #16
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f7ff fec2 	bl	80020c8 <_ntoa_format>
 8002344:	4603      	mov	r3, r0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3738      	adds	r7, #56	; 0x38
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b096      	sub	sp, #88	; 0x58
 8002352:	af08      	add	r7, sp, #32
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002360:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002364:	4313      	orrs	r3, r2
 8002366:	d103      	bne.n	8002370 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8002368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800236a:	f023 0310 	bic.w	r3, r3, #16
 800236e:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <_ntoa_long_long+0x34>
 800237a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800237e:	4313      	orrs	r3, r2
 8002380:	d038      	beq.n	80023f4 <_ntoa_long_long+0xa6>
    do {
      const char digit = (char)(value % base);
 8002382:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002386:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800238a:	f7fe fbc5 	bl	8000b18 <__aeabi_uldivmod>
 800238e:	4613      	mov	r3, r2
 8002390:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002394:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002398:	2b09      	cmp	r3, #9
 800239a:	d804      	bhi.n	80023a6 <_ntoa_long_long+0x58>
 800239c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023a0:	3330      	adds	r3, #48	; 0x30
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	e00d      	b.n	80023c2 <_ntoa_long_long+0x74>
 80023a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023a8:	f003 0320 	and.w	r3, r3, #32
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <_ntoa_long_long+0x66>
 80023b0:	2241      	movs	r2, #65	; 0x41
 80023b2:	e000      	b.n	80023b6 <_ntoa_long_long+0x68>
 80023b4:	2261      	movs	r2, #97	; 0x61
 80023b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023ba:	4413      	add	r3, r2
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	3b0a      	subs	r3, #10
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c4:	1c59      	adds	r1, r3, #1
 80023c6:	6379      	str	r1, [r7, #52]	; 0x34
 80023c8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80023cc:	440b      	add	r3, r1
 80023ce:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80023d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80023d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80023da:	f7fe fb9d 	bl	8000b18 <__aeabi_uldivmod>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80023e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023ea:	4313      	orrs	r3, r2
 80023ec:	d002      	beq.n	80023f4 <_ntoa_long_long+0xa6>
 80023ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f0:	2b1f      	cmp	r3, #31
 80023f2:	d9c6      	bls.n	8002382 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80023f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023f8:	9206      	str	r2, [sp, #24]
 80023fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80023fc:	9205      	str	r2, [sp, #20]
 80023fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002400:	9204      	str	r2, [sp, #16]
 8002402:	9303      	str	r3, [sp, #12]
 8002404:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002408:	9302      	str	r3, [sp, #8]
 800240a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	f107 0310 	add.w	r3, r7, #16
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f7ff fe54 	bl	80020c8 <_ntoa_format>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3738      	adds	r7, #56	; 0x38
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	0000      	movs	r0, r0
 800242c:	0000      	movs	r0, r0
	...

08002430 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b09d      	sub	sp, #116	; 0x74
 8002434:	af04      	add	r7, sp, #16
 8002436:	6178      	str	r0, [r7, #20]
 8002438:	6139      	str	r1, [r7, #16]
 800243a:	60fa      	str	r2, [r7, #12]
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002456:	e9d7 0100 	ldrd	r0, r1, [r7]
 800245a:	f7fe fae3 	bl	8000a24 <__aeabi_dcmpeq>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10f      	bne.n	8002484 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002466:	9303      	str	r3, [sp, #12]
 8002468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800246a:	9302      	str	r3, [sp, #8]
 800246c:	2303      	movs	r3, #3
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	4ba9      	ldr	r3, [pc, #676]	; (8002718 <_ftoa+0x2e8>)
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	6939      	ldr	r1, [r7, #16]
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f7ff fdd4 	bl	8002028 <_out_rev>
 8002480:	4603      	mov	r3, r0
 8002482:	e22b      	b.n	80028dc <_ftoa+0x4ac>
  if (value < -DBL_MAX)
 8002484:	f04f 32ff 	mov.w	r2, #4294967295
 8002488:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800248c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002490:	f7fe fad2 	bl	8000a38 <__aeabi_dcmplt>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00f      	beq.n	80024ba <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800249a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800249c:	9303      	str	r3, [sp, #12]
 800249e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a0:	9302      	str	r3, [sp, #8]
 80024a2:	2304      	movs	r3, #4
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	4b9d      	ldr	r3, [pc, #628]	; (800271c <_ftoa+0x2ec>)
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	6939      	ldr	r1, [r7, #16]
 80024b0:	6978      	ldr	r0, [r7, #20]
 80024b2:	f7ff fdb9 	bl	8002028 <_out_rev>
 80024b6:	4603      	mov	r3, r0
 80024b8:	e210      	b.n	80028dc <_ftoa+0x4ac>
  if (value > DBL_MAX)
 80024ba:	f04f 32ff 	mov.w	r2, #4294967295
 80024be:	4b98      	ldr	r3, [pc, #608]	; (8002720 <_ftoa+0x2f0>)
 80024c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024c4:	f7fe fad6 	bl	8000a74 <__aeabi_dcmpgt>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01d      	beq.n	800250a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80024ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <_ftoa+0xac>
 80024d8:	4b92      	ldr	r3, [pc, #584]	; (8002724 <_ftoa+0x2f4>)
 80024da:	e000      	b.n	80024de <_ftoa+0xae>
 80024dc:	4b92      	ldr	r3, [pc, #584]	; (8002728 <_ftoa+0x2f8>)
 80024de:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80024e0:	f002 0204 	and.w	r2, r2, #4
 80024e4:	2a00      	cmp	r2, #0
 80024e6:	d001      	beq.n	80024ec <_ftoa+0xbc>
 80024e8:	2204      	movs	r2, #4
 80024ea:	e000      	b.n	80024ee <_ftoa+0xbe>
 80024ec:	2203      	movs	r2, #3
 80024ee:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80024f0:	9103      	str	r1, [sp, #12]
 80024f2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80024f4:	9102      	str	r1, [sp, #8]
 80024f6:	9201      	str	r2, [sp, #4]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	6939      	ldr	r1, [r7, #16]
 8002500:	6978      	ldr	r0, [r7, #20]
 8002502:	f7ff fd91 	bl	8002028 <_out_rev>
 8002506:	4603      	mov	r3, r0
 8002508:	e1e8      	b.n	80028dc <_ftoa+0x4ac>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800250a:	a37f      	add	r3, pc, #508	; (adr r3, 8002708 <_ftoa+0x2d8>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002514:	f7fe faae 	bl	8000a74 <__aeabi_dcmpgt>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <_ftoa+0x102>
 800251e:	a37c      	add	r3, pc, #496	; (adr r3, 8002710 <_ftoa+0x2e0>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002528:	f7fe fa86 	bl	8000a38 <__aeabi_dcmplt>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00f      	beq.n	8002552 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002534:	9302      	str	r3, [sp, #8]
 8002536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	ed97 0b00 	vldr	d0, [r7]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	6939      	ldr	r1, [r7, #16]
 8002548:	6978      	ldr	r0, [r7, #20]
 800254a:	f000 f9d1 	bl	80028f0 <_etoa>
 800254e:	4603      	mov	r3, r0
 8002550:	e1c4      	b.n	80028dc <_ftoa+0x4ac>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002552:	2300      	movs	r3, #0
 8002554:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002564:	f7fe fa68 	bl	8000a38 <__aeabi_dcmplt>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00e      	beq.n	800258c <_ftoa+0x15c>
    negative = true;
 800256e:	2301      	movs	r3, #1
 8002570:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8002574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002578:	f04f 0000 	mov.w	r0, #0
 800257c:	f04f 0100 	mov.w	r1, #0
 8002580:	f7fd fe30 	bl	80001e4 <__aeabi_dsub>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800258c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800258e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10e      	bne.n	80025b4 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002596:	2306      	movs	r3, #6
 8002598:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800259a:	e00b      	b.n	80025b4 <_ftoa+0x184>
    buf[len++] = '0';
 800259c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80025a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025a6:	4413      	add	r3, r2
 80025a8:	2230      	movs	r2, #48	; 0x30
 80025aa:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80025ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025b0:	3b01      	subs	r3, #1
 80025b2:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80025b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b6:	2b1f      	cmp	r3, #31
 80025b8:	d802      	bhi.n	80025c0 <_ftoa+0x190>
 80025ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025bc:	2b09      	cmp	r3, #9
 80025be:	d8ed      	bhi.n	800259c <_ftoa+0x16c>
  }

  int whole = (int)value;
 80025c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025c4:	f7fe fa60 	bl	8000a88 <__aeabi_d2iz>
 80025c8:	4603      	mov	r3, r0
 80025ca:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 80025cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80025ce:	f7fd ff57 	bl	8000480 <__aeabi_i2d>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025da:	f7fd fe03 	bl	80001e4 <__aeabi_dsub>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	4a51      	ldr	r2, [pc, #324]	; (800272c <_ftoa+0x2fc>)
 80025e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fd ffaf 	bl	8000554 <__aeabi_dmul>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80025fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002602:	f7fe fa69 	bl	8000ad8 <__aeabi_d2uiz>
 8002606:	4603      	mov	r3, r0
 8002608:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800260a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800260c:	f7fd ff28 	bl	8000460 <__aeabi_ui2d>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002618:	f7fd fde4 	bl	80001e4 <__aeabi_dsub>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	4b41      	ldr	r3, [pc, #260]	; (8002730 <_ftoa+0x300>)
 800262a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800262e:	f7fe fa21 	bl	8000a74 <__aeabi_dcmpgt>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d016      	beq.n	8002666 <_ftoa+0x236>
    ++frac;
 8002638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800263a:	3301      	adds	r3, #1
 800263c:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800263e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002640:	f7fd ff0e 	bl	8000460 <__aeabi_ui2d>
 8002644:	4a39      	ldr	r2, [pc, #228]	; (800272c <_ftoa+0x2fc>)
 8002646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	f7fe fa06 	bl	8000a60 <__aeabi_dcmpge>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d01a      	beq.n	8002690 <_ftoa+0x260>
      frac = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800265e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002660:	3301      	adds	r3, #1
 8002662:	657b      	str	r3, [r7, #84]	; 0x54
 8002664:	e014      	b.n	8002690 <_ftoa+0x260>
    }
  }
  else if (diff < 0.5) {
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	4b31      	ldr	r3, [pc, #196]	; (8002730 <_ftoa+0x300>)
 800266c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002670:	f7fe f9e2 	bl	8000a38 <__aeabi_dcmplt>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10a      	bne.n	8002690 <_ftoa+0x260>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800267a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <_ftoa+0x25a>
 8002680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <_ftoa+0x260>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800268a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800268c:	3301      	adds	r3, #1
 800268e:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8002690:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002692:	2b00      	cmp	r3, #0
 8002694:	d134      	bne.n	8002700 <_ftoa+0x2d0>
    diff = value - (double)whole;
 8002696:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002698:	f7fd fef2 	bl	8000480 <__aeabi_i2d>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026a4:	f7fd fd9e 	bl	80001e4 <__aeabi_dsub>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80026b0:	2301      	movs	r3, #1
 80026b2:	461c      	mov	r4, r3
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <_ftoa+0x300>)
 80026ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80026be:	f7fe f9bb 	bl	8000a38 <__aeabi_dcmplt>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <_ftoa+0x29c>
 80026c8:	2300      	movs	r3, #0
 80026ca:	461c      	mov	r4, r3
 80026cc:	b2e3      	uxtb	r3, r4
 80026ce:	f083 0301 	eor.w	r3, r3, #1
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <_ftoa+0x2bc>
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	4b14      	ldr	r3, [pc, #80]	; (8002730 <_ftoa+0x300>)
 80026de:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80026e2:	f7fe f9c7 	bl	8000a74 <__aeabi_dcmpgt>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d067      	beq.n	80027bc <_ftoa+0x38c>
 80026ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8085 	beq.w	8002802 <_ftoa+0x3d2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80026f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fa:	3301      	adds	r3, #1
 80026fc:	657b      	str	r3, [r7, #84]	; 0x54
 80026fe:	e080      	b.n	8002802 <_ftoa+0x3d2>
    }
  }
  else {
    unsigned int count = prec;
 8002700:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002702:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002704:	e037      	b.n	8002776 <_ftoa+0x346>
 8002706:	bf00      	nop
 8002708:	00000000 	.word	0x00000000
 800270c:	41cdcd65 	.word	0x41cdcd65
 8002710:	00000000 	.word	0x00000000
 8002714:	c1cdcd65 	.word	0xc1cdcd65
 8002718:	08007278 	.word	0x08007278
 800271c:	0800727c 	.word	0x0800727c
 8002720:	7fefffff 	.word	0x7fefffff
 8002724:	08007284 	.word	0x08007284
 8002728:	0800728c 	.word	0x0800728c
 800272c:	08007328 	.word	0x08007328
 8002730:	3fe00000 	.word	0x3fe00000
      --count;
 8002734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002736:	3b01      	subs	r3, #1
 8002738:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800273a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800273c:	4b69      	ldr	r3, [pc, #420]	; (80028e4 <_ftoa+0x4b4>)
 800273e:	fba3 2301 	umull	r2, r3, r3, r1
 8002742:	08da      	lsrs	r2, r3, #3
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	1aca      	subs	r2, r1, r3
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002752:	1c59      	adds	r1, r3, #1
 8002754:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002756:	3230      	adds	r2, #48	; 0x30
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800275e:	440b      	add	r3, r1
 8002760:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8002764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002766:	4a5f      	ldr	r2, [pc, #380]	; (80028e4 <_ftoa+0x4b4>)
 8002768:	fba2 2303 	umull	r2, r3, r2, r3
 800276c:	08db      	lsrs	r3, r3, #3
 800276e:	653b      	str	r3, [r7, #80]	; 0x50
 8002770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <_ftoa+0x34e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002778:	2b1f      	cmp	r3, #31
 800277a:	d9db      	bls.n	8002734 <_ftoa+0x304>
 800277c:	e00a      	b.n	8002794 <_ftoa+0x364>
        break;
 800277e:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002780:	e008      	b.n	8002794 <_ftoa+0x364>
      buf[len++] = '0';
 8002782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002788:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800278c:	4413      	add	r3, r2
 800278e:	2230      	movs	r2, #48	; 0x30
 8002790:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002796:	2b1f      	cmp	r3, #31
 8002798:	d804      	bhi.n	80027a4 <_ftoa+0x374>
 800279a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800279c:	1e5a      	subs	r2, r3, #1
 800279e:	64fa      	str	r2, [r7, #76]	; 0x4c
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ee      	bne.n	8002782 <_ftoa+0x352>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80027a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a6:	2b1f      	cmp	r3, #31
 80027a8:	d82b      	bhi.n	8002802 <_ftoa+0x3d2>
      // add decimal
      buf[len++] = '.';
 80027aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80027b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80027b4:	4413      	add	r3, r2
 80027b6:	222e      	movs	r2, #46	; 0x2e
 80027b8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80027bc:	e021      	b.n	8002802 <_ftoa+0x3d2>
    buf[len++] = (char)(48 + (whole % 10));
 80027be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027c0:	4b49      	ldr	r3, [pc, #292]	; (80028e8 <_ftoa+0x4b8>)
 80027c2:	fb83 1302 	smull	r1, r3, r3, r2
 80027c6:	1099      	asrs	r1, r3, #2
 80027c8:	17d3      	asrs	r3, r2, #31
 80027ca:	1ac9      	subs	r1, r1, r3
 80027cc:	460b      	mov	r3, r1
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	1ad1      	subs	r1, r2, r3
 80027d6:	b2ca      	uxtb	r2, r1
 80027d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027da:	1c59      	adds	r1, r3, #1
 80027dc:	65f9      	str	r1, [r7, #92]	; 0x5c
 80027de:	3230      	adds	r2, #48	; 0x30
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80027e6:	440b      	add	r3, r1
 80027e8:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80027ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ee:	4a3e      	ldr	r2, [pc, #248]	; (80028e8 <_ftoa+0x4b8>)
 80027f0:	fb82 1203 	smull	r1, r2, r2, r3
 80027f4:	1092      	asrs	r2, r2, #2
 80027f6:	17db      	asrs	r3, r3, #31
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	657b      	str	r3, [r7, #84]	; 0x54
 80027fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <_ftoa+0x3da>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002804:	2b1f      	cmp	r3, #31
 8002806:	d9da      	bls.n	80027be <_ftoa+0x38e>
 8002808:	e000      	b.n	800280c <_ftoa+0x3dc>
      break;
 800280a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800280c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d124      	bne.n	8002860 <_ftoa+0x430>
 8002816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01f      	beq.n	8002860 <_ftoa+0x430>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002822:	2b00      	cmp	r3, #0
 8002824:	d015      	beq.n	8002852 <_ftoa+0x422>
 8002826:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800282a:	2b00      	cmp	r3, #0
 800282c:	d104      	bne.n	8002838 <_ftoa+0x408>
 800282e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00c      	beq.n	8002852 <_ftoa+0x422>
      width--;
 8002838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800283a:	3b01      	subs	r3, #1
 800283c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800283e:	e008      	b.n	8002852 <_ftoa+0x422>
      buf[len++] = '0';
 8002840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002846:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800284a:	4413      	add	r3, r2
 800284c:	2230      	movs	r2, #48	; 0x30
 800284e:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002852:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002856:	429a      	cmp	r2, r3
 8002858:	d202      	bcs.n	8002860 <_ftoa+0x430>
 800285a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800285c:	2b1f      	cmp	r3, #31
 800285e:	d9ef      	bls.n	8002840 <_ftoa+0x410>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002862:	2b1f      	cmp	r3, #31
 8002864:	d82a      	bhi.n	80028bc <_ftoa+0x48c>
    if (negative) {
 8002866:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <_ftoa+0x452>
      buf[len++] = '-';
 800286e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002874:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002878:	4413      	add	r3, r2
 800287a:	222d      	movs	r2, #45	; 0x2d
 800287c:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002880:	e01c      	b.n	80028bc <_ftoa+0x48c>
    }
    else if (flags & FLAGS_PLUS) {
 8002882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d009      	beq.n	80028a0 <_ftoa+0x470>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800288c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002892:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002896:	4413      	add	r3, r2
 8002898:	222b      	movs	r2, #43	; 0x2b
 800289a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800289e:	e00d      	b.n	80028bc <_ftoa+0x48c>
    }
    else if (flags & FLAGS_SPACE) {
 80028a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <_ftoa+0x48c>
      buf[len++] = ' ';
 80028aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80028b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80028b4:	4413      	add	r3, r2
 80028b6:	2220      	movs	r2, #32
 80028b8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80028bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028be:	9303      	str	r3, [sp, #12]
 80028c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c2:	9302      	str	r3, [sp, #8]
 80028c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	f107 0318 	add.w	r3, r7, #24
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	6939      	ldr	r1, [r7, #16]
 80028d4:	6978      	ldr	r0, [r7, #20]
 80028d6:	f7ff fba7 	bl	8002028 <_out_rev>
 80028da:	4603      	mov	r3, r0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3764      	adds	r7, #100	; 0x64
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd90      	pop	{r4, r7, pc}
 80028e4:	cccccccd 	.word	0xcccccccd
 80028e8:	66666667 	.word	0x66666667
 80028ec:	00000000 	.word	0x00000000

080028f0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80028f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028f4:	b09d      	sub	sp, #116	; 0x74
 80028f6:	af06      	add	r7, sp, #24
 80028f8:	61f8      	str	r0, [r7, #28]
 80028fa:	61b9      	str	r1, [r7, #24]
 80028fc:	617a      	str	r2, [r7, #20]
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002904:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002908:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800290c:	f7fe f88a 	bl	8000a24 <__aeabi_dcmpeq>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d014      	beq.n	8002940 <_etoa+0x50>
 8002916:	f04f 32ff 	mov.w	r2, #4294967295
 800291a:	4bc3      	ldr	r3, [pc, #780]	; (8002c28 <_etoa+0x338>)
 800291c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002920:	f7fe f8a8 	bl	8000a74 <__aeabi_dcmpgt>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10a      	bne.n	8002940 <_etoa+0x50>
 800292a:	f04f 32ff 	mov.w	r2, #4294967295
 800292e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002932:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002936:	f7fe f87f 	bl	8000a38 <__aeabi_dcmplt>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d012      	beq.n	8002966 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002940:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002944:	9302      	str	r3, [sp, #8]
 8002946:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	ed97 0b02 	vldr	d0, [r7, #8]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	69b9      	ldr	r1, [r7, #24]
 800295c:	69f8      	ldr	r0, [r7, #28]
 800295e:	f7ff fd67 	bl	8002430 <_ftoa>
 8002962:	4603      	mov	r3, r0
 8002964:	e245      	b.n	8002df2 <_etoa+0x502>
  }

  // determine the sign
  const bool negative = value < 0;
 8002966:	2301      	movs	r3, #1
 8002968:	461e      	mov	r6, r3
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002976:	f7fe f85f 	bl	8000a38 <__aeabi_dcmplt>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <_etoa+0x94>
 8002980:	2300      	movs	r3, #0
 8002982:	461e      	mov	r6, r3
 8002984:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8002988:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <_etoa+0xac>
    value = -value;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800299a:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800299c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d102      	bne.n	80029ae <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80029a8:	2306      	movs	r3, #6
 80029aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80029ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80029b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	0d0a      	lsrs	r2, r1, #20
 80029c4:	2300      	movs	r3, #0
 80029c6:	4613      	mov	r3, r2
 80029c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029cc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80029d0:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80029d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029d6:	f04f 30ff 	mov.w	r0, #4294967295
 80029da:	4994      	ldr	r1, [pc, #592]	; (8002c2c <_etoa+0x33c>)
 80029dc:	ea02 0400 	and.w	r4, r2, r0
 80029e0:	ea03 0501 	and.w	r5, r3, r1
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	4b91      	ldr	r3, [pc, #580]	; (8002c30 <_etoa+0x340>)
 80029ea:	ea44 0802 	orr.w	r8, r4, r2
 80029ee:	ea45 0903 	orr.w	r9, r5, r3
 80029f2:	e9c7 8908 	strd	r8, r9, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80029f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80029f8:	f7fd fd42 	bl	8000480 <__aeabi_i2d>
 80029fc:	a37e      	add	r3, pc, #504	; (adr r3, 8002bf8 <_etoa+0x308>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f7fd fda7 	bl	8000554 <__aeabi_dmul>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	a37c      	add	r3, pc, #496	; (adr r3, 8002c00 <_etoa+0x310>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fd fbe8 	bl	80001e8 <__adddf3>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4614      	mov	r4, r2
 8002a1e:	461d      	mov	r5, r3
 8002a20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	4b82      	ldr	r3, [pc, #520]	; (8002c34 <_etoa+0x344>)
 8002a2a:	f7fd fbdb 	bl	80001e4 <__aeabi_dsub>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	a374      	add	r3, pc, #464	; (adr r3, 8002c08 <_etoa+0x318>)
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	f7fd fd8a 	bl	8000554 <__aeabi_dmul>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4620      	mov	r0, r4
 8002a46:	4629      	mov	r1, r5
 8002a48:	f7fd fbce 	bl	80001e8 <__adddf3>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	f7fe f818 	bl	8000a88 <__aeabi_d2iz>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002a5c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002a5e:	f7fd fd0f 	bl	8000480 <__aeabi_i2d>
 8002a62:	a36b      	add	r3, pc, #428	; (adr r3, 8002c10 <_etoa+0x320>)
 8002a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a68:	f7fd fd74 	bl	8000554 <__aeabi_dmul>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	4b6f      	ldr	r3, [pc, #444]	; (8002c38 <_etoa+0x348>)
 8002a7a:	f7fd fbb5 	bl	80001e8 <__adddf3>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	f7fd ffff 	bl	8000a88 <__aeabi_d2iz>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002a8e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002a90:	f7fd fcf6 	bl	8000480 <__aeabi_i2d>
 8002a94:	a360      	add	r3, pc, #384	; (adr r3, 8002c18 <_etoa+0x328>)
 8002a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9a:	f7fd fd5b 	bl	8000554 <__aeabi_dmul>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4614      	mov	r4, r2
 8002aa4:	461d      	mov	r5, r3
 8002aa6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002aa8:	f7fd fcea 	bl	8000480 <__aeabi_i2d>
 8002aac:	a35c      	add	r3, pc, #368	; (adr r3, 8002c20 <_etoa+0x330>)
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	f7fd fd4f 	bl	8000554 <__aeabi_dmul>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4620      	mov	r0, r4
 8002abc:	4629      	mov	r1, r5
 8002abe:	f7fd fb91 	bl	80001e4 <__aeabi_dsub>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 8002aca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ace:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002ad2:	f7fd fd3f 	bl	8000554 <__aeabi_dmul>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	0503      	lsls	r3, r0, #20
 8002af4:	2200      	movs	r2, #0
 8002af6:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002afa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002afe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	f7fd fb6f 	bl	80001e8 <__adddf3>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4690      	mov	r8, r2
 8002b10:	4699      	mov	r9, r3
 8002b12:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b16:	f04f 0000 	mov.w	r0, #0
 8002b1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b1e:	f7fd fb61 	bl	80001e4 <__aeabi_dsub>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4692      	mov	sl, r2
 8002b28:	469b      	mov	fp, r3
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	4b43      	ldr	r3, [pc, #268]	; (8002c3c <_etoa+0x34c>)
 8002b30:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b34:	f7fd fe38 	bl	80007a8 <__aeabi_ddiv>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	4b3e      	ldr	r3, [pc, #248]	; (8002c40 <_etoa+0x350>)
 8002b46:	f7fd fb4f 	bl	80001e8 <__adddf3>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b52:	f7fd fe29 	bl	80007a8 <__aeabi_ddiv>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	4b38      	ldr	r3, [pc, #224]	; (8002c44 <_etoa+0x354>)
 8002b64:	f7fd fb40 	bl	80001e8 <__adddf3>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b70:	f7fd fe1a 	bl	80007a8 <__aeabi_ddiv>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4650      	mov	r0, sl
 8002b7a:	4659      	mov	r1, fp
 8002b7c:	f7fd fb34 	bl	80001e8 <__adddf3>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4640      	mov	r0, r8
 8002b86:	4649      	mov	r1, r9
 8002b88:	f7fd fe0e 	bl	80007a8 <__aeabi_ddiv>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	4b25      	ldr	r3, [pc, #148]	; (8002c30 <_etoa+0x340>)
 8002b9a:	f7fd fb25 	bl	80001e8 <__adddf3>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	f7fd fcd5 	bl	8000554 <__aeabi_dmul>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8002bb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bba:	f7fd ff3d 	bl	8000a38 <__aeabi_dcmplt>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00d      	beq.n	8002be0 <_etoa+0x2f0>
    expval--;
 8002bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8002bca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <_etoa+0x350>)
 8002bd4:	f7fd fde8 	bl	80007a8 <__aeabi_ddiv>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be2:	2b63      	cmp	r3, #99	; 0x63
 8002be4:	dc30      	bgt.n	8002c48 <_etoa+0x358>
 8002be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be8:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002bec:	db2c      	blt.n	8002c48 <_etoa+0x358>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	e02b      	b.n	8002c4a <_etoa+0x35a>
 8002bf2:	bf00      	nop
 8002bf4:	f3af 8000 	nop.w
 8002bf8:	509f79fb 	.word	0x509f79fb
 8002bfc:	3fd34413 	.word	0x3fd34413
 8002c00:	8b60c8b3 	.word	0x8b60c8b3
 8002c04:	3fc68a28 	.word	0x3fc68a28
 8002c08:	636f4361 	.word	0x636f4361
 8002c0c:	3fd287a7 	.word	0x3fd287a7
 8002c10:	0979a371 	.word	0x0979a371
 8002c14:	400a934f 	.word	0x400a934f
 8002c18:	bbb55516 	.word	0xbbb55516
 8002c1c:	40026bb1 	.word	0x40026bb1
 8002c20:	fefa39ef 	.word	0xfefa39ef
 8002c24:	3fe62e42 	.word	0x3fe62e42
 8002c28:	7fefffff 	.word	0x7fefffff
 8002c2c:	000fffff 	.word	0x000fffff
 8002c30:	3ff00000 	.word	0x3ff00000
 8002c34:	3ff80000 	.word	0x3ff80000
 8002c38:	3fe00000 	.word	0x3fe00000
 8002c3c:	402c0000 	.word	0x402c0000
 8002c40:	40240000 	.word	0x40240000
 8002c44:	40180000 	.word	0x40180000
 8002c48:	2305      	movs	r3, #5
 8002c4a:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d03d      	beq.n	8002cd4 <_etoa+0x3e4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002c58:	a369      	add	r3, pc, #420	; (adr r3, 8002e00 <_etoa+0x510>)
 8002c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c62:	f7fd fefd 	bl	8000a60 <__aeabi_dcmpge>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d024      	beq.n	8002cb6 <_etoa+0x3c6>
 8002c6c:	a366      	add	r3, pc, #408	; (adr r3, 8002e08 <_etoa+0x518>)
 8002c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c76:	f7fd fedf 	bl	8000a38 <__aeabi_dcmplt>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d01a      	beq.n	8002cb6 <_etoa+0x3c6>
      if ((int)prec > expval) {
 8002c80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c86:	429a      	cmp	r2, r3
 8002c88:	da07      	bge.n	8002c9a <_etoa+0x3aa>
        prec = (unsigned)((int)prec - expval - 1);
 8002c8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c98:	e002      	b.n	8002ca0 <_etoa+0x3b0>
      }
      else {
        prec = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ca4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8002cb4:	e00e      	b.n	8002cd4 <_etoa+0x3e4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002cb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <_etoa+0x3e4>
 8002cbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <_etoa+0x3e4>
        --prec;
 8002cca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8002cda:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d904      	bls.n	8002cee <_etoa+0x3fe>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002ce4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cec:	e001      	b.n	8002cf2 <_etoa+0x402>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d004      	beq.n	8002d08 <_etoa+0x418>
 8002cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <_etoa+0x418>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8002d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <_etoa+0x432>
    value /= conv.F;
 8002d0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d16:	f7fd fd47 	bl	80007a8 <__aeabi_ddiv>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002d26:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d006      	beq.n	8002d3c <_etoa+0x44c>
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	603b      	str	r3, [r7, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	e003      	b.n	8002d44 <_etoa+0x454>
 8002d3c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d40:	ed87 7b00 	vstr	d7, [r7]
 8002d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d4c:	9302      	str	r3, [sp, #8]
 8002d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	ed97 0b00 	vldr	d0, [r7]
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	69b9      	ldr	r1, [r7, #24]
 8002d62:	69f8      	ldr	r0, [r7, #28]
 8002d64:	f7ff fb64 	bl	8002430 <_ftoa>
 8002d68:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8002d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d03f      	beq.n	8002df0 <_etoa+0x500>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8002d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <_etoa+0x490>
 8002d7c:	2045      	movs	r0, #69	; 0x45
 8002d7e:	e000      	b.n	8002d82 <_etoa+0x492>
 8002d80:	2065      	movs	r0, #101	; 0x65
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	1c53      	adds	r3, r2, #1
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	69fc      	ldr	r4, [r7, #28]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	69b9      	ldr	r1, [r7, #24]
 8002d8e:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8002d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	bfb8      	it	lt
 8002d96:	425b      	neglt	r3, r3
 8002d98:	4618      	mov	r0, r3
 8002d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d9c:	0fdb      	lsrs	r3, r3, #31
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002da2:	3a01      	subs	r2, #1
 8002da4:	2105      	movs	r1, #5
 8002da6:	9105      	str	r1, [sp, #20]
 8002da8:	9204      	str	r2, [sp, #16]
 8002daa:	2200      	movs	r2, #0
 8002dac:	9203      	str	r2, [sp, #12]
 8002dae:	220a      	movs	r2, #10
 8002db0:	9202      	str	r2, [sp, #8]
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	9000      	str	r0, [sp, #0]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	69b9      	ldr	r1, [r7, #24]
 8002dbc:	69f8      	ldr	r0, [r7, #28]
 8002dbe:	f7ff fa5f 	bl	8002280 <_ntoa_long>
 8002dc2:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002dc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00f      	beq.n	8002df0 <_etoa+0x500>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8002dd0:	e007      	b.n	8002de2 <_etoa+0x4f2>
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	1c53      	adds	r3, r2, #1
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	69fc      	ldr	r4, [r7, #28]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	69b9      	ldr	r1, [r7, #24]
 8002dde:	2020      	movs	r0, #32
 8002de0:	47a0      	blx	r4
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d8f0      	bhi.n	8002dd2 <_etoa+0x4e2>
    }
  }
  return idx;
 8002df0:	697b      	ldr	r3, [r7, #20]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	375c      	adds	r7, #92	; 0x5c
 8002df6:	46bd      	mov	sp, r7
 8002df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dfc:	f3af 8000 	nop.w
 8002e00:	eb1c432d 	.word	0xeb1c432d
 8002e04:	3f1a36e2 	.word	0x3f1a36e2
 8002e08:	00000000 	.word	0x00000000
 8002e0c:	412e8480 	.word	0x412e8480

08002e10 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002e10:	b5b0      	push	{r4, r5, r7, lr}
 8002e12:	b0a0      	sub	sp, #128	; 0x80
 8002e14:	af0a      	add	r7, sp, #40	; 0x28
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f040 8494 	bne.w	8003752 <_vsnprintf+0x942>
    // use null output function
    out = _out_null;
 8002e2a:	4ba0      	ldr	r3, [pc, #640]	; (80030ac <_vsnprintf+0x29c>)
 8002e2c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8002e2e:	f000 bc90 	b.w	8003752 <_vsnprintf+0x942>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b25      	cmp	r3, #37	; 0x25
 8002e38:	d00d      	beq.n	8002e56 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	7818      	ldrb	r0, [r3, #0]
 8002e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e40:	1c53      	adds	r3, r2, #1
 8002e42:	647b      	str	r3, [r7, #68]	; 0x44
 8002e44:	68fc      	ldr	r4, [r7, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	47a0      	blx	r4
      format++;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	603b      	str	r3, [r7, #0]
      continue;
 8002e52:	f000 bc7e 	b.w	8003752 <_vsnprintf+0x942>
    }
    else {
      // yes, evaluate it
      format++;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	3b20      	subs	r3, #32
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d856      	bhi.n	8002f18 <_vsnprintf+0x108>
 8002e6a:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <_vsnprintf+0x60>)
 8002e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e70:	08002ef1 	.word	0x08002ef1
 8002e74:	08002f19 	.word	0x08002f19
 8002e78:	08002f19 	.word	0x08002f19
 8002e7c:	08002f05 	.word	0x08002f05
 8002e80:	08002f19 	.word	0x08002f19
 8002e84:	08002f19 	.word	0x08002f19
 8002e88:	08002f19 	.word	0x08002f19
 8002e8c:	08002f19 	.word	0x08002f19
 8002e90:	08002f19 	.word	0x08002f19
 8002e94:	08002f19 	.word	0x08002f19
 8002e98:	08002f19 	.word	0x08002f19
 8002e9c:	08002edd 	.word	0x08002edd
 8002ea0:	08002f19 	.word	0x08002f19
 8002ea4:	08002ec9 	.word	0x08002ec9
 8002ea8:	08002f19 	.word	0x08002f19
 8002eac:	08002f19 	.word	0x08002f19
 8002eb0:	08002eb5 	.word	0x08002eb5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	657b      	str	r3, [r7, #84]	; 0x54
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ec6:	e02a      	b.n	8002f1e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eca:	f043 0302 	orr.w	r3, r3, #2
 8002ece:	657b      	str	r3, [r7, #84]	; 0x54
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	603b      	str	r3, [r7, #0]
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eda:	e020      	b.n	8002f1e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	2301      	movs	r3, #1
 8002eec:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eee:	e016      	b.n	8002f1e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef2:	f043 0308 	orr.w	r3, r3, #8
 8002ef6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	3301      	adds	r3, #1
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	2301      	movs	r3, #1
 8002f00:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f02:	e00c      	b.n	8002f1e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f06:	f043 0310 	orr.w	r3, r3, #16
 8002f0a:	657b      	str	r3, [r7, #84]	; 0x54
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	2301      	movs	r3, #1
 8002f14:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f16:	e002      	b.n	8002f1e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f1c:	bf00      	nop
      }
    } while (n);
 8002f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d19d      	bne.n	8002e60 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff f840 	bl	8001fb2 <_is_digit>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <_vsnprintf+0x134>
      width = _atoi(&format);
 8002f38:	463b      	mov	r3, r7
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff f850 	bl	8001fe0 <_atoi>
 8002f40:	6538      	str	r0, [r7, #80]	; 0x50
 8002f42:	e018      	b.n	8002f76 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b2a      	cmp	r3, #42	; 0x2a
 8002f4a:	d114      	bne.n	8002f76 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 8002f4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f4e:	1d1a      	adds	r2, r3, #4
 8002f50:	66ba      	str	r2, [r7, #104]	; 0x68
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	da07      	bge.n	8002f6c <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 8002f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f5e:	f043 0302 	orr.w	r3, r3, #2
 8002f62:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8002f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f66:	425b      	negs	r3, r3
 8002f68:	653b      	str	r3, [r7, #80]	; 0x50
 8002f6a:	e001      	b.n	8002f70 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	3301      	adds	r3, #1
 8002f74:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b2e      	cmp	r3, #46	; 0x2e
 8002f80:	d124      	bne.n	8002fcc <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 8002f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f88:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff f80c 	bl	8001fb2 <_is_digit>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8002fa0:	463b      	mov	r3, r7
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff f81c 	bl	8001fe0 <_atoi>
 8002fa8:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002faa:	e00f      	b.n	8002fcc <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8002fb2:	d10b      	bne.n	8002fcc <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 8002fb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fb6:	1d1a      	adds	r2, r3, #4
 8002fb8:	66ba      	str	r2, [r7, #104]	; 0x68
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	3b68      	subs	r3, #104	; 0x68
 8002fd2:	2b12      	cmp	r3, #18
 8002fd4:	d866      	bhi.n	80030a4 <_vsnprintf+0x294>
 8002fd6:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <_vsnprintf+0x1cc>)
 8002fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fdc:	0800304f 	.word	0x0800304f
 8002fe0:	080030a5 	.word	0x080030a5
 8002fe4:	08003085 	.word	0x08003085
 8002fe8:	080030a5 	.word	0x080030a5
 8002fec:	08003029 	.word	0x08003029
 8002ff0:	080030a5 	.word	0x080030a5
 8002ff4:	080030a5 	.word	0x080030a5
 8002ff8:	080030a5 	.word	0x080030a5
 8002ffc:	080030a5 	.word	0x080030a5
 8003000:	080030a5 	.word	0x080030a5
 8003004:	080030a5 	.word	0x080030a5
 8003008:	080030a5 	.word	0x080030a5
 800300c:	08003075 	.word	0x08003075
 8003010:	080030a5 	.word	0x080030a5
 8003014:	080030a5 	.word	0x080030a5
 8003018:	080030a5 	.word	0x080030a5
 800301c:	080030a5 	.word	0x080030a5
 8003020:	080030a5 	.word	0x080030a5
 8003024:	08003095 	.word	0x08003095
      case 'l' :
        flags |= FLAGS_LONG;
 8003028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800302a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	3301      	adds	r3, #1
 8003034:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b6c      	cmp	r3, #108	; 0x6c
 800303c:	d134      	bne.n	80030a8 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800303e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003040:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003044:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	3301      	adds	r3, #1
 800304a:	603b      	str	r3, [r7, #0]
        }
        break;
 800304c:	e02c      	b.n	80030a8 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800304e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003054:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b68      	cmp	r3, #104	; 0x68
 8003062:	d125      	bne.n	80030b0 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8003064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800306a:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	3301      	adds	r3, #1
 8003070:	603b      	str	r3, [r7, #0]
        }
        break;
 8003072:	e01d      	b.n	80030b0 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	3301      	adds	r3, #1
 8003080:	603b      	str	r3, [r7, #0]
        break;
 8003082:	e016      	b.n	80030b2 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800308a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	3301      	adds	r3, #1
 8003090:	603b      	str	r3, [r7, #0]
        break;
 8003092:	e00e      	b.n	80030b2 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	3301      	adds	r3, #1
 80030a0:	603b      	str	r3, [r7, #0]
        break;
 80030a2:	e006      	b.n	80030b2 <_vsnprintf+0x2a2>
      default :
        break;
 80030a4:	bf00      	nop
 80030a6:	e004      	b.n	80030b2 <_vsnprintf+0x2a2>
        break;
 80030a8:	bf00      	nop
 80030aa:	e002      	b.n	80030b2 <_vsnprintf+0x2a2>
 80030ac:	08001f37 	.word	0x08001f37
        break;
 80030b0:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	3b25      	subs	r3, #37	; 0x25
 80030b8:	2b53      	cmp	r3, #83	; 0x53
 80030ba:	f200 833d 	bhi.w	8003738 <_vsnprintf+0x928>
 80030be:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <_vsnprintf+0x2b4>)
 80030c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c4:	08003721 	.word	0x08003721
 80030c8:	08003739 	.word	0x08003739
 80030cc:	08003739 	.word	0x08003739
 80030d0:	08003739 	.word	0x08003739
 80030d4:	08003739 	.word	0x08003739
 80030d8:	08003739 	.word	0x08003739
 80030dc:	08003739 	.word	0x08003739
 80030e0:	08003739 	.word	0x08003739
 80030e4:	08003739 	.word	0x08003739
 80030e8:	08003739 	.word	0x08003739
 80030ec:	08003739 	.word	0x08003739
 80030f0:	08003739 	.word	0x08003739
 80030f4:	08003739 	.word	0x08003739
 80030f8:	08003739 	.word	0x08003739
 80030fc:	08003739 	.word	0x08003739
 8003100:	08003739 	.word	0x08003739
 8003104:	08003739 	.word	0x08003739
 8003108:	08003739 	.word	0x08003739
 800310c:	08003739 	.word	0x08003739
 8003110:	08003739 	.word	0x08003739
 8003114:	08003739 	.word	0x08003739
 8003118:	08003739 	.word	0x08003739
 800311c:	08003739 	.word	0x08003739
 8003120:	08003739 	.word	0x08003739
 8003124:	08003739 	.word	0x08003739
 8003128:	08003739 	.word	0x08003739
 800312c:	08003739 	.word	0x08003739
 8003130:	08003739 	.word	0x08003739
 8003134:	08003739 	.word	0x08003739
 8003138:	08003739 	.word	0x08003739
 800313c:	08003739 	.word	0x08003739
 8003140:	08003739 	.word	0x08003739
 8003144:	080034ef 	.word	0x080034ef
 8003148:	080034a3 	.word	0x080034a3
 800314c:	080034ef 	.word	0x080034ef
 8003150:	08003739 	.word	0x08003739
 8003154:	08003739 	.word	0x08003739
 8003158:	08003739 	.word	0x08003739
 800315c:	08003739 	.word	0x08003739
 8003160:	08003739 	.word	0x08003739
 8003164:	08003739 	.word	0x08003739
 8003168:	08003739 	.word	0x08003739
 800316c:	08003739 	.word	0x08003739
 8003170:	08003739 	.word	0x08003739
 8003174:	08003739 	.word	0x08003739
 8003178:	08003739 	.word	0x08003739
 800317c:	08003739 	.word	0x08003739
 8003180:	08003739 	.word	0x08003739
 8003184:	08003739 	.word	0x08003739
 8003188:	08003739 	.word	0x08003739
 800318c:	08003739 	.word	0x08003739
 8003190:	08003215 	.word	0x08003215
 8003194:	08003739 	.word	0x08003739
 8003198:	08003739 	.word	0x08003739
 800319c:	08003739 	.word	0x08003739
 80031a0:	08003739 	.word	0x08003739
 80031a4:	08003739 	.word	0x08003739
 80031a8:	08003739 	.word	0x08003739
 80031ac:	08003739 	.word	0x08003739
 80031b0:	08003739 	.word	0x08003739
 80031b4:	08003739 	.word	0x08003739
 80031b8:	08003215 	.word	0x08003215
 80031bc:	0800355b 	.word	0x0800355b
 80031c0:	08003215 	.word	0x08003215
 80031c4:	080034ef 	.word	0x080034ef
 80031c8:	080034a3 	.word	0x080034a3
 80031cc:	080034ef 	.word	0x080034ef
 80031d0:	08003739 	.word	0x08003739
 80031d4:	08003215 	.word	0x08003215
 80031d8:	08003739 	.word	0x08003739
 80031dc:	08003739 	.word	0x08003739
 80031e0:	08003739 	.word	0x08003739
 80031e4:	08003739 	.word	0x08003739
 80031e8:	08003739 	.word	0x08003739
 80031ec:	08003215 	.word	0x08003215
 80031f0:	08003693 	.word	0x08003693
 80031f4:	08003739 	.word	0x08003739
 80031f8:	08003739 	.word	0x08003739
 80031fc:	080035cf 	.word	0x080035cf
 8003200:	08003739 	.word	0x08003739
 8003204:	08003215 	.word	0x08003215
 8003208:	08003739 	.word	0x08003739
 800320c:	08003739 	.word	0x08003739
 8003210:	08003215 	.word	0x08003215
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b78      	cmp	r3, #120	; 0x78
 800321a:	d003      	beq.n	8003224 <_vsnprintf+0x414>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b58      	cmp	r3, #88	; 0x58
 8003222:	d102      	bne.n	800322a <_vsnprintf+0x41a>
          base = 16U;
 8003224:	2310      	movs	r3, #16
 8003226:	643b      	str	r3, [r7, #64]	; 0x40
 8003228:	e013      	b.n	8003252 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b6f      	cmp	r3, #111	; 0x6f
 8003230:	d102      	bne.n	8003238 <_vsnprintf+0x428>
          base =  8U;
 8003232:	2308      	movs	r3, #8
 8003234:	643b      	str	r3, [r7, #64]	; 0x40
 8003236:	e00c      	b.n	8003252 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b62      	cmp	r3, #98	; 0x62
 800323e:	d102      	bne.n	8003246 <_vsnprintf+0x436>
          base =  2U;
 8003240:	2302      	movs	r3, #2
 8003242:	643b      	str	r3, [r7, #64]	; 0x40
 8003244:	e005      	b.n	8003252 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8003246:	230a      	movs	r3, #10
 8003248:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800324a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324c:	f023 0310 	bic.w	r3, r3, #16
 8003250:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b58      	cmp	r3, #88	; 0x58
 8003258:	d103      	bne.n	8003262 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800325a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800325c:	f043 0320 	orr.w	r3, r3, #32
 8003260:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b69      	cmp	r3, #105	; 0x69
 8003268:	d007      	beq.n	800327a <_vsnprintf+0x46a>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b64      	cmp	r3, #100	; 0x64
 8003270:	d003      	beq.n	800327a <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003274:	f023 030c 	bic.w	r3, r3, #12
 8003278:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800327a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8003284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b69      	cmp	r3, #105	; 0x69
 8003292:	d004      	beq.n	800329e <_vsnprintf+0x48e>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b64      	cmp	r3, #100	; 0x64
 800329a:	f040 808e 	bne.w	80033ba <_vsnprintf+0x5aa>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800329e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d02f      	beq.n	8003308 <_vsnprintf+0x4f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80032a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032aa:	3307      	adds	r3, #7
 80032ac:	f023 0307 	bic.w	r3, r3, #7
 80032b0:	f103 0208 	add.w	r2, r3, #8
 80032b4:	66ba      	str	r2, [r7, #104]	; 0x68
 80032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80032be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032c2:	2a00      	cmp	r2, #0
 80032c4:	f173 0100 	sbcs.w	r1, r3, #0
 80032c8:	da02      	bge.n	80032d0 <_vsnprintf+0x4c0>
 80032ca:	4252      	negs	r2, r2
 80032cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80032d0:	4610      	mov	r0, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	0fdb      	lsrs	r3, r3, #31
 80032d8:	b2dc      	uxtb	r4, r3
 80032da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032dc:	461a      	mov	r2, r3
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 80032e4:	9508      	str	r5, [sp, #32]
 80032e6:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80032e8:	9507      	str	r5, [sp, #28]
 80032ea:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80032ec:	9506      	str	r5, [sp, #24]
 80032ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80032f2:	9402      	str	r4, [sp, #8]
 80032f4:	e9cd 0100 	strd	r0, r1, [sp]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f7ff f825 	bl	800234e <_ntoa_long_long>
 8003304:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8003306:	e0c8      	b.n	800349a <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01e      	beq.n	8003350 <_vsnprintf+0x540>
            const long value = va_arg(va, long);
 8003312:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003314:	1d1a      	adds	r2, r3, #4
 8003316:	66ba      	str	r2, [r7, #104]	; 0x68
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b00      	cmp	r3, #0
 8003320:	bfb8      	it	lt
 8003322:	425b      	neglt	r3, r3
 8003324:	4619      	mov	r1, r3
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	0fdb      	lsrs	r3, r3, #31
 800332a:	b2db      	uxtb	r3, r3
 800332c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800332e:	9205      	str	r2, [sp, #20]
 8003330:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003332:	9204      	str	r2, [sp, #16]
 8003334:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003336:	9203      	str	r2, [sp, #12]
 8003338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800333a:	9202      	str	r2, [sp, #8]
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	9100      	str	r1, [sp, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003344:	68b9      	ldr	r1, [r7, #8]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f7fe ff9a 	bl	8002280 <_ntoa_long>
 800334c:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800334e:	e0a4      	b.n	800349a <_vsnprintf+0x68a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <_vsnprintf+0x556>
 800335a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800335c:	1d1a      	adds	r2, r3, #4
 800335e:	66ba      	str	r2, [r7, #104]	; 0x68
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	e00e      	b.n	8003384 <_vsnprintf+0x574>
 8003366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <_vsnprintf+0x56c>
 8003370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003372:	1d1a      	adds	r2, r3, #4
 8003374:	66ba      	str	r2, [r7, #104]	; 0x68
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	b21b      	sxth	r3, r3
 800337a:	e003      	b.n	8003384 <_vsnprintf+0x574>
 800337c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800337e:	1d1a      	adds	r2, r3, #4
 8003380:	66ba      	str	r2, [r7, #104]	; 0x68
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	2b00      	cmp	r3, #0
 800338a:	bfb8      	it	lt
 800338c:	425b      	neglt	r3, r3
 800338e:	4619      	mov	r1, r3
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	0fdb      	lsrs	r3, r3, #31
 8003394:	b2db      	uxtb	r3, r3
 8003396:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003398:	9205      	str	r2, [sp, #20]
 800339a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800339c:	9204      	str	r2, [sp, #16]
 800339e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033a0:	9203      	str	r2, [sp, #12]
 80033a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033a4:	9202      	str	r2, [sp, #8]
 80033a6:	9301      	str	r3, [sp, #4]
 80033a8:	9100      	str	r1, [sp, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f7fe ff65 	bl	8002280 <_ntoa_long>
 80033b6:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80033b8:	e06f      	b.n	800349a <_vsnprintf+0x68a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80033ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d020      	beq.n	8003406 <_vsnprintf+0x5f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80033c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033c6:	3307      	adds	r3, #7
 80033c8:	f023 0307 	bic.w	r3, r3, #7
 80033cc:	f103 0208 	add.w	r2, r3, #8
 80033d0:	66ba      	str	r2, [r7, #104]	; 0x68
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033d8:	4608      	mov	r0, r1
 80033da:	f04f 0100 	mov.w	r1, #0
 80033de:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80033e0:	9408      	str	r4, [sp, #32]
 80033e2:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80033e4:	9407      	str	r4, [sp, #28]
 80033e6:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80033e8:	9406      	str	r4, [sp, #24]
 80033ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80033ee:	2100      	movs	r1, #0
 80033f0:	9102      	str	r1, [sp, #8]
 80033f2:	e9cd 2300 	strd	r2, r3, [sp]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7fe ffa6 	bl	800234e <_ntoa_long_long>
 8003402:	6478      	str	r0, [r7, #68]	; 0x44
 8003404:	e049      	b.n	800349a <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d016      	beq.n	800343e <_vsnprintf+0x62e>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003412:	1d1a      	adds	r2, r3, #4
 8003414:	66ba      	str	r2, [r7, #104]	; 0x68
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800341a:	9205      	str	r2, [sp, #20]
 800341c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800341e:	9204      	str	r2, [sp, #16]
 8003420:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003422:	9203      	str	r2, [sp, #12]
 8003424:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003426:	9202      	str	r2, [sp, #8]
 8003428:	2200      	movs	r2, #0
 800342a:	9201      	str	r2, [sp, #4]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7fe ff23 	bl	8002280 <_ntoa_long>
 800343a:	6478      	str	r0, [r7, #68]	; 0x44
 800343c:	e02d      	b.n	800349a <_vsnprintf+0x68a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800343e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <_vsnprintf+0x644>
 8003448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800344a:	1d1a      	adds	r2, r3, #4
 800344c:	66ba      	str	r2, [r7, #104]	; 0x68
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e00e      	b.n	8003472 <_vsnprintf+0x662>
 8003454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <_vsnprintf+0x65a>
 800345e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003460:	1d1a      	adds	r2, r3, #4
 8003462:	66ba      	str	r2, [r7, #104]	; 0x68
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	e003      	b.n	8003472 <_vsnprintf+0x662>
 800346a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800346c:	1d1a      	adds	r2, r3, #4
 800346e:	66ba      	str	r2, [r7, #104]	; 0x68
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003476:	9305      	str	r3, [sp, #20]
 8003478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800347a:	9304      	str	r3, [sp, #16]
 800347c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800347e:	9303      	str	r3, [sp, #12]
 8003480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003482:	9302      	str	r3, [sp, #8]
 8003484:	2300      	movs	r3, #0
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f7fe fef4 	bl	8002280 <_ntoa_long>
 8003498:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	3301      	adds	r3, #1
 800349e:	603b      	str	r3, [r7, #0]
        break;
 80034a0:	e157      	b.n	8003752 <_vsnprintf+0x942>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b46      	cmp	r3, #70	; 0x46
 80034a8:	d103      	bne.n	80034b2 <_vsnprintf+0x6a2>
 80034aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ac:	f043 0320 	orr.w	r3, r3, #32
 80034b0:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80034b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034b4:	3307      	adds	r3, #7
 80034b6:	f023 0307 	bic.w	r3, r3, #7
 80034ba:	f103 0208 	add.w	r2, r3, #8
 80034be:	66ba      	str	r2, [r7, #104]	; 0x68
 80034c0:	ed93 7b00 	vldr	d7, [r3]
 80034c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c6:	9302      	str	r3, [sp, #8]
 80034c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	eeb0 0a47 	vmov.f32	s0, s14
 80034d4:	eef0 0a67 	vmov.f32	s1, s15
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f7fe ffa6 	bl	8002430 <_ftoa>
 80034e4:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	603b      	str	r3, [r7, #0]
        break;
 80034ec:	e131      	b.n	8003752 <_vsnprintf+0x942>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b67      	cmp	r3, #103	; 0x67
 80034f4:	d003      	beq.n	80034fe <_vsnprintf+0x6ee>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b47      	cmp	r3, #71	; 0x47
 80034fc:	d103      	bne.n	8003506 <_vsnprintf+0x6f6>
 80034fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003500:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003504:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b45      	cmp	r3, #69	; 0x45
 800350c:	d003      	beq.n	8003516 <_vsnprintf+0x706>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b47      	cmp	r3, #71	; 0x47
 8003514:	d103      	bne.n	800351e <_vsnprintf+0x70e>
 8003516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003518:	f043 0320 	orr.w	r3, r3, #32
 800351c:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800351e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003520:	3307      	adds	r3, #7
 8003522:	f023 0307 	bic.w	r3, r3, #7
 8003526:	f103 0208 	add.w	r2, r3, #8
 800352a:	66ba      	str	r2, [r7, #104]	; 0x68
 800352c:	ed93 7b00 	vldr	d7, [r3]
 8003530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003532:	9302      	str	r3, [sp, #8]
 8003534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003536:	9301      	str	r3, [sp, #4]
 8003538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	eeb0 0a47 	vmov.f32	s0, s14
 8003540:	eef0 0a67 	vmov.f32	s1, s15
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff f9d0 	bl	80028f0 <_etoa>
 8003550:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	3301      	adds	r3, #1
 8003556:	603b      	str	r3, [r7, #0]
        break;
 8003558:	e0fb      	b.n	8003752 <_vsnprintf+0x942>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800355a:	2301      	movs	r3, #1
 800355c:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800355e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10e      	bne.n	8003586 <_vsnprintf+0x776>
          while (l++ < width) {
 8003568:	e007      	b.n	800357a <_vsnprintf+0x76a>
            out(' ', buffer, idx++, maxlen);
 800356a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800356c:	1c53      	adds	r3, r2, #1
 800356e:	647b      	str	r3, [r7, #68]	; 0x44
 8003570:	68fc      	ldr	r4, [r7, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	2020      	movs	r0, #32
 8003578:	47a0      	blx	r4
          while (l++ < width) {
 800357a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003580:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003582:	429a      	cmp	r2, r3
 8003584:	d8f1      	bhi.n	800356a <_vsnprintf+0x75a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003586:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003588:	1d1a      	adds	r2, r3, #4
 800358a:	66ba      	str	r2, [r7, #104]	; 0x68
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	b2d8      	uxtb	r0, r3
 8003590:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003592:	1c53      	adds	r3, r2, #1
 8003594:	647b      	str	r3, [r7, #68]	; 0x44
 8003596:	68fc      	ldr	r4, [r7, #12]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800359e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00e      	beq.n	80035c6 <_vsnprintf+0x7b6>
          while (l++ < width) {
 80035a8:	e007      	b.n	80035ba <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 80035aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035ac:	1c53      	adds	r3, r2, #1
 80035ae:	647b      	str	r3, [r7, #68]	; 0x44
 80035b0:	68fc      	ldr	r4, [r7, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	2020      	movs	r0, #32
 80035b8:	47a0      	blx	r4
          while (l++ < width) {
 80035ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d8f1      	bhi.n	80035aa <_vsnprintf+0x79a>
          }
        }
        format++;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	603b      	str	r3, [r7, #0]
        break;
 80035cc:	e0c1      	b.n	8003752 <_vsnprintf+0x942>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80035ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035d0:	1d1a      	adds	r2, r3, #4
 80035d2:	66ba      	str	r2, [r7, #104]	; 0x68
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80035d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <_vsnprintf+0x7d2>
 80035de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e0:	e001      	b.n	80035e6 <_vsnprintf+0x7d6>
 80035e2:	f04f 33ff 	mov.w	r3, #4294967295
 80035e6:	4619      	mov	r1, r3
 80035e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80035ea:	f7fe fcc5 	bl	8001f78 <_strnlen_s>
 80035ee:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80035f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <_vsnprintf+0x7f6>
          l = (l < precision ? l : precision);
 80035fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035fe:	4293      	cmp	r3, r2
 8003600:	bf28      	it	cs
 8003602:	4613      	movcs	r3, r2
 8003604:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8003606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d11a      	bne.n	8003646 <_vsnprintf+0x836>
          while (l++ < width) {
 8003610:	e007      	b.n	8003622 <_vsnprintf+0x812>
            out(' ', buffer, idx++, maxlen);
 8003612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003614:	1c53      	adds	r3, r2, #1
 8003616:	647b      	str	r3, [r7, #68]	; 0x44
 8003618:	68fc      	ldr	r4, [r7, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	2020      	movs	r0, #32
 8003620:	47a0      	blx	r4
          while (l++ < width) {
 8003622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	637a      	str	r2, [r7, #52]	; 0x34
 8003628:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800362a:	429a      	cmp	r2, r3
 800362c:	d8f1      	bhi.n	8003612 <_vsnprintf+0x802>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800362e:	e00a      	b.n	8003646 <_vsnprintf+0x836>
          out(*(p++), buffer, idx++, maxlen);
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	63ba      	str	r2, [r7, #56]	; 0x38
 8003636:	7818      	ldrb	r0, [r3, #0]
 8003638:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800363a:	1c53      	adds	r3, r2, #1
 800363c:	647b      	str	r3, [r7, #68]	; 0x44
 800363e:	68fc      	ldr	r4, [r7, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68b9      	ldr	r1, [r7, #8]
 8003644:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d009      	beq.n	8003662 <_vsnprintf+0x852>
 800364e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0eb      	beq.n	8003630 <_vsnprintf+0x820>
 8003658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800365a:	1e5a      	subs	r2, r3, #1
 800365c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e6      	bne.n	8003630 <_vsnprintf+0x820>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00e      	beq.n	800368a <_vsnprintf+0x87a>
          while (l++ < width) {
 800366c:	e007      	b.n	800367e <_vsnprintf+0x86e>
            out(' ', buffer, idx++, maxlen);
 800366e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003670:	1c53      	adds	r3, r2, #1
 8003672:	647b      	str	r3, [r7, #68]	; 0x44
 8003674:	68fc      	ldr	r4, [r7, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	2020      	movs	r0, #32
 800367c:	47a0      	blx	r4
          while (l++ < width) {
 800367e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	637a      	str	r2, [r7, #52]	; 0x34
 8003684:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003686:	429a      	cmp	r2, r3
 8003688:	d8f1      	bhi.n	800366e <_vsnprintf+0x85e>
          }
        }
        format++;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	3301      	adds	r3, #1
 800368e:	603b      	str	r3, [r7, #0]
        break;
 8003690:	e05f      	b.n	8003752 <_vsnprintf+0x942>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003692:	2308      	movs	r3, #8
 8003694:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003698:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800369c:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800369e:	2300      	movs	r3, #0
 80036a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 80036a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d01e      	beq.n	80036ea <_vsnprintf+0x8da>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80036ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036ae:	1d1a      	adds	r2, r3, #4
 80036b0:	66ba      	str	r2, [r7, #104]	; 0x68
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036bc:	9108      	str	r1, [sp, #32]
 80036be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80036c0:	9107      	str	r1, [sp, #28]
 80036c2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80036c4:	9106      	str	r1, [sp, #24]
 80036c6:	f04f 0010 	mov.w	r0, #16
 80036ca:	f04f 0100 	mov.w	r1, #0
 80036ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80036d2:	2100      	movs	r1, #0
 80036d4:	9102      	str	r1, [sp, #8]
 80036d6:	e9cd 2300 	strd	r2, r3, [sp]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f7fe fe34 	bl	800234e <_ntoa_long_long>
 80036e6:	6478      	str	r0, [r7, #68]	; 0x44
 80036e8:	e016      	b.n	8003718 <_vsnprintf+0x908>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80036ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036ec:	1d1a      	adds	r2, r3, #4
 80036ee:	66ba      	str	r2, [r7, #104]	; 0x68
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f6:	9305      	str	r3, [sp, #20]
 80036f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036fa:	9304      	str	r3, [sp, #16]
 80036fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036fe:	9303      	str	r3, [sp, #12]
 8003700:	2310      	movs	r3, #16
 8003702:	9302      	str	r3, [sp, #8]
 8003704:	2300      	movs	r3, #0
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	9200      	str	r2, [sp, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f7fe fdb5 	bl	8002280 <_ntoa_long>
 8003716:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	3301      	adds	r3, #1
 800371c:	603b      	str	r3, [r7, #0]
        break;
 800371e:	e018      	b.n	8003752 <_vsnprintf+0x942>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003722:	1c53      	adds	r3, r2, #1
 8003724:	647b      	str	r3, [r7, #68]	; 0x44
 8003726:	68fc      	ldr	r4, [r7, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	2025      	movs	r0, #37	; 0x25
 800372e:	47a0      	blx	r4
        format++;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	3301      	adds	r3, #1
 8003734:	603b      	str	r3, [r7, #0]
        break;
 8003736:	e00c      	b.n	8003752 <_vsnprintf+0x942>

      default :
        out(*format, buffer, idx++, maxlen);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	7818      	ldrb	r0, [r3, #0]
 800373c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800373e:	1c53      	adds	r3, r2, #1
 8003740:	647b      	str	r3, [r7, #68]	; 0x44
 8003742:	68fc      	ldr	r4, [r7, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	47a0      	blx	r4
        format++;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	3301      	adds	r3, #1
 800374e:	603b      	str	r3, [r7, #0]
        break;
 8003750:	bf00      	nop
  while (*format)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	f47f ab6b 	bne.w	8002e32 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800375c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d302      	bcc.n	800376a <_vsnprintf+0x95a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	1e5a      	subs	r2, r3, #1
 8003768:	e000      	b.n	800376c <_vsnprintf+0x95c>
 800376a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800376c:	68fc      	ldr	r4, [r7, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	2000      	movs	r0, #0
 8003774:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003778:	4618      	mov	r0, r3
 800377a:	3758      	adds	r7, #88	; 0x58
 800377c:	46bd      	mov	sp, r7
 800377e:	bdb0      	pop	{r4, r5, r7, pc}

08003780 <vprintf_>:
  return ret;
}


int vprintf_(const char* format, va_list va)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af02      	add	r7, sp, #8
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800378a:	f107 010c 	add.w	r1, r7, #12
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f04f 32ff 	mov.w	r2, #4294967295
 8003798:	4803      	ldr	r0, [pc, #12]	; (80037a8 <vprintf_+0x28>)
 800379a:	f7ff fb39 	bl	8002e10 <_vsnprintf>
 800379e:	4603      	mov	r3, r0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	08001f53 	.word	0x08001f53

080037ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <HAL_MspInit+0x44>)
 80037b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b6:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <HAL_MspInit+0x44>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	6613      	str	r3, [r2, #96]	; 0x60
 80037be:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <HAL_MspInit+0x44>)
 80037c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_MspInit+0x44>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	4a08      	ldr	r2, [pc, #32]	; (80037f0 <HAL_MspInit+0x44>)
 80037d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d4:	6593      	str	r3, [r2, #88]	; 0x58
 80037d6:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <HAL_MspInit+0x44>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000

080037f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037f8:	e7fe      	b.n	80037f8 <NMI_Handler+0x4>

080037fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037fa:	b480      	push	{r7}
 80037fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037fe:	e7fe      	b.n	80037fe <HardFault_Handler+0x4>

08003800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003804:	e7fe      	b.n	8003804 <MemManage_Handler+0x4>

08003806 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800380a:	e7fe      	b.n	800380a <BusFault_Handler+0x4>

0800380c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003810:	e7fe      	b.n	8003810 <UsageFault_Handler+0x4>

08003812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800382e:	b480      	push	{r7}
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003832:	bf00      	nop
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003840:	f000 fc70 	bl	8004124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003844:	bf00      	nop
 8003846:	bd80      	pop	{r7, pc}

08003848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003850:	4a14      	ldr	r2, [pc, #80]	; (80038a4 <_sbrk+0x5c>)
 8003852:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <_sbrk+0x60>)
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800385c:	4b13      	ldr	r3, [pc, #76]	; (80038ac <_sbrk+0x64>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d102      	bne.n	800386a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003864:	4b11      	ldr	r3, [pc, #68]	; (80038ac <_sbrk+0x64>)
 8003866:	4a12      	ldr	r2, [pc, #72]	; (80038b0 <_sbrk+0x68>)
 8003868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800386a:	4b10      	ldr	r3, [pc, #64]	; (80038ac <_sbrk+0x64>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4413      	add	r3, r2
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	429a      	cmp	r2, r3
 8003876:	d207      	bcs.n	8003888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003878:	f003 f85a 	bl	8006930 <__errno>
 800387c:	4603      	mov	r3, r0
 800387e:	220c      	movs	r2, #12
 8003880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003882:	f04f 33ff 	mov.w	r3, #4294967295
 8003886:	e009      	b.n	800389c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003888:	4b08      	ldr	r3, [pc, #32]	; (80038ac <_sbrk+0x64>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800388e:	4b07      	ldr	r3, [pc, #28]	; (80038ac <_sbrk+0x64>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	4a05      	ldr	r2, [pc, #20]	; (80038ac <_sbrk+0x64>)
 8003898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800389a:	68fb      	ldr	r3, [r7, #12]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20018000 	.word	0x20018000
 80038a8:	00000400 	.word	0x00000400
 80038ac:	20000174 	.word	0x20000174
 80038b0:	20000618 	.word	0x20000618

080038b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80038b8:	4b15      	ldr	r3, [pc, #84]	; (8003910 <SystemInit+0x5c>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	4a14      	ldr	r2, [pc, #80]	; (8003910 <SystemInit+0x5c>)
 80038c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80038c8:	4b12      	ldr	r3, [pc, #72]	; (8003914 <SystemInit+0x60>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a11      	ldr	r2, [pc, #68]	; (8003914 <SystemInit+0x60>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80038d4:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <SystemInit+0x60>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80038da:	4b0e      	ldr	r3, [pc, #56]	; (8003914 <SystemInit+0x60>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a0d      	ldr	r2, [pc, #52]	; (8003914 <SystemInit+0x60>)
 80038e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80038e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80038e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80038ea:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <SystemInit+0x60>)
 80038ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038f2:	4b08      	ldr	r3, [pc, #32]	; (8003914 <SystemInit+0x60>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a07      	ldr	r2, [pc, #28]	; (8003914 <SystemInit+0x60>)
 80038f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <SystemInit+0x60>)
 8003900:	2200      	movs	r2, #0
 8003902:	619a      	str	r2, [r3, #24]
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	e000ed00 	.word	0xe000ed00
 8003914:	40021000 	.word	0x40021000

08003918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <__NVIC_GetPriorityGrouping+0x18>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	0a1b      	lsrs	r3, r3, #8
 8003922:	f003 0307 	and.w	r3, r3, #7
}
 8003926:	4618      	mov	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	2b00      	cmp	r3, #0
 8003944:	db0b      	blt.n	800395e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	f003 021f 	and.w	r2, r3, #31
 800394c:	4907      	ldr	r1, [pc, #28]	; (800396c <__NVIC_EnableIRQ+0x38>)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	2001      	movs	r0, #1
 8003956:	fa00 f202 	lsl.w	r2, r0, r2
 800395a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	e000e100 	.word	0xe000e100

08003970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	6039      	str	r1, [r7, #0]
 800397a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003980:	2b00      	cmp	r3, #0
 8003982:	db0a      	blt.n	800399a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	b2da      	uxtb	r2, r3
 8003988:	490c      	ldr	r1, [pc, #48]	; (80039bc <__NVIC_SetPriority+0x4c>)
 800398a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398e:	0112      	lsls	r2, r2, #4
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	440b      	add	r3, r1
 8003994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003998:	e00a      	b.n	80039b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	4908      	ldr	r1, [pc, #32]	; (80039c0 <__NVIC_SetPriority+0x50>)
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	3b04      	subs	r3, #4
 80039a8:	0112      	lsls	r2, r2, #4
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	440b      	add	r3, r1
 80039ae:	761a      	strb	r2, [r3, #24]
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000e100 	.word	0xe000e100
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	; 0x24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f1c3 0307 	rsb	r3, r3, #7
 80039de:	2b04      	cmp	r3, #4
 80039e0:	bf28      	it	cs
 80039e2:	2304      	movcs	r3, #4
 80039e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3304      	adds	r3, #4
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d902      	bls.n	80039f4 <NVIC_EncodePriority+0x30>
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	3b03      	subs	r3, #3
 80039f2:	e000      	b.n	80039f6 <NVIC_EncodePriority+0x32>
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f8:	f04f 32ff 	mov.w	r2, #4294967295
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43da      	mvns	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	401a      	ands	r2, r3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	fa01 f303 	lsl.w	r3, r1, r3
 8003a16:	43d9      	mvns	r1, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a1c:	4313      	orrs	r3, r2
         );
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3724      	adds	r7, #36	; 0x24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <LL_USART_IsEnabled>:
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <LL_USART_IsEnabled+0x18>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <LL_USART_IsEnabled+0x1a>
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <LL_USART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	621a      	str	r2, [r3, #32]
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2202      	movs	r2, #2
 8003a76:	621a      	str	r2, [r3, #32]
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2204      	movs	r2, #4
 8003a90:	621a      	str	r2, [r3, #32]
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	621a      	str	r2, [r3, #32]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f043 0220 	orr.w	r2, r3, #32
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	601a      	str	r2, [r3, #0]
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	601a      	str	r2, [r3, #0]
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	601a      	str	r2, [r3, #0]
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b28:	2b80      	cmp	r3, #128	; 0x80
 8003b2a:	d101      	bne.n	8003b30 <LL_USART_IsEnabledIT_TXE+0x18>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <LL_USART_IsEnabledIT_TXE+0x1a>
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <LL_USART_RequestRxDataFlush>:
  * @rmtoll RQR          RXFRQ         LL_USART_RequestRxDataFlush
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->RQR, (uint16_t)USART_RQR_RXFRQ);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8b1b      	ldrh	r3, [r3, #24]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	f043 0308 	orr.w	r3, r3, #8
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	831a      	strh	r2, [r3, #24]
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <uart_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t uart_init(uart_config_t* uart_cfg)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
    if (uart_cfg->uart_reg_base == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <uart_init+0x14>
    {
        return MOD_ERR_ARG;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e04a      	b.n	8003c0e <uart_init+0xaa>
    }
    else if (!LL_USART_IsEnabled(uart_cfg->uart_reg_base))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff ff54 	bl	8003a2a <LL_USART_IsEnabled>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <uart_init+0x28>
    {
    	return MOD_ERR_PERIPH;
 8003b88:	2307      	movs	r3, #7
 8003b8a:	e040      	b.n	8003c0e <uart_init+0xaa>
    }
    else
    {
		switch(uart_cfg->irq_num)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003b92:	2b27      	cmp	r3, #39	; 0x27
 8003b94:	dc02      	bgt.n	8003b9c <uart_init+0x38>
 8003b96:	2b25      	cmp	r3, #37	; 0x25
 8003b98:	da03      	bge.n	8003ba2 <uart_init+0x3e>
 8003b9a:	e037      	b.n	8003c0c <uart_init+0xa8>
 8003b9c:	3b34      	subs	r3, #52	; 0x34
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d834      	bhi.n	8003c0c <uart_init+0xa8>
			case USART1_IRQn:
			case USART2_IRQn:
			case USART3_IRQn:
			case UART4_IRQn:
			case UART5_IRQn:
				memset(&uart, 0, sizeof(uart));
 8003ba2:	f240 4274 	movw	r2, #1140	; 0x474
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	481b      	ldr	r0, [pc, #108]	; (8003c18 <uart_init+0xb4>)
 8003baa:	f002 fefb 	bl	80069a4 <memset>
				uart.irq_num = uart_cfg->irq_num;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8003bb4:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <uart_init+0xb4>)
 8003bb6:	711a      	strb	r2, [r3, #4]
				uart.uart_reg_base = uart_cfg->uart_reg_base;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <uart_init+0xb4>)
 8003bbe:	6013      	str	r3, [r2, #0]
			    mod_err_t err = cmd_register(&uart_client_info);
 8003bc0:	4816      	ldr	r0, [pc, #88]	; (8003c1c <uart_init+0xb8>)
 8003bc2:	f7fd f957 	bl	8000e74 <cmd_register>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	73fb      	strb	r3, [r7, #15]
			    LOGI(TAG, "Initialized UART");
 8003bca:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <uart_init+0xbc>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d01a      	beq.n	8003c08 <uart_init+0xa4>
 8003bd2:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <uart_init+0xc0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	dd16      	ble.n	8003c08 <uart_init+0xa4>
 8003bda:	f000 fab7 	bl	800414c <HAL_GetTick>
 8003bde:	60b8      	str	r0, [r7, #8]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4a11      	ldr	r2, [pc, #68]	; (8003c28 <uart_init+0xc4>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	0999      	lsrs	r1, r3, #6
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	4a0e      	ldr	r2, [pc, #56]	; (8003c28 <uart_init+0xc4>)
 8003bee:	fba2 0203 	umull	r0, r2, r2, r3
 8003bf2:	0992      	lsrs	r2, r2, #6
 8003bf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bf8:	fb00 f202 	mul.w	r2, r0, r2
 8003bfc:	1a9a      	subs	r2, r3, r2
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <uart_init+0xc8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	480b      	ldr	r0, [pc, #44]	; (8003c30 <uart_init+0xcc>)
 8003c04:	f7fd fd96 	bl	8001734 <log_printf>
				return err;
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	e000      	b.n	8003c0e <uart_init+0xaa>
			default:
				return MOD_ERR_ARG;
 8003c0c:	2301      	movs	r3, #1
		}
    }

}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000178 	.word	0x20000178
 8003c1c:	20000078 	.word	0x20000078
 8003c20:	20000054 	.word	0x20000054
 8003c24:	20000058 	.word	0x20000058
 8003c28:	10624dd3 	.word	0x10624dd3
 8003c2c:	20000090 	.word	0x20000090
 8003c30:	080072c8 	.word	0x080072c8

08003c34 <uart_start>:

mod_err_t uart_start(void)
{
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
    if (uart.uart_reg_base == NULL)
 8003c3a:	4b25      	ldr	r3, [pc, #148]	; (8003cd0 <uart_start+0x9c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d120      	bne.n	8003c84 <uart_start+0x50>
    {
        LOGE(TAG, "UART not initialized");
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <uart_start+0xa0>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01a      	beq.n	8003c80 <uart_start+0x4c>
 8003c4a:	4b23      	ldr	r3, [pc, #140]	; (8003cd8 <uart_start+0xa4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	dd16      	ble.n	8003c80 <uart_start+0x4c>
 8003c52:	f000 fa7b 	bl	800414c <HAL_GetTick>
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a20      	ldr	r2, [pc, #128]	; (8003cdc <uart_start+0xa8>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	0999      	lsrs	r1, r3, #6
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a1d      	ldr	r2, [pc, #116]	; (8003cdc <uart_start+0xa8>)
 8003c66:	fba2 0203 	umull	r0, r2, r2, r3
 8003c6a:	0992      	lsrs	r2, r2, #6
 8003c6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c70:	fb00 f202 	mul.w	r2, r0, r2
 8003c74:	1a9a      	subs	r2, r3, r2
 8003c76:	4b1a      	ldr	r3, [pc, #104]	; (8003ce0 <uart_start+0xac>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	481a      	ldr	r0, [pc, #104]	; (8003ce4 <uart_start+0xb0>)
 8003c7c:	f7fd fd5a 	bl	8001734 <log_printf>
        return MOD_ERR_NOT_INIT;
 8003c80:	2305      	movs	r3, #5
 8003c82:	e020      	b.n	8003cc6 <uart_start+0x92>
    }

    LL_USART_EnableIT_TXE(uart.uart_reg_base);  // Generate interrupt whenever TXE flag is set.
 8003c84:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <uart_start+0x9c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff ff25 	bl	8003ad8 <LL_USART_EnableIT_TXE>
    LL_USART_EnableIT_RXNE(uart.uart_reg_base); // Generate interrupt whenever RXNE flag is set.
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <uart_start+0x9c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff ff10 	bl	8003ab8 <LL_USART_EnableIT_RXNE>

    /* Set group and sub priority to highest priority (0). */
    __NVIC_SetPriority(uart.irq_num, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 8003c98:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <uart_start+0x9c>)
 8003c9a:	f993 4004 	ldrsb.w	r4, [r3, #4]
 8003c9e:	f7ff fe3b 	bl	8003918 <__NVIC_GetPriorityGrouping>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff fe8b 	bl	80039c4 <NVIC_EncodePriority>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	f7ff fe5c 	bl	8003970 <__NVIC_SetPriority>

    /* Enable UARTx interrupt channel. */
    __NVIC_EnableIRQ(uart.irq_num);
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <uart_start+0x9c>)
 8003cba:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fe38 	bl	8003934 <__NVIC_EnableIRQ>

    return MOD_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd90      	pop	{r4, r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000178 	.word	0x20000178
 8003cd4:	20000054 	.word	0x20000054
 8003cd8:	20000058 	.word	0x20000058
 8003cdc:	10624dd3 	.word	0x10624dd3
 8003ce0:	20000090 	.word	0x20000090
 8003ce4:	080072f4 	.word	0x080072f4

08003ce8 <uart_putc>:

mod_err_t uart_putc(char c)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	71fb      	strb	r3, [r7, #7]

    uint16_t next_put_idx = (uart.tx_buf_put_idx + 1) % UART_TX_BUF_SIZE;
 8003cf2:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <uart_putc+0x98>)
 8003cf4:	899b      	ldrh	r3, [r3, #12]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	425a      	negs	r2, r3
 8003cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cfe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003d02:	bf58      	it	pl
 8003d04:	4253      	negpl	r3, r2
 8003d06:	81fb      	strh	r3, [r7, #14]

    /* Tx circular buffer is full. */
    if (next_put_idx == uart.tx_buf_get_idx) {
 8003d08:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <uart_putc+0x98>)
 8003d0a:	895b      	ldrh	r3, [r3, #10]
 8003d0c:	89fa      	ldrh	r2, [r7, #14]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d111      	bne.n	8003d36 <uart_putc+0x4e>
        INC_SAT_U16(uart_pms[CNT_TX_BUF_OVERRUN]);
 8003d12:	4b1c      	ldr	r3, [pc, #112]	; (8003d84 <uart_putc+0x9c>)
 8003d14:	891a      	ldrh	r2, [r3, #8]
 8003d16:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <uart_putc+0x9c>)
 8003d18:	891b      	ldrh	r3, [r3, #8]
 8003d1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d1e:	428b      	cmp	r3, r1
 8003d20:	bf14      	ite	ne
 8003d22:	2301      	movne	r3, #1
 8003d24:	2300      	moveq	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	4b15      	ldr	r3, [pc, #84]	; (8003d84 <uart_putc+0x9c>)
 8003d30:	811a      	strh	r2, [r3, #8]
        return MOD_ERR_BUF_OVERRUN;
 8003d32:	2304      	movs	r3, #4
 8003d34:	e01f      	b.n	8003d76 <uart_putc+0x8e>
    }

    /* Place char in buffer */
    uart.tx_buf[uart.tx_buf_put_idx] = c;
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <uart_putc+0x98>)
 8003d38:	899b      	ldrh	r3, [r3, #12]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <uart_putc+0x98>)
 8003d3e:	4413      	add	r3, r2
 8003d40:	79fa      	ldrb	r2, [r7, #7]
 8003d42:	739a      	strb	r2, [r3, #14]
    uart.tx_buf_put_idx = next_put_idx;
 8003d44:	4a0e      	ldr	r2, [pc, #56]	; (8003d80 <uart_putc+0x98>)
 8003d46:	89fb      	ldrh	r3, [r7, #14]
 8003d48:	8193      	strh	r3, [r2, #12]

    // Ensure TXE interrupt is enabled.
    if (uart.uart_reg_base != NULL && !LL_USART_IsEnabledIT_TXE(uart.uart_reg_base)) {
 8003d4a:	4b0d      	ldr	r3, [pc, #52]	; (8003d80 <uart_putc+0x98>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d010      	beq.n	8003d74 <uart_putc+0x8c>
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <uart_putc+0x98>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fede 	bl	8003b18 <LL_USART_IsEnabledIT_TXE>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d108      	bne.n	8003d74 <uart_putc+0x8c>
  __ASM volatile ("cpsid i" : : : "memory");
 8003d62:	b672      	cpsid	i
}
 8003d64:	bf00      	nop
        __disable_irq();
        LL_USART_EnableIT_TXE(uart.uart_reg_base);
 8003d66:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <uart_putc+0x98>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff feb4 	bl	8003ad8 <LL_USART_EnableIT_TXE>
  __ASM volatile ("cpsie i" : : : "memory");
 8003d70:	b662      	cpsie	i
}
 8003d72:	bf00      	nop
        __enable_irq();
    }

    return MOD_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000178 	.word	0x20000178
 8003d84:	200005ec 	.word	0x200005ec

08003d88 <uart_getc>:

uint8_t uart_getc(char* c)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
    /* Check if rx buffer is empty. */
    if (uart.rx_buf_get_idx == uart.rx_buf_put_idx)
 8003d90:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <uart_getc+0x58>)
 8003d92:	88da      	ldrh	r2, [r3, #6]
 8003d94:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <uart_getc+0x58>)
 8003d96:	891b      	ldrh	r3, [r3, #8]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d101      	bne.n	8003da0 <uart_getc+0x18>
    {
        return 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e019      	b.n	8003dd4 <uart_getc+0x4c>
    }
    else
    {
    	/* Get character and increment get index */
    	*c = uart.rx_buf[uart.rx_buf_get_idx];
 8003da0:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <uart_getc+0x58>)
 8003da2:	88db      	ldrh	r3, [r3, #6]
 8003da4:	461a      	mov	r2, r3
 8003da6:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <uart_getc+0x58>)
 8003da8:	4413      	add	r3, r2
 8003daa:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	701a      	strb	r2, [r3, #0]
    	uart.rx_buf_get_idx = (uart.rx_buf_get_idx + 1) % UART_RX_BUF_SIZE;
 8003db2:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <uart_getc+0x58>)
 8003db4:	88db      	ldrh	r3, [r3, #6]
 8003db6:	3301      	adds	r3, #1
 8003db8:	4a0a      	ldr	r2, [pc, #40]	; (8003de4 <uart_getc+0x5c>)
 8003dba:	fb82 1203 	smull	r1, r2, r2, r3
 8003dbe:	1151      	asrs	r1, r2, #5
 8003dc0:	17da      	asrs	r2, r3, #31
 8003dc2:	1a8a      	subs	r2, r1, r2
 8003dc4:	2164      	movs	r1, #100	; 0x64
 8003dc6:	fb01 f202 	mul.w	r2, r1, r2
 8003dca:	1a9a      	subs	r2, r3, r2
 8003dcc:	b292      	uxth	r2, r2
 8003dce:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <uart_getc+0x58>)
 8003dd0:	80da      	strh	r2, [r3, #6]
    	return 1;
 8003dd2:	2301      	movs	r3, #1
    }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	20000178 	.word	0x20000178
 8003de4:	51eb851f 	.word	0x51eb851f

08003de8 <USART1_IRQHandler>:
////////////////////////////////////////////////////////////////////////////////
// Interrupt handlers
////////////////////////////////////////////////////////////////////////////////

void USART1_IRQHandler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
    UART_ISR();
 8003dec:	f000 f88a 	bl	8003f04 <UART_ISR>
}
 8003df0:	bf00      	nop
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
    UART_ISR();
 8003df8:	f000 f884 	bl	8003f04 <UART_ISR>
}
 8003dfc:	bf00      	nop
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
    UART_ISR();
 8003e04:	f000 f87e 	bl	8003f04 <UART_ISR>
}
 8003e08:	bf00      	nop
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
    UART_ISR();
 8003e10:	f000 f878 	bl	8003f04 <UART_ISR>
}
 8003e14:	bf00      	nop
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
    UART_ISR();
 8003e1c:	f000 f872 	bl	8003f04 <UART_ISR>
}
 8003e20:	bf00      	nop
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <read_rdr>:

/**
 * @brief Read character from receive data register (RDR) and place into receive buffer.
 */
static void read_rdr(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
    uint16_t next_rx_put_idx = (uart.rx_buf_put_idx + 1) % UART_RX_BUF_SIZE;
 8003e2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <read_rdr+0x80>)
 8003e2c:	891b      	ldrh	r3, [r3, #8]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	4a1d      	ldr	r2, [pc, #116]	; (8003ea8 <read_rdr+0x84>)
 8003e32:	fb82 1203 	smull	r1, r2, r2, r3
 8003e36:	1151      	asrs	r1, r2, #5
 8003e38:	17da      	asrs	r2, r3, #31
 8003e3a:	1a8a      	subs	r2, r1, r2
 8003e3c:	2164      	movs	r1, #100	; 0x64
 8003e3e:	fb01 f202 	mul.w	r2, r1, r2
 8003e42:	1a9a      	subs	r2, r3, r2
 8003e44:	4613      	mov	r3, r2
 8003e46:	80fb      	strh	r3, [r7, #6]
   
    if (next_rx_put_idx == uart.rx_buf_get_idx)
 8003e48:	4b16      	ldr	r3, [pc, #88]	; (8003ea4 <read_rdr+0x80>)
 8003e4a:	88db      	ldrh	r3, [r3, #6]
 8003e4c:	88fa      	ldrh	r2, [r7, #6]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d115      	bne.n	8003e7e <read_rdr+0x5a>
    {
        INC_SAT_U16(uart_pms[CNT_RX_BUF_OVERRUN]);
 8003e52:	4b16      	ldr	r3, [pc, #88]	; (8003eac <read_rdr+0x88>)
 8003e54:	895a      	ldrh	r2, [r3, #10]
 8003e56:	4b15      	ldr	r3, [pc, #84]	; (8003eac <read_rdr+0x88>)
 8003e58:	895b      	ldrh	r3, [r3, #10]
 8003e5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e5e:	428b      	cmp	r3, r1
 8003e60:	bf14      	ite	ne
 8003e62:	2301      	movne	r3, #1
 8003e64:	2300      	moveq	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <read_rdr+0x88>)
 8003e70:	815a      	strh	r2, [r3, #10]
        LL_USART_RequestRxDataFlush(uart.uart_reg_base); // Drop character.
 8003e72:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <read_rdr+0x80>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff fe61 	bl	8003b3e <LL_USART_RequestRxDataFlush>
    else
    {
        uart.rx_buf[uart.rx_buf_put_idx] = uart.uart_reg_base->RDR & 0xFFU; // Clears RXNE flag.
        uart.rx_buf_put_idx = next_rx_put_idx;
    }
}
 8003e7c:	e00e      	b.n	8003e9c <read_rdr+0x78>
        uart.rx_buf[uart.rx_buf_put_idx] = uart.uart_reg_base->RDR & 0xFFU; // Clears RXNE flag.
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <read_rdr+0x80>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <read_rdr+0x80>)
 8003e88:	891b      	ldrh	r3, [r3, #8]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <read_rdr+0x80>)
 8003e90:	440b      	add	r3, r1
 8003e92:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
        uart.rx_buf_put_idx = next_rx_put_idx;
 8003e96:	4a03      	ldr	r2, [pc, #12]	; (8003ea4 <read_rdr+0x80>)
 8003e98:	88fb      	ldrh	r3, [r7, #6]
 8003e9a:	8113      	strh	r3, [r2, #8]
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20000178 	.word	0x20000178
 8003ea8:	51eb851f 	.word	0x51eb851f
 8003eac:	200005ec 	.word	0x200005ec

08003eb0 <write_tdr>:

/**
 * @brief Write character from transmit buffer to transmit data register (TDR).
 */
static void write_tdr(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
	if (uart.tx_buf_get_idx == uart.tx_buf_put_idx)
 8003eb4:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <write_tdr+0x50>)
 8003eb6:	895a      	ldrh	r2, [r3, #10]
 8003eb8:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <write_tdr+0x50>)
 8003eba:	899b      	ldrh	r3, [r3, #12]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d105      	bne.n	8003ecc <write_tdr+0x1c>
	{
		/* Nothing to transmit, disable TXE flag from generating an interrupt. */
		LL_USART_DisableIT_TXE(uart.uart_reg_base);
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <write_tdr+0x50>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fe17 	bl	8003af8 <LL_USART_DisableIT_TXE>
	else
	{
		uart.uart_reg_base->TDR = uart.tx_buf[uart.tx_buf_get_idx]; // Clears TXE flag.
		uart.tx_buf_get_idx = (uart.tx_buf_get_idx + 1) % UART_TX_BUF_SIZE;
	}
}
 8003eca:	e016      	b.n	8003efa <write_tdr+0x4a>
		uart.uart_reg_base->TDR = uart.tx_buf[uart.tx_buf_get_idx]; // Clears TXE flag.
 8003ecc:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <write_tdr+0x50>)
 8003ece:	895b      	ldrh	r3, [r3, #10]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <write_tdr+0x50>)
 8003ed4:	4413      	add	r3, r2
 8003ed6:	7b9a      	ldrb	r2, [r3, #14]
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <write_tdr+0x50>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	b292      	uxth	r2, r2
 8003ede:	851a      	strh	r2, [r3, #40]	; 0x28
		uart.tx_buf_get_idx = (uart.tx_buf_get_idx + 1) % UART_TX_BUF_SIZE;
 8003ee0:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <write_tdr+0x50>)
 8003ee2:	895b      	ldrh	r3, [r3, #10]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	425a      	negs	r2, r3
 8003ee8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eec:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003ef0:	bf58      	it	pl
 8003ef2:	4253      	negpl	r3, r2
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	4b02      	ldr	r3, [pc, #8]	; (8003f00 <write_tdr+0x50>)
 8003ef8:	815a      	strh	r2, [r3, #10]
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000178 	.word	0x20000178

08003f04 <UART_ISR>:


static void UART_ISR(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
    /* Read interrupt status register. */
    uint32_t status_reg = uart.uart_reg_base->ISR;
 8003f0a:	4b41      	ldr	r3, [pc, #260]	; (8004010 <UART_ISR+0x10c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	607b      	str	r3, [r7, #4]

    /* Service interrupt flags. */
    if (status_reg & USART_ISR_RXNE_Msk)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <UART_ISR+0x1c>
    {
        read_rdr();
 8003f1c:	f7ff ff82 	bl	8003e24 <read_rdr>
    }
    if (status_reg & USART_ISR_TXE_Msk)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <UART_ISR+0x2a>
    {
    	write_tdr();
 8003f2a:	f7ff ffc1 	bl	8003eb0 <write_tdr>
    }

    /* Check error flags. */
    if (status_reg & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE | USART_ISR_PE))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d067      	beq.n	8004008 <UART_ISR+0x104>
    {
          if (status_reg & LL_USART_ISR_ORE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d014      	beq.n	8003f6c <UART_ISR+0x68>
          {   // An overrun error occurs if a character is received and RXNE has not been reset.
        	  // The RDR register content is not lost but the shift register is overwritten by incoming data.
              INC_SAT_U16(uart_pms[CNT_RX_UART_ORE]);
 8003f42:	4b34      	ldr	r3, [pc, #208]	; (8004014 <UART_ISR+0x110>)
 8003f44:	881a      	ldrh	r2, [r3, #0]
 8003f46:	4b33      	ldr	r3, [pc, #204]	; (8004014 <UART_ISR+0x110>)
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f4e:	428b      	cmp	r3, r1
 8003f50:	bf14      	ite	ne
 8003f52:	2301      	movne	r3, #1
 8003f54:	2300      	moveq	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	4b2d      	ldr	r3, [pc, #180]	; (8004014 <UART_ISR+0x110>)
 8003f60:	801a      	strh	r2, [r3, #0]
              LL_USART_ClearFlag_ORE(uart.uart_reg_base);
 8003f62:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <UART_ISR+0x10c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff fd99 	bl	8003a9e <LL_USART_ClearFlag_ORE>
          }
          if (status_reg & LL_USART_ISR_NE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d014      	beq.n	8003fa0 <UART_ISR+0x9c>
          {
              INC_SAT_U16(uart_pms[CNT_RX_UART_NE]);
 8003f76:	4b27      	ldr	r3, [pc, #156]	; (8004014 <UART_ISR+0x110>)
 8003f78:	885a      	ldrh	r2, [r3, #2]
 8003f7a:	4b26      	ldr	r3, [pc, #152]	; (8004014 <UART_ISR+0x110>)
 8003f7c:	885b      	ldrh	r3, [r3, #2]
 8003f7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f82:	428b      	cmp	r3, r1
 8003f84:	bf14      	ite	ne
 8003f86:	2301      	movne	r3, #1
 8003f88:	2300      	moveq	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	4413      	add	r3, r2
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	4b20      	ldr	r3, [pc, #128]	; (8004014 <UART_ISR+0x110>)
 8003f94:	805a      	strh	r2, [r3, #2]
              LL_USART_ClearFlag_NE(uart.uart_reg_base);
 8003f96:	4b1e      	ldr	r3, [pc, #120]	; (8004010 <UART_ISR+0x10c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fd72 	bl	8003a84 <LL_USART_ClearFlag_NE>
          }
          if (status_reg & LL_USART_ISR_FE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d014      	beq.n	8003fd4 <UART_ISR+0xd0>
          {
              INC_SAT_U16(uart_pms[CNT_RX_UART_FE]);
 8003faa:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <UART_ISR+0x110>)
 8003fac:	889a      	ldrh	r2, [r3, #4]
 8003fae:	4b19      	ldr	r3, [pc, #100]	; (8004014 <UART_ISR+0x110>)
 8003fb0:	889b      	ldrh	r3, [r3, #4]
 8003fb2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003fb6:	428b      	cmp	r3, r1
 8003fb8:	bf14      	ite	ne
 8003fba:	2301      	movne	r3, #1
 8003fbc:	2300      	moveq	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	4b13      	ldr	r3, [pc, #76]	; (8004014 <UART_ISR+0x110>)
 8003fc8:	809a      	strh	r2, [r3, #4]
              LL_USART_ClearFlag_FE(uart.uart_reg_base);
 8003fca:	4b11      	ldr	r3, [pc, #68]	; (8004010 <UART_ISR+0x10c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff fd4b 	bl	8003a6a <LL_USART_ClearFlag_FE>
          }
          if (status_reg & LL_USART_ISR_PE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d014      	beq.n	8004008 <UART_ISR+0x104>
          {
              INC_SAT_U16(uart_pms[CNT_RX_UART_PE]);
 8003fde:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <UART_ISR+0x110>)
 8003fe0:	88da      	ldrh	r2, [r3, #6]
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <UART_ISR+0x110>)
 8003fe4:	88db      	ldrh	r3, [r3, #6]
 8003fe6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003fea:	428b      	cmp	r3, r1
 8003fec:	bf14      	ite	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	2300      	moveq	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <UART_ISR+0x110>)
 8003ffc:	80da      	strh	r2, [r3, #6]
              LL_USART_ClearFlag_PE(uart.uart_reg_base);
 8003ffe:	4b04      	ldr	r3, [pc, #16]	; (8004010 <UART_ISR+0x10c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fd24 	bl	8003a50 <LL_USART_ClearFlag_PE>
          }
    }

}
 8004008:	bf00      	nop
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000178 	.word	0x20000178
 8004014:	200005ec 	.word	0x200005ec

08004018 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 8004018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004050 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800401c:	f7ff fc4a 	bl	80038b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004020:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004022:	e003      	b.n	800402c <LoopCopyDataInit>

08004024 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004026:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004028:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800402a:	3104      	adds	r1, #4

0800402c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800402c:	480a      	ldr	r0, [pc, #40]	; (8004058 <LoopForever+0xa>)
	ldr	r3, =_edata
 800402e:	4b0b      	ldr	r3, [pc, #44]	; (800405c <LoopForever+0xe>)
	adds	r2, r0, r1
 8004030:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004032:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004034:	d3f6      	bcc.n	8004024 <CopyDataInit>
	ldr	r2, =_sbss
 8004036:	4a0a      	ldr	r2, [pc, #40]	; (8004060 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004038:	e002      	b.n	8004040 <LoopFillZerobss>

0800403a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800403a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800403c:	f842 3b04 	str.w	r3, [r2], #4

08004040 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004040:	4b08      	ldr	r3, [pc, #32]	; (8004064 <LoopForever+0x16>)
	cmp	r2, r3
 8004042:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004044:	d3f9      	bcc.n	800403a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004046:	f002 fc79 	bl	800693c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800404a:	f7fd fe19 	bl	8001c80 <main>

0800404e <LoopForever>:

LoopForever:
    b LoopForever
 800404e:	e7fe      	b.n	800404e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004050:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004054:	080074d4 	.word	0x080074d4
	ldr	r0, =_sdata
 8004058:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800405c:	20000100 	.word	0x20000100
	ldr	r2, =_sbss
 8004060:	20000100 	.word	0x20000100
	ldr	r3, = _ebss
 8004064:	20000614 	.word	0x20000614

08004068 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004068:	e7fe      	b.n	8004068 <ADC1_2_IRQHandler>
	...

0800406c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004076:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <HAL_Init+0x3c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a0b      	ldr	r2, [pc, #44]	; (80040a8 <HAL_Init+0x3c>)
 800407c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004080:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004082:	2003      	movs	r0, #3
 8004084:	f000 f920 	bl	80042c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004088:	2000      	movs	r0, #0
 800408a:	f000 f80f 	bl	80040ac <HAL_InitTick>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	71fb      	strb	r3, [r7, #7]
 8004098:	e001      	b.n	800409e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800409a:	f7ff fb87 	bl	80037ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800409e:	79fb      	ldrb	r3, [r7, #7]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40022000 	.word	0x40022000

080040ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80040b8:	4b17      	ldr	r3, [pc, #92]	; (8004118 <HAL_InitTick+0x6c>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d023      	beq.n	8004108 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80040c0:	4b16      	ldr	r3, [pc, #88]	; (800411c <HAL_InitTick+0x70>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4b14      	ldr	r3, [pc, #80]	; (8004118 <HAL_InitTick+0x6c>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	4619      	mov	r1, r3
 80040ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80040d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f91d 	bl	8004316 <HAL_SYSTICK_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10f      	bne.n	8004102 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b0f      	cmp	r3, #15
 80040e6:	d809      	bhi.n	80040fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040e8:	2200      	movs	r2, #0
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	f04f 30ff 	mov.w	r0, #4294967295
 80040f0:	f000 f8f5 	bl	80042de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80040f4:	4a0a      	ldr	r2, [pc, #40]	; (8004120 <HAL_InitTick+0x74>)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e007      	b.n	800410c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
 8004100:	e004      	b.n	800410c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	73fb      	strb	r3, [r7, #15]
 8004106:	e001      	b.n	800410c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800410c:	7bfb      	ldrb	r3, [r7, #15]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000098 	.word	0x20000098
 800411c:	2000005c 	.word	0x2000005c
 8004120:	20000094 	.word	0x20000094

08004124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_IncTick+0x20>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <HAL_IncTick+0x24>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4413      	add	r3, r2
 8004134:	4a04      	ldr	r2, [pc, #16]	; (8004148 <HAL_IncTick+0x24>)
 8004136:	6013      	str	r3, [r2, #0]
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000098 	.word	0x20000098
 8004148:	20000600 	.word	0x20000600

0800414c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return uwTick;
 8004150:	4b03      	ldr	r3, [pc, #12]	; (8004160 <HAL_GetTick+0x14>)
 8004152:	681b      	ldr	r3, [r3, #0]
}
 8004154:	4618      	mov	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	20000600 	.word	0x20000600

08004164 <__NVIC_SetPriorityGrouping>:
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004180:	4013      	ands	r3, r2
 8004182:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800418c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004196:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	60d3      	str	r3, [r2, #12]
}
 800419c:	bf00      	nop
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <__NVIC_GetPriorityGrouping>:
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <__NVIC_GetPriorityGrouping+0x18>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	0a1b      	lsrs	r3, r3, #8
 80041b6:	f003 0307 	and.w	r3, r3, #7
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	e000ed00 	.word	0xe000ed00

080041c8 <__NVIC_SetPriority>:
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	6039      	str	r1, [r7, #0]
 80041d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	db0a      	blt.n	80041f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	490c      	ldr	r1, [pc, #48]	; (8004214 <__NVIC_SetPriority+0x4c>)
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	0112      	lsls	r2, r2, #4
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	440b      	add	r3, r1
 80041ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80041f0:	e00a      	b.n	8004208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	4908      	ldr	r1, [pc, #32]	; (8004218 <__NVIC_SetPriority+0x50>)
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	3b04      	subs	r3, #4
 8004200:	0112      	lsls	r2, r2, #4
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	440b      	add	r3, r1
 8004206:	761a      	strb	r2, [r3, #24]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	e000e100 	.word	0xe000e100
 8004218:	e000ed00 	.word	0xe000ed00

0800421c <NVIC_EncodePriority>:
{
 800421c:	b480      	push	{r7}
 800421e:	b089      	sub	sp, #36	; 0x24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f1c3 0307 	rsb	r3, r3, #7
 8004236:	2b04      	cmp	r3, #4
 8004238:	bf28      	it	cs
 800423a:	2304      	movcs	r3, #4
 800423c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	3304      	adds	r3, #4
 8004242:	2b06      	cmp	r3, #6
 8004244:	d902      	bls.n	800424c <NVIC_EncodePriority+0x30>
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3b03      	subs	r3, #3
 800424a:	e000      	b.n	800424e <NVIC_EncodePriority+0x32>
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004250:	f04f 32ff 	mov.w	r2, #4294967295
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43da      	mvns	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	401a      	ands	r2, r3
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004264:	f04f 31ff 	mov.w	r1, #4294967295
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	fa01 f303 	lsl.w	r3, r1, r3
 800426e:	43d9      	mvns	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004274:	4313      	orrs	r3, r2
}
 8004276:	4618      	mov	r0, r3
 8004278:	3724      	adds	r7, #36	; 0x24
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3b01      	subs	r3, #1
 8004290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004294:	d301      	bcc.n	800429a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004296:	2301      	movs	r3, #1
 8004298:	e00f      	b.n	80042ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800429a:	4a0a      	ldr	r2, [pc, #40]	; (80042c4 <SysTick_Config+0x40>)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3b01      	subs	r3, #1
 80042a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042a2:	210f      	movs	r1, #15
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295
 80042a8:	f7ff ff8e 	bl	80041c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <SysTick_Config+0x40>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042b2:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <SysTick_Config+0x40>)
 80042b4:	2207      	movs	r2, #7
 80042b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	e000e010 	.word	0xe000e010

080042c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff ff47 	bl	8004164 <__NVIC_SetPriorityGrouping>
}
 80042d6:	bf00      	nop
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b086      	sub	sp, #24
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	4603      	mov	r3, r0
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
 80042ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042f0:	f7ff ff5c 	bl	80041ac <__NVIC_GetPriorityGrouping>
 80042f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	6978      	ldr	r0, [r7, #20]
 80042fc:	f7ff ff8e 	bl	800421c <NVIC_EncodePriority>
 8004300:	4602      	mov	r2, r0
 8004302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff ff5d 	bl	80041c8 <__NVIC_SetPriority>
}
 800430e:	bf00      	nop
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff ffb0 	bl	8004284 <SysTick_Config>
 8004324:	4603      	mov	r3, r0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800433e:	e17f      	b.n	8004640 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	2101      	movs	r1, #1
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	fa01 f303 	lsl.w	r3, r1, r3
 800434c:	4013      	ands	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 8171 	beq.w	800463a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d00b      	beq.n	8004378 <HAL_GPIO_Init+0x48>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d007      	beq.n	8004378 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800436c:	2b11      	cmp	r3, #17
 800436e:	d003      	beq.n	8004378 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b12      	cmp	r3, #18
 8004376:	d130      	bne.n	80043da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	2203      	movs	r2, #3
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4013      	ands	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043ae:	2201      	movs	r2, #1
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43db      	mvns	r3, r3
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4013      	ands	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	091b      	lsrs	r3, r3, #4
 80043c4:	f003 0201 	and.w	r2, r3, #1
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d118      	bne.n	8004418 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80043ec:	2201      	movs	r2, #1
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4013      	ands	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	08db      	lsrs	r3, r3, #3
 8004402:	f003 0201 	and.w	r2, r3, #1
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	2203      	movs	r2, #3
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4013      	ands	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d003      	beq.n	8004458 <HAL_GPIO_Init+0x128>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b12      	cmp	r3, #18
 8004456:	d123      	bne.n	80044a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	08da      	lsrs	r2, r3, #3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3208      	adds	r2, #8
 8004460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004464:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	220f      	movs	r2, #15
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4013      	ands	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	08da      	lsrs	r2, r3, #3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3208      	adds	r2, #8
 800449a:	6939      	ldr	r1, [r7, #16]
 800449c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	2203      	movs	r2, #3
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	43db      	mvns	r3, r3
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4013      	ands	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 0203 	and.w	r2, r3, #3
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 80ac 	beq.w	800463a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044e2:	4b5f      	ldr	r3, [pc, #380]	; (8004660 <HAL_GPIO_Init+0x330>)
 80044e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e6:	4a5e      	ldr	r2, [pc, #376]	; (8004660 <HAL_GPIO_Init+0x330>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6613      	str	r3, [r2, #96]	; 0x60
 80044ee:	4b5c      	ldr	r3, [pc, #368]	; (8004660 <HAL_GPIO_Init+0x330>)
 80044f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044fa:	4a5a      	ldr	r2, [pc, #360]	; (8004664 <HAL_GPIO_Init+0x334>)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	3302      	adds	r3, #2
 8004502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004506:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	220f      	movs	r2, #15
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4013      	ands	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004524:	d025      	beq.n	8004572 <HAL_GPIO_Init+0x242>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a4f      	ldr	r2, [pc, #316]	; (8004668 <HAL_GPIO_Init+0x338>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d01f      	beq.n	800456e <HAL_GPIO_Init+0x23e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a4e      	ldr	r2, [pc, #312]	; (800466c <HAL_GPIO_Init+0x33c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d019      	beq.n	800456a <HAL_GPIO_Init+0x23a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a4d      	ldr	r2, [pc, #308]	; (8004670 <HAL_GPIO_Init+0x340>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d013      	beq.n	8004566 <HAL_GPIO_Init+0x236>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a4c      	ldr	r2, [pc, #304]	; (8004674 <HAL_GPIO_Init+0x344>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00d      	beq.n	8004562 <HAL_GPIO_Init+0x232>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a4b      	ldr	r2, [pc, #300]	; (8004678 <HAL_GPIO_Init+0x348>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <HAL_GPIO_Init+0x22e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a4a      	ldr	r2, [pc, #296]	; (800467c <HAL_GPIO_Init+0x34c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d101      	bne.n	800455a <HAL_GPIO_Init+0x22a>
 8004556:	2306      	movs	r3, #6
 8004558:	e00c      	b.n	8004574 <HAL_GPIO_Init+0x244>
 800455a:	2307      	movs	r3, #7
 800455c:	e00a      	b.n	8004574 <HAL_GPIO_Init+0x244>
 800455e:	2305      	movs	r3, #5
 8004560:	e008      	b.n	8004574 <HAL_GPIO_Init+0x244>
 8004562:	2304      	movs	r3, #4
 8004564:	e006      	b.n	8004574 <HAL_GPIO_Init+0x244>
 8004566:	2303      	movs	r3, #3
 8004568:	e004      	b.n	8004574 <HAL_GPIO_Init+0x244>
 800456a:	2302      	movs	r3, #2
 800456c:	e002      	b.n	8004574 <HAL_GPIO_Init+0x244>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_GPIO_Init+0x244>
 8004572:	2300      	movs	r3, #0
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	f002 0203 	and.w	r2, r2, #3
 800457a:	0092      	lsls	r2, r2, #2
 800457c:	4093      	lsls	r3, r2
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004584:	4937      	ldr	r1, [pc, #220]	; (8004664 <HAL_GPIO_Init+0x334>)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	3302      	adds	r3, #2
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004592:	4b3b      	ldr	r3, [pc, #236]	; (8004680 <HAL_GPIO_Init+0x350>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	43db      	mvns	r3, r3
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4013      	ands	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045b6:	4a32      	ldr	r2, [pc, #200]	; (8004680 <HAL_GPIO_Init+0x350>)
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80045bc:	4b30      	ldr	r3, [pc, #192]	; (8004680 <HAL_GPIO_Init+0x350>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	43db      	mvns	r3, r3
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4013      	ands	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045e0:	4a27      	ldr	r2, [pc, #156]	; (8004680 <HAL_GPIO_Init+0x350>)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045e6:	4b26      	ldr	r3, [pc, #152]	; (8004680 <HAL_GPIO_Init+0x350>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4013      	ands	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800460a:	4a1d      	ldr	r2, [pc, #116]	; (8004680 <HAL_GPIO_Init+0x350>)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004610:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <HAL_GPIO_Init+0x350>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	43db      	mvns	r3, r3
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4013      	ands	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004634:	4a12      	ldr	r2, [pc, #72]	; (8004680 <HAL_GPIO_Init+0x350>)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	3301      	adds	r3, #1
 800463e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	fa22 f303 	lsr.w	r3, r2, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	f47f ae78 	bne.w	8004340 <HAL_GPIO_Init+0x10>
  }
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000
 8004664:	40010000 	.word	0x40010000
 8004668:	48000400 	.word	0x48000400
 800466c:	48000800 	.word	0x48000800
 8004670:	48000c00 	.word	0x48000c00
 8004674:	48001000 	.word	0x48001000
 8004678:	48001400 	.word	0x48001400
 800467c:	48001800 	.word	0x48001800
 8004680:	40010400 	.word	0x40010400

08004684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	807b      	strh	r3, [r7, #2]
 8004690:	4613      	mov	r3, r2
 8004692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004694:	787b      	ldrb	r3, [r7, #1]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800469a:	887a      	ldrh	r2, [r7, #2]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046a0:	e002      	b.n	80046a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046a2:	887a      	ldrh	r2, [r7, #2]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <HAL_PWREx_GetVoltageRange+0x18>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40007000 	.word	0x40007000

080046d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046de:	d130      	bne.n	8004742 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046e0:	4b23      	ldr	r3, [pc, #140]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ec:	d038      	beq.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046ee:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046f6:	4a1e      	ldr	r2, [pc, #120]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046fe:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2232      	movs	r2, #50	; 0x32
 8004704:	fb02 f303 	mul.w	r3, r2, r3
 8004708:	4a1b      	ldr	r2, [pc, #108]	; (8004778 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800470a:	fba2 2303 	umull	r2, r3, r2, r3
 800470e:	0c9b      	lsrs	r3, r3, #18
 8004710:	3301      	adds	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004714:	e002      	b.n	800471c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3b01      	subs	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800471c:	4b14      	ldr	r3, [pc, #80]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004728:	d102      	bne.n	8004730 <HAL_PWREx_ControlVoltageScaling+0x60>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1f2      	bne.n	8004716 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004730:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473c:	d110      	bne.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e00f      	b.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004742:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800474a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474e:	d007      	beq.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004750:	4b07      	ldr	r3, [pc, #28]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004758:	4a05      	ldr	r2, [pc, #20]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800475a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800475e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40007000 	.word	0x40007000
 8004774:	2000005c 	.word	0x2000005c
 8004778:	431bde83 	.word	0x431bde83

0800477c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e3d4      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800478e:	4ba1      	ldr	r3, [pc, #644]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004798:	4b9e      	ldr	r3, [pc, #632]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80e4 	beq.w	8004978 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <HAL_RCC_OscConfig+0x4a>
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b0c      	cmp	r3, #12
 80047ba:	f040 808b 	bne.w	80048d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	f040 8087 	bne.w	80048d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047c6:	4b93      	ldr	r3, [pc, #588]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <HAL_RCC_OscConfig+0x62>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e3ac      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1a      	ldr	r2, [r3, #32]
 80047e2:	4b8c      	ldr	r3, [pc, #560]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d004      	beq.n	80047f8 <HAL_RCC_OscConfig+0x7c>
 80047ee:	4b89      	ldr	r3, [pc, #548]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f6:	e005      	b.n	8004804 <HAL_RCC_OscConfig+0x88>
 80047f8:	4b86      	ldr	r3, [pc, #536]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80047fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047fe:	091b      	lsrs	r3, r3, #4
 8004800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004804:	4293      	cmp	r3, r2
 8004806:	d223      	bcs.n	8004850 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fd09 	bl	8005224 <RCC_SetFlashLatencyFromMSIRange>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e38d      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800481c:	4b7d      	ldr	r3, [pc, #500]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a7c      	ldr	r2, [pc, #496]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004822:	f043 0308 	orr.w	r3, r3, #8
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	4b7a      	ldr	r3, [pc, #488]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	4977      	ldr	r1, [pc, #476]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800483a:	4b76      	ldr	r3, [pc, #472]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	4972      	ldr	r1, [pc, #456]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800484a:	4313      	orrs	r3, r2
 800484c:	604b      	str	r3, [r1, #4]
 800484e:	e025      	b.n	800489c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004850:	4b70      	ldr	r3, [pc, #448]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a6f      	ldr	r2, [pc, #444]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004856:	f043 0308 	orr.w	r3, r3, #8
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	4b6d      	ldr	r3, [pc, #436]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	496a      	ldr	r1, [pc, #424]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800486e:	4b69      	ldr	r3, [pc, #420]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	4965      	ldr	r1, [pc, #404]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800487e:	4313      	orrs	r3, r2
 8004880:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d109      	bne.n	800489c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fcc9 	bl	8005224 <RCC_SetFlashLatencyFromMSIRange>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e34d      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800489c:	f000 fc36 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b5c      	ldr	r3, [pc, #368]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	495a      	ldr	r1, [pc, #360]	; (8004a18 <HAL_RCC_OscConfig+0x29c>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
 80048b8:	4a58      	ldr	r2, [pc, #352]	; (8004a1c <HAL_RCC_OscConfig+0x2a0>)
 80048ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048bc:	4b58      	ldr	r3, [pc, #352]	; (8004a20 <HAL_RCC_OscConfig+0x2a4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff fbf3 	bl	80040ac <HAL_InitTick>
 80048c6:	4603      	mov	r3, r0
 80048c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d052      	beq.n	8004976 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	e331      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d032      	beq.n	8004942 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048dc:	4b4d      	ldr	r3, [pc, #308]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a4c      	ldr	r2, [pc, #304]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048e8:	f7ff fc30 	bl	800414c <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048f0:	f7ff fc2c 	bl	800414c <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e31a      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004902:	4b44      	ldr	r3, [pc, #272]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800490e:	4b41      	ldr	r3, [pc, #260]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a40      	ldr	r2, [pc, #256]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004914:	f043 0308 	orr.w	r3, r3, #8
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	4b3e      	ldr	r3, [pc, #248]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	493b      	ldr	r1, [pc, #236]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800492c:	4b39      	ldr	r3, [pc, #228]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	4936      	ldr	r1, [pc, #216]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800493c:	4313      	orrs	r3, r2
 800493e:	604b      	str	r3, [r1, #4]
 8004940:	e01a      	b.n	8004978 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004942:	4b34      	ldr	r3, [pc, #208]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a33      	ldr	r2, [pc, #204]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004948:	f023 0301 	bic.w	r3, r3, #1
 800494c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800494e:	f7ff fbfd 	bl	800414c <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004956:	f7ff fbf9 	bl	800414c <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e2e7      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004968:	4b2a      	ldr	r3, [pc, #168]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1f0      	bne.n	8004956 <HAL_RCC_OscConfig+0x1da>
 8004974:	e000      	b.n	8004978 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004976:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d074      	beq.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b08      	cmp	r3, #8
 8004988:	d005      	beq.n	8004996 <HAL_RCC_OscConfig+0x21a>
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b0c      	cmp	r3, #12
 800498e:	d10e      	bne.n	80049ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b03      	cmp	r3, #3
 8004994:	d10b      	bne.n	80049ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004996:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d064      	beq.n	8004a6c <HAL_RCC_OscConfig+0x2f0>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d160      	bne.n	8004a6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e2c4      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b6:	d106      	bne.n	80049c6 <HAL_RCC_OscConfig+0x24a>
 80049b8:	4b16      	ldr	r3, [pc, #88]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a15      	ldr	r2, [pc, #84]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	e01d      	b.n	8004a02 <HAL_RCC_OscConfig+0x286>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ce:	d10c      	bne.n	80049ea <HAL_RCC_OscConfig+0x26e>
 80049d0:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a0f      	ldr	r2, [pc, #60]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a0c      	ldr	r2, [pc, #48]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	e00b      	b.n	8004a02 <HAL_RCC_OscConfig+0x286>
 80049ea:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a06      	ldr	r2, [pc, #24]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d01c      	beq.n	8004a44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0a:	f7ff fb9f 	bl	800414c <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a10:	e011      	b.n	8004a36 <HAL_RCC_OscConfig+0x2ba>
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000
 8004a18:	08007378 	.word	0x08007378
 8004a1c:	2000005c 	.word	0x2000005c
 8004a20:	20000094 	.word	0x20000094
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a24:	f7ff fb92 	bl	800414c <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	; 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e280      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a36:	4baf      	ldr	r3, [pc, #700]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x2a8>
 8004a42:	e014      	b.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7ff fb82 	bl	800414c <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a4c:	f7ff fb7e 	bl	800414c <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b64      	cmp	r3, #100	; 0x64
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e26c      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a5e:	4ba5      	ldr	r3, [pc, #660]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x2d0>
 8004a6a:	e000      	b.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d060      	beq.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_OscConfig+0x310>
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b0c      	cmp	r3, #12
 8004a84:	d119      	bne.n	8004aba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d116      	bne.n	8004aba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a8c:	4b99      	ldr	r3, [pc, #612]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x328>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e249      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa4:	4b93      	ldr	r3, [pc, #588]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	061b      	lsls	r3, r3, #24
 8004ab2:	4990      	ldr	r1, [pc, #576]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab8:	e040      	b.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d023      	beq.n	8004b0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ac2:	4b8c      	ldr	r3, [pc, #560]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a8b      	ldr	r2, [pc, #556]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ace:	f7ff fb3d 	bl	800414c <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad6:	f7ff fb39 	bl	800414c <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e227      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae8:	4b82      	ldr	r3, [pc, #520]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af4:	4b7f      	ldr	r3, [pc, #508]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	061b      	lsls	r3, r3, #24
 8004b02:	497c      	ldr	r1, [pc, #496]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	604b      	str	r3, [r1, #4]
 8004b08:	e018      	b.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0a:	4b7a      	ldr	r3, [pc, #488]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a79      	ldr	r2, [pc, #484]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7ff fb19 	bl	800414c <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1e:	f7ff fb15 	bl	800414c <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e203      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b30:	4b70      	ldr	r3, [pc, #448]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d03c      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01c      	beq.n	8004b8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b50:	4b68      	ldr	r3, [pc, #416]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b56:	4a67      	ldr	r2, [pc, #412]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b60:	f7ff faf4 	bl	800414c <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b68:	f7ff faf0 	bl	800414c <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e1de      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b7a:	4b5e      	ldr	r3, [pc, #376]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ef      	beq.n	8004b68 <HAL_RCC_OscConfig+0x3ec>
 8004b88:	e01b      	b.n	8004bc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b8a:	4b5a      	ldr	r3, [pc, #360]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b90:	4a58      	ldr	r2, [pc, #352]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9a:	f7ff fad7 	bl	800414c <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba2:	f7ff fad3 	bl	800414c <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e1c1      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bb4:	4b4f      	ldr	r3, [pc, #316]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1ef      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 80a6 	beq.w	8004d1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bd4:	4b47      	ldr	r3, [pc, #284]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10d      	bne.n	8004bfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be0:	4b44      	ldr	r3, [pc, #272]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be4:	4a43      	ldr	r2, [pc, #268]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bea:	6593      	str	r3, [r2, #88]	; 0x58
 8004bec:	4b41      	ldr	r3, [pc, #260]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bfc:	4b3e      	ldr	r3, [pc, #248]	; (8004cf8 <HAL_RCC_OscConfig+0x57c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d118      	bne.n	8004c3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c08:	4b3b      	ldr	r3, [pc, #236]	; (8004cf8 <HAL_RCC_OscConfig+0x57c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a3a      	ldr	r2, [pc, #232]	; (8004cf8 <HAL_RCC_OscConfig+0x57c>)
 8004c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c14:	f7ff fa9a 	bl	800414c <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c1c:	f7ff fa96 	bl	800414c <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e184      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c2e:	4b32      	ldr	r3, [pc, #200]	; (8004cf8 <HAL_RCC_OscConfig+0x57c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d108      	bne.n	8004c54 <HAL_RCC_OscConfig+0x4d8>
 8004c42:	4b2c      	ldr	r3, [pc, #176]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c48:	4a2a      	ldr	r2, [pc, #168]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c52:	e024      	b.n	8004c9e <HAL_RCC_OscConfig+0x522>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b05      	cmp	r3, #5
 8004c5a:	d110      	bne.n	8004c7e <HAL_RCC_OscConfig+0x502>
 8004c5c:	4b25      	ldr	r3, [pc, #148]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c62:	4a24      	ldr	r2, [pc, #144]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c64:	f043 0304 	orr.w	r3, r3, #4
 8004c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c6c:	4b21      	ldr	r3, [pc, #132]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c72:	4a20      	ldr	r2, [pc, #128]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c7c:	e00f      	b.n	8004c9e <HAL_RCC_OscConfig+0x522>
 8004c7e:	4b1d      	ldr	r3, [pc, #116]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c84:	4a1b      	ldr	r2, [pc, #108]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c8e:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c94:	4a17      	ldr	r2, [pc, #92]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c96:	f023 0304 	bic.w	r3, r3, #4
 8004c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d016      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca6:	f7ff fa51 	bl	800414c <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cac:	e00a      	b.n	8004cc4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cae:	f7ff fa4d 	bl	800414c <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e139      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0ed      	beq.n	8004cae <HAL_RCC_OscConfig+0x532>
 8004cd2:	e01a      	b.n	8004d0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd4:	f7ff fa3a 	bl	800414c <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cda:	e00f      	b.n	8004cfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cdc:	f7ff fa36 	bl	800414c <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d906      	bls.n	8004cfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e122      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cfc:	4b90      	ldr	r3, [pc, #576]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e8      	bne.n	8004cdc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d0a:	7ffb      	ldrb	r3, [r7, #31]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d105      	bne.n	8004d1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d10:	4b8b      	ldr	r3, [pc, #556]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	4a8a      	ldr	r2, [pc, #552]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8108 	beq.w	8004f36 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	f040 80d0 	bne.w	8004ed0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d30:	4b83      	ldr	r3, [pc, #524]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f003 0203 	and.w	r2, r3, #3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d130      	bne.n	8004da6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d127      	bne.n	8004da6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d11f      	bne.n	8004da6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d70:	2a07      	cmp	r2, #7
 8004d72:	bf14      	ite	ne
 8004d74:	2201      	movne	r2, #1
 8004d76:	2200      	moveq	r2, #0
 8004d78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d113      	bne.n	8004da6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d109      	bne.n	8004da6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	085b      	lsrs	r3, r3, #1
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d06e      	beq.n	8004e84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d069      	beq.n	8004e80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004dac:	4b64      	ldr	r3, [pc, #400]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d105      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004db8:	4b61      	ldr	r3, [pc, #388]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0b7      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dc8:	4b5d      	ldr	r3, [pc, #372]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a5c      	ldr	r2, [pc, #368]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dd2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dd4:	f7ff f9ba 	bl	800414c <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ddc:	f7ff f9b6 	bl	800414c <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e0a4      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dee:	4b54      	ldr	r3, [pc, #336]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dfa:	4b51      	ldr	r3, [pc, #324]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	4b51      	ldr	r3, [pc, #324]	; (8004f44 <HAL_RCC_OscConfig+0x7c8>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e0a:	3a01      	subs	r2, #1
 8004e0c:	0112      	lsls	r2, r2, #4
 8004e0e:	4311      	orrs	r1, r2
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e14:	0212      	lsls	r2, r2, #8
 8004e16:	4311      	orrs	r1, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e1c:	0852      	lsrs	r2, r2, #1
 8004e1e:	3a01      	subs	r2, #1
 8004e20:	0552      	lsls	r2, r2, #21
 8004e22:	4311      	orrs	r1, r2
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e28:	0852      	lsrs	r2, r2, #1
 8004e2a:	3a01      	subs	r2, #1
 8004e2c:	0652      	lsls	r2, r2, #25
 8004e2e:	4311      	orrs	r1, r2
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e34:	0912      	lsrs	r2, r2, #4
 8004e36:	0452      	lsls	r2, r2, #17
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	4941      	ldr	r1, [pc, #260]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e40:	4b3f      	ldr	r3, [pc, #252]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a3e      	ldr	r2, [pc, #248]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e4c:	4b3c      	ldr	r3, [pc, #240]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	4a3b      	ldr	r2, [pc, #236]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e58:	f7ff f978 	bl	800414c <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e60:	f7ff f974 	bl	800414c <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e062      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e72:	4b33      	ldr	r3, [pc, #204]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e7e:	e05a      	b.n	8004f36 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e059      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e84:	4b2e      	ldr	r3, [pc, #184]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d152      	bne.n	8004f36 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e90:	4b2b      	ldr	r3, [pc, #172]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a2a      	ldr	r2, [pc, #168]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e9c:	4b28      	ldr	r3, [pc, #160]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	4a27      	ldr	r2, [pc, #156]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ea6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ea8:	f7ff f950 	bl	800414c <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb0:	f7ff f94c 	bl	800414c <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e03a      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ec2:	4b1f      	ldr	r3, [pc, #124]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x734>
 8004ece:	e032      	b.n	8004f36 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b0c      	cmp	r3, #12
 8004ed4:	d02d      	beq.n	8004f32 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed6:	4b1a      	ldr	r3, [pc, #104]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004edc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ee0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004ee2:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d105      	bne.n	8004efa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004eee:	4b14      	ldr	r3, [pc, #80]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	4a13      	ldr	r2, [pc, #76]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004ef4:	f023 0303 	bic.w	r3, r3, #3
 8004ef8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004efa:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	4a10      	ldr	r2, [pc, #64]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004f00:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f08:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0a:	f7ff f91f 	bl	800414c <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f12:	f7ff f91b 	bl	800414c <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e009      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1f0      	bne.n	8004f12 <HAL_RCC_OscConfig+0x796>
 8004f30:	e001      	b.n	8004f36 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3720      	adds	r7, #32
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40021000 	.word	0x40021000
 8004f44:	f99d808c 	.word	0xf99d808c

08004f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0c8      	b.n	80050ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f5c:	4b66      	ldr	r3, [pc, #408]	; (80050f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d910      	bls.n	8004f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6a:	4b63      	ldr	r3, [pc, #396]	; (80050f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f023 0207 	bic.w	r2, r3, #7
 8004f72:	4961      	ldr	r1, [pc, #388]	; (80050f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7a:	4b5f      	ldr	r3, [pc, #380]	; (80050f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d001      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e0b0      	b.n	80050ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d04c      	beq.n	8005032 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d107      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa0:	4b56      	ldr	r3, [pc, #344]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d121      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e09e      	b.n	80050ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d107      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fb8:	4b50      	ldr	r3, [pc, #320]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d115      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e092      	b.n	80050ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d107      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fd0:	4b4a      	ldr	r3, [pc, #296]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e086      	b.n	80050ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fe0:	4b46      	ldr	r3, [pc, #280]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e07e      	b.n	80050ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ff0:	4b42      	ldr	r3, [pc, #264]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f023 0203 	bic.w	r2, r3, #3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	493f      	ldr	r1, [pc, #252]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005002:	f7ff f8a3 	bl	800414c <HAL_GetTick>
 8005006:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005008:	e00a      	b.n	8005020 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800500a:	f7ff f89f 	bl	800414c <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	f241 3288 	movw	r2, #5000	; 0x1388
 8005018:	4293      	cmp	r3, r2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e066      	b.n	80050ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005020:	4b36      	ldr	r3, [pc, #216]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 020c 	and.w	r2, r3, #12
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	429a      	cmp	r2, r3
 8005030:	d1eb      	bne.n	800500a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d008      	beq.n	8005050 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800503e:	4b2f      	ldr	r3, [pc, #188]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	492c      	ldr	r1, [pc, #176]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 800504c:	4313      	orrs	r3, r2
 800504e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005050:	4b29      	ldr	r3, [pc, #164]	; (80050f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d210      	bcs.n	8005080 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505e:	4b26      	ldr	r3, [pc, #152]	; (80050f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f023 0207 	bic.w	r2, r3, #7
 8005066:	4924      	ldr	r1, [pc, #144]	; (80050f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	4313      	orrs	r3, r2
 800506c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800506e:	4b22      	ldr	r3, [pc, #136]	; (80050f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d001      	beq.n	8005080 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e036      	b.n	80050ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800508c:	4b1b      	ldr	r3, [pc, #108]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4918      	ldr	r1, [pc, #96]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 800509a:	4313      	orrs	r3, r2
 800509c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d009      	beq.n	80050be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050aa:	4b14      	ldr	r3, [pc, #80]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	4910      	ldr	r1, [pc, #64]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050be:	f000 f825 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80050c2:	4602      	mov	r2, r0
 80050c4:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	091b      	lsrs	r3, r3, #4
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	490c      	ldr	r1, [pc, #48]	; (8005100 <HAL_RCC_ClockConfig+0x1b8>)
 80050d0:	5ccb      	ldrb	r3, [r1, r3]
 80050d2:	f003 031f 	and.w	r3, r3, #31
 80050d6:	fa22 f303 	lsr.w	r3, r2, r3
 80050da:	4a0a      	ldr	r2, [pc, #40]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050de:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe ffe2 	bl	80040ac <HAL_InitTick>
 80050e8:	4603      	mov	r3, r0
 80050ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80050ec:	7afb      	ldrb	r3, [r7, #11]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40022000 	.word	0x40022000
 80050fc:	40021000 	.word	0x40021000
 8005100:	08007378 	.word	0x08007378
 8005104:	2000005c 	.word	0x2000005c
 8005108:	20000094 	.word	0x20000094

0800510c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800510c:	b480      	push	{r7}
 800510e:	b089      	sub	sp, #36	; 0x24
 8005110:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	2300      	movs	r3, #0
 8005118:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800511a:	4b3e      	ldr	r3, [pc, #248]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 030c 	and.w	r3, r3, #12
 8005122:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005124:	4b3b      	ldr	r3, [pc, #236]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0x34>
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	2b0c      	cmp	r3, #12
 8005138:	d121      	bne.n	800517e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d11e      	bne.n	800517e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005140:	4b34      	ldr	r3, [pc, #208]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d107      	bne.n	800515c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800514c:	4b31      	ldr	r3, [pc, #196]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 800514e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005152:	0a1b      	lsrs	r3, r3, #8
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	61fb      	str	r3, [r7, #28]
 800515a:	e005      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800515c:	4b2d      	ldr	r3, [pc, #180]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	091b      	lsrs	r3, r3, #4
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005168:	4a2b      	ldr	r2, [pc, #172]	; (8005218 <HAL_RCC_GetSysClockFreq+0x10c>)
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005170:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10d      	bne.n	8005194 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800517c:	e00a      	b.n	8005194 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b04      	cmp	r3, #4
 8005182:	d102      	bne.n	800518a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005184:	4b25      	ldr	r3, [pc, #148]	; (800521c <HAL_RCC_GetSysClockFreq+0x110>)
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	e004      	b.n	8005194 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d101      	bne.n	8005194 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005190:	4b23      	ldr	r3, [pc, #140]	; (8005220 <HAL_RCC_GetSysClockFreq+0x114>)
 8005192:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2b0c      	cmp	r3, #12
 8005198:	d134      	bne.n	8005204 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800519a:	4b1e      	ldr	r3, [pc, #120]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d003      	beq.n	80051b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d003      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0xac>
 80051b0:	e005      	b.n	80051be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80051b2:	4b1a      	ldr	r3, [pc, #104]	; (800521c <HAL_RCC_GetSysClockFreq+0x110>)
 80051b4:	617b      	str	r3, [r7, #20]
      break;
 80051b6:	e005      	b.n	80051c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80051b8:	4b19      	ldr	r3, [pc, #100]	; (8005220 <HAL_RCC_GetSysClockFreq+0x114>)
 80051ba:	617b      	str	r3, [r7, #20]
      break;
 80051bc:	e002      	b.n	80051c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	617b      	str	r3, [r7, #20]
      break;
 80051c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051c4:	4b13      	ldr	r3, [pc, #76]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	091b      	lsrs	r3, r3, #4
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	3301      	adds	r3, #1
 80051d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	0a1b      	lsrs	r3, r3, #8
 80051d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	fb02 f203 	mul.w	r2, r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051ea:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	0e5b      	lsrs	r3, r3, #25
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	3301      	adds	r3, #1
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005202:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005204:	69bb      	ldr	r3, [r7, #24]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3724      	adds	r7, #36	; 0x24
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40021000 	.word	0x40021000
 8005218:	08007390 	.word	0x08007390
 800521c:	00f42400 	.word	0x00f42400
 8005220:	007a1200 	.word	0x007a1200

08005224 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800522c:	2300      	movs	r3, #0
 800522e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005230:	4b2a      	ldr	r3, [pc, #168]	; (80052dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800523c:	f7ff fa3a 	bl	80046b4 <HAL_PWREx_GetVoltageRange>
 8005240:	6178      	str	r0, [r7, #20]
 8005242:	e014      	b.n	800526e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005244:	4b25      	ldr	r3, [pc, #148]	; (80052dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005248:	4a24      	ldr	r2, [pc, #144]	; (80052dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800524a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800524e:	6593      	str	r3, [r2, #88]	; 0x58
 8005250:	4b22      	ldr	r3, [pc, #136]	; (80052dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800525c:	f7ff fa2a 	bl	80046b4 <HAL_PWREx_GetVoltageRange>
 8005260:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005262:	4b1e      	ldr	r3, [pc, #120]	; (80052dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005266:	4a1d      	ldr	r2, [pc, #116]	; (80052dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800526c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005274:	d10b      	bne.n	800528e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b80      	cmp	r3, #128	; 0x80
 800527a:	d919      	bls.n	80052b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2ba0      	cmp	r3, #160	; 0xa0
 8005280:	d902      	bls.n	8005288 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005282:	2302      	movs	r3, #2
 8005284:	613b      	str	r3, [r7, #16]
 8005286:	e013      	b.n	80052b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005288:	2301      	movs	r3, #1
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	e010      	b.n	80052b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b80      	cmp	r3, #128	; 0x80
 8005292:	d902      	bls.n	800529a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005294:	2303      	movs	r3, #3
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	e00a      	b.n	80052b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b80      	cmp	r3, #128	; 0x80
 800529e:	d102      	bne.n	80052a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052a0:	2302      	movs	r3, #2
 80052a2:	613b      	str	r3, [r7, #16]
 80052a4:	e004      	b.n	80052b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b70      	cmp	r3, #112	; 0x70
 80052aa:	d101      	bne.n	80052b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052ac:	2301      	movs	r3, #1
 80052ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052b0:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f023 0207 	bic.w	r2, r3, #7
 80052b8:	4909      	ldr	r1, [pc, #36]	; (80052e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052c0:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d001      	beq.n	80052d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40021000 	.word	0x40021000
 80052e0:	40022000 	.word	0x40022000

080052e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052ec:	2300      	movs	r3, #0
 80052ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052f0:	2300      	movs	r3, #0
 80052f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d041      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005304:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005308:	d02a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800530a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800530e:	d824      	bhi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005310:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005314:	d008      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005316:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800531a:	d81e      	bhi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005324:	d010      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005326:	e018      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005328:	4b86      	ldr	r3, [pc, #536]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	4a85      	ldr	r2, [pc, #532]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800532e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005332:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005334:	e015      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3304      	adds	r3, #4
 800533a:	2100      	movs	r1, #0
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fabb 	bl	80058b8 <RCCEx_PLLSAI1_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005346:	e00c      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3320      	adds	r3, #32
 800534c:	2100      	movs	r1, #0
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fba6 	bl	8005aa0 <RCCEx_PLLSAI2_Config>
 8005354:	4603      	mov	r3, r0
 8005356:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005358:	e003      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	74fb      	strb	r3, [r7, #19]
      break;
 800535e:	e000      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005362:	7cfb      	ldrb	r3, [r7, #19]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10b      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005368:	4b76      	ldr	r3, [pc, #472]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005376:	4973      	ldr	r1, [pc, #460]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800537e:	e001      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005380:	7cfb      	ldrb	r3, [r7, #19]
 8005382:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d041      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005394:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005398:	d02a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800539a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800539e:	d824      	bhi.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053a4:	d008      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053aa:	d81e      	bhi.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80053b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053b4:	d010      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053b6:	e018      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053b8:	4b62      	ldr	r3, [pc, #392]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	4a61      	ldr	r2, [pc, #388]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053c4:	e015      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3304      	adds	r3, #4
 80053ca:	2100      	movs	r1, #0
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fa73 	bl	80058b8 <RCCEx_PLLSAI1_Config>
 80053d2:	4603      	mov	r3, r0
 80053d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053d6:	e00c      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3320      	adds	r3, #32
 80053dc:	2100      	movs	r1, #0
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fb5e 	bl	8005aa0 <RCCEx_PLLSAI2_Config>
 80053e4:	4603      	mov	r3, r0
 80053e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053e8:	e003      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	74fb      	strb	r3, [r7, #19]
      break;
 80053ee:	e000      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80053f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053f2:	7cfb      	ldrb	r3, [r7, #19]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10b      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053f8:	4b52      	ldr	r3, [pc, #328]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005406:	494f      	ldr	r1, [pc, #316]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005408:	4313      	orrs	r3, r2
 800540a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800540e:	e001      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005410:	7cfb      	ldrb	r3, [r7, #19]
 8005412:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80a0 	beq.w	8005562 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005422:	2300      	movs	r3, #0
 8005424:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005426:	4b47      	ldr	r3, [pc, #284]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005436:	2300      	movs	r3, #0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00d      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800543c:	4b41      	ldr	r3, [pc, #260]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800543e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005440:	4a40      	ldr	r2, [pc, #256]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005446:	6593      	str	r3, [r2, #88]	; 0x58
 8005448:	4b3e      	ldr	r3, [pc, #248]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800544a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005454:	2301      	movs	r3, #1
 8005456:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005458:	4b3b      	ldr	r3, [pc, #236]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a3a      	ldr	r2, [pc, #232]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800545e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005462:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005464:	f7fe fe72 	bl	800414c <HAL_GetTick>
 8005468:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800546a:	e009      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800546c:	f7fe fe6e 	bl	800414c <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d902      	bls.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	74fb      	strb	r3, [r7, #19]
        break;
 800547e:	e005      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005480:	4b31      	ldr	r3, [pc, #196]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0ef      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800548c:	7cfb      	ldrb	r3, [r7, #19]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d15c      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005492:	4b2c      	ldr	r3, [pc, #176]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01f      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d019      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054b0:	4b24      	ldr	r3, [pc, #144]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054bc:	4b21      	ldr	r3, [pc, #132]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c2:	4a20      	ldr	r2, [pc, #128]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054cc:	4b1d      	ldr	r3, [pc, #116]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d2:	4a1c      	ldr	r2, [pc, #112]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054dc:	4a19      	ldr	r2, [pc, #100]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d016      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ee:	f7fe fe2d 	bl	800414c <HAL_GetTick>
 80054f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054f4:	e00b      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f6:	f7fe fe29 	bl	800414c <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	f241 3288 	movw	r2, #5000	; 0x1388
 8005504:	4293      	cmp	r3, r2
 8005506:	d902      	bls.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	74fb      	strb	r3, [r7, #19]
            break;
 800550c:	e006      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800550e:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0ec      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800551c:	7cfb      	ldrb	r3, [r7, #19]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10c      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005522:	4b08      	ldr	r3, [pc, #32]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005528:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005532:	4904      	ldr	r1, [pc, #16]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800553a:	e009      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800553c:	7cfb      	ldrb	r3, [r7, #19]
 800553e:	74bb      	strb	r3, [r7, #18]
 8005540:	e006      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005542:	bf00      	nop
 8005544:	40021000 	.word	0x40021000
 8005548:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554c:	7cfb      	ldrb	r3, [r7, #19]
 800554e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005550:	7c7b      	ldrb	r3, [r7, #17]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d105      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005556:	4b9e      	ldr	r3, [pc, #632]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555a:	4a9d      	ldr	r2, [pc, #628]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005560:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800556e:	4b98      	ldr	r3, [pc, #608]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005574:	f023 0203 	bic.w	r2, r3, #3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557c:	4994      	ldr	r1, [pc, #592]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005590:	4b8f      	ldr	r3, [pc, #572]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005596:	f023 020c 	bic.w	r2, r3, #12
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559e:	498c      	ldr	r1, [pc, #560]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055b2:	4b87      	ldr	r3, [pc, #540]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	4983      	ldr	r1, [pc, #524]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055d4:	4b7e      	ldr	r3, [pc, #504]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e2:	497b      	ldr	r1, [pc, #492]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055f6:	4b76      	ldr	r3, [pc, #472]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005604:	4972      	ldr	r1, [pc, #456]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0320 	and.w	r3, r3, #32
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005618:	4b6d      	ldr	r3, [pc, #436]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005626:	496a      	ldr	r1, [pc, #424]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800563a:	4b65      	ldr	r3, [pc, #404]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800563c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005640:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005648:	4961      	ldr	r1, [pc, #388]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800565c:	4b5c      	ldr	r3, [pc, #368]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005662:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566a:	4959      	ldr	r1, [pc, #356]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800567e:	4b54      	ldr	r3, [pc, #336]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005684:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800568c:	4950      	ldr	r1, [pc, #320]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800568e:	4313      	orrs	r3, r2
 8005690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00a      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056a0:	4b4b      	ldr	r3, [pc, #300]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ae:	4948      	ldr	r1, [pc, #288]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056c2:	4b43      	ldr	r3, [pc, #268]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d0:	493f      	ldr	r1, [pc, #252]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d028      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056e4:	4b3a      	ldr	r3, [pc, #232]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f2:	4937      	ldr	r1, [pc, #220]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005702:	d106      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005704:	4b32      	ldr	r3, [pc, #200]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	4a31      	ldr	r2, [pc, #196]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800570a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800570e:	60d3      	str	r3, [r2, #12]
 8005710:	e011      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005716:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800571a:	d10c      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3304      	adds	r3, #4
 8005720:	2101      	movs	r1, #1
 8005722:	4618      	mov	r0, r3
 8005724:	f000 f8c8 	bl	80058b8 <RCCEx_PLLSAI1_Config>
 8005728:	4603      	mov	r3, r0
 800572a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800572c:	7cfb      	ldrb	r3, [r7, #19]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005732:	7cfb      	ldrb	r3, [r7, #19]
 8005734:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d028      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005742:	4b23      	ldr	r3, [pc, #140]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005748:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005750:	491f      	ldr	r1, [pc, #124]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005760:	d106      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005762:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	4a1a      	ldr	r2, [pc, #104]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800576c:	60d3      	str	r3, [r2, #12]
 800576e:	e011      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005774:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005778:	d10c      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3304      	adds	r3, #4
 800577e:	2101      	movs	r1, #1
 8005780:	4618      	mov	r0, r3
 8005782:	f000 f899 	bl	80058b8 <RCCEx_PLLSAI1_Config>
 8005786:	4603      	mov	r3, r0
 8005788:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800578a:	7cfb      	ldrb	r3, [r7, #19]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005790:	7cfb      	ldrb	r3, [r7, #19]
 8005792:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d02b      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ae:	4908      	ldr	r1, [pc, #32]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057be:	d109      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c0:	4b03      	ldr	r3, [pc, #12]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	4a02      	ldr	r2, [pc, #8]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ca:	60d3      	str	r3, [r2, #12]
 80057cc:	e014      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80057ce:	bf00      	nop
 80057d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057dc:	d10c      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3304      	adds	r3, #4
 80057e2:	2101      	movs	r1, #1
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 f867 	bl	80058b8 <RCCEx_PLLSAI1_Config>
 80057ea:	4603      	mov	r3, r0
 80057ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057ee:	7cfb      	ldrb	r3, [r7, #19]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80057f4:	7cfb      	ldrb	r3, [r7, #19]
 80057f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d02f      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005804:	4b2b      	ldr	r3, [pc, #172]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005812:	4928      	ldr	r1, [pc, #160]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005814:	4313      	orrs	r3, r2
 8005816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800581e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005822:	d10d      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3304      	adds	r3, #4
 8005828:	2102      	movs	r1, #2
 800582a:	4618      	mov	r0, r3
 800582c:	f000 f844 	bl	80058b8 <RCCEx_PLLSAI1_Config>
 8005830:	4603      	mov	r3, r0
 8005832:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005834:	7cfb      	ldrb	r3, [r7, #19]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d014      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800583a:	7cfb      	ldrb	r3, [r7, #19]
 800583c:	74bb      	strb	r3, [r7, #18]
 800583e:	e011      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005848:	d10c      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3320      	adds	r3, #32
 800584e:	2102      	movs	r1, #2
 8005850:	4618      	mov	r0, r3
 8005852:	f000 f925 	bl	8005aa0 <RCCEx_PLLSAI2_Config>
 8005856:	4603      	mov	r3, r0
 8005858:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800585a:	7cfb      	ldrb	r3, [r7, #19]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005860:	7cfb      	ldrb	r3, [r7, #19]
 8005862:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00a      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005870:	4b10      	ldr	r3, [pc, #64]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005876:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800587e:	490d      	ldr	r1, [pc, #52]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00b      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005892:	4b08      	ldr	r3, [pc, #32]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005898:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058a2:	4904      	ldr	r1, [pc, #16]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80058aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40021000 	.word	0x40021000

080058b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058c6:	4b75      	ldr	r3, [pc, #468]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d018      	beq.n	8005904 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058d2:	4b72      	ldr	r3, [pc, #456]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f003 0203 	and.w	r2, r3, #3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d10d      	bne.n	80058fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
       ||
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058ea:	4b6c      	ldr	r3, [pc, #432]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	091b      	lsrs	r3, r3, #4
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
       ||
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d047      	beq.n	800598e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	73fb      	strb	r3, [r7, #15]
 8005902:	e044      	b.n	800598e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b03      	cmp	r3, #3
 800590a:	d018      	beq.n	800593e <RCCEx_PLLSAI1_Config+0x86>
 800590c:	2b03      	cmp	r3, #3
 800590e:	d825      	bhi.n	800595c <RCCEx_PLLSAI1_Config+0xa4>
 8005910:	2b01      	cmp	r3, #1
 8005912:	d002      	beq.n	800591a <RCCEx_PLLSAI1_Config+0x62>
 8005914:	2b02      	cmp	r3, #2
 8005916:	d009      	beq.n	800592c <RCCEx_PLLSAI1_Config+0x74>
 8005918:	e020      	b.n	800595c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800591a:	4b60      	ldr	r3, [pc, #384]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d11d      	bne.n	8005962 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800592a:	e01a      	b.n	8005962 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800592c:	4b5b      	ldr	r3, [pc, #364]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005934:	2b00      	cmp	r3, #0
 8005936:	d116      	bne.n	8005966 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800593c:	e013      	b.n	8005966 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800593e:	4b57      	ldr	r3, [pc, #348]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10f      	bne.n	800596a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800594a:	4b54      	ldr	r3, [pc, #336]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800595a:	e006      	b.n	800596a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	73fb      	strb	r3, [r7, #15]
      break;
 8005960:	e004      	b.n	800596c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005962:	bf00      	nop
 8005964:	e002      	b.n	800596c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005966:	bf00      	nop
 8005968:	e000      	b.n	800596c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800596a:	bf00      	nop
    }

    if(status == HAL_OK)
 800596c:	7bfb      	ldrb	r3, [r7, #15]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10d      	bne.n	800598e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005972:	4b4a      	ldr	r3, [pc, #296]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6819      	ldr	r1, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	3b01      	subs	r3, #1
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	430b      	orrs	r3, r1
 8005988:	4944      	ldr	r1, [pc, #272]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800598a:	4313      	orrs	r3, r2
 800598c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800598e:	7bfb      	ldrb	r3, [r7, #15]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d17d      	bne.n	8005a90 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005994:	4b41      	ldr	r3, [pc, #260]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a40      	ldr	r2, [pc, #256]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800599a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800599e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059a0:	f7fe fbd4 	bl	800414c <HAL_GetTick>
 80059a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059a6:	e009      	b.n	80059bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059a8:	f7fe fbd0 	bl	800414c <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d902      	bls.n	80059bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	73fb      	strb	r3, [r7, #15]
        break;
 80059ba:	e005      	b.n	80059c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059bc:	4b37      	ldr	r3, [pc, #220]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1ef      	bne.n	80059a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d160      	bne.n	8005a90 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d111      	bne.n	80059f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059d4:	4b31      	ldr	r3, [pc, #196]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6892      	ldr	r2, [r2, #8]
 80059e4:	0211      	lsls	r1, r2, #8
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	68d2      	ldr	r2, [r2, #12]
 80059ea:	0912      	lsrs	r2, r2, #4
 80059ec:	0452      	lsls	r2, r2, #17
 80059ee:	430a      	orrs	r2, r1
 80059f0:	492a      	ldr	r1, [pc, #168]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	610b      	str	r3, [r1, #16]
 80059f6:	e027      	b.n	8005a48 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d112      	bne.n	8005a24 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059fe:	4b27      	ldr	r3, [pc, #156]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005a06:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6892      	ldr	r2, [r2, #8]
 8005a0e:	0211      	lsls	r1, r2, #8
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6912      	ldr	r2, [r2, #16]
 8005a14:	0852      	lsrs	r2, r2, #1
 8005a16:	3a01      	subs	r2, #1
 8005a18:	0552      	lsls	r2, r2, #21
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	491f      	ldr	r1, [pc, #124]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	610b      	str	r3, [r1, #16]
 8005a22:	e011      	b.n	8005a48 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a24:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6892      	ldr	r2, [r2, #8]
 8005a34:	0211      	lsls	r1, r2, #8
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6952      	ldr	r2, [r2, #20]
 8005a3a:	0852      	lsrs	r2, r2, #1
 8005a3c:	3a01      	subs	r2, #1
 8005a3e:	0652      	lsls	r2, r2, #25
 8005a40:	430a      	orrs	r2, r1
 8005a42:	4916      	ldr	r1, [pc, #88]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a48:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a13      	ldr	r2, [pc, #76]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a54:	f7fe fb7a 	bl	800414c <HAL_GetTick>
 8005a58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a5a:	e009      	b.n	8005a70 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a5c:	f7fe fb76 	bl	800414c <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d902      	bls.n	8005a70 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	73fb      	strb	r3, [r7, #15]
          break;
 8005a6e:	e005      	b.n	8005a7c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0ef      	beq.n	8005a5c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a82:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	4904      	ldr	r1, [pc, #16]	; (8005a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	40021000 	.word	0x40021000

08005aa0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005aae:	4b6a      	ldr	r3, [pc, #424]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d018      	beq.n	8005aec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005aba:	4b67      	ldr	r3, [pc, #412]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f003 0203 	and.w	r2, r3, #3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d10d      	bne.n	8005ae6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
       ||
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d009      	beq.n	8005ae6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005ad2:	4b61      	ldr	r3, [pc, #388]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	091b      	lsrs	r3, r3, #4
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
       ||
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d047      	beq.n	8005b76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	73fb      	strb	r3, [r7, #15]
 8005aea:	e044      	b.n	8005b76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d018      	beq.n	8005b26 <RCCEx_PLLSAI2_Config+0x86>
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d825      	bhi.n	8005b44 <RCCEx_PLLSAI2_Config+0xa4>
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d002      	beq.n	8005b02 <RCCEx_PLLSAI2_Config+0x62>
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d009      	beq.n	8005b14 <RCCEx_PLLSAI2_Config+0x74>
 8005b00:	e020      	b.n	8005b44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b02:	4b55      	ldr	r3, [pc, #340]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d11d      	bne.n	8005b4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b12:	e01a      	b.n	8005b4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b14:	4b50      	ldr	r3, [pc, #320]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d116      	bne.n	8005b4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b24:	e013      	b.n	8005b4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b26:	4b4c      	ldr	r3, [pc, #304]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10f      	bne.n	8005b52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b32:	4b49      	ldr	r3, [pc, #292]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d109      	bne.n	8005b52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b42:	e006      	b.n	8005b52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	73fb      	strb	r3, [r7, #15]
      break;
 8005b48:	e004      	b.n	8005b54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b4a:	bf00      	nop
 8005b4c:	e002      	b.n	8005b54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b4e:	bf00      	nop
 8005b50:	e000      	b.n	8005b54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b52:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10d      	bne.n	8005b76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b5a:	4b3f      	ldr	r3, [pc, #252]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6819      	ldr	r1, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	4939      	ldr	r1, [pc, #228]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d167      	bne.n	8005c4c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b7c:	4b36      	ldr	r3, [pc, #216]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a35      	ldr	r2, [pc, #212]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b88:	f7fe fae0 	bl	800414c <HAL_GetTick>
 8005b8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b8e:	e009      	b.n	8005ba4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b90:	f7fe fadc 	bl	800414c <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d902      	bls.n	8005ba4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ba2:	e005      	b.n	8005bb0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ba4:	4b2c      	ldr	r3, [pc, #176]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1ef      	bne.n	8005b90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d14a      	bne.n	8005c4c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d111      	bne.n	8005be0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bbc:	4b26      	ldr	r3, [pc, #152]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6892      	ldr	r2, [r2, #8]
 8005bcc:	0211      	lsls	r1, r2, #8
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	68d2      	ldr	r2, [r2, #12]
 8005bd2:	0912      	lsrs	r2, r2, #4
 8005bd4:	0452      	lsls	r2, r2, #17
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	491f      	ldr	r1, [pc, #124]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	614b      	str	r3, [r1, #20]
 8005bde:	e011      	b.n	8005c04 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005be0:	4b1d      	ldr	r3, [pc, #116]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005be8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6892      	ldr	r2, [r2, #8]
 8005bf0:	0211      	lsls	r1, r2, #8
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6912      	ldr	r2, [r2, #16]
 8005bf6:	0852      	lsrs	r2, r2, #1
 8005bf8:	3a01      	subs	r2, #1
 8005bfa:	0652      	lsls	r2, r2, #25
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	4916      	ldr	r1, [pc, #88]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c04:	4b14      	ldr	r3, [pc, #80]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a13      	ldr	r2, [pc, #76]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c10:	f7fe fa9c 	bl	800414c <HAL_GetTick>
 8005c14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c16:	e009      	b.n	8005c2c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c18:	f7fe fa98 	bl	800414c <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d902      	bls.n	8005c2c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	73fb      	strb	r3, [r7, #15]
          break;
 8005c2a:	e005      	b.n	8005c38 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d0ef      	beq.n	8005c18 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d106      	bne.n	8005c4c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c3e:	4b06      	ldr	r3, [pc, #24]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c40:	695a      	ldr	r2, [r3, #20]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	4904      	ldr	r1, [pc, #16]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40021000 	.word	0x40021000

08005c5c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b08b      	sub	sp, #44	; 0x2c
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	fa93 f3a3 	rbit	r3, r3
 8005c76:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8005c82:	2320      	movs	r3, #32
 8005c84:	e003      	b.n	8005c8e <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	fab3 f383 	clz	r3, r3
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	2103      	movs	r1, #3
 8005c92:	fa01 f303 	lsl.w	r3, r1, r3
 8005c96:	43db      	mvns	r3, r3
 8005c98:	401a      	ands	r2, r3
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	fa93 f3a3 	rbit	r3, r3
 8005ca4:	61fb      	str	r3, [r7, #28]
  return result;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005cb0:	2320      	movs	r3, #32
 8005cb2:	e003      	b.n	8005cbc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	fab3 f383 	clz	r3, r3
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	601a      	str	r2, [r3, #0]
}
 8005cca:	bf00      	nop
 8005ccc:	372c      	adds	r7, #44	; 0x2c
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	401a      	ands	r2, r3
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	fb01 f303 	mul.w	r3, r1, r3
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	605a      	str	r2, [r3, #4]
}
 8005cfa:	bf00      	nop
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b08b      	sub	sp, #44	; 0x2c
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	fa93 f3a3 	rbit	r3, r3
 8005d20:	613b      	str	r3, [r7, #16]
  return result;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005d2c:	2320      	movs	r3, #32
 8005d2e:	e003      	b.n	8005d38 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	fab3 f383 	clz	r3, r3
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	2103      	movs	r1, #3
 8005d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d40:	43db      	mvns	r3, r3
 8005d42:	401a      	ands	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	fa93 f3a3 	rbit	r3, r3
 8005d4e:	61fb      	str	r3, [r7, #28]
  return result;
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005d5a:	2320      	movs	r3, #32
 8005d5c:	e003      	b.n	8005d66 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	fab3 f383 	clz	r3, r3
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	6879      	ldr	r1, [r7, #4]
 8005d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005d74:	bf00      	nop
 8005d76:	372c      	adds	r7, #44	; 0x2c
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b08b      	sub	sp, #44	; 0x2c
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	fa93 f3a3 	rbit	r3, r3
 8005d9a:	613b      	str	r3, [r7, #16]
  return result;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005da6:	2320      	movs	r3, #32
 8005da8:	e003      	b.n	8005db2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	fab3 f383 	clz	r3, r3
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	2103      	movs	r1, #3
 8005db6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dba:	43db      	mvns	r3, r3
 8005dbc:	401a      	ands	r2, r3
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	fa93 f3a3 	rbit	r3, r3
 8005dc8:	61fb      	str	r3, [r7, #28]
  return result;
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005dd4:	2320      	movs	r3, #32
 8005dd6:	e003      	b.n	8005de0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	fab3 f383 	clz	r3, r3
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	fa01 f303 	lsl.w	r3, r1, r3
 8005de8:	431a      	orrs	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	60da      	str	r2, [r3, #12]
}
 8005dee:	bf00      	nop
 8005df0:	372c      	adds	r7, #44	; 0x2c
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b08b      	sub	sp, #44	; 0x2c
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	60f8      	str	r0, [r7, #12]
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a1a      	ldr	r2, [r3, #32]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	fa93 f3a3 	rbit	r3, r3
 8005e14:	613b      	str	r3, [r7, #16]
  return result;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005e20:	2320      	movs	r3, #32
 8005e22:	e003      	b.n	8005e2c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	fab3 f383 	clz	r3, r3
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	210f      	movs	r1, #15
 8005e30:	fa01 f303 	lsl.w	r3, r1, r3
 8005e34:	43db      	mvns	r3, r3
 8005e36:	401a      	ands	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	fa93 f3a3 	rbit	r3, r3
 8005e42:	61fb      	str	r3, [r7, #28]
  return result;
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005e4e:	2320      	movs	r3, #32
 8005e50:	e003      	b.n	8005e5a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	fab3 f383 	clz	r3, r3
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e62:	431a      	orrs	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005e68:	bf00      	nop
 8005e6a:	372c      	adds	r7, #44	; 0x2c
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b08b      	sub	sp, #44	; 0x2c
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	0a1b      	lsrs	r3, r3, #8
 8005e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	fa93 f3a3 	rbit	r3, r3
 8005e90:	613b      	str	r3, [r7, #16]
  return result;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005e9c:	2320      	movs	r3, #32
 8005e9e:	e003      	b.n	8005ea8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	fab3 f383 	clz	r3, r3
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	210f      	movs	r1, #15
 8005eac:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	401a      	ands	r2, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	0a1b      	lsrs	r3, r3, #8
 8005eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	fa93 f3a3 	rbit	r3, r3
 8005ec0:	61fb      	str	r3, [r7, #28]
  return result;
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005ecc:	2320      	movs	r3, #32
 8005ece:	e003      	b.n	8005ed8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	fab3 f383 	clz	r3, r3
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005ee6:	bf00      	nop
 8005ee8:	372c      	adds	r7, #44	; 0x2c
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b088      	sub	sp, #32
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	fa93 f3a3 	rbit	r3, r3
 8005f08:	60fb      	str	r3, [r7, #12]
  return result;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <LL_GPIO_Init+0x26>
    return 32U;
 8005f14:	2320      	movs	r3, #32
 8005f16:	e003      	b.n	8005f20 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	fab3 f383 	clz	r3, r3
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005f22:	e048      	b.n	8005fb6 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	2101      	movs	r1, #1
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f30:	4013      	ands	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d03a      	beq.n	8005fb0 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d003      	beq.n	8005f4a <LL_GPIO_Init+0x58>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d10e      	bne.n	8005f68 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	69b9      	ldr	r1, [r7, #24]
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff fed7 	bl	8005d06 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	6819      	ldr	r1, [r3, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	461a      	mov	r2, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff feb7 	bl	8005cd6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	69b9      	ldr	r1, [r7, #24]
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff ff05 	bl	8005d80 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d111      	bne.n	8005fa2 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2bff      	cmp	r3, #255	; 0xff
 8005f82:	d807      	bhi.n	8005f94 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	69b9      	ldr	r1, [r7, #24]
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7ff ff34 	bl	8005dfa <LL_GPIO_SetAFPin_0_7>
 8005f92:	e006      	b.n	8005fa2 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	69b9      	ldr	r1, [r7, #24]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff ff69 	bl	8005e74 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	69b9      	ldr	r1, [r7, #24]
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff fe56 	bl	8005c5c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1af      	bne.n	8005f24 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3720      	adds	r7, #32
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005fd4:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <LL_RCC_HSI_IsReady+0x24>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe0:	d101      	bne.n	8005fe6 <LL_RCC_HSI_IsReady+0x16>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <LL_RCC_HSI_IsReady+0x18>
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40021000 	.word	0x40021000

08005ff8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8005ffc:	4b07      	ldr	r3, [pc, #28]	; (800601c <LL_RCC_LSE_IsReady+0x24>)
 8005ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b02      	cmp	r3, #2
 8006008:	d101      	bne.n	800600e <LL_RCC_LSE_IsReady+0x16>
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <LL_RCC_LSE_IsReady+0x18>
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40021000 	.word	0x40021000

08006020 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8006024:	4b06      	ldr	r3, [pc, #24]	; (8006040 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b08      	cmp	r3, #8
 800602e:	d101      	bne.n	8006034 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8006030:	2301      	movs	r3, #1
 8006032:	e000      	b.n	8006036 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	40021000 	.word	0x40021000

08006044 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006048:	4b04      	ldr	r3, [pc, #16]	; (800605c <LL_RCC_MSI_GetRange+0x18>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006050:	4618      	mov	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	40021000 	.word	0x40021000

08006060 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006064:	4b04      	ldr	r3, [pc, #16]	; (8006078 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8006066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800606a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800606e:	4618      	mov	r0, r3
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	40021000 	.word	0x40021000

0800607c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006080:	4b04      	ldr	r3, [pc, #16]	; (8006094 <LL_RCC_GetSysClkSource+0x18>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 030c 	and.w	r3, r3, #12
}
 8006088:	4618      	mov	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40021000 	.word	0x40021000

08006098 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800609c:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <LL_RCC_GetAHBPrescaler+0x18>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40021000 	.word	0x40021000

080060b4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80060b8:	4b04      	ldr	r3, [pc, #16]	; (80060cc <LL_RCC_GetAPB1Prescaler+0x18>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40021000 	.word	0x40021000

080060d0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80060d4:	4b04      	ldr	r3, [pc, #16]	; (80060e8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80060dc:	4618      	mov	r0, r3
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40021000 	.word	0x40021000

080060ec <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80060f4:	4b06      	ldr	r3, [pc, #24]	; (8006110 <LL_RCC_GetUSARTClockSource+0x24>)
 80060f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	401a      	ands	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	041b      	lsls	r3, r3, #16
 8006102:	4313      	orrs	r3, r2
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	40021000 	.word	0x40021000

08006114 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800611c:	4b06      	ldr	r3, [pc, #24]	; (8006138 <LL_RCC_GetUARTClockSource+0x24>)
 800611e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	401a      	ands	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	041b      	lsls	r3, r3, #16
 800612a:	4313      	orrs	r3, r2
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	40021000 	.word	0x40021000

0800613c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006140:	4b04      	ldr	r3, [pc, #16]	; (8006154 <LL_RCC_PLL_GetMainSource+0x18>)
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f003 0303 	and.w	r3, r3, #3
}
 8006148:	4618      	mov	r0, r3
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	40021000 	.word	0x40021000

08006158 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800615c:	4b04      	ldr	r3, [pc, #16]	; (8006170 <LL_RCC_PLL_GetN+0x18>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	0a1b      	lsrs	r3, r3, #8
 8006162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006166:	4618      	mov	r0, r3
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	40021000 	.word	0x40021000

08006174 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006174:	b480      	push	{r7}
 8006176:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006178:	4b04      	ldr	r3, [pc, #16]	; (800618c <LL_RCC_PLL_GetR+0x18>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8006180:	4618      	mov	r0, r3
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40021000 	.word	0x40021000

08006190 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006194:	4b04      	ldr	r3, [pc, #16]	; (80061a8 <LL_RCC_PLL_GetDivider+0x18>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800619c:	4618      	mov	r0, r3
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40021000 	.word	0x40021000

080061ac <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d137      	bne.n	800622e <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff ff94 	bl	80060ec <LL_RCC_GetUSARTClockSource>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	f200 80b3 	bhi.w	8006336 <LL_RCC_GetUSARTClockFreq+0x18a>
 80061d0:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <LL_RCC_GetUSARTClockFreq+0x2c>)
 80061d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d6:	bf00      	nop
 80061d8:	08006217 	.word	0x08006217
 80061dc:	080061e9 	.word	0x080061e9
 80061e0:	080061f1 	.word	0x080061f1
 80061e4:	08006203 	.word	0x08006203
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80061e8:	f000 f95c 	bl	80064a4 <RCC_GetSystemClockFreq>
 80061ec:	60f8      	str	r0, [r7, #12]
        break;
 80061ee:	e0b5      	b.n	800635c <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80061f0:	f7ff feee 	bl	8005fd0 <LL_RCC_HSI_IsReady>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 809f 	beq.w	800633a <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 80061fc:	4b5a      	ldr	r3, [pc, #360]	; (8006368 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80061fe:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006200:	e09b      	b.n	800633a <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006202:	f7ff fef9 	bl	8005ff8 <LL_RCC_LSE_IsReady>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 8098 	beq.w	800633e <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 800620e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006212:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006214:	e093      	b.n	800633e <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006216:	f000 f945 	bl	80064a4 <RCC_GetSystemClockFreq>
 800621a:	4603      	mov	r3, r0
 800621c:	4618      	mov	r0, r3
 800621e:	f000 f9d1 	bl	80065c4 <RCC_GetHCLKClockFreq>
 8006222:	4603      	mov	r3, r0
 8006224:	4618      	mov	r0, r3
 8006226:	f000 f9f7 	bl	8006618 <RCC_GetPCLK2ClockFreq>
 800622a:	60f8      	str	r0, [r7, #12]
        break;
 800622c:	e096      	b.n	800635c <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b0c      	cmp	r3, #12
 8006232:	d146      	bne.n	80062c2 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff ff59 	bl	80060ec <LL_RCC_GetUSARTClockSource>
 800623a:	4603      	mov	r3, r0
 800623c:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006240:	2b0c      	cmp	r3, #12
 8006242:	d87e      	bhi.n	8006342 <LL_RCC_GetUSARTClockFreq+0x196>
 8006244:	a201      	add	r2, pc, #4	; (adr r2, 800624c <LL_RCC_GetUSARTClockFreq+0xa0>)
 8006246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624a:	bf00      	nop
 800624c:	080062ab 	.word	0x080062ab
 8006250:	08006343 	.word	0x08006343
 8006254:	08006343 	.word	0x08006343
 8006258:	08006343 	.word	0x08006343
 800625c:	08006281 	.word	0x08006281
 8006260:	08006343 	.word	0x08006343
 8006264:	08006343 	.word	0x08006343
 8006268:	08006343 	.word	0x08006343
 800626c:	08006289 	.word	0x08006289
 8006270:	08006343 	.word	0x08006343
 8006274:	08006343 	.word	0x08006343
 8006278:	08006343 	.word	0x08006343
 800627c:	08006299 	.word	0x08006299
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006280:	f000 f910 	bl	80064a4 <RCC_GetSystemClockFreq>
 8006284:	60f8      	str	r0, [r7, #12]
        break;
 8006286:	e069      	b.n	800635c <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006288:	f7ff fea2 	bl	8005fd0 <LL_RCC_HSI_IsReady>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d059      	beq.n	8006346 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8006292:	4b35      	ldr	r3, [pc, #212]	; (8006368 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006294:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006296:	e056      	b.n	8006346 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006298:	f7ff feae 	bl	8005ff8 <LL_RCC_LSE_IsReady>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d053      	beq.n	800634a <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 80062a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062a6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80062a8:	e04f      	b.n	800634a <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80062aa:	f000 f8fb 	bl	80064a4 <RCC_GetSystemClockFreq>
 80062ae:	4603      	mov	r3, r0
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 f987 	bl	80065c4 <RCC_GetHCLKClockFreq>
 80062b6:	4603      	mov	r3, r0
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 f999 	bl	80065f0 <RCC_GetPCLK1ClockFreq>
 80062be:	60f8      	str	r0, [r7, #12]
        break;
 80062c0:	e04c      	b.n	800635c <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b30      	cmp	r3, #48	; 0x30
 80062c6:	d142      	bne.n	800634e <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff ff0f 	bl	80060ec <LL_RCC_GetUSARTClockSource>
 80062ce:	4603      	mov	r3, r0
 80062d0:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80062d4:	d01a      	beq.n	800630c <LL_RCC_GetUSARTClockFreq+0x160>
 80062d6:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80062da:	d83a      	bhi.n	8006352 <LL_RCC_GetUSARTClockFreq+0x1a6>
 80062dc:	4a23      	ldr	r2, [pc, #140]	; (800636c <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00c      	beq.n	80062fc <LL_RCC_GetUSARTClockFreq+0x150>
 80062e2:	4a22      	ldr	r2, [pc, #136]	; (800636c <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d834      	bhi.n	8006352 <LL_RCC_GetUSARTClockFreq+0x1a6>
 80062e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062ec:	d017      	beq.n	800631e <LL_RCC_GetUSARTClockFreq+0x172>
 80062ee:	4a20      	ldr	r2, [pc, #128]	; (8006370 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d12e      	bne.n	8006352 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80062f4:	f000 f8d6 	bl	80064a4 <RCC_GetSystemClockFreq>
 80062f8:	60f8      	str	r0, [r7, #12]
          break;
 80062fa:	e02f      	b.n	800635c <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80062fc:	f7ff fe68 	bl	8005fd0 <LL_RCC_HSI_IsReady>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d027      	beq.n	8006356 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8006306:	4b18      	ldr	r3, [pc, #96]	; (8006368 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006308:	60fb      	str	r3, [r7, #12]
          }
          break;
 800630a:	e024      	b.n	8006356 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 800630c:	f7ff fe74 	bl	8005ff8 <LL_RCC_LSE_IsReady>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d021      	beq.n	800635a <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8006316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800631a:	60fb      	str	r3, [r7, #12]
          }
          break;
 800631c:	e01d      	b.n	800635a <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800631e:	f000 f8c1 	bl	80064a4 <RCC_GetSystemClockFreq>
 8006322:	4603      	mov	r3, r0
 8006324:	4618      	mov	r0, r3
 8006326:	f000 f94d 	bl	80065c4 <RCC_GetHCLKClockFreq>
 800632a:	4603      	mov	r3, r0
 800632c:	4618      	mov	r0, r3
 800632e:	f000 f95f 	bl	80065f0 <RCC_GetPCLK1ClockFreq>
 8006332:	60f8      	str	r0, [r7, #12]
          break;
 8006334:	e012      	b.n	800635c <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006336:	bf00      	nop
 8006338:	e010      	b.n	800635c <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800633a:	bf00      	nop
 800633c:	e00e      	b.n	800635c <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800633e:	bf00      	nop
 8006340:	e00c      	b.n	800635c <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006342:	bf00      	nop
 8006344:	e00a      	b.n	800635c <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006346:	bf00      	nop
 8006348:	e008      	b.n	800635c <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800634a:	bf00      	nop
 800634c:	e006      	b.n	800635c <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 800634e:	bf00      	nop
 8006350:	e004      	b.n	800635c <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006352:	bf00      	nop
 8006354:	e002      	b.n	800635c <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006356:	bf00      	nop
 8006358:	e000      	b.n	800635c <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 800635a:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 800635c:	68fb      	ldr	r3, [r7, #12]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	00f42400 	.word	0x00f42400
 800636c:	00300020 	.word	0x00300020
 8006370:	00300010 	.word	0x00300010

08006374 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800637c:	2300      	movs	r3, #0
 800637e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2bc0      	cmp	r3, #192	; 0xc0
 8006384:	d136      	bne.n	80063f4 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff fec4 	bl	8006114 <LL_RCC_GetUARTClockSource>
 800638c:	4603      	mov	r3, r0
 800638e:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006392:	d01a      	beq.n	80063ca <LL_RCC_GetUARTClockFreq+0x56>
 8006394:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006398:	d82e      	bhi.n	80063f8 <LL_RCC_GetUARTClockFreq+0x84>
 800639a:	4a3d      	ldr	r2, [pc, #244]	; (8006490 <LL_RCC_GetUARTClockFreq+0x11c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00c      	beq.n	80063ba <LL_RCC_GetUARTClockFreq+0x46>
 80063a0:	4a3b      	ldr	r2, [pc, #236]	; (8006490 <LL_RCC_GetUARTClockFreq+0x11c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d828      	bhi.n	80063f8 <LL_RCC_GetUARTClockFreq+0x84>
 80063a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063aa:	d017      	beq.n	80063dc <LL_RCC_GetUARTClockFreq+0x68>
 80063ac:	4a39      	ldr	r2, [pc, #228]	; (8006494 <LL_RCC_GetUARTClockFreq+0x120>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d122      	bne.n	80063f8 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80063b2:	f000 f877 	bl	80064a4 <RCC_GetSystemClockFreq>
 80063b6:	60f8      	str	r0, [r7, #12]
        break;
 80063b8:	e023      	b.n	8006402 <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80063ba:	f7ff fe09 	bl	8005fd0 <LL_RCC_HSI_IsReady>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d01b      	beq.n	80063fc <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 80063c4:	4b34      	ldr	r3, [pc, #208]	; (8006498 <LL_RCC_GetUARTClockFreq+0x124>)
 80063c6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80063c8:	e018      	b.n	80063fc <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80063ca:	f7ff fe15 	bl	8005ff8 <LL_RCC_LSE_IsReady>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d015      	beq.n	8006400 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 80063d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063d8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80063da:	e011      	b.n	8006400 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80063dc:	f000 f862 	bl	80064a4 <RCC_GetSystemClockFreq>
 80063e0:	4603      	mov	r3, r0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 f8ee 	bl	80065c4 <RCC_GetHCLKClockFreq>
 80063e8:	4603      	mov	r3, r0
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 f900 	bl	80065f0 <RCC_GetPCLK1ClockFreq>
 80063f0:	60f8      	str	r0, [r7, #12]
        break;
 80063f2:	e006      	b.n	8006402 <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 80063f4:	bf00      	nop
 80063f6:	e004      	b.n	8006402 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80063f8:	bf00      	nop
 80063fa:	e002      	b.n	8006402 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80063fc:	bf00      	nop
 80063fe:	e000      	b.n	8006402 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006400:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006408:	d136      	bne.n	8006478 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff fe82 	bl	8006114 <LL_RCC_GetUARTClockSource>
 8006410:	4603      	mov	r3, r0
 8006412:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006416:	d01a      	beq.n	800644e <LL_RCC_GetUARTClockFreq+0xda>
 8006418:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800641c:	d82e      	bhi.n	800647c <LL_RCC_GetUARTClockFreq+0x108>
 800641e:	4a1f      	ldr	r2, [pc, #124]	; (800649c <LL_RCC_GetUARTClockFreq+0x128>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d00c      	beq.n	800643e <LL_RCC_GetUARTClockFreq+0xca>
 8006424:	4a1d      	ldr	r2, [pc, #116]	; (800649c <LL_RCC_GetUARTClockFreq+0x128>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d828      	bhi.n	800647c <LL_RCC_GetUARTClockFreq+0x108>
 800642a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800642e:	d017      	beq.n	8006460 <LL_RCC_GetUARTClockFreq+0xec>
 8006430:	4a1b      	ldr	r2, [pc, #108]	; (80064a0 <LL_RCC_GetUARTClockFreq+0x12c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d122      	bne.n	800647c <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8006436:	f000 f835 	bl	80064a4 <RCC_GetSystemClockFreq>
 800643a:	60f8      	str	r0, [r7, #12]
        break;
 800643c:	e023      	b.n	8006486 <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800643e:	f7ff fdc7 	bl	8005fd0 <LL_RCC_HSI_IsReady>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01b      	beq.n	8006480 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8006448:	4b13      	ldr	r3, [pc, #76]	; (8006498 <LL_RCC_GetUARTClockFreq+0x124>)
 800644a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800644c:	e018      	b.n	8006480 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800644e:	f7ff fdd3 	bl	8005ff8 <LL_RCC_LSE_IsReady>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d015      	beq.n	8006484 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8006458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800645c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800645e:	e011      	b.n	8006484 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006460:	f000 f820 	bl	80064a4 <RCC_GetSystemClockFreq>
 8006464:	4603      	mov	r3, r0
 8006466:	4618      	mov	r0, r3
 8006468:	f000 f8ac 	bl	80065c4 <RCC_GetHCLKClockFreq>
 800646c:	4603      	mov	r3, r0
 800646e:	4618      	mov	r0, r3
 8006470:	f000 f8be 	bl	80065f0 <RCC_GetPCLK1ClockFreq>
 8006474:	60f8      	str	r0, [r7, #12]
        break;
 8006476:	e006      	b.n	8006486 <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8006478:	bf00      	nop
 800647a:	e004      	b.n	8006486 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 800647c:	bf00      	nop
 800647e:	e002      	b.n	8006486 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006480:	bf00      	nop
 8006482:	e000      	b.n	8006486 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006484:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8006486:	68fb      	ldr	r3, [r7, #12]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	00c00080 	.word	0x00c00080
 8006494:	00c00040 	.word	0x00c00040
 8006498:	00f42400 	.word	0x00f42400
 800649c:	03000200 	.word	0x03000200
 80064a0:	03000100 	.word	0x03000100

080064a4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80064aa:	f7ff fde7 	bl	800607c <LL_RCC_GetSysClkSource>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b0c      	cmp	r3, #12
 80064b2:	d851      	bhi.n	8006558 <RCC_GetSystemClockFreq+0xb4>
 80064b4:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <RCC_GetSystemClockFreq+0x18>)
 80064b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ba:	bf00      	nop
 80064bc:	080064f1 	.word	0x080064f1
 80064c0:	08006559 	.word	0x08006559
 80064c4:	08006559 	.word	0x08006559
 80064c8:	08006559 	.word	0x08006559
 80064cc:	08006545 	.word	0x08006545
 80064d0:	08006559 	.word	0x08006559
 80064d4:	08006559 	.word	0x08006559
 80064d8:	08006559 	.word	0x08006559
 80064dc:	0800654b 	.word	0x0800654b
 80064e0:	08006559 	.word	0x08006559
 80064e4:	08006559 	.word	0x08006559
 80064e8:	08006559 	.word	0x08006559
 80064ec:	08006551 	.word	0x08006551
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80064f0:	f7ff fd96 	bl	8006020 <LL_RCC_MSI_IsEnabledRangeSelect>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d111      	bne.n	800651e <RCC_GetSystemClockFreq+0x7a>
 80064fa:	f7ff fd91 	bl	8006020 <LL_RCC_MSI_IsEnabledRangeSelect>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d004      	beq.n	800650e <RCC_GetSystemClockFreq+0x6a>
 8006504:	f7ff fd9e 	bl	8006044 <LL_RCC_MSI_GetRange>
 8006508:	4603      	mov	r3, r0
 800650a:	0a1b      	lsrs	r3, r3, #8
 800650c:	e003      	b.n	8006516 <RCC_GetSystemClockFreq+0x72>
 800650e:	f7ff fda7 	bl	8006060 <LL_RCC_MSI_GetRangeAfterStandby>
 8006512:	4603      	mov	r3, r0
 8006514:	0a1b      	lsrs	r3, r3, #8
 8006516:	4a28      	ldr	r2, [pc, #160]	; (80065b8 <RCC_GetSystemClockFreq+0x114>)
 8006518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800651c:	e010      	b.n	8006540 <RCC_GetSystemClockFreq+0x9c>
 800651e:	f7ff fd7f 	bl	8006020 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d004      	beq.n	8006532 <RCC_GetSystemClockFreq+0x8e>
 8006528:	f7ff fd8c 	bl	8006044 <LL_RCC_MSI_GetRange>
 800652c:	4603      	mov	r3, r0
 800652e:	091b      	lsrs	r3, r3, #4
 8006530:	e003      	b.n	800653a <RCC_GetSystemClockFreq+0x96>
 8006532:	f7ff fd95 	bl	8006060 <LL_RCC_MSI_GetRangeAfterStandby>
 8006536:	4603      	mov	r3, r0
 8006538:	091b      	lsrs	r3, r3, #4
 800653a:	4a1f      	ldr	r2, [pc, #124]	; (80065b8 <RCC_GetSystemClockFreq+0x114>)
 800653c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006540:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006542:	e033      	b.n	80065ac <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006544:	4b1d      	ldr	r3, [pc, #116]	; (80065bc <RCC_GetSystemClockFreq+0x118>)
 8006546:	607b      	str	r3, [r7, #4]
      break;
 8006548:	e030      	b.n	80065ac <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800654a:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <RCC_GetSystemClockFreq+0x11c>)
 800654c:	607b      	str	r3, [r7, #4]
      break;
 800654e:	e02d      	b.n	80065ac <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006550:	f000 f876 	bl	8006640 <RCC_PLL_GetFreqDomain_SYS>
 8006554:	6078      	str	r0, [r7, #4]
      break;
 8006556:	e029      	b.n	80065ac <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006558:	f7ff fd62 	bl	8006020 <LL_RCC_MSI_IsEnabledRangeSelect>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d111      	bne.n	8006586 <RCC_GetSystemClockFreq+0xe2>
 8006562:	f7ff fd5d 	bl	8006020 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d004      	beq.n	8006576 <RCC_GetSystemClockFreq+0xd2>
 800656c:	f7ff fd6a 	bl	8006044 <LL_RCC_MSI_GetRange>
 8006570:	4603      	mov	r3, r0
 8006572:	0a1b      	lsrs	r3, r3, #8
 8006574:	e003      	b.n	800657e <RCC_GetSystemClockFreq+0xda>
 8006576:	f7ff fd73 	bl	8006060 <LL_RCC_MSI_GetRangeAfterStandby>
 800657a:	4603      	mov	r3, r0
 800657c:	0a1b      	lsrs	r3, r3, #8
 800657e:	4a0e      	ldr	r2, [pc, #56]	; (80065b8 <RCC_GetSystemClockFreq+0x114>)
 8006580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006584:	e010      	b.n	80065a8 <RCC_GetSystemClockFreq+0x104>
 8006586:	f7ff fd4b 	bl	8006020 <LL_RCC_MSI_IsEnabledRangeSelect>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d004      	beq.n	800659a <RCC_GetSystemClockFreq+0xf6>
 8006590:	f7ff fd58 	bl	8006044 <LL_RCC_MSI_GetRange>
 8006594:	4603      	mov	r3, r0
 8006596:	091b      	lsrs	r3, r3, #4
 8006598:	e003      	b.n	80065a2 <RCC_GetSystemClockFreq+0xfe>
 800659a:	f7ff fd61 	bl	8006060 <LL_RCC_MSI_GetRangeAfterStandby>
 800659e:	4603      	mov	r3, r0
 80065a0:	091b      	lsrs	r3, r3, #4
 80065a2:	4a05      	ldr	r2, [pc, #20]	; (80065b8 <RCC_GetSystemClockFreq+0x114>)
 80065a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065a8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80065aa:	bf00      	nop
  }

  return frequency;
 80065ac:	687b      	ldr	r3, [r7, #4]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	08007390 	.word	0x08007390
 80065bc:	00f42400 	.word	0x00f42400
 80065c0:	007a1200 	.word	0x007a1200

080065c4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80065cc:	f7ff fd64 	bl	8006098 <LL_RCC_GetAHBPrescaler>
 80065d0:	4603      	mov	r3, r0
 80065d2:	091b      	lsrs	r3, r3, #4
 80065d4:	f003 030f 	and.w	r3, r3, #15
 80065d8:	4a04      	ldr	r2, [pc, #16]	; (80065ec <RCC_GetHCLKClockFreq+0x28>)
 80065da:	5cd3      	ldrb	r3, [r2, r3]
 80065dc:	461a      	mov	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	40d3      	lsrs	r3, r2
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	08007378 	.word	0x08007378

080065f0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80065f8:	f7ff fd5c 	bl	80060b4 <LL_RCC_GetAPB1Prescaler>
 80065fc:	4603      	mov	r3, r0
 80065fe:	0a1b      	lsrs	r3, r3, #8
 8006600:	4a04      	ldr	r2, [pc, #16]	; (8006614 <RCC_GetPCLK1ClockFreq+0x24>)
 8006602:	5cd3      	ldrb	r3, [r2, r3]
 8006604:	461a      	mov	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	40d3      	lsrs	r3, r2
}
 800660a:	4618      	mov	r0, r3
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	08007388 	.word	0x08007388

08006618 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006620:	f7ff fd56 	bl	80060d0 <LL_RCC_GetAPB2Prescaler>
 8006624:	4603      	mov	r3, r0
 8006626:	0adb      	lsrs	r3, r3, #11
 8006628:	4a04      	ldr	r2, [pc, #16]	; (800663c <RCC_GetPCLK2ClockFreq+0x24>)
 800662a:	5cd3      	ldrb	r3, [r2, r3]
 800662c:	461a      	mov	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	40d3      	lsrs	r3, r2
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	08007388 	.word	0x08007388

08006640 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006640:	b590      	push	{r4, r7, lr}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006646:	f7ff fd79 	bl	800613c <LL_RCC_PLL_GetMainSource>
 800664a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b03      	cmp	r3, #3
 8006650:	d036      	beq.n	80066c0 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b03      	cmp	r3, #3
 8006656:	d836      	bhi.n	80066c6 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d003      	beq.n	8006666 <RCC_PLL_GetFreqDomain_SYS+0x26>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b02      	cmp	r3, #2
 8006662:	d02a      	beq.n	80066ba <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8006664:	e02f      	b.n	80066c6 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006666:	f7ff fcdb 	bl	8006020 <LL_RCC_MSI_IsEnabledRangeSelect>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d111      	bne.n	8006694 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8006670:	f7ff fcd6 	bl	8006020 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d004      	beq.n	8006684 <RCC_PLL_GetFreqDomain_SYS+0x44>
 800667a:	f7ff fce3 	bl	8006044 <LL_RCC_MSI_GetRange>
 800667e:	4603      	mov	r3, r0
 8006680:	0a1b      	lsrs	r3, r3, #8
 8006682:	e003      	b.n	800668c <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8006684:	f7ff fcec 	bl	8006060 <LL_RCC_MSI_GetRangeAfterStandby>
 8006688:	4603      	mov	r3, r0
 800668a:	0a1b      	lsrs	r3, r3, #8
 800668c:	4a2f      	ldr	r2, [pc, #188]	; (800674c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800668e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006692:	e010      	b.n	80066b6 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8006694:	f7ff fcc4 	bl	8006020 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d004      	beq.n	80066a8 <RCC_PLL_GetFreqDomain_SYS+0x68>
 800669e:	f7ff fcd1 	bl	8006044 <LL_RCC_MSI_GetRange>
 80066a2:	4603      	mov	r3, r0
 80066a4:	091b      	lsrs	r3, r3, #4
 80066a6:	e003      	b.n	80066b0 <RCC_PLL_GetFreqDomain_SYS+0x70>
 80066a8:	f7ff fcda 	bl	8006060 <LL_RCC_MSI_GetRangeAfterStandby>
 80066ac:	4603      	mov	r3, r0
 80066ae:	091b      	lsrs	r3, r3, #4
 80066b0:	4a26      	ldr	r2, [pc, #152]	; (800674c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80066b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b6:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80066b8:	e02f      	b.n	800671a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80066ba:	4b25      	ldr	r3, [pc, #148]	; (8006750 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 80066bc:	607b      	str	r3, [r7, #4]
      break;
 80066be:	e02c      	b.n	800671a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80066c0:	4b24      	ldr	r3, [pc, #144]	; (8006754 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 80066c2:	607b      	str	r3, [r7, #4]
      break;
 80066c4:	e029      	b.n	800671a <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80066c6:	f7ff fcab 	bl	8006020 <LL_RCC_MSI_IsEnabledRangeSelect>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d111      	bne.n	80066f4 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80066d0:	f7ff fca6 	bl	8006020 <LL_RCC_MSI_IsEnabledRangeSelect>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d004      	beq.n	80066e4 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80066da:	f7ff fcb3 	bl	8006044 <LL_RCC_MSI_GetRange>
 80066de:	4603      	mov	r3, r0
 80066e0:	0a1b      	lsrs	r3, r3, #8
 80066e2:	e003      	b.n	80066ec <RCC_PLL_GetFreqDomain_SYS+0xac>
 80066e4:	f7ff fcbc 	bl	8006060 <LL_RCC_MSI_GetRangeAfterStandby>
 80066e8:	4603      	mov	r3, r0
 80066ea:	0a1b      	lsrs	r3, r3, #8
 80066ec:	4a17      	ldr	r2, [pc, #92]	; (800674c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80066ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066f2:	e010      	b.n	8006716 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 80066f4:	f7ff fc94 	bl	8006020 <LL_RCC_MSI_IsEnabledRangeSelect>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d004      	beq.n	8006708 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 80066fe:	f7ff fca1 	bl	8006044 <LL_RCC_MSI_GetRange>
 8006702:	4603      	mov	r3, r0
 8006704:	091b      	lsrs	r3, r3, #4
 8006706:	e003      	b.n	8006710 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8006708:	f7ff fcaa 	bl	8006060 <LL_RCC_MSI_GetRangeAfterStandby>
 800670c:	4603      	mov	r3, r0
 800670e:	091b      	lsrs	r3, r3, #4
 8006710:	4a0e      	ldr	r2, [pc, #56]	; (800674c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006716:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006718:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800671a:	f7ff fd39 	bl	8006190 <LL_RCC_PLL_GetDivider>
 800671e:	4603      	mov	r3, r0
 8006720:	091b      	lsrs	r3, r3, #4
 8006722:	3301      	adds	r3, #1
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	fbb2 f4f3 	udiv	r4, r2, r3
 800672a:	f7ff fd15 	bl	8006158 <LL_RCC_PLL_GetN>
 800672e:	4603      	mov	r3, r0
 8006730:	fb03 f404 	mul.w	r4, r3, r4
 8006734:	f7ff fd1e 	bl	8006174 <LL_RCC_PLL_GetR>
 8006738:	4603      	mov	r3, r0
 800673a:	0e5b      	lsrs	r3, r3, #25
 800673c:	3301      	adds	r3, #1
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	bd90      	pop	{r4, r7, pc}
 800674c:	08007390 	.word	0x08007390
 8006750:	00f42400 	.word	0x00f42400
 8006754:	007a1200 	.word	0x007a1200

08006758 <LL_USART_IsEnabled>:
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <LL_USART_IsEnabled+0x18>
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <LL_USART_IsEnabled+0x1a>
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <LL_USART_SetStopBitsLength>:
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	605a      	str	r2, [r3, #4]
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <LL_USART_SetHWFlowCtrl>:
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	609a      	str	r2, [r3, #8]
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <LL_USART_SetBaudRate>:
{
 80067ca:	b480      	push	{r7}
 80067cc:	b087      	sub	sp, #28
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	60f8      	str	r0, [r7, #12]
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	607a      	str	r2, [r7, #4]
 80067d6:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067de:	d11a      	bne.n	8006816 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	005a      	lsls	r2, r3, #1
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	085b      	lsrs	r3, r3, #1
 80067e8:	441a      	add	r2, r3
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80067fa:	4013      	ands	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	085b      	lsrs	r3, r3, #1
 8006802:	b29b      	uxth	r3, r3
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	60da      	str	r2, [r3, #12]
}
 8006814:	e00a      	b.n	800682c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	085a      	lsrs	r2, r3, #1
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	441a      	add	r2, r3
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	fbb2 f3f3 	udiv	r3, r2, r3
 8006824:	b29b      	uxth	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	60da      	str	r2, [r3, #12]
}
 800682c:	bf00      	nop
 800682e:	371c      	adds	r7, #28
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006846:	2300      	movs	r3, #0
 8006848:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7ff ff84 	bl	8006758 <LL_USART_IsEnabled>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d15b      	bne.n	800690e <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	4b2f      	ldr	r3, [pc, #188]	; (8006918 <LL_USART_Init+0xe0>)
 800685c:	4013      	ands	r3, r2
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	6851      	ldr	r1, [r2, #4]
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	68d2      	ldr	r2, [r2, #12]
 8006866:	4311      	orrs	r1, r2
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	6912      	ldr	r2, [r2, #16]
 800686c:	4311      	orrs	r1, r2
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	6992      	ldr	r2, [r2, #24]
 8006872:	430a      	orrs	r2, r1
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff ff7c 	bl	800677e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff ff89 	bl	80067a4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a21      	ldr	r2, [pc, #132]	; (800691c <LL_USART_Init+0xe4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d104      	bne.n	80068a4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800689a:	2003      	movs	r0, #3
 800689c:	f7ff fc86 	bl	80061ac <LL_RCC_GetUSARTClockFreq>
 80068a0:	60b8      	str	r0, [r7, #8]
 80068a2:	e023      	b.n	80068ec <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a1e      	ldr	r2, [pc, #120]	; (8006920 <LL_USART_Init+0xe8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d104      	bne.n	80068b6 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80068ac:	200c      	movs	r0, #12
 80068ae:	f7ff fc7d 	bl	80061ac <LL_RCC_GetUSARTClockFreq>
 80068b2:	60b8      	str	r0, [r7, #8]
 80068b4:	e01a      	b.n	80068ec <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a1a      	ldr	r2, [pc, #104]	; (8006924 <LL_USART_Init+0xec>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d104      	bne.n	80068c8 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80068be:	2030      	movs	r0, #48	; 0x30
 80068c0:	f7ff fc74 	bl	80061ac <LL_RCC_GetUSARTClockFreq>
 80068c4:	60b8      	str	r0, [r7, #8]
 80068c6:	e011      	b.n	80068ec <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a17      	ldr	r2, [pc, #92]	; (8006928 <LL_USART_Init+0xf0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d104      	bne.n	80068da <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80068d0:	20c0      	movs	r0, #192	; 0xc0
 80068d2:	f7ff fd4f 	bl	8006374 <LL_RCC_GetUARTClockFreq>
 80068d6:	60b8      	str	r0, [r7, #8]
 80068d8:	e008      	b.n	80068ec <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a13      	ldr	r2, [pc, #76]	; (800692c <LL_USART_Init+0xf4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d104      	bne.n	80068ec <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80068e2:	f44f 7040 	mov.w	r0, #768	; 0x300
 80068e6:	f7ff fd45 	bl	8006374 <LL_RCC_GetUARTClockFreq>
 80068ea:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00d      	beq.n	800690e <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d009      	beq.n	800690e <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 80068fa:	2300      	movs	r3, #0
 80068fc:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	699a      	ldr	r2, [r3, #24]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7ff ff5e 	bl	80067ca <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800690e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	efff69f3 	.word	0xefff69f3
 800691c:	40013800 	.word	0x40013800
 8006920:	40004400 	.word	0x40004400
 8006924:	40004800 	.word	0x40004800
 8006928:	40004c00 	.word	0x40004c00
 800692c:	40005000 	.word	0x40005000

08006930 <__errno>:
 8006930:	4b01      	ldr	r3, [pc, #4]	; (8006938 <__errno+0x8>)
 8006932:	6818      	ldr	r0, [r3, #0]
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	2000009c 	.word	0x2000009c

0800693c <__libc_init_array>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	4d0d      	ldr	r5, [pc, #52]	; (8006974 <__libc_init_array+0x38>)
 8006940:	4c0d      	ldr	r4, [pc, #52]	; (8006978 <__libc_init_array+0x3c>)
 8006942:	1b64      	subs	r4, r4, r5
 8006944:	10a4      	asrs	r4, r4, #2
 8006946:	2600      	movs	r6, #0
 8006948:	42a6      	cmp	r6, r4
 800694a:	d109      	bne.n	8006960 <__libc_init_array+0x24>
 800694c:	4d0b      	ldr	r5, [pc, #44]	; (800697c <__libc_init_array+0x40>)
 800694e:	4c0c      	ldr	r4, [pc, #48]	; (8006980 <__libc_init_array+0x44>)
 8006950:	f000 f928 	bl	8006ba4 <_init>
 8006954:	1b64      	subs	r4, r4, r5
 8006956:	10a4      	asrs	r4, r4, #2
 8006958:	2600      	movs	r6, #0
 800695a:	42a6      	cmp	r6, r4
 800695c:	d105      	bne.n	800696a <__libc_init_array+0x2e>
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	f855 3b04 	ldr.w	r3, [r5], #4
 8006964:	4798      	blx	r3
 8006966:	3601      	adds	r6, #1
 8006968:	e7ee      	b.n	8006948 <__libc_init_array+0xc>
 800696a:	f855 3b04 	ldr.w	r3, [r5], #4
 800696e:	4798      	blx	r3
 8006970:	3601      	adds	r6, #1
 8006972:	e7f2      	b.n	800695a <__libc_init_array+0x1e>
 8006974:	080074cc 	.word	0x080074cc
 8006978:	080074cc 	.word	0x080074cc
 800697c:	080074cc 	.word	0x080074cc
 8006980:	080074d0 	.word	0x080074d0

08006984 <malloc>:
 8006984:	4b02      	ldr	r3, [pc, #8]	; (8006990 <malloc+0xc>)
 8006986:	4601      	mov	r1, r0
 8006988:	6818      	ldr	r0, [r3, #0]
 800698a:	f000 b863 	b.w	8006a54 <_malloc_r>
 800698e:	bf00      	nop
 8006990:	2000009c 	.word	0x2000009c

08006994 <free>:
 8006994:	4b02      	ldr	r3, [pc, #8]	; (80069a0 <free+0xc>)
 8006996:	4601      	mov	r1, r0
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	f000 b80b 	b.w	80069b4 <_free_r>
 800699e:	bf00      	nop
 80069a0:	2000009c 	.word	0x2000009c

080069a4 <memset>:
 80069a4:	4402      	add	r2, r0
 80069a6:	4603      	mov	r3, r0
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d100      	bne.n	80069ae <memset+0xa>
 80069ac:	4770      	bx	lr
 80069ae:	f803 1b01 	strb.w	r1, [r3], #1
 80069b2:	e7f9      	b.n	80069a8 <memset+0x4>

080069b4 <_free_r>:
 80069b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069b6:	2900      	cmp	r1, #0
 80069b8:	d048      	beq.n	8006a4c <_free_r+0x98>
 80069ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069be:	9001      	str	r0, [sp, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f1a1 0404 	sub.w	r4, r1, #4
 80069c6:	bfb8      	it	lt
 80069c8:	18e4      	addlt	r4, r4, r3
 80069ca:	f000 f8dd 	bl	8006b88 <__malloc_lock>
 80069ce:	4a20      	ldr	r2, [pc, #128]	; (8006a50 <_free_r+0x9c>)
 80069d0:	9801      	ldr	r0, [sp, #4]
 80069d2:	6813      	ldr	r3, [r2, #0]
 80069d4:	4615      	mov	r5, r2
 80069d6:	b933      	cbnz	r3, 80069e6 <_free_r+0x32>
 80069d8:	6063      	str	r3, [r4, #4]
 80069da:	6014      	str	r4, [r2, #0]
 80069dc:	b003      	add	sp, #12
 80069de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069e2:	f000 b8d7 	b.w	8006b94 <__malloc_unlock>
 80069e6:	42a3      	cmp	r3, r4
 80069e8:	d90b      	bls.n	8006a02 <_free_r+0x4e>
 80069ea:	6821      	ldr	r1, [r4, #0]
 80069ec:	1862      	adds	r2, r4, r1
 80069ee:	4293      	cmp	r3, r2
 80069f0:	bf04      	itt	eq
 80069f2:	681a      	ldreq	r2, [r3, #0]
 80069f4:	685b      	ldreq	r3, [r3, #4]
 80069f6:	6063      	str	r3, [r4, #4]
 80069f8:	bf04      	itt	eq
 80069fa:	1852      	addeq	r2, r2, r1
 80069fc:	6022      	streq	r2, [r4, #0]
 80069fe:	602c      	str	r4, [r5, #0]
 8006a00:	e7ec      	b.n	80069dc <_free_r+0x28>
 8006a02:	461a      	mov	r2, r3
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	b10b      	cbz	r3, 8006a0c <_free_r+0x58>
 8006a08:	42a3      	cmp	r3, r4
 8006a0a:	d9fa      	bls.n	8006a02 <_free_r+0x4e>
 8006a0c:	6811      	ldr	r1, [r2, #0]
 8006a0e:	1855      	adds	r5, r2, r1
 8006a10:	42a5      	cmp	r5, r4
 8006a12:	d10b      	bne.n	8006a2c <_free_r+0x78>
 8006a14:	6824      	ldr	r4, [r4, #0]
 8006a16:	4421      	add	r1, r4
 8006a18:	1854      	adds	r4, r2, r1
 8006a1a:	42a3      	cmp	r3, r4
 8006a1c:	6011      	str	r1, [r2, #0]
 8006a1e:	d1dd      	bne.n	80069dc <_free_r+0x28>
 8006a20:	681c      	ldr	r4, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	6053      	str	r3, [r2, #4]
 8006a26:	4421      	add	r1, r4
 8006a28:	6011      	str	r1, [r2, #0]
 8006a2a:	e7d7      	b.n	80069dc <_free_r+0x28>
 8006a2c:	d902      	bls.n	8006a34 <_free_r+0x80>
 8006a2e:	230c      	movs	r3, #12
 8006a30:	6003      	str	r3, [r0, #0]
 8006a32:	e7d3      	b.n	80069dc <_free_r+0x28>
 8006a34:	6825      	ldr	r5, [r4, #0]
 8006a36:	1961      	adds	r1, r4, r5
 8006a38:	428b      	cmp	r3, r1
 8006a3a:	bf04      	itt	eq
 8006a3c:	6819      	ldreq	r1, [r3, #0]
 8006a3e:	685b      	ldreq	r3, [r3, #4]
 8006a40:	6063      	str	r3, [r4, #4]
 8006a42:	bf04      	itt	eq
 8006a44:	1949      	addeq	r1, r1, r5
 8006a46:	6021      	streq	r1, [r4, #0]
 8006a48:	6054      	str	r4, [r2, #4]
 8006a4a:	e7c7      	b.n	80069dc <_free_r+0x28>
 8006a4c:	b003      	add	sp, #12
 8006a4e:	bd30      	pop	{r4, r5, pc}
 8006a50:	200005f8 	.word	0x200005f8

08006a54 <_malloc_r>:
 8006a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a56:	1ccd      	adds	r5, r1, #3
 8006a58:	f025 0503 	bic.w	r5, r5, #3
 8006a5c:	3508      	adds	r5, #8
 8006a5e:	2d0c      	cmp	r5, #12
 8006a60:	bf38      	it	cc
 8006a62:	250c      	movcc	r5, #12
 8006a64:	2d00      	cmp	r5, #0
 8006a66:	4606      	mov	r6, r0
 8006a68:	db01      	blt.n	8006a6e <_malloc_r+0x1a>
 8006a6a:	42a9      	cmp	r1, r5
 8006a6c:	d903      	bls.n	8006a76 <_malloc_r+0x22>
 8006a6e:	230c      	movs	r3, #12
 8006a70:	6033      	str	r3, [r6, #0]
 8006a72:	2000      	movs	r0, #0
 8006a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a76:	f000 f887 	bl	8006b88 <__malloc_lock>
 8006a7a:	4921      	ldr	r1, [pc, #132]	; (8006b00 <_malloc_r+0xac>)
 8006a7c:	680a      	ldr	r2, [r1, #0]
 8006a7e:	4614      	mov	r4, r2
 8006a80:	b99c      	cbnz	r4, 8006aaa <_malloc_r+0x56>
 8006a82:	4f20      	ldr	r7, [pc, #128]	; (8006b04 <_malloc_r+0xb0>)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	b923      	cbnz	r3, 8006a92 <_malloc_r+0x3e>
 8006a88:	4621      	mov	r1, r4
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	f000 f83c 	bl	8006b08 <_sbrk_r>
 8006a90:	6038      	str	r0, [r7, #0]
 8006a92:	4629      	mov	r1, r5
 8006a94:	4630      	mov	r0, r6
 8006a96:	f000 f837 	bl	8006b08 <_sbrk_r>
 8006a9a:	1c43      	adds	r3, r0, #1
 8006a9c:	d123      	bne.n	8006ae6 <_malloc_r+0x92>
 8006a9e:	230c      	movs	r3, #12
 8006aa0:	6033      	str	r3, [r6, #0]
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	f000 f876 	bl	8006b94 <__malloc_unlock>
 8006aa8:	e7e3      	b.n	8006a72 <_malloc_r+0x1e>
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	1b5b      	subs	r3, r3, r5
 8006aae:	d417      	bmi.n	8006ae0 <_malloc_r+0x8c>
 8006ab0:	2b0b      	cmp	r3, #11
 8006ab2:	d903      	bls.n	8006abc <_malloc_r+0x68>
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	441c      	add	r4, r3
 8006ab8:	6025      	str	r5, [r4, #0]
 8006aba:	e004      	b.n	8006ac6 <_malloc_r+0x72>
 8006abc:	6863      	ldr	r3, [r4, #4]
 8006abe:	42a2      	cmp	r2, r4
 8006ac0:	bf0c      	ite	eq
 8006ac2:	600b      	streq	r3, [r1, #0]
 8006ac4:	6053      	strne	r3, [r2, #4]
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f000 f864 	bl	8006b94 <__malloc_unlock>
 8006acc:	f104 000b 	add.w	r0, r4, #11
 8006ad0:	1d23      	adds	r3, r4, #4
 8006ad2:	f020 0007 	bic.w	r0, r0, #7
 8006ad6:	1ac2      	subs	r2, r0, r3
 8006ad8:	d0cc      	beq.n	8006a74 <_malloc_r+0x20>
 8006ada:	1a1b      	subs	r3, r3, r0
 8006adc:	50a3      	str	r3, [r4, r2]
 8006ade:	e7c9      	b.n	8006a74 <_malloc_r+0x20>
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	6864      	ldr	r4, [r4, #4]
 8006ae4:	e7cc      	b.n	8006a80 <_malloc_r+0x2c>
 8006ae6:	1cc4      	adds	r4, r0, #3
 8006ae8:	f024 0403 	bic.w	r4, r4, #3
 8006aec:	42a0      	cmp	r0, r4
 8006aee:	d0e3      	beq.n	8006ab8 <_malloc_r+0x64>
 8006af0:	1a21      	subs	r1, r4, r0
 8006af2:	4630      	mov	r0, r6
 8006af4:	f000 f808 	bl	8006b08 <_sbrk_r>
 8006af8:	3001      	adds	r0, #1
 8006afa:	d1dd      	bne.n	8006ab8 <_malloc_r+0x64>
 8006afc:	e7cf      	b.n	8006a9e <_malloc_r+0x4a>
 8006afe:	bf00      	nop
 8006b00:	200005f8 	.word	0x200005f8
 8006b04:	200005fc 	.word	0x200005fc

08006b08 <_sbrk_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	4d06      	ldr	r5, [pc, #24]	; (8006b24 <_sbrk_r+0x1c>)
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	4604      	mov	r4, r0
 8006b10:	4608      	mov	r0, r1
 8006b12:	602b      	str	r3, [r5, #0]
 8006b14:	f7fc fe98 	bl	8003848 <_sbrk>
 8006b18:	1c43      	adds	r3, r0, #1
 8006b1a:	d102      	bne.n	8006b22 <_sbrk_r+0x1a>
 8006b1c:	682b      	ldr	r3, [r5, #0]
 8006b1e:	b103      	cbz	r3, 8006b22 <_sbrk_r+0x1a>
 8006b20:	6023      	str	r3, [r4, #0]
 8006b22:	bd38      	pop	{r3, r4, r5, pc}
 8006b24:	20000604 	.word	0x20000604

08006b28 <strcasecmp>:
 8006b28:	b570      	push	{r4, r5, r6, lr}
 8006b2a:	4d0c      	ldr	r5, [pc, #48]	; (8006b5c <strcasecmp+0x34>)
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	462e      	mov	r6, r5
 8006b30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b34:	5d5a      	ldrb	r2, [r3, r5]
 8006b36:	f002 0203 	and.w	r2, r2, #3
 8006b3a:	2a01      	cmp	r2, #1
 8006b3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b40:	5cb0      	ldrb	r0, [r6, r2]
 8006b42:	f000 0003 	and.w	r0, r0, #3
 8006b46:	bf08      	it	eq
 8006b48:	3320      	addeq	r3, #32
 8006b4a:	2801      	cmp	r0, #1
 8006b4c:	bf08      	it	eq
 8006b4e:	3220      	addeq	r2, #32
 8006b50:	1a98      	subs	r0, r3, r2
 8006b52:	d101      	bne.n	8006b58 <strcasecmp+0x30>
 8006b54:	2a00      	cmp	r2, #0
 8006b56:	d1eb      	bne.n	8006b30 <strcasecmp+0x8>
 8006b58:	bd70      	pop	{r4, r5, r6, pc}
 8006b5a:	bf00      	nop
 8006b5c:	080073c1 	.word	0x080073c1

08006b60 <strncpy>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	3901      	subs	r1, #1
 8006b64:	4603      	mov	r3, r0
 8006b66:	b132      	cbz	r2, 8006b76 <strncpy+0x16>
 8006b68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006b6c:	f803 4b01 	strb.w	r4, [r3], #1
 8006b70:	3a01      	subs	r2, #1
 8006b72:	2c00      	cmp	r4, #0
 8006b74:	d1f7      	bne.n	8006b66 <strncpy+0x6>
 8006b76:	441a      	add	r2, r3
 8006b78:	2100      	movs	r1, #0
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d100      	bne.n	8006b80 <strncpy+0x20>
 8006b7e:	bd10      	pop	{r4, pc}
 8006b80:	f803 1b01 	strb.w	r1, [r3], #1
 8006b84:	e7f9      	b.n	8006b7a <strncpy+0x1a>
	...

08006b88 <__malloc_lock>:
 8006b88:	4801      	ldr	r0, [pc, #4]	; (8006b90 <__malloc_lock+0x8>)
 8006b8a:	f000 b809 	b.w	8006ba0 <__retarget_lock_acquire_recursive>
 8006b8e:	bf00      	nop
 8006b90:	2000060c 	.word	0x2000060c

08006b94 <__malloc_unlock>:
 8006b94:	4801      	ldr	r0, [pc, #4]	; (8006b9c <__malloc_unlock+0x8>)
 8006b96:	f000 b804 	b.w	8006ba2 <__retarget_lock_release_recursive>
 8006b9a:	bf00      	nop
 8006b9c:	2000060c 	.word	0x2000060c

08006ba0 <__retarget_lock_acquire_recursive>:
 8006ba0:	4770      	bx	lr

08006ba2 <__retarget_lock_release_recursive>:
 8006ba2:	4770      	bx	lr

08006ba4 <_init>:
 8006ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba6:	bf00      	nop
 8006ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006baa:	bc08      	pop	{r3}
 8006bac:	469e      	mov	lr, r3
 8006bae:	4770      	bx	lr

08006bb0 <_fini>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	bf00      	nop
 8006bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb6:	bc08      	pop	{r3}
 8006bb8:	469e      	mov	lr, r3
 8006bba:	4770      	bx	lr
