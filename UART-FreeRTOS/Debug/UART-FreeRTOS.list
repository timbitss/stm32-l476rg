
UART-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ef4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009cc  0800a088  0800a088  0001a088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa54  0800aa54  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa54  0800aa54  0001aa54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa5c  0800aa5c  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa5c  0800aa5c  0001aa5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa60  0800aa60  0001aa60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800aa64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fcc  20000104  0800ab68  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020d0  0800ab68  000220d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002435a  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004afa  00000000  00000000  0004448e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  00048f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d0  00000000  00000000  0004a9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c077  00000000  00000000  0004c2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc07  00000000  00000000  0007833f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b1ee  00000000  00000000  00095f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a1134  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072ec  00000000  00000000  001a1188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000104 	.word	0x20000104
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a06c 	.word	0x0800a06c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000108 	.word	0x20000108
 80001cc:	0800a06c 	.word	0x0800a06c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_drsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e8:	e002      	b.n	80001f0 <__adddf3>
 80001ea:	bf00      	nop

080001ec <__aeabi_dsub>:
 80001ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f0 <__adddf3>:
 80001f0:	b530      	push	{r4, r5, lr}
 80001f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fa:	ea94 0f05 	teq	r4, r5
 80001fe:	bf08      	it	eq
 8000200:	ea90 0f02 	teqeq	r0, r2
 8000204:	bf1f      	itttt	ne
 8000206:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000216:	f000 80e2 	beq.w	80003de <__adddf3+0x1ee>
 800021a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000222:	bfb8      	it	lt
 8000224:	426d      	neglt	r5, r5
 8000226:	dd0c      	ble.n	8000242 <__adddf3+0x52>
 8000228:	442c      	add	r4, r5
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	ea82 0000 	eor.w	r0, r2, r0
 8000236:	ea83 0101 	eor.w	r1, r3, r1
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	2d36      	cmp	r5, #54	; 0x36
 8000244:	bf88      	it	hi
 8000246:	bd30      	pophi	{r4, r5, pc}
 8000248:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800024c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000250:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x70>
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000264:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x84>
 800026e:	4252      	negs	r2, r2
 8000270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000274:	ea94 0f05 	teq	r4, r5
 8000278:	f000 80a7 	beq.w	80003ca <__adddf3+0x1da>
 800027c:	f1a4 0401 	sub.w	r4, r4, #1
 8000280:	f1d5 0e20 	rsbs	lr, r5, #32
 8000284:	db0d      	blt.n	80002a2 <__adddf3+0xb2>
 8000286:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028a:	fa22 f205 	lsr.w	r2, r2, r5
 800028e:	1880      	adds	r0, r0, r2
 8000290:	f141 0100 	adc.w	r1, r1, #0
 8000294:	fa03 f20e 	lsl.w	r2, r3, lr
 8000298:	1880      	adds	r0, r0, r2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	4159      	adcs	r1, r3
 80002a0:	e00e      	b.n	80002c0 <__adddf3+0xd0>
 80002a2:	f1a5 0520 	sub.w	r5, r5, #32
 80002a6:	f10e 0e20 	add.w	lr, lr, #32
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b0:	bf28      	it	cs
 80002b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	18c0      	adds	r0, r0, r3
 80002bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c4:	d507      	bpl.n	80002d6 <__adddf3+0xe6>
 80002c6:	f04f 0e00 	mov.w	lr, #0
 80002ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002da:	d31b      	bcc.n	8000314 <__adddf3+0x124>
 80002dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e0:	d30c      	bcc.n	80002fc <__adddf3+0x10c>
 80002e2:	0849      	lsrs	r1, r1, #1
 80002e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ec:	f104 0401 	add.w	r4, r4, #1
 80002f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f8:	f080 809a 	bcs.w	8000430 <__adddf3+0x240>
 80002fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000300:	bf08      	it	eq
 8000302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000306:	f150 0000 	adcs.w	r0, r0, #0
 800030a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030e:	ea41 0105 	orr.w	r1, r1, r5
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000318:	4140      	adcs	r0, r0
 800031a:	eb41 0101 	adc.w	r1, r1, r1
 800031e:	3c01      	subs	r4, #1
 8000320:	bf28      	it	cs
 8000322:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000326:	d2e9      	bcs.n	80002fc <__adddf3+0x10c>
 8000328:	f091 0f00 	teq	r1, #0
 800032c:	bf04      	itt	eq
 800032e:	4601      	moveq	r1, r0
 8000330:	2000      	moveq	r0, #0
 8000332:	fab1 f381 	clz	r3, r1
 8000336:	bf08      	it	eq
 8000338:	3320      	addeq	r3, #32
 800033a:	f1a3 030b 	sub.w	r3, r3, #11
 800033e:	f1b3 0220 	subs.w	r2, r3, #32
 8000342:	da0c      	bge.n	800035e <__adddf3+0x16e>
 8000344:	320c      	adds	r2, #12
 8000346:	dd08      	ble.n	800035a <__adddf3+0x16a>
 8000348:	f102 0c14 	add.w	ip, r2, #20
 800034c:	f1c2 020c 	rsb	r2, r2, #12
 8000350:	fa01 f00c 	lsl.w	r0, r1, ip
 8000354:	fa21 f102 	lsr.w	r1, r1, r2
 8000358:	e00c      	b.n	8000374 <__adddf3+0x184>
 800035a:	f102 0214 	add.w	r2, r2, #20
 800035e:	bfd8      	it	le
 8000360:	f1c2 0c20 	rsble	ip, r2, #32
 8000364:	fa01 f102 	lsl.w	r1, r1, r2
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	bfdc      	itt	le
 800036e:	ea41 010c 	orrle.w	r1, r1, ip
 8000372:	4090      	lslle	r0, r2
 8000374:	1ae4      	subs	r4, r4, r3
 8000376:	bfa2      	ittt	ge
 8000378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800037c:	4329      	orrge	r1, r5
 800037e:	bd30      	popge	{r4, r5, pc}
 8000380:	ea6f 0404 	mvn.w	r4, r4
 8000384:	3c1f      	subs	r4, #31
 8000386:	da1c      	bge.n	80003c2 <__adddf3+0x1d2>
 8000388:	340c      	adds	r4, #12
 800038a:	dc0e      	bgt.n	80003aa <__adddf3+0x1ba>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0220 	rsb	r2, r4, #32
 8000394:	fa20 f004 	lsr.w	r0, r0, r4
 8000398:	fa01 f302 	lsl.w	r3, r1, r2
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	fa21 f304 	lsr.w	r3, r1, r4
 80003a4:	ea45 0103 	orr.w	r1, r5, r3
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f1c4 040c 	rsb	r4, r4, #12
 80003ae:	f1c4 0220 	rsb	r2, r4, #32
 80003b2:	fa20 f002 	lsr.w	r0, r0, r2
 80003b6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ba:	ea40 0003 	orr.w	r0, r0, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	fa21 f004 	lsr.w	r0, r1, r4
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f094 0f00 	teq	r4, #0
 80003ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d2:	bf06      	itte	eq
 80003d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d8:	3401      	addeq	r4, #1
 80003da:	3d01      	subne	r5, #1
 80003dc:	e74e      	b.n	800027c <__adddf3+0x8c>
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf18      	it	ne
 80003e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e8:	d029      	beq.n	800043e <__adddf3+0x24e>
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	d005      	beq.n	8000402 <__adddf3+0x212>
 80003f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fa:	bf04      	itt	eq
 80003fc:	4619      	moveq	r1, r3
 80003fe:	4610      	moveq	r0, r2
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	ea91 0f03 	teq	r1, r3
 8000406:	bf1e      	ittt	ne
 8000408:	2100      	movne	r1, #0
 800040a:	2000      	movne	r0, #0
 800040c:	bd30      	popne	{r4, r5, pc}
 800040e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000412:	d105      	bne.n	8000420 <__adddf3+0x230>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	4149      	adcs	r1, r1
 8000418:	bf28      	it	cs
 800041a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000424:	bf3c      	itt	cc
 8000426:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042a:	bd30      	popcc	{r4, r5, pc}
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000430:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000434:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf1a      	itte	ne
 8000444:	4619      	movne	r1, r3
 8000446:	4610      	movne	r0, r2
 8000448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800044c:	bf1c      	itt	ne
 800044e:	460b      	movne	r3, r1
 8000450:	4602      	movne	r2, r0
 8000452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000456:	bf06      	itte	eq
 8000458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800045c:	ea91 0f03 	teqeq	r1, r3
 8000460:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	bf00      	nop

08000468 <__aeabi_ui2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047c:	f04f 0500 	mov.w	r5, #0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e750      	b.n	8000328 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_i2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a0:	bf48      	it	mi
 80004a2:	4240      	negmi	r0, r0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e73e      	b.n	8000328 <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_f2d>:
 80004ac:	0042      	lsls	r2, r0, #1
 80004ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ba:	bf1f      	itttt	ne
 80004bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c8:	4770      	bxne	lr
 80004ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ce:	bf08      	it	eq
 80004d0:	4770      	bxeq	lr
 80004d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d6:	bf04      	itt	eq
 80004d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e71c      	b.n	8000328 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aed8 	beq.w	80002d6 <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6bd      	b.n	80002d6 <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__gedf2>:
 8000980:	f04f 3cff 	mov.w	ip, #4294967295
 8000984:	e006      	b.n	8000994 <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__ledf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	e002      	b.n	8000994 <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__cmpdf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009aa:	d01b      	beq.n	80009e4 <__cmpdf2+0x54>
 80009ac:	b001      	add	sp, #4
 80009ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b2:	bf0c      	ite	eq
 80009b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b8:	ea91 0f03 	teqne	r1, r3
 80009bc:	bf02      	ittt	eq
 80009be:	ea90 0f02 	teqeq	r0, r2
 80009c2:	2000      	moveq	r0, #0
 80009c4:	4770      	bxeq	lr
 80009c6:	f110 0f00 	cmn.w	r0, #0
 80009ca:	ea91 0f03 	teq	r1, r3
 80009ce:	bf58      	it	pl
 80009d0:	4299      	cmppl	r1, r3
 80009d2:	bf08      	it	eq
 80009d4:	4290      	cmpeq	r0, r2
 80009d6:	bf2c      	ite	cs
 80009d8:	17d8      	asrcs	r0, r3, #31
 80009da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009de:	f040 0001 	orr.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	d102      	bne.n	80009f4 <__cmpdf2+0x64>
 80009ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f2:	d107      	bne.n	8000a04 <__cmpdf2+0x74>
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d1d6      	bne.n	80009ac <__cmpdf2+0x1c>
 80009fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a02:	d0d3      	beq.n	80009ac <__cmpdf2+0x1c>
 8000a04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_cdrcmple>:
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4662      	mov	r2, ip
 8000a12:	468c      	mov	ip, r1
 8000a14:	4619      	mov	r1, r3
 8000a16:	4663      	mov	r3, ip
 8000a18:	e000      	b.n	8000a1c <__aeabi_cdcmpeq>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdcmpeq>:
 8000a1c:	b501      	push	{r0, lr}
 8000a1e:	f7ff ffb7 	bl	8000990 <__cmpdf2>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	bf48      	it	mi
 8000a26:	f110 0f00 	cmnmi.w	r0, #0
 8000a2a:	bd01      	pop	{r0, pc}

08000a2c <__aeabi_dcmpeq>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff fff4 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a34:	bf0c      	ite	eq
 8000a36:	2001      	moveq	r0, #1
 8000a38:	2000      	movne	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmplt>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffea 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a48:	bf34      	ite	cc
 8000a4a:	2001      	movcc	r0, #1
 8000a4c:	2000      	movcs	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmple>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffe0 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpge>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffce 	bl	8000a0c <__aeabi_cdrcmple>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpgt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffc4 	bl	8000a0c <__aeabi_cdrcmple>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_d2iz>:
 8000a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a98:	d215      	bcs.n	8000ac6 <__aeabi_d2iz+0x36>
 8000a9a:	d511      	bpl.n	8000ac0 <__aeabi_d2iz+0x30>
 8000a9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa4:	d912      	bls.n	8000acc <__aeabi_d2iz+0x3c>
 8000aa6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aba:	bf18      	it	ne
 8000abc:	4240      	negne	r0, r0
 8000abe:	4770      	bx	lr
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aca:	d105      	bne.n	8000ad8 <__aeabi_d2iz+0x48>
 8000acc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	bf08      	it	eq
 8000ad2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_d2uiz>:
 8000ae0:	004a      	lsls	r2, r1, #1
 8000ae2:	d211      	bcs.n	8000b08 <__aeabi_d2uiz+0x28>
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d211      	bcs.n	8000b0e <__aeabi_d2uiz+0x2e>
 8000aea:	d50d      	bpl.n	8000b08 <__aeabi_d2uiz+0x28>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d40e      	bmi.n	8000b14 <__aeabi_d2uiz+0x34>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_d2uiz+0x3a>
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_uldivmod>:
 8000b20:	b953      	cbnz	r3, 8000b38 <__aeabi_uldivmod+0x18>
 8000b22:	b94a      	cbnz	r2, 8000b38 <__aeabi_uldivmod+0x18>
 8000b24:	2900      	cmp	r1, #0
 8000b26:	bf08      	it	eq
 8000b28:	2800      	cmpeq	r0, #0
 8000b2a:	bf1c      	itt	ne
 8000b2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b30:	f04f 30ff 	movne.w	r0, #4294967295
 8000b34:	f000 b96e 	b.w	8000e14 <__aeabi_idiv0>
 8000b38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b40:	f000 f806 	bl	8000b50 <__udivmoddi4>
 8000b44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b4c:	b004      	add	sp, #16
 8000b4e:	4770      	bx	lr

08000b50 <__udivmoddi4>:
 8000b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b54:	9d08      	ldr	r5, [sp, #32]
 8000b56:	4604      	mov	r4, r0
 8000b58:	468c      	mov	ip, r1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f040 8083 	bne.w	8000c66 <__udivmoddi4+0x116>
 8000b60:	428a      	cmp	r2, r1
 8000b62:	4617      	mov	r7, r2
 8000b64:	d947      	bls.n	8000bf6 <__udivmoddi4+0xa6>
 8000b66:	fab2 f282 	clz	r2, r2
 8000b6a:	b142      	cbz	r2, 8000b7e <__udivmoddi4+0x2e>
 8000b6c:	f1c2 0020 	rsb	r0, r2, #32
 8000b70:	fa24 f000 	lsr.w	r0, r4, r0
 8000b74:	4091      	lsls	r1, r2
 8000b76:	4097      	lsls	r7, r2
 8000b78:	ea40 0c01 	orr.w	ip, r0, r1
 8000b7c:	4094      	lsls	r4, r2
 8000b7e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b82:	0c23      	lsrs	r3, r4, #16
 8000b84:	fbbc f6f8 	udiv	r6, ip, r8
 8000b88:	fa1f fe87 	uxth.w	lr, r7
 8000b8c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b94:	fb06 f10e 	mul.w	r1, r6, lr
 8000b98:	4299      	cmp	r1, r3
 8000b9a:	d909      	bls.n	8000bb0 <__udivmoddi4+0x60>
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ba2:	f080 8119 	bcs.w	8000dd8 <__udivmoddi4+0x288>
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	f240 8116 	bls.w	8000dd8 <__udivmoddi4+0x288>
 8000bac:	3e02      	subs	r6, #2
 8000bae:	443b      	add	r3, r7
 8000bb0:	1a5b      	subs	r3, r3, r1
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d909      	bls.n	8000bdc <__udivmoddi4+0x8c>
 8000bc8:	193c      	adds	r4, r7, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	f080 8105 	bcs.w	8000ddc <__udivmoddi4+0x28c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f240 8102 	bls.w	8000ddc <__udivmoddi4+0x28c>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000be0:	eba4 040e 	sub.w	r4, r4, lr
 8000be4:	2600      	movs	r6, #0
 8000be6:	b11d      	cbz	r5, 8000bf0 <__udivmoddi4+0xa0>
 8000be8:	40d4      	lsrs	r4, r2
 8000bea:	2300      	movs	r3, #0
 8000bec:	e9c5 4300 	strd	r4, r3, [r5]
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	b902      	cbnz	r2, 8000bfa <__udivmoddi4+0xaa>
 8000bf8:	deff      	udf	#255	; 0xff
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	d150      	bne.n	8000ca4 <__udivmoddi4+0x154>
 8000c02:	1bcb      	subs	r3, r1, r7
 8000c04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c08:	fa1f f887 	uxth.w	r8, r7
 8000c0c:	2601      	movs	r6, #1
 8000c0e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c12:	0c21      	lsrs	r1, r4, #16
 8000c14:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c1c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c20:	428b      	cmp	r3, r1
 8000c22:	d907      	bls.n	8000c34 <__udivmoddi4+0xe4>
 8000c24:	1879      	adds	r1, r7, r1
 8000c26:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0xe2>
 8000c2c:	428b      	cmp	r3, r1
 8000c2e:	f200 80e9 	bhi.w	8000e04 <__udivmoddi4+0x2b4>
 8000c32:	4684      	mov	ip, r0
 8000c34:	1ac9      	subs	r1, r1, r3
 8000c36:	b2a3      	uxth	r3, r4
 8000c38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c3c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c40:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c44:	fb08 f800 	mul.w	r8, r8, r0
 8000c48:	45a0      	cmp	r8, r4
 8000c4a:	d907      	bls.n	8000c5c <__udivmoddi4+0x10c>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c52:	d202      	bcs.n	8000c5a <__udivmoddi4+0x10a>
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	f200 80d9 	bhi.w	8000e0c <__udivmoddi4+0x2bc>
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	eba4 0408 	sub.w	r4, r4, r8
 8000c60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c64:	e7bf      	b.n	8000be6 <__udivmoddi4+0x96>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d909      	bls.n	8000c7e <__udivmoddi4+0x12e>
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	f000 80b1 	beq.w	8000dd2 <__udivmoddi4+0x282>
 8000c70:	2600      	movs	r6, #0
 8000c72:	e9c5 0100 	strd	r0, r1, [r5]
 8000c76:	4630      	mov	r0, r6
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	fab3 f683 	clz	r6, r3
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d14a      	bne.n	8000d1c <__udivmoddi4+0x1cc>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0x140>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 80b8 	bhi.w	8000e00 <__udivmoddi4+0x2b0>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb61 0103 	sbc.w	r1, r1, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	468c      	mov	ip, r1
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d0a8      	beq.n	8000bf0 <__udivmoddi4+0xa0>
 8000c9e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ca2:	e7a5      	b.n	8000bf0 <__udivmoddi4+0xa0>
 8000ca4:	f1c2 0320 	rsb	r3, r2, #32
 8000ca8:	fa20 f603 	lsr.w	r6, r0, r3
 8000cac:	4097      	lsls	r7, r2
 8000cae:	fa01 f002 	lsl.w	r0, r1, r2
 8000cb2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb6:	40d9      	lsrs	r1, r3
 8000cb8:	4330      	orrs	r0, r6
 8000cba:	0c03      	lsrs	r3, r0, #16
 8000cbc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f108 	mul.w	r1, r6, r8
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x19c>
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cde:	f080 808d 	bcs.w	8000dfc <__udivmoddi4+0x2ac>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 808a 	bls.w	8000dfc <__udivmoddi4+0x2ac>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	443b      	add	r3, r7
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b281      	uxth	r1, r0
 8000cf0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb00 f308 	mul.w	r3, r0, r8
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x1c4>
 8000d04:	1879      	adds	r1, r7, r1
 8000d06:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d0a:	d273      	bcs.n	8000df4 <__udivmoddi4+0x2a4>
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d971      	bls.n	8000df4 <__udivmoddi4+0x2a4>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4439      	add	r1, r7
 8000d14:	1acb      	subs	r3, r1, r3
 8000d16:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d1a:	e778      	b.n	8000c0e <__udivmoddi4+0xbe>
 8000d1c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d20:	fa03 f406 	lsl.w	r4, r3, r6
 8000d24:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d28:	431c      	orrs	r4, r3
 8000d2a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d32:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d36:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d3a:	431f      	orrs	r7, r3
 8000d3c:	0c3b      	lsrs	r3, r7, #16
 8000d3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d42:	fa1f f884 	uxth.w	r8, r4
 8000d46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d4e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d52:	458a      	cmp	sl, r1
 8000d54:	fa02 f206 	lsl.w	r2, r2, r6
 8000d58:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x220>
 8000d5e:	1861      	adds	r1, r4, r1
 8000d60:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d64:	d248      	bcs.n	8000df8 <__udivmoddi4+0x2a8>
 8000d66:	458a      	cmp	sl, r1
 8000d68:	d946      	bls.n	8000df8 <__udivmoddi4+0x2a8>
 8000d6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6e:	4421      	add	r1, r4
 8000d70:	eba1 010a 	sub.w	r1, r1, sl
 8000d74:	b2bf      	uxth	r7, r7
 8000d76:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d7a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d82:	fb00 f808 	mul.w	r8, r0, r8
 8000d86:	45b8      	cmp	r8, r7
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x24a>
 8000d8a:	19e7      	adds	r7, r4, r7
 8000d8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d90:	d22e      	bcs.n	8000df0 <__udivmoddi4+0x2a0>
 8000d92:	45b8      	cmp	r8, r7
 8000d94:	d92c      	bls.n	8000df0 <__udivmoddi4+0x2a0>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4427      	add	r7, r4
 8000d9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9e:	eba7 0708 	sub.w	r7, r7, r8
 8000da2:	fba0 8902 	umull	r8, r9, r0, r2
 8000da6:	454f      	cmp	r7, r9
 8000da8:	46c6      	mov	lr, r8
 8000daa:	4649      	mov	r1, r9
 8000dac:	d31a      	bcc.n	8000de4 <__udivmoddi4+0x294>
 8000dae:	d017      	beq.n	8000de0 <__udivmoddi4+0x290>
 8000db0:	b15d      	cbz	r5, 8000dca <__udivmoddi4+0x27a>
 8000db2:	ebb3 020e 	subs.w	r2, r3, lr
 8000db6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dba:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dbe:	40f2      	lsrs	r2, r6
 8000dc0:	ea4c 0202 	orr.w	r2, ip, r2
 8000dc4:	40f7      	lsrs	r7, r6
 8000dc6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dca:	2600      	movs	r6, #0
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	462e      	mov	r6, r5
 8000dd4:	4628      	mov	r0, r5
 8000dd6:	e70b      	b.n	8000bf0 <__udivmoddi4+0xa0>
 8000dd8:	4606      	mov	r6, r0
 8000dda:	e6e9      	b.n	8000bb0 <__udivmoddi4+0x60>
 8000ddc:	4618      	mov	r0, r3
 8000dde:	e6fd      	b.n	8000bdc <__udivmoddi4+0x8c>
 8000de0:	4543      	cmp	r3, r8
 8000de2:	d2e5      	bcs.n	8000db0 <__udivmoddi4+0x260>
 8000de4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000de8:	eb69 0104 	sbc.w	r1, r9, r4
 8000dec:	3801      	subs	r0, #1
 8000dee:	e7df      	b.n	8000db0 <__udivmoddi4+0x260>
 8000df0:	4608      	mov	r0, r1
 8000df2:	e7d2      	b.n	8000d9a <__udivmoddi4+0x24a>
 8000df4:	4660      	mov	r0, ip
 8000df6:	e78d      	b.n	8000d14 <__udivmoddi4+0x1c4>
 8000df8:	4681      	mov	r9, r0
 8000dfa:	e7b9      	b.n	8000d70 <__udivmoddi4+0x220>
 8000dfc:	4666      	mov	r6, ip
 8000dfe:	e775      	b.n	8000cec <__udivmoddi4+0x19c>
 8000e00:	4630      	mov	r0, r6
 8000e02:	e74a      	b.n	8000c9a <__udivmoddi4+0x14a>
 8000e04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e08:	4439      	add	r1, r7
 8000e0a:	e713      	b.n	8000c34 <__udivmoddi4+0xe4>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	443c      	add	r4, r7
 8000e10:	e724      	b.n	8000c5c <__udivmoddi4+0x10c>
 8000e12:	bf00      	nop

08000e14 <__aeabi_idiv0>:
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <Active_ctor>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t Active_ctor(Active * const ao, EventHandler evt_handler)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
    if(evt_handler == NULL || ao == NULL)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <Active_ctor+0x16>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <Active_ctor+0x1a>
    {
        return MOD_ERR_ARG;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e003      	b.n	8000e3a <Active_ctor+0x22>
    }

    ao->evt_handler = evt_handler;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	609a      	str	r2, [r3, #8]
    return MOD_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <cmd_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t cmd_init(void)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af02      	add	r7, sp, #8
	Active_ctor((Active *)&cmd_ao, (EventHandler)&Cmd_Event_Handler);  // Call base active object constructor.
 8000e4e:	4919      	ldr	r1, [pc, #100]	; (8000eb4 <cmd_init+0x6c>)
 8000e50:	4819      	ldr	r0, [pc, #100]	; (8000eb8 <cmd_init+0x70>)
 8000e52:	f7ff ffe1 	bl	8000e18 <Active_ctor>
	cmd_base = &(cmd_ao.base);
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <cmd_init+0x74>)
 8000e58:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <cmd_init+0x70>)
 8000e5a:	601a      	str	r2, [r3, #0]
	memset(cmd_ao.cmd_buf, 0, CONSOLE_CMD_BUF_SIZE); // Initialize private variables.
 8000e5c:	2228      	movs	r2, #40	; 0x28
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4817      	ldr	r0, [pc, #92]	; (8000ec0 <cmd_init+0x78>)
 8000e62:	f009 f803 	bl	8009e6c <memset>
	LOGI(TAG, "Initialized command active object.");
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <cmd_init+0x7c>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d01c      	beq.n	8000ea8 <cmd_init+0x60>
 8000e6e:	f003 fb0b 	bl	8004488 <HAL_GetTick>
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <cmd_init+0x80>)
 8000e76:	6818      	ldr	r0, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <cmd_init+0x84>)
 8000e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e80:	0999      	lsrs	r1, r3, #6
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <cmd_init+0x84>)
 8000e86:	fba3 4302 	umull	r4, r3, r3, r2
 8000e8a:	099b      	lsrs	r3, r3, #6
 8000e8c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8000e90:	fb04 f303 	mul.w	r3, r4, r3
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <cmd_init+0x80>)
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	9201      	str	r2, [sp, #4]
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <cmd_init+0x88>)
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	f000 fbea 	bl	800167c <log_printf>
    return MOD_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd90      	pop	{r4, r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	08001501 	.word	0x08001501
 8000eb8:	20000148 	.word	0x20000148
 8000ebc:	20002028 	.word	0x20002028
 8000ec0:	20000154 	.word	0x20000154
 8000ec4:	20000054 	.word	0x20000054
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	10624dd3 	.word	0x10624dd3
 8000ed0:	0800a08c 	.word	0x0800a08c

08000ed4 <cmd_register>:


mod_err_t cmd_register(const cmd_client_info *_client_info)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < CMD_MAX_CLIENTS; i++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e01d      	b.n	8000f1e <cmd_register+0x4a>
    {
        if (client_infos[i] == NULL || strcasecmp(client_infos[i]->client_name, _client_info->client_name) == 0)
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <cmd_register+0x5c>)
 8000ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00d      	beq.n	8000f0a <cmd_register+0x36>
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <cmd_register+0x5c>)
 8000ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4610      	mov	r0, r2
 8000f00:	f009 f876 	bl	8009ff0 <strcasecmp>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d106      	bne.n	8000f18 <cmd_register+0x44>
        {
            client_infos[i] = _client_info;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	4908      	ldr	r1, [pc, #32]	; (8000f30 <cmd_register+0x5c>)
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return MOD_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	e006      	b.n	8000f26 <cmd_register+0x52>
    for (uint8_t i = 0; i < CMD_MAX_CLIENTS; i++)
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	73fb      	strb	r3, [r7, #15]
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	2b09      	cmp	r3, #9
 8000f22:	d9de      	bls.n	8000ee2 <cmd_register+0xe>
        }
    }
    return MOD_ERR_RESOURCE;
 8000f24:	2303      	movs	r3, #3
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000120 	.word	0x20000120

08000f34 <cmd_execute>:
 *
 * This function parses the command line and then executes the command,
 * typically by running a command function handler for a client.
 */
static mod_err_t cmd_execute(char *cmd_line)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b095      	sub	sp, #84	; 0x54
 8000f38:	af04      	add	r7, sp, #16
 8000f3a:	6078      	str	r0, [r7, #4]
    LOGI(TAG, "Command received: %s", cmd_line);
 8000f3c:	4b30      	ldr	r3, [pc, #192]	; (8001000 <cmd_execute+0xcc>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d01e      	beq.n	8000f82 <cmd_execute+0x4e>
 8000f44:	f003 faa0 	bl	8004488 <HAL_GetTick>
 8000f48:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <cmd_execute+0xd0>)
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f50:	4a2d      	ldr	r2, [pc, #180]	; (8001008 <cmd_execute+0xd4>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	099c      	lsrs	r4, r3, #6
 8000f58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f5a:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <cmd_execute+0xd4>)
 8000f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8000f60:	099b      	lsrs	r3, r3, #6
 8000f62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f66:	fb01 f303 	mul.w	r3, r1, r3
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	4a25      	ldr	r2, [pc, #148]	; (8001004 <cmd_execute+0xd0>)
 8000f6e:	6812      	ldr	r2, [r2, #0]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	9102      	str	r1, [sp, #8]
 8000f74:	9201      	str	r2, [sp, #4]
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	4623      	mov	r3, r4
 8000f7a:	4a24      	ldr	r2, [pc, #144]	; (800100c <cmd_execute+0xd8>)
 8000f7c:	2103      	movs	r1, #3
 8000f7e:	f000 fb7d 	bl	800167c <log_printf>
    uint32_t num_tokens = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	637b      	str	r3, [r7, #52]	; 0x34
    const char *tokens[CMD_MAX_TOKENS] = {0}; // Store individual tokens as strings.
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	2228      	movs	r2, #40	; 0x28
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f008 ff6c 	bl	8009e6c <memset>

    /* Tokenize command line */
    mod_err_t err = tokenize(cmd_line, tokens, &num_tokens);
 8000f94:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f836 	bl	8001010 <tokenize>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (err)
 8000faa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <cmd_execute+0x84>
    {
        return err;
 8000fb2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000fb6:	e01f      	b.n	8000ff8 <cmd_execute+0xc4>
    }

    /* If there are no tokens, nothing to do. */
    if (num_tokens == 0)
 8000fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <cmd_execute+0x8e>
    {
        return MOD_OK;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e01a      	b.n	8000ff8 <cmd_execute+0xc4>
    }

    /* Handle help/? command. */
    err = help_handler(tokens);
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f8a6 	bl	8001118 <help_handler>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if(err != MOD_DID_NOTHING)
 8000fd2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000fd6:	2b09      	cmp	r3, #9
 8000fd8:	d002      	beq.n	8000fe0 <cmd_execute+0xac>
    {
        return err;
 8000fda:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000fde:	e00b      	b.n	8000ff8 <cmd_execute+0xc4>
    }

    err = client_command_handler(tokens, num_tokens);
 8000fe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f91f 	bl	800122c <client_command_handler>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    return err;
 8000ff4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3744      	adds	r7, #68	; 0x44
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	20000054 	.word	0x20000054
 8001004:	20000000 	.word	0x20000000
 8001008:	10624dd3 	.word	0x10624dd3
 800100c:	0800a1b0 	.word	0x0800a1b0

08001010 <tokenize>:
 * @return MOD_OK if successful, "MOD_ERR_" otherwise.
 * 
 * Tokens include name of client, command, and arguments passed.
 */
static mod_err_t tokenize(char *str_to_tokenize, const char **tokens, uint32_t *num_tokens)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b08b      	sub	sp, #44	; 0x2c
 8001014:	af02      	add	r7, sp, #8
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
    char *ptr = str_to_tokenize;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	61fb      	str	r3, [r7, #28]
    uint32_t token_count = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]

    /* Iterate through each token. */
    while (1)
    {
        /* Find start of token. */
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 8001024:	e002      	b.n	800102c <tokenize+0x1c>
        {
            ptr++;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3301      	adds	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d009      	beq.n	8001048 <tokenize+0x38>
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	4a32      	ldr	r2, [pc, #200]	; (8001104 <tokenize+0xf4>)
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1ee      	bne.n	8001026 <tokenize+0x16>
        }

        if (*ptr == '\0') // Found end of line.
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d04e      	beq.n	80010ee <tokenize+0xde>
        {
            break;
        }
        else
        {
            if (token_count >= CMD_MAX_TOKENS)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2b09      	cmp	r3, #9
 8001054:	d922      	bls.n	800109c <tokenize+0x8c>
            {
                LOGW(TAG, "Too many tokens");
 8001056:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <tokenize+0xf8>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d01c      	beq.n	8001098 <tokenize+0x88>
 800105e:	f003 fa13 	bl	8004488 <HAL_GetTick>
 8001062:	6178      	str	r0, [r7, #20]
 8001064:	4b29      	ldr	r3, [pc, #164]	; (800110c <tokenize+0xfc>)
 8001066:	6818      	ldr	r0, [r3, #0]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	4a29      	ldr	r2, [pc, #164]	; (8001110 <tokenize+0x100>)
 800106c:	fba2 2303 	umull	r2, r3, r2, r3
 8001070:	0999      	lsrs	r1, r3, #6
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4b26      	ldr	r3, [pc, #152]	; (8001110 <tokenize+0x100>)
 8001076:	fba3 4302 	umull	r4, r3, r3, r2
 800107a:	099b      	lsrs	r3, r3, #6
 800107c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001080:	fb04 f303 	mul.w	r3, r4, r3
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	4a21      	ldr	r2, [pc, #132]	; (800110c <tokenize+0xfc>)
 8001088:	6812      	ldr	r2, [r2, #0]
 800108a:	9201      	str	r2, [sp, #4]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	460b      	mov	r3, r1
 8001090:	4a20      	ldr	r2, [pc, #128]	; (8001114 <tokenize+0x104>)
 8001092:	2102      	movs	r1, #2
 8001094:	f000 faf2 	bl	800167c <log_printf>
                return MOD_ERR_BAD_CMD;
 8001098:	2304      	movs	r3, #4
 800109a:	e02f      	b.n	80010fc <tokenize+0xec>
            }
            else
            {   
                /* Record pointer to start of token, then find end of token. */
                tokens[token_count] = ptr;
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	4413      	add	r3, r2
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	601a      	str	r2, [r3, #0]
                ptr++;
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	3301      	adds	r3, #1
 80010ac:	61fb      	str	r3, [r7, #28]
                token_count++;
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	3301      	adds	r3, #1
 80010b2:	61bb      	str	r3, [r7, #24]
                while (*ptr != '\0' && !isspace((unsigned char)*ptr))
 80010b4:	e002      	b.n	80010bc <tokenize+0xac>
                {
                    ptr++;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
                while (*ptr != '\0' && !isspace((unsigned char)*ptr))
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d009      	beq.n	80010d8 <tokenize+0xc8>
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <tokenize+0xf4>)
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0ee      	beq.n	80010b6 <tokenize+0xa6>
                }
                if (*ptr != '\0')
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d008      	beq.n	80010f2 <tokenize+0xe2>
                {
                    *ptr = '\0'; // Terminate end of token.
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
                    ptr++;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3301      	adds	r3, #1
 80010ea:	61fb      	str	r3, [r7, #28]
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 80010ec:	e79e      	b.n	800102c <tokenize+0x1c>
            break;
 80010ee:	bf00      	nop
 80010f0:	e000      	b.n	80010f4 <tokenize+0xe4>
                }
                else
                {
                    break; // Found end of line ('\0'), no more tokens.
 80010f2:	bf00      	nop
                }
            }
        }
    }

    *num_tokens = token_count;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	601a      	str	r2, [r3, #0]
    return MOD_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3724      	adds	r7, #36	; 0x24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd90      	pop	{r4, r7, pc}
 8001104:	0800a950 	.word	0x0800a950
 8001108:	20000054 	.word	0x20000054
 800110c:	20000000 	.word	0x20000000
 8001110:	10624dd3 	.word	0x10624dd3
 8001114:	0800a1e0 	.word	0x0800a1e0

08001118 <help_handler>:
 *         otherwise a "MOD_ERR" value.
 * 
 * Iterates through each client infos 
 */
static mod_err_t help_handler(const char** tokens)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    if (strcasecmp("help", tokens[0]) == 0 || strcasecmp("?", tokens[0]) == 0)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	4837      	ldr	r0, [pc, #220]	; (8001204 <help_handler+0xec>)
 8001128:	f008 ff62 	bl	8009ff0 <strcasecmp>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d008      	beq.n	8001144 <help_handler+0x2c>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	4833      	ldr	r0, [pc, #204]	; (8001208 <help_handler+0xf0>)
 800113a:	f008 ff59 	bl	8009ff0 <strcasecmp>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d159      	bne.n	80011f8 <help_handler+0xe0>
    {
        /* Iterate through commands of each client. */
        for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001144:	2300      	movs	r3, #0
 8001146:	75fb      	strb	r3, [r7, #23]
 8001148:	e04b      	b.n	80011e2 <help_handler+0xca>
        {
            const cmd_client_info *ci = client_infos[i];
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	4a2f      	ldr	r2, [pc, #188]	; (800120c <help_handler+0xf4>)
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	613b      	str	r3, [r7, #16]

            LOG("%s (", ci->client_name);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	482d      	ldr	r0, [pc, #180]	; (8001210 <help_handler+0xf8>)
 800115c:	f002 fca8 	bl	8003ab0 <printf_>

            if (ci->num_u16_pms > 0 && ci->num_cmds == 0)
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d007      	beq.n	8001178 <help_handler+0x60>
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d103      	bne.n	8001178 <help_handler+0x60>
			{
                /* If client provided pm info only, display pm command. */
				LOG("pm)\r\n");
 8001170:	4828      	ldr	r0, [pc, #160]	; (8001214 <help_handler+0xfc>)
 8001172:	f002 fc9d 	bl	8003ab0 <printf_>
				continue;
 8001176:	e031      	b.n	80011dc <help_handler+0xc4>
			}
            else if(ci->num_cmds == 0)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d02c      	beq.n	80011da <help_handler+0xc2>
            {
            	continue;
            }
            else
            {
            	uint8_t i2 = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	75bb      	strb	r3, [r7, #22]
            	for (i2 = 0; i2 < ci->num_cmds; i2++)
 8001184:	2300      	movs	r3, #0
 8001186:	75bb      	strb	r3, [r7, #22]
 8001188:	e017      	b.n	80011ba <help_handler+0xa2>
            	{
					const cmd_cmd_info* cci = &(ci->cmds[i2]);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	6899      	ldr	r1, [r3, #8]
 800118e:	7dba      	ldrb	r2, [r7, #22]
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	60fb      	str	r3, [r7, #12]
					LOG("%s%s", i2 == 0 ? "" : ", ", cci->cmd_name);
 800119c:	7dbb      	ldrb	r3, [r7, #22]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <help_handler+0x8e>
 80011a2:	491d      	ldr	r1, [pc, #116]	; (8001218 <help_handler+0x100>)
 80011a4:	e000      	b.n	80011a8 <help_handler+0x90>
 80011a6:	491d      	ldr	r1, [pc, #116]	; (800121c <help_handler+0x104>)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	481c      	ldr	r0, [pc, #112]	; (8001220 <help_handler+0x108>)
 80011b0:	f002 fc7e 	bl	8003ab0 <printf_>
            	for (i2 = 0; i2 < ci->num_cmds; i2++)
 80011b4:	7dbb      	ldrb	r3, [r7, #22]
 80011b6:	3301      	adds	r3, #1
 80011b8:	75bb      	strb	r3, [r7, #22]
 80011ba:	7dba      	ldrb	r2, [r7, #22]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d3e2      	bcc.n	800118a <help_handler+0x72>
            	}
              	if (ci->num_u16_pms > 0)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <help_handler+0xba>
				{
					LOG(", pm");
 80011cc:	4815      	ldr	r0, [pc, #84]	; (8001224 <help_handler+0x10c>)
 80011ce:	f002 fc6f 	bl	8003ab0 <printf_>
				}
              	LOG(")\r\n");
 80011d2:	4815      	ldr	r0, [pc, #84]	; (8001228 <help_handler+0x110>)
 80011d4:	f002 fc6c 	bl	8003ab0 <printf_>
 80011d8:	e000      	b.n	80011dc <help_handler+0xc4>
            	continue;
 80011da:	bf00      	nop
        for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
 80011de:	3301      	adds	r3, #1
 80011e0:	75fb      	strb	r3, [r7, #23]
 80011e2:	7dfb      	ldrb	r3, [r7, #23]
 80011e4:	4a09      	ldr	r2, [pc, #36]	; (800120c <help_handler+0xf4>)
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <help_handler+0xdc>
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	2b09      	cmp	r3, #9
 80011f2:	d9aa      	bls.n	800114a <help_handler+0x32>
            }
        }

        return MOD_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e000      	b.n	80011fa <help_handler+0xe2>
    }

    return MOD_DID_NOTHING; // Not a top-level help command.
 80011f8:	2309      	movs	r3, #9
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	0800a20c 	.word	0x0800a20c
 8001208:	0800a214 	.word	0x0800a214
 800120c:	20000120 	.word	0x20000120
 8001210:	0800a218 	.word	0x0800a218
 8001214:	0800a224 	.word	0x0800a224
 8001218:	0800a234 	.word	0x0800a234
 800121c:	0800a238 	.word	0x0800a238
 8001220:	0800a23c 	.word	0x0800a23c
 8001224:	0800a248 	.word	0x0800a248
 8001228:	0800a254 	.word	0x0800a254

0800122c <client_command_handler>:
 * @return MOD_OK if successful, 
 *         MOD_DID_NOTHING if not a client command, 
 *         otherwise a "MOD_ERR" value.
 */
static mod_err_t client_command_handler(const char** tokens, uint32_t num_tokens)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001236:	2300      	movs	r3, #0
 8001238:	77fb      	strb	r3, [r7, #31]
 800123a:	e11c      	b.n	8001476 <client_command_handler+0x24a>
    {
        const cmd_client_info* ci = client_infos[i];
 800123c:	7ffb      	ldrb	r3, [r7, #31]
 800123e:	4aa2      	ldr	r2, [pc, #648]	; (80014c8 <client_command_handler+0x29c>)
 8001240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001244:	617b      	str	r3, [r7, #20]

        /* Look for correct client first */
        if (strcasecmp(tokens[0], ci->client_name) != 0)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4619      	mov	r1, r3
 8001250:	4610      	mov	r0, r2
 8001252:	f008 fecd 	bl	8009ff0 <strcasecmp>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <client_command_handler+0x38>
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 800125c:	7ffb      	ldrb	r3, [r7, #31]
 800125e:	3301      	adds	r3, #1
 8001260:	77fb      	strb	r3, [r7, #31]
 8001262:	e108      	b.n	8001476 <client_command_handler+0x24a>
        {
            continue;
        }

        /* If there is no command with client, assume they want help. */
        if (num_tokens == 1)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d103      	bne.n	8001272 <client_command_handler+0x46>
        {
            tokens[1] = "help";
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3304      	adds	r3, #4
 800126e:	4a97      	ldr	r2, [pc, #604]	; (80014cc <client_command_handler+0x2a0>)
 8001270:	601a      	str	r2, [r3, #0]
        }

        /* Handle help command directly. */
        if (strcasecmp(tokens[1], "help") == 0 || strcasecmp(tokens[1], "?") == 0)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3304      	adds	r3, #4
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4994      	ldr	r1, [pc, #592]	; (80014cc <client_command_handler+0x2a0>)
 800127a:	4618      	mov	r0, r3
 800127c:	f008 feb8 	bl	8009ff0 <strcasecmp>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d009      	beq.n	800129a <client_command_handler+0x6e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3304      	adds	r3, #4
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4990      	ldr	r1, [pc, #576]	; (80014d0 <client_command_handler+0x2a4>)
 800128e:	4618      	mov	r0, r3
 8001290:	f008 feae 	bl	8009ff0 <strcasecmp>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d128      	bne.n	80012ec <client_command_handler+0xc0>
        {
        	/* Print out all commands associated with client */
            for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 800129a:	2300      	movs	r3, #0
 800129c:	77bb      	strb	r3, [r7, #30]
 800129e:	e014      	b.n	80012ca <client_command_handler+0x9e>
            {
                const cmd_cmd_info* cci = &(ci->cmds[i2]);
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	6899      	ldr	r1, [r3, #8]
 80012a4:	7fba      	ldrb	r2, [r7, #30]
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	440b      	add	r3, r1
 80012b0:	60fb      	str	r3, [r7, #12]
                LOG("%s %s: %s\r\n", ci->client_name, cci->cmd_name, cci->help);
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	6819      	ldr	r1, [r3, #0]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	4885      	ldr	r0, [pc, #532]	; (80014d4 <client_command_handler+0x2a8>)
 80012c0:	f002 fbf6 	bl	8003ab0 <printf_>
            for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 80012c4:	7fbb      	ldrb	r3, [r7, #30]
 80012c6:	3301      	adds	r3, #1
 80012c8:	77bb      	strb	r3, [r7, #30]
 80012ca:	7fba      	ldrb	r2, [r7, #30]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d3e5      	bcc.n	80012a0 <client_command_handler+0x74>
            }
            /* If client provided pm info, print help for pm command also. */
            if (ci->num_u16_pms > 0)
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <client_command_handler+0xbc>
            {
                LOG("%s pm: get or clear performance measurements, "
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	487d      	ldr	r0, [pc, #500]	; (80014d8 <client_command_handler+0x2ac>)
 80012e4:	f002 fbe4 	bl	8003ab0 <printf_>
                        "args: [clear] \r\n", ci->client_name);
            }

            return MOD_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	e0e8      	b.n	80014be <client_command_handler+0x292>
        }


        /* Handle pm command directly. */
        if (strcasecmp(tokens[1], "pm") == 0)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3304      	adds	r3, #4
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	497a      	ldr	r1, [pc, #488]	; (80014dc <client_command_handler+0x2b0>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f008 fe7b 	bl	8009ff0 <strcasecmp>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d150      	bne.n	80013a2 <client_command_handler+0x176>
        {
            if (ci->num_u16_pms > 0)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d04a      	beq.n	800139e <client_command_handler+0x172>
            {
                bool clear = (num_tokens >= 3 && strcasecmp(tokens[2], "clear") == 0);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d90b      	bls.n	8001326 <client_command_handler+0xfa>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3308      	adds	r3, #8
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4972      	ldr	r1, [pc, #456]	; (80014e0 <client_command_handler+0x2b4>)
 8001316:	4618      	mov	r0, r3
 8001318:	f008 fe6a 	bl	8009ff0 <strcasecmp>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <client_command_handler+0xfa>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <client_command_handler+0xfc>
 8001326:	2300      	movs	r3, #0
 8001328:	74fb      	strb	r3, [r7, #19]
 800132a:	7cfb      	ldrb	r3, [r7, #19]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	74fb      	strb	r3, [r7, #19]
                if (clear)
 8001332:	7cfb      	ldrb	r3, [r7, #19]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <client_command_handler+0x11a>
                {
                    LOG("Clearing %s performance measurements\r\n", ci->client_name);
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	4869      	ldr	r0, [pc, #420]	; (80014e4 <client_command_handler+0x2b8>)
 8001340:	f002 fbb6 	bl	8003ab0 <printf_>
 8001344:	e005      	b.n	8001352 <client_command_handler+0x126>
                }
                else
                {
                    LOG("%s pms:\r\n", ci->client_name);
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4619      	mov	r1, r3
 800134c:	4866      	ldr	r0, [pc, #408]	; (80014e8 <client_command_handler+0x2bc>)
 800134e:	f002 fbaf 	bl	8003ab0 <printf_>
                }
                for (uint8_t i2 = 0; i2 < ci->num_u16_pms; i2++)
 8001352:	2300      	movs	r3, #0
 8001354:	777b      	strb	r3, [r7, #29]
 8001356:	e01d      	b.n	8001394 <client_command_handler+0x168>
                {
                    if (clear)
 8001358:	7cfb      	ldrb	r3, [r7, #19]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d007      	beq.n	800136e <client_command_handler+0x142>
                    {
                        ci->u16_pms[i2] = 0;
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	691a      	ldr	r2, [r3, #16]
 8001362:	7f7b      	ldrb	r3, [r7, #29]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	2200      	movs	r2, #0
 800136a:	801a      	strh	r2, [r3, #0]
 800136c:	e00f      	b.n	800138e <client_command_handler+0x162>
                    }
                    else
                    {
                        LOG("%s: %d\r\n", ci->u16_pm_names[i2], ci->u16_pms[i2]);
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	695a      	ldr	r2, [r3, #20]
 8001372:	7f7b      	ldrb	r3, [r7, #29]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	6819      	ldr	r1, [r3, #0]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	691a      	ldr	r2, [r3, #16]
 800137e:	7f7b      	ldrb	r3, [r7, #29]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	4858      	ldr	r0, [pc, #352]	; (80014ec <client_command_handler+0x2c0>)
 800138a:	f002 fb91 	bl	8003ab0 <printf_>
                for (uint8_t i2 = 0; i2 < ci->num_u16_pms; i2++)
 800138e:	7f7b      	ldrb	r3, [r7, #29]
 8001390:	3301      	adds	r3, #1
 8001392:	777b      	strb	r3, [r7, #29]
 8001394:	7f7a      	ldrb	r2, [r7, #29]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	429a      	cmp	r2, r3
 800139c:	d3dc      	bcc.n	8001358 <client_command_handler+0x12c>
                    }
                }
            }

            return MOD_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e08d      	b.n	80014be <client_command_handler+0x292>
        }


        /* Look for command within client. */
        for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	773b      	strb	r3, [r7, #28]
 80013a6:	e056      	b.n	8001456 <client_command_handler+0x22a>
        {
            if (strcasecmp(tokens[1], ci->cmds[i2].cmd_name) == 0)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3304      	adds	r3, #4
 80013ac:	6818      	ldr	r0, [r3, #0]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	6899      	ldr	r1, [r3, #8]
 80013b2:	7f3a      	ldrb	r2, [r7, #28]
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	f008 fe15 	bl	8009ff0 <strcasecmp>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d141      	bne.n	8001450 <client_command_handler+0x224>
            {
                if(num_tokens == 3 && (strcasecmp(tokens[2], "help") == 0 || strcasecmp(tokens[2], "?") == 0))
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d12d      	bne.n	800142e <client_command_handler+0x202>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3308      	adds	r3, #8
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	493c      	ldr	r1, [pc, #240]	; (80014cc <client_command_handler+0x2a0>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f008 fe08 	bl	8009ff0 <strcasecmp>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d009      	beq.n	80013fa <client_command_handler+0x1ce>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3308      	adds	r3, #8
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4938      	ldr	r1, [pc, #224]	; (80014d0 <client_command_handler+0x2a4>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f008 fdfe 	bl	8009ff0 <strcasecmp>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d119      	bne.n	800142e <client_command_handler+0x202>
                {
                    LOG("%s %s: %s\r\n", ci->client_name, ci->cmds[i2].cmd_name, ci->cmds[i2].help);
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	6899      	ldr	r1, [r3, #8]
 8001402:	7f3a      	ldrb	r2, [r7, #28]
 8001404:	4613      	mov	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	6899      	ldr	r1, [r3, #8]
 8001414:	7f3a      	ldrb	r2, [r7, #28]
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	4622      	mov	r2, r4
 8001424:	4601      	mov	r1, r0
 8001426:	482b      	ldr	r0, [pc, #172]	; (80014d4 <client_command_handler+0x2a8>)
 8001428:	f002 fb42 	bl	8003ab0 <printf_>
 800142c:	e00e      	b.n	800144c <client_command_handler+0x220>
                }
                else 
                {
                    ci->cmds[i2].cb(num_tokens - 2, tokens + 2); // Ignore client and command tokens.
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	6899      	ldr	r1, [r3, #8]
 8001432:	7f3a      	ldrb	r2, [r7, #28]
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	1e90      	subs	r0, r2, #2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	3208      	adds	r2, #8
 8001448:	4611      	mov	r1, r2
 800144a:	4798      	blx	r3
                }
                return MOD_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	e036      	b.n	80014be <client_command_handler+0x292>
        for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 8001450:	7f3b      	ldrb	r3, [r7, #28]
 8001452:	3301      	adds	r3, #1
 8001454:	773b      	strb	r3, [r7, #28]
 8001456:	7f3a      	ldrb	r2, [r7, #28]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	429a      	cmp	r2, r3
 800145e:	d3a3      	bcc.n	80013a8 <client_command_handler+0x17c>
            }
        }

        LOG("No such command (%s %s)\r\n", tokens[0], tokens[1]);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6819      	ldr	r1, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3304      	adds	r3, #4
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	4820      	ldr	r0, [pc, #128]	; (80014f0 <client_command_handler+0x2c4>)
 800146e:	f002 fb1f 	bl	8003ab0 <printf_>
        return MOD_ERR_BAD_CMD;
 8001472:	2304      	movs	r3, #4
 8001474:	e023      	b.n	80014be <client_command_handler+0x292>
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001476:	7ffb      	ldrb	r3, [r7, #31]
 8001478:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <client_command_handler+0x29c>)
 800147a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <client_command_handler+0x25e>
 8001482:	7ffb      	ldrb	r3, [r7, #31]
 8001484:	2b09      	cmp	r3, #9
 8001486:	f67f aed9 	bls.w	800123c <client_command_handler+0x10>
    }

    /* Could not find client */
    LOG("No such command ");
 800148a:	481a      	ldr	r0, [pc, #104]	; (80014f4 <client_command_handler+0x2c8>)
 800148c:	f002 fb10 	bl	8003ab0 <printf_>
    for(uint8_t i = 0; i < num_tokens ; i++)
 8001490:	2300      	movs	r3, #0
 8001492:	76fb      	strb	r3, [r7, #27]
 8001494:	e00b      	b.n	80014ae <client_command_handler+0x282>
    {
        LOG("%s ", tokens[i]);
 8001496:	7efb      	ldrb	r3, [r7, #27]
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	4815      	ldr	r0, [pc, #84]	; (80014f8 <client_command_handler+0x2cc>)
 80014a4:	f002 fb04 	bl	8003ab0 <printf_>
    for(uint8_t i = 0; i < num_tokens ; i++)
 80014a8:	7efb      	ldrb	r3, [r7, #27]
 80014aa:	3301      	adds	r3, #1
 80014ac:	76fb      	strb	r3, [r7, #27]
 80014ae:	7efb      	ldrb	r3, [r7, #27]
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d8ef      	bhi.n	8001496 <client_command_handler+0x26a>
    }
    LOG("\r\n");
 80014b6:	4811      	ldr	r0, [pc, #68]	; (80014fc <client_command_handler+0x2d0>)
 80014b8:	f002 fafa 	bl	8003ab0 <printf_>
    return MOD_ERR_BAD_CMD; 
 80014bc:	2304      	movs	r3, #4
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd90      	pop	{r4, r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000120 	.word	0x20000120
 80014cc:	0800a20c 	.word	0x0800a20c
 80014d0:	0800a214 	.word	0x0800a214
 80014d4:	0800a260 	.word	0x0800a260
 80014d8:	0800a274 	.word	0x0800a274
 80014dc:	0800a2bc 	.word	0x0800a2bc
 80014e0:	0800a2c0 	.word	0x0800a2c0
 80014e4:	0800a2c8 	.word	0x0800a2c8
 80014e8:	0800a2f8 	.word	0x0800a2f8
 80014ec:	0800a30c 	.word	0x0800a30c
 80014f0:	0800a31c 	.word	0x0800a31c
 80014f4:	0800a340 	.word	0x0800a340
 80014f8:	0800a358 	.word	0x0800a358
 80014fc:	0800a364 	.word	0x0800a364

08001500 <Cmd_Event_Handler>:
 *
 * @param ao Command active object.
 * @param evt Command event object.
 */
static void Cmd_Event_Handler(Cmd_Active * const ao, Cmd_Event const * const evt)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b087      	sub	sp, #28
 8001504:	af02      	add	r7, sp, #8
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
	switch(evt->base.sig)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d02e      	beq.n	8001570 <Cmd_Event_Handler+0x70>
 8001512:	2b01      	cmp	r3, #1
 8001514:	d10a      	bne.n	800152c <Cmd_Event_Handler+0x2c>
	{
	case INIT_SIG:
		break;
	case CMD_RX_SIG:
		/* Copy command line to avoid race conditions. */
		strncpy(cmd_ao.cmd_buf, evt->cmd_line, CONSOLE_CMD_BUF_SIZE);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2228      	movs	r2, #40	; 0x28
 800151c:	4619      	mov	r1, r3
 800151e:	4818      	ldr	r0, [pc, #96]	; (8001580 <Cmd_Event_Handler+0x80>)
 8001520:	f008 fd82 	bl	800a028 <strncpy>
		cmd_execute(cmd_ao.cmd_buf);
 8001524:	4816      	ldr	r0, [pc, #88]	; (8001580 <Cmd_Event_Handler+0x80>)
 8001526:	f7ff fd05 	bl	8000f34 <cmd_execute>
		break;
 800152a:	e024      	b.n	8001576 <Cmd_Event_Handler+0x76>
	default:
		LOGW(TAG, "Unknown event signal");
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <Cmd_Event_Handler+0x84>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d01f      	beq.n	8001574 <Cmd_Event_Handler+0x74>
 8001534:	f002 ffa8 	bl	8004488 <HAL_GetTick>
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <Cmd_Event_Handler+0x88>)
 800153c:	6818      	ldr	r0, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4a12      	ldr	r2, [pc, #72]	; (800158c <Cmd_Event_Handler+0x8c>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	0999      	lsrs	r1, r3, #6
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <Cmd_Event_Handler+0x8c>)
 800154c:	fba3 4302 	umull	r4, r3, r3, r2
 8001550:	099b      	lsrs	r3, r3, #6
 8001552:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001556:	fb04 f303 	mul.w	r3, r4, r3
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <Cmd_Event_Handler+0x88>)
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	9201      	str	r2, [sp, #4]
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	460b      	mov	r3, r1
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <Cmd_Event_Handler+0x90>)
 8001568:	2102      	movs	r1, #2
 800156a:	f000 f887 	bl	800167c <log_printf>
		break;
 800156e:	e001      	b.n	8001574 <Cmd_Event_Handler+0x74>
		break;
 8001570:	bf00      	nop
 8001572:	e000      	b.n	8001576 <Cmd_Event_Handler+0x76>
		break;
 8001574:	bf00      	nop
	}
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bd90      	pop	{r4, r7, pc}
 800157e:	bf00      	nop
 8001580:	20000154 	.word	0x20000154
 8001584:	20000054 	.word	0x20000054
 8001588:	20000000 	.word	0x20000000
 800158c:	10624dd3 	.word	0x10624dd3
 8001590:	0800a370 	.word	0x0800a370

08001594 <console_init>:
 * @brief Initialize console module instance.
 *
 * @return MOD_OK for success.
 */
mod_err_t console_init(void)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b085      	sub	sp, #20
 8001598:	af02      	add	r7, sp, #8
    memset(&console, 0, sizeof(console));
 800159a:	2254      	movs	r2, #84	; 0x54
 800159c:	2100      	movs	r1, #0
 800159e:	4814      	ldr	r0, [pc, #80]	; (80015f0 <console_init+0x5c>)
 80015a0:	f008 fc64 	bl	8009e6c <memset>
    LOGI(TAG, "Initialized console.");
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <console_init+0x60>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d01c      	beq.n	80015e6 <console_init+0x52>
 80015ac:	f002 ff6c 	bl	8004488 <HAL_GetTick>
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <console_init+0x64>)
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a10      	ldr	r2, [pc, #64]	; (80015fc <console_init+0x68>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	0999      	lsrs	r1, r3, #6
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <console_init+0x68>)
 80015c4:	fba3 4302 	umull	r4, r3, r3, r2
 80015c8:	099b      	lsrs	r3, r3, #6
 80015ca:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80015ce:	fb04 f303 	mul.w	r3, r4, r3
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <console_init+0x64>)
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	9201      	str	r2, [sp, #4]
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	460b      	mov	r3, r1
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <console_init+0x6c>)
 80015e0:	2103      	movs	r1, #3
 80015e2:	f000 f84b 	bl	800167c <log_printf>
    return MOD_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}
 80015f0:	2000017c 	.word	0x2000017c
 80015f4:	20000054 	.word	0x20000054
 80015f8:	20000004 	.word	0x20000004
 80015fc:	10624dd3 	.word	0x10624dd3
 8001600:	0800a3a8 	.word	0x0800a3a8

08001604 <log_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t log_init(void)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b085      	sub	sp, #20
 8001608:	af02      	add	r7, sp, #8
    SLIST_INIT(&log_head); // Initialize linked list by setting head pointer to NULL
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <log_init+0x60>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
    LOGI(TAG, "Initialized log module");
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <log_init+0x64>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d01c      	beq.n	8001652 <log_init+0x4e>
 8001618:	f002 ff36 	bl	8004488 <HAL_GetTick>
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <log_init+0x68>)
 8001620:	6818      	ldr	r0, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a12      	ldr	r2, [pc, #72]	; (8001670 <log_init+0x6c>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	0999      	lsrs	r1, r3, #6
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <log_init+0x6c>)
 8001630:	fba3 4302 	umull	r4, r3, r3, r2
 8001634:	099b      	lsrs	r3, r3, #6
 8001636:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800163a:	fb04 f303 	mul.w	r3, r4, r3
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	4a0a      	ldr	r2, [pc, #40]	; (800166c <log_init+0x68>)
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	9201      	str	r2, [sp, #4]
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	460b      	mov	r3, r1
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <log_init+0x70>)
 800164c:	2103      	movs	r1, #3
 800164e:	f000 f815 	bl	800167c <log_printf>
    return cmd_register(&log_client_info);
 8001652:	4809      	ldr	r0, [pc, #36]	; (8001678 <log_init+0x74>)
 8001654:	f7ff fc3e 	bl	8000ed4 <cmd_register>
 8001658:	4603      	mov	r3, r0
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bd90      	pop	{r4, r7, pc}
 8001662:	bf00      	nop
 8001664:	200001d0 	.word	0x200001d0
 8001668:	20000054 	.word	0x20000054
 800166c:	20000050 	.word	0x20000050
 8001670:	10624dd3 	.word	0x10624dd3
 8001674:	0800a574 	.word	0x0800a574
 8001678:	20000038 	.word	0x20000038

0800167c <log_printf>:
{
    return _log_active;
}

void log_printf(const char* tag, log_level_t level, const char *fmt, ...)
{
 800167c:	b40c      	push	{r2, r3}
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	460b      	mov	r3, r1
 8001688:	70fb      	strb	r3, [r7, #3]
	log_level_t tag_level = get_log_level(tag);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 fab8 	bl	8001c00 <get_log_level>
 8001690:	4603      	mov	r3, r0
 8001692:	73fb      	strb	r3, [r7, #15]
	if(level > tag_level)
 8001694:	78fa      	ldrb	r2, [r7, #3]
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	429a      	cmp	r2, r3
 800169a:	d807      	bhi.n	80016ac <log_printf+0x30>
	{
		return;
	}
    va_list args;
    va_start(args, fmt);
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	60bb      	str	r3, [r7, #8]
    vprintf(fmt, args);
 80016a2:	68b9      	ldr	r1, [r7, #8]
 80016a4:	69b8      	ldr	r0, [r7, #24]
 80016a6:	f002 fa1f 	bl	8003ae8 <vprintf_>
 80016aa:	e000      	b.n	80016ae <log_printf+0x32>
		return;
 80016ac:	bf00      	nop
    va_end(args);
}
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016b6:	b002      	add	sp, #8
 80016b8:	4770      	bx	lr
	...

080016bc <log_level_str>:
 * @param level The log level as an integer.
 *
 * @return Log level as a string. Otherwise, "INVALID".
 */
static const char *log_level_str(int32_t level)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
    if (level < ARRAY_SIZE(log_level_names))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b05      	cmp	r3, #5
 80016c8:	d804      	bhi.n	80016d4 <log_level_str+0x18>
    {
        return log_level_names[level];
 80016ca:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <log_level_str+0x28>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d2:	e000      	b.n	80016d6 <log_level_str+0x1a>
    }
    return "INVALID";
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <log_level_str+0x2c>)
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008
 80016e8:	0800a5a8 	.word	0x0800a5a8

080016ec <log_level_int>:
 * @param level_name The log level as a string.
 *
 * @return Log level as an int, or -1 on error.
 */
static int32_t log_level_int(const char *level_name)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
    for (uint8_t level = 0; level < ARRAY_SIZE(log_level_names); level++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	e00f      	b.n	800171a <log_level_int+0x2e>
    {
        if (strcasecmp(level_name, log_level_names[level]) == 0)
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	4a0b      	ldr	r2, [pc, #44]	; (800172c <log_level_int+0x40>)
 80016fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001702:	4619      	mov	r1, r3
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f008 fc73 	bl	8009ff0 <strcasecmp>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <log_level_int+0x28>
        {
            return level;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	e007      	b.n	8001724 <log_level_int+0x38>
    for (uint8_t level = 0; level < ARRAY_SIZE(log_level_names); level++)
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	3301      	adds	r3, #1
 8001718:	73fb      	strb	r3, [r7, #15]
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	2b05      	cmp	r3, #5
 800171e:	d9ec      	bls.n	80016fa <log_level_int+0xe>
        }
    }

    return -1; // Log level not found.
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000008 	.word	0x20000008

08001730 <cmd_log_get>:
 * @return 0 if successful, 1 otherwise.
 *
 * Log levels include global log level and individual tag log levels that override global level.
 */
static uint32_t cmd_log_get(uint32_t argc, const char **argv)
{
 8001730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001734:	b08c      	sub	sp, #48	; 0x30
 8001736:	af04      	add	r7, sp, #16
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
    LOGI(TAG, "Global log level: (%s)", log_level_str(_global_log_level));
 800173c:	4b36      	ldr	r3, [pc, #216]	; (8001818 <cmd_log_get+0xe8>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d025      	beq.n	8001790 <cmd_log_get+0x60>
 8001744:	f002 fea0 	bl	8004488 <HAL_GetTick>
 8001748:	61b8      	str	r0, [r7, #24]
 800174a:	4b34      	ldr	r3, [pc, #208]	; (800181c <cmd_log_get+0xec>)
 800174c:	681e      	ldr	r6, [r3, #0]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	4a33      	ldr	r2, [pc, #204]	; (8001820 <cmd_log_get+0xf0>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	ea4f 1893 	mov.w	r8, r3, lsr #6
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4a30      	ldr	r2, [pc, #192]	; (8001820 <cmd_log_get+0xf0>)
 800175e:	fba2 1203 	umull	r1, r2, r2, r3
 8001762:	0994      	lsrs	r4, r2, #6
 8001764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001768:	fb02 f204 	mul.w	r2, r2, r4
 800176c:	1a9c      	subs	r4, r3, r2
 800176e:	4b2b      	ldr	r3, [pc, #172]	; (800181c <cmd_log_get+0xec>)
 8001770:	681d      	ldr	r5, [r3, #0]
 8001772:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <cmd_log_get+0xf4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ffa0 	bl	80016bc <log_level_str>
 800177c:	4603      	mov	r3, r0
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	9501      	str	r5, [sp, #4]
 8001782:	9400      	str	r4, [sp, #0]
 8001784:	4643      	mov	r3, r8
 8001786:	4a28      	ldr	r2, [pc, #160]	; (8001828 <cmd_log_get+0xf8>)
 8001788:	2103      	movs	r1, #3
 800178a:	4630      	mov	r0, r6
 800178c:	f7ff ff76 	bl	800167c <log_printf>

    if(!SLIST_EMPTY(&log_head))
 8001790:	4b26      	ldr	r3, [pc, #152]	; (800182c <cmd_log_get+0xfc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d039      	beq.n	800180c <cmd_log_get+0xdc>
    {
    	Log_entry *p = NULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
    	SLIST_FOREACH(p, &log_head, entries)
 800179c:	4b23      	ldr	r3, [pc, #140]	; (800182c <cmd_log_get+0xfc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	e030      	b.n	8001806 <cmd_log_get+0xd6>
    	{
    		LOGI(TAG, "%s log level: (%s)", p->tag, log_level_str(p->level));
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <cmd_log_get+0xe8>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d029      	beq.n	8001800 <cmd_log_get+0xd0>
 80017ac:	f002 fe6c 	bl	8004488 <HAL_GetTick>
 80017b0:	6178      	str	r0, [r7, #20]
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <cmd_log_get+0xec>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	4a19      	ldr	r2, [pc, #100]	; (8001820 <cmd_log_get+0xf0>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	ea4f 1893 	mov.w	r8, r3, lsr #6
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	4a16      	ldr	r2, [pc, #88]	; (8001820 <cmd_log_get+0xf0>)
 80017c8:	fba2 1203 	umull	r1, r2, r2, r3
 80017cc:	0994      	lsrs	r4, r2, #6
 80017ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017d2:	fb02 f204 	mul.w	r2, r2, r4
 80017d6:	1a9c      	subs	r4, r3, r2
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <cmd_log_get+0xec>)
 80017da:	681d      	ldr	r5, [r3, #0]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	1d5e      	adds	r6, r3, #5
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	791b      	ldrb	r3, [r3, #4]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff69 	bl	80016bc <log_level_str>
 80017ea:	4603      	mov	r3, r0
 80017ec:	9303      	str	r3, [sp, #12]
 80017ee:	9602      	str	r6, [sp, #8]
 80017f0:	9501      	str	r5, [sp, #4]
 80017f2:	9400      	str	r4, [sp, #0]
 80017f4:	4643      	mov	r3, r8
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <cmd_log_get+0x100>)
 80017f8:	2103      	movs	r1, #3
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ff3e 	bl	800167c <log_printf>
    	SLIST_FOREACH(p, &log_head, entries)
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1cb      	bne.n	80017a4 <cmd_log_get+0x74>
    	}
    }

    return 0;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3720      	adds	r7, #32
 8001812:	46bd      	mov	sp, r7
 8001814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001818:	20000054 	.word	0x20000054
 800181c:	20000050 	.word	0x20000050
 8001820:	10624dd3 	.word	0x10624dd3
 8001824:	20000058 	.word	0x20000058
 8001828:	0800a5b0 	.word	0x0800a5b0
 800182c:	200001d0 	.word	0x200001d0
 8001830:	0800a5e4 	.word	0x0800a5e4

08001834 <cmd_log_set>:
 * @return 0 if successful, 1 otherwise.
 *
 * TTYS command format: > log set <tag> <level>.
 */
static uint32_t cmd_log_set(uint32_t argc, const char **argv)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b08b      	sub	sp, #44	; 0x2c
 8001838:	af04      	add	r7, sp, #16
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
    if (argc != 2)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b02      	cmp	r3, #2
 8001842:	d022      	beq.n	800188a <cmd_log_set+0x56>
    {
        LOGW(TAG, "Missing log level arguments");
 8001844:	4b30      	ldr	r3, [pc, #192]	; (8001908 <cmd_log_set+0xd4>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01c      	beq.n	8001886 <cmd_log_set+0x52>
 800184c:	f002 fe1c 	bl	8004488 <HAL_GetTick>
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <cmd_log_set+0xd8>)
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4a2d      	ldr	r2, [pc, #180]	; (8001910 <cmd_log_set+0xdc>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	0999      	lsrs	r1, r3, #6
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <cmd_log_set+0xdc>)
 8001864:	fba3 4302 	umull	r4, r3, r3, r2
 8001868:	099b      	lsrs	r3, r3, #6
 800186a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800186e:	fb04 f303 	mul.w	r3, r4, r3
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	4a25      	ldr	r2, [pc, #148]	; (800190c <cmd_log_set+0xd8>)
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	9201      	str	r2, [sp, #4]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	460b      	mov	r3, r1
 800187e:	4a25      	ldr	r2, [pc, #148]	; (8001914 <cmd_log_set+0xe0>)
 8001880:	2102      	movs	r1, #2
 8001882:	f7ff fefb 	bl	800167c <log_printf>
        return 1; // Should include only 1 argument.
 8001886:	2301      	movs	r3, #1
 8001888:	e03a      	b.n	8001900 <cmd_log_set+0xcc>
    }
    else
    {
        int32_t new_log_level = log_level_int(argv[1]);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	3304      	adds	r3, #4
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff2b 	bl	80016ec <log_level_int>
 8001896:	6178      	str	r0, [r7, #20]
        if (new_log_level == -1)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189e:	d126      	bne.n	80018ee <cmd_log_set+0xba>
        {
            LOGW(TAG, "Log level (%s) not recognized", argv[1]);
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <cmd_log_set+0xd4>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d020      	beq.n	80018ea <cmd_log_set+0xb6>
 80018a8:	f002 fdee 	bl	8004488 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <cmd_log_set+0xd8>)
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4a16      	ldr	r2, [pc, #88]	; (8001910 <cmd_log_set+0xdc>)
 80018b6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ba:	099c      	lsrs	r4, r3, #6
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <cmd_log_set+0xdc>)
 80018c0:	fba3 1302 	umull	r1, r3, r3, r2
 80018c4:	099b      	lsrs	r3, r3, #6
 80018c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	4a0e      	ldr	r2, [pc, #56]	; (800190c <cmd_log_set+0xd8>)
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	6839      	ldr	r1, [r7, #0]
 80018d6:	3104      	adds	r1, #4
 80018d8:	6809      	ldr	r1, [r1, #0]
 80018da:	9102      	str	r1, [sp, #8]
 80018dc:	9201      	str	r2, [sp, #4]
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	4623      	mov	r3, r4
 80018e2:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <cmd_log_set+0xe4>)
 80018e4:	2102      	movs	r1, #2
 80018e6:	f7ff fec9 	bl	800167c <log_printf>
            return 1;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e008      	b.n	8001900 <cmd_log_set+0xcc>
        }
        else
        {	             // tag , level
            log_level_set(argv[0], new_log_level);				    
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f80f 	bl	800191c <log_level_set>
            return 0;
 80018fe:	2300      	movs	r3, #0
        }
    }
}
 8001900:	4618      	mov	r0, r3
 8001902:	371c      	adds	r7, #28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd90      	pop	{r4, r7, pc}
 8001908:	20000054 	.word	0x20000054
 800190c:	20000050 	.word	0x20000050
 8001910:	10624dd3 	.word	0x10624dd3
 8001914:	0800a614 	.word	0x0800a614
 8001918:	0800a64c 	.word	0x0800a64c

0800191c <log_level_set>:
 * @param level Desired log level.
 *
 * @note Wild-card tag resets log level of all tags to given value.
 */
static void log_level_set(const char* tag, log_level_t level)
{
 800191c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001920:	b090      	sub	sp, #64	; 0x40
 8001922:	af04      	add	r7, sp, #16
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	460b      	mov	r3, r1
 8001928:	72fb      	strb	r3, [r7, #11]
	Log_entry *p = NULL;
 800192a:	2300      	movs	r3, #0
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Set global log level and delete linked list containing tag entries. */
	if(strcmp("*", tag) == 0)
 800192e:	68f9      	ldr	r1, [r7, #12]
 8001930:	48a7      	ldr	r0, [pc, #668]	; (8001bd0 <log_level_set+0x2b4>)
 8001932:	f7fe fc4d 	bl	80001d0 <strcmp>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d165      	bne.n	8001a08 <log_level_set+0xec>
	{
		_global_log_level = level;
 800193c:	7afb      	ldrb	r3, [r7, #11]
 800193e:	4aa5      	ldr	r2, [pc, #660]	; (8001bd4 <log_level_set+0x2b8>)
 8001940:	6013      	str	r3, [r2, #0]

		LOGI(TAG, "Clearing list and cache");
 8001942:	4ba5      	ldr	r3, [pc, #660]	; (8001bd8 <log_level_set+0x2bc>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d028      	beq.n	800199c <log_level_set+0x80>
 800194a:	f002 fd9d 	bl	8004488 <HAL_GetTick>
 800194e:	6178      	str	r0, [r7, #20]
 8001950:	4ba2      	ldr	r3, [pc, #648]	; (8001bdc <log_level_set+0x2c0>)
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	4aa2      	ldr	r2, [pc, #648]	; (8001be0 <log_level_set+0x2c4>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	0999      	lsrs	r1, r3, #6
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4b9f      	ldr	r3, [pc, #636]	; (8001be0 <log_level_set+0x2c4>)
 8001962:	fba3 4302 	umull	r4, r3, r3, r2
 8001966:	099b      	lsrs	r3, r3, #6
 8001968:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800196c:	fb04 f303 	mul.w	r3, r4, r3
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	4a9a      	ldr	r2, [pc, #616]	; (8001bdc <log_level_set+0x2c0>)
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	9201      	str	r2, [sp, #4]
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	460b      	mov	r3, r1
 800197c:	4a99      	ldr	r2, [pc, #612]	; (8001be4 <log_level_set+0x2c8>)
 800197e:	2103      	movs	r1, #3
 8001980:	f7ff fe7c 	bl	800167c <log_printf>
		while (!SLIST_EMPTY(&log_head))
 8001984:	e00a      	b.n	800199c <log_level_set+0x80>
		{
		   p = SLIST_FIRST(&log_head);
 8001986:	4b98      	ldr	r3, [pc, #608]	; (8001be8 <log_level_set+0x2cc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
		   SLIST_REMOVE_HEAD(&log_head, entries);
 800198c:	4b96      	ldr	r3, [pc, #600]	; (8001be8 <log_level_set+0x2cc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a95      	ldr	r2, [pc, #596]	; (8001be8 <log_level_set+0x2cc>)
 8001994:	6013      	str	r3, [r2, #0]
		   free(p);
 8001996:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001998:	f008 fa52 	bl	8009e40 <free>
		while (!SLIST_EMPTY(&log_head))
 800199c:	4b92      	ldr	r3, [pc, #584]	; (8001be8 <log_level_set+0x2cc>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f0      	bne.n	8001986 <log_level_set+0x6a>
		}

		cache_state.entry_count = 0;
 80019a4:	4b91      	ldr	r3, [pc, #580]	; (8001bec <log_level_set+0x2d0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	605a      	str	r2, [r3, #4]
		cache_state.max_generation = 0;
 80019aa:	4b90      	ldr	r3, [pc, #576]	; (8001bec <log_level_set+0x2d0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

		LOGI(TAG, "Global log level set to (%s)", log_level_str(_global_log_level));
 80019b0:	4b89      	ldr	r3, [pc, #548]	; (8001bd8 <log_level_set+0x2bc>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 8103 	beq.w	8001bc0 <log_level_set+0x2a4>
 80019ba:	f002 fd65 	bl	8004488 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]
 80019c0:	4b86      	ldr	r3, [pc, #536]	; (8001bdc <log_level_set+0x2c0>)
 80019c2:	681e      	ldr	r6, [r3, #0]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4a86      	ldr	r2, [pc, #536]	; (8001be0 <log_level_set+0x2c4>)
 80019c8:	fba2 2303 	umull	r2, r3, r2, r3
 80019cc:	ea4f 1893 	mov.w	r8, r3, lsr #6
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4a83      	ldr	r2, [pc, #524]	; (8001be0 <log_level_set+0x2c4>)
 80019d4:	fba2 1203 	umull	r1, r2, r2, r3
 80019d8:	0994      	lsrs	r4, r2, #6
 80019da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019de:	fb02 f204 	mul.w	r2, r2, r4
 80019e2:	1a9c      	subs	r4, r3, r2
 80019e4:	4b7d      	ldr	r3, [pc, #500]	; (8001bdc <log_level_set+0x2c0>)
 80019e6:	681d      	ldr	r5, [r3, #0]
 80019e8:	4b7a      	ldr	r3, [pc, #488]	; (8001bd4 <log_level_set+0x2b8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fe65 	bl	80016bc <log_level_str>
 80019f2:	4603      	mov	r3, r0
 80019f4:	9302      	str	r3, [sp, #8]
 80019f6:	9501      	str	r5, [sp, #4]
 80019f8:	9400      	str	r4, [sp, #0]
 80019fa:	4643      	mov	r3, r8
 80019fc:	4a7c      	ldr	r2, [pc, #496]	; (8001bf0 <log_level_set+0x2d4>)
 80019fe:	2103      	movs	r1, #3
 8001a00:	4630      	mov	r0, r6
 8001a02:	f7ff fe3b 	bl	800167c <log_printf>
		return;
 8001a06:	e0db      	b.n	8001bc0 <log_level_set+0x2a4>
	}

	/* Check if tag is already saved in linked list. */
    SLIST_FOREACH(p, &log_head, entries)
 8001a08:	4b77      	ldr	r3, [pc, #476]	; (8001be8 <log_level_set+0x2cc>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a0e:	e03d      	b.n	8001a8c <log_level_set+0x170>
    {
        if (strcmp(p->tag, tag) == 0)
 8001a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a12:	3305      	adds	r3, #5
 8001a14:	68f9      	ldr	r1, [r7, #12]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fbda 	bl	80001d0 <strcmp>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d131      	bne.n	8001a86 <log_level_set+0x16a>
        {
            p->level = level;
 8001a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a24:	7afa      	ldrb	r2, [r7, #11]
 8001a26:	711a      	strb	r2, [r3, #4]
            LOGI(TAG, "%s log level set to (%s)", p->tag, log_level_str(p->level));
 8001a28:	4b6b      	ldr	r3, [pc, #428]	; (8001bd8 <log_level_set+0x2bc>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d031      	beq.n	8001a94 <log_level_set+0x178>
 8001a30:	f002 fd2a 	bl	8004488 <HAL_GetTick>
 8001a34:	6278      	str	r0, [r7, #36]	; 0x24
 8001a36:	4b69      	ldr	r3, [pc, #420]	; (8001bdc <log_level_set+0x2c0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	4a68      	ldr	r2, [pc, #416]	; (8001be0 <log_level_set+0x2c4>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	ea4f 1893 	mov.w	r8, r3, lsr #6
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	4a65      	ldr	r2, [pc, #404]	; (8001be0 <log_level_set+0x2c4>)
 8001a4c:	fba2 1203 	umull	r1, r2, r2, r3
 8001a50:	0994      	lsrs	r4, r2, #6
 8001a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a56:	fb02 f204 	mul.w	r2, r2, r4
 8001a5a:	1a9c      	subs	r4, r3, r2
 8001a5c:	4b5f      	ldr	r3, [pc, #380]	; (8001bdc <log_level_set+0x2c0>)
 8001a5e:	681d      	ldr	r5, [r3, #0]
 8001a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a62:	1d5e      	adds	r6, r3, #5
 8001a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a66:	791b      	ldrb	r3, [r3, #4]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fe27 	bl	80016bc <log_level_str>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	9303      	str	r3, [sp, #12]
 8001a72:	9602      	str	r6, [sp, #8]
 8001a74:	9501      	str	r5, [sp, #4]
 8001a76:	9400      	str	r4, [sp, #0]
 8001a78:	4643      	mov	r3, r8
 8001a7a:	4a5e      	ldr	r2, [pc, #376]	; (8001bf4 <log_level_set+0x2d8>)
 8001a7c:	2103      	movs	r1, #3
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fdfc 	bl	800167c <log_printf>
            break;
 8001a84:	e006      	b.n	8001a94 <log_level_set+0x178>
    SLIST_FOREACH(p, &log_head, entries)
 8001a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1be      	bne.n	8001a10 <log_level_set+0xf4>
 8001a92:	e000      	b.n	8001a96 <log_level_set+0x17a>
            break;
 8001a94:	bf00      	nop
        }
    }

    /* Tag not found in linked list, add new entry. */
    if(p == NULL)
 8001a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d169      	bne.n	8001b70 <log_level_set+0x254>
    {
		Log_entry *new_entry = (Log_entry *)malloc(sizeof(Log_entry));
 8001a9c:	2010      	movs	r0, #16
 8001a9e:	f008 f9c7 	bl	8009e30 <malloc>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	623b      	str	r3, [r7, #32]
		if(new_entry == NULL)
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d122      	bne.n	8001af2 <log_level_set+0x1d6>
		{
			LOGW(TAG, "Insufficient heap memory for new list entry.");
 8001aac:	4b4a      	ldr	r3, [pc, #296]	; (8001bd8 <log_level_set+0x2bc>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 8087 	beq.w	8001bc4 <log_level_set+0x2a8>
 8001ab6:	f002 fce7 	bl	8004488 <HAL_GetTick>
 8001aba:	61b8      	str	r0, [r7, #24]
 8001abc:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <log_level_set+0x2c0>)
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	4a47      	ldr	r2, [pc, #284]	; (8001be0 <log_level_set+0x2c4>)
 8001ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac8:	0999      	lsrs	r1, r3, #6
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4b44      	ldr	r3, [pc, #272]	; (8001be0 <log_level_set+0x2c4>)
 8001ace:	fba3 4302 	umull	r4, r3, r3, r2
 8001ad2:	099b      	lsrs	r3, r3, #6
 8001ad4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001ad8:	fb04 f303 	mul.w	r3, r4, r3
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	4a3f      	ldr	r2, [pc, #252]	; (8001bdc <log_level_set+0x2c0>)
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	9201      	str	r2, [sp, #4]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4a43      	ldr	r2, [pc, #268]	; (8001bf8 <log_level_set+0x2dc>)
 8001aea:	2102      	movs	r1, #2
 8001aec:	f7ff fdc6 	bl	800167c <log_printf>
			return;
 8001af0:	e068      	b.n	8001bc4 <log_level_set+0x2a8>
		}
		new_entry->level = level;
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	7afa      	ldrb	r2, [r7, #11]
 8001af6:	711a      	strb	r2, [r3, #4]
		strncpy(new_entry->tag, tag, sizeof(new_entry->tag));
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	3305      	adds	r3, #5
 8001afc:	220a      	movs	r2, #10
 8001afe:	68f9      	ldr	r1, [r7, #12]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f008 fa91 	bl	800a028 <strncpy>
		SLIST_INSERT_HEAD(&log_head, new_entry, entries);
 8001b06:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <log_level_set+0x2cc>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	4a36      	ldr	r2, [pc, #216]	; (8001be8 <log_level_set+0x2cc>)
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	6013      	str	r3, [r2, #0]
		LOGI(TAG, "Added tag (%s) to list with level (%s)", new_entry->tag, log_level_str(new_entry->level));
 8001b14:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <log_level_set+0x2bc>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d029      	beq.n	8001b70 <log_level_set+0x254>
 8001b1c:	f002 fcb4 	bl	8004488 <HAL_GetTick>
 8001b20:	61f8      	str	r0, [r7, #28]
 8001b22:	4b2e      	ldr	r3, [pc, #184]	; (8001bdc <log_level_set+0x2c0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	4a2d      	ldr	r2, [pc, #180]	; (8001be0 <log_level_set+0x2c4>)
 8001b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b30:	ea4f 1893 	mov.w	r8, r3, lsr #6
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	4a2a      	ldr	r2, [pc, #168]	; (8001be0 <log_level_set+0x2c4>)
 8001b38:	fba2 1203 	umull	r1, r2, r2, r3
 8001b3c:	0994      	lsrs	r4, r2, #6
 8001b3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b42:	fb02 f204 	mul.w	r2, r2, r4
 8001b46:	1a9c      	subs	r4, r3, r2
 8001b48:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <log_level_set+0x2c0>)
 8001b4a:	681d      	ldr	r5, [r3, #0]
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	1d5e      	adds	r6, r3, #5
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	791b      	ldrb	r3, [r3, #4]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fdb1 	bl	80016bc <log_level_str>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	9303      	str	r3, [sp, #12]
 8001b5e:	9602      	str	r6, [sp, #8]
 8001b60:	9501      	str	r5, [sp, #4]
 8001b62:	9400      	str	r4, [sp, #0]
 8001b64:	4643      	mov	r3, r8
 8001b66:	4a25      	ldr	r2, [pc, #148]	; (8001bfc <log_level_set+0x2e0>)
 8001b68:	2103      	movs	r1, #3
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff fd86 	bl	800167c <log_printf>
    }


	/* Update entry in cache if it exists.
     * search in the cache and update the entry it if exists */
	for (uint32_t i = 0; i < cache_state.entry_count; ++i)
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b74:	e01e      	b.n	8001bb4 <log_level_set+0x298>
	{
		if (strcmp(cache_state.cache[i].tag, tag) == 0)
 8001b76:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <log_level_set+0x2d0>)
 8001b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	68f9      	ldr	r1, [r7, #12]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fb23 	bl	80001d0 <strcmp>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10e      	bne.n	8001bae <log_level_set+0x292>
		{
			cache_state.cache[i].level = level;
 8001b90:	7afb      	ldrb	r3, [r7, #11]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	b2d9      	uxtb	r1, r3
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <log_level_set+0x2d0>)
 8001b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	78da      	ldrb	r2, [r3, #3]
 8001ba4:	f361 1247 	bfi	r2, r1, #5, #3
 8001ba8:	70da      	strb	r2, [r3, #3]
			break;
 8001baa:	bf00      	nop
		}
	}


	return;
 8001bac:	e00b      	b.n	8001bc6 <log_level_set+0x2aa>
	for (uint32_t i = 0; i < cache_state.entry_count; ++i)
 8001bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <log_level_set+0x2d0>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d3db      	bcc.n	8001b76 <log_level_set+0x25a>
	return;
 8001bbe:	e002      	b.n	8001bc6 <log_level_set+0x2aa>
		return;
 8001bc0:	bf00      	nop
 8001bc2:	e000      	b.n	8001bc6 <log_level_set+0x2aa>
			return;
 8001bc4:	bf00      	nop
}
 8001bc6:	3730      	adds	r7, #48	; 0x30
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bce:	bf00      	nop
 8001bd0:	0800a688 	.word	0x0800a688
 8001bd4:	20000058 	.word	0x20000058
 8001bd8:	20000054 	.word	0x20000054
 8001bdc:	20000050 	.word	0x20000050
 8001be0:	10624dd3 	.word	0x10624dd3
 8001be4:	0800a68c 	.word	0x0800a68c
 8001be8:	200001d0 	.word	0x200001d0
 8001bec:	200001d4 	.word	0x200001d4
 8001bf0:	0800a6c0 	.word	0x0800a6c0
 8001bf4:	0800a6f8 	.word	0x0800a6f8
 8001bf8:	0800a72c 	.word	0x0800a72c
 8001bfc:	0800a774 	.word	0x0800a774

08001c00 <get_log_level>:
 * @param tag Tag to find level of.
 *
 * @return Tag's log level or global log level if not found.
 */
static log_level_t get_log_level(const char *tag)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	log_level_t tag_lvl = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]
	if(!get_cached_log_level(tag, &tag_lvl))
 8001c0c:	f107 030f 	add.w	r3, r7, #15
 8001c10:	4619      	mov	r1, r3
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f822 	bl	8001c5c <get_cached_log_level>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f083 0301 	eor.w	r3, r3, #1
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d014      	beq.n	8001c4e <get_log_level+0x4e>
	{
		if(!get_uncached_log_level(tag, &tag_lvl))
 8001c24:	f107 030f 	add.w	r3, r7, #15
 8001c28:	4619      	mov	r1, r3
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f864 	bl	8001cf8 <get_uncached_log_level>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f083 0301 	eor.w	r3, r3, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <get_log_level+0x44>
		{
			/* Log level not found, default to global log level. */
			tag_lvl = _global_log_level;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <get_log_level+0x58>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	73fb      	strb	r3, [r7, #15]
		}

		/* Add to cache for faster access */
		log_add_cache(tag, tag_lvl);
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	4619      	mov	r1, r3
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f87d 	bl	8001d48 <log_add_cache>
	}

	return tag_lvl;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000058 	.word	0x20000058

08001c5c <get_cached_log_level>:
 * @param[out] level Log level corresponding to tag.
 * @return true Level found in cache.
 *         false Level not found in cache.
 */
static bool get_cached_log_level(const char *tag, log_level_t *level)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]

    /* Assumes tag stored as static variable */
	uint32_t i;
    for (i = 0; i < cache_state.entry_count; ++i)
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e00b      	b.n	8001c84 <get_cached_log_level+0x28>
    {
        if (cache_state.cache[i].tag == tag)
 8001c6c:	4a21      	ldr	r2, [pc, #132]	; (8001cf4 <get_cached_log_level+0x98>)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	3301      	adds	r3, #1
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d008      	beq.n	8001c90 <get_cached_log_level+0x34>
    for (i = 0; i < cache_state.entry_count; ++i)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3301      	adds	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <get_cached_log_level+0x98>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d3ee      	bcc.n	8001c6c <get_cached_log_level+0x10>
 8001c8e:	e000      	b.n	8001c92 <get_cached_log_level+0x36>
        {
            break;
 8001c90:	bf00      	nop
        }
    }
    
    /* Could not find log level */
    if (i == cache_state.entry_count)
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <get_cached_log_level+0x98>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d101      	bne.n	8001ca0 <get_cached_log_level+0x44>
    {
        return false;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e024      	b.n	8001cea <get_cached_log_level+0x8e>
    }

    /* Return level */
    *level = (log_level_t) cache_state.cache[i].level;
 8001ca0:	4a14      	ldr	r2, [pc, #80]	; (8001cf4 <get_cached_log_level+0x98>)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4413      	add	r3, r2
 8001caa:	78db      	ldrb	r3, [r3, #3]
 8001cac:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	701a      	strb	r2, [r3, #0]

    /* If cache is full, increment generation with each cache hit and heapify */
    if (cache_state.entry_count == TAG_CACHE_SIZE)
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <get_cached_log_level+0x98>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b1f      	cmp	r3, #31
 8001cbe:	d113      	bne.n	8001ce8 <get_cached_log_level+0x8c>
    {
        cache_state.cache[i].generation = cache_state.max_generation++;
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <get_cached_log_level+0x98>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	490b      	ldr	r1, [pc, #44]	; (8001cf4 <get_cached_log_level+0x98>)
 8001cc8:	600a      	str	r2, [r1, #0]
 8001cca:	f023 4060 	bic.w	r0, r3, #3758096384	; 0xe0000000
 8001cce:	4909      	ldr	r1, [pc, #36]	; (8001cf4 <get_cached_log_level+0x98>)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
 8001cd8:	f360 031c 	bfi	r3, r0, #0, #29
 8001cdc:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
        heap_bubble_down(i);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f882 	bl	8001dec <heap_bubble_down>
    }

    return true;
 8001ce8:	2301      	movs	r3, #1
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200001d4 	.word	0x200001d4

08001cf8 <get_uncached_log_level>:
 * @param[out] level Log level corresponding to tag.
 *
 * @return true if log level found, false otherwise.
 */
static bool get_uncached_log_level(const char * tag, log_level_t *level)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
    Log_entry *p = NULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]

	SLIST_FOREACH(p, &log_head, entries)
 8001d06:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <get_uncached_log_level+0x4c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	e011      	b.n	8001d32 <get_uncached_log_level+0x3a>
    {
        if (strcmp(p->tag, tag) == 0)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3305      	adds	r3, #5
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fa5b 	bl	80001d0 <strcmp>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d105      	bne.n	8001d2c <get_uncached_log_level+0x34>
        {
            *level = p->level;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	791a      	ldrb	r2, [r3, #4]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	701a      	strb	r2, [r3, #0]
            return true;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e006      	b.n	8001d3a <get_uncached_log_level+0x42>
	SLIST_FOREACH(p, &log_head, entries)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ea      	bne.n	8001d0e <get_uncached_log_level+0x16>
        }
    }

	return false;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200001d0 	.word	0x200001d0

08001d48 <log_add_cache>:
 * @param log_level Module's log level.
 *
 * Cache is implemented using a binary min-heap.
 */
static void log_add_cache(const char *tag, log_level_t log_level)
{
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	70fb      	strb	r3, [r7, #3]
	uint32_t generation = cache_state.max_generation++;
 8001d54:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <log_add_cache+0xa0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	4923      	ldr	r1, [pc, #140]	; (8001de8 <log_add_cache+0xa0>)
 8001d5c:	600a      	str	r2, [r1, #0]
 8001d5e:	61fb      	str	r3, [r7, #28]

    /* No need to sort since min-heap. */
    if (cache_state.entry_count < TAG_CACHE_SIZE)
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <log_add_cache+0xa0>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b1e      	cmp	r3, #30
 8001d66:	d824      	bhi.n	8001db2 <log_add_cache+0x6a>
    {
        cache_state.cache[cache_state.entry_count] = (Log_cached_entry) {
 8001d68:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <log_add_cache+0xa0>)
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f023 4560 	bic.w	r5, r3, #3758096384	; 0xe0000000
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	b2dc      	uxtb	r4, r3
 8001d7a:	481b      	ldr	r0, [pc, #108]	; (8001de8 <log_add_cache+0xa0>)
 8001d7c:	1c51      	adds	r1, r2, #1
 8001d7e:	f850 3031 	ldr.w	r3, [r0, r1, lsl #3]
 8001d82:	f365 031c 	bfi	r3, r5, #0, #29
 8001d86:	f840 3031 	str.w	r3, [r0, r1, lsl #3]
 8001d8a:	4917      	ldr	r1, [pc, #92]	; (8001de8 <log_add_cache+0xa0>)
 8001d8c:	1c53      	adds	r3, r2, #1
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	78d9      	ldrb	r1, [r3, #3]
 8001d94:	f364 1147 	bfi	r1, r4, #5, #3
 8001d98:	70d9      	strb	r1, [r3, #3]
 8001d9a:	4913      	ldr	r1, [pc, #76]	; (8001de8 <log_add_cache+0xa0>)
 8001d9c:	1c53      	adds	r3, r2, #1
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	440b      	add	r3, r1
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	605a      	str	r2, [r3, #4]
            .generation = generation,
            .level = log_level,
            .tag = tag
        };
        ++cache_state.entry_count;
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <log_add_cache+0xa0>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	3301      	adds	r3, #1
 8001dac:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <log_add_cache+0xa0>)
 8001dae:	6053      	str	r3, [r2, #4]
 8001db0:	e016      	b.n	8001de0 <log_add_cache+0x98>
    }

    // Cache is full, replace first element 
    // and do bubble-down sorting to restore
    // binary min-heap.
    cache_state.cache[0] = (Log_cached_entry) {
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f023 4060 	bic.w	r0, r3, #3758096384	; 0xe0000000
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	b2d9      	uxtb	r1, r3
 8001dc0:	4a09      	ldr	r2, [pc, #36]	; (8001de8 <log_add_cache+0xa0>)
 8001dc2:	6893      	ldr	r3, [r2, #8]
 8001dc4:	f360 031c 	bfi	r3, r0, #0, #29
 8001dc8:	6093      	str	r3, [r2, #8]
 8001dca:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <log_add_cache+0xa0>)
 8001dcc:	7ad3      	ldrb	r3, [r2, #11]
 8001dce:	f361 1347 	bfi	r3, r1, #5, #3
 8001dd2:	72d3      	strb	r3, [r2, #11]
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <log_add_cache+0xa0>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	60d3      	str	r3, [r2, #12]
        .tag = tag,
        .level = log_level,
        .generation = generation
    };
    heap_bubble_down(0);
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f000 f806 	bl	8001dec <heap_bubble_down>
}
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bdb0      	pop	{r4, r5, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200001d4 	.word	0x200001d4

08001dec <heap_bubble_down>:

static void heap_bubble_down(int index)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
    while (index < TAG_CACHE_SIZE / 2) 
 8001df4:	e021      	b.n	8001e3a <heap_bubble_down+0x4e>
    {
        uint32_t left_index = index * 2 + 1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	617b      	str	r3, [r7, #20]
        uint32_t right_index = left_index + 1;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	3301      	adds	r3, #1
 8001e02:	613b      	str	r3, [r7, #16]
        uint32_t next = (cache_state.cache[left_index].generation < cache_state.cache[right_index].generation) ? left_index : right_index;
 8001e04:	4a11      	ldr	r2, [pc, #68]	; (8001e4c <heap_bubble_down+0x60>)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e0e:	f3c3 021c 	ubfx	r2, r3, #0, #29
 8001e12:	490e      	ldr	r1, [pc, #56]	; (8001e4c <heap_bubble_down+0x60>)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	3301      	adds	r3, #1
 8001e18:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001e1c:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d201      	bcs.n	8001e28 <heap_bubble_down+0x3c>
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	e000      	b.n	8001e2a <heap_bubble_down+0x3e>
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	60fb      	str	r3, [r7, #12]
        heap_swap(index, next); // cache[index] always greater than cache[next]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68f9      	ldr	r1, [r7, #12]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f000 f80d 	bl	8001e50 <heap_swap>
        index = next;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	607b      	str	r3, [r7, #4]
    while (index < TAG_CACHE_SIZE / 2) 
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b0e      	cmp	r3, #14
 8001e3e:	ddda      	ble.n	8001df6 <heap_bubble_down+0xa>
    }
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200001d4 	.word	0x200001d4

08001e50 <heap_swap>:

static void heap_swap(uint32_t i, uint32_t j)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
    Log_cached_entry tmp = cache_state.cache[i];
 8001e5a:	4915      	ldr	r1, [pc, #84]	; (8001eb0 <heap_swap+0x60>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f107 0208 	add.w	r2, r7, #8
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	440b      	add	r3, r1
 8001e68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e6c:	e882 0003 	stmia.w	r2, {r0, r1}
    cache_state.cache[i] = cache_state.cache[j];
 8001e70:	480f      	ldr	r0, [pc, #60]	; (8001eb0 <heap_swap+0x60>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3301      	adds	r3, #1
 8001e76:	490e      	ldr	r1, [pc, #56]	; (8001eb0 <heap_swap+0x60>)
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	3201      	adds	r2, #1
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4403      	add	r3, r0
 8001e80:	00d2      	lsls	r2, r2, #3
 8001e82:	440a      	add	r2, r1
 8001e84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e88:	e883 0003 	stmia.w	r3, {r0, r1}
    cache_state.cache[j] = tmp;
 8001e8c:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <heap_swap+0x60>)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4413      	add	r3, r2
 8001e96:	f107 0208 	add.w	r2, r7, #8
 8001e9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e9e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	200001d4 	.word	0x200001d4

08001eb4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	601a      	str	r2, [r3, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f0c:	4907      	ldr	r1, [pc, #28]	; (8001f2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40021000 	.word	0x40021000

08001f30 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f3c:	4907      	ldr	r1, [pc, #28]	; (8001f5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	40021000 	.word	0x40021000

08001f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f66:	f002 fa5b 	bl	8004420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f6a:	f000 f831 	bl	8001fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f6e:	f000 f8f5 	bl	800215c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001f72:	f000 f8a3 	bl	80020bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_config_t uart_cfg = {.uart_reg_base = USART2, .irq_num = USART2_IRQn};
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <main+0x60>)
 8001f78:	463b      	mov	r3, r7
 8001f7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f7e:	e883 0003 	stmia.w	r3, {r0, r1}
  uart_init(&uart_cfg);
 8001f82:	463b      	mov	r3, r7
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 fff1 	bl	8003f6c <uart_init>
  console_init();
 8001f8a:	f7ff fb03 	bl	8001594 <console_init>
  cmd_init();
 8001f8e:	f7fe ff5b 	bl	8000e48 <cmd_init>
  log_init();
 8001f92:	f7ff fb37 	bl	8001604 <log_init>
  uart_start();
 8001f96:	f002 f851 	bl	800403c <uart_start>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2120      	movs	r1, #32
 8001f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa2:	f002 fd09 	bl	80049b8 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001fa6:	f005 f9c7 	bl	8007338 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001faa:	4a06      	ldr	r2, [pc, #24]	; (8001fc4 <main+0x64>)
 8001fac:	2100      	movs	r1, #0
 8001fae:	4806      	ldr	r0, [pc, #24]	; (8001fc8 <main+0x68>)
 8001fb0:	f005 fa0c 	bl	80073cc <osThreadNew>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <main+0x6c>)
 8001fb8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001fba:	f005 f9e1 	bl	8007380 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <main+0x5e>
 8001fc0:	0800a7c4 	.word	0x0800a7c4
 8001fc4:	0800a890 	.word	0x0800a890
 8001fc8:	0800222d 	.word	0x0800222d
 8001fcc:	2000202c 	.word	0x2000202c

08001fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b0b8      	sub	sp, #224	; 0xe0
 8001fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fd6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fda:	2244      	movs	r2, #68	; 0x44
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f007 ff44 	bl	8009e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	2288      	movs	r2, #136	; 0x88
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f007 ff36 	bl	8009e6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002000:	2302      	movs	r3, #2
 8002002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002006:	f44f 7380 	mov.w	r3, #256	; 0x100
 800200a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800200e:	2310      	movs	r3, #16
 8002010:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002014:	2302      	movs	r3, #2
 8002016:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800201a:	2302      	movs	r3, #2
 800201c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002020:	2301      	movs	r3, #1
 8002022:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002026:	230a      	movs	r3, #10
 8002028:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800202c:	2307      	movs	r3, #7
 800202e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002032:	2302      	movs	r3, #2
 8002034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002038:	2302      	movs	r3, #2
 800203a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800203e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002042:	4618      	mov	r0, r3
 8002044:	f002 fd34 	bl	8004ab0 <HAL_RCC_OscConfig>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800204e:	f000 f907 	bl	8002260 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002052:	230f      	movs	r3, #15
 8002054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002058:	2303      	movs	r3, #3
 800205a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002064:	2300      	movs	r3, #0
 8002066:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002070:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002074:	2104      	movs	r1, #4
 8002076:	4618      	mov	r0, r3
 8002078:	f003 f900 	bl	800527c <HAL_RCC_ClockConfig>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002082:	f000 f8ed 	bl	8002260 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002086:	2302      	movs	r3, #2
 8002088:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800208a:	2300      	movs	r3, #0
 800208c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800208e:	463b      	mov	r3, r7
 8002090:	4618      	mov	r0, r3
 8002092:	f003 fb15 	bl	80056c0 <HAL_RCCEx_PeriphCLKConfig>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800209c:	f000 f8e0 	bl	8002260 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80020a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80020a4:	f002 fcae 	bl	8004a04 <HAL_PWREx_ControlVoltageScaling>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80020ae:	f000 f8d7 	bl	8002260 <Error_Handler>
  }
}
 80020b2:	bf00      	nop
 80020b4:	37e0      	adds	r7, #224	; 0xe0
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08e      	sub	sp, #56	; 0x38
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80020c2:	f107 031c 	add.w	r3, r7, #28
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]
 80020d0:	611a      	str	r2, [r3, #16]
 80020d2:	615a      	str	r2, [r3, #20]
 80020d4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
 80020e4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80020e6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80020ea:	f7ff ff21 	bl	8001f30 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f7ff ff06 	bl	8001f00 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80020f4:	230c      	movs	r3, #12
 80020f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020f8:	2302      	movs	r3, #2
 80020fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002108:	2307      	movs	r3, #7
 800210a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	4619      	mov	r1, r3
 8002110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002114:	f004 fbad 	bl	8006872 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002118:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800211c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800211e:	2300      	movs	r3, #0
 8002120:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002126:	2300      	movs	r3, #0
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800212a:	230c      	movs	r3, #12
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800212e:	2300      	movs	r3, #0
 8002130:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002132:	2300      	movs	r3, #0
 8002134:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002136:	f107 031c 	add.w	r3, r7, #28
 800213a:	4619      	mov	r1, r3
 800213c:	4806      	ldr	r0, [pc, #24]	; (8002158 <MX_USART2_UART_Init+0x9c>)
 800213e:	f005 f83b 	bl	80071b8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_USART2_UART_Init+0x9c>)
 8002144:	f7ff fec6 	bl	8001ed4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002148:	4803      	ldr	r0, [pc, #12]	; (8002158 <MX_USART2_UART_Init+0x9c>)
 800214a:	f7ff feb3 	bl	8001eb4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800214e:	bf00      	nop
 8002150:	3738      	adds	r7, #56	; 0x38
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40004400 	.word	0x40004400

0800215c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]
 8002170:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002172:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <MX_GPIO_Init+0xc4>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002176:	4a2a      	ldr	r2, [pc, #168]	; (8002220 <MX_GPIO_Init+0xc4>)
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800217e:	4b28      	ldr	r3, [pc, #160]	; (8002220 <MX_GPIO_Init+0xc4>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800218a:	4b25      	ldr	r3, [pc, #148]	; (8002220 <MX_GPIO_Init+0xc4>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218e:	4a24      	ldr	r2, [pc, #144]	; (8002220 <MX_GPIO_Init+0xc4>)
 8002190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002196:	4b22      	ldr	r3, [pc, #136]	; (8002220 <MX_GPIO_Init+0xc4>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <MX_GPIO_Init+0xc4>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a6:	4a1e      	ldr	r2, [pc, #120]	; (8002220 <MX_GPIO_Init+0xc4>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <MX_GPIO_Init+0xc4>)
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <MX_GPIO_Init+0xc4>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	4a18      	ldr	r2, [pc, #96]	; (8002220 <MX_GPIO_Init+0xc4>)
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <MX_GPIO_Init+0xc4>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2120      	movs	r1, #32
 80021d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021da:	f002 fbed 	bl	80049b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <MX_GPIO_Init+0xc8>)
 80021e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4619      	mov	r1, r3
 80021f2:	480d      	ldr	r0, [pc, #52]	; (8002228 <MX_GPIO_Init+0xcc>)
 80021f4:	f002 fa36 	bl	8004664 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80021f8:	2320      	movs	r3, #32
 80021fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fc:	2301      	movs	r3, #1
 80021fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4619      	mov	r1, r3
 800220e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002212:	f002 fa27 	bl	8004664 <HAL_GPIO_Init>

}
 8002216:	bf00      	nop
 8002218:	3728      	adds	r7, #40	; 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	10210000 	.word	0x10210000
 8002228:	48000800 	.word	0x48000800

0800222c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002234:	2001      	movs	r0, #1
 8002236:	f005 f95b 	bl	80074f0 <osDelay>
 800223a:	e7fb      	b.n	8002234 <StartDefaultTask+0x8>

0800223c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a04      	ldr	r2, [pc, #16]	; (800225c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800224e:	f002 f907 	bl	8004460 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40001400 	.word	0x40001400

08002260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002264:	b672      	cpsid	i
}
 8002266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002268:	e7fe      	b.n	8002268 <Error_Handler+0x8>

0800226a <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800226a:	b480      	push	{r7}
 800226c:	b085      	sub	sp, #20
 800226e:	af00      	add	r7, sp, #0
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	4603      	mov	r3, r0
 8002278:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	4603      	mov	r3, r0
 8002294:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <_out_char+0x1e>
    uart_putc(character);
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	4618      	mov	r0, r3
 80022a0:	f001 ff2c 	bl	80040fc <uart_putc>
  }
}
 80022a4:	bf00      	nop
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	e002      	b.n	80022c2 <_strnlen_s+0x16>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3301      	adds	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d004      	beq.n	80022d4 <_strnlen_s+0x28>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	1e5a      	subs	r2, r3, #1
 80022ce:	603a      	str	r2, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f3      	bne.n	80022bc <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	1ad3      	subs	r3, r2, r3
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	4603      	mov	r3, r0
 80022ee:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	2b2f      	cmp	r3, #47	; 0x2f
 80022f4:	d904      	bls.n	8002300 <_is_digit+0x1a>
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b39      	cmp	r3, #57	; 0x39
 80022fa:	d801      	bhi.n	8002300 <_is_digit+0x1a>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <_is_digit+0x1c>
 8002300:	2300      	movs	r3, #0
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	b2db      	uxtb	r3, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002320:	e00e      	b.n	8002340 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4618      	mov	r0, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	1c59      	adds	r1, r3, #1
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6011      	str	r1, [r2, #0]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	4403      	add	r3, r0
 800233c:	3b30      	subs	r3, #48	; 0x30
 800233e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ffcd 	bl	80022e6 <_is_digit>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1e7      	bne.n	8002322 <_atoi+0xe>
  }
  return i;
 8002352:	68fb      	ldr	r3, [r7, #12]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800236e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d125      	bne.n	80023c4 <_out_rev+0x68>
 8002378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d120      	bne.n	80023c4 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e00a      	b.n	800239e <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	1c53      	adds	r3, r2, #1
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	68fc      	ldr	r4, [r7, #12]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68b9      	ldr	r1, [r7, #8]
 8002394:	2020      	movs	r0, #32
 8002396:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3301      	adds	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d3f0      	bcc.n	8002388 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80023a6:	e00d      	b.n	80023c4 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80023a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023aa:	3b01      	subs	r3, #1
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b2:	4413      	add	r3, r2
 80023b4:	7818      	ldrb	r0, [r3, #0]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	1c53      	adds	r3, r2, #1
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	68fc      	ldr	r4, [r7, #12]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	47a0      	blx	r4
  while (len) {
 80023c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1ee      	bne.n	80023a8 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80023ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00e      	beq.n	80023f2 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80023d4:	e007      	b.n	80023e6 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	1c53      	adds	r3, r2, #1
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	68fc      	ldr	r4, [r7, #12]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	2020      	movs	r0, #32
 80023e4:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d8f1      	bhi.n	80023d6 <_out_rev+0x7a>
    }
  }

  return idx;
 80023f2:	687b      	ldr	r3, [r7, #4]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	371c      	adds	r7, #28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd90      	pop	{r4, r7, pc}

080023fc <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af04      	add	r7, sp, #16
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d136      	bne.n	8002482 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	2b00      	cmp	r3, #0
 8002418:	d018      	beq.n	800244c <_ntoa_format+0x50>
 800241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d013      	beq.n	800244c <_ntoa_format+0x50>
 8002424:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d104      	bne.n	8002436 <_ntoa_format+0x3a>
 800242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <_ntoa_format+0x50>
      width--;
 8002436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002438:	3b01      	subs	r3, #1
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800243c:	e006      	b.n	800244c <_ntoa_format+0x50>
      buf[len++] = '0';
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	61fa      	str	r2, [r7, #28]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4413      	add	r3, r2
 8002448:	2230      	movs	r2, #48	; 0x30
 800244a:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	429a      	cmp	r2, r3
 8002452:	d20a      	bcs.n	800246a <_ntoa_format+0x6e>
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	2b1f      	cmp	r3, #31
 8002458:	d9f1      	bls.n	800243e <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800245a:	e006      	b.n	800246a <_ntoa_format+0x6e>
      buf[len++] = '0';
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	61fa      	str	r2, [r7, #28]
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4413      	add	r3, r2
 8002466:	2230      	movs	r2, #48	; 0x30
 8002468:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d006      	beq.n	8002482 <_ntoa_format+0x86>
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	429a      	cmp	r2, r3
 800247a:	d202      	bcs.n	8002482 <_ntoa_format+0x86>
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	2b1f      	cmp	r3, #31
 8002480:	d9ec      	bls.n	800245c <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	2b00      	cmp	r3, #0
 800248a:	d058      	beq.n	800253e <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002492:	2b00      	cmp	r3, #0
 8002494:	d116      	bne.n	80024c4 <_ntoa_format+0xc8>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d013      	beq.n	80024c4 <_ntoa_format+0xc8>
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d003      	beq.n	80024ac <_ntoa_format+0xb0>
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d10b      	bne.n	80024c4 <_ntoa_format+0xc8>
      len--;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <_ntoa_format+0xc8>
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	2b10      	cmp	r3, #16
 80024bc:	d102      	bne.n	80024c4 <_ntoa_format+0xc8>
        len--;
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d10f      	bne.n	80024ea <_ntoa_format+0xee>
 80024ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <_ntoa_format+0xee>
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b1f      	cmp	r3, #31
 80024d8:	d807      	bhi.n	80024ea <_ntoa_format+0xee>
      buf[len++] = 'x';
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	61fa      	str	r2, [r7, #28]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4413      	add	r3, r2
 80024e4:	2278      	movs	r2, #120	; 0x78
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	e01f      	b.n	800252a <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d10f      	bne.n	8002510 <_ntoa_format+0x114>
 80024f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <_ntoa_format+0x114>
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	2b1f      	cmp	r3, #31
 80024fe:	d807      	bhi.n	8002510 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	61fa      	str	r2, [r7, #28]
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4413      	add	r3, r2
 800250a:	2258      	movs	r2, #88	; 0x58
 800250c:	701a      	strb	r2, [r3, #0]
 800250e:	e00c      	b.n	800252a <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	2b02      	cmp	r3, #2
 8002514:	d109      	bne.n	800252a <_ntoa_format+0x12e>
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	2b1f      	cmp	r3, #31
 800251a:	d806      	bhi.n	800252a <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	61fa      	str	r2, [r7, #28]
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4413      	add	r3, r2
 8002526:	2262      	movs	r2, #98	; 0x62
 8002528:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	2b1f      	cmp	r3, #31
 800252e:	d806      	bhi.n	800253e <_ntoa_format+0x142>
      buf[len++] = '0';
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	61fa      	str	r2, [r7, #28]
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4413      	add	r3, r2
 800253a:	2230      	movs	r2, #48	; 0x30
 800253c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	2b1f      	cmp	r3, #31
 8002542:	d824      	bhi.n	800258e <_ntoa_format+0x192>
    if (negative) {
 8002544:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d007      	beq.n	800255c <_ntoa_format+0x160>
      buf[len++] = '-';
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	61fa      	str	r2, [r7, #28]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4413      	add	r3, r2
 8002556:	222d      	movs	r2, #45	; 0x2d
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e018      	b.n	800258e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	61fa      	str	r2, [r7, #28]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4413      	add	r3, r2
 8002570:	222b      	movs	r2, #43	; 0x2b
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	e00b      	b.n	800258e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d006      	beq.n	800258e <_ntoa_format+0x192>
      buf[len++] = ' ';
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	61fa      	str	r2, [r7, #28]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4413      	add	r3, r2
 800258a:	2220      	movs	r2, #32
 800258c:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002590:	9303      	str	r3, [sp, #12]
 8002592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002594:	9302      	str	r3, [sp, #8]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f7ff fed9 	bl	800235c <_out_rev>
 80025aa:	4603      	mov	r3, r0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b096      	sub	sp, #88	; 0x58
 80025b8:	af08      	add	r7, sp, #32
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80025c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d103      	bne.n	80025d4 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80025cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ce:	f023 0310 	bic.w	r3, r3, #16
 80025d2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80025d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <_ntoa_long+0x30>
 80025de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d033      	beq.n	800264c <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 80025e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80025ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80025ee:	fb01 f202 	mul.w	r2, r1, r2
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80025f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025fc:	2b09      	cmp	r3, #9
 80025fe:	d804      	bhi.n	800260a <_ntoa_long+0x56>
 8002600:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002604:	3330      	adds	r3, #48	; 0x30
 8002606:	b2da      	uxtb	r2, r3
 8002608:	e00d      	b.n	8002626 <_ntoa_long+0x72>
 800260a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <_ntoa_long+0x64>
 8002614:	2241      	movs	r2, #65	; 0x41
 8002616:	e000      	b.n	800261a <_ntoa_long+0x66>
 8002618:	2261      	movs	r2, #97	; 0x61
 800261a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800261e:	4413      	add	r3, r2
 8002620:	b2db      	uxtb	r3, r3
 8002622:	3b0a      	subs	r3, #10
 8002624:	b2da      	uxtb	r2, r3
 8002626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002628:	1c59      	adds	r1, r3, #1
 800262a:	6379      	str	r1, [r7, #52]	; 0x34
 800262c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002630:	440b      	add	r3, r1
 8002632:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002636:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800263a:	fbb2 f3f3 	udiv	r3, r2, r3
 800263e:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <_ntoa_long+0x98>
 8002646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002648:	2b1f      	cmp	r3, #31
 800264a:	d9cb      	bls.n	80025e4 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800264c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264e:	9306      	str	r3, [sp, #24]
 8002650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002652:	9305      	str	r3, [sp, #20]
 8002654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002656:	9304      	str	r3, [sp, #16]
 8002658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800265a:	9303      	str	r3, [sp, #12]
 800265c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002660:	9302      	str	r3, [sp, #8]
 8002662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	f107 0310 	add.w	r3, r7, #16
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7ff fec2 	bl	80023fc <_ntoa_format>
 8002678:	4603      	mov	r3, r0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3738      	adds	r7, #56	; 0x38
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b096      	sub	sp, #88	; 0x58
 8002686:	af08      	add	r7, sp, #32
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
 800268e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002694:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002698:	4313      	orrs	r3, r2
 800269a:	d103      	bne.n	80026a4 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800269c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800269e:	f023 0310 	bic.w	r3, r3, #16
 80026a2:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80026a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <_ntoa_long_long+0x34>
 80026ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026b2:	4313      	orrs	r3, r2
 80026b4:	d038      	beq.n	8002728 <_ntoa_long_long+0xa6>
    do {
      const char digit = (char)(value % base);
 80026b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80026ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026be:	f7fe fa2f 	bl	8000b20 <__aeabi_uldivmod>
 80026c2:	4613      	mov	r3, r2
 80026c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80026c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026cc:	2b09      	cmp	r3, #9
 80026ce:	d804      	bhi.n	80026da <_ntoa_long_long+0x58>
 80026d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026d4:	3330      	adds	r3, #48	; 0x30
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	e00d      	b.n	80026f6 <_ntoa_long_long+0x74>
 80026da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <_ntoa_long_long+0x66>
 80026e4:	2241      	movs	r2, #65	; 0x41
 80026e6:	e000      	b.n	80026ea <_ntoa_long_long+0x68>
 80026e8:	2261      	movs	r2, #97	; 0x61
 80026ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026ee:	4413      	add	r3, r2
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	3b0a      	subs	r3, #10
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f8:	1c59      	adds	r1, r3, #1
 80026fa:	6379      	str	r1, [r7, #52]	; 0x34
 80026fc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002700:	440b      	add	r3, r1
 8002702:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002706:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800270a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800270e:	f7fe fa07 	bl	8000b20 <__aeabi_uldivmod>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800271a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800271e:	4313      	orrs	r3, r2
 8002720:	d002      	beq.n	8002728 <_ntoa_long_long+0xa6>
 8002722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002724:	2b1f      	cmp	r3, #31
 8002726:	d9c6      	bls.n	80026b6 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800272a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800272c:	9206      	str	r2, [sp, #24]
 800272e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002730:	9205      	str	r2, [sp, #20]
 8002732:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002734:	9204      	str	r2, [sp, #16]
 8002736:	9303      	str	r3, [sp, #12]
 8002738:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800273c:	9302      	str	r3, [sp, #8]
 800273e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	f107 0310 	add.w	r3, r7, #16
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f7ff fe54 	bl	80023fc <_ntoa_format>
 8002754:	4603      	mov	r3, r0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3738      	adds	r7, #56	; 0x38
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b09d      	sub	sp, #116	; 0x74
 8002764:	af04      	add	r7, sp, #16
 8002766:	6178      	str	r0, [r7, #20]
 8002768:	6139      	str	r1, [r7, #16]
 800276a:	60fa      	str	r2, [r7, #12]
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002782:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800278a:	f7fe f94f 	bl	8000a2c <__aeabi_dcmpeq>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10f      	bne.n	80027b4 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002796:	9303      	str	r3, [sp, #12]
 8002798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800279a:	9302      	str	r3, [sp, #8]
 800279c:	2303      	movs	r3, #3
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	4ba9      	ldr	r3, [pc, #676]	; (8002a48 <_ftoa+0x2e8>)
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	6939      	ldr	r1, [r7, #16]
 80027aa:	6978      	ldr	r0, [r7, #20]
 80027ac:	f7ff fdd6 	bl	800235c <_out_rev>
 80027b0:	4603      	mov	r3, r0
 80027b2:	e22b      	b.n	8002c0c <_ftoa+0x4ac>
  if (value < -DBL_MAX)
 80027b4:	f04f 32ff 	mov.w	r2, #4294967295
 80027b8:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80027bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027c0:	f7fe f93e 	bl	8000a40 <__aeabi_dcmplt>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00f      	beq.n	80027ea <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80027ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027cc:	9303      	str	r3, [sp, #12]
 80027ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d0:	9302      	str	r3, [sp, #8]
 80027d2:	2304      	movs	r3, #4
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	4b9d      	ldr	r3, [pc, #628]	; (8002a4c <_ftoa+0x2ec>)
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	6939      	ldr	r1, [r7, #16]
 80027e0:	6978      	ldr	r0, [r7, #20]
 80027e2:	f7ff fdbb 	bl	800235c <_out_rev>
 80027e6:	4603      	mov	r3, r0
 80027e8:	e210      	b.n	8002c0c <_ftoa+0x4ac>
  if (value > DBL_MAX)
 80027ea:	f04f 32ff 	mov.w	r2, #4294967295
 80027ee:	4b98      	ldr	r3, [pc, #608]	; (8002a50 <_ftoa+0x2f0>)
 80027f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027f4:	f7fe f942 	bl	8000a7c <__aeabi_dcmpgt>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01d      	beq.n	800283a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80027fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <_ftoa+0xac>
 8002808:	4b92      	ldr	r3, [pc, #584]	; (8002a54 <_ftoa+0x2f4>)
 800280a:	e000      	b.n	800280e <_ftoa+0xae>
 800280c:	4b92      	ldr	r3, [pc, #584]	; (8002a58 <_ftoa+0x2f8>)
 800280e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002810:	f002 0204 	and.w	r2, r2, #4
 8002814:	2a00      	cmp	r2, #0
 8002816:	d001      	beq.n	800281c <_ftoa+0xbc>
 8002818:	2204      	movs	r2, #4
 800281a:	e000      	b.n	800281e <_ftoa+0xbe>
 800281c:	2203      	movs	r2, #3
 800281e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002820:	9103      	str	r1, [sp, #12]
 8002822:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002824:	9102      	str	r1, [sp, #8]
 8002826:	9201      	str	r2, [sp, #4]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	6939      	ldr	r1, [r7, #16]
 8002830:	6978      	ldr	r0, [r7, #20]
 8002832:	f7ff fd93 	bl	800235c <_out_rev>
 8002836:	4603      	mov	r3, r0
 8002838:	e1e8      	b.n	8002c0c <_ftoa+0x4ac>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800283a:	a37f      	add	r3, pc, #508	; (adr r3, 8002a38 <_ftoa+0x2d8>)
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002844:	f7fe f91a 	bl	8000a7c <__aeabi_dcmpgt>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d109      	bne.n	8002862 <_ftoa+0x102>
 800284e:	a37c      	add	r3, pc, #496	; (adr r3, 8002a40 <_ftoa+0x2e0>)
 8002850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002854:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002858:	f7fe f8f2 	bl	8000a40 <__aeabi_dcmplt>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00f      	beq.n	8002882 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002864:	9302      	str	r3, [sp, #8]
 8002866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	ed97 0b00 	vldr	d0, [r7]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	6939      	ldr	r1, [r7, #16]
 8002878:	6978      	ldr	r0, [r7, #20]
 800287a:	f000 f9d1 	bl	8002c20 <_etoa>
 800287e:	4603      	mov	r3, r0
 8002880:	e1c4      	b.n	8002c0c <_ftoa+0x4ac>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002882:	2300      	movs	r3, #0
 8002884:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002894:	f7fe f8d4 	bl	8000a40 <__aeabi_dcmplt>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00e      	beq.n	80028bc <_ftoa+0x15c>
    negative = true;
 800289e:	2301      	movs	r3, #1
 80028a0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 80028a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028a8:	f04f 0000 	mov.w	r0, #0
 80028ac:	f04f 0100 	mov.w	r1, #0
 80028b0:	f7fd fc9c 	bl	80001ec <__aeabi_dsub>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80028bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10e      	bne.n	80028e4 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80028c6:	2306      	movs	r3, #6
 80028c8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80028ca:	e00b      	b.n	80028e4 <_ftoa+0x184>
    buf[len++] = '0';
 80028cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80028d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80028d6:	4413      	add	r3, r2
 80028d8:	2230      	movs	r2, #48	; 0x30
 80028da:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80028de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028e0:	3b01      	subs	r3, #1
 80028e2:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80028e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e6:	2b1f      	cmp	r3, #31
 80028e8:	d802      	bhi.n	80028f0 <_ftoa+0x190>
 80028ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028ec:	2b09      	cmp	r3, #9
 80028ee:	d8ed      	bhi.n	80028cc <_ftoa+0x16c>
  }

  int whole = (int)value;
 80028f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028f4:	f7fe f8cc 	bl	8000a90 <__aeabi_d2iz>
 80028f8:	4603      	mov	r3, r0
 80028fa:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 80028fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80028fe:	f7fd fdc3 	bl	8000488 <__aeabi_i2d>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800290a:	f7fd fc6f 	bl	80001ec <__aeabi_dsub>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	4a51      	ldr	r2, [pc, #324]	; (8002a5c <_ftoa+0x2fc>)
 8002918:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4413      	add	r3, r2
 800291e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002922:	f7fd fe1b 	bl	800055c <__aeabi_dmul>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800292e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002932:	f7fe f8d5 	bl	8000ae0 <__aeabi_d2uiz>
 8002936:	4603      	mov	r3, r0
 8002938:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800293a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800293c:	f7fd fd94 	bl	8000468 <__aeabi_ui2d>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002948:	f7fd fc50 	bl	80001ec <__aeabi_dsub>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <_ftoa+0x300>)
 800295a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800295e:	f7fe f88d 	bl	8000a7c <__aeabi_dcmpgt>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d016      	beq.n	8002996 <_ftoa+0x236>
    ++frac;
 8002968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800296a:	3301      	adds	r3, #1
 800296c:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800296e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002970:	f7fd fd7a 	bl	8000468 <__aeabi_ui2d>
 8002974:	4a39      	ldr	r2, [pc, #228]	; (8002a5c <_ftoa+0x2fc>)
 8002976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f7fe f872 	bl	8000a68 <__aeabi_dcmpge>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d01a      	beq.n	80029c0 <_ftoa+0x260>
      frac = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800298e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002990:	3301      	adds	r3, #1
 8002992:	657b      	str	r3, [r7, #84]	; 0x54
 8002994:	e014      	b.n	80029c0 <_ftoa+0x260>
    }
  }
  else if (diff < 0.5) {
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <_ftoa+0x300>)
 800299c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80029a0:	f7fe f84e 	bl	8000a40 <__aeabi_dcmplt>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10a      	bne.n	80029c0 <_ftoa+0x260>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80029aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d004      	beq.n	80029ba <_ftoa+0x25a>
 80029b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <_ftoa+0x260>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80029ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029bc:	3301      	adds	r3, #1
 80029be:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 80029c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d134      	bne.n	8002a30 <_ftoa+0x2d0>
    diff = value - (double)whole;
 80029c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80029c8:	f7fd fd5e 	bl	8000488 <__aeabi_i2d>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029d4:	f7fd fc0a 	bl	80001ec <__aeabi_dsub>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80029e0:	2301      	movs	r3, #1
 80029e2:	461c      	mov	r4, r3
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <_ftoa+0x300>)
 80029ea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80029ee:	f7fe f827 	bl	8000a40 <__aeabi_dcmplt>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <_ftoa+0x29c>
 80029f8:	2300      	movs	r3, #0
 80029fa:	461c      	mov	r4, r3
 80029fc:	b2e3      	uxtb	r3, r4
 80029fe:	f083 0301 	eor.w	r3, r3, #1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <_ftoa+0x2bc>
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <_ftoa+0x300>)
 8002a0e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002a12:	f7fe f833 	bl	8000a7c <__aeabi_dcmpgt>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d067      	beq.n	8002aec <_ftoa+0x38c>
 8002a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8085 	beq.w	8002b32 <_ftoa+0x3d2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	657b      	str	r3, [r7, #84]	; 0x54
 8002a2e:	e080      	b.n	8002b32 <_ftoa+0x3d2>
    }
  }
  else {
    unsigned int count = prec;
 8002a30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a32:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002a34:	e037      	b.n	8002aa6 <_ftoa+0x346>
 8002a36:	bf00      	nop
 8002a38:	00000000 	.word	0x00000000
 8002a3c:	41cdcd65 	.word	0x41cdcd65
 8002a40:	00000000 	.word	0x00000000
 8002a44:	c1cdcd65 	.word	0xc1cdcd65
 8002a48:	0800a7cc 	.word	0x0800a7cc
 8002a4c:	0800a7d0 	.word	0x0800a7d0
 8002a50:	7fefffff 	.word	0x7fefffff
 8002a54:	0800a7d8 	.word	0x0800a7d8
 8002a58:	0800a7e0 	.word	0x0800a7e0
 8002a5c:	0800a8b8 	.word	0x0800a8b8
 8002a60:	3fe00000 	.word	0x3fe00000
      --count;
 8002a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a66:	3b01      	subs	r3, #1
 8002a68:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8002a6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002a6c:	4b69      	ldr	r3, [pc, #420]	; (8002c14 <_ftoa+0x4b4>)
 8002a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a72:	08da      	lsrs	r2, r3, #3
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	1aca      	subs	r2, r1, r3
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a82:	1c59      	adds	r1, r3, #1
 8002a84:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002a86:	3230      	adds	r2, #48	; 0x30
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002a8e:	440b      	add	r3, r1
 8002a90:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8002a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a96:	4a5f      	ldr	r2, [pc, #380]	; (8002c14 <_ftoa+0x4b4>)
 8002a98:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9c:	08db      	lsrs	r3, r3, #3
 8002a9e:	653b      	str	r3, [r7, #80]	; 0x50
 8002aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <_ftoa+0x34e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa8:	2b1f      	cmp	r3, #31
 8002aaa:	d9db      	bls.n	8002a64 <_ftoa+0x304>
 8002aac:	e00a      	b.n	8002ac4 <_ftoa+0x364>
        break;
 8002aae:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002ab0:	e008      	b.n	8002ac4 <_ftoa+0x364>
      buf[len++] = '0';
 8002ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ab8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002abc:	4413      	add	r3, r2
 8002abe:	2230      	movs	r2, #48	; 0x30
 8002ac0:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac6:	2b1f      	cmp	r3, #31
 8002ac8:	d804      	bhi.n	8002ad4 <_ftoa+0x374>
 8002aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002acc:	1e5a      	subs	r2, r3, #1
 8002ace:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ee      	bne.n	8002ab2 <_ftoa+0x352>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad6:	2b1f      	cmp	r3, #31
 8002ad8:	d82b      	bhi.n	8002b32 <_ftoa+0x3d2>
      // add decimal
      buf[len++] = '.';
 8002ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ae0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ae4:	4413      	add	r3, r2
 8002ae6:	222e      	movs	r2, #46	; 0x2e
 8002ae8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002aec:	e021      	b.n	8002b32 <_ftoa+0x3d2>
    buf[len++] = (char)(48 + (whole % 10));
 8002aee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002af0:	4b49      	ldr	r3, [pc, #292]	; (8002c18 <_ftoa+0x4b8>)
 8002af2:	fb83 1302 	smull	r1, r3, r3, r2
 8002af6:	1099      	asrs	r1, r3, #2
 8002af8:	17d3      	asrs	r3, r2, #31
 8002afa:	1ac9      	subs	r1, r1, r3
 8002afc:	460b      	mov	r3, r1
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	1ad1      	subs	r1, r2, r3
 8002b06:	b2ca      	uxtb	r2, r1
 8002b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b0a:	1c59      	adds	r1, r3, #1
 8002b0c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002b0e:	3230      	adds	r2, #48	; 0x30
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002b16:	440b      	add	r3, r1
 8002b18:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8002b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1e:	4a3e      	ldr	r2, [pc, #248]	; (8002c18 <_ftoa+0x4b8>)
 8002b20:	fb82 1203 	smull	r1, r2, r2, r3
 8002b24:	1092      	asrs	r2, r2, #2
 8002b26:	17db      	asrs	r3, r3, #31
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	657b      	str	r3, [r7, #84]	; 0x54
 8002b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <_ftoa+0x3da>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b34:	2b1f      	cmp	r3, #31
 8002b36:	d9da      	bls.n	8002aee <_ftoa+0x38e>
 8002b38:	e000      	b.n	8002b3c <_ftoa+0x3dc>
      break;
 8002b3a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d124      	bne.n	8002b90 <_ftoa+0x430>
 8002b46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01f      	beq.n	8002b90 <_ftoa+0x430>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d015      	beq.n	8002b82 <_ftoa+0x422>
 8002b56:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d104      	bne.n	8002b68 <_ftoa+0x408>
 8002b5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00c      	beq.n	8002b82 <_ftoa+0x422>
      width--;
 8002b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002b6e:	e008      	b.n	8002b82 <_ftoa+0x422>
      buf[len++] = '0';
 8002b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b76:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002b7a:	4413      	add	r3, r2
 8002b7c:	2230      	movs	r2, #48	; 0x30
 8002b7e:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002b82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d202      	bcs.n	8002b90 <_ftoa+0x430>
 8002b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8c:	2b1f      	cmp	r3, #31
 8002b8e:	d9ef      	bls.n	8002b70 <_ftoa+0x410>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b92:	2b1f      	cmp	r3, #31
 8002b94:	d82a      	bhi.n	8002bec <_ftoa+0x48c>
    if (negative) {
 8002b96:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <_ftoa+0x452>
      buf[len++] = '-';
 8002b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ba4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ba8:	4413      	add	r3, r2
 8002baa:	222d      	movs	r2, #45	; 0x2d
 8002bac:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002bb0:	e01c      	b.n	8002bec <_ftoa+0x48c>
    }
    else if (flags & FLAGS_PLUS) {
 8002bb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d009      	beq.n	8002bd0 <_ftoa+0x470>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002bc2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002bc6:	4413      	add	r3, r2
 8002bc8:	222b      	movs	r2, #43	; 0x2b
 8002bca:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002bce:	e00d      	b.n	8002bec <_ftoa+0x48c>
    }
    else if (flags & FLAGS_SPACE) {
 8002bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d008      	beq.n	8002bec <_ftoa+0x48c>
      buf[len++] = ' ';
 8002bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002be0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002be4:	4413      	add	r3, r2
 8002be6:	2220      	movs	r2, #32
 8002be8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bee:	9303      	str	r3, [sp, #12]
 8002bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bf2:	9302      	str	r3, [sp, #8]
 8002bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf6:	9301      	str	r3, [sp, #4]
 8002bf8:	f107 0318 	add.w	r3, r7, #24
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	6939      	ldr	r1, [r7, #16]
 8002c04:	6978      	ldr	r0, [r7, #20]
 8002c06:	f7ff fba9 	bl	800235c <_out_rev>
 8002c0a:	4603      	mov	r3, r0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3764      	adds	r7, #100	; 0x64
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd90      	pop	{r4, r7, pc}
 8002c14:	cccccccd 	.word	0xcccccccd
 8002c18:	66666667 	.word	0x66666667
 8002c1c:	00000000 	.word	0x00000000

08002c20 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c24:	b09d      	sub	sp, #116	; 0x74
 8002c26:	af06      	add	r7, sp, #24
 8002c28:	61f8      	str	r0, [r7, #28]
 8002c2a:	61b9      	str	r1, [r7, #24]
 8002c2c:	617a      	str	r2, [r7, #20]
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002c34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c3c:	f7fd fef6 	bl	8000a2c <__aeabi_dcmpeq>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d014      	beq.n	8002c70 <_etoa+0x50>
 8002c46:	f04f 32ff 	mov.w	r2, #4294967295
 8002c4a:	4bc3      	ldr	r3, [pc, #780]	; (8002f58 <_etoa+0x338>)
 8002c4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c50:	f7fd ff14 	bl	8000a7c <__aeabi_dcmpgt>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10a      	bne.n	8002c70 <_etoa+0x50>
 8002c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002c62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c66:	f7fd feeb 	bl	8000a40 <__aeabi_dcmplt>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d012      	beq.n	8002c96 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c74:	9302      	str	r3, [sp, #8]
 8002c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	ed97 0b02 	vldr	d0, [r7, #8]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	69b9      	ldr	r1, [r7, #24]
 8002c8c:	69f8      	ldr	r0, [r7, #28]
 8002c8e:	f7ff fd67 	bl	8002760 <_ftoa>
 8002c92:	4603      	mov	r3, r0
 8002c94:	e245      	b.n	8003122 <_etoa+0x502>
  }

  // determine the sign
  const bool negative = value < 0;
 8002c96:	2301      	movs	r3, #1
 8002c98:	461e      	mov	r6, r3
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ca6:	f7fd fecb 	bl	8000a40 <__aeabi_dcmplt>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <_etoa+0x94>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	461e      	mov	r6, r3
 8002cb4:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8002cb8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <_etoa+0xac>
    value = -value;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002cca:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8002ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d102      	bne.n	8002cde <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002cd8:	2306      	movs	r3, #6
 8002cda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8002cde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ce2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002ce6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	0d0a      	lsrs	r2, r1, #20
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cfc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002d00:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002d02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d06:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0a:	4994      	ldr	r1, [pc, #592]	; (8002f5c <_etoa+0x33c>)
 8002d0c:	ea02 0400 	and.w	r4, r2, r0
 8002d10:	ea03 0501 	and.w	r5, r3, r1
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	4b91      	ldr	r3, [pc, #580]	; (8002f60 <_etoa+0x340>)
 8002d1a:	ea44 0802 	orr.w	r8, r4, r2
 8002d1e:	ea45 0903 	orr.w	r9, r5, r3
 8002d22:	e9c7 8908 	strd	r8, r9, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002d26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002d28:	f7fd fbae 	bl	8000488 <__aeabi_i2d>
 8002d2c:	a37e      	add	r3, pc, #504	; (adr r3, 8002f28 <_etoa+0x308>)
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	f7fd fc13 	bl	800055c <__aeabi_dmul>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	a37c      	add	r3, pc, #496	; (adr r3, 8002f30 <_etoa+0x310>)
 8002d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d44:	f7fd fa54 	bl	80001f0 <__adddf3>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	461d      	mov	r5, r3
 8002d50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	4b82      	ldr	r3, [pc, #520]	; (8002f64 <_etoa+0x344>)
 8002d5a:	f7fd fa47 	bl	80001ec <__aeabi_dsub>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4610      	mov	r0, r2
 8002d64:	4619      	mov	r1, r3
 8002d66:	a374      	add	r3, pc, #464	; (adr r3, 8002f38 <_etoa+0x318>)
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	f7fd fbf6 	bl	800055c <__aeabi_dmul>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4620      	mov	r0, r4
 8002d76:	4629      	mov	r1, r5
 8002d78:	f7fd fa3a 	bl	80001f0 <__adddf3>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	f7fd fe84 	bl	8000a90 <__aeabi_d2iz>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002d8c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002d8e:	f7fd fb7b 	bl	8000488 <__aeabi_i2d>
 8002d92:	a36b      	add	r3, pc, #428	; (adr r3, 8002f40 <_etoa+0x320>)
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f7fd fbe0 	bl	800055c <__aeabi_dmul>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	4b6f      	ldr	r3, [pc, #444]	; (8002f68 <_etoa+0x348>)
 8002daa:	f7fd fa21 	bl	80001f0 <__adddf3>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	f7fd fe6b 	bl	8000a90 <__aeabi_d2iz>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002dbe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002dc0:	f7fd fb62 	bl	8000488 <__aeabi_i2d>
 8002dc4:	a360      	add	r3, pc, #384	; (adr r3, 8002f48 <_etoa+0x328>)
 8002dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dca:	f7fd fbc7 	bl	800055c <__aeabi_dmul>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4614      	mov	r4, r2
 8002dd4:	461d      	mov	r5, r3
 8002dd6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002dd8:	f7fd fb56 	bl	8000488 <__aeabi_i2d>
 8002ddc:	a35c      	add	r3, pc, #368	; (adr r3, 8002f50 <_etoa+0x330>)
 8002dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de2:	f7fd fbbb 	bl	800055c <__aeabi_dmul>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4620      	mov	r0, r4
 8002dec:	4629      	mov	r1, r5
 8002dee:	f7fd f9fd 	bl	80001ec <__aeabi_dsub>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 8002dfa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002dfe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002e02:	f7fd fbab 	bl	800055c <__aeabi_dmul>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e10:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002e14:	4618      	mov	r0, r3
 8002e16:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	0503      	lsls	r3, r0, #20
 8002e24:	2200      	movs	r2, #0
 8002e26:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002e2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e2e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	f7fd f9db 	bl	80001f0 <__adddf3>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4690      	mov	r8, r2
 8002e40:	4699      	mov	r9, r3
 8002e42:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e46:	f04f 0000 	mov.w	r0, #0
 8002e4a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002e4e:	f7fd f9cd 	bl	80001ec <__aeabi_dsub>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4692      	mov	sl, r2
 8002e58:	469b      	mov	fp, r3
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	4b43      	ldr	r3, [pc, #268]	; (8002f6c <_etoa+0x34c>)
 8002e60:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002e64:	f7fd fca4 	bl	80007b0 <__aeabi_ddiv>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	4b3e      	ldr	r3, [pc, #248]	; (8002f70 <_etoa+0x350>)
 8002e76:	f7fd f9bb 	bl	80001f0 <__adddf3>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002e82:	f7fd fc95 	bl	80007b0 <__aeabi_ddiv>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <_etoa+0x354>)
 8002e94:	f7fd f9ac 	bl	80001f0 <__adddf3>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002ea0:	f7fd fc86 	bl	80007b0 <__aeabi_ddiv>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4650      	mov	r0, sl
 8002eaa:	4659      	mov	r1, fp
 8002eac:	f7fd f9a0 	bl	80001f0 <__adddf3>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4640      	mov	r0, r8
 8002eb6:	4649      	mov	r1, r9
 8002eb8:	f7fd fc7a 	bl	80007b0 <__aeabi_ddiv>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <_etoa+0x340>)
 8002eca:	f7fd f991 	bl	80001f0 <__adddf3>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	f7fd fb41 	bl	800055c <__aeabi_dmul>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8002ee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ee6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eea:	f7fd fda9 	bl	8000a40 <__aeabi_dcmplt>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00d      	beq.n	8002f10 <_etoa+0x2f0>
    expval--;
 8002ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8002efa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <_etoa+0x350>)
 8002f04:	f7fd fc54 	bl	80007b0 <__aeabi_ddiv>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f12:	2b63      	cmp	r3, #99	; 0x63
 8002f14:	dc30      	bgt.n	8002f78 <_etoa+0x358>
 8002f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f18:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002f1c:	db2c      	blt.n	8002f78 <_etoa+0x358>
 8002f1e:	2304      	movs	r3, #4
 8002f20:	e02b      	b.n	8002f7a <_etoa+0x35a>
 8002f22:	bf00      	nop
 8002f24:	f3af 8000 	nop.w
 8002f28:	509f79fb 	.word	0x509f79fb
 8002f2c:	3fd34413 	.word	0x3fd34413
 8002f30:	8b60c8b3 	.word	0x8b60c8b3
 8002f34:	3fc68a28 	.word	0x3fc68a28
 8002f38:	636f4361 	.word	0x636f4361
 8002f3c:	3fd287a7 	.word	0x3fd287a7
 8002f40:	0979a371 	.word	0x0979a371
 8002f44:	400a934f 	.word	0x400a934f
 8002f48:	bbb55516 	.word	0xbbb55516
 8002f4c:	40026bb1 	.word	0x40026bb1
 8002f50:	fefa39ef 	.word	0xfefa39ef
 8002f54:	3fe62e42 	.word	0x3fe62e42
 8002f58:	7fefffff 	.word	0x7fefffff
 8002f5c:	000fffff 	.word	0x000fffff
 8002f60:	3ff00000 	.word	0x3ff00000
 8002f64:	3ff80000 	.word	0x3ff80000
 8002f68:	3fe00000 	.word	0x3fe00000
 8002f6c:	402c0000 	.word	0x402c0000
 8002f70:	40240000 	.word	0x40240000
 8002f74:	40180000 	.word	0x40180000
 8002f78:	2305      	movs	r3, #5
 8002f7a:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d03d      	beq.n	8003004 <_etoa+0x3e4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002f88:	a369      	add	r3, pc, #420	; (adr r3, 8003130 <_etoa+0x510>)
 8002f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f92:	f7fd fd69 	bl	8000a68 <__aeabi_dcmpge>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d024      	beq.n	8002fe6 <_etoa+0x3c6>
 8002f9c:	a366      	add	r3, pc, #408	; (adr r3, 8003138 <_etoa+0x518>)
 8002f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fa6:	f7fd fd4b 	bl	8000a40 <__aeabi_dcmplt>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01a      	beq.n	8002fe6 <_etoa+0x3c6>
      if ((int)prec > expval) {
 8002fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	da07      	bge.n	8002fca <_etoa+0x3aa>
        prec = (unsigned)((int)prec - expval - 1);
 8002fba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fc8:	e002      	b.n	8002fd0 <_etoa+0x3b0>
      }
      else {
        prec = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8002fe4:	e00e      	b.n	8003004 <_etoa+0x3e4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002fe6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <_etoa+0x3e4>
 8002fee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <_etoa+0x3e4>
        --prec;
 8002ffa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ffe:	3b01      	subs	r3, #1
 8003000:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8003004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003008:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 800300a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800300e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003010:	429a      	cmp	r2, r3
 8003012:	d904      	bls.n	800301e <_etoa+0x3fe>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003014:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800301c:	e001      	b.n	8003022 <_etoa+0x402>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003022:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d004      	beq.n	8003038 <_etoa+0x418>
 800302e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <_etoa+0x418>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8003038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800303a:	2b00      	cmp	r3, #0
 800303c:	d009      	beq.n	8003052 <_etoa+0x432>
    value /= conv.F;
 800303e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003042:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003046:	f7fd fbb3 	bl	80007b0 <__aeabi_ddiv>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8003056:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800305a:	2b00      	cmp	r3, #0
 800305c:	d006      	beq.n	800306c <_etoa+0x44c>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	e003      	b.n	8003074 <_etoa+0x454>
 800306c:	ed97 7b02 	vldr	d7, [r7, #8]
 8003070:	ed87 7b00 	vstr	d7, [r7]
 8003074:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003078:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800307c:	9302      	str	r3, [sp, #8]
 800307e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003080:	9301      	str	r3, [sp, #4]
 8003082:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	ed97 0b00 	vldr	d0, [r7]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	69b9      	ldr	r1, [r7, #24]
 8003092:	69f8      	ldr	r0, [r7, #28]
 8003094:	f7ff fb64 	bl	8002760 <_ftoa>
 8003098:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 800309a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800309c:	2b00      	cmp	r3, #0
 800309e:	d03f      	beq.n	8003120 <_etoa+0x500>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80030a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <_etoa+0x490>
 80030ac:	2045      	movs	r0, #69	; 0x45
 80030ae:	e000      	b.n	80030b2 <_etoa+0x492>
 80030b0:	2065      	movs	r0, #101	; 0x65
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	1c53      	adds	r3, r2, #1
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	69fc      	ldr	r4, [r7, #28]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	69b9      	ldr	r1, [r7, #24]
 80030be:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80030c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bfb8      	it	lt
 80030c6:	425b      	neglt	r3, r3
 80030c8:	4618      	mov	r0, r3
 80030ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030cc:	0fdb      	lsrs	r3, r3, #31
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030d2:	3a01      	subs	r2, #1
 80030d4:	2105      	movs	r1, #5
 80030d6:	9105      	str	r1, [sp, #20]
 80030d8:	9204      	str	r2, [sp, #16]
 80030da:	2200      	movs	r2, #0
 80030dc:	9203      	str	r2, [sp, #12]
 80030de:	220a      	movs	r2, #10
 80030e0:	9202      	str	r2, [sp, #8]
 80030e2:	9301      	str	r3, [sp, #4]
 80030e4:	9000      	str	r0, [sp, #0]
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	69b9      	ldr	r1, [r7, #24]
 80030ec:	69f8      	ldr	r0, [r7, #28]
 80030ee:	f7ff fa61 	bl	80025b4 <_ntoa_long>
 80030f2:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80030f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00f      	beq.n	8003120 <_etoa+0x500>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003100:	e007      	b.n	8003112 <_etoa+0x4f2>
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	1c53      	adds	r3, r2, #1
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	69fc      	ldr	r4, [r7, #28]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	69b9      	ldr	r1, [r7, #24]
 800310e:	2020      	movs	r0, #32
 8003110:	47a0      	blx	r4
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800311c:	429a      	cmp	r2, r3
 800311e:	d8f0      	bhi.n	8003102 <_etoa+0x4e2>
    }
  }
  return idx;
 8003120:	697b      	ldr	r3, [r7, #20]
}
 8003122:	4618      	mov	r0, r3
 8003124:	375c      	adds	r7, #92	; 0x5c
 8003126:	46bd      	mov	sp, r7
 8003128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800312c:	f3af 8000 	nop.w
 8003130:	eb1c432d 	.word	0xeb1c432d
 8003134:	3f1a36e2 	.word	0x3f1a36e2
 8003138:	00000000 	.word	0x00000000
 800313c:	412e8480 	.word	0x412e8480

08003140 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003140:	b5b0      	push	{r4, r5, r7, lr}
 8003142:	b0a0      	sub	sp, #128	; 0x80
 8003144:	af0a      	add	r7, sp, #40	; 0x28
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f040 8494 	bne.w	8003a82 <_vsnprintf+0x942>
    // use null output function
    out = _out_null;
 800315a:	4ba0      	ldr	r3, [pc, #640]	; (80033dc <_vsnprintf+0x29c>)
 800315c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800315e:	f000 bc90 	b.w	8003a82 <_vsnprintf+0x942>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b25      	cmp	r3, #37	; 0x25
 8003168:	d00d      	beq.n	8003186 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	7818      	ldrb	r0, [r3, #0]
 800316e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003170:	1c53      	adds	r3, r2, #1
 8003172:	647b      	str	r3, [r7, #68]	; 0x44
 8003174:	68fc      	ldr	r4, [r7, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	47a0      	blx	r4
      format++;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	3301      	adds	r3, #1
 8003180:	603b      	str	r3, [r7, #0]
      continue;
 8003182:	f000 bc7e 	b.w	8003a82 <_vsnprintf+0x942>
    }
    else {
      // yes, evaluate it
      format++;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	3301      	adds	r3, #1
 800318a:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	3b20      	subs	r3, #32
 8003196:	2b10      	cmp	r3, #16
 8003198:	d856      	bhi.n	8003248 <_vsnprintf+0x108>
 800319a:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <_vsnprintf+0x60>)
 800319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a0:	08003221 	.word	0x08003221
 80031a4:	08003249 	.word	0x08003249
 80031a8:	08003249 	.word	0x08003249
 80031ac:	08003235 	.word	0x08003235
 80031b0:	08003249 	.word	0x08003249
 80031b4:	08003249 	.word	0x08003249
 80031b8:	08003249 	.word	0x08003249
 80031bc:	08003249 	.word	0x08003249
 80031c0:	08003249 	.word	0x08003249
 80031c4:	08003249 	.word	0x08003249
 80031c8:	08003249 	.word	0x08003249
 80031cc:	0800320d 	.word	0x0800320d
 80031d0:	08003249 	.word	0x08003249
 80031d4:	080031f9 	.word	0x080031f9
 80031d8:	08003249 	.word	0x08003249
 80031dc:	08003249 	.word	0x08003249
 80031e0:	080031e5 	.word	0x080031e5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80031e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	657b      	str	r3, [r7, #84]	; 0x54
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	3301      	adds	r3, #1
 80031f0:	603b      	str	r3, [r7, #0]
 80031f2:	2301      	movs	r3, #1
 80031f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80031f6:	e02a      	b.n	800324e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80031f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031fa:	f043 0302 	orr.w	r3, r3, #2
 80031fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	3301      	adds	r3, #1
 8003204:	603b      	str	r3, [r7, #0]
 8003206:	2301      	movs	r3, #1
 8003208:	64bb      	str	r3, [r7, #72]	; 0x48
 800320a:	e020      	b.n	800324e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800320c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800320e:	f043 0304 	orr.w	r3, r3, #4
 8003212:	657b      	str	r3, [r7, #84]	; 0x54
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	3301      	adds	r3, #1
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	2301      	movs	r3, #1
 800321c:	64bb      	str	r3, [r7, #72]	; 0x48
 800321e:	e016      	b.n	800324e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003222:	f043 0308 	orr.w	r3, r3, #8
 8003226:	657b      	str	r3, [r7, #84]	; 0x54
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	3301      	adds	r3, #1
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	2301      	movs	r3, #1
 8003230:	64bb      	str	r3, [r7, #72]	; 0x48
 8003232:	e00c      	b.n	800324e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003236:	f043 0310 	orr.w	r3, r3, #16
 800323a:	657b      	str	r3, [r7, #84]	; 0x54
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	3301      	adds	r3, #1
 8003240:	603b      	str	r3, [r7, #0]
 8003242:	2301      	movs	r3, #1
 8003244:	64bb      	str	r3, [r7, #72]	; 0x48
 8003246:	e002      	b.n	800324e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8003248:	2300      	movs	r3, #0
 800324a:	64bb      	str	r3, [r7, #72]	; 0x48
 800324c:	bf00      	nop
      }
    } while (n);
 800324e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003250:	2b00      	cmp	r3, #0
 8003252:	d19d      	bne.n	8003190 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff f842 	bl	80022e6 <_is_digit>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <_vsnprintf+0x134>
      width = _atoi(&format);
 8003268:	463b      	mov	r3, r7
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff f852 	bl	8002314 <_atoi>
 8003270:	6538      	str	r0, [r7, #80]	; 0x50
 8003272:	e018      	b.n	80032a6 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b2a      	cmp	r3, #42	; 0x2a
 800327a:	d114      	bne.n	80032a6 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800327c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800327e:	1d1a      	adds	r2, r3, #4
 8003280:	66ba      	str	r2, [r7, #104]	; 0x68
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	2b00      	cmp	r3, #0
 800328a:	da07      	bge.n	800329c <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800328c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328e:	f043 0302 	orr.w	r3, r3, #2
 8003292:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	425b      	negs	r3, r3
 8003298:	653b      	str	r3, [r7, #80]	; 0x50
 800329a:	e001      	b.n	80032a0 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b2e      	cmp	r3, #46	; 0x2e
 80032b0:	d124      	bne.n	80032fc <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 80032b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032b8:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	3301      	adds	r3, #1
 80032be:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff f80e 	bl	80022e6 <_is_digit>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <_vsnprintf+0x19c>
        precision = _atoi(&format);
 80032d0:	463b      	mov	r3, r7
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff f81e 	bl	8002314 <_atoi>
 80032d8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80032da:	e00f      	b.n	80032fc <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b2a      	cmp	r3, #42	; 0x2a
 80032e2:	d10b      	bne.n	80032fc <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 80032e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032e6:	1d1a      	adds	r2, r3, #4
 80032e8:	66ba      	str	r2, [r7, #104]	; 0x68
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80032f4:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	3301      	adds	r3, #1
 80032fa:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	3b68      	subs	r3, #104	; 0x68
 8003302:	2b12      	cmp	r3, #18
 8003304:	d866      	bhi.n	80033d4 <_vsnprintf+0x294>
 8003306:	a201      	add	r2, pc, #4	; (adr r2, 800330c <_vsnprintf+0x1cc>)
 8003308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330c:	0800337f 	.word	0x0800337f
 8003310:	080033d5 	.word	0x080033d5
 8003314:	080033b5 	.word	0x080033b5
 8003318:	080033d5 	.word	0x080033d5
 800331c:	08003359 	.word	0x08003359
 8003320:	080033d5 	.word	0x080033d5
 8003324:	080033d5 	.word	0x080033d5
 8003328:	080033d5 	.word	0x080033d5
 800332c:	080033d5 	.word	0x080033d5
 8003330:	080033d5 	.word	0x080033d5
 8003334:	080033d5 	.word	0x080033d5
 8003338:	080033d5 	.word	0x080033d5
 800333c:	080033a5 	.word	0x080033a5
 8003340:	080033d5 	.word	0x080033d5
 8003344:	080033d5 	.word	0x080033d5
 8003348:	080033d5 	.word	0x080033d5
 800334c:	080033d5 	.word	0x080033d5
 8003350:	080033d5 	.word	0x080033d5
 8003354:	080033c5 	.word	0x080033c5
      case 'l' :
        flags |= FLAGS_LONG;
 8003358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800335a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	3301      	adds	r3, #1
 8003364:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b6c      	cmp	r3, #108	; 0x6c
 800336c:	d134      	bne.n	80033d8 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800336e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003370:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003374:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	603b      	str	r3, [r7, #0]
        }
        break;
 800337c:	e02c      	b.n	80033d8 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800337e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003384:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	3301      	adds	r3, #1
 800338a:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b68      	cmp	r3, #104	; 0x68
 8003392:	d125      	bne.n	80033e0 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8003394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800339a:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	3301      	adds	r3, #1
 80033a0:	603b      	str	r3, [r7, #0]
        }
        break;
 80033a2:	e01d      	b.n	80033e0 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80033a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033aa:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	3301      	adds	r3, #1
 80033b0:	603b      	str	r3, [r7, #0]
        break;
 80033b2:	e016      	b.n	80033e2 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80033b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ba:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	3301      	adds	r3, #1
 80033c0:	603b      	str	r3, [r7, #0]
        break;
 80033c2:	e00e      	b.n	80033e2 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80033c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ca:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	3301      	adds	r3, #1
 80033d0:	603b      	str	r3, [r7, #0]
        break;
 80033d2:	e006      	b.n	80033e2 <_vsnprintf+0x2a2>
      default :
        break;
 80033d4:	bf00      	nop
 80033d6:	e004      	b.n	80033e2 <_vsnprintf+0x2a2>
        break;
 80033d8:	bf00      	nop
 80033da:	e002      	b.n	80033e2 <_vsnprintf+0x2a2>
 80033dc:	0800226b 	.word	0x0800226b
        break;
 80033e0:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	3b25      	subs	r3, #37	; 0x25
 80033e8:	2b53      	cmp	r3, #83	; 0x53
 80033ea:	f200 833d 	bhi.w	8003a68 <_vsnprintf+0x928>
 80033ee:	a201      	add	r2, pc, #4	; (adr r2, 80033f4 <_vsnprintf+0x2b4>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	08003a51 	.word	0x08003a51
 80033f8:	08003a69 	.word	0x08003a69
 80033fc:	08003a69 	.word	0x08003a69
 8003400:	08003a69 	.word	0x08003a69
 8003404:	08003a69 	.word	0x08003a69
 8003408:	08003a69 	.word	0x08003a69
 800340c:	08003a69 	.word	0x08003a69
 8003410:	08003a69 	.word	0x08003a69
 8003414:	08003a69 	.word	0x08003a69
 8003418:	08003a69 	.word	0x08003a69
 800341c:	08003a69 	.word	0x08003a69
 8003420:	08003a69 	.word	0x08003a69
 8003424:	08003a69 	.word	0x08003a69
 8003428:	08003a69 	.word	0x08003a69
 800342c:	08003a69 	.word	0x08003a69
 8003430:	08003a69 	.word	0x08003a69
 8003434:	08003a69 	.word	0x08003a69
 8003438:	08003a69 	.word	0x08003a69
 800343c:	08003a69 	.word	0x08003a69
 8003440:	08003a69 	.word	0x08003a69
 8003444:	08003a69 	.word	0x08003a69
 8003448:	08003a69 	.word	0x08003a69
 800344c:	08003a69 	.word	0x08003a69
 8003450:	08003a69 	.word	0x08003a69
 8003454:	08003a69 	.word	0x08003a69
 8003458:	08003a69 	.word	0x08003a69
 800345c:	08003a69 	.word	0x08003a69
 8003460:	08003a69 	.word	0x08003a69
 8003464:	08003a69 	.word	0x08003a69
 8003468:	08003a69 	.word	0x08003a69
 800346c:	08003a69 	.word	0x08003a69
 8003470:	08003a69 	.word	0x08003a69
 8003474:	0800381f 	.word	0x0800381f
 8003478:	080037d3 	.word	0x080037d3
 800347c:	0800381f 	.word	0x0800381f
 8003480:	08003a69 	.word	0x08003a69
 8003484:	08003a69 	.word	0x08003a69
 8003488:	08003a69 	.word	0x08003a69
 800348c:	08003a69 	.word	0x08003a69
 8003490:	08003a69 	.word	0x08003a69
 8003494:	08003a69 	.word	0x08003a69
 8003498:	08003a69 	.word	0x08003a69
 800349c:	08003a69 	.word	0x08003a69
 80034a0:	08003a69 	.word	0x08003a69
 80034a4:	08003a69 	.word	0x08003a69
 80034a8:	08003a69 	.word	0x08003a69
 80034ac:	08003a69 	.word	0x08003a69
 80034b0:	08003a69 	.word	0x08003a69
 80034b4:	08003a69 	.word	0x08003a69
 80034b8:	08003a69 	.word	0x08003a69
 80034bc:	08003a69 	.word	0x08003a69
 80034c0:	08003545 	.word	0x08003545
 80034c4:	08003a69 	.word	0x08003a69
 80034c8:	08003a69 	.word	0x08003a69
 80034cc:	08003a69 	.word	0x08003a69
 80034d0:	08003a69 	.word	0x08003a69
 80034d4:	08003a69 	.word	0x08003a69
 80034d8:	08003a69 	.word	0x08003a69
 80034dc:	08003a69 	.word	0x08003a69
 80034e0:	08003a69 	.word	0x08003a69
 80034e4:	08003a69 	.word	0x08003a69
 80034e8:	08003545 	.word	0x08003545
 80034ec:	0800388b 	.word	0x0800388b
 80034f0:	08003545 	.word	0x08003545
 80034f4:	0800381f 	.word	0x0800381f
 80034f8:	080037d3 	.word	0x080037d3
 80034fc:	0800381f 	.word	0x0800381f
 8003500:	08003a69 	.word	0x08003a69
 8003504:	08003545 	.word	0x08003545
 8003508:	08003a69 	.word	0x08003a69
 800350c:	08003a69 	.word	0x08003a69
 8003510:	08003a69 	.word	0x08003a69
 8003514:	08003a69 	.word	0x08003a69
 8003518:	08003a69 	.word	0x08003a69
 800351c:	08003545 	.word	0x08003545
 8003520:	080039c3 	.word	0x080039c3
 8003524:	08003a69 	.word	0x08003a69
 8003528:	08003a69 	.word	0x08003a69
 800352c:	080038ff 	.word	0x080038ff
 8003530:	08003a69 	.word	0x08003a69
 8003534:	08003545 	.word	0x08003545
 8003538:	08003a69 	.word	0x08003a69
 800353c:	08003a69 	.word	0x08003a69
 8003540:	08003545 	.word	0x08003545
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b78      	cmp	r3, #120	; 0x78
 800354a:	d003      	beq.n	8003554 <_vsnprintf+0x414>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b58      	cmp	r3, #88	; 0x58
 8003552:	d102      	bne.n	800355a <_vsnprintf+0x41a>
          base = 16U;
 8003554:	2310      	movs	r3, #16
 8003556:	643b      	str	r3, [r7, #64]	; 0x40
 8003558:	e013      	b.n	8003582 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b6f      	cmp	r3, #111	; 0x6f
 8003560:	d102      	bne.n	8003568 <_vsnprintf+0x428>
          base =  8U;
 8003562:	2308      	movs	r3, #8
 8003564:	643b      	str	r3, [r7, #64]	; 0x40
 8003566:	e00c      	b.n	8003582 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b62      	cmp	r3, #98	; 0x62
 800356e:	d102      	bne.n	8003576 <_vsnprintf+0x436>
          base =  2U;
 8003570:	2302      	movs	r3, #2
 8003572:	643b      	str	r3, [r7, #64]	; 0x40
 8003574:	e005      	b.n	8003582 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8003576:	230a      	movs	r3, #10
 8003578:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800357a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800357c:	f023 0310 	bic.w	r3, r3, #16
 8003580:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b58      	cmp	r3, #88	; 0x58
 8003588:	d103      	bne.n	8003592 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800358a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358c:	f043 0320 	orr.w	r3, r3, #32
 8003590:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b69      	cmp	r3, #105	; 0x69
 8003598:	d007      	beq.n	80035aa <_vsnprintf+0x46a>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b64      	cmp	r3, #100	; 0x64
 80035a0:	d003      	beq.n	80035aa <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80035a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a4:	f023 030c 	bic.w	r3, r3, #12
 80035a8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80035aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 80035b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b6:	f023 0301 	bic.w	r3, r3, #1
 80035ba:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b69      	cmp	r3, #105	; 0x69
 80035c2:	d004      	beq.n	80035ce <_vsnprintf+0x48e>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b64      	cmp	r3, #100	; 0x64
 80035ca:	f040 808e 	bne.w	80036ea <_vsnprintf+0x5aa>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80035ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d02f      	beq.n	8003638 <_vsnprintf+0x4f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80035d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035da:	3307      	adds	r3, #7
 80035dc:	f023 0307 	bic.w	r3, r3, #7
 80035e0:	f103 0208 	add.w	r2, r3, #8
 80035e4:	66ba      	str	r2, [r7, #104]	; 0x68
 80035e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80035ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035f2:	2a00      	cmp	r2, #0
 80035f4:	f173 0100 	sbcs.w	r1, r3, #0
 80035f8:	da02      	bge.n	8003600 <_vsnprintf+0x4c0>
 80035fa:	4252      	negs	r2, r2
 80035fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003600:	4610      	mov	r0, r2
 8003602:	4619      	mov	r1, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	0fdb      	lsrs	r3, r3, #31
 8003608:	b2dc      	uxtb	r4, r3
 800360a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800360c:	461a      	mov	r2, r3
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8003614:	9508      	str	r5, [sp, #32]
 8003616:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8003618:	9507      	str	r5, [sp, #28]
 800361a:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800361c:	9506      	str	r5, [sp, #24]
 800361e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003622:	9402      	str	r4, [sp, #8]
 8003624:	e9cd 0100 	strd	r0, r1, [sp]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f7ff f827 	bl	8002682 <_ntoa_long_long>
 8003634:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8003636:	e0c8      	b.n	80037ca <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01e      	beq.n	8003680 <_vsnprintf+0x540>
            const long value = va_arg(va, long);
 8003642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003644:	1d1a      	adds	r2, r3, #4
 8003646:	66ba      	str	r2, [r7, #104]	; 0x68
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	bfb8      	it	lt
 8003652:	425b      	neglt	r3, r3
 8003654:	4619      	mov	r1, r3
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	0fdb      	lsrs	r3, r3, #31
 800365a:	b2db      	uxtb	r3, r3
 800365c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800365e:	9205      	str	r2, [sp, #20]
 8003660:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003662:	9204      	str	r2, [sp, #16]
 8003664:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003666:	9203      	str	r2, [sp, #12]
 8003668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800366a:	9202      	str	r2, [sp, #8]
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	9100      	str	r1, [sp, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f7fe ff9c 	bl	80025b4 <_ntoa_long>
 800367c:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800367e:	e0a4      	b.n	80037ca <_vsnprintf+0x68a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <_vsnprintf+0x556>
 800368a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800368c:	1d1a      	adds	r2, r3, #4
 800368e:	66ba      	str	r2, [r7, #104]	; 0x68
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	e00e      	b.n	80036b4 <_vsnprintf+0x574>
 8003696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <_vsnprintf+0x56c>
 80036a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036a2:	1d1a      	adds	r2, r3, #4
 80036a4:	66ba      	str	r2, [r7, #104]	; 0x68
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	b21b      	sxth	r3, r3
 80036aa:	e003      	b.n	80036b4 <_vsnprintf+0x574>
 80036ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036ae:	1d1a      	adds	r2, r3, #4
 80036b0:	66ba      	str	r2, [r7, #104]	; 0x68
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bfb8      	it	lt
 80036bc:	425b      	neglt	r3, r3
 80036be:	4619      	mov	r1, r3
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	0fdb      	lsrs	r3, r3, #31
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036c8:	9205      	str	r2, [sp, #20]
 80036ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036cc:	9204      	str	r2, [sp, #16]
 80036ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036d0:	9203      	str	r2, [sp, #12]
 80036d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036d4:	9202      	str	r2, [sp, #8]
 80036d6:	9301      	str	r3, [sp, #4]
 80036d8:	9100      	str	r1, [sp, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f7fe ff67 	bl	80025b4 <_ntoa_long>
 80036e6:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80036e8:	e06f      	b.n	80037ca <_vsnprintf+0x68a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80036ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <_vsnprintf+0x5f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80036f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036f6:	3307      	adds	r3, #7
 80036f8:	f023 0307 	bic.w	r3, r3, #7
 80036fc:	f103 0208 	add.w	r2, r3, #8
 8003700:	66ba      	str	r2, [r7, #104]	; 0x68
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003708:	4608      	mov	r0, r1
 800370a:	f04f 0100 	mov.w	r1, #0
 800370e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8003710:	9408      	str	r4, [sp, #32]
 8003712:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003714:	9407      	str	r4, [sp, #28]
 8003716:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8003718:	9406      	str	r4, [sp, #24]
 800371a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800371e:	2100      	movs	r1, #0
 8003720:	9102      	str	r1, [sp, #8]
 8003722:	e9cd 2300 	strd	r2, r3, [sp]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7fe ffa8 	bl	8002682 <_ntoa_long_long>
 8003732:	6478      	str	r0, [r7, #68]	; 0x44
 8003734:	e049      	b.n	80037ca <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d016      	beq.n	800376e <_vsnprintf+0x62e>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003742:	1d1a      	adds	r2, r3, #4
 8003744:	66ba      	str	r2, [r7, #104]	; 0x68
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800374a:	9205      	str	r2, [sp, #20]
 800374c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800374e:	9204      	str	r2, [sp, #16]
 8003750:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003752:	9203      	str	r2, [sp, #12]
 8003754:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003756:	9202      	str	r2, [sp, #8]
 8003758:	2200      	movs	r2, #0
 800375a:	9201      	str	r2, [sp, #4]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f7fe ff25 	bl	80025b4 <_ntoa_long>
 800376a:	6478      	str	r0, [r7, #68]	; 0x44
 800376c:	e02d      	b.n	80037ca <_vsnprintf+0x68a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800376e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <_vsnprintf+0x644>
 8003778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800377a:	1d1a      	adds	r2, r3, #4
 800377c:	66ba      	str	r2, [r7, #104]	; 0x68
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	e00e      	b.n	80037a2 <_vsnprintf+0x662>
 8003784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <_vsnprintf+0x65a>
 800378e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003790:	1d1a      	adds	r2, r3, #4
 8003792:	66ba      	str	r2, [r7, #104]	; 0x68
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	e003      	b.n	80037a2 <_vsnprintf+0x662>
 800379a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800379c:	1d1a      	adds	r2, r3, #4
 800379e:	66ba      	str	r2, [r7, #104]	; 0x68
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80037a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a6:	9305      	str	r3, [sp, #20]
 80037a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037aa:	9304      	str	r3, [sp, #16]
 80037ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ae:	9303      	str	r3, [sp, #12]
 80037b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b2:	9302      	str	r3, [sp, #8]
 80037b4:	2300      	movs	r3, #0
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f7fe fef6 	bl	80025b4 <_ntoa_long>
 80037c8:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	3301      	adds	r3, #1
 80037ce:	603b      	str	r3, [r7, #0]
        break;
 80037d0:	e157      	b.n	8003a82 <_vsnprintf+0x942>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b46      	cmp	r3, #70	; 0x46
 80037d8:	d103      	bne.n	80037e2 <_vsnprintf+0x6a2>
 80037da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037dc:	f043 0320 	orr.w	r3, r3, #32
 80037e0:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80037e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037e4:	3307      	adds	r3, #7
 80037e6:	f023 0307 	bic.w	r3, r3, #7
 80037ea:	f103 0208 	add.w	r2, r3, #8
 80037ee:	66ba      	str	r2, [r7, #104]	; 0x68
 80037f0:	ed93 7b00 	vldr	d7, [r3]
 80037f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f6:	9302      	str	r3, [sp, #8]
 80037f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037fa:	9301      	str	r3, [sp, #4]
 80037fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	eeb0 0a47 	vmov.f32	s0, s14
 8003804:	eef0 0a67 	vmov.f32	s1, s15
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f7fe ffa6 	bl	8002760 <_ftoa>
 8003814:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	603b      	str	r3, [r7, #0]
        break;
 800381c:	e131      	b.n	8003a82 <_vsnprintf+0x942>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b67      	cmp	r3, #103	; 0x67
 8003824:	d003      	beq.n	800382e <_vsnprintf+0x6ee>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b47      	cmp	r3, #71	; 0x47
 800382c:	d103      	bne.n	8003836 <_vsnprintf+0x6f6>
 800382e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003830:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003834:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b45      	cmp	r3, #69	; 0x45
 800383c:	d003      	beq.n	8003846 <_vsnprintf+0x706>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b47      	cmp	r3, #71	; 0x47
 8003844:	d103      	bne.n	800384e <_vsnprintf+0x70e>
 8003846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003848:	f043 0320 	orr.w	r3, r3, #32
 800384c:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800384e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003850:	3307      	adds	r3, #7
 8003852:	f023 0307 	bic.w	r3, r3, #7
 8003856:	f103 0208 	add.w	r2, r3, #8
 800385a:	66ba      	str	r2, [r7, #104]	; 0x68
 800385c:	ed93 7b00 	vldr	d7, [r3]
 8003860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003862:	9302      	str	r3, [sp, #8]
 8003864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	eeb0 0a47 	vmov.f32	s0, s14
 8003870:	eef0 0a67 	vmov.f32	s1, s15
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff f9d0 	bl	8002c20 <_etoa>
 8003880:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	603b      	str	r3, [r7, #0]
        break;
 8003888:	e0fb      	b.n	8003a82 <_vsnprintf+0x942>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800388a:	2301      	movs	r3, #1
 800388c:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800388e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10e      	bne.n	80038b6 <_vsnprintf+0x776>
          while (l++ < width) {
 8003898:	e007      	b.n	80038aa <_vsnprintf+0x76a>
            out(' ', buffer, idx++, maxlen);
 800389a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800389c:	1c53      	adds	r3, r2, #1
 800389e:	647b      	str	r3, [r7, #68]	; 0x44
 80038a0:	68fc      	ldr	r4, [r7, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	2020      	movs	r0, #32
 80038a8:	47a0      	blx	r4
          while (l++ < width) {
 80038aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d8f1      	bhi.n	800389a <_vsnprintf+0x75a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80038b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038b8:	1d1a      	adds	r2, r3, #4
 80038ba:	66ba      	str	r2, [r7, #104]	; 0x68
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	b2d8      	uxtb	r0, r3
 80038c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038c2:	1c53      	adds	r3, r2, #1
 80038c4:	647b      	str	r3, [r7, #68]	; 0x44
 80038c6:	68fc      	ldr	r4, [r7, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80038ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00e      	beq.n	80038f6 <_vsnprintf+0x7b6>
          while (l++ < width) {
 80038d8:	e007      	b.n	80038ea <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 80038da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038dc:	1c53      	adds	r3, r2, #1
 80038de:	647b      	str	r3, [r7, #68]	; 0x44
 80038e0:	68fc      	ldr	r4, [r7, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	2020      	movs	r0, #32
 80038e8:	47a0      	blx	r4
          while (l++ < width) {
 80038ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d8f1      	bhi.n	80038da <_vsnprintf+0x79a>
          }
        }
        format++;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	3301      	adds	r3, #1
 80038fa:	603b      	str	r3, [r7, #0]
        break;
 80038fc:	e0c1      	b.n	8003a82 <_vsnprintf+0x942>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80038fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003900:	1d1a      	adds	r2, r3, #4
 8003902:	66ba      	str	r2, [r7, #104]	; 0x68
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <_vsnprintf+0x7d2>
 800390e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003910:	e001      	b.n	8003916 <_vsnprintf+0x7d6>
 8003912:	f04f 33ff 	mov.w	r3, #4294967295
 8003916:	4619      	mov	r1, r3
 8003918:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800391a:	f7fe fcc7 	bl	80022ac <_strnlen_s>
 800391e:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <_vsnprintf+0x7f6>
          l = (l < precision ? l : precision);
 800392a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800392c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800392e:	4293      	cmp	r3, r2
 8003930:	bf28      	it	cs
 8003932:	4613      	movcs	r3, r2
 8003934:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8003936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d11a      	bne.n	8003976 <_vsnprintf+0x836>
          while (l++ < width) {
 8003940:	e007      	b.n	8003952 <_vsnprintf+0x812>
            out(' ', buffer, idx++, maxlen);
 8003942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003944:	1c53      	adds	r3, r2, #1
 8003946:	647b      	str	r3, [r7, #68]	; 0x44
 8003948:	68fc      	ldr	r4, [r7, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	2020      	movs	r0, #32
 8003950:	47a0      	blx	r4
          while (l++ < width) {
 8003952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	637a      	str	r2, [r7, #52]	; 0x34
 8003958:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800395a:	429a      	cmp	r2, r3
 800395c:	d8f1      	bhi.n	8003942 <_vsnprintf+0x802>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800395e:	e00a      	b.n	8003976 <_vsnprintf+0x836>
          out(*(p++), buffer, idx++, maxlen);
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	63ba      	str	r2, [r7, #56]	; 0x38
 8003966:	7818      	ldrb	r0, [r3, #0]
 8003968:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800396a:	1c53      	adds	r3, r2, #1
 800396c:	647b      	str	r3, [r7, #68]	; 0x44
 800396e:	68fc      	ldr	r4, [r7, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <_vsnprintf+0x852>
 800397e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0eb      	beq.n	8003960 <_vsnprintf+0x820>
 8003988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800398a:	1e5a      	subs	r2, r3, #1
 800398c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e6      	bne.n	8003960 <_vsnprintf+0x820>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00e      	beq.n	80039ba <_vsnprintf+0x87a>
          while (l++ < width) {
 800399c:	e007      	b.n	80039ae <_vsnprintf+0x86e>
            out(' ', buffer, idx++, maxlen);
 800399e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039a0:	1c53      	adds	r3, r2, #1
 80039a2:	647b      	str	r3, [r7, #68]	; 0x44
 80039a4:	68fc      	ldr	r4, [r7, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	2020      	movs	r0, #32
 80039ac:	47a0      	blx	r4
          while (l++ < width) {
 80039ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	637a      	str	r2, [r7, #52]	; 0x34
 80039b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d8f1      	bhi.n	800399e <_vsnprintf+0x85e>
          }
        }
        format++;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	3301      	adds	r3, #1
 80039be:	603b      	str	r3, [r7, #0]
        break;
 80039c0:	e05f      	b.n	8003a82 <_vsnprintf+0x942>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80039c2:	2308      	movs	r3, #8
 80039c4:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80039c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80039cc:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80039ce:	2300      	movs	r3, #0
 80039d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 80039d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01e      	beq.n	8003a1a <_vsnprintf+0x8da>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80039dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039de:	1d1a      	adds	r2, r3, #4
 80039e0:	66ba      	str	r2, [r7, #104]	; 0x68
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039ec:	9108      	str	r1, [sp, #32]
 80039ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80039f0:	9107      	str	r1, [sp, #28]
 80039f2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80039f4:	9106      	str	r1, [sp, #24]
 80039f6:	f04f 0010 	mov.w	r0, #16
 80039fa:	f04f 0100 	mov.w	r1, #0
 80039fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a02:	2100      	movs	r1, #0
 8003a04:	9102      	str	r1, [sp, #8]
 8003a06:	e9cd 2300 	strd	r2, r3, [sp]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f7fe fe36 	bl	8002682 <_ntoa_long_long>
 8003a16:	6478      	str	r0, [r7, #68]	; 0x44
 8003a18:	e016      	b.n	8003a48 <_vsnprintf+0x908>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8003a1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a1c:	1d1a      	adds	r2, r3, #4
 8003a1e:	66ba      	str	r2, [r7, #104]	; 0x68
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a26:	9305      	str	r3, [sp, #20]
 8003a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a2a:	9304      	str	r3, [sp, #16]
 8003a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2e:	9303      	str	r3, [sp, #12]
 8003a30:	2310      	movs	r3, #16
 8003a32:	9302      	str	r3, [sp, #8]
 8003a34:	2300      	movs	r3, #0
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	9200      	str	r2, [sp, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f7fe fdb7 	bl	80025b4 <_ntoa_long>
 8003a46:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	603b      	str	r3, [r7, #0]
        break;
 8003a4e:	e018      	b.n	8003a82 <_vsnprintf+0x942>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003a50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a52:	1c53      	adds	r3, r2, #1
 8003a54:	647b      	str	r3, [r7, #68]	; 0x44
 8003a56:	68fc      	ldr	r4, [r7, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68b9      	ldr	r1, [r7, #8]
 8003a5c:	2025      	movs	r0, #37	; 0x25
 8003a5e:	47a0      	blx	r4
        format++;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	3301      	adds	r3, #1
 8003a64:	603b      	str	r3, [r7, #0]
        break;
 8003a66:	e00c      	b.n	8003a82 <_vsnprintf+0x942>

      default :
        out(*format, buffer, idx++, maxlen);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	7818      	ldrb	r0, [r3, #0]
 8003a6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a6e:	1c53      	adds	r3, r2, #1
 8003a70:	647b      	str	r3, [r7, #68]	; 0x44
 8003a72:	68fc      	ldr	r4, [r7, #12]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	47a0      	blx	r4
        format++;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	603b      	str	r3, [r7, #0]
        break;
 8003a80:	bf00      	nop
  while (*format)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f47f ab6b 	bne.w	8003162 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003a8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d302      	bcc.n	8003a9a <_vsnprintf+0x95a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	1e5a      	subs	r2, r3, #1
 8003a98:	e000      	b.n	8003a9c <_vsnprintf+0x95c>
 8003a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a9c:	68fc      	ldr	r4, [r7, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3758      	adds	r7, #88	; 0x58
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bdb0      	pop	{r4, r5, r7, pc}

08003ab0 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8003ab0:	b40f      	push	{r0, r1, r2, r3}
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b086      	sub	sp, #24
 8003ab6:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8003ab8:	f107 031c 	add.w	r3, r7, #28
 8003abc:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8003abe:	1d39      	adds	r1, r7, #4
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aca:	4806      	ldr	r0, [pc, #24]	; (8003ae4 <printf_+0x34>)
 8003acc:	f7ff fb38 	bl	8003140 <_vsnprintf>
 8003ad0:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ade:	b004      	add	sp, #16
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	08002287 	.word	0x08002287

08003ae8 <vprintf_>:
  return ret;
}


int vprintf_(const char* format, va_list va)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8003af2:	f107 010c 	add.w	r1, r7, #12
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f04f 32ff 	mov.w	r2, #4294967295
 8003b00:	4803      	ldr	r0, [pc, #12]	; (8003b10 <vprintf_+0x28>)
 8003b02:	f7ff fb1d 	bl	8003140 <_vsnprintf>
 8003b06:	4603      	mov	r3, r0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	08002287 	.word	0x08002287

08003b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1a:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <HAL_MspInit+0x4c>)
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1e:	4a10      	ldr	r2, [pc, #64]	; (8003b60 <HAL_MspInit+0x4c>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	6613      	str	r3, [r2, #96]	; 0x60
 8003b26:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <HAL_MspInit+0x4c>)
 8003b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_MspInit+0x4c>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <HAL_MspInit+0x4c>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b3e:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <HAL_MspInit+0x4c>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	210f      	movs	r1, #15
 8003b4e:	f06f 0001 	mvn.w	r0, #1
 8003b52:	f000 fd5d 	bl	8004610 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000

08003b64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08c      	sub	sp, #48	; 0x30
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003b74:	2200      	movs	r2, #0
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	2037      	movs	r0, #55	; 0x37
 8003b7a:	f000 fd49 	bl	8004610 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003b7e:	2037      	movs	r0, #55	; 0x37
 8003b80:	f000 fd62 	bl	8004648 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003b84:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <HAL_InitTick+0x9c>)
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <HAL_InitTick+0x9c>)
 8003b8a:	f043 0320 	orr.w	r3, r3, #32
 8003b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b90:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <HAL_InitTick+0x9c>)
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b9c:	f107 0210 	add.w	r2, r7, #16
 8003ba0:	f107 0314 	add.w	r3, r7, #20
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 fcf8 	bl	800559c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003bac:	f001 fce0 	bl	8005570 <HAL_RCC_GetPCLK1Freq>
 8003bb0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb4:	4a13      	ldr	r2, [pc, #76]	; (8003c04 <HAL_InitTick+0xa0>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	0c9b      	lsrs	r3, r3, #18
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003bc0:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <HAL_InitTick+0xa4>)
 8003bc2:	4a12      	ldr	r2, [pc, #72]	; (8003c0c <HAL_InitTick+0xa8>)
 8003bc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8003bc6:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <HAL_InitTick+0xa4>)
 8003bc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003bcc:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003bce:	4a0e      	ldr	r2, [pc, #56]	; (8003c08 <HAL_InitTick+0xa4>)
 8003bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <HAL_InitTick+0xa4>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bda:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_InitTick+0xa4>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8003be0:	4809      	ldr	r0, [pc, #36]	; (8003c08 <HAL_InitTick+0xa4>)
 8003be2:	f002 fa29 	bl	8006038 <HAL_TIM_Base_Init>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d104      	bne.n	8003bf6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003bec:	4806      	ldr	r0, [pc, #24]	; (8003c08 <HAL_InitTick+0xa4>)
 8003bee:	f002 fa85 	bl	80060fc <HAL_TIM_Base_Start_IT>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	e000      	b.n	8003bf8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3730      	adds	r7, #48	; 0x30
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40021000 	.word	0x40021000
 8003c04:	431bde83 	.word	0x431bde83
 8003c08:	20002030 	.word	0x20002030
 8003c0c:	40001400 	.word	0x40001400

08003c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c14:	e7fe      	b.n	8003c14 <NMI_Handler+0x4>

08003c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c16:	b480      	push	{r7}
 8003c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c1a:	e7fe      	b.n	8003c1a <HardFault_Handler+0x4>

08003c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c20:	e7fe      	b.n	8003c20 <MemManage_Handler+0x4>

08003c22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c22:	b480      	push	{r7}
 8003c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c26:	e7fe      	b.n	8003c26 <BusFault_Handler+0x4>

08003c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c2c:	e7fe      	b.n	8003c2c <UsageFault_Handler+0x4>

08003c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c32:	bf00      	nop
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003c40:	4802      	ldr	r0, [pc, #8]	; (8003c4c <TIM7_IRQHandler+0x10>)
 8003c42:	f002 facb 	bl	80061dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20002030 	.word	0x20002030

08003c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c58:	4a14      	ldr	r2, [pc, #80]	; (8003cac <_sbrk+0x5c>)
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <_sbrk+0x60>)
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c64:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <_sbrk+0x64>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <_sbrk+0x64>)
 8003c6e:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <_sbrk+0x68>)
 8003c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c72:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <_sbrk+0x64>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4413      	add	r3, r2
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d207      	bcs.n	8003c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c80:	f006 f8ac 	bl	8009ddc <__errno>
 8003c84:	4603      	mov	r3, r0
 8003c86:	220c      	movs	r2, #12
 8003c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8e:	e009      	b.n	8003ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c90:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <_sbrk+0x64>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c96:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <_sbrk+0x64>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	4a05      	ldr	r2, [pc, #20]	; (8003cb4 <_sbrk+0x64>)
 8003ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20018000 	.word	0x20018000
 8003cb0:	00000400 	.word	0x00000400
 8003cb4:	200002d4 	.word	0x200002d4
 8003cb8:	200020d0 	.word	0x200020d0

08003cbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003cc0:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <SystemInit+0x5c>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	4a14      	ldr	r2, [pc, #80]	; (8003d18 <SystemInit+0x5c>)
 8003cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003cd0:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <SystemInit+0x60>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a11      	ldr	r2, [pc, #68]	; (8003d1c <SystemInit+0x60>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <SystemInit+0x60>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <SystemInit+0x60>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a0d      	ldr	r2, [pc, #52]	; (8003d1c <SystemInit+0x60>)
 8003ce8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003cec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003cf0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <SystemInit+0x60>)
 8003cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cf8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <SystemInit+0x60>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <SystemInit+0x60>)
 8003d00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003d06:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <SystemInit+0x60>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	619a      	str	r2, [r3, #24]
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	e000ed00 	.word	0xe000ed00
 8003d1c:	40021000 	.word	0x40021000

08003d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <__NVIC_GetPriorityGrouping+0x18>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	0a1b      	lsrs	r3, r3, #8
 8003d2a:	f003 0307 	and.w	r3, r3, #7
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	db0b      	blt.n	8003d66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	f003 021f 	and.w	r2, r3, #31
 8003d54:	4907      	ldr	r1, [pc, #28]	; (8003d74 <__NVIC_EnableIRQ+0x38>)
 8003d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	e000e100 	.word	0xe000e100

08003d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	6039      	str	r1, [r7, #0]
 8003d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	db0a      	blt.n	8003da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	490c      	ldr	r1, [pc, #48]	; (8003dc4 <__NVIC_SetPriority+0x4c>)
 8003d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d96:	0112      	lsls	r2, r2, #4
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003da0:	e00a      	b.n	8003db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	4908      	ldr	r1, [pc, #32]	; (8003dc8 <__NVIC_SetPriority+0x50>)
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	3b04      	subs	r3, #4
 8003db0:	0112      	lsls	r2, r2, #4
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	440b      	add	r3, r1
 8003db6:	761a      	strb	r2, [r3, #24]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	e000e100 	.word	0xe000e100
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b089      	sub	sp, #36	; 0x24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f1c3 0307 	rsb	r3, r3, #7
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	bf28      	it	cs
 8003dea:	2304      	movcs	r3, #4
 8003dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3304      	adds	r3, #4
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d902      	bls.n	8003dfc <NVIC_EncodePriority+0x30>
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3b03      	subs	r3, #3
 8003dfa:	e000      	b.n	8003dfe <NVIC_EncodePriority+0x32>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e00:	f04f 32ff 	mov.w	r2, #4294967295
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	401a      	ands	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e14:	f04f 31ff 	mov.w	r1, #4294967295
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	43d9      	mvns	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e24:	4313      	orrs	r3, r2
         );
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3724      	adds	r7, #36	; 0x24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <LL_USART_IsEnabled>:
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <LL_USART_IsEnabled+0x18>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <LL_USART_IsEnabled+0x1a>
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <LL_USART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	621a      	str	r2, [r3, #32]
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	621a      	str	r2, [r3, #32]
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2204      	movs	r2, #4
 8003e98:	621a      	str	r2, [r3, #32]
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	621a      	str	r2, [r3, #32]
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f043 0220 	orr.w	r2, r3, #32
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	601a      	str	r2, [r3, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	601a      	str	r2, [r3, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	601a      	str	r2, [r3, #0]
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f30:	2b80      	cmp	r3, #128	; 0x80
 8003f32:	d101      	bne.n	8003f38 <LL_USART_IsEnabledIT_TXE+0x18>
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <LL_USART_IsEnabledIT_TXE+0x1a>
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <LL_USART_RequestRxDataFlush>:
  * @rmtoll RQR          RXFRQ         LL_USART_RequestRxDataFlush
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->RQR, (uint16_t)USART_RQR_RXFRQ);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	8b1b      	ldrh	r3, [r3, #24]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f043 0308 	orr.w	r3, r3, #8
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	831a      	strh	r2, [r3, #24]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <uart_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t uart_init(uart_config_t* uart_cfg)
{
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	6078      	str	r0, [r7, #4]
    if (uart_cfg->uart_reg_base == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <uart_init+0x14>
    {
        return MOD_ERR_ARG;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e04c      	b.n	800401a <uart_init+0xae>
    }
    else if (!LL_USART_IsEnabled(uart_cfg->uart_reg_base))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ff54 	bl	8003e32 <LL_USART_IsEnabled>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <uart_init+0x28>
    {
    	return MOD_ERR_PERIPH;
 8003f90:	2308      	movs	r3, #8
 8003f92:	e042      	b.n	800401a <uart_init+0xae>
    }
    else
    {
		switch(uart_cfg->irq_num)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003f9a:	2b27      	cmp	r3, #39	; 0x27
 8003f9c:	dc02      	bgt.n	8003fa4 <uart_init+0x38>
 8003f9e:	2b25      	cmp	r3, #37	; 0x25
 8003fa0:	da03      	bge.n	8003faa <uart_init+0x3e>
 8003fa2:	e039      	b.n	8004018 <uart_init+0xac>
 8003fa4:	3b34      	subs	r3, #52	; 0x34
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d836      	bhi.n	8004018 <uart_init+0xac>
			case USART1_IRQn:
			case USART2_IRQn:
			case USART3_IRQn:
			case UART4_IRQn:
			case UART5_IRQn:
				memset(&uart, 0, sizeof(uart));
 8003faa:	f240 4274 	movw	r2, #1140	; 0x474
 8003fae:	2100      	movs	r1, #0
 8003fb0:	481c      	ldr	r0, [pc, #112]	; (8004024 <uart_init+0xb8>)
 8003fb2:	f005 ff5b 	bl	8009e6c <memset>
				uart.irq_num = uart_cfg->irq_num;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8003fbc:	4b19      	ldr	r3, [pc, #100]	; (8004024 <uart_init+0xb8>)
 8003fbe:	711a      	strb	r2, [r3, #4]
				uart.uart_reg_base = uart_cfg->uart_reg_base;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a17      	ldr	r2, [pc, #92]	; (8004024 <uart_init+0xb8>)
 8003fc6:	6013      	str	r3, [r2, #0]
			    mod_err_t err = cmd_register(&uart_client_info);
 8003fc8:	4817      	ldr	r0, [pc, #92]	; (8004028 <uart_init+0xbc>)
 8003fca:	f7fc ff83 	bl	8000ed4 <cmd_register>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	73fb      	strb	r3, [r7, #15]
			    LOGI(TAG, "Initialized UART");
 8003fd2:	4b16      	ldr	r3, [pc, #88]	; (800402c <uart_init+0xc0>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d01c      	beq.n	8004014 <uart_init+0xa8>
 8003fda:	f000 fa55 	bl	8004488 <HAL_GetTick>
 8003fde:	60b8      	str	r0, [r7, #8]
 8003fe0:	4b13      	ldr	r3, [pc, #76]	; (8004030 <uart_init+0xc4>)
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4a13      	ldr	r2, [pc, #76]	; (8004034 <uart_init+0xc8>)
 8003fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fec:	0999      	lsrs	r1, r3, #6
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	4b10      	ldr	r3, [pc, #64]	; (8004034 <uart_init+0xc8>)
 8003ff2:	fba3 4302 	umull	r4, r3, r3, r2
 8003ff6:	099b      	lsrs	r3, r3, #6
 8003ff8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003ffc:	fb04 f303 	mul.w	r3, r4, r3
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	4a0b      	ldr	r2, [pc, #44]	; (8004030 <uart_init+0xc4>)
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	9201      	str	r2, [sp, #4]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	460b      	mov	r3, r1
 800400c:	4a0a      	ldr	r2, [pc, #40]	; (8004038 <uart_init+0xcc>)
 800400e:	2103      	movs	r1, #3
 8004010:	f7fd fb34 	bl	800167c <log_printf>
				return err;
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	e000      	b.n	800401a <uart_init+0xae>
			default:
				return MOD_ERR_ARG;
 8004018:	2302      	movs	r3, #2
		}
    }

}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	bd90      	pop	{r4, r7, pc}
 8004022:	bf00      	nop
 8004024:	200002d8 	.word	0x200002d8
 8004028:	20000078 	.word	0x20000078
 800402c:	20000054 	.word	0x20000054
 8004030:	20000090 	.word	0x20000090
 8004034:	10624dd3 	.word	0x10624dd3
 8004038:	0800a81c 	.word	0x0800a81c

0800403c <uart_start>:

mod_err_t uart_start(void)
{
 800403c:	b590      	push	{r4, r7, lr}
 800403e:	b085      	sub	sp, #20
 8004040:	af02      	add	r7, sp, #8
    if (uart.uart_reg_base == NULL)
 8004042:	4b28      	ldr	r3, [pc, #160]	; (80040e4 <uart_start+0xa8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d126      	bne.n	8004098 <uart_start+0x5c>
    {
        LOGE(TAG, "UART not initialized");
 800404a:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <uart_start+0xac>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d020      	beq.n	8004094 <uart_start+0x58>
 8004052:	4b26      	ldr	r3, [pc, #152]	; (80040ec <uart_start+0xb0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	dd1c      	ble.n	8004094 <uart_start+0x58>
 800405a:	f000 fa15 	bl	8004488 <HAL_GetTick>
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	4b23      	ldr	r3, [pc, #140]	; (80040f0 <uart_start+0xb4>)
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a23      	ldr	r2, [pc, #140]	; (80040f4 <uart_start+0xb8>)
 8004068:	fba2 2303 	umull	r2, r3, r2, r3
 800406c:	0999      	lsrs	r1, r3, #6
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <uart_start+0xb8>)
 8004072:	fba3 4302 	umull	r4, r3, r3, r2
 8004076:	099b      	lsrs	r3, r3, #6
 8004078:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800407c:	fb04 f303 	mul.w	r3, r4, r3
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	4a1b      	ldr	r2, [pc, #108]	; (80040f0 <uart_start+0xb4>)
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	9201      	str	r2, [sp, #4]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	460b      	mov	r3, r1
 800408c:	4a1a      	ldr	r2, [pc, #104]	; (80040f8 <uart_start+0xbc>)
 800408e:	2101      	movs	r1, #1
 8004090:	f7fd faf4 	bl	800167c <log_printf>
        return MOD_ERR_NOT_INIT;
 8004094:	2306      	movs	r3, #6
 8004096:	e020      	b.n	80040da <uart_start+0x9e>
    }

    LL_USART_EnableIT_TXE(uart.uart_reg_base);  // Generate interrupt whenever TXE flag is set.
 8004098:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <uart_start+0xa8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff ff1f 	bl	8003ee0 <LL_USART_EnableIT_TXE>
    LL_USART_EnableIT_RXNE(uart.uart_reg_base); // Generate interrupt whenever RXNE flag is set.
 80040a2:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <uart_start+0xa8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff ff0a 	bl	8003ec0 <LL_USART_EnableIT_RXNE>

    /* Set group and sub priority to highest priority (0). */
    __NVIC_SetPriority(uart.irq_num, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 80040ac:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <uart_start+0xa8>)
 80040ae:	f993 4004 	ldrsb.w	r4, [r3, #4]
 80040b2:	f7ff fe35 	bl	8003d20 <__NVIC_GetPriorityGrouping>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2200      	movs	r2, #0
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff fe85 	bl	8003dcc <NVIC_EncodePriority>
 80040c2:	4603      	mov	r3, r0
 80040c4:	4619      	mov	r1, r3
 80040c6:	4620      	mov	r0, r4
 80040c8:	f7ff fe56 	bl	8003d78 <__NVIC_SetPriority>

    /* Enable UARTx interrupt channel. */
    __NVIC_EnableIRQ(uart.irq_num);
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <uart_start+0xa8>)
 80040ce:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff fe32 	bl	8003d3c <__NVIC_EnableIRQ>

    return MOD_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd90      	pop	{r4, r7, pc}
 80040e2:	bf00      	nop
 80040e4:	200002d8 	.word	0x200002d8
 80040e8:	20000054 	.word	0x20000054
 80040ec:	20000058 	.word	0x20000058
 80040f0:	20000090 	.word	0x20000090
 80040f4:	10624dd3 	.word	0x10624dd3
 80040f8:	0800a848 	.word	0x0800a848

080040fc <uart_putc>:

mod_err_t uart_putc(char c)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	71fb      	strb	r3, [r7, #7]

    uint16_t next_put_idx = (uart.tx_buf_put_idx + 1) % UART_TX_BUF_SIZE;
 8004106:	4b23      	ldr	r3, [pc, #140]	; (8004194 <uart_putc+0x98>)
 8004108:	899b      	ldrh	r3, [r3, #12]
 800410a:	3301      	adds	r3, #1
 800410c:	425a      	negs	r2, r3
 800410e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004112:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004116:	bf58      	it	pl
 8004118:	4253      	negpl	r3, r2
 800411a:	81fb      	strh	r3, [r7, #14]

    /* Tx circular buffer is full. */
    if (next_put_idx == uart.tx_buf_get_idx) {
 800411c:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <uart_putc+0x98>)
 800411e:	895b      	ldrh	r3, [r3, #10]
 8004120:	89fa      	ldrh	r2, [r7, #14]
 8004122:	429a      	cmp	r2, r3
 8004124:	d111      	bne.n	800414a <uart_putc+0x4e>
        INC_SAT_U16(uart_pms[CNT_TX_BUF_OVERRUN]);
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <uart_putc+0x9c>)
 8004128:	891a      	ldrh	r2, [r3, #8]
 800412a:	4b1b      	ldr	r3, [pc, #108]	; (8004198 <uart_putc+0x9c>)
 800412c:	891b      	ldrh	r3, [r3, #8]
 800412e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004132:	428b      	cmp	r3, r1
 8004134:	bf14      	ite	ne
 8004136:	2301      	movne	r3, #1
 8004138:	2300      	moveq	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	b29b      	uxth	r3, r3
 800413e:	4413      	add	r3, r2
 8004140:	b29a      	uxth	r2, r3
 8004142:	4b15      	ldr	r3, [pc, #84]	; (8004198 <uart_putc+0x9c>)
 8004144:	811a      	strh	r2, [r3, #8]
        return MOD_ERR_BUF_OVERRUN;
 8004146:	2305      	movs	r3, #5
 8004148:	e01f      	b.n	800418a <uart_putc+0x8e>
    }

    /* Place char in buffer */
    uart.tx_buf[uart.tx_buf_put_idx] = c;
 800414a:	4b12      	ldr	r3, [pc, #72]	; (8004194 <uart_putc+0x98>)
 800414c:	899b      	ldrh	r3, [r3, #12]
 800414e:	461a      	mov	r2, r3
 8004150:	4b10      	ldr	r3, [pc, #64]	; (8004194 <uart_putc+0x98>)
 8004152:	4413      	add	r3, r2
 8004154:	79fa      	ldrb	r2, [r7, #7]
 8004156:	739a      	strb	r2, [r3, #14]
    uart.tx_buf_put_idx = next_put_idx;
 8004158:	4a0e      	ldr	r2, [pc, #56]	; (8004194 <uart_putc+0x98>)
 800415a:	89fb      	ldrh	r3, [r7, #14]
 800415c:	8193      	strh	r3, [r2, #12]

    // Ensure TXE interrupt is enabled.
    if (uart.uart_reg_base != NULL && !LL_USART_IsEnabledIT_TXE(uart.uart_reg_base)) {
 800415e:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <uart_putc+0x98>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d010      	beq.n	8004188 <uart_putc+0x8c>
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <uart_putc+0x98>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fed8 	bl	8003f20 <LL_USART_IsEnabledIT_TXE>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d108      	bne.n	8004188 <uart_putc+0x8c>
  __ASM volatile ("cpsid i" : : : "memory");
 8004176:	b672      	cpsid	i
}
 8004178:	bf00      	nop
        __disable_irq();
        LL_USART_EnableIT_TXE(uart.uart_reg_base);
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <uart_putc+0x98>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff feae 	bl	8003ee0 <LL_USART_EnableIT_TXE>
  __ASM volatile ("cpsie i" : : : "memory");
 8004184:	b662      	cpsie	i
}
 8004186:	bf00      	nop
        __enable_irq();
    }

    return MOD_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	200002d8 	.word	0x200002d8
 8004198:	2000074c 	.word	0x2000074c

0800419c <USART1_IRQHandler>:
////////////////////////////////////////////////////////////////////////////////
// Interrupt handlers
////////////////////////////////////////////////////////////////////////////////

void USART1_IRQHandler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
    UART_ISR();
 80041a0:	f000 f88a 	bl	80042b8 <UART_ISR>
}
 80041a4:	bf00      	nop
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
    UART_ISR();
 80041ac:	f000 f884 	bl	80042b8 <UART_ISR>
}
 80041b0:	bf00      	nop
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
    UART_ISR();
 80041b8:	f000 f87e 	bl	80042b8 <UART_ISR>
}
 80041bc:	bf00      	nop
 80041be:	bd80      	pop	{r7, pc}

080041c0 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
    UART_ISR();
 80041c4:	f000 f878 	bl	80042b8 <UART_ISR>
}
 80041c8:	bf00      	nop
 80041ca:	bd80      	pop	{r7, pc}

080041cc <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
    UART_ISR();
 80041d0:	f000 f872 	bl	80042b8 <UART_ISR>
}
 80041d4:	bf00      	nop
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <read_rdr>:

/**
 * @brief Read character from receive data register (RDR) and place into receive buffer.
 */
static void read_rdr(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
    uint16_t next_rx_put_idx = (uart.rx_buf_put_idx + 1) % UART_RX_BUF_SIZE;
 80041de:	4b1e      	ldr	r3, [pc, #120]	; (8004258 <read_rdr+0x80>)
 80041e0:	891b      	ldrh	r3, [r3, #8]
 80041e2:	3301      	adds	r3, #1
 80041e4:	4a1d      	ldr	r2, [pc, #116]	; (800425c <read_rdr+0x84>)
 80041e6:	fb82 1203 	smull	r1, r2, r2, r3
 80041ea:	1151      	asrs	r1, r2, #5
 80041ec:	17da      	asrs	r2, r3, #31
 80041ee:	1a8a      	subs	r2, r1, r2
 80041f0:	2164      	movs	r1, #100	; 0x64
 80041f2:	fb01 f202 	mul.w	r2, r1, r2
 80041f6:	1a9a      	subs	r2, r3, r2
 80041f8:	4613      	mov	r3, r2
 80041fa:	80fb      	strh	r3, [r7, #6]
   
    if (next_rx_put_idx == uart.rx_buf_get_idx)
 80041fc:	4b16      	ldr	r3, [pc, #88]	; (8004258 <read_rdr+0x80>)
 80041fe:	88db      	ldrh	r3, [r3, #6]
 8004200:	88fa      	ldrh	r2, [r7, #6]
 8004202:	429a      	cmp	r2, r3
 8004204:	d115      	bne.n	8004232 <read_rdr+0x5a>
    {
        INC_SAT_U16(uart_pms[CNT_RX_BUF_OVERRUN]);
 8004206:	4b16      	ldr	r3, [pc, #88]	; (8004260 <read_rdr+0x88>)
 8004208:	895a      	ldrh	r2, [r3, #10]
 800420a:	4b15      	ldr	r3, [pc, #84]	; (8004260 <read_rdr+0x88>)
 800420c:	895b      	ldrh	r3, [r3, #10]
 800420e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004212:	428b      	cmp	r3, r1
 8004214:	bf14      	ite	ne
 8004216:	2301      	movne	r3, #1
 8004218:	2300      	moveq	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	b29b      	uxth	r3, r3
 800421e:	4413      	add	r3, r2
 8004220:	b29a      	uxth	r2, r3
 8004222:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <read_rdr+0x88>)
 8004224:	815a      	strh	r2, [r3, #10]
        LL_USART_RequestRxDataFlush(uart.uart_reg_base); // Drop character.
 8004226:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <read_rdr+0x80>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff fe8b 	bl	8003f46 <LL_USART_RequestRxDataFlush>
    else
    {
        uart.rx_buf[uart.rx_buf_put_idx] = uart.uart_reg_base->RDR & 0xFFU; // Clears RXNE flag.
        uart.rx_buf_put_idx = next_rx_put_idx;
    }
}
 8004230:	e00e      	b.n	8004250 <read_rdr+0x78>
        uart.rx_buf[uart.rx_buf_put_idx] = uart.uart_reg_base->RDR & 0xFFU; // Clears RXNE flag.
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <read_rdr+0x80>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004238:	b29a      	uxth	r2, r3
 800423a:	4b07      	ldr	r3, [pc, #28]	; (8004258 <read_rdr+0x80>)
 800423c:	891b      	ldrh	r3, [r3, #8]
 800423e:	4619      	mov	r1, r3
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	4b05      	ldr	r3, [pc, #20]	; (8004258 <read_rdr+0x80>)
 8004244:	440b      	add	r3, r1
 8004246:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
        uart.rx_buf_put_idx = next_rx_put_idx;
 800424a:	4a03      	ldr	r2, [pc, #12]	; (8004258 <read_rdr+0x80>)
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	8113      	strh	r3, [r2, #8]
}
 8004250:	bf00      	nop
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	200002d8 	.word	0x200002d8
 800425c:	51eb851f 	.word	0x51eb851f
 8004260:	2000074c 	.word	0x2000074c

08004264 <write_tdr>:

/**
 * @brief Write character from transmit buffer to transmit data register (TDR).
 */
static void write_tdr(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
	if (uart.tx_buf_get_idx == uart.tx_buf_put_idx)
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <write_tdr+0x50>)
 800426a:	895a      	ldrh	r2, [r3, #10]
 800426c:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <write_tdr+0x50>)
 800426e:	899b      	ldrh	r3, [r3, #12]
 8004270:	429a      	cmp	r2, r3
 8004272:	d105      	bne.n	8004280 <write_tdr+0x1c>
	{
		/* Nothing to transmit, disable TXE flag from generating an interrupt. */
		LL_USART_DisableIT_TXE(uart.uart_reg_base);
 8004274:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <write_tdr+0x50>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fe41 	bl	8003f00 <LL_USART_DisableIT_TXE>
	else
	{
		uart.uart_reg_base->TDR = uart.tx_buf[uart.tx_buf_get_idx]; // Clears TXE flag.
		uart.tx_buf_get_idx = (uart.tx_buf_get_idx + 1) % UART_TX_BUF_SIZE;
	}
}
 800427e:	e016      	b.n	80042ae <write_tdr+0x4a>
		uart.uart_reg_base->TDR = uart.tx_buf[uart.tx_buf_get_idx]; // Clears TXE flag.
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <write_tdr+0x50>)
 8004282:	895b      	ldrh	r3, [r3, #10]
 8004284:	461a      	mov	r2, r3
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <write_tdr+0x50>)
 8004288:	4413      	add	r3, r2
 800428a:	7b9a      	ldrb	r2, [r3, #14]
 800428c:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <write_tdr+0x50>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	b292      	uxth	r2, r2
 8004292:	851a      	strh	r2, [r3, #40]	; 0x28
		uart.tx_buf_get_idx = (uart.tx_buf_get_idx + 1) % UART_TX_BUF_SIZE;
 8004294:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <write_tdr+0x50>)
 8004296:	895b      	ldrh	r3, [r3, #10]
 8004298:	3301      	adds	r3, #1
 800429a:	425a      	negs	r2, r3
 800429c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80042a4:	bf58      	it	pl
 80042a6:	4253      	negpl	r3, r2
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	4b02      	ldr	r3, [pc, #8]	; (80042b4 <write_tdr+0x50>)
 80042ac:	815a      	strh	r2, [r3, #10]
}
 80042ae:	bf00      	nop
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	200002d8 	.word	0x200002d8

080042b8 <UART_ISR>:


static void UART_ISR(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
    /* Read interrupt status register. */
    uint32_t status_reg = uart.uart_reg_base->ISR;
 80042be:	4b41      	ldr	r3, [pc, #260]	; (80043c4 <UART_ISR+0x10c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	607b      	str	r3, [r7, #4]

    /* Service interrupt flags. */
    if (status_reg & USART_ISR_RXNE_Msk)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <UART_ISR+0x1c>
    {
        read_rdr();
 80042d0:	f7ff ff82 	bl	80041d8 <read_rdr>
    }
    if (status_reg & USART_ISR_TXE_Msk)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <UART_ISR+0x2a>
    {
    	write_tdr();
 80042de:	f7ff ffc1 	bl	8004264 <write_tdr>
    }

    /* Check error flags. */
    if (status_reg & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE | USART_ISR_PE))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d067      	beq.n	80043bc <UART_ISR+0x104>
    {
          if (status_reg & LL_USART_ISR_ORE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d014      	beq.n	8004320 <UART_ISR+0x68>
          {   // An overrun error occurs if a character is received and RXNE has not been reset.
        	  // The RDR register content is not lost but the shift register is overwritten by incoming data.
              INC_SAT_U16(uart_pms[CNT_RX_UART_ORE]);
 80042f6:	4b34      	ldr	r3, [pc, #208]	; (80043c8 <UART_ISR+0x110>)
 80042f8:	881a      	ldrh	r2, [r3, #0]
 80042fa:	4b33      	ldr	r3, [pc, #204]	; (80043c8 <UART_ISR+0x110>)
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004302:	428b      	cmp	r3, r1
 8004304:	bf14      	ite	ne
 8004306:	2301      	movne	r3, #1
 8004308:	2300      	moveq	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	b29b      	uxth	r3, r3
 800430e:	4413      	add	r3, r2
 8004310:	b29a      	uxth	r2, r3
 8004312:	4b2d      	ldr	r3, [pc, #180]	; (80043c8 <UART_ISR+0x110>)
 8004314:	801a      	strh	r2, [r3, #0]
              LL_USART_ClearFlag_ORE(uart.uart_reg_base);
 8004316:	4b2b      	ldr	r3, [pc, #172]	; (80043c4 <UART_ISR+0x10c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff fdc3 	bl	8003ea6 <LL_USART_ClearFlag_ORE>
          }
          if (status_reg & LL_USART_ISR_NE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	d014      	beq.n	8004354 <UART_ISR+0x9c>
          {
              INC_SAT_U16(uart_pms[CNT_RX_UART_NE]);
 800432a:	4b27      	ldr	r3, [pc, #156]	; (80043c8 <UART_ISR+0x110>)
 800432c:	885a      	ldrh	r2, [r3, #2]
 800432e:	4b26      	ldr	r3, [pc, #152]	; (80043c8 <UART_ISR+0x110>)
 8004330:	885b      	ldrh	r3, [r3, #2]
 8004332:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004336:	428b      	cmp	r3, r1
 8004338:	bf14      	ite	ne
 800433a:	2301      	movne	r3, #1
 800433c:	2300      	moveq	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	b29b      	uxth	r3, r3
 8004342:	4413      	add	r3, r2
 8004344:	b29a      	uxth	r2, r3
 8004346:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <UART_ISR+0x110>)
 8004348:	805a      	strh	r2, [r3, #2]
              LL_USART_ClearFlag_NE(uart.uart_reg_base);
 800434a:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <UART_ISR+0x10c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fd9c 	bl	8003e8c <LL_USART_ClearFlag_NE>
          }
          if (status_reg & LL_USART_ISR_FE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d014      	beq.n	8004388 <UART_ISR+0xd0>
          {
              INC_SAT_U16(uart_pms[CNT_RX_UART_FE]);
 800435e:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <UART_ISR+0x110>)
 8004360:	889a      	ldrh	r2, [r3, #4]
 8004362:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <UART_ISR+0x110>)
 8004364:	889b      	ldrh	r3, [r3, #4]
 8004366:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800436a:	428b      	cmp	r3, r1
 800436c:	bf14      	ite	ne
 800436e:	2301      	movne	r3, #1
 8004370:	2300      	moveq	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	b29b      	uxth	r3, r3
 8004376:	4413      	add	r3, r2
 8004378:	b29a      	uxth	r2, r3
 800437a:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <UART_ISR+0x110>)
 800437c:	809a      	strh	r2, [r3, #4]
              LL_USART_ClearFlag_FE(uart.uart_reg_base);
 800437e:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <UART_ISR+0x10c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff fd75 	bl	8003e72 <LL_USART_ClearFlag_FE>
          }
          if (status_reg & LL_USART_ISR_PE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d014      	beq.n	80043bc <UART_ISR+0x104>
          {
              INC_SAT_U16(uart_pms[CNT_RX_UART_PE]);
 8004392:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <UART_ISR+0x110>)
 8004394:	88da      	ldrh	r2, [r3, #6]
 8004396:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <UART_ISR+0x110>)
 8004398:	88db      	ldrh	r3, [r3, #6]
 800439a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800439e:	428b      	cmp	r3, r1
 80043a0:	bf14      	ite	ne
 80043a2:	2301      	movne	r3, #1
 80043a4:	2300      	moveq	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <UART_ISR+0x110>)
 80043b0:	80da      	strh	r2, [r3, #6]
              LL_USART_ClearFlag_PE(uart.uart_reg_base);
 80043b2:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <UART_ISR+0x10c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fd4e 	bl	8003e58 <LL_USART_ClearFlag_PE>
          }
    }

}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	200002d8 	.word	0x200002d8
 80043c8:	2000074c 	.word	0x2000074c

080043cc <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 80043cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004404 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80043d0:	f7ff fc74 	bl	8003cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80043d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80043d6:	e003      	b.n	80043e0 <LoopCopyDataInit>

080043d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80043da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80043dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80043de:	3104      	adds	r1, #4

080043e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80043e0:	480a      	ldr	r0, [pc, #40]	; (800440c <LoopForever+0xa>)
	ldr	r3, =_edata
 80043e2:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <LoopForever+0xe>)
	adds	r2, r0, r1
 80043e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80043e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80043e8:	d3f6      	bcc.n	80043d8 <CopyDataInit>
	ldr	r2, =_sbss
 80043ea:	4a0a      	ldr	r2, [pc, #40]	; (8004414 <LoopForever+0x12>)
	b	LoopFillZerobss
 80043ec:	e002      	b.n	80043f4 <LoopFillZerobss>

080043ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80043ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80043f0:	f842 3b04 	str.w	r3, [r2], #4

080043f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80043f4:	4b08      	ldr	r3, [pc, #32]	; (8004418 <LoopForever+0x16>)
	cmp	r2, r3
 80043f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80043f8:	d3f9      	bcc.n	80043ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043fa:	f005 fcf5 	bl	8009de8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80043fe:	f7fd fdaf 	bl	8001f60 <main>

08004402 <LoopForever>:

LoopForever:
    b LoopForever
 8004402:	e7fe      	b.n	8004402 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004404:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004408:	0800aa64 	.word	0x0800aa64
	ldr	r0, =_sdata
 800440c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004410:	20000104 	.word	0x20000104
	ldr	r2, =_sbss
 8004414:	20000104 	.word	0x20000104
	ldr	r3, = _ebss
 8004418:	200020d0 	.word	0x200020d0

0800441c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800441c:	e7fe      	b.n	800441c <ADC1_2_IRQHandler>
	...

08004420 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800442a:	4b0c      	ldr	r3, [pc, #48]	; (800445c <HAL_Init+0x3c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a0b      	ldr	r2, [pc, #44]	; (800445c <HAL_Init+0x3c>)
 8004430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004434:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004436:	2003      	movs	r0, #3
 8004438:	f000 f8df 	bl	80045fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800443c:	2000      	movs	r0, #0
 800443e:	f7ff fb91 	bl	8003b64 <HAL_InitTick>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	71fb      	strb	r3, [r7, #7]
 800444c:	e001      	b.n	8004452 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800444e:	f7ff fb61 	bl	8003b14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004452:	79fb      	ldrb	r3, [r7, #7]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40022000 	.word	0x40022000

08004460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_IncTick+0x20>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_IncTick+0x24>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4413      	add	r3, r2
 8004470:	4a04      	ldr	r2, [pc, #16]	; (8004484 <HAL_IncTick+0x24>)
 8004472:	6013      	str	r3, [r2, #0]
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20000098 	.word	0x20000098
 8004484:	2000207c 	.word	0x2000207c

08004488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return uwTick;
 800448c:	4b03      	ldr	r3, [pc, #12]	; (800449c <HAL_GetTick+0x14>)
 800448e:	681b      	ldr	r3, [r3, #0]
}
 8004490:	4618      	mov	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	2000207c 	.word	0x2000207c

080044a0 <__NVIC_SetPriorityGrouping>:
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b0:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <__NVIC_SetPriorityGrouping+0x44>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044bc:	4013      	ands	r3, r2
 80044be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044d2:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <__NVIC_SetPriorityGrouping+0x44>)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	60d3      	str	r3, [r2, #12]
}
 80044d8:	bf00      	nop
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000ed00 	.word	0xe000ed00

080044e8 <__NVIC_GetPriorityGrouping>:
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044ec:	4b04      	ldr	r3, [pc, #16]	; (8004500 <__NVIC_GetPriorityGrouping+0x18>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	0a1b      	lsrs	r3, r3, #8
 80044f2:	f003 0307 	and.w	r3, r3, #7
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <__NVIC_EnableIRQ>:
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800450e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004512:	2b00      	cmp	r3, #0
 8004514:	db0b      	blt.n	800452e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	f003 021f 	and.w	r2, r3, #31
 800451c:	4907      	ldr	r1, [pc, #28]	; (800453c <__NVIC_EnableIRQ+0x38>)
 800451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	2001      	movs	r0, #1
 8004526:	fa00 f202 	lsl.w	r2, r0, r2
 800452a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	e000e100 	.word	0xe000e100

08004540 <__NVIC_SetPriority>:
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	6039      	str	r1, [r7, #0]
 800454a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800454c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004550:	2b00      	cmp	r3, #0
 8004552:	db0a      	blt.n	800456a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	b2da      	uxtb	r2, r3
 8004558:	490c      	ldr	r1, [pc, #48]	; (800458c <__NVIC_SetPriority+0x4c>)
 800455a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455e:	0112      	lsls	r2, r2, #4
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	440b      	add	r3, r1
 8004564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004568:	e00a      	b.n	8004580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	b2da      	uxtb	r2, r3
 800456e:	4908      	ldr	r1, [pc, #32]	; (8004590 <__NVIC_SetPriority+0x50>)
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	3b04      	subs	r3, #4
 8004578:	0112      	lsls	r2, r2, #4
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	440b      	add	r3, r1
 800457e:	761a      	strb	r2, [r3, #24]
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	e000e100 	.word	0xe000e100
 8004590:	e000ed00 	.word	0xe000ed00

08004594 <NVIC_EncodePriority>:
{
 8004594:	b480      	push	{r7}
 8004596:	b089      	sub	sp, #36	; 0x24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f1c3 0307 	rsb	r3, r3, #7
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	bf28      	it	cs
 80045b2:	2304      	movcs	r3, #4
 80045b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3304      	adds	r3, #4
 80045ba:	2b06      	cmp	r3, #6
 80045bc:	d902      	bls.n	80045c4 <NVIC_EncodePriority+0x30>
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3b03      	subs	r3, #3
 80045c2:	e000      	b.n	80045c6 <NVIC_EncodePriority+0x32>
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c8:	f04f 32ff 	mov.w	r2, #4294967295
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	43da      	mvns	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	401a      	ands	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045dc:	f04f 31ff 	mov.w	r1, #4294967295
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	fa01 f303 	lsl.w	r3, r1, r3
 80045e6:	43d9      	mvns	r1, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ec:	4313      	orrs	r3, r2
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3724      	adds	r7, #36	; 0x24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b082      	sub	sp, #8
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7ff ff4c 	bl	80044a0 <__NVIC_SetPriorityGrouping>
}
 8004608:	bf00      	nop
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004622:	f7ff ff61 	bl	80044e8 <__NVIC_GetPriorityGrouping>
 8004626:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	6978      	ldr	r0, [r7, #20]
 800462e:	f7ff ffb1 	bl	8004594 <NVIC_EncodePriority>
 8004632:	4602      	mov	r2, r0
 8004634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004638:	4611      	mov	r1, r2
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff ff80 	bl	8004540 <__NVIC_SetPriority>
}
 8004640:	bf00      	nop
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff ff54 	bl	8004504 <__NVIC_EnableIRQ>
}
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004672:	e17f      	b.n	8004974 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	2101      	movs	r1, #1
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	fa01 f303 	lsl.w	r3, r1, r3
 8004680:	4013      	ands	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 8171 	beq.w	800496e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d00b      	beq.n	80046ac <HAL_GPIO_Init+0x48>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d007      	beq.n	80046ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046a0:	2b11      	cmp	r3, #17
 80046a2:	d003      	beq.n	80046ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b12      	cmp	r3, #18
 80046aa:	d130      	bne.n	800470e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	2203      	movs	r2, #3
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4013      	ands	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046e2:	2201      	movs	r2, #1
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43db      	mvns	r3, r3
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4013      	ands	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	f003 0201 	and.w	r2, r3, #1
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	2b03      	cmp	r3, #3
 8004718:	d118      	bne.n	800474c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004720:	2201      	movs	r2, #1
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4013      	ands	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	08db      	lsrs	r3, r3, #3
 8004736:	f003 0201 	and.w	r2, r3, #1
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	2203      	movs	r2, #3
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4013      	ands	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d003      	beq.n	800478c <HAL_GPIO_Init+0x128>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b12      	cmp	r3, #18
 800478a:	d123      	bne.n	80047d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	08da      	lsrs	r2, r3, #3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3208      	adds	r2, #8
 8004794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004798:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	220f      	movs	r2, #15
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4013      	ands	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	08da      	lsrs	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3208      	adds	r2, #8
 80047ce:	6939      	ldr	r1, [r7, #16]
 80047d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	2203      	movs	r2, #3
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	43db      	mvns	r3, r3
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4013      	ands	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 0203 	and.w	r2, r3, #3
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80ac 	beq.w	800496e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004816:	4b5f      	ldr	r3, [pc, #380]	; (8004994 <HAL_GPIO_Init+0x330>)
 8004818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481a:	4a5e      	ldr	r2, [pc, #376]	; (8004994 <HAL_GPIO_Init+0x330>)
 800481c:	f043 0301 	orr.w	r3, r3, #1
 8004820:	6613      	str	r3, [r2, #96]	; 0x60
 8004822:	4b5c      	ldr	r3, [pc, #368]	; (8004994 <HAL_GPIO_Init+0x330>)
 8004824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	60bb      	str	r3, [r7, #8]
 800482c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800482e:	4a5a      	ldr	r2, [pc, #360]	; (8004998 <HAL_GPIO_Init+0x334>)
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	089b      	lsrs	r3, r3, #2
 8004834:	3302      	adds	r3, #2
 8004836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	220f      	movs	r2, #15
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4013      	ands	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004858:	d025      	beq.n	80048a6 <HAL_GPIO_Init+0x242>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a4f      	ldr	r2, [pc, #316]	; (800499c <HAL_GPIO_Init+0x338>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01f      	beq.n	80048a2 <HAL_GPIO_Init+0x23e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a4e      	ldr	r2, [pc, #312]	; (80049a0 <HAL_GPIO_Init+0x33c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d019      	beq.n	800489e <HAL_GPIO_Init+0x23a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a4d      	ldr	r2, [pc, #308]	; (80049a4 <HAL_GPIO_Init+0x340>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <HAL_GPIO_Init+0x236>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a4c      	ldr	r2, [pc, #304]	; (80049a8 <HAL_GPIO_Init+0x344>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00d      	beq.n	8004896 <HAL_GPIO_Init+0x232>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a4b      	ldr	r2, [pc, #300]	; (80049ac <HAL_GPIO_Init+0x348>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d007      	beq.n	8004892 <HAL_GPIO_Init+0x22e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a4a      	ldr	r2, [pc, #296]	; (80049b0 <HAL_GPIO_Init+0x34c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d101      	bne.n	800488e <HAL_GPIO_Init+0x22a>
 800488a:	2306      	movs	r3, #6
 800488c:	e00c      	b.n	80048a8 <HAL_GPIO_Init+0x244>
 800488e:	2307      	movs	r3, #7
 8004890:	e00a      	b.n	80048a8 <HAL_GPIO_Init+0x244>
 8004892:	2305      	movs	r3, #5
 8004894:	e008      	b.n	80048a8 <HAL_GPIO_Init+0x244>
 8004896:	2304      	movs	r3, #4
 8004898:	e006      	b.n	80048a8 <HAL_GPIO_Init+0x244>
 800489a:	2303      	movs	r3, #3
 800489c:	e004      	b.n	80048a8 <HAL_GPIO_Init+0x244>
 800489e:	2302      	movs	r3, #2
 80048a0:	e002      	b.n	80048a8 <HAL_GPIO_Init+0x244>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <HAL_GPIO_Init+0x244>
 80048a6:	2300      	movs	r3, #0
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	f002 0203 	and.w	r2, r2, #3
 80048ae:	0092      	lsls	r2, r2, #2
 80048b0:	4093      	lsls	r3, r2
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048b8:	4937      	ldr	r1, [pc, #220]	; (8004998 <HAL_GPIO_Init+0x334>)
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	089b      	lsrs	r3, r3, #2
 80048be:	3302      	adds	r3, #2
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048c6:	4b3b      	ldr	r3, [pc, #236]	; (80049b4 <HAL_GPIO_Init+0x350>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	43db      	mvns	r3, r3
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4013      	ands	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048ea:	4a32      	ldr	r2, [pc, #200]	; (80049b4 <HAL_GPIO_Init+0x350>)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80048f0:	4b30      	ldr	r3, [pc, #192]	; (80049b4 <HAL_GPIO_Init+0x350>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	43db      	mvns	r3, r3
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4013      	ands	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004914:	4a27      	ldr	r2, [pc, #156]	; (80049b4 <HAL_GPIO_Init+0x350>)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800491a:	4b26      	ldr	r3, [pc, #152]	; (80049b4 <HAL_GPIO_Init+0x350>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	43db      	mvns	r3, r3
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4013      	ands	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800493e:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <HAL_GPIO_Init+0x350>)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004944:	4b1b      	ldr	r3, [pc, #108]	; (80049b4 <HAL_GPIO_Init+0x350>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	43db      	mvns	r3, r3
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4013      	ands	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004968:	4a12      	ldr	r2, [pc, #72]	; (80049b4 <HAL_GPIO_Init+0x350>)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	3301      	adds	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	fa22 f303 	lsr.w	r3, r2, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	f47f ae78 	bne.w	8004674 <HAL_GPIO_Init+0x10>
  }
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000
 8004998:	40010000 	.word	0x40010000
 800499c:	48000400 	.word	0x48000400
 80049a0:	48000800 	.word	0x48000800
 80049a4:	48000c00 	.word	0x48000c00
 80049a8:	48001000 	.word	0x48001000
 80049ac:	48001400 	.word	0x48001400
 80049b0:	48001800 	.word	0x48001800
 80049b4:	40010400 	.word	0x40010400

080049b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	807b      	strh	r3, [r7, #2]
 80049c4:	4613      	mov	r3, r2
 80049c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049c8:	787b      	ldrb	r3, [r7, #1]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049ce:	887a      	ldrh	r2, [r7, #2]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049d4:	e002      	b.n	80049dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049d6:	887a      	ldrh	r2, [r7, #2]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049ec:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <HAL_PWREx_GetVoltageRange+0x18>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40007000 	.word	0x40007000

08004a04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a12:	d130      	bne.n	8004a76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a14:	4b23      	ldr	r3, [pc, #140]	; (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a20:	d038      	beq.n	8004a94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a22:	4b20      	ldr	r3, [pc, #128]	; (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a2a:	4a1e      	ldr	r2, [pc, #120]	; (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a32:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2232      	movs	r2, #50	; 0x32
 8004a38:	fb02 f303 	mul.w	r3, r2, r3
 8004a3c:	4a1b      	ldr	r2, [pc, #108]	; (8004aac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	0c9b      	lsrs	r3, r3, #18
 8004a44:	3301      	adds	r3, #1
 8004a46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a48:	e002      	b.n	8004a50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a50:	4b14      	ldr	r3, [pc, #80]	; (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5c:	d102      	bne.n	8004a64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1f2      	bne.n	8004a4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a64:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a70:	d110      	bne.n	8004a94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e00f      	b.n	8004a96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a82:	d007      	beq.n	8004a94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a84:	4b07      	ldr	r3, [pc, #28]	; (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a8c:	4a05      	ldr	r2, [pc, #20]	; (8004aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40007000 	.word	0x40007000
 8004aa8:	2000005c 	.word	0x2000005c
 8004aac:	431bde83 	.word	0x431bde83

08004ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e3d4      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ac2:	4ba1      	ldr	r3, [pc, #644]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004acc:	4b9e      	ldr	r3, [pc, #632]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 80e4 	beq.w	8004cac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <HAL_RCC_OscConfig+0x4a>
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	2b0c      	cmp	r3, #12
 8004aee:	f040 808b 	bne.w	8004c08 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	f040 8087 	bne.w	8004c08 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004afa:	4b93      	ldr	r3, [pc, #588]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <HAL_RCC_OscConfig+0x62>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e3ac      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1a      	ldr	r2, [r3, #32]
 8004b16:	4b8c      	ldr	r3, [pc, #560]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d004      	beq.n	8004b2c <HAL_RCC_OscConfig+0x7c>
 8004b22:	4b89      	ldr	r3, [pc, #548]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b2a:	e005      	b.n	8004b38 <HAL_RCC_OscConfig+0x88>
 8004b2c:	4b86      	ldr	r3, [pc, #536]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b32:	091b      	lsrs	r3, r3, #4
 8004b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d223      	bcs.n	8004b84 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fd5d 	bl	8005600 <RCC_SetFlashLatencyFromMSIRange>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e38d      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b50:	4b7d      	ldr	r3, [pc, #500]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a7c      	ldr	r2, [pc, #496]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b56:	f043 0308 	orr.w	r3, r3, #8
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	4b7a      	ldr	r3, [pc, #488]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	4977      	ldr	r1, [pc, #476]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b6e:	4b76      	ldr	r3, [pc, #472]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	4972      	ldr	r1, [pc, #456]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	604b      	str	r3, [r1, #4]
 8004b82:	e025      	b.n	8004bd0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b84:	4b70      	ldr	r3, [pc, #448]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a6f      	ldr	r2, [pc, #444]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b8a:	f043 0308 	orr.w	r3, r3, #8
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	4b6d      	ldr	r3, [pc, #436]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	496a      	ldr	r1, [pc, #424]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ba2:	4b69      	ldr	r3, [pc, #420]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	4965      	ldr	r1, [pc, #404]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d109      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fd1d 	bl	8005600 <RCC_SetFlashLatencyFromMSIRange>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e34d      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bd0:	f000 fc36 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	4b5c      	ldr	r3, [pc, #368]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	091b      	lsrs	r3, r3, #4
 8004bdc:	f003 030f 	and.w	r3, r3, #15
 8004be0:	495a      	ldr	r1, [pc, #360]	; (8004d4c <HAL_RCC_OscConfig+0x29c>)
 8004be2:	5ccb      	ldrb	r3, [r1, r3]
 8004be4:	f003 031f 	and.w	r3, r3, #31
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bec:	4a58      	ldr	r2, [pc, #352]	; (8004d50 <HAL_RCC_OscConfig+0x2a0>)
 8004bee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004bf0:	4b58      	ldr	r3, [pc, #352]	; (8004d54 <HAL_RCC_OscConfig+0x2a4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe ffb5 	bl	8003b64 <HAL_InitTick>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d052      	beq.n	8004caa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
 8004c06:	e331      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d032      	beq.n	8004c76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c10:	4b4d      	ldr	r3, [pc, #308]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a4c      	ldr	r2, [pc, #304]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c1c:	f7ff fc34 	bl	8004488 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c24:	f7ff fc30 	bl	8004488 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e31a      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c36:	4b44      	ldr	r3, [pc, #272]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c42:	4b41      	ldr	r3, [pc, #260]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a40      	ldr	r2, [pc, #256]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c48:	f043 0308 	orr.w	r3, r3, #8
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	4b3e      	ldr	r3, [pc, #248]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	493b      	ldr	r1, [pc, #236]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c60:	4b39      	ldr	r3, [pc, #228]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	4936      	ldr	r1, [pc, #216]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	604b      	str	r3, [r1, #4]
 8004c74:	e01a      	b.n	8004cac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c76:	4b34      	ldr	r3, [pc, #208]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a33      	ldr	r2, [pc, #204]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c7c:	f023 0301 	bic.w	r3, r3, #1
 8004c80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c82:	f7ff fc01 	bl	8004488 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c8a:	f7ff fbfd 	bl	8004488 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e2e7      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c9c:	4b2a      	ldr	r3, [pc, #168]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f0      	bne.n	8004c8a <HAL_RCC_OscConfig+0x1da>
 8004ca8:	e000      	b.n	8004cac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004caa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d074      	beq.n	8004da2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d005      	beq.n	8004cca <HAL_RCC_OscConfig+0x21a>
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	2b0c      	cmp	r3, #12
 8004cc2:	d10e      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d10b      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cca:	4b1f      	ldr	r3, [pc, #124]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d064      	beq.n	8004da0 <HAL_RCC_OscConfig+0x2f0>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d160      	bne.n	8004da0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e2c4      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cea:	d106      	bne.n	8004cfa <HAL_RCC_OscConfig+0x24a>
 8004cec:	4b16      	ldr	r3, [pc, #88]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a15      	ldr	r2, [pc, #84]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	e01d      	b.n	8004d36 <HAL_RCC_OscConfig+0x286>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d02:	d10c      	bne.n	8004d1e <HAL_RCC_OscConfig+0x26e>
 8004d04:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a0f      	ldr	r2, [pc, #60]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004d0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	4b0d      	ldr	r3, [pc, #52]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a0c      	ldr	r2, [pc, #48]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	e00b      	b.n	8004d36 <HAL_RCC_OscConfig+0x286>
 8004d1e:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a09      	ldr	r2, [pc, #36]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a06      	ldr	r2, [pc, #24]	; (8004d48 <HAL_RCC_OscConfig+0x298>)
 8004d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d01c      	beq.n	8004d78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3e:	f7ff fba3 	bl	8004488 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d44:	e011      	b.n	8004d6a <HAL_RCC_OscConfig+0x2ba>
 8004d46:	bf00      	nop
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	0800a908 	.word	0x0800a908
 8004d50:	2000005c 	.word	0x2000005c
 8004d54:	20000094 	.word	0x20000094
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d58:	f7ff fb96 	bl	8004488 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b64      	cmp	r3, #100	; 0x64
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e280      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d6a:	4baf      	ldr	r3, [pc, #700]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0x2a8>
 8004d76:	e014      	b.n	8004da2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7ff fb86 	bl	8004488 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d80:	f7ff fb82 	bl	8004488 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b64      	cmp	r3, #100	; 0x64
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e26c      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d92:	4ba5      	ldr	r3, [pc, #660]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x2d0>
 8004d9e:	e000      	b.n	8004da2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d060      	beq.n	8004e70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d005      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x310>
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b0c      	cmp	r3, #12
 8004db8:	d119      	bne.n	8004dee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d116      	bne.n	8004dee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc0:	4b99      	ldr	r3, [pc, #612]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x328>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e249      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd8:	4b93      	ldr	r3, [pc, #588]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	061b      	lsls	r3, r3, #24
 8004de6:	4990      	ldr	r1, [pc, #576]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dec:	e040      	b.n	8004e70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d023      	beq.n	8004e3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004df6:	4b8c      	ldr	r3, [pc, #560]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a8b      	ldr	r2, [pc, #556]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7ff fb41 	bl	8004488 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e0a:	f7ff fb3d 	bl	8004488 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e227      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e1c:	4b82      	ldr	r3, [pc, #520]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e28:	4b7f      	ldr	r3, [pc, #508]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	061b      	lsls	r3, r3, #24
 8004e36:	497c      	ldr	r1, [pc, #496]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	604b      	str	r3, [r1, #4]
 8004e3c:	e018      	b.n	8004e70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3e:	4b7a      	ldr	r3, [pc, #488]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a79      	ldr	r2, [pc, #484]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4a:	f7ff fb1d 	bl	8004488 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e52:	f7ff fb19 	bl	8004488 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e203      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e64:	4b70      	ldr	r3, [pc, #448]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f0      	bne.n	8004e52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d03c      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01c      	beq.n	8004ebe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e84:	4b68      	ldr	r3, [pc, #416]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e8a:	4a67      	ldr	r2, [pc, #412]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e94:	f7ff faf8 	bl	8004488 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e9c:	f7ff faf4 	bl	8004488 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e1de      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eae:	4b5e      	ldr	r3, [pc, #376]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0ef      	beq.n	8004e9c <HAL_RCC_OscConfig+0x3ec>
 8004ebc:	e01b      	b.n	8004ef6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ebe:	4b5a      	ldr	r3, [pc, #360]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec4:	4a58      	ldr	r2, [pc, #352]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004ec6:	f023 0301 	bic.w	r3, r3, #1
 8004eca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ece:	f7ff fadb 	bl	8004488 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed6:	f7ff fad7 	bl	8004488 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e1c1      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ee8:	4b4f      	ldr	r3, [pc, #316]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1ef      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 80a6 	beq.w	8005050 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f04:	2300      	movs	r3, #0
 8004f06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f08:	4b47      	ldr	r3, [pc, #284]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10d      	bne.n	8004f30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f14:	4b44      	ldr	r3, [pc, #272]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f18:	4a43      	ldr	r2, [pc, #268]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f20:	4b41      	ldr	r3, [pc, #260]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f28:	60bb      	str	r3, [r7, #8]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f30:	4b3e      	ldr	r3, [pc, #248]	; (800502c <HAL_RCC_OscConfig+0x57c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d118      	bne.n	8004f6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f3c:	4b3b      	ldr	r3, [pc, #236]	; (800502c <HAL_RCC_OscConfig+0x57c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a3a      	ldr	r2, [pc, #232]	; (800502c <HAL_RCC_OscConfig+0x57c>)
 8004f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f48:	f7ff fa9e 	bl	8004488 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f50:	f7ff fa9a 	bl	8004488 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e184      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f62:	4b32      	ldr	r3, [pc, #200]	; (800502c <HAL_RCC_OscConfig+0x57c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d108      	bne.n	8004f88 <HAL_RCC_OscConfig+0x4d8>
 8004f76:	4b2c      	ldr	r3, [pc, #176]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f86:	e024      	b.n	8004fd2 <HAL_RCC_OscConfig+0x522>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	2b05      	cmp	r3, #5
 8004f8e:	d110      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x502>
 8004f90:	4b25      	ldr	r3, [pc, #148]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f96:	4a24      	ldr	r2, [pc, #144]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004f98:	f043 0304 	orr.w	r3, r3, #4
 8004f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fa0:	4b21      	ldr	r3, [pc, #132]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa6:	4a20      	ldr	r2, [pc, #128]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fb0:	e00f      	b.n	8004fd2 <HAL_RCC_OscConfig+0x522>
 8004fb2:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb8:	4a1b      	ldr	r2, [pc, #108]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004fba:	f023 0301 	bic.w	r3, r3, #1
 8004fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fc2:	4b19      	ldr	r3, [pc, #100]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc8:	4a17      	ldr	r2, [pc, #92]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004fca:	f023 0304 	bic.w	r3, r3, #4
 8004fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d016      	beq.n	8005008 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fda:	f7ff fa55 	bl	8004488 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fe0:	e00a      	b.n	8004ff8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe2:	f7ff fa51 	bl	8004488 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e139      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_RCC_OscConfig+0x578>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0ed      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x532>
 8005006:	e01a      	b.n	800503e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005008:	f7ff fa3e 	bl	8004488 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800500e:	e00f      	b.n	8005030 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005010:	f7ff fa3a 	bl	8004488 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	f241 3288 	movw	r2, #5000	; 0x1388
 800501e:	4293      	cmp	r3, r2
 8005020:	d906      	bls.n	8005030 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e122      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
 8005026:	bf00      	nop
 8005028:	40021000 	.word	0x40021000
 800502c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005030:	4b90      	ldr	r3, [pc, #576]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e8      	bne.n	8005010 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800503e:	7ffb      	ldrb	r3, [r7, #31]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d105      	bne.n	8005050 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005044:	4b8b      	ldr	r3, [pc, #556]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005048:	4a8a      	ldr	r2, [pc, #552]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 800504a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800504e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8108 	beq.w	800526a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	2b02      	cmp	r3, #2
 8005060:	f040 80d0 	bne.w	8005204 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005064:	4b83      	ldr	r3, [pc, #524]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f003 0203 	and.w	r2, r3, #3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	429a      	cmp	r2, r3
 8005076:	d130      	bne.n	80050da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005082:	3b01      	subs	r3, #1
 8005084:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005086:	429a      	cmp	r2, r3
 8005088:	d127      	bne.n	80050da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005094:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005096:	429a      	cmp	r2, r3
 8005098:	d11f      	bne.n	80050da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050a4:	2a07      	cmp	r2, #7
 80050a6:	bf14      	ite	ne
 80050a8:	2201      	movne	r2, #1
 80050aa:	2200      	moveq	r2, #0
 80050ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d113      	bne.n	80050da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050bc:	085b      	lsrs	r3, r3, #1
 80050be:	3b01      	subs	r3, #1
 80050c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d109      	bne.n	80050da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	085b      	lsrs	r3, r3, #1
 80050d2:	3b01      	subs	r3, #1
 80050d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d06e      	beq.n	80051b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2b0c      	cmp	r3, #12
 80050de:	d069      	beq.n	80051b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050e0:	4b64      	ldr	r3, [pc, #400]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d105      	bne.n	80050f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80050ec:	4b61      	ldr	r3, [pc, #388]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0b7      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050fc:	4b5d      	ldr	r3, [pc, #372]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a5c      	ldr	r2, [pc, #368]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005106:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005108:	f7ff f9be 	bl	8004488 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005110:	f7ff f9ba 	bl	8004488 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e0a4      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005122:	4b54      	ldr	r3, [pc, #336]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800512e:	4b51      	ldr	r3, [pc, #324]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	4b51      	ldr	r3, [pc, #324]	; (8005278 <HAL_RCC_OscConfig+0x7c8>)
 8005134:	4013      	ands	r3, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800513e:	3a01      	subs	r2, #1
 8005140:	0112      	lsls	r2, r2, #4
 8005142:	4311      	orrs	r1, r2
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005148:	0212      	lsls	r2, r2, #8
 800514a:	4311      	orrs	r1, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005150:	0852      	lsrs	r2, r2, #1
 8005152:	3a01      	subs	r2, #1
 8005154:	0552      	lsls	r2, r2, #21
 8005156:	4311      	orrs	r1, r2
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800515c:	0852      	lsrs	r2, r2, #1
 800515e:	3a01      	subs	r2, #1
 8005160:	0652      	lsls	r2, r2, #25
 8005162:	4311      	orrs	r1, r2
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005168:	0912      	lsrs	r2, r2, #4
 800516a:	0452      	lsls	r2, r2, #17
 800516c:	430a      	orrs	r2, r1
 800516e:	4941      	ldr	r1, [pc, #260]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005170:	4313      	orrs	r3, r2
 8005172:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005174:	4b3f      	ldr	r3, [pc, #252]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a3e      	ldr	r2, [pc, #248]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 800517a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800517e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005180:	4b3c      	ldr	r3, [pc, #240]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4a3b      	ldr	r2, [pc, #236]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800518a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800518c:	f7ff f97c 	bl	8004488 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005194:	f7ff f978 	bl	8004488 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e062      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051a6:	4b33      	ldr	r3, [pc, #204]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0f0      	beq.n	8005194 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051b2:	e05a      	b.n	800526a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e059      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051b8:	4b2e      	ldr	r3, [pc, #184]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d152      	bne.n	800526a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051c4:	4b2b      	ldr	r3, [pc, #172]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a2a      	ldr	r2, [pc, #168]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80051ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051d0:	4b28      	ldr	r3, [pc, #160]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4a27      	ldr	r2, [pc, #156]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80051d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051dc:	f7ff f954 	bl	8004488 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e4:	f7ff f950 	bl	8004488 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e03a      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f6:	4b1f      	ldr	r3, [pc, #124]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0x734>
 8005202:	e032      	b.n	800526a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	2b0c      	cmp	r3, #12
 8005208:	d02d      	beq.n	8005266 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800520a:	4b1a      	ldr	r3, [pc, #104]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a19      	ldr	r2, [pc, #100]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005210:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005214:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005216:	4b17      	ldr	r3, [pc, #92]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d105      	bne.n	800522e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005222:	4b14      	ldr	r3, [pc, #80]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	4a13      	ldr	r2, [pc, #76]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005228:	f023 0303 	bic.w	r3, r3, #3
 800522c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800522e:	4b11      	ldr	r3, [pc, #68]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	4a10      	ldr	r2, [pc, #64]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 8005234:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523e:	f7ff f923 	bl	8004488 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005246:	f7ff f91f 	bl	8004488 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e009      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005258:	4b06      	ldr	r3, [pc, #24]	; (8005274 <HAL_RCC_OscConfig+0x7c4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1f0      	bne.n	8005246 <HAL_RCC_OscConfig+0x796>
 8005264:	e001      	b.n	800526a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3720      	adds	r7, #32
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40021000 	.word	0x40021000
 8005278:	f99d808c 	.word	0xf99d808c

0800527c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0c8      	b.n	8005422 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005290:	4b66      	ldr	r3, [pc, #408]	; (800542c <HAL_RCC_ClockConfig+0x1b0>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d910      	bls.n	80052c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800529e:	4b63      	ldr	r3, [pc, #396]	; (800542c <HAL_RCC_ClockConfig+0x1b0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f023 0207 	bic.w	r2, r3, #7
 80052a6:	4961      	ldr	r1, [pc, #388]	; (800542c <HAL_RCC_ClockConfig+0x1b0>)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ae:	4b5f      	ldr	r3, [pc, #380]	; (800542c <HAL_RCC_ClockConfig+0x1b0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d001      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e0b0      	b.n	8005422 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d04c      	beq.n	8005366 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d107      	bne.n	80052e4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052d4:	4b56      	ldr	r3, [pc, #344]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d121      	bne.n	8005324 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e09e      	b.n	8005422 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d107      	bne.n	80052fc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052ec:	4b50      	ldr	r3, [pc, #320]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d115      	bne.n	8005324 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e092      	b.n	8005422 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d107      	bne.n	8005314 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005304:	4b4a      	ldr	r3, [pc, #296]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d109      	bne.n	8005324 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e086      	b.n	8005422 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005314:	4b46      	ldr	r3, [pc, #280]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e07e      	b.n	8005422 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005324:	4b42      	ldr	r3, [pc, #264]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f023 0203 	bic.w	r2, r3, #3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	493f      	ldr	r1, [pc, #252]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 8005332:	4313      	orrs	r3, r2
 8005334:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005336:	f7ff f8a7 	bl	8004488 <HAL_GetTick>
 800533a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533c:	e00a      	b.n	8005354 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800533e:	f7ff f8a3 	bl	8004488 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	f241 3288 	movw	r2, #5000	; 0x1388
 800534c:	4293      	cmp	r3, r2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e066      	b.n	8005422 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005354:	4b36      	ldr	r3, [pc, #216]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 020c 	and.w	r2, r3, #12
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	429a      	cmp	r2, r3
 8005364:	d1eb      	bne.n	800533e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d008      	beq.n	8005384 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005372:	4b2f      	ldr	r3, [pc, #188]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	492c      	ldr	r1, [pc, #176]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 8005380:	4313      	orrs	r3, r2
 8005382:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005384:	4b29      	ldr	r3, [pc, #164]	; (800542c <HAL_RCC_ClockConfig+0x1b0>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d210      	bcs.n	80053b4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005392:	4b26      	ldr	r3, [pc, #152]	; (800542c <HAL_RCC_ClockConfig+0x1b0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f023 0207 	bic.w	r2, r3, #7
 800539a:	4924      	ldr	r1, [pc, #144]	; (800542c <HAL_RCC_ClockConfig+0x1b0>)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	4313      	orrs	r3, r2
 80053a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b22      	ldr	r3, [pc, #136]	; (800542c <HAL_RCC_ClockConfig+0x1b0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e036      	b.n	8005422 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053c0:	4b1b      	ldr	r3, [pc, #108]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4918      	ldr	r1, [pc, #96]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053de:	4b14      	ldr	r3, [pc, #80]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	4910      	ldr	r1, [pc, #64]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053f2:	f000 f825 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 80053f6:	4602      	mov	r2, r0
 80053f8:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <HAL_RCC_ClockConfig+0x1b4>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	490c      	ldr	r1, [pc, #48]	; (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 8005404:	5ccb      	ldrb	r3, [r1, r3]
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	fa22 f303 	lsr.w	r3, r2, r3
 800540e:	4a0a      	ldr	r2, [pc, #40]	; (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005412:	4b0a      	ldr	r3, [pc, #40]	; (800543c <HAL_RCC_ClockConfig+0x1c0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f7fe fba4 	bl	8003b64 <HAL_InitTick>
 800541c:	4603      	mov	r3, r0
 800541e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005420:	7afb      	ldrb	r3, [r7, #11]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40022000 	.word	0x40022000
 8005430:	40021000 	.word	0x40021000
 8005434:	0800a908 	.word	0x0800a908
 8005438:	2000005c 	.word	0x2000005c
 800543c:	20000094 	.word	0x20000094

08005440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005440:	b480      	push	{r7}
 8005442:	b089      	sub	sp, #36	; 0x24
 8005444:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	2300      	movs	r3, #0
 800544c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800544e:	4b3e      	ldr	r3, [pc, #248]	; (8005548 <HAL_RCC_GetSysClockFreq+0x108>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005458:	4b3b      	ldr	r3, [pc, #236]	; (8005548 <HAL_RCC_GetSysClockFreq+0x108>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_RCC_GetSysClockFreq+0x34>
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	2b0c      	cmp	r3, #12
 800546c:	d121      	bne.n	80054b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d11e      	bne.n	80054b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005474:	4b34      	ldr	r3, [pc, #208]	; (8005548 <HAL_RCC_GetSysClockFreq+0x108>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d107      	bne.n	8005490 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005480:	4b31      	ldr	r3, [pc, #196]	; (8005548 <HAL_RCC_GetSysClockFreq+0x108>)
 8005482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005486:	0a1b      	lsrs	r3, r3, #8
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	61fb      	str	r3, [r7, #28]
 800548e:	e005      	b.n	800549c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005490:	4b2d      	ldr	r3, [pc, #180]	; (8005548 <HAL_RCC_GetSysClockFreq+0x108>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	091b      	lsrs	r3, r3, #4
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800549c:	4a2b      	ldr	r2, [pc, #172]	; (800554c <HAL_RCC_GetSysClockFreq+0x10c>)
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10d      	bne.n	80054c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054b0:	e00a      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d102      	bne.n	80054be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054b8:	4b25      	ldr	r3, [pc, #148]	; (8005550 <HAL_RCC_GetSysClockFreq+0x110>)
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	e004      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d101      	bne.n	80054c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054c4:	4b23      	ldr	r3, [pc, #140]	; (8005554 <HAL_RCC_GetSysClockFreq+0x114>)
 80054c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b0c      	cmp	r3, #12
 80054cc:	d134      	bne.n	8005538 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054ce:	4b1e      	ldr	r3, [pc, #120]	; (8005548 <HAL_RCC_GetSysClockFreq+0x108>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d003      	beq.n	80054e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d003      	beq.n	80054ec <HAL_RCC_GetSysClockFreq+0xac>
 80054e4:	e005      	b.n	80054f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80054e6:	4b1a      	ldr	r3, [pc, #104]	; (8005550 <HAL_RCC_GetSysClockFreq+0x110>)
 80054e8:	617b      	str	r3, [r7, #20]
      break;
 80054ea:	e005      	b.n	80054f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80054ec:	4b19      	ldr	r3, [pc, #100]	; (8005554 <HAL_RCC_GetSysClockFreq+0x114>)
 80054ee:	617b      	str	r3, [r7, #20]
      break;
 80054f0:	e002      	b.n	80054f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	617b      	str	r3, [r7, #20]
      break;
 80054f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054f8:	4b13      	ldr	r3, [pc, #76]	; (8005548 <HAL_RCC_GetSysClockFreq+0x108>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	091b      	lsrs	r3, r3, #4
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	3301      	adds	r3, #1
 8005504:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005506:	4b10      	ldr	r3, [pc, #64]	; (8005548 <HAL_RCC_GetSysClockFreq+0x108>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	0a1b      	lsrs	r3, r3, #8
 800550c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	fb02 f203 	mul.w	r2, r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	fbb2 f3f3 	udiv	r3, r2, r3
 800551c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800551e:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <HAL_RCC_GetSysClockFreq+0x108>)
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	0e5b      	lsrs	r3, r3, #25
 8005524:	f003 0303 	and.w	r3, r3, #3
 8005528:	3301      	adds	r3, #1
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	fbb2 f3f3 	udiv	r3, r2, r3
 8005536:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005538:	69bb      	ldr	r3, [r7, #24]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3724      	adds	r7, #36	; 0x24
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40021000 	.word	0x40021000
 800554c:	0800a920 	.word	0x0800a920
 8005550:	00f42400 	.word	0x00f42400
 8005554:	007a1200 	.word	0x007a1200

08005558 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800555c:	4b03      	ldr	r3, [pc, #12]	; (800556c <HAL_RCC_GetHCLKFreq+0x14>)
 800555e:	681b      	ldr	r3, [r3, #0]
}
 8005560:	4618      	mov	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	2000005c 	.word	0x2000005c

08005570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005574:	f7ff fff0 	bl	8005558 <HAL_RCC_GetHCLKFreq>
 8005578:	4602      	mov	r2, r0
 800557a:	4b06      	ldr	r3, [pc, #24]	; (8005594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	0a1b      	lsrs	r3, r3, #8
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	4904      	ldr	r1, [pc, #16]	; (8005598 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005586:	5ccb      	ldrb	r3, [r1, r3]
 8005588:	f003 031f 	and.w	r3, r3, #31
 800558c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005590:	4618      	mov	r0, r3
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40021000 	.word	0x40021000
 8005598:	0800a918 	.word	0x0800a918

0800559c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	220f      	movs	r2, #15
 80055aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80055ac:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <HAL_RCC_GetClockConfig+0x5c>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0203 	and.w	r2, r3, #3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80055b8:	4b0f      	ldr	r3, [pc, #60]	; (80055f8 <HAL_RCC_GetClockConfig+0x5c>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80055c4:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <HAL_RCC_GetClockConfig+0x5c>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80055d0:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <HAL_RCC_GetClockConfig+0x5c>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	08db      	lsrs	r3, r3, #3
 80055d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80055de:	4b07      	ldr	r3, [pc, #28]	; (80055fc <HAL_RCC_GetClockConfig+0x60>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0207 	and.w	r2, r3, #7
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	601a      	str	r2, [r3, #0]
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40021000 	.word	0x40021000
 80055fc:	40022000 	.word	0x40022000

08005600 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005608:	2300      	movs	r3, #0
 800560a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800560c:	4b2a      	ldr	r3, [pc, #168]	; (80056b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800560e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005618:	f7ff f9e6 	bl	80049e8 <HAL_PWREx_GetVoltageRange>
 800561c:	6178      	str	r0, [r7, #20]
 800561e:	e014      	b.n	800564a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005620:	4b25      	ldr	r3, [pc, #148]	; (80056b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005624:	4a24      	ldr	r2, [pc, #144]	; (80056b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800562a:	6593      	str	r3, [r2, #88]	; 0x58
 800562c:	4b22      	ldr	r3, [pc, #136]	; (80056b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800562e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005638:	f7ff f9d6 	bl	80049e8 <HAL_PWREx_GetVoltageRange>
 800563c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800563e:	4b1e      	ldr	r3, [pc, #120]	; (80056b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005642:	4a1d      	ldr	r2, [pc, #116]	; (80056b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005648:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005650:	d10b      	bne.n	800566a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b80      	cmp	r3, #128	; 0x80
 8005656:	d919      	bls.n	800568c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2ba0      	cmp	r3, #160	; 0xa0
 800565c:	d902      	bls.n	8005664 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800565e:	2302      	movs	r3, #2
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	e013      	b.n	800568c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005664:	2301      	movs	r3, #1
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	e010      	b.n	800568c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b80      	cmp	r3, #128	; 0x80
 800566e:	d902      	bls.n	8005676 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005670:	2303      	movs	r3, #3
 8005672:	613b      	str	r3, [r7, #16]
 8005674:	e00a      	b.n	800568c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b80      	cmp	r3, #128	; 0x80
 800567a:	d102      	bne.n	8005682 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800567c:	2302      	movs	r3, #2
 800567e:	613b      	str	r3, [r7, #16]
 8005680:	e004      	b.n	800568c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b70      	cmp	r3, #112	; 0x70
 8005686:	d101      	bne.n	800568c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005688:	2301      	movs	r3, #1
 800568a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800568c:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f023 0207 	bic.w	r2, r3, #7
 8005694:	4909      	ldr	r1, [pc, #36]	; (80056bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800569c:	4b07      	ldr	r3, [pc, #28]	; (80056bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d001      	beq.n	80056ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40021000 	.word	0x40021000
 80056bc:	40022000 	.word	0x40022000

080056c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056c8:	2300      	movs	r3, #0
 80056ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056cc:	2300      	movs	r3, #0
 80056ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d041      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056e4:	d02a      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80056e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056ea:	d824      	bhi.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056f0:	d008      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056f6:	d81e      	bhi.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80056fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005700:	d010      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005702:	e018      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005704:	4b86      	ldr	r3, [pc, #536]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	4a85      	ldr	r2, [pc, #532]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800570a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005710:	e015      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3304      	adds	r3, #4
 8005716:	2100      	movs	r1, #0
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fabb 	bl	8005c94 <RCCEx_PLLSAI1_Config>
 800571e:	4603      	mov	r3, r0
 8005720:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005722:	e00c      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3320      	adds	r3, #32
 8005728:	2100      	movs	r1, #0
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fba6 	bl	8005e7c <RCCEx_PLLSAI2_Config>
 8005730:	4603      	mov	r3, r0
 8005732:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005734:	e003      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	74fb      	strb	r3, [r7, #19]
      break;
 800573a:	e000      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800573c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800573e:	7cfb      	ldrb	r3, [r7, #19]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10b      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005744:	4b76      	ldr	r3, [pc, #472]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005752:	4973      	ldr	r1, [pc, #460]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800575a:	e001      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575c:	7cfb      	ldrb	r3, [r7, #19]
 800575e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d041      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005770:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005774:	d02a      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005776:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800577a:	d824      	bhi.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800577c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005780:	d008      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005782:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005786:	d81e      	bhi.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800578c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005790:	d010      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005792:	e018      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005794:	4b62      	ldr	r3, [pc, #392]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	4a61      	ldr	r2, [pc, #388]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800579a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800579e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057a0:	e015      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	3304      	adds	r3, #4
 80057a6:	2100      	movs	r1, #0
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 fa73 	bl	8005c94 <RCCEx_PLLSAI1_Config>
 80057ae:	4603      	mov	r3, r0
 80057b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057b2:	e00c      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3320      	adds	r3, #32
 80057b8:	2100      	movs	r1, #0
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fb5e 	bl	8005e7c <RCCEx_PLLSAI2_Config>
 80057c0:	4603      	mov	r3, r0
 80057c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057c4:	e003      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	74fb      	strb	r3, [r7, #19]
      break;
 80057ca:	e000      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80057cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057ce:	7cfb      	ldrb	r3, [r7, #19]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10b      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057d4:	4b52      	ldr	r3, [pc, #328]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057e2:	494f      	ldr	r1, [pc, #316]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057ea:	e001      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ec:	7cfb      	ldrb	r3, [r7, #19]
 80057ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 80a0 	beq.w	800593e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057fe:	2300      	movs	r3, #0
 8005800:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005802:	4b47      	ldr	r3, [pc, #284]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005812:	2300      	movs	r3, #0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00d      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005818:	4b41      	ldr	r3, [pc, #260]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800581a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581c:	4a40      	ldr	r2, [pc, #256]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800581e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005822:	6593      	str	r3, [r2, #88]	; 0x58
 8005824:	4b3e      	ldr	r3, [pc, #248]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800582c:	60bb      	str	r3, [r7, #8]
 800582e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005830:	2301      	movs	r3, #1
 8005832:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005834:	4b3b      	ldr	r3, [pc, #236]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a3a      	ldr	r2, [pc, #232]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800583a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800583e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005840:	f7fe fe22 	bl	8004488 <HAL_GetTick>
 8005844:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005846:	e009      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005848:	f7fe fe1e 	bl	8004488 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d902      	bls.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	74fb      	strb	r3, [r7, #19]
        break;
 800585a:	e005      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800585c:	4b31      	ldr	r3, [pc, #196]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0ef      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005868:	7cfb      	ldrb	r3, [r7, #19]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d15c      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800586e:	4b2c      	ldr	r3, [pc, #176]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005878:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01f      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	429a      	cmp	r2, r3
 800588a:	d019      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800588c:	4b24      	ldr	r3, [pc, #144]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005896:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005898:	4b21      	ldr	r3, [pc, #132]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800589a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589e:	4a20      	ldr	r2, [pc, #128]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058a8:	4b1d      	ldr	r3, [pc, #116]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ae:	4a1c      	ldr	r2, [pc, #112]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058b8:	4a19      	ldr	r2, [pc, #100]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d016      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ca:	f7fe fddd 	bl	8004488 <HAL_GetTick>
 80058ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058d0:	e00b      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d2:	f7fe fdd9 	bl	8004488 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d902      	bls.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	74fb      	strb	r3, [r7, #19]
            break;
 80058e8:	e006      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ea:	4b0d      	ldr	r3, [pc, #52]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0ec      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80058f8:	7cfb      	ldrb	r3, [r7, #19]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10c      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058fe:	4b08      	ldr	r3, [pc, #32]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800590e:	4904      	ldr	r1, [pc, #16]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005916:	e009      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005918:	7cfb      	ldrb	r3, [r7, #19]
 800591a:	74bb      	strb	r3, [r7, #18]
 800591c:	e006      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800591e:	bf00      	nop
 8005920:	40021000 	.word	0x40021000
 8005924:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005928:	7cfb      	ldrb	r3, [r7, #19]
 800592a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800592c:	7c7b      	ldrb	r3, [r7, #17]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d105      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005932:	4b9e      	ldr	r3, [pc, #632]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005936:	4a9d      	ldr	r2, [pc, #628]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800593c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800594a:	4b98      	ldr	r3, [pc, #608]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005950:	f023 0203 	bic.w	r2, r3, #3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	4994      	ldr	r1, [pc, #592]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800596c:	4b8f      	ldr	r3, [pc, #572]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005972:	f023 020c 	bic.w	r2, r3, #12
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597a:	498c      	ldr	r1, [pc, #560]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800598e:	4b87      	ldr	r3, [pc, #540]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005994:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	4983      	ldr	r1, [pc, #524]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059b0:	4b7e      	ldr	r3, [pc, #504]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059be:	497b      	ldr	r1, [pc, #492]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059d2:	4b76      	ldr	r3, [pc, #472]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e0:	4972      	ldr	r1, [pc, #456]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059f4:	4b6d      	ldr	r3, [pc, #436]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a02:	496a      	ldr	r1, [pc, #424]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a16:	4b65      	ldr	r3, [pc, #404]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a24:	4961      	ldr	r1, [pc, #388]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a38:	4b5c      	ldr	r3, [pc, #368]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a46:	4959      	ldr	r1, [pc, #356]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a5a:	4b54      	ldr	r3, [pc, #336]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a68:	4950      	ldr	r1, [pc, #320]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a7c:	4b4b      	ldr	r3, [pc, #300]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8a:	4948      	ldr	r1, [pc, #288]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a9e:	4b43      	ldr	r3, [pc, #268]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aac:	493f      	ldr	r1, [pc, #252]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d028      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ac0:	4b3a      	ldr	r3, [pc, #232]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ace:	4937      	ldr	r1, [pc, #220]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ade:	d106      	bne.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ae0:	4b32      	ldr	r3, [pc, #200]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4a31      	ldr	r2, [pc, #196]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aea:	60d3      	str	r3, [r2, #12]
 8005aec:	e011      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005af2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005af6:	d10c      	bne.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3304      	adds	r3, #4
 8005afc:	2101      	movs	r1, #1
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 f8c8 	bl	8005c94 <RCCEx_PLLSAI1_Config>
 8005b04:	4603      	mov	r3, r0
 8005b06:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b08:	7cfb      	ldrb	r3, [r7, #19]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005b0e:	7cfb      	ldrb	r3, [r7, #19]
 8005b10:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d028      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b1e:	4b23      	ldr	r3, [pc, #140]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2c:	491f      	ldr	r1, [pc, #124]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b3c:	d106      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b3e:	4b1b      	ldr	r3, [pc, #108]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	4a1a      	ldr	r2, [pc, #104]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b48:	60d3      	str	r3, [r2, #12]
 8005b4a:	e011      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b54:	d10c      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 f899 	bl	8005c94 <RCCEx_PLLSAI1_Config>
 8005b62:	4603      	mov	r3, r0
 8005b64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b66:	7cfb      	ldrb	r3, [r7, #19]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005b6c:	7cfb      	ldrb	r3, [r7, #19]
 8005b6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d02b      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b7c:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b8a:	4908      	ldr	r1, [pc, #32]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b9a:	d109      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b9c:	4b03      	ldr	r3, [pc, #12]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	4a02      	ldr	r2, [pc, #8]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ba6:	60d3      	str	r3, [r2, #12]
 8005ba8:	e014      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005baa:	bf00      	nop
 8005bac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 f867 	bl	8005c94 <RCCEx_PLLSAI1_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bca:	7cfb      	ldrb	r3, [r7, #19]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005bd0:	7cfb      	ldrb	r3, [r7, #19]
 8005bd2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d02f      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005be0:	4b2b      	ldr	r3, [pc, #172]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bee:	4928      	ldr	r1, [pc, #160]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bfe:	d10d      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3304      	adds	r3, #4
 8005c04:	2102      	movs	r1, #2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 f844 	bl	8005c94 <RCCEx_PLLSAI1_Config>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c10:	7cfb      	ldrb	r3, [r7, #19]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d014      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c16:	7cfb      	ldrb	r3, [r7, #19]
 8005c18:	74bb      	strb	r3, [r7, #18]
 8005c1a:	e011      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c24:	d10c      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3320      	adds	r3, #32
 8005c2a:	2102      	movs	r1, #2
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 f925 	bl	8005e7c <RCCEx_PLLSAI2_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c36:	7cfb      	ldrb	r3, [r7, #19]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c3c:	7cfb      	ldrb	r3, [r7, #19]
 8005c3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c4c:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c5a:	490d      	ldr	r1, [pc, #52]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00b      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c6e:	4b08      	ldr	r3, [pc, #32]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c7e:	4904      	ldr	r1, [pc, #16]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c86:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40021000 	.word	0x40021000

08005c94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ca2:	4b75      	ldr	r3, [pc, #468]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d018      	beq.n	8005ce0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005cae:	4b72      	ldr	r3, [pc, #456]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f003 0203 	and.w	r2, r3, #3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d10d      	bne.n	8005cda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
       ||
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d009      	beq.n	8005cda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005cc6:	4b6c      	ldr	r3, [pc, #432]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	091b      	lsrs	r3, r3, #4
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
       ||
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d047      	beq.n	8005d6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	73fb      	strb	r3, [r7, #15]
 8005cde:	e044      	b.n	8005d6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d018      	beq.n	8005d1a <RCCEx_PLLSAI1_Config+0x86>
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d825      	bhi.n	8005d38 <RCCEx_PLLSAI1_Config+0xa4>
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d002      	beq.n	8005cf6 <RCCEx_PLLSAI1_Config+0x62>
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d009      	beq.n	8005d08 <RCCEx_PLLSAI1_Config+0x74>
 8005cf4:	e020      	b.n	8005d38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cf6:	4b60      	ldr	r3, [pc, #384]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d11d      	bne.n	8005d3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d06:	e01a      	b.n	8005d3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d08:	4b5b      	ldr	r3, [pc, #364]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d116      	bne.n	8005d42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d18:	e013      	b.n	8005d42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d1a:	4b57      	ldr	r3, [pc, #348]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10f      	bne.n	8005d46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d26:	4b54      	ldr	r3, [pc, #336]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d36:	e006      	b.n	8005d46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d3c:	e004      	b.n	8005d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d3e:	bf00      	nop
 8005d40:	e002      	b.n	8005d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d42:	bf00      	nop
 8005d44:	e000      	b.n	8005d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d46:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10d      	bne.n	8005d6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d4e:	4b4a      	ldr	r3, [pc, #296]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6819      	ldr	r1, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	011b      	lsls	r3, r3, #4
 8005d62:	430b      	orrs	r3, r1
 8005d64:	4944      	ldr	r1, [pc, #272]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d17d      	bne.n	8005e6c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d70:	4b41      	ldr	r3, [pc, #260]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a40      	ldr	r2, [pc, #256]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d7c:	f7fe fb84 	bl	8004488 <HAL_GetTick>
 8005d80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d82:	e009      	b.n	8005d98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d84:	f7fe fb80 	bl	8004488 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d902      	bls.n	8005d98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	73fb      	strb	r3, [r7, #15]
        break;
 8005d96:	e005      	b.n	8005da4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d98:	4b37      	ldr	r3, [pc, #220]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1ef      	bne.n	8005d84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d160      	bne.n	8005e6c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d111      	bne.n	8005dd4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005db0:	4b31      	ldr	r3, [pc, #196]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6892      	ldr	r2, [r2, #8]
 8005dc0:	0211      	lsls	r1, r2, #8
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	68d2      	ldr	r2, [r2, #12]
 8005dc6:	0912      	lsrs	r2, r2, #4
 8005dc8:	0452      	lsls	r2, r2, #17
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	492a      	ldr	r1, [pc, #168]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	610b      	str	r3, [r1, #16]
 8005dd2:	e027      	b.n	8005e24 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d112      	bne.n	8005e00 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dda:	4b27      	ldr	r3, [pc, #156]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005de2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6892      	ldr	r2, [r2, #8]
 8005dea:	0211      	lsls	r1, r2, #8
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6912      	ldr	r2, [r2, #16]
 8005df0:	0852      	lsrs	r2, r2, #1
 8005df2:	3a01      	subs	r2, #1
 8005df4:	0552      	lsls	r2, r2, #21
 8005df6:	430a      	orrs	r2, r1
 8005df8:	491f      	ldr	r1, [pc, #124]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	610b      	str	r3, [r1, #16]
 8005dfe:	e011      	b.n	8005e24 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e00:	4b1d      	ldr	r3, [pc, #116]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005e08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6892      	ldr	r2, [r2, #8]
 8005e10:	0211      	lsls	r1, r2, #8
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6952      	ldr	r2, [r2, #20]
 8005e16:	0852      	lsrs	r2, r2, #1
 8005e18:	3a01      	subs	r2, #1
 8005e1a:	0652      	lsls	r2, r2, #25
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	4916      	ldr	r1, [pc, #88]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e24:	4b14      	ldr	r3, [pc, #80]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a13      	ldr	r2, [pc, #76]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e30:	f7fe fb2a 	bl	8004488 <HAL_GetTick>
 8005e34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e36:	e009      	b.n	8005e4c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e38:	f7fe fb26 	bl	8004488 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d902      	bls.n	8005e4c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	73fb      	strb	r3, [r7, #15]
          break;
 8005e4a:	e005      	b.n	8005e58 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0ef      	beq.n	8005e38 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e5e:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	4904      	ldr	r1, [pc, #16]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	40021000 	.word	0x40021000

08005e7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e8a:	4b6a      	ldr	r3, [pc, #424]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d018      	beq.n	8005ec8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005e96:	4b67      	ldr	r3, [pc, #412]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f003 0203 	and.w	r2, r3, #3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d10d      	bne.n	8005ec2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
       ||
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005eae:	4b61      	ldr	r3, [pc, #388]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	091b      	lsrs	r3, r3, #4
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
       ||
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d047      	beq.n	8005f52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	73fb      	strb	r3, [r7, #15]
 8005ec6:	e044      	b.n	8005f52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d018      	beq.n	8005f02 <RCCEx_PLLSAI2_Config+0x86>
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d825      	bhi.n	8005f20 <RCCEx_PLLSAI2_Config+0xa4>
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d002      	beq.n	8005ede <RCCEx_PLLSAI2_Config+0x62>
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d009      	beq.n	8005ef0 <RCCEx_PLLSAI2_Config+0x74>
 8005edc:	e020      	b.n	8005f20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ede:	4b55      	ldr	r3, [pc, #340]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d11d      	bne.n	8005f26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eee:	e01a      	b.n	8005f26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ef0:	4b50      	ldr	r3, [pc, #320]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d116      	bne.n	8005f2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f00:	e013      	b.n	8005f2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f02:	4b4c      	ldr	r3, [pc, #304]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10f      	bne.n	8005f2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f0e:	4b49      	ldr	r3, [pc, #292]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d109      	bne.n	8005f2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f1e:	e006      	b.n	8005f2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	73fb      	strb	r3, [r7, #15]
      break;
 8005f24:	e004      	b.n	8005f30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f26:	bf00      	nop
 8005f28:	e002      	b.n	8005f30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f2a:	bf00      	nop
 8005f2c:	e000      	b.n	8005f30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10d      	bne.n	8005f52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f36:	4b3f      	ldr	r3, [pc, #252]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6819      	ldr	r1, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	430b      	orrs	r3, r1
 8005f4c:	4939      	ldr	r1, [pc, #228]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d167      	bne.n	8006028 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f58:	4b36      	ldr	r3, [pc, #216]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a35      	ldr	r2, [pc, #212]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f64:	f7fe fa90 	bl	8004488 <HAL_GetTick>
 8005f68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f6a:	e009      	b.n	8005f80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f6c:	f7fe fa8c 	bl	8004488 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d902      	bls.n	8005f80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	73fb      	strb	r3, [r7, #15]
        break;
 8005f7e:	e005      	b.n	8005f8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f80:	4b2c      	ldr	r3, [pc, #176]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1ef      	bne.n	8005f6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d14a      	bne.n	8006028 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d111      	bne.n	8005fbc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f98:	4b26      	ldr	r3, [pc, #152]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	6892      	ldr	r2, [r2, #8]
 8005fa8:	0211      	lsls	r1, r2, #8
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	68d2      	ldr	r2, [r2, #12]
 8005fae:	0912      	lsrs	r2, r2, #4
 8005fb0:	0452      	lsls	r2, r2, #17
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	491f      	ldr	r1, [pc, #124]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	614b      	str	r3, [r1, #20]
 8005fba:	e011      	b.n	8005fe0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005fbc:	4b1d      	ldr	r3, [pc, #116]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005fc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6892      	ldr	r2, [r2, #8]
 8005fcc:	0211      	lsls	r1, r2, #8
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	6912      	ldr	r2, [r2, #16]
 8005fd2:	0852      	lsrs	r2, r2, #1
 8005fd4:	3a01      	subs	r2, #1
 8005fd6:	0652      	lsls	r2, r2, #25
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	4916      	ldr	r1, [pc, #88]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005fe0:	4b14      	ldr	r3, [pc, #80]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a13      	ldr	r2, [pc, #76]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fec:	f7fe fa4c 	bl	8004488 <HAL_GetTick>
 8005ff0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ff2:	e009      	b.n	8006008 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ff4:	f7fe fa48 	bl	8004488 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d902      	bls.n	8006008 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	73fb      	strb	r3, [r7, #15]
          break;
 8006006:	e005      	b.n	8006014 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006008:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0ef      	beq.n	8005ff4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800601a:	4b06      	ldr	r3, [pc, #24]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 800601c:	695a      	ldr	r2, [r3, #20]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	4904      	ldr	r1, [pc, #16]	; (8006034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006024:	4313      	orrs	r3, r2
 8006026:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006028:	7bfb      	ldrb	r3, [r7, #15]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	40021000 	.word	0x40021000

08006038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e049      	b.n	80060de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d106      	bne.n	8006064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f841 	bl	80060e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3304      	adds	r3, #4
 8006074:	4619      	mov	r1, r3
 8006076:	4610      	mov	r0, r2
 8006078:	f000 f9f8 	bl	800646c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
	...

080060fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b01      	cmp	r3, #1
 800610e:	d001      	beq.n	8006114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e04f      	b.n	80061b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0201 	orr.w	r2, r2, #1
 800612a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a23      	ldr	r2, [pc, #140]	; (80061c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d01d      	beq.n	8006172 <HAL_TIM_Base_Start_IT+0x76>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613e:	d018      	beq.n	8006172 <HAL_TIM_Base_Start_IT+0x76>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a1f      	ldr	r2, [pc, #124]	; (80061c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d013      	beq.n	8006172 <HAL_TIM_Base_Start_IT+0x76>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a1e      	ldr	r2, [pc, #120]	; (80061c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00e      	beq.n	8006172 <HAL_TIM_Base_Start_IT+0x76>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a1c      	ldr	r2, [pc, #112]	; (80061cc <HAL_TIM_Base_Start_IT+0xd0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d009      	beq.n	8006172 <HAL_TIM_Base_Start_IT+0x76>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a1b      	ldr	r2, [pc, #108]	; (80061d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d004      	beq.n	8006172 <HAL_TIM_Base_Start_IT+0x76>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a19      	ldr	r2, [pc, #100]	; (80061d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d115      	bne.n	800619e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	4b17      	ldr	r3, [pc, #92]	; (80061d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800617a:	4013      	ands	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b06      	cmp	r3, #6
 8006182:	d015      	beq.n	80061b0 <HAL_TIM_Base_Start_IT+0xb4>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800618a:	d011      	beq.n	80061b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0201 	orr.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800619c:	e008      	b.n	80061b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 0201 	orr.w	r2, r2, #1
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	e000      	b.n	80061b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	40012c00 	.word	0x40012c00
 80061c4:	40000400 	.word	0x40000400
 80061c8:	40000800 	.word	0x40000800
 80061cc:	40000c00 	.word	0x40000c00
 80061d0:	40013400 	.word	0x40013400
 80061d4:	40014000 	.word	0x40014000
 80061d8:	00010007 	.word	0x00010007

080061dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d122      	bne.n	8006238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d11b      	bne.n	8006238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0202 	mvn.w	r2, #2
 8006208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f905 	bl	800642e <HAL_TIM_IC_CaptureCallback>
 8006224:	e005      	b.n	8006232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f8f7 	bl	800641a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f908 	bl	8006442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	2b04      	cmp	r3, #4
 8006244:	d122      	bne.n	800628c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f003 0304 	and.w	r3, r3, #4
 8006250:	2b04      	cmp	r3, #4
 8006252:	d11b      	bne.n	800628c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f06f 0204 	mvn.w	r2, #4
 800625c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2202      	movs	r2, #2
 8006262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f8db 	bl	800642e <HAL_TIM_IC_CaptureCallback>
 8006278:	e005      	b.n	8006286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f8cd 	bl	800641a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f8de 	bl	8006442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f003 0308 	and.w	r3, r3, #8
 8006296:	2b08      	cmp	r3, #8
 8006298:	d122      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d11b      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0208 	mvn.w	r2, #8
 80062b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2204      	movs	r2, #4
 80062b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f8b1 	bl	800642e <HAL_TIM_IC_CaptureCallback>
 80062cc:	e005      	b.n	80062da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f8a3 	bl	800641a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f8b4 	bl	8006442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0310 	and.w	r3, r3, #16
 80062ea:	2b10      	cmp	r3, #16
 80062ec:	d122      	bne.n	8006334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f003 0310 	and.w	r3, r3, #16
 80062f8:	2b10      	cmp	r3, #16
 80062fa:	d11b      	bne.n	8006334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f06f 0210 	mvn.w	r2, #16
 8006304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2208      	movs	r2, #8
 800630a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f887 	bl	800642e <HAL_TIM_IC_CaptureCallback>
 8006320:	e005      	b.n	800632e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f879 	bl	800641a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f88a 	bl	8006442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b01      	cmp	r3, #1
 8006340:	d10e      	bne.n	8006360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b01      	cmp	r3, #1
 800634e:	d107      	bne.n	8006360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0201 	mvn.w	r2, #1
 8006358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fb ff6e 	bl	800223c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636a:	2b80      	cmp	r3, #128	; 0x80
 800636c:	d10e      	bne.n	800638c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006378:	2b80      	cmp	r3, #128	; 0x80
 800637a:	d107      	bne.n	800638c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f914 	bl	80065b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800639a:	d10e      	bne.n	80063ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a6:	2b80      	cmp	r3, #128	; 0x80
 80063a8:	d107      	bne.n	80063ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f907 	bl	80065c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c4:	2b40      	cmp	r3, #64	; 0x40
 80063c6:	d10e      	bne.n	80063e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d2:	2b40      	cmp	r3, #64	; 0x40
 80063d4:	d107      	bne.n	80063e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f838 	bl	8006456 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	d10e      	bne.n	8006412 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f003 0320 	and.w	r3, r3, #32
 80063fe:	2b20      	cmp	r3, #32
 8006400:	d107      	bne.n	8006412 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f06f 0220 	mvn.w	r2, #32
 800640a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f8c7 	bl	80065a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006412:	bf00      	nop
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a40      	ldr	r2, [pc, #256]	; (8006580 <TIM_Base_SetConfig+0x114>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d013      	beq.n	80064ac <TIM_Base_SetConfig+0x40>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648a:	d00f      	beq.n	80064ac <TIM_Base_SetConfig+0x40>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a3d      	ldr	r2, [pc, #244]	; (8006584 <TIM_Base_SetConfig+0x118>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00b      	beq.n	80064ac <TIM_Base_SetConfig+0x40>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a3c      	ldr	r2, [pc, #240]	; (8006588 <TIM_Base_SetConfig+0x11c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d007      	beq.n	80064ac <TIM_Base_SetConfig+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a3b      	ldr	r2, [pc, #236]	; (800658c <TIM_Base_SetConfig+0x120>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d003      	beq.n	80064ac <TIM_Base_SetConfig+0x40>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a3a      	ldr	r2, [pc, #232]	; (8006590 <TIM_Base_SetConfig+0x124>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d108      	bne.n	80064be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a2f      	ldr	r2, [pc, #188]	; (8006580 <TIM_Base_SetConfig+0x114>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d01f      	beq.n	8006506 <TIM_Base_SetConfig+0x9a>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064cc:	d01b      	beq.n	8006506 <TIM_Base_SetConfig+0x9a>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a2c      	ldr	r2, [pc, #176]	; (8006584 <TIM_Base_SetConfig+0x118>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d017      	beq.n	8006506 <TIM_Base_SetConfig+0x9a>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a2b      	ldr	r2, [pc, #172]	; (8006588 <TIM_Base_SetConfig+0x11c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d013      	beq.n	8006506 <TIM_Base_SetConfig+0x9a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a2a      	ldr	r2, [pc, #168]	; (800658c <TIM_Base_SetConfig+0x120>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00f      	beq.n	8006506 <TIM_Base_SetConfig+0x9a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a29      	ldr	r2, [pc, #164]	; (8006590 <TIM_Base_SetConfig+0x124>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d00b      	beq.n	8006506 <TIM_Base_SetConfig+0x9a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a28      	ldr	r2, [pc, #160]	; (8006594 <TIM_Base_SetConfig+0x128>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d007      	beq.n	8006506 <TIM_Base_SetConfig+0x9a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a27      	ldr	r2, [pc, #156]	; (8006598 <TIM_Base_SetConfig+0x12c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d003      	beq.n	8006506 <TIM_Base_SetConfig+0x9a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a26      	ldr	r2, [pc, #152]	; (800659c <TIM_Base_SetConfig+0x130>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d108      	bne.n	8006518 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800650c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4313      	orrs	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a10      	ldr	r2, [pc, #64]	; (8006580 <TIM_Base_SetConfig+0x114>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00f      	beq.n	8006564 <TIM_Base_SetConfig+0xf8>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a12      	ldr	r2, [pc, #72]	; (8006590 <TIM_Base_SetConfig+0x124>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00b      	beq.n	8006564 <TIM_Base_SetConfig+0xf8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a11      	ldr	r2, [pc, #68]	; (8006594 <TIM_Base_SetConfig+0x128>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d007      	beq.n	8006564 <TIM_Base_SetConfig+0xf8>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a10      	ldr	r2, [pc, #64]	; (8006598 <TIM_Base_SetConfig+0x12c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d003      	beq.n	8006564 <TIM_Base_SetConfig+0xf8>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a0f      	ldr	r2, [pc, #60]	; (800659c <TIM_Base_SetConfig+0x130>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d103      	bne.n	800656c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	615a      	str	r2, [r3, #20]
}
 8006572:	bf00      	nop
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	40012c00 	.word	0x40012c00
 8006584:	40000400 	.word	0x40000400
 8006588:	40000800 	.word	0x40000800
 800658c:	40000c00 	.word	0x40000c00
 8006590:	40013400 	.word	0x40013400
 8006594:	40014000 	.word	0x40014000
 8006598:	40014400 	.word	0x40014400
 800659c:	40014800 	.word	0x40014800

080065a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80065dc:	b480      	push	{r7}
 80065de:	b08b      	sub	sp, #44	; 0x2c
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	fa93 f3a3 	rbit	r3, r3
 80065f6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8006602:	2320      	movs	r3, #32
 8006604:	e003      	b.n	800660e <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	fab3 f383 	clz	r3, r3
 800660c:	b2db      	uxtb	r3, r3
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	2103      	movs	r1, #3
 8006612:	fa01 f303 	lsl.w	r3, r1, r3
 8006616:	43db      	mvns	r3, r3
 8006618:	401a      	ands	r2, r3
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	fa93 f3a3 	rbit	r3, r3
 8006624:	61fb      	str	r3, [r7, #28]
  return result;
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006630:	2320      	movs	r3, #32
 8006632:	e003      	b.n	800663c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	fab3 f383 	clz	r3, r3
 800663a:	b2db      	uxtb	r3, r3
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	fa01 f303 	lsl.w	r3, r1, r3
 8006644:	431a      	orrs	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	601a      	str	r2, [r3, #0]
}
 800664a:	bf00      	nop
 800664c:	372c      	adds	r7, #44	; 0x2c
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	60f8      	str	r0, [r7, #12]
 800665e:	60b9      	str	r1, [r7, #8]
 8006660:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	43db      	mvns	r3, r3
 800666a:	401a      	ands	r2, r3
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	fb01 f303 	mul.w	r3, r1, r3
 8006674:	431a      	orrs	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	605a      	str	r2, [r3, #4]
}
 800667a:	bf00      	nop
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006686:	b480      	push	{r7}
 8006688:	b08b      	sub	sp, #44	; 0x2c
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	fa93 f3a3 	rbit	r3, r3
 80066a0:	613b      	str	r3, [r7, #16]
  return result;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80066ac:	2320      	movs	r3, #32
 80066ae:	e003      	b.n	80066b8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	fab3 f383 	clz	r3, r3
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	2103      	movs	r1, #3
 80066bc:	fa01 f303 	lsl.w	r3, r1, r3
 80066c0:	43db      	mvns	r3, r3
 80066c2:	401a      	ands	r2, r3
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	fa93 f3a3 	rbit	r3, r3
 80066ce:	61fb      	str	r3, [r7, #28]
  return result;
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80066da:	2320      	movs	r3, #32
 80066dc:	e003      	b.n	80066e6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	fab3 f383 	clz	r3, r3
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	005b      	lsls	r3, r3, #1
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	fa01 f303 	lsl.w	r3, r1, r3
 80066ee:	431a      	orrs	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80066f4:	bf00      	nop
 80066f6:	372c      	adds	r7, #44	; 0x2c
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006700:	b480      	push	{r7}
 8006702:	b08b      	sub	sp, #44	; 0x2c
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	fa93 f3a3 	rbit	r3, r3
 800671a:	613b      	str	r3, [r7, #16]
  return result;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006726:	2320      	movs	r3, #32
 8006728:	e003      	b.n	8006732 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	fab3 f383 	clz	r3, r3
 8006730:	b2db      	uxtb	r3, r3
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	2103      	movs	r1, #3
 8006736:	fa01 f303 	lsl.w	r3, r1, r3
 800673a:	43db      	mvns	r3, r3
 800673c:	401a      	ands	r2, r3
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	fa93 f3a3 	rbit	r3, r3
 8006748:	61fb      	str	r3, [r7, #28]
  return result;
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006754:	2320      	movs	r3, #32
 8006756:	e003      	b.n	8006760 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	fab3 f383 	clz	r3, r3
 800675e:	b2db      	uxtb	r3, r3
 8006760:	005b      	lsls	r3, r3, #1
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	fa01 f303 	lsl.w	r3, r1, r3
 8006768:	431a      	orrs	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	60da      	str	r2, [r3, #12]
}
 800676e:	bf00      	nop
 8006770:	372c      	adds	r7, #44	; 0x2c
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800677a:	b480      	push	{r7}
 800677c:	b08b      	sub	sp, #44	; 0x2c
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a1a      	ldr	r2, [r3, #32]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	fa93 f3a3 	rbit	r3, r3
 8006794:	613b      	str	r3, [r7, #16]
  return result;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80067a0:	2320      	movs	r3, #32
 80067a2:	e003      	b.n	80067ac <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	fab3 f383 	clz	r3, r3
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	210f      	movs	r1, #15
 80067b0:	fa01 f303 	lsl.w	r3, r1, r3
 80067b4:	43db      	mvns	r3, r3
 80067b6:	401a      	ands	r2, r3
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	fa93 f3a3 	rbit	r3, r3
 80067c2:	61fb      	str	r3, [r7, #28]
  return result;
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80067ce:	2320      	movs	r3, #32
 80067d0:	e003      	b.n	80067da <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	fab3 f383 	clz	r3, r3
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	fa01 f303 	lsl.w	r3, r1, r3
 80067e2:	431a      	orrs	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80067e8:	bf00      	nop
 80067ea:	372c      	adds	r7, #44	; 0x2c
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b08b      	sub	sp, #44	; 0x2c
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	0a1b      	lsrs	r3, r3, #8
 8006808:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	fa93 f3a3 	rbit	r3, r3
 8006810:	613b      	str	r3, [r7, #16]
  return result;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800681c:	2320      	movs	r3, #32
 800681e:	e003      	b.n	8006828 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	fab3 f383 	clz	r3, r3
 8006826:	b2db      	uxtb	r3, r3
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	210f      	movs	r1, #15
 800682c:	fa01 f303 	lsl.w	r3, r1, r3
 8006830:	43db      	mvns	r3, r3
 8006832:	401a      	ands	r2, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	0a1b      	lsrs	r3, r3, #8
 8006838:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	fa93 f3a3 	rbit	r3, r3
 8006840:	61fb      	str	r3, [r7, #28]
  return result;
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800684c:	2320      	movs	r3, #32
 800684e:	e003      	b.n	8006858 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	fab3 f383 	clz	r3, r3
 8006856:	b2db      	uxtb	r3, r3
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	6879      	ldr	r1, [r7, #4]
 800685c:	fa01 f303 	lsl.w	r3, r1, r3
 8006860:	431a      	orrs	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006866:	bf00      	nop
 8006868:	372c      	adds	r7, #44	; 0x2c
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b088      	sub	sp, #32
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	fa93 f3a3 	rbit	r3, r3
 8006888:	60fb      	str	r3, [r7, #12]
  return result;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <LL_GPIO_Init+0x26>
    return 32U;
 8006894:	2320      	movs	r3, #32
 8006896:	e003      	b.n	80068a0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	fab3 f383 	clz	r3, r3
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80068a2:	e048      	b.n	8006936 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	2101      	movs	r1, #1
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	fa01 f303 	lsl.w	r3, r1, r3
 80068b0:	4013      	ands	r3, r2
 80068b2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d03a      	beq.n	8006930 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d003      	beq.n	80068ca <LL_GPIO_Init+0x58>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d10e      	bne.n	80068e8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	461a      	mov	r2, r3
 80068d0:	69b9      	ldr	r1, [r7, #24]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7ff fed7 	bl	8006686 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	6819      	ldr	r1, [r3, #0]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	461a      	mov	r2, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff feb7 	bl	8006656 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	461a      	mov	r2, r3
 80068ee:	69b9      	ldr	r1, [r7, #24]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7ff ff05 	bl	8006700 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d111      	bne.n	8006922 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	2bff      	cmp	r3, #255	; 0xff
 8006902:	d807      	bhi.n	8006914 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	461a      	mov	r2, r3
 800690a:	69b9      	ldr	r1, [r7, #24]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff ff34 	bl	800677a <LL_GPIO_SetAFPin_0_7>
 8006912:	e006      	b.n	8006922 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	461a      	mov	r2, r3
 800691a:	69b9      	ldr	r1, [r7, #24]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff ff69 	bl	80067f4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	461a      	mov	r2, r3
 8006928:	69b9      	ldr	r1, [r7, #24]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7ff fe56 	bl	80065dc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	3301      	adds	r3, #1
 8006934:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	fa22 f303 	lsr.w	r3, r2, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1af      	bne.n	80068a4 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3720      	adds	r7, #32
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8006950:	b480      	push	{r7}
 8006952:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8006954:	4b07      	ldr	r3, [pc, #28]	; (8006974 <LL_RCC_HSI_IsReady+0x24>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006960:	d101      	bne.n	8006966 <LL_RCC_HSI_IsReady+0x16>
 8006962:	2301      	movs	r3, #1
 8006964:	e000      	b.n	8006968 <LL_RCC_HSI_IsReady+0x18>
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	40021000 	.word	0x40021000

08006978 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800697c:	4b07      	ldr	r3, [pc, #28]	; (800699c <LL_RCC_LSE_IsReady+0x24>)
 800697e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b02      	cmp	r3, #2
 8006988:	d101      	bne.n	800698e <LL_RCC_LSE_IsReady+0x16>
 800698a:	2301      	movs	r3, #1
 800698c:	e000      	b.n	8006990 <LL_RCC_LSE_IsReady+0x18>
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40021000 	.word	0x40021000

080069a0 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80069a4:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	d101      	bne.n	80069b4 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	40021000 	.word	0x40021000

080069c4 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80069c4:	b480      	push	{r7}
 80069c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80069c8:	4b04      	ldr	r3, [pc, #16]	; (80069dc <LL_RCC_MSI_GetRange+0x18>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40021000 	.word	0x40021000

080069e0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80069e4:	4b04      	ldr	r3, [pc, #16]	; (80069f8 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80069e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069ea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	40021000 	.word	0x40021000

080069fc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006a00:	4b04      	ldr	r3, [pc, #16]	; (8006a14 <LL_RCC_GetSysClkSource+0x18>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f003 030c 	and.w	r3, r3, #12
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	40021000 	.word	0x40021000

08006a18 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006a1c:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <LL_RCC_GetAHBPrescaler+0x18>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	40021000 	.word	0x40021000

08006a34 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006a38:	4b04      	ldr	r3, [pc, #16]	; (8006a4c <LL_RCC_GetAPB1Prescaler+0x18>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40021000 	.word	0x40021000

08006a50 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006a54:	4b04      	ldr	r3, [pc, #16]	; (8006a68 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	40021000 	.word	0x40021000

08006a6c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8006a74:	4b06      	ldr	r3, [pc, #24]	; (8006a90 <LL_RCC_GetUSARTClockSource+0x24>)
 8006a76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	401a      	ands	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	041b      	lsls	r3, r3, #16
 8006a82:	4313      	orrs	r3, r2
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	40021000 	.word	0x40021000

08006a94 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8006a9c:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <LL_RCC_GetUARTClockSource+0x24>)
 8006a9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	401a      	ands	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	041b      	lsls	r3, r3, #16
 8006aaa:	4313      	orrs	r3, r2
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	40021000 	.word	0x40021000

08006abc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006ac0:	4b04      	ldr	r3, [pc, #16]	; (8006ad4 <LL_RCC_PLL_GetMainSource+0x18>)
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f003 0303 	and.w	r3, r3, #3
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	40021000 	.word	0x40021000

08006ad8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006adc:	4b04      	ldr	r3, [pc, #16]	; (8006af0 <LL_RCC_PLL_GetN+0x18>)
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	0a1b      	lsrs	r3, r3, #8
 8006ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	40021000 	.word	0x40021000

08006af4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006af8:	4b04      	ldr	r3, [pc, #16]	; (8006b0c <LL_RCC_PLL_GetR+0x18>)
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40021000 	.word	0x40021000

08006b10 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006b10:	b480      	push	{r7}
 8006b12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006b14:	4b04      	ldr	r3, [pc, #16]	; (8006b28 <LL_RCC_PLL_GetDivider+0x18>)
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	40021000 	.word	0x40021000

08006b2c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d137      	bne.n	8006bae <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff ff94 	bl	8006a6c <LL_RCC_GetUSARTClockSource>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	f200 80b3 	bhi.w	8006cb6 <LL_RCC_GetUSARTClockFreq+0x18a>
 8006b50:	a201      	add	r2, pc, #4	; (adr r2, 8006b58 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8006b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b56:	bf00      	nop
 8006b58:	08006b97 	.word	0x08006b97
 8006b5c:	08006b69 	.word	0x08006b69
 8006b60:	08006b71 	.word	0x08006b71
 8006b64:	08006b83 	.word	0x08006b83
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006b68:	f000 f95c 	bl	8006e24 <RCC_GetSystemClockFreq>
 8006b6c:	60f8      	str	r0, [r7, #12]
        break;
 8006b6e:	e0b5      	b.n	8006cdc <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006b70:	f7ff feee 	bl	8006950 <LL_RCC_HSI_IsReady>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 809f 	beq.w	8006cba <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8006b7c:	4b5a      	ldr	r3, [pc, #360]	; (8006ce8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006b7e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006b80:	e09b      	b.n	8006cba <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006b82:	f7ff fef9 	bl	8006978 <LL_RCC_LSE_IsReady>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8098 	beq.w	8006cbe <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8006b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b92:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006b94:	e093      	b.n	8006cbe <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006b96:	f000 f945 	bl	8006e24 <RCC_GetSystemClockFreq>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 f9d1 	bl	8006f44 <RCC_GetHCLKClockFreq>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 f9f7 	bl	8006f98 <RCC_GetPCLK2ClockFreq>
 8006baa:	60f8      	str	r0, [r7, #12]
        break;
 8006bac:	e096      	b.n	8006cdc <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b0c      	cmp	r3, #12
 8006bb2:	d146      	bne.n	8006c42 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff ff59 	bl	8006a6c <LL_RCC_GetUSARTClockSource>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006bc0:	2b0c      	cmp	r3, #12
 8006bc2:	d87e      	bhi.n	8006cc2 <LL_RCC_GetUSARTClockFreq+0x196>
 8006bc4:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <LL_RCC_GetUSARTClockFreq+0xa0>)
 8006bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bca:	bf00      	nop
 8006bcc:	08006c2b 	.word	0x08006c2b
 8006bd0:	08006cc3 	.word	0x08006cc3
 8006bd4:	08006cc3 	.word	0x08006cc3
 8006bd8:	08006cc3 	.word	0x08006cc3
 8006bdc:	08006c01 	.word	0x08006c01
 8006be0:	08006cc3 	.word	0x08006cc3
 8006be4:	08006cc3 	.word	0x08006cc3
 8006be8:	08006cc3 	.word	0x08006cc3
 8006bec:	08006c09 	.word	0x08006c09
 8006bf0:	08006cc3 	.word	0x08006cc3
 8006bf4:	08006cc3 	.word	0x08006cc3
 8006bf8:	08006cc3 	.word	0x08006cc3
 8006bfc:	08006c19 	.word	0x08006c19
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006c00:	f000 f910 	bl	8006e24 <RCC_GetSystemClockFreq>
 8006c04:	60f8      	str	r0, [r7, #12]
        break;
 8006c06:	e069      	b.n	8006cdc <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006c08:	f7ff fea2 	bl	8006950 <LL_RCC_HSI_IsReady>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d059      	beq.n	8006cc6 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8006c12:	4b35      	ldr	r3, [pc, #212]	; (8006ce8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006c14:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006c16:	e056      	b.n	8006cc6 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006c18:	f7ff feae 	bl	8006978 <LL_RCC_LSE_IsReady>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d053      	beq.n	8006cca <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8006c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c26:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006c28:	e04f      	b.n	8006cca <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006c2a:	f000 f8fb 	bl	8006e24 <RCC_GetSystemClockFreq>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 f987 	bl	8006f44 <RCC_GetHCLKClockFreq>
 8006c36:	4603      	mov	r3, r0
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 f999 	bl	8006f70 <RCC_GetPCLK1ClockFreq>
 8006c3e:	60f8      	str	r0, [r7, #12]
        break;
 8006c40:	e04c      	b.n	8006cdc <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b30      	cmp	r3, #48	; 0x30
 8006c46:	d142      	bne.n	8006cce <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff ff0f 	bl	8006a6c <LL_RCC_GetUSARTClockSource>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006c54:	d01a      	beq.n	8006c8c <LL_RCC_GetUSARTClockFreq+0x160>
 8006c56:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006c5a:	d83a      	bhi.n	8006cd2 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006c5c:	4a23      	ldr	r2, [pc, #140]	; (8006cec <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00c      	beq.n	8006c7c <LL_RCC_GetUSARTClockFreq+0x150>
 8006c62:	4a22      	ldr	r2, [pc, #136]	; (8006cec <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d834      	bhi.n	8006cd2 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006c68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c6c:	d017      	beq.n	8006c9e <LL_RCC_GetUSARTClockFreq+0x172>
 8006c6e:	4a20      	ldr	r2, [pc, #128]	; (8006cf0 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d12e      	bne.n	8006cd2 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8006c74:	f000 f8d6 	bl	8006e24 <RCC_GetSystemClockFreq>
 8006c78:	60f8      	str	r0, [r7, #12]
          break;
 8006c7a:	e02f      	b.n	8006cdc <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8006c7c:	f7ff fe68 	bl	8006950 <LL_RCC_HSI_IsReady>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d027      	beq.n	8006cd6 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8006c86:	4b18      	ldr	r3, [pc, #96]	; (8006ce8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006c88:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006c8a:	e024      	b.n	8006cd6 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8006c8c:	f7ff fe74 	bl	8006978 <LL_RCC_LSE_IsReady>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d021      	beq.n	8006cda <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8006c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c9a:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006c9c:	e01d      	b.n	8006cda <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006c9e:	f000 f8c1 	bl	8006e24 <RCC_GetSystemClockFreq>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 f94d 	bl	8006f44 <RCC_GetHCLKClockFreq>
 8006caa:	4603      	mov	r3, r0
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 f95f 	bl	8006f70 <RCC_GetPCLK1ClockFreq>
 8006cb2:	60f8      	str	r0, [r7, #12]
          break;
 8006cb4:	e012      	b.n	8006cdc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006cb6:	bf00      	nop
 8006cb8:	e010      	b.n	8006cdc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006cba:	bf00      	nop
 8006cbc:	e00e      	b.n	8006cdc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006cbe:	bf00      	nop
 8006cc0:	e00c      	b.n	8006cdc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006cc2:	bf00      	nop
 8006cc4:	e00a      	b.n	8006cdc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006cc6:	bf00      	nop
 8006cc8:	e008      	b.n	8006cdc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006cca:	bf00      	nop
 8006ccc:	e006      	b.n	8006cdc <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8006cce:	bf00      	nop
 8006cd0:	e004      	b.n	8006cdc <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006cd2:	bf00      	nop
 8006cd4:	e002      	b.n	8006cdc <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006cd6:	bf00      	nop
 8006cd8:	e000      	b.n	8006cdc <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006cda:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	00f42400 	.word	0x00f42400
 8006cec:	00300020 	.word	0x00300020
 8006cf0:	00300010 	.word	0x00300010

08006cf4 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2bc0      	cmp	r3, #192	; 0xc0
 8006d04:	d136      	bne.n	8006d74 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7ff fec4 	bl	8006a94 <LL_RCC_GetUARTClockSource>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006d12:	d01a      	beq.n	8006d4a <LL_RCC_GetUARTClockFreq+0x56>
 8006d14:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006d18:	d82e      	bhi.n	8006d78 <LL_RCC_GetUARTClockFreq+0x84>
 8006d1a:	4a3d      	ldr	r2, [pc, #244]	; (8006e10 <LL_RCC_GetUARTClockFreq+0x11c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00c      	beq.n	8006d3a <LL_RCC_GetUARTClockFreq+0x46>
 8006d20:	4a3b      	ldr	r2, [pc, #236]	; (8006e10 <LL_RCC_GetUARTClockFreq+0x11c>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d828      	bhi.n	8006d78 <LL_RCC_GetUARTClockFreq+0x84>
 8006d26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d2a:	d017      	beq.n	8006d5c <LL_RCC_GetUARTClockFreq+0x68>
 8006d2c:	4a39      	ldr	r2, [pc, #228]	; (8006e14 <LL_RCC_GetUARTClockFreq+0x120>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d122      	bne.n	8006d78 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8006d32:	f000 f877 	bl	8006e24 <RCC_GetSystemClockFreq>
 8006d36:	60f8      	str	r0, [r7, #12]
        break;
 8006d38:	e023      	b.n	8006d82 <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006d3a:	f7ff fe09 	bl	8006950 <LL_RCC_HSI_IsReady>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d01b      	beq.n	8006d7c <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8006d44:	4b34      	ldr	r3, [pc, #208]	; (8006e18 <LL_RCC_GetUARTClockFreq+0x124>)
 8006d46:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006d48:	e018      	b.n	8006d7c <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006d4a:	f7ff fe15 	bl	8006978 <LL_RCC_LSE_IsReady>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d015      	beq.n	8006d80 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8006d54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d58:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006d5a:	e011      	b.n	8006d80 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006d5c:	f000 f862 	bl	8006e24 <RCC_GetSystemClockFreq>
 8006d60:	4603      	mov	r3, r0
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 f8ee 	bl	8006f44 <RCC_GetHCLKClockFreq>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 f900 	bl	8006f70 <RCC_GetPCLK1ClockFreq>
 8006d70:	60f8      	str	r0, [r7, #12]
        break;
 8006d72:	e006      	b.n	8006d82 <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8006d74:	bf00      	nop
 8006d76:	e004      	b.n	8006d82 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006d78:	bf00      	nop
 8006d7a:	e002      	b.n	8006d82 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006d7c:	bf00      	nop
 8006d7e:	e000      	b.n	8006d82 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006d80:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d88:	d136      	bne.n	8006df8 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7ff fe82 	bl	8006a94 <LL_RCC_GetUARTClockSource>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006d96:	d01a      	beq.n	8006dce <LL_RCC_GetUARTClockFreq+0xda>
 8006d98:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006d9c:	d82e      	bhi.n	8006dfc <LL_RCC_GetUARTClockFreq+0x108>
 8006d9e:	4a1f      	ldr	r2, [pc, #124]	; (8006e1c <LL_RCC_GetUARTClockFreq+0x128>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d00c      	beq.n	8006dbe <LL_RCC_GetUARTClockFreq+0xca>
 8006da4:	4a1d      	ldr	r2, [pc, #116]	; (8006e1c <LL_RCC_GetUARTClockFreq+0x128>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d828      	bhi.n	8006dfc <LL_RCC_GetUARTClockFreq+0x108>
 8006daa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006dae:	d017      	beq.n	8006de0 <LL_RCC_GetUARTClockFreq+0xec>
 8006db0:	4a1b      	ldr	r2, [pc, #108]	; (8006e20 <LL_RCC_GetUARTClockFreq+0x12c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d122      	bne.n	8006dfc <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8006db6:	f000 f835 	bl	8006e24 <RCC_GetSystemClockFreq>
 8006dba:	60f8      	str	r0, [r7, #12]
        break;
 8006dbc:	e023      	b.n	8006e06 <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006dbe:	f7ff fdc7 	bl	8006950 <LL_RCC_HSI_IsReady>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01b      	beq.n	8006e00 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8006dc8:	4b13      	ldr	r3, [pc, #76]	; (8006e18 <LL_RCC_GetUARTClockFreq+0x124>)
 8006dca:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006dcc:	e018      	b.n	8006e00 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006dce:	f7ff fdd3 	bl	8006978 <LL_RCC_LSE_IsReady>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d015      	beq.n	8006e04 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8006dd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ddc:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006dde:	e011      	b.n	8006e04 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006de0:	f000 f820 	bl	8006e24 <RCC_GetSystemClockFreq>
 8006de4:	4603      	mov	r3, r0
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 f8ac 	bl	8006f44 <RCC_GetHCLKClockFreq>
 8006dec:	4603      	mov	r3, r0
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 f8be 	bl	8006f70 <RCC_GetPCLK1ClockFreq>
 8006df4:	60f8      	str	r0, [r7, #12]
        break;
 8006df6:	e006      	b.n	8006e06 <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8006df8:	bf00      	nop
 8006dfa:	e004      	b.n	8006e06 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006dfc:	bf00      	nop
 8006dfe:	e002      	b.n	8006e06 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006e00:	bf00      	nop
 8006e02:	e000      	b.n	8006e06 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006e04:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8006e06:	68fb      	ldr	r3, [r7, #12]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	00c00080 	.word	0x00c00080
 8006e14:	00c00040 	.word	0x00c00040
 8006e18:	00f42400 	.word	0x00f42400
 8006e1c:	03000200 	.word	0x03000200
 8006e20:	03000100 	.word	0x03000100

08006e24 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006e2a:	f7ff fde7 	bl	80069fc <LL_RCC_GetSysClkSource>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b0c      	cmp	r3, #12
 8006e32:	d851      	bhi.n	8006ed8 <RCC_GetSystemClockFreq+0xb4>
 8006e34:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <RCC_GetSystemClockFreq+0x18>)
 8006e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3a:	bf00      	nop
 8006e3c:	08006e71 	.word	0x08006e71
 8006e40:	08006ed9 	.word	0x08006ed9
 8006e44:	08006ed9 	.word	0x08006ed9
 8006e48:	08006ed9 	.word	0x08006ed9
 8006e4c:	08006ec5 	.word	0x08006ec5
 8006e50:	08006ed9 	.word	0x08006ed9
 8006e54:	08006ed9 	.word	0x08006ed9
 8006e58:	08006ed9 	.word	0x08006ed9
 8006e5c:	08006ecb 	.word	0x08006ecb
 8006e60:	08006ed9 	.word	0x08006ed9
 8006e64:	08006ed9 	.word	0x08006ed9
 8006e68:	08006ed9 	.word	0x08006ed9
 8006e6c:	08006ed1 	.word	0x08006ed1
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006e70:	f7ff fd96 	bl	80069a0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d111      	bne.n	8006e9e <RCC_GetSystemClockFreq+0x7a>
 8006e7a:	f7ff fd91 	bl	80069a0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d004      	beq.n	8006e8e <RCC_GetSystemClockFreq+0x6a>
 8006e84:	f7ff fd9e 	bl	80069c4 <LL_RCC_MSI_GetRange>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	0a1b      	lsrs	r3, r3, #8
 8006e8c:	e003      	b.n	8006e96 <RCC_GetSystemClockFreq+0x72>
 8006e8e:	f7ff fda7 	bl	80069e0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006e92:	4603      	mov	r3, r0
 8006e94:	0a1b      	lsrs	r3, r3, #8
 8006e96:	4a28      	ldr	r2, [pc, #160]	; (8006f38 <RCC_GetSystemClockFreq+0x114>)
 8006e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e9c:	e010      	b.n	8006ec0 <RCC_GetSystemClockFreq+0x9c>
 8006e9e:	f7ff fd7f 	bl	80069a0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d004      	beq.n	8006eb2 <RCC_GetSystemClockFreq+0x8e>
 8006ea8:	f7ff fd8c 	bl	80069c4 <LL_RCC_MSI_GetRange>
 8006eac:	4603      	mov	r3, r0
 8006eae:	091b      	lsrs	r3, r3, #4
 8006eb0:	e003      	b.n	8006eba <RCC_GetSystemClockFreq+0x96>
 8006eb2:	f7ff fd95 	bl	80069e0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	091b      	lsrs	r3, r3, #4
 8006eba:	4a1f      	ldr	r2, [pc, #124]	; (8006f38 <RCC_GetSystemClockFreq+0x114>)
 8006ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ec0:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006ec2:	e033      	b.n	8006f2c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006ec4:	4b1d      	ldr	r3, [pc, #116]	; (8006f3c <RCC_GetSystemClockFreq+0x118>)
 8006ec6:	607b      	str	r3, [r7, #4]
      break;
 8006ec8:	e030      	b.n	8006f2c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006eca:	4b1d      	ldr	r3, [pc, #116]	; (8006f40 <RCC_GetSystemClockFreq+0x11c>)
 8006ecc:	607b      	str	r3, [r7, #4]
      break;
 8006ece:	e02d      	b.n	8006f2c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006ed0:	f000 f876 	bl	8006fc0 <RCC_PLL_GetFreqDomain_SYS>
 8006ed4:	6078      	str	r0, [r7, #4]
      break;
 8006ed6:	e029      	b.n	8006f2c <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006ed8:	f7ff fd62 	bl	80069a0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d111      	bne.n	8006f06 <RCC_GetSystemClockFreq+0xe2>
 8006ee2:	f7ff fd5d 	bl	80069a0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d004      	beq.n	8006ef6 <RCC_GetSystemClockFreq+0xd2>
 8006eec:	f7ff fd6a 	bl	80069c4 <LL_RCC_MSI_GetRange>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	0a1b      	lsrs	r3, r3, #8
 8006ef4:	e003      	b.n	8006efe <RCC_GetSystemClockFreq+0xda>
 8006ef6:	f7ff fd73 	bl	80069e0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006efa:	4603      	mov	r3, r0
 8006efc:	0a1b      	lsrs	r3, r3, #8
 8006efe:	4a0e      	ldr	r2, [pc, #56]	; (8006f38 <RCC_GetSystemClockFreq+0x114>)
 8006f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f04:	e010      	b.n	8006f28 <RCC_GetSystemClockFreq+0x104>
 8006f06:	f7ff fd4b 	bl	80069a0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d004      	beq.n	8006f1a <RCC_GetSystemClockFreq+0xf6>
 8006f10:	f7ff fd58 	bl	80069c4 <LL_RCC_MSI_GetRange>
 8006f14:	4603      	mov	r3, r0
 8006f16:	091b      	lsrs	r3, r3, #4
 8006f18:	e003      	b.n	8006f22 <RCC_GetSystemClockFreq+0xfe>
 8006f1a:	f7ff fd61 	bl	80069e0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	091b      	lsrs	r3, r3, #4
 8006f22:	4a05      	ldr	r2, [pc, #20]	; (8006f38 <RCC_GetSystemClockFreq+0x114>)
 8006f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f28:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006f2a:	bf00      	nop
  }

  return frequency;
 8006f2c:	687b      	ldr	r3, [r7, #4]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	0800a920 	.word	0x0800a920
 8006f3c:	00f42400 	.word	0x00f42400
 8006f40:	007a1200 	.word	0x007a1200

08006f44 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006f4c:	f7ff fd64 	bl	8006a18 <LL_RCC_GetAHBPrescaler>
 8006f50:	4603      	mov	r3, r0
 8006f52:	091b      	lsrs	r3, r3, #4
 8006f54:	f003 030f 	and.w	r3, r3, #15
 8006f58:	4a04      	ldr	r2, [pc, #16]	; (8006f6c <RCC_GetHCLKClockFreq+0x28>)
 8006f5a:	5cd3      	ldrb	r3, [r2, r3]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	40d3      	lsrs	r3, r2
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	0800a908 	.word	0x0800a908

08006f70 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006f78:	f7ff fd5c 	bl	8006a34 <LL_RCC_GetAPB1Prescaler>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	0a1b      	lsrs	r3, r3, #8
 8006f80:	4a04      	ldr	r2, [pc, #16]	; (8006f94 <RCC_GetPCLK1ClockFreq+0x24>)
 8006f82:	5cd3      	ldrb	r3, [r2, r3]
 8006f84:	461a      	mov	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	40d3      	lsrs	r3, r2
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	0800a918 	.word	0x0800a918

08006f98 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006fa0:	f7ff fd56 	bl	8006a50 <LL_RCC_GetAPB2Prescaler>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	0adb      	lsrs	r3, r3, #11
 8006fa8:	4a04      	ldr	r2, [pc, #16]	; (8006fbc <RCC_GetPCLK2ClockFreq+0x24>)
 8006faa:	5cd3      	ldrb	r3, [r2, r3]
 8006fac:	461a      	mov	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	40d3      	lsrs	r3, r2
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	0800a918 	.word	0x0800a918

08006fc0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006fc0:	b590      	push	{r4, r7, lr}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006fc6:	f7ff fd79 	bl	8006abc <LL_RCC_PLL_GetMainSource>
 8006fca:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d036      	beq.n	8007040 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d836      	bhi.n	8007046 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d003      	beq.n	8006fe6 <RCC_PLL_GetFreqDomain_SYS+0x26>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d02a      	beq.n	800703a <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8006fe4:	e02f      	b.n	8007046 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006fe6:	f7ff fcdb 	bl	80069a0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d111      	bne.n	8007014 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8006ff0:	f7ff fcd6 	bl	80069a0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d004      	beq.n	8007004 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8006ffa:	f7ff fce3 	bl	80069c4 <LL_RCC_MSI_GetRange>
 8006ffe:	4603      	mov	r3, r0
 8007000:	0a1b      	lsrs	r3, r3, #8
 8007002:	e003      	b.n	800700c <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8007004:	f7ff fcec 	bl	80069e0 <LL_RCC_MSI_GetRangeAfterStandby>
 8007008:	4603      	mov	r3, r0
 800700a:	0a1b      	lsrs	r3, r3, #8
 800700c:	4a2f      	ldr	r2, [pc, #188]	; (80070cc <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800700e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007012:	e010      	b.n	8007036 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8007014:	f7ff fcc4 	bl	80069a0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d004      	beq.n	8007028 <RCC_PLL_GetFreqDomain_SYS+0x68>
 800701e:	f7ff fcd1 	bl	80069c4 <LL_RCC_MSI_GetRange>
 8007022:	4603      	mov	r3, r0
 8007024:	091b      	lsrs	r3, r3, #4
 8007026:	e003      	b.n	8007030 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8007028:	f7ff fcda 	bl	80069e0 <LL_RCC_MSI_GetRangeAfterStandby>
 800702c:	4603      	mov	r3, r0
 800702e:	091b      	lsrs	r3, r3, #4
 8007030:	4a26      	ldr	r2, [pc, #152]	; (80070cc <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8007032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007036:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8007038:	e02f      	b.n	800709a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800703a:	4b25      	ldr	r3, [pc, #148]	; (80070d0 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 800703c:	607b      	str	r3, [r7, #4]
      break;
 800703e:	e02c      	b.n	800709a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007040:	4b24      	ldr	r3, [pc, #144]	; (80070d4 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8007042:	607b      	str	r3, [r7, #4]
      break;
 8007044:	e029      	b.n	800709a <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007046:	f7ff fcab 	bl	80069a0 <LL_RCC_MSI_IsEnabledRangeSelect>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d111      	bne.n	8007074 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8007050:	f7ff fca6 	bl	80069a0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d004      	beq.n	8007064 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 800705a:	f7ff fcb3 	bl	80069c4 <LL_RCC_MSI_GetRange>
 800705e:	4603      	mov	r3, r0
 8007060:	0a1b      	lsrs	r3, r3, #8
 8007062:	e003      	b.n	800706c <RCC_PLL_GetFreqDomain_SYS+0xac>
 8007064:	f7ff fcbc 	bl	80069e0 <LL_RCC_MSI_GetRangeAfterStandby>
 8007068:	4603      	mov	r3, r0
 800706a:	0a1b      	lsrs	r3, r3, #8
 800706c:	4a17      	ldr	r2, [pc, #92]	; (80070cc <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800706e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007072:	e010      	b.n	8007096 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8007074:	f7ff fc94 	bl	80069a0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d004      	beq.n	8007088 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 800707e:	f7ff fca1 	bl	80069c4 <LL_RCC_MSI_GetRange>
 8007082:	4603      	mov	r3, r0
 8007084:	091b      	lsrs	r3, r3, #4
 8007086:	e003      	b.n	8007090 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8007088:	f7ff fcaa 	bl	80069e0 <LL_RCC_MSI_GetRangeAfterStandby>
 800708c:	4603      	mov	r3, r0
 800708e:	091b      	lsrs	r3, r3, #4
 8007090:	4a0e      	ldr	r2, [pc, #56]	; (80070cc <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8007092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007096:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8007098:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800709a:	f7ff fd39 	bl	8006b10 <LL_RCC_PLL_GetDivider>
 800709e:	4603      	mov	r3, r0
 80070a0:	091b      	lsrs	r3, r3, #4
 80070a2:	3301      	adds	r3, #1
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	fbb2 f4f3 	udiv	r4, r2, r3
 80070aa:	f7ff fd15 	bl	8006ad8 <LL_RCC_PLL_GetN>
 80070ae:	4603      	mov	r3, r0
 80070b0:	fb03 f404 	mul.w	r4, r3, r4
 80070b4:	f7ff fd1e 	bl	8006af4 <LL_RCC_PLL_GetR>
 80070b8:	4603      	mov	r3, r0
 80070ba:	0e5b      	lsrs	r3, r3, #25
 80070bc:	3301      	adds	r3, #1
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd90      	pop	{r4, r7, pc}
 80070cc:	0800a920 	.word	0x0800a920
 80070d0:	00f42400 	.word	0x00f42400
 80070d4:	007a1200 	.word	0x007a1200

080070d8 <LL_USART_IsEnabled>:
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d101      	bne.n	80070f0 <LL_USART_IsEnabled+0x18>
 80070ec:	2301      	movs	r3, #1
 80070ee:	e000      	b.n	80070f2 <LL_USART_IsEnabled+0x1a>
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <LL_USART_SetStopBitsLength>:
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	431a      	orrs	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	605a      	str	r2, [r3, #4]
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <LL_USART_SetHWFlowCtrl>:
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	609a      	str	r2, [r3, #8]
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <LL_USART_SetBaudRate>:
{
 800714a:	b480      	push	{r7}
 800714c:	b087      	sub	sp, #28
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	607a      	str	r2, [r7, #4]
 8007156:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800715e:	d11a      	bne.n	8007196 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	005a      	lsls	r2, r3, #1
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	085b      	lsrs	r3, r3, #1
 8007168:	441a      	add	r2, r3
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007170:	b29b      	uxth	r3, r3
 8007172:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800717a:	4013      	ands	r3, r2
 800717c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	085b      	lsrs	r3, r3, #1
 8007182:	b29b      	uxth	r3, r3
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4313      	orrs	r3, r2
 800718c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	60da      	str	r2, [r3, #12]
}
 8007194:	e00a      	b.n	80071ac <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	085a      	lsrs	r2, r3, #1
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	441a      	add	r2, r3
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	461a      	mov	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	60da      	str	r2, [r3, #12]
}
 80071ac:	bf00      	nop
 80071ae:	371c      	adds	r7, #28
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff ff84 	bl	80070d8 <LL_USART_IsEnabled>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d15b      	bne.n	800728e <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	4b2f      	ldr	r3, [pc, #188]	; (8007298 <LL_USART_Init+0xe0>)
 80071dc:	4013      	ands	r3, r2
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	6851      	ldr	r1, [r2, #4]
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	68d2      	ldr	r2, [r2, #12]
 80071e6:	4311      	orrs	r1, r2
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	6912      	ldr	r2, [r2, #16]
 80071ec:	4311      	orrs	r1, r2
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	6992      	ldr	r2, [r2, #24]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	431a      	orrs	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff ff7c 	bl	80070fe <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7ff ff89 	bl	8007124 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a21      	ldr	r2, [pc, #132]	; (800729c <LL_USART_Init+0xe4>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d104      	bne.n	8007224 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800721a:	2003      	movs	r0, #3
 800721c:	f7ff fc86 	bl	8006b2c <LL_RCC_GetUSARTClockFreq>
 8007220:	60b8      	str	r0, [r7, #8]
 8007222:	e023      	b.n	800726c <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a1e      	ldr	r2, [pc, #120]	; (80072a0 <LL_USART_Init+0xe8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d104      	bne.n	8007236 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800722c:	200c      	movs	r0, #12
 800722e:	f7ff fc7d 	bl	8006b2c <LL_RCC_GetUSARTClockFreq>
 8007232:	60b8      	str	r0, [r7, #8]
 8007234:	e01a      	b.n	800726c <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a1a      	ldr	r2, [pc, #104]	; (80072a4 <LL_USART_Init+0xec>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d104      	bne.n	8007248 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800723e:	2030      	movs	r0, #48	; 0x30
 8007240:	f7ff fc74 	bl	8006b2c <LL_RCC_GetUSARTClockFreq>
 8007244:	60b8      	str	r0, [r7, #8]
 8007246:	e011      	b.n	800726c <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a17      	ldr	r2, [pc, #92]	; (80072a8 <LL_USART_Init+0xf0>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d104      	bne.n	800725a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8007250:	20c0      	movs	r0, #192	; 0xc0
 8007252:	f7ff fd4f 	bl	8006cf4 <LL_RCC_GetUARTClockFreq>
 8007256:	60b8      	str	r0, [r7, #8]
 8007258:	e008      	b.n	800726c <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a13      	ldr	r2, [pc, #76]	; (80072ac <LL_USART_Init+0xf4>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d104      	bne.n	800726c <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8007262:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007266:	f7ff fd45 	bl	8006cf4 <LL_RCC_GetUARTClockFreq>
 800726a:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00d      	beq.n	800728e <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d009      	beq.n	800728e <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 800727a:	2300      	movs	r3, #0
 800727c:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	699a      	ldr	r2, [r3, #24]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68b9      	ldr	r1, [r7, #8]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7ff ff5e 	bl	800714a <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800728e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	efff69f3 	.word	0xefff69f3
 800729c:	40013800 	.word	0x40013800
 80072a0:	40004400 	.word	0x40004400
 80072a4:	40004800 	.word	0x40004800
 80072a8:	40004c00 	.word	0x40004c00
 80072ac:	40005000 	.word	0x40005000

080072b0 <__NVIC_SetPriority>:
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	4603      	mov	r3, r0
 80072b8:	6039      	str	r1, [r7, #0]
 80072ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	db0a      	blt.n	80072da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	490c      	ldr	r1, [pc, #48]	; (80072fc <__NVIC_SetPriority+0x4c>)
 80072ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ce:	0112      	lsls	r2, r2, #4
 80072d0:	b2d2      	uxtb	r2, r2
 80072d2:	440b      	add	r3, r1
 80072d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80072d8:	e00a      	b.n	80072f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	4908      	ldr	r1, [pc, #32]	; (8007300 <__NVIC_SetPriority+0x50>)
 80072e0:	79fb      	ldrb	r3, [r7, #7]
 80072e2:	f003 030f 	and.w	r3, r3, #15
 80072e6:	3b04      	subs	r3, #4
 80072e8:	0112      	lsls	r2, r2, #4
 80072ea:	b2d2      	uxtb	r2, r2
 80072ec:	440b      	add	r3, r1
 80072ee:	761a      	strb	r2, [r3, #24]
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	e000e100 	.word	0xe000e100
 8007300:	e000ed00 	.word	0xe000ed00

08007304 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <SysTick_Handler+0x1c>)
 800730a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800730c:	f001 fcfe 	bl	8008d0c <xTaskGetSchedulerState>
 8007310:	4603      	mov	r3, r0
 8007312:	2b01      	cmp	r3, #1
 8007314:	d001      	beq.n	800731a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007316:	f002 fae7 	bl	80098e8 <xPortSysTickHandler>
  }
}
 800731a:	bf00      	nop
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	e000e010 	.word	0xe000e010

08007324 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007324:	b580      	push	{r7, lr}
 8007326:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007328:	2100      	movs	r1, #0
 800732a:	f06f 0004 	mvn.w	r0, #4
 800732e:	f7ff ffbf 	bl	80072b0 <__NVIC_SetPriority>
#endif
}
 8007332:	bf00      	nop
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800733e:	f3ef 8305 	mrs	r3, IPSR
 8007342:	603b      	str	r3, [r7, #0]
  return(result);
 8007344:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800734a:	f06f 0305 	mvn.w	r3, #5
 800734e:	607b      	str	r3, [r7, #4]
 8007350:	e00c      	b.n	800736c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007352:	4b0a      	ldr	r3, [pc, #40]	; (800737c <osKernelInitialize+0x44>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d105      	bne.n	8007366 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800735a:	4b08      	ldr	r3, [pc, #32]	; (800737c <osKernelInitialize+0x44>)
 800735c:	2201      	movs	r2, #1
 800735e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007360:	2300      	movs	r3, #0
 8007362:	607b      	str	r3, [r7, #4]
 8007364:	e002      	b.n	800736c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007366:	f04f 33ff 	mov.w	r3, #4294967295
 800736a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800736c:	687b      	ldr	r3, [r7, #4]
}
 800736e:	4618      	mov	r0, r3
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	20000758 	.word	0x20000758

08007380 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007386:	f3ef 8305 	mrs	r3, IPSR
 800738a:	603b      	str	r3, [r7, #0]
  return(result);
 800738c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007392:	f06f 0305 	mvn.w	r3, #5
 8007396:	607b      	str	r3, [r7, #4]
 8007398:	e010      	b.n	80073bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800739a:	4b0b      	ldr	r3, [pc, #44]	; (80073c8 <osKernelStart+0x48>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d109      	bne.n	80073b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80073a2:	f7ff ffbf 	bl	8007324 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80073a6:	4b08      	ldr	r3, [pc, #32]	; (80073c8 <osKernelStart+0x48>)
 80073a8:	2202      	movs	r2, #2
 80073aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80073ac:	f001 f866 	bl	800847c <vTaskStartScheduler>
      stat = osOK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	607b      	str	r3, [r7, #4]
 80073b4:	e002      	b.n	80073bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80073b6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073bc:	687b      	ldr	r3, [r7, #4]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20000758 	.word	0x20000758

080073cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08e      	sub	sp, #56	; 0x38
 80073d0:	af04      	add	r7, sp, #16
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80073d8:	2300      	movs	r3, #0
 80073da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073dc:	f3ef 8305 	mrs	r3, IPSR
 80073e0:	617b      	str	r3, [r7, #20]
  return(result);
 80073e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d17e      	bne.n	80074e6 <osThreadNew+0x11a>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d07b      	beq.n	80074e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80073ee:	2380      	movs	r3, #128	; 0x80
 80073f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80073f2:	2318      	movs	r3, #24
 80073f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80073f6:	2300      	movs	r3, #0
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80073fa:	f04f 33ff 	mov.w	r3, #4294967295
 80073fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d045      	beq.n	8007492 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <osThreadNew+0x48>
        name = attr->name;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d008      	beq.n	800743a <osThreadNew+0x6e>
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	2b38      	cmp	r3, #56	; 0x38
 800742c:	d805      	bhi.n	800743a <osThreadNew+0x6e>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <osThreadNew+0x72>
        return (NULL);
 800743a:	2300      	movs	r3, #0
 800743c:	e054      	b.n	80074e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	089b      	lsrs	r3, r3, #2
 800744c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00e      	beq.n	8007474 <osThreadNew+0xa8>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	2b5b      	cmp	r3, #91	; 0x5b
 800745c:	d90a      	bls.n	8007474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007462:	2b00      	cmp	r3, #0
 8007464:	d006      	beq.n	8007474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d002      	beq.n	8007474 <osThreadNew+0xa8>
        mem = 1;
 800746e:	2301      	movs	r3, #1
 8007470:	61bb      	str	r3, [r7, #24]
 8007472:	e010      	b.n	8007496 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10c      	bne.n	8007496 <osThreadNew+0xca>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d108      	bne.n	8007496 <osThreadNew+0xca>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d104      	bne.n	8007496 <osThreadNew+0xca>
          mem = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	61bb      	str	r3, [r7, #24]
 8007490:	e001      	b.n	8007496 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d110      	bne.n	80074be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074a4:	9202      	str	r2, [sp, #8]
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	6a3a      	ldr	r2, [r7, #32]
 80074b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 fe0c 	bl	80080d0 <xTaskCreateStatic>
 80074b8:	4603      	mov	r3, r0
 80074ba:	613b      	str	r3, [r7, #16]
 80074bc:	e013      	b.n	80074e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d110      	bne.n	80074e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	f107 0310 	add.w	r3, r7, #16
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 fe57 	bl	800818a <xTaskCreate>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d001      	beq.n	80074e6 <osThreadNew+0x11a>
            hTask = NULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074e6:	693b      	ldr	r3, [r7, #16]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3728      	adds	r7, #40	; 0x28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074f8:	f3ef 8305 	mrs	r3, IPSR
 80074fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80074fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007500:	2b00      	cmp	r3, #0
 8007502:	d003      	beq.n	800750c <osDelay+0x1c>
    stat = osErrorISR;
 8007504:	f06f 0305 	mvn.w	r3, #5
 8007508:	60fb      	str	r3, [r7, #12]
 800750a:	e007      	b.n	800751c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800750c:	2300      	movs	r3, #0
 800750e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 ff7c 	bl	8008414 <vTaskDelay>
    }
  }

  return (stat);
 800751c:	68fb      	ldr	r3, [r7, #12]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
	...

08007528 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4a07      	ldr	r2, [pc, #28]	; (8007554 <vApplicationGetIdleTaskMemory+0x2c>)
 8007538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4a06      	ldr	r2, [pc, #24]	; (8007558 <vApplicationGetIdleTaskMemory+0x30>)
 800753e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2280      	movs	r2, #128	; 0x80
 8007544:	601a      	str	r2, [r3, #0]
}
 8007546:	bf00      	nop
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	2000075c 	.word	0x2000075c
 8007558:	200007b8 	.word	0x200007b8

0800755c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4a07      	ldr	r2, [pc, #28]	; (8007588 <vApplicationGetTimerTaskMemory+0x2c>)
 800756c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	4a06      	ldr	r2, [pc, #24]	; (800758c <vApplicationGetTimerTaskMemory+0x30>)
 8007572:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800757a:	601a      	str	r2, [r3, #0]
}
 800757c:	bf00      	nop
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	200009b8 	.word	0x200009b8
 800758c:	20000a14 	.word	0x20000a14

08007590 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f103 0208 	add.w	r2, r3, #8
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f04f 32ff 	mov.w	r2, #4294967295
 80075a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f103 0208 	add.w	r2, r3, #8
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f103 0208 	add.w	r2, r3, #8
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075ea:	b480      	push	{r7}
 80075ec:	b085      	sub	sp, #20
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	689a      	ldr	r2, [r3, #8]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	601a      	str	r2, [r3, #0]
}
 8007626:	bf00      	nop
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007632:	b480      	push	{r7}
 8007634:	b085      	sub	sp, #20
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007648:	d103      	bne.n	8007652 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	60fb      	str	r3, [r7, #12]
 8007650:	e00c      	b.n	800766c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	3308      	adds	r3, #8
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	e002      	b.n	8007660 <vListInsert+0x2e>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	429a      	cmp	r2, r3
 800766a:	d2f6      	bcs.n	800765a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	685a      	ldr	r2, [r3, #4]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	1c5a      	adds	r2, r3, #1
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	601a      	str	r2, [r3, #0]
}
 8007698:	bf00      	nop
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	6892      	ldr	r2, [r2, #8]
 80076ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	6852      	ldr	r2, [r2, #4]
 80076c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d103      	bne.n	80076d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	1e5a      	subs	r2, r3, #1
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3714      	adds	r7, #20
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10a      	bne.n	8007722 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800771e:	bf00      	nop
 8007720:	e7fe      	b.n	8007720 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007722:	f002 f84f 	bl	80097c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772e:	68f9      	ldr	r1, [r7, #12]
 8007730:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007732:	fb01 f303 	mul.w	r3, r1, r3
 8007736:	441a      	add	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007752:	3b01      	subs	r3, #1
 8007754:	68f9      	ldr	r1, [r7, #12]
 8007756:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007758:	fb01 f303 	mul.w	r3, r1, r3
 800775c:	441a      	add	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	22ff      	movs	r2, #255	; 0xff
 8007766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	22ff      	movs	r2, #255	; 0xff
 800776e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d114      	bne.n	80077a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d01a      	beq.n	80077b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	3310      	adds	r3, #16
 8007784:	4618      	mov	r0, r3
 8007786:	f001 f903 	bl	8008990 <xTaskRemoveFromEventList>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d012      	beq.n	80077b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007790:	4b0c      	ldr	r3, [pc, #48]	; (80077c4 <xQueueGenericReset+0xcc>)
 8007792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	e009      	b.n	80077b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3310      	adds	r3, #16
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff fef2 	bl	8007590 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3324      	adds	r3, #36	; 0x24
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff feed 	bl	8007590 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80077b6:	f002 f835 	bl	8009824 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80077ba:	2301      	movs	r3, #1
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	e000ed04 	.word	0xe000ed04

080077c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08e      	sub	sp, #56	; 0x38
 80077cc:	af02      	add	r7, sp, #8
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10a      	bne.n	80077f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077ee:	bf00      	nop
 80077f0:	e7fe      	b.n	80077f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10a      	bne.n	800780e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
}
 800780a:	bf00      	nop
 800780c:	e7fe      	b.n	800780c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d002      	beq.n	800781a <xQueueGenericCreateStatic+0x52>
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <xQueueGenericCreateStatic+0x56>
 800781a:	2301      	movs	r3, #1
 800781c:	e000      	b.n	8007820 <xQueueGenericCreateStatic+0x58>
 800781e:	2300      	movs	r3, #0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10a      	bne.n	800783a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	623b      	str	r3, [r7, #32]
}
 8007836:	bf00      	nop
 8007838:	e7fe      	b.n	8007838 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d102      	bne.n	8007846 <xQueueGenericCreateStatic+0x7e>
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <xQueueGenericCreateStatic+0x82>
 8007846:	2301      	movs	r3, #1
 8007848:	e000      	b.n	800784c <xQueueGenericCreateStatic+0x84>
 800784a:	2300      	movs	r3, #0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10a      	bne.n	8007866 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	61fb      	str	r3, [r7, #28]
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007866:	2350      	movs	r3, #80	; 0x50
 8007868:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2b50      	cmp	r3, #80	; 0x50
 800786e:	d00a      	beq.n	8007886 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	61bb      	str	r3, [r7, #24]
}
 8007882:	bf00      	nop
 8007884:	e7fe      	b.n	8007884 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007886:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800788c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00d      	beq.n	80078ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800789a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	4613      	mov	r3, r2
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 f805 	bl	80078b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3730      	adds	r7, #48	; 0x30
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d103      	bne.n	80078d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	69ba      	ldr	r2, [r7, #24]
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	e002      	b.n	80078da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078e6:	2101      	movs	r1, #1
 80078e8:	69b8      	ldr	r0, [r7, #24]
 80078ea:	f7ff ff05 	bl	80076f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	78fa      	ldrb	r2, [r7, #3]
 80078f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80078f6:	bf00      	nop
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
	...

08007900 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08e      	sub	sp, #56	; 0x38
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800790e:	2300      	movs	r3, #0
 8007910:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10a      	bne.n	8007932 <xQueueGenericSend+0x32>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800792e:	bf00      	nop
 8007930:	e7fe      	b.n	8007930 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d103      	bne.n	8007940 <xQueueGenericSend+0x40>
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <xQueueGenericSend+0x44>
 8007940:	2301      	movs	r3, #1
 8007942:	e000      	b.n	8007946 <xQueueGenericSend+0x46>
 8007944:	2300      	movs	r3, #0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10a      	bne.n	8007960 <xQueueGenericSend+0x60>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800795c:	bf00      	nop
 800795e:	e7fe      	b.n	800795e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2b02      	cmp	r3, #2
 8007964:	d103      	bne.n	800796e <xQueueGenericSend+0x6e>
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796a:	2b01      	cmp	r3, #1
 800796c:	d101      	bne.n	8007972 <xQueueGenericSend+0x72>
 800796e:	2301      	movs	r3, #1
 8007970:	e000      	b.n	8007974 <xQueueGenericSend+0x74>
 8007972:	2300      	movs	r3, #0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10a      	bne.n	800798e <xQueueGenericSend+0x8e>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	623b      	str	r3, [r7, #32]
}
 800798a:	bf00      	nop
 800798c:	e7fe      	b.n	800798c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800798e:	f001 f9bd 	bl	8008d0c <xTaskGetSchedulerState>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d102      	bne.n	800799e <xQueueGenericSend+0x9e>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <xQueueGenericSend+0xa2>
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <xQueueGenericSend+0xa4>
 80079a2:	2300      	movs	r3, #0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10a      	bne.n	80079be <xQueueGenericSend+0xbe>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	61fb      	str	r3, [r7, #28]
}
 80079ba:	bf00      	nop
 80079bc:	e7fe      	b.n	80079bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079be:	f001 ff01 	bl	80097c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d302      	bcc.n	80079d4 <xQueueGenericSend+0xd4>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d129      	bne.n	8007a28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	68b9      	ldr	r1, [r7, #8]
 80079d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079da:	f000 fa0b 	bl	8007df4 <prvCopyDataToQueue>
 80079de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d010      	beq.n	8007a0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	3324      	adds	r3, #36	; 0x24
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 ffcf 	bl	8008990 <xTaskRemoveFromEventList>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d013      	beq.n	8007a20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80079f8:	4b3f      	ldr	r3, [pc, #252]	; (8007af8 <xQueueGenericSend+0x1f8>)
 80079fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	e00a      	b.n	8007a20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d007      	beq.n	8007a20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a10:	4b39      	ldr	r3, [pc, #228]	; (8007af8 <xQueueGenericSend+0x1f8>)
 8007a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a20:	f001 ff00 	bl	8009824 <vPortExitCritical>
				return pdPASS;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e063      	b.n	8007af0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d103      	bne.n	8007a36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a2e:	f001 fef9 	bl	8009824 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	e05c      	b.n	8007af0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d106      	bne.n	8007a4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a3c:	f107 0314 	add.w	r3, r7, #20
 8007a40:	4618      	mov	r0, r3
 8007a42:	f001 f809 	bl	8008a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a46:	2301      	movs	r3, #1
 8007a48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a4a:	f001 feeb 	bl	8009824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a4e:	f000 fd7b 	bl	8008548 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a52:	f001 feb7 	bl	80097c4 <vPortEnterCritical>
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a5c:	b25b      	sxtb	r3, r3
 8007a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a62:	d103      	bne.n	8007a6c <xQueueGenericSend+0x16c>
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a72:	b25b      	sxtb	r3, r3
 8007a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a78:	d103      	bne.n	8007a82 <xQueueGenericSend+0x182>
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a82:	f001 fecf 	bl	8009824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a86:	1d3a      	adds	r2, r7, #4
 8007a88:	f107 0314 	add.w	r3, r7, #20
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fff8 	bl	8008a84 <xTaskCheckForTimeOut>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d124      	bne.n	8007ae4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a9c:	f000 faa2 	bl	8007fe4 <prvIsQueueFull>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d018      	beq.n	8007ad8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa8:	3310      	adds	r3, #16
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	4611      	mov	r1, r2
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 ff1e 	bl	80088f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ab6:	f000 fa2d 	bl	8007f14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007aba:	f000 fd53 	bl	8008564 <xTaskResumeAll>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f47f af7c 	bne.w	80079be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007ac6:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <xQueueGenericSend+0x1f8>)
 8007ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	e772      	b.n	80079be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ada:	f000 fa1b 	bl	8007f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ade:	f000 fd41 	bl	8008564 <xTaskResumeAll>
 8007ae2:	e76c      	b.n	80079be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ae6:	f000 fa15 	bl	8007f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007aea:	f000 fd3b 	bl	8008564 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007aee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3738      	adds	r7, #56	; 0x38
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	e000ed04 	.word	0xe000ed04

08007afc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b090      	sub	sp, #64	; 0x40
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
 8007b08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10a      	bne.n	8007b2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b26:	bf00      	nop
 8007b28:	e7fe      	b.n	8007b28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d103      	bne.n	8007b38 <xQueueGenericSendFromISR+0x3c>
 8007b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <xQueueGenericSendFromISR+0x40>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e000      	b.n	8007b3e <xQueueGenericSendFromISR+0x42>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10a      	bne.n	8007b58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b54:	bf00      	nop
 8007b56:	e7fe      	b.n	8007b56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d103      	bne.n	8007b66 <xQueueGenericSendFromISR+0x6a>
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d101      	bne.n	8007b6a <xQueueGenericSendFromISR+0x6e>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e000      	b.n	8007b6c <xQueueGenericSendFromISR+0x70>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10a      	bne.n	8007b86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	623b      	str	r3, [r7, #32]
}
 8007b82:	bf00      	nop
 8007b84:	e7fe      	b.n	8007b84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b86:	f001 feff 	bl	8009988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b8a:	f3ef 8211 	mrs	r2, BASEPRI
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	61fa      	str	r2, [r7, #28]
 8007ba0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ba2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d302      	bcc.n	8007bb8 <xQueueGenericSendFromISR+0xbc>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d12f      	bne.n	8007c18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	68b9      	ldr	r1, [r7, #8]
 8007bcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bce:	f000 f911 	bl	8007df4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bda:	d112      	bne.n	8007c02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d016      	beq.n	8007c12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	3324      	adds	r3, #36	; 0x24
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fed1 	bl	8008990 <xTaskRemoveFromEventList>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00e      	beq.n	8007c12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00b      	beq.n	8007c12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	e007      	b.n	8007c12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c06:	3301      	adds	r3, #1
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	b25a      	sxtb	r2, r3
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c12:	2301      	movs	r3, #1
 8007c14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007c16:	e001      	b.n	8007c1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3740      	adds	r7, #64	; 0x40
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b08c      	sub	sp, #48	; 0x30
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c40:	2300      	movs	r3, #0
 8007c42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10a      	bne.n	8007c64 <xQueueReceive+0x30>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	623b      	str	r3, [r7, #32]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d103      	bne.n	8007c72 <xQueueReceive+0x3e>
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <xQueueReceive+0x42>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e000      	b.n	8007c78 <xQueueReceive+0x44>
 8007c76:	2300      	movs	r3, #0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10a      	bne.n	8007c92 <xQueueReceive+0x5e>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	61fb      	str	r3, [r7, #28]
}
 8007c8e:	bf00      	nop
 8007c90:	e7fe      	b.n	8007c90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c92:	f001 f83b 	bl	8008d0c <xTaskGetSchedulerState>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d102      	bne.n	8007ca2 <xQueueReceive+0x6e>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <xQueueReceive+0x72>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e000      	b.n	8007ca8 <xQueueReceive+0x74>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <xQueueReceive+0x8e>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	61bb      	str	r3, [r7, #24]
}
 8007cbe:	bf00      	nop
 8007cc0:	e7fe      	b.n	8007cc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cc2:	f001 fd7f 	bl	80097c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d01f      	beq.n	8007d12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cd2:	68b9      	ldr	r1, [r7, #8]
 8007cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cd6:	f000 f8f7 	bl	8007ec8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	1e5a      	subs	r2, r3, #1
 8007cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00f      	beq.n	8007d0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	3310      	adds	r3, #16
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 fe4e 	bl	8008990 <xTaskRemoveFromEventList>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d007      	beq.n	8007d0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007cfa:	4b3d      	ldr	r3, [pc, #244]	; (8007df0 <xQueueReceive+0x1bc>)
 8007cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d0a:	f001 fd8b 	bl	8009824 <vPortExitCritical>
				return pdPASS;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e069      	b.n	8007de6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d103      	bne.n	8007d20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d18:	f001 fd84 	bl	8009824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	e062      	b.n	8007de6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d26:	f107 0310 	add.w	r3, r7, #16
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 fe94 	bl	8008a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d30:	2301      	movs	r3, #1
 8007d32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d34:	f001 fd76 	bl	8009824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d38:	f000 fc06 	bl	8008548 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d3c:	f001 fd42 	bl	80097c4 <vPortEnterCritical>
 8007d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d46:	b25b      	sxtb	r3, r3
 8007d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4c:	d103      	bne.n	8007d56 <xQueueReceive+0x122>
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d5c:	b25b      	sxtb	r3, r3
 8007d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d62:	d103      	bne.n	8007d6c <xQueueReceive+0x138>
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d6c:	f001 fd5a 	bl	8009824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d70:	1d3a      	adds	r2, r7, #4
 8007d72:	f107 0310 	add.w	r3, r7, #16
 8007d76:	4611      	mov	r1, r2
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 fe83 	bl	8008a84 <xTaskCheckForTimeOut>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d123      	bne.n	8007dcc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d86:	f000 f917 	bl	8007fb8 <prvIsQueueEmpty>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d017      	beq.n	8007dc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d92:	3324      	adds	r3, #36	; 0x24
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	4611      	mov	r1, r2
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 fda9 	bl	80088f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da0:	f000 f8b8 	bl	8007f14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007da4:	f000 fbde 	bl	8008564 <xTaskResumeAll>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d189      	bne.n	8007cc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007dae:	4b10      	ldr	r3, [pc, #64]	; (8007df0 <xQueueReceive+0x1bc>)
 8007db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	e780      	b.n	8007cc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dc2:	f000 f8a7 	bl	8007f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007dc6:	f000 fbcd 	bl	8008564 <xTaskResumeAll>
 8007dca:	e77a      	b.n	8007cc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dce:	f000 f8a1 	bl	8007f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dd2:	f000 fbc7 	bl	8008564 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd8:	f000 f8ee 	bl	8007fb8 <prvIsQueueEmpty>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f43f af6f 	beq.w	8007cc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007de4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3730      	adds	r7, #48	; 0x30
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	e000ed04 	.word	0xe000ed04

08007df4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e00:	2300      	movs	r3, #0
 8007e02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10d      	bne.n	8007e2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d14d      	bne.n	8007eb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 ff92 	bl	8008d48 <xTaskPriorityDisinherit>
 8007e24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	609a      	str	r2, [r3, #8]
 8007e2c:	e043      	b.n	8007eb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d119      	bne.n	8007e68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6858      	ldr	r0, [r3, #4]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	68b9      	ldr	r1, [r7, #8]
 8007e40:	f002 f806 	bl	8009e50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	441a      	add	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d32b      	bcc.n	8007eb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	605a      	str	r2, [r3, #4]
 8007e66:	e026      	b.n	8007eb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	68d8      	ldr	r0, [r3, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e70:	461a      	mov	r2, r3
 8007e72:	68b9      	ldr	r1, [r7, #8]
 8007e74:	f001 ffec 	bl	8009e50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	68da      	ldr	r2, [r3, #12]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e80:	425b      	negs	r3, r3
 8007e82:	441a      	add	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d207      	bcs.n	8007ea4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9c:	425b      	negs	r3, r3
 8007e9e:	441a      	add	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d105      	bne.n	8007eb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007ebe:	697b      	ldr	r3, [r7, #20]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d018      	beq.n	8007f0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee2:	441a      	add	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68da      	ldr	r2, [r3, #12]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d303      	bcc.n	8007efc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68d9      	ldr	r1, [r3, #12]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f04:	461a      	mov	r2, r3
 8007f06:	6838      	ldr	r0, [r7, #0]
 8007f08:	f001 ffa2 	bl	8009e50 <memcpy>
	}
}
 8007f0c:	bf00      	nop
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f1c:	f001 fc52 	bl	80097c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f28:	e011      	b.n	8007f4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d012      	beq.n	8007f58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3324      	adds	r3, #36	; 0x24
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fd2a 	bl	8008990 <xTaskRemoveFromEventList>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f42:	f000 fe01 	bl	8008b48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	dce9      	bgt.n	8007f2a <prvUnlockQueue+0x16>
 8007f56:	e000      	b.n	8007f5a <prvUnlockQueue+0x46>
					break;
 8007f58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	22ff      	movs	r2, #255	; 0xff
 8007f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007f62:	f001 fc5f 	bl	8009824 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f66:	f001 fc2d 	bl	80097c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f72:	e011      	b.n	8007f98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d012      	beq.n	8007fa2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3310      	adds	r3, #16
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fd05 	bl	8008990 <xTaskRemoveFromEventList>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f8c:	f000 fddc 	bl	8008b48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	3b01      	subs	r3, #1
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	dce9      	bgt.n	8007f74 <prvUnlockQueue+0x60>
 8007fa0:	e000      	b.n	8007fa4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007fa2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	22ff      	movs	r2, #255	; 0xff
 8007fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007fac:	f001 fc3a 	bl	8009824 <vPortExitCritical>
}
 8007fb0:	bf00      	nop
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fc0:	f001 fc00 	bl	80097c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d102      	bne.n	8007fd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	e001      	b.n	8007fd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fd6:	f001 fc25 	bl	8009824 <vPortExitCritical>

	return xReturn;
 8007fda:	68fb      	ldr	r3, [r7, #12]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fec:	f001 fbea 	bl	80097c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d102      	bne.n	8008002 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	e001      	b.n	8008006 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008002:	2300      	movs	r3, #0
 8008004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008006:	f001 fc0d 	bl	8009824 <vPortExitCritical>

	return xReturn;
 800800a:	68fb      	ldr	r3, [r7, #12]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800801e:	2300      	movs	r3, #0
 8008020:	60fb      	str	r3, [r7, #12]
 8008022:	e014      	b.n	800804e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008024:	4a0f      	ldr	r2, [pc, #60]	; (8008064 <vQueueAddToRegistry+0x50>)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10b      	bne.n	8008048 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008030:	490c      	ldr	r1, [pc, #48]	; (8008064 <vQueueAddToRegistry+0x50>)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800803a:	4a0a      	ldr	r2, [pc, #40]	; (8008064 <vQueueAddToRegistry+0x50>)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	4413      	add	r3, r2
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008046:	e006      	b.n	8008056 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3301      	adds	r3, #1
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b07      	cmp	r3, #7
 8008052:	d9e7      	bls.n	8008024 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008054:	bf00      	nop
 8008056:	bf00      	nop
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	20002080 	.word	0x20002080

08008068 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008078:	f001 fba4 	bl	80097c4 <vPortEnterCritical>
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008082:	b25b      	sxtb	r3, r3
 8008084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008088:	d103      	bne.n	8008092 <vQueueWaitForMessageRestricted+0x2a>
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008098:	b25b      	sxtb	r3, r3
 800809a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809e:	d103      	bne.n	80080a8 <vQueueWaitForMessageRestricted+0x40>
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080a8:	f001 fbbc 	bl	8009824 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d106      	bne.n	80080c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	3324      	adds	r3, #36	; 0x24
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	68b9      	ldr	r1, [r7, #8]
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 fc3b 	bl	8008938 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80080c2:	6978      	ldr	r0, [r7, #20]
 80080c4:	f7ff ff26 	bl	8007f14 <prvUnlockQueue>
	}
 80080c8:	bf00      	nop
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08e      	sub	sp, #56	; 0x38
 80080d4:	af04      	add	r7, sp, #16
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10a      	bne.n	80080fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	623b      	str	r3, [r7, #32]
}
 80080f6:	bf00      	nop
 80080f8:	e7fe      	b.n	80080f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80080fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10a      	bne.n	8008116 <xTaskCreateStatic+0x46>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	61fb      	str	r3, [r7, #28]
}
 8008112:	bf00      	nop
 8008114:	e7fe      	b.n	8008114 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008116:	235c      	movs	r3, #92	; 0x5c
 8008118:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	2b5c      	cmp	r3, #92	; 0x5c
 800811e:	d00a      	beq.n	8008136 <xTaskCreateStatic+0x66>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	61bb      	str	r3, [r7, #24]
}
 8008132:	bf00      	nop
 8008134:	e7fe      	b.n	8008134 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008136:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813a:	2b00      	cmp	r3, #0
 800813c:	d01e      	beq.n	800817c <xTaskCreateStatic+0xac>
 800813e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008140:	2b00      	cmp	r3, #0
 8008142:	d01b      	beq.n	800817c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008146:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800814c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	2202      	movs	r2, #2
 8008152:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008156:	2300      	movs	r3, #0
 8008158:	9303      	str	r3, [sp, #12]
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	9302      	str	r3, [sp, #8]
 800815e:	f107 0314 	add.w	r3, r7, #20
 8008162:	9301      	str	r3, [sp, #4]
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	68b9      	ldr	r1, [r7, #8]
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 f850 	bl	8008214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008176:	f000 f8dd 	bl	8008334 <prvAddNewTaskToReadyList>
 800817a:	e001      	b.n	8008180 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800817c:	2300      	movs	r3, #0
 800817e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008180:	697b      	ldr	r3, [r7, #20]
	}
 8008182:	4618      	mov	r0, r3
 8008184:	3728      	adds	r7, #40	; 0x28
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800818a:	b580      	push	{r7, lr}
 800818c:	b08c      	sub	sp, #48	; 0x30
 800818e:	af04      	add	r7, sp, #16
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	603b      	str	r3, [r7, #0]
 8008196:	4613      	mov	r3, r2
 8008198:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800819a:	88fb      	ldrh	r3, [r7, #6]
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4618      	mov	r0, r3
 80081a0:	f001 fc32 	bl	8009a08 <pvPortMalloc>
 80081a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00e      	beq.n	80081ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081ac:	205c      	movs	r0, #92	; 0x5c
 80081ae:	f001 fc2b 	bl	8009a08 <pvPortMalloc>
 80081b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	631a      	str	r2, [r3, #48]	; 0x30
 80081c0:	e005      	b.n	80081ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081c2:	6978      	ldr	r0, [r7, #20]
 80081c4:	f001 fcec 	bl	8009ba0 <vPortFree>
 80081c8:	e001      	b.n	80081ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d017      	beq.n	8008204 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081dc:	88fa      	ldrh	r2, [r7, #6]
 80081de:	2300      	movs	r3, #0
 80081e0:	9303      	str	r3, [sp, #12]
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	9302      	str	r3, [sp, #8]
 80081e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	68b9      	ldr	r1, [r7, #8]
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 f80e 	bl	8008214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081f8:	69f8      	ldr	r0, [r7, #28]
 80081fa:	f000 f89b 	bl	8008334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081fe:	2301      	movs	r3, #1
 8008200:	61bb      	str	r3, [r7, #24]
 8008202:	e002      	b.n	800820a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008204:	f04f 33ff 	mov.w	r3, #4294967295
 8008208:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800820a:	69bb      	ldr	r3, [r7, #24]
	}
 800820c:	4618      	mov	r0, r3
 800820e:	3720      	adds	r7, #32
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
 8008220:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	461a      	mov	r2, r3
 800822c:	21a5      	movs	r1, #165	; 0xa5
 800822e:	f001 fe1d 	bl	8009e6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800823c:	3b01      	subs	r3, #1
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	f023 0307 	bic.w	r3, r3, #7
 800824a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	f003 0307 	and.w	r3, r3, #7
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00a      	beq.n	800826c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	617b      	str	r3, [r7, #20]
}
 8008268:	bf00      	nop
 800826a:	e7fe      	b.n	800826a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d01f      	beq.n	80082b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008272:	2300      	movs	r3, #0
 8008274:	61fb      	str	r3, [r7, #28]
 8008276:	e012      	b.n	800829e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	4413      	add	r3, r2
 800827e:	7819      	ldrb	r1, [r3, #0]
 8008280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	4413      	add	r3, r2
 8008286:	3334      	adds	r3, #52	; 0x34
 8008288:	460a      	mov	r2, r1
 800828a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	4413      	add	r3, r2
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d006      	beq.n	80082a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	3301      	adds	r3, #1
 800829c:	61fb      	str	r3, [r7, #28]
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	2b0f      	cmp	r3, #15
 80082a2:	d9e9      	bls.n	8008278 <prvInitialiseNewTask+0x64>
 80082a4:	e000      	b.n	80082a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80082a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082b0:	e003      	b.n	80082ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	2b37      	cmp	r3, #55	; 0x37
 80082be:	d901      	bls.n	80082c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082c0:	2337      	movs	r3, #55	; 0x37
 80082c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80082d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d2:	2200      	movs	r2, #0
 80082d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	3304      	adds	r3, #4
 80082da:	4618      	mov	r0, r3
 80082dc:	f7ff f978 	bl	80075d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	3318      	adds	r3, #24
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7ff f973 	bl	80075d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008302:	2200      	movs	r2, #0
 8008304:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	68f9      	ldr	r1, [r7, #12]
 8008312:	69b8      	ldr	r0, [r7, #24]
 8008314:	f001 f928 	bl	8009568 <pxPortInitialiseStack>
 8008318:	4602      	mov	r2, r0
 800831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800831e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008328:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800832a:	bf00      	nop
 800832c:	3720      	adds	r7, #32
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800833c:	f001 fa42 	bl	80097c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008340:	4b2d      	ldr	r3, [pc, #180]	; (80083f8 <prvAddNewTaskToReadyList+0xc4>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3301      	adds	r3, #1
 8008346:	4a2c      	ldr	r2, [pc, #176]	; (80083f8 <prvAddNewTaskToReadyList+0xc4>)
 8008348:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800834a:	4b2c      	ldr	r3, [pc, #176]	; (80083fc <prvAddNewTaskToReadyList+0xc8>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d109      	bne.n	8008366 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008352:	4a2a      	ldr	r2, [pc, #168]	; (80083fc <prvAddNewTaskToReadyList+0xc8>)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008358:	4b27      	ldr	r3, [pc, #156]	; (80083f8 <prvAddNewTaskToReadyList+0xc4>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d110      	bne.n	8008382 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008360:	f000 fc16 	bl	8008b90 <prvInitialiseTaskLists>
 8008364:	e00d      	b.n	8008382 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008366:	4b26      	ldr	r3, [pc, #152]	; (8008400 <prvAddNewTaskToReadyList+0xcc>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d109      	bne.n	8008382 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800836e:	4b23      	ldr	r3, [pc, #140]	; (80083fc <prvAddNewTaskToReadyList+0xc8>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008378:	429a      	cmp	r2, r3
 800837a:	d802      	bhi.n	8008382 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800837c:	4a1f      	ldr	r2, [pc, #124]	; (80083fc <prvAddNewTaskToReadyList+0xc8>)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008382:	4b20      	ldr	r3, [pc, #128]	; (8008404 <prvAddNewTaskToReadyList+0xd0>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3301      	adds	r3, #1
 8008388:	4a1e      	ldr	r2, [pc, #120]	; (8008404 <prvAddNewTaskToReadyList+0xd0>)
 800838a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800838c:	4b1d      	ldr	r3, [pc, #116]	; (8008404 <prvAddNewTaskToReadyList+0xd0>)
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008398:	4b1b      	ldr	r3, [pc, #108]	; (8008408 <prvAddNewTaskToReadyList+0xd4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	429a      	cmp	r2, r3
 800839e:	d903      	bls.n	80083a8 <prvAddNewTaskToReadyList+0x74>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a4:	4a18      	ldr	r2, [pc, #96]	; (8008408 <prvAddNewTaskToReadyList+0xd4>)
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ac:	4613      	mov	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4413      	add	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4a15      	ldr	r2, [pc, #84]	; (800840c <prvAddNewTaskToReadyList+0xd8>)
 80083b6:	441a      	add	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3304      	adds	r3, #4
 80083bc:	4619      	mov	r1, r3
 80083be:	4610      	mov	r0, r2
 80083c0:	f7ff f913 	bl	80075ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083c4:	f001 fa2e 	bl	8009824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083c8:	4b0d      	ldr	r3, [pc, #52]	; (8008400 <prvAddNewTaskToReadyList+0xcc>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00e      	beq.n	80083ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083d0:	4b0a      	ldr	r3, [pc, #40]	; (80083fc <prvAddNewTaskToReadyList+0xc8>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083da:	429a      	cmp	r2, r3
 80083dc:	d207      	bcs.n	80083ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083de:	4b0c      	ldr	r3, [pc, #48]	; (8008410 <prvAddNewTaskToReadyList+0xdc>)
 80083e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083ee:	bf00      	nop
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	200012e8 	.word	0x200012e8
 80083fc:	20000e14 	.word	0x20000e14
 8008400:	200012f4 	.word	0x200012f4
 8008404:	20001304 	.word	0x20001304
 8008408:	200012f0 	.word	0x200012f0
 800840c:	20000e18 	.word	0x20000e18
 8008410:	e000ed04 	.word	0xe000ed04

08008414 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800841c:	2300      	movs	r3, #0
 800841e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d017      	beq.n	8008456 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008426:	4b13      	ldr	r3, [pc, #76]	; (8008474 <vTaskDelay+0x60>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <vTaskDelay+0x30>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	60bb      	str	r3, [r7, #8]
}
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008444:	f000 f880 	bl	8008548 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008448:	2100      	movs	r1, #0
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fcea 	bl	8008e24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008450:	f000 f888 	bl	8008564 <xTaskResumeAll>
 8008454:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d107      	bne.n	800846c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800845c:	4b06      	ldr	r3, [pc, #24]	; (8008478 <vTaskDelay+0x64>)
 800845e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800846c:	bf00      	nop
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	20001310 	.word	0x20001310
 8008478:	e000ed04 	.word	0xe000ed04

0800847c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08a      	sub	sp, #40	; 0x28
 8008480:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008486:	2300      	movs	r3, #0
 8008488:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800848a:	463a      	mov	r2, r7
 800848c:	1d39      	adds	r1, r7, #4
 800848e:	f107 0308 	add.w	r3, r7, #8
 8008492:	4618      	mov	r0, r3
 8008494:	f7ff f848 	bl	8007528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	9202      	str	r2, [sp, #8]
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	2300      	movs	r3, #0
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	2300      	movs	r3, #0
 80084a8:	460a      	mov	r2, r1
 80084aa:	4921      	ldr	r1, [pc, #132]	; (8008530 <vTaskStartScheduler+0xb4>)
 80084ac:	4821      	ldr	r0, [pc, #132]	; (8008534 <vTaskStartScheduler+0xb8>)
 80084ae:	f7ff fe0f 	bl	80080d0 <xTaskCreateStatic>
 80084b2:	4603      	mov	r3, r0
 80084b4:	4a20      	ldr	r2, [pc, #128]	; (8008538 <vTaskStartScheduler+0xbc>)
 80084b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084b8:	4b1f      	ldr	r3, [pc, #124]	; (8008538 <vTaskStartScheduler+0xbc>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084c0:	2301      	movs	r3, #1
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	e001      	b.n	80084ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d102      	bne.n	80084d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80084d0:	f000 fcfc 	bl	8008ecc <xTimerCreateTimerTask>
 80084d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d116      	bne.n	800850a <vTaskStartScheduler+0x8e>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	613b      	str	r3, [r7, #16]
}
 80084ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084f0:	4b12      	ldr	r3, [pc, #72]	; (800853c <vTaskStartScheduler+0xc0>)
 80084f2:	f04f 32ff 	mov.w	r2, #4294967295
 80084f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084f8:	4b11      	ldr	r3, [pc, #68]	; (8008540 <vTaskStartScheduler+0xc4>)
 80084fa:	2201      	movs	r2, #1
 80084fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80084fe:	4b11      	ldr	r3, [pc, #68]	; (8008544 <vTaskStartScheduler+0xc8>)
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008504:	f001 f8bc 	bl	8009680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008508:	e00e      	b.n	8008528 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008510:	d10a      	bne.n	8008528 <vTaskStartScheduler+0xac>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	60fb      	str	r3, [r7, #12]
}
 8008524:	bf00      	nop
 8008526:	e7fe      	b.n	8008526 <vTaskStartScheduler+0xaa>
}
 8008528:	bf00      	nop
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	0800a878 	.word	0x0800a878
 8008534:	08008b61 	.word	0x08008b61
 8008538:	2000130c 	.word	0x2000130c
 800853c:	20001308 	.word	0x20001308
 8008540:	200012f4 	.word	0x200012f4
 8008544:	200012ec 	.word	0x200012ec

08008548 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800854c:	4b04      	ldr	r3, [pc, #16]	; (8008560 <vTaskSuspendAll+0x18>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3301      	adds	r3, #1
 8008552:	4a03      	ldr	r2, [pc, #12]	; (8008560 <vTaskSuspendAll+0x18>)
 8008554:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008556:	bf00      	nop
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	20001310 	.word	0x20001310

08008564 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800856a:	2300      	movs	r3, #0
 800856c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800856e:	2300      	movs	r3, #0
 8008570:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008572:	4b42      	ldr	r3, [pc, #264]	; (800867c <xTaskResumeAll+0x118>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10a      	bne.n	8008590 <xTaskResumeAll+0x2c>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	603b      	str	r3, [r7, #0]
}
 800858c:	bf00      	nop
 800858e:	e7fe      	b.n	800858e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008590:	f001 f918 	bl	80097c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008594:	4b39      	ldr	r3, [pc, #228]	; (800867c <xTaskResumeAll+0x118>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3b01      	subs	r3, #1
 800859a:	4a38      	ldr	r2, [pc, #224]	; (800867c <xTaskResumeAll+0x118>)
 800859c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800859e:	4b37      	ldr	r3, [pc, #220]	; (800867c <xTaskResumeAll+0x118>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d162      	bne.n	800866c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085a6:	4b36      	ldr	r3, [pc, #216]	; (8008680 <xTaskResumeAll+0x11c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d05e      	beq.n	800866c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085ae:	e02f      	b.n	8008610 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b0:	4b34      	ldr	r3, [pc, #208]	; (8008684 <xTaskResumeAll+0x120>)
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	3318      	adds	r3, #24
 80085bc:	4618      	mov	r0, r3
 80085be:	f7ff f871 	bl	80076a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3304      	adds	r3, #4
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7ff f86c 	bl	80076a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d0:	4b2d      	ldr	r3, [pc, #180]	; (8008688 <xTaskResumeAll+0x124>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d903      	bls.n	80085e0 <xTaskResumeAll+0x7c>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085dc:	4a2a      	ldr	r2, [pc, #168]	; (8008688 <xTaskResumeAll+0x124>)
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e4:	4613      	mov	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4a27      	ldr	r2, [pc, #156]	; (800868c <xTaskResumeAll+0x128>)
 80085ee:	441a      	add	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3304      	adds	r3, #4
 80085f4:	4619      	mov	r1, r3
 80085f6:	4610      	mov	r0, r2
 80085f8:	f7fe fff7 	bl	80075ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008600:	4b23      	ldr	r3, [pc, #140]	; (8008690 <xTaskResumeAll+0x12c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008606:	429a      	cmp	r2, r3
 8008608:	d302      	bcc.n	8008610 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800860a:	4b22      	ldr	r3, [pc, #136]	; (8008694 <xTaskResumeAll+0x130>)
 800860c:	2201      	movs	r2, #1
 800860e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008610:	4b1c      	ldr	r3, [pc, #112]	; (8008684 <xTaskResumeAll+0x120>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1cb      	bne.n	80085b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800861e:	f000 fb55 	bl	8008ccc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008622:	4b1d      	ldr	r3, [pc, #116]	; (8008698 <xTaskResumeAll+0x134>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d010      	beq.n	8008650 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800862e:	f000 f847 	bl	80086c0 <xTaskIncrementTick>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008638:	4b16      	ldr	r3, [pc, #88]	; (8008694 <xTaskResumeAll+0x130>)
 800863a:	2201      	movs	r2, #1
 800863c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3b01      	subs	r3, #1
 8008642:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1f1      	bne.n	800862e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800864a:	4b13      	ldr	r3, [pc, #76]	; (8008698 <xTaskResumeAll+0x134>)
 800864c:	2200      	movs	r2, #0
 800864e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008650:	4b10      	ldr	r3, [pc, #64]	; (8008694 <xTaskResumeAll+0x130>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d009      	beq.n	800866c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008658:	2301      	movs	r3, #1
 800865a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800865c:	4b0f      	ldr	r3, [pc, #60]	; (800869c <xTaskResumeAll+0x138>)
 800865e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800866c:	f001 f8da 	bl	8009824 <vPortExitCritical>

	return xAlreadyYielded;
 8008670:	68bb      	ldr	r3, [r7, #8]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20001310 	.word	0x20001310
 8008680:	200012e8 	.word	0x200012e8
 8008684:	200012a8 	.word	0x200012a8
 8008688:	200012f0 	.word	0x200012f0
 800868c:	20000e18 	.word	0x20000e18
 8008690:	20000e14 	.word	0x20000e14
 8008694:	200012fc 	.word	0x200012fc
 8008698:	200012f8 	.word	0x200012f8
 800869c:	e000ed04 	.word	0xe000ed04

080086a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086a6:	4b05      	ldr	r3, [pc, #20]	; (80086bc <xTaskGetTickCount+0x1c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086ac:	687b      	ldr	r3, [r7, #4]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	370c      	adds	r7, #12
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	200012ec 	.word	0x200012ec

080086c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ca:	4b4f      	ldr	r3, [pc, #316]	; (8008808 <xTaskIncrementTick+0x148>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f040 808f 	bne.w	80087f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086d4:	4b4d      	ldr	r3, [pc, #308]	; (800880c <xTaskIncrementTick+0x14c>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3301      	adds	r3, #1
 80086da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80086dc:	4a4b      	ldr	r2, [pc, #300]	; (800880c <xTaskIncrementTick+0x14c>)
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d120      	bne.n	800872a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80086e8:	4b49      	ldr	r3, [pc, #292]	; (8008810 <xTaskIncrementTick+0x150>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00a      	beq.n	8008708 <xTaskIncrementTick+0x48>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	603b      	str	r3, [r7, #0]
}
 8008704:	bf00      	nop
 8008706:	e7fe      	b.n	8008706 <xTaskIncrementTick+0x46>
 8008708:	4b41      	ldr	r3, [pc, #260]	; (8008810 <xTaskIncrementTick+0x150>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	60fb      	str	r3, [r7, #12]
 800870e:	4b41      	ldr	r3, [pc, #260]	; (8008814 <xTaskIncrementTick+0x154>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a3f      	ldr	r2, [pc, #252]	; (8008810 <xTaskIncrementTick+0x150>)
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	4a3f      	ldr	r2, [pc, #252]	; (8008814 <xTaskIncrementTick+0x154>)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6013      	str	r3, [r2, #0]
 800871c:	4b3e      	ldr	r3, [pc, #248]	; (8008818 <xTaskIncrementTick+0x158>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3301      	adds	r3, #1
 8008722:	4a3d      	ldr	r2, [pc, #244]	; (8008818 <xTaskIncrementTick+0x158>)
 8008724:	6013      	str	r3, [r2, #0]
 8008726:	f000 fad1 	bl	8008ccc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800872a:	4b3c      	ldr	r3, [pc, #240]	; (800881c <xTaskIncrementTick+0x15c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	429a      	cmp	r2, r3
 8008732:	d349      	bcc.n	80087c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008734:	4b36      	ldr	r3, [pc, #216]	; (8008810 <xTaskIncrementTick+0x150>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d104      	bne.n	8008748 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800873e:	4b37      	ldr	r3, [pc, #220]	; (800881c <xTaskIncrementTick+0x15c>)
 8008740:	f04f 32ff 	mov.w	r2, #4294967295
 8008744:	601a      	str	r2, [r3, #0]
					break;
 8008746:	e03f      	b.n	80087c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008748:	4b31      	ldr	r3, [pc, #196]	; (8008810 <xTaskIncrementTick+0x150>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	429a      	cmp	r2, r3
 800875e:	d203      	bcs.n	8008768 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008760:	4a2e      	ldr	r2, [pc, #184]	; (800881c <xTaskIncrementTick+0x15c>)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008766:	e02f      	b.n	80087c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	3304      	adds	r3, #4
 800876c:	4618      	mov	r0, r3
 800876e:	f7fe ff99 	bl	80076a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008776:	2b00      	cmp	r3, #0
 8008778:	d004      	beq.n	8008784 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	3318      	adds	r3, #24
 800877e:	4618      	mov	r0, r3
 8008780:	f7fe ff90 	bl	80076a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008788:	4b25      	ldr	r3, [pc, #148]	; (8008820 <xTaskIncrementTick+0x160>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	429a      	cmp	r2, r3
 800878e:	d903      	bls.n	8008798 <xTaskIncrementTick+0xd8>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	4a22      	ldr	r2, [pc, #136]	; (8008820 <xTaskIncrementTick+0x160>)
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879c:	4613      	mov	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4a1f      	ldr	r2, [pc, #124]	; (8008824 <xTaskIncrementTick+0x164>)
 80087a6:	441a      	add	r2, r3
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	3304      	adds	r3, #4
 80087ac:	4619      	mov	r1, r3
 80087ae:	4610      	mov	r0, r2
 80087b0:	f7fe ff1b 	bl	80075ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b8:	4b1b      	ldr	r3, [pc, #108]	; (8008828 <xTaskIncrementTick+0x168>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087be:	429a      	cmp	r2, r3
 80087c0:	d3b8      	bcc.n	8008734 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80087c2:	2301      	movs	r3, #1
 80087c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087c6:	e7b5      	b.n	8008734 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087c8:	4b17      	ldr	r3, [pc, #92]	; (8008828 <xTaskIncrementTick+0x168>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ce:	4915      	ldr	r1, [pc, #84]	; (8008824 <xTaskIncrementTick+0x164>)
 80087d0:	4613      	mov	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	440b      	add	r3, r1
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d901      	bls.n	80087e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80087e0:	2301      	movs	r3, #1
 80087e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80087e4:	4b11      	ldr	r3, [pc, #68]	; (800882c <xTaskIncrementTick+0x16c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d007      	beq.n	80087fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80087ec:	2301      	movs	r3, #1
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	e004      	b.n	80087fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80087f2:	4b0f      	ldr	r3, [pc, #60]	; (8008830 <xTaskIncrementTick+0x170>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3301      	adds	r3, #1
 80087f8:	4a0d      	ldr	r2, [pc, #52]	; (8008830 <xTaskIncrementTick+0x170>)
 80087fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80087fc:	697b      	ldr	r3, [r7, #20]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20001310 	.word	0x20001310
 800880c:	200012ec 	.word	0x200012ec
 8008810:	200012a0 	.word	0x200012a0
 8008814:	200012a4 	.word	0x200012a4
 8008818:	20001300 	.word	0x20001300
 800881c:	20001308 	.word	0x20001308
 8008820:	200012f0 	.word	0x200012f0
 8008824:	20000e18 	.word	0x20000e18
 8008828:	20000e14 	.word	0x20000e14
 800882c:	200012fc 	.word	0x200012fc
 8008830:	200012f8 	.word	0x200012f8

08008834 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800883a:	4b28      	ldr	r3, [pc, #160]	; (80088dc <vTaskSwitchContext+0xa8>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008842:	4b27      	ldr	r3, [pc, #156]	; (80088e0 <vTaskSwitchContext+0xac>)
 8008844:	2201      	movs	r2, #1
 8008846:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008848:	e041      	b.n	80088ce <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800884a:	4b25      	ldr	r3, [pc, #148]	; (80088e0 <vTaskSwitchContext+0xac>)
 800884c:	2200      	movs	r2, #0
 800884e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008850:	4b24      	ldr	r3, [pc, #144]	; (80088e4 <vTaskSwitchContext+0xb0>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	e010      	b.n	800887a <vTaskSwitchContext+0x46>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10a      	bne.n	8008874 <vTaskSwitchContext+0x40>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	607b      	str	r3, [r7, #4]
}
 8008870:	bf00      	nop
 8008872:	e7fe      	b.n	8008872 <vTaskSwitchContext+0x3e>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	3b01      	subs	r3, #1
 8008878:	60fb      	str	r3, [r7, #12]
 800887a:	491b      	ldr	r1, [pc, #108]	; (80088e8 <vTaskSwitchContext+0xb4>)
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	4613      	mov	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	440b      	add	r3, r1
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d0e4      	beq.n	8008858 <vTaskSwitchContext+0x24>
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	4613      	mov	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4a13      	ldr	r2, [pc, #76]	; (80088e8 <vTaskSwitchContext+0xb4>)
 800889a:	4413      	add	r3, r2
 800889c:	60bb      	str	r3, [r7, #8]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	685a      	ldr	r2, [r3, #4]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	605a      	str	r2, [r3, #4]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	3308      	adds	r3, #8
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d104      	bne.n	80088be <vTaskSwitchContext+0x8a>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	605a      	str	r2, [r3, #4]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	4a09      	ldr	r2, [pc, #36]	; (80088ec <vTaskSwitchContext+0xb8>)
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	4a06      	ldr	r2, [pc, #24]	; (80088e4 <vTaskSwitchContext+0xb0>)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6013      	str	r3, [r2, #0]
}
 80088ce:	bf00      	nop
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	20001310 	.word	0x20001310
 80088e0:	200012fc 	.word	0x200012fc
 80088e4:	200012f0 	.word	0x200012f0
 80088e8:	20000e18 	.word	0x20000e18
 80088ec:	20000e14 	.word	0x20000e14

080088f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10a      	bne.n	8008916 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	60fb      	str	r3, [r7, #12]
}
 8008912:	bf00      	nop
 8008914:	e7fe      	b.n	8008914 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008916:	4b07      	ldr	r3, [pc, #28]	; (8008934 <vTaskPlaceOnEventList+0x44>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3318      	adds	r3, #24
 800891c:	4619      	mov	r1, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7fe fe87 	bl	8007632 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008924:	2101      	movs	r1, #1
 8008926:	6838      	ldr	r0, [r7, #0]
 8008928:	f000 fa7c 	bl	8008e24 <prvAddCurrentTaskToDelayedList>
}
 800892c:	bf00      	nop
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	20000e14 	.word	0x20000e14

08008938 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10a      	bne.n	8008960 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	617b      	str	r3, [r7, #20]
}
 800895c:	bf00      	nop
 800895e:	e7fe      	b.n	800895e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008960:	4b0a      	ldr	r3, [pc, #40]	; (800898c <vTaskPlaceOnEventListRestricted+0x54>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3318      	adds	r3, #24
 8008966:	4619      	mov	r1, r3
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f7fe fe3e 	bl	80075ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d002      	beq.n	800897a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008974:	f04f 33ff 	mov.w	r3, #4294967295
 8008978:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800897a:	6879      	ldr	r1, [r7, #4]
 800897c:	68b8      	ldr	r0, [r7, #8]
 800897e:	f000 fa51 	bl	8008e24 <prvAddCurrentTaskToDelayedList>
	}
 8008982:	bf00      	nop
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	20000e14 	.word	0x20000e14

08008990 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10a      	bne.n	80089bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	60fb      	str	r3, [r7, #12]
}
 80089b8:	bf00      	nop
 80089ba:	e7fe      	b.n	80089ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	3318      	adds	r3, #24
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe fe6f 	bl	80076a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089c6:	4b1e      	ldr	r3, [pc, #120]	; (8008a40 <xTaskRemoveFromEventList+0xb0>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d11d      	bne.n	8008a0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	3304      	adds	r3, #4
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fe fe66 	bl	80076a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089dc:	4b19      	ldr	r3, [pc, #100]	; (8008a44 <xTaskRemoveFromEventList+0xb4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d903      	bls.n	80089ec <xTaskRemoveFromEventList+0x5c>
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e8:	4a16      	ldr	r2, [pc, #88]	; (8008a44 <xTaskRemoveFromEventList+0xb4>)
 80089ea:	6013      	str	r3, [r2, #0]
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f0:	4613      	mov	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4a13      	ldr	r2, [pc, #76]	; (8008a48 <xTaskRemoveFromEventList+0xb8>)
 80089fa:	441a      	add	r2, r3
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	3304      	adds	r3, #4
 8008a00:	4619      	mov	r1, r3
 8008a02:	4610      	mov	r0, r2
 8008a04:	f7fe fdf1 	bl	80075ea <vListInsertEnd>
 8008a08:	e005      	b.n	8008a16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	3318      	adds	r3, #24
 8008a0e:	4619      	mov	r1, r3
 8008a10:	480e      	ldr	r0, [pc, #56]	; (8008a4c <xTaskRemoveFromEventList+0xbc>)
 8008a12:	f7fe fdea 	bl	80075ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1a:	4b0d      	ldr	r3, [pc, #52]	; (8008a50 <xTaskRemoveFromEventList+0xc0>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d905      	bls.n	8008a30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a24:	2301      	movs	r3, #1
 8008a26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a28:	4b0a      	ldr	r3, [pc, #40]	; (8008a54 <xTaskRemoveFromEventList+0xc4>)
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	e001      	b.n	8008a34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008a30:	2300      	movs	r3, #0
 8008a32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a34:	697b      	ldr	r3, [r7, #20]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20001310 	.word	0x20001310
 8008a44:	200012f0 	.word	0x200012f0
 8008a48:	20000e18 	.word	0x20000e18
 8008a4c:	200012a8 	.word	0x200012a8
 8008a50:	20000e14 	.word	0x20000e14
 8008a54:	200012fc 	.word	0x200012fc

08008a58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a60:	4b06      	ldr	r3, [pc, #24]	; (8008a7c <vTaskInternalSetTimeOutState+0x24>)
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a68:	4b05      	ldr	r3, [pc, #20]	; (8008a80 <vTaskInternalSetTimeOutState+0x28>)
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	605a      	str	r2, [r3, #4]
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	20001300 	.word	0x20001300
 8008a80:	200012ec 	.word	0x200012ec

08008a84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10a      	bne.n	8008aaa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	613b      	str	r3, [r7, #16]
}
 8008aa6:	bf00      	nop
 8008aa8:	e7fe      	b.n	8008aa8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10a      	bne.n	8008ac6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	60fb      	str	r3, [r7, #12]
}
 8008ac2:	bf00      	nop
 8008ac4:	e7fe      	b.n	8008ac4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008ac6:	f000 fe7d 	bl	80097c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008aca:	4b1d      	ldr	r3, [pc, #116]	; (8008b40 <xTaskCheckForTimeOut+0xbc>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae2:	d102      	bne.n	8008aea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	61fb      	str	r3, [r7, #28]
 8008ae8:	e023      	b.n	8008b32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	4b15      	ldr	r3, [pc, #84]	; (8008b44 <xTaskCheckForTimeOut+0xc0>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d007      	beq.n	8008b06 <xTaskCheckForTimeOut+0x82>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d302      	bcc.n	8008b06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b00:	2301      	movs	r3, #1
 8008b02:	61fb      	str	r3, [r7, #28]
 8008b04:	e015      	b.n	8008b32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d20b      	bcs.n	8008b28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	1ad2      	subs	r2, r2, r3
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7ff ff9b 	bl	8008a58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b22:	2300      	movs	r3, #0
 8008b24:	61fb      	str	r3, [r7, #28]
 8008b26:	e004      	b.n	8008b32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b32:	f000 fe77 	bl	8009824 <vPortExitCritical>

	return xReturn;
 8008b36:	69fb      	ldr	r3, [r7, #28]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3720      	adds	r7, #32
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	200012ec 	.word	0x200012ec
 8008b44:	20001300 	.word	0x20001300

08008b48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b4c:	4b03      	ldr	r3, [pc, #12]	; (8008b5c <vTaskMissedYield+0x14>)
 8008b4e:	2201      	movs	r2, #1
 8008b50:	601a      	str	r2, [r3, #0]
}
 8008b52:	bf00      	nop
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	200012fc 	.word	0x200012fc

08008b60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b68:	f000 f852 	bl	8008c10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b6c:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <prvIdleTask+0x28>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d9f9      	bls.n	8008b68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b74:	4b05      	ldr	r3, [pc, #20]	; (8008b8c <prvIdleTask+0x2c>)
 8008b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b7a:	601a      	str	r2, [r3, #0]
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008b84:	e7f0      	b.n	8008b68 <prvIdleTask+0x8>
 8008b86:	bf00      	nop
 8008b88:	20000e18 	.word	0x20000e18
 8008b8c:	e000ed04 	.word	0xe000ed04

08008b90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b96:	2300      	movs	r3, #0
 8008b98:	607b      	str	r3, [r7, #4]
 8008b9a:	e00c      	b.n	8008bb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	4413      	add	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4a12      	ldr	r2, [pc, #72]	; (8008bf0 <prvInitialiseTaskLists+0x60>)
 8008ba8:	4413      	add	r3, r2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fe fcf0 	bl	8007590 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	607b      	str	r3, [r7, #4]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b37      	cmp	r3, #55	; 0x37
 8008bba:	d9ef      	bls.n	8008b9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008bbc:	480d      	ldr	r0, [pc, #52]	; (8008bf4 <prvInitialiseTaskLists+0x64>)
 8008bbe:	f7fe fce7 	bl	8007590 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008bc2:	480d      	ldr	r0, [pc, #52]	; (8008bf8 <prvInitialiseTaskLists+0x68>)
 8008bc4:	f7fe fce4 	bl	8007590 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008bc8:	480c      	ldr	r0, [pc, #48]	; (8008bfc <prvInitialiseTaskLists+0x6c>)
 8008bca:	f7fe fce1 	bl	8007590 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008bce:	480c      	ldr	r0, [pc, #48]	; (8008c00 <prvInitialiseTaskLists+0x70>)
 8008bd0:	f7fe fcde 	bl	8007590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008bd4:	480b      	ldr	r0, [pc, #44]	; (8008c04 <prvInitialiseTaskLists+0x74>)
 8008bd6:	f7fe fcdb 	bl	8007590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008bda:	4b0b      	ldr	r3, [pc, #44]	; (8008c08 <prvInitialiseTaskLists+0x78>)
 8008bdc:	4a05      	ldr	r2, [pc, #20]	; (8008bf4 <prvInitialiseTaskLists+0x64>)
 8008bde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008be0:	4b0a      	ldr	r3, [pc, #40]	; (8008c0c <prvInitialiseTaskLists+0x7c>)
 8008be2:	4a05      	ldr	r2, [pc, #20]	; (8008bf8 <prvInitialiseTaskLists+0x68>)
 8008be4:	601a      	str	r2, [r3, #0]
}
 8008be6:	bf00      	nop
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20000e18 	.word	0x20000e18
 8008bf4:	20001278 	.word	0x20001278
 8008bf8:	2000128c 	.word	0x2000128c
 8008bfc:	200012a8 	.word	0x200012a8
 8008c00:	200012bc 	.word	0x200012bc
 8008c04:	200012d4 	.word	0x200012d4
 8008c08:	200012a0 	.word	0x200012a0
 8008c0c:	200012a4 	.word	0x200012a4

08008c10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c16:	e019      	b.n	8008c4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c18:	f000 fdd4 	bl	80097c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c1c:	4b10      	ldr	r3, [pc, #64]	; (8008c60 <prvCheckTasksWaitingTermination+0x50>)
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	3304      	adds	r3, #4
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fe fd3b 	bl	80076a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c2e:	4b0d      	ldr	r3, [pc, #52]	; (8008c64 <prvCheckTasksWaitingTermination+0x54>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3b01      	subs	r3, #1
 8008c34:	4a0b      	ldr	r2, [pc, #44]	; (8008c64 <prvCheckTasksWaitingTermination+0x54>)
 8008c36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c38:	4b0b      	ldr	r3, [pc, #44]	; (8008c68 <prvCheckTasksWaitingTermination+0x58>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	4a0a      	ldr	r2, [pc, #40]	; (8008c68 <prvCheckTasksWaitingTermination+0x58>)
 8008c40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c42:	f000 fdef 	bl	8009824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f810 	bl	8008c6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c4c:	4b06      	ldr	r3, [pc, #24]	; (8008c68 <prvCheckTasksWaitingTermination+0x58>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1e1      	bne.n	8008c18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c54:	bf00      	nop
 8008c56:	bf00      	nop
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	200012bc 	.word	0x200012bc
 8008c64:	200012e8 	.word	0x200012e8
 8008c68:	200012d0 	.word	0x200012d0

08008c6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d108      	bne.n	8008c90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 ff8c 	bl	8009ba0 <vPortFree>
				vPortFree( pxTCB );
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 ff89 	bl	8009ba0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c8e:	e018      	b.n	8008cc2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d103      	bne.n	8008ca2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 ff80 	bl	8009ba0 <vPortFree>
	}
 8008ca0:	e00f      	b.n	8008cc2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d00a      	beq.n	8008cc2 <prvDeleteTCB+0x56>
	__asm volatile
 8008cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb0:	f383 8811 	msr	BASEPRI, r3
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	60fb      	str	r3, [r7, #12]
}
 8008cbe:	bf00      	nop
 8008cc0:	e7fe      	b.n	8008cc0 <prvDeleteTCB+0x54>
	}
 8008cc2:	bf00      	nop
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <prvResetNextTaskUnblockTime+0x38>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d104      	bne.n	8008ce6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008cdc:	4b0a      	ldr	r3, [pc, #40]	; (8008d08 <prvResetNextTaskUnblockTime+0x3c>)
 8008cde:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ce4:	e008      	b.n	8008cf8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ce6:	4b07      	ldr	r3, [pc, #28]	; (8008d04 <prvResetNextTaskUnblockTime+0x38>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	4a04      	ldr	r2, [pc, #16]	; (8008d08 <prvResetNextTaskUnblockTime+0x3c>)
 8008cf6:	6013      	str	r3, [r2, #0]
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr
 8008d04:	200012a0 	.word	0x200012a0
 8008d08:	20001308 	.word	0x20001308

08008d0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d12:	4b0b      	ldr	r3, [pc, #44]	; (8008d40 <xTaskGetSchedulerState+0x34>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d102      	bne.n	8008d20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	607b      	str	r3, [r7, #4]
 8008d1e:	e008      	b.n	8008d32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d20:	4b08      	ldr	r3, [pc, #32]	; (8008d44 <xTaskGetSchedulerState+0x38>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d102      	bne.n	8008d2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d28:	2302      	movs	r3, #2
 8008d2a:	607b      	str	r3, [r7, #4]
 8008d2c:	e001      	b.n	8008d32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d32:	687b      	ldr	r3, [r7, #4]
	}
 8008d34:	4618      	mov	r0, r3
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	200012f4 	.word	0x200012f4
 8008d44:	20001310 	.word	0x20001310

08008d48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d54:	2300      	movs	r3, #0
 8008d56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d056      	beq.n	8008e0c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d5e:	4b2e      	ldr	r3, [pc, #184]	; (8008e18 <xTaskPriorityDisinherit+0xd0>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d00a      	beq.n	8008d7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	60fb      	str	r3, [r7, #12]
}
 8008d7a:	bf00      	nop
 8008d7c:	e7fe      	b.n	8008d7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10a      	bne.n	8008d9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	60bb      	str	r3, [r7, #8]
}
 8008d98:	bf00      	nop
 8008d9a:	e7fe      	b.n	8008d9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da0:	1e5a      	subs	r2, r3, #1
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d02c      	beq.n	8008e0c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d128      	bne.n	8008e0c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe fc70 	bl	80076a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ddc:	4b0f      	ldr	r3, [pc, #60]	; (8008e1c <xTaskPriorityDisinherit+0xd4>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d903      	bls.n	8008dec <xTaskPriorityDisinherit+0xa4>
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de8:	4a0c      	ldr	r2, [pc, #48]	; (8008e1c <xTaskPriorityDisinherit+0xd4>)
 8008dea:	6013      	str	r3, [r2, #0]
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df0:	4613      	mov	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4a09      	ldr	r2, [pc, #36]	; (8008e20 <xTaskPriorityDisinherit+0xd8>)
 8008dfa:	441a      	add	r2, r3
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	3304      	adds	r3, #4
 8008e00:	4619      	mov	r1, r3
 8008e02:	4610      	mov	r0, r2
 8008e04:	f7fe fbf1 	bl	80075ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e0c:	697b      	ldr	r3, [r7, #20]
	}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3718      	adds	r7, #24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	20000e14 	.word	0x20000e14
 8008e1c:	200012f0 	.word	0x200012f0
 8008e20:	20000e18 	.word	0x20000e18

08008e24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e2e:	4b21      	ldr	r3, [pc, #132]	; (8008eb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e34:	4b20      	ldr	r3, [pc, #128]	; (8008eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	3304      	adds	r3, #4
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe fc32 	bl	80076a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e46:	d10a      	bne.n	8008e5e <prvAddCurrentTaskToDelayedList+0x3a>
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d007      	beq.n	8008e5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e4e:	4b1a      	ldr	r3, [pc, #104]	; (8008eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	3304      	adds	r3, #4
 8008e54:	4619      	mov	r1, r3
 8008e56:	4819      	ldr	r0, [pc, #100]	; (8008ebc <prvAddCurrentTaskToDelayedList+0x98>)
 8008e58:	f7fe fbc7 	bl	80075ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e5c:	e026      	b.n	8008eac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4413      	add	r3, r2
 8008e64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e66:	4b14      	ldr	r3, [pc, #80]	; (8008eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d209      	bcs.n	8008e8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e76:	4b12      	ldr	r3, [pc, #72]	; (8008ec0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	4b0f      	ldr	r3, [pc, #60]	; (8008eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	3304      	adds	r3, #4
 8008e80:	4619      	mov	r1, r3
 8008e82:	4610      	mov	r0, r2
 8008e84:	f7fe fbd5 	bl	8007632 <vListInsert>
}
 8008e88:	e010      	b.n	8008eac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e8a:	4b0e      	ldr	r3, [pc, #56]	; (8008ec4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	4b0a      	ldr	r3, [pc, #40]	; (8008eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3304      	adds	r3, #4
 8008e94:	4619      	mov	r1, r3
 8008e96:	4610      	mov	r0, r2
 8008e98:	f7fe fbcb 	bl	8007632 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ec8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d202      	bcs.n	8008eac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008ea6:	4a08      	ldr	r2, [pc, #32]	; (8008ec8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	6013      	str	r3, [r2, #0]
}
 8008eac:	bf00      	nop
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	200012ec 	.word	0x200012ec
 8008eb8:	20000e14 	.word	0x20000e14
 8008ebc:	200012d4 	.word	0x200012d4
 8008ec0:	200012a4 	.word	0x200012a4
 8008ec4:	200012a0 	.word	0x200012a0
 8008ec8:	20001308 	.word	0x20001308

08008ecc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08a      	sub	sp, #40	; 0x28
 8008ed0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008ed6:	f000 fb07 	bl	80094e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008eda:	4b1c      	ldr	r3, [pc, #112]	; (8008f4c <xTimerCreateTimerTask+0x80>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d021      	beq.n	8008f26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008eea:	1d3a      	adds	r2, r7, #4
 8008eec:	f107 0108 	add.w	r1, r7, #8
 8008ef0:	f107 030c 	add.w	r3, r7, #12
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fe fb31 	bl	800755c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008efa:	6879      	ldr	r1, [r7, #4]
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	9202      	str	r2, [sp, #8]
 8008f02:	9301      	str	r3, [sp, #4]
 8008f04:	2302      	movs	r3, #2
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	2300      	movs	r3, #0
 8008f0a:	460a      	mov	r2, r1
 8008f0c:	4910      	ldr	r1, [pc, #64]	; (8008f50 <xTimerCreateTimerTask+0x84>)
 8008f0e:	4811      	ldr	r0, [pc, #68]	; (8008f54 <xTimerCreateTimerTask+0x88>)
 8008f10:	f7ff f8de 	bl	80080d0 <xTaskCreateStatic>
 8008f14:	4603      	mov	r3, r0
 8008f16:	4a10      	ldr	r2, [pc, #64]	; (8008f58 <xTimerCreateTimerTask+0x8c>)
 8008f18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f1a:	4b0f      	ldr	r3, [pc, #60]	; (8008f58 <xTimerCreateTimerTask+0x8c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f22:	2301      	movs	r3, #1
 8008f24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10a      	bne.n	8008f42 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	613b      	str	r3, [r7, #16]
}
 8008f3e:	bf00      	nop
 8008f40:	e7fe      	b.n	8008f40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f42:	697b      	ldr	r3, [r7, #20]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3718      	adds	r7, #24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	20001344 	.word	0x20001344
 8008f50:	0800a880 	.word	0x0800a880
 8008f54:	08009091 	.word	0x08009091
 8008f58:	20001348 	.word	0x20001348

08008f5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08a      	sub	sp, #40	; 0x28
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
 8008f68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	623b      	str	r3, [r7, #32]
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f8a:	4b1a      	ldr	r3, [pc, #104]	; (8008ff4 <xTimerGenericCommand+0x98>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d02a      	beq.n	8008fe8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2b05      	cmp	r3, #5
 8008fa2:	dc18      	bgt.n	8008fd6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008fa4:	f7ff feb2 	bl	8008d0c <xTaskGetSchedulerState>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d109      	bne.n	8008fc2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008fae:	4b11      	ldr	r3, [pc, #68]	; (8008ff4 <xTimerGenericCommand+0x98>)
 8008fb0:	6818      	ldr	r0, [r3, #0]
 8008fb2:	f107 0110 	add.w	r1, r7, #16
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fba:	f7fe fca1 	bl	8007900 <xQueueGenericSend>
 8008fbe:	6278      	str	r0, [r7, #36]	; 0x24
 8008fc0:	e012      	b.n	8008fe8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008fc2:	4b0c      	ldr	r3, [pc, #48]	; (8008ff4 <xTimerGenericCommand+0x98>)
 8008fc4:	6818      	ldr	r0, [r3, #0]
 8008fc6:	f107 0110 	add.w	r1, r7, #16
 8008fca:	2300      	movs	r3, #0
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f7fe fc97 	bl	8007900 <xQueueGenericSend>
 8008fd2:	6278      	str	r0, [r7, #36]	; 0x24
 8008fd4:	e008      	b.n	8008fe8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008fd6:	4b07      	ldr	r3, [pc, #28]	; (8008ff4 <xTimerGenericCommand+0x98>)
 8008fd8:	6818      	ldr	r0, [r3, #0]
 8008fda:	f107 0110 	add.w	r1, r7, #16
 8008fde:	2300      	movs	r3, #0
 8008fe0:	683a      	ldr	r2, [r7, #0]
 8008fe2:	f7fe fd8b 	bl	8007afc <xQueueGenericSendFromISR>
 8008fe6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3728      	adds	r7, #40	; 0x28
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	20001344 	.word	0x20001344

08008ff8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b088      	sub	sp, #32
 8008ffc:	af02      	add	r7, sp, #8
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009002:	4b22      	ldr	r3, [pc, #136]	; (800908c <prvProcessExpiredTimer+0x94>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	3304      	adds	r3, #4
 8009010:	4618      	mov	r0, r3
 8009012:	f7fe fb47 	bl	80076a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800901c:	f003 0304 	and.w	r3, r3, #4
 8009020:	2b00      	cmp	r3, #0
 8009022:	d022      	beq.n	800906a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	699a      	ldr	r2, [r3, #24]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	18d1      	adds	r1, r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	6978      	ldr	r0, [r7, #20]
 8009032:	f000 f8d1 	bl	80091d8 <prvInsertTimerInActiveList>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d01f      	beq.n	800907c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800903c:	2300      	movs	r3, #0
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	2300      	movs	r3, #0
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	2100      	movs	r1, #0
 8009046:	6978      	ldr	r0, [r7, #20]
 8009048:	f7ff ff88 	bl	8008f5c <xTimerGenericCommand>
 800904c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d113      	bne.n	800907c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	60fb      	str	r3, [r7, #12]
}
 8009066:	bf00      	nop
 8009068:	e7fe      	b.n	8009068 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009070:	f023 0301 	bic.w	r3, r3, #1
 8009074:	b2da      	uxtb	r2, r3
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	6a1b      	ldr	r3, [r3, #32]
 8009080:	6978      	ldr	r0, [r7, #20]
 8009082:	4798      	blx	r3
}
 8009084:	bf00      	nop
 8009086:	3718      	adds	r7, #24
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	2000133c 	.word	0x2000133c

08009090 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009098:	f107 0308 	add.w	r3, r7, #8
 800909c:	4618      	mov	r0, r3
 800909e:	f000 f857 	bl	8009150 <prvGetNextExpireTime>
 80090a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	4619      	mov	r1, r3
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 f803 	bl	80090b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80090ae:	f000 f8d5 	bl	800925c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090b2:	e7f1      	b.n	8009098 <prvTimerTask+0x8>

080090b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80090be:	f7ff fa43 	bl	8008548 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090c2:	f107 0308 	add.w	r3, r7, #8
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 f866 	bl	8009198 <prvSampleTimeNow>
 80090cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d130      	bne.n	8009136 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10a      	bne.n	80090f0 <prvProcessTimerOrBlockTask+0x3c>
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d806      	bhi.n	80090f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80090e2:	f7ff fa3f 	bl	8008564 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80090e6:	68f9      	ldr	r1, [r7, #12]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7ff ff85 	bl	8008ff8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80090ee:	e024      	b.n	800913a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d008      	beq.n	8009108 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80090f6:	4b13      	ldr	r3, [pc, #76]	; (8009144 <prvProcessTimerOrBlockTask+0x90>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d101      	bne.n	8009104 <prvProcessTimerOrBlockTask+0x50>
 8009100:	2301      	movs	r3, #1
 8009102:	e000      	b.n	8009106 <prvProcessTimerOrBlockTask+0x52>
 8009104:	2300      	movs	r3, #0
 8009106:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009108:	4b0f      	ldr	r3, [pc, #60]	; (8009148 <prvProcessTimerOrBlockTask+0x94>)
 800910a:	6818      	ldr	r0, [r3, #0]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	4619      	mov	r1, r3
 8009116:	f7fe ffa7 	bl	8008068 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800911a:	f7ff fa23 	bl	8008564 <xTaskResumeAll>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10a      	bne.n	800913a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009124:	4b09      	ldr	r3, [pc, #36]	; (800914c <prvProcessTimerOrBlockTask+0x98>)
 8009126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800912a:	601a      	str	r2, [r3, #0]
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	f3bf 8f6f 	isb	sy
}
 8009134:	e001      	b.n	800913a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009136:	f7ff fa15 	bl	8008564 <xTaskResumeAll>
}
 800913a:	bf00      	nop
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	20001340 	.word	0x20001340
 8009148:	20001344 	.word	0x20001344
 800914c:	e000ed04 	.word	0xe000ed04

08009150 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009158:	4b0e      	ldr	r3, [pc, #56]	; (8009194 <prvGetNextExpireTime+0x44>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <prvGetNextExpireTime+0x16>
 8009162:	2201      	movs	r2, #1
 8009164:	e000      	b.n	8009168 <prvGetNextExpireTime+0x18>
 8009166:	2200      	movs	r2, #0
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d105      	bne.n	8009180 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009174:	4b07      	ldr	r3, [pc, #28]	; (8009194 <prvGetNextExpireTime+0x44>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	60fb      	str	r3, [r7, #12]
 800917e:	e001      	b.n	8009184 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009184:	68fb      	ldr	r3, [r7, #12]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	2000133c 	.word	0x2000133c

08009198 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80091a0:	f7ff fa7e 	bl	80086a0 <xTaskGetTickCount>
 80091a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80091a6:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <prvSampleTimeNow+0x3c>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d205      	bcs.n	80091bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80091b0:	f000 f936 	bl	8009420 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	601a      	str	r2, [r3, #0]
 80091ba:	e002      	b.n	80091c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80091c2:	4a04      	ldr	r2, [pc, #16]	; (80091d4 <prvSampleTimeNow+0x3c>)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80091c8:	68fb      	ldr	r3, [r7, #12]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	2000134c 	.word	0x2000134c

080091d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
 80091e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80091e6:	2300      	movs	r3, #0
 80091e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d812      	bhi.n	8009224 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	1ad2      	subs	r2, r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	429a      	cmp	r2, r3
 800920a:	d302      	bcc.n	8009212 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800920c:	2301      	movs	r3, #1
 800920e:	617b      	str	r3, [r7, #20]
 8009210:	e01b      	b.n	800924a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009212:	4b10      	ldr	r3, [pc, #64]	; (8009254 <prvInsertTimerInActiveList+0x7c>)
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	3304      	adds	r3, #4
 800921a:	4619      	mov	r1, r3
 800921c:	4610      	mov	r0, r2
 800921e:	f7fe fa08 	bl	8007632 <vListInsert>
 8009222:	e012      	b.n	800924a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	429a      	cmp	r2, r3
 800922a:	d206      	bcs.n	800923a <prvInsertTimerInActiveList+0x62>
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	429a      	cmp	r2, r3
 8009232:	d302      	bcc.n	800923a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009234:	2301      	movs	r3, #1
 8009236:	617b      	str	r3, [r7, #20]
 8009238:	e007      	b.n	800924a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800923a:	4b07      	ldr	r3, [pc, #28]	; (8009258 <prvInsertTimerInActiveList+0x80>)
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	3304      	adds	r3, #4
 8009242:	4619      	mov	r1, r3
 8009244:	4610      	mov	r0, r2
 8009246:	f7fe f9f4 	bl	8007632 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800924a:	697b      	ldr	r3, [r7, #20]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	20001340 	.word	0x20001340
 8009258:	2000133c 	.word	0x2000133c

0800925c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b08e      	sub	sp, #56	; 0x38
 8009260:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009262:	e0ca      	b.n	80093fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	da18      	bge.n	800929c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800926a:	1d3b      	adds	r3, r7, #4
 800926c:	3304      	adds	r3, #4
 800926e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10a      	bne.n	800928c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	61fb      	str	r3, [r7, #28]
}
 8009288:	bf00      	nop
 800928a:	e7fe      	b.n	800928a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800928c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009292:	6850      	ldr	r0, [r2, #4]
 8009294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009296:	6892      	ldr	r2, [r2, #8]
 8009298:	4611      	mov	r1, r2
 800929a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f2c0 80aa 	blt.w	80093f8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	695b      	ldr	r3, [r3, #20]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d004      	beq.n	80092ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b2:	3304      	adds	r3, #4
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fe f9f5 	bl	80076a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092ba:	463b      	mov	r3, r7
 80092bc:	4618      	mov	r0, r3
 80092be:	f7ff ff6b 	bl	8009198 <prvSampleTimeNow>
 80092c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b09      	cmp	r3, #9
 80092c8:	f200 8097 	bhi.w	80093fa <prvProcessReceivedCommands+0x19e>
 80092cc:	a201      	add	r2, pc, #4	; (adr r2, 80092d4 <prvProcessReceivedCommands+0x78>)
 80092ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d2:	bf00      	nop
 80092d4:	080092fd 	.word	0x080092fd
 80092d8:	080092fd 	.word	0x080092fd
 80092dc:	080092fd 	.word	0x080092fd
 80092e0:	08009371 	.word	0x08009371
 80092e4:	08009385 	.word	0x08009385
 80092e8:	080093cf 	.word	0x080093cf
 80092ec:	080092fd 	.word	0x080092fd
 80092f0:	080092fd 	.word	0x080092fd
 80092f4:	08009371 	.word	0x08009371
 80092f8:	08009385 	.word	0x08009385
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009302:	f043 0301 	orr.w	r3, r3, #1
 8009306:	b2da      	uxtb	r2, r3
 8009308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	18d1      	adds	r1, r2, r3
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800931a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800931c:	f7ff ff5c 	bl	80091d8 <prvInsertTimerInActiveList>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d069      	beq.n	80093fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800932c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800932e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009334:	f003 0304 	and.w	r3, r3, #4
 8009338:	2b00      	cmp	r3, #0
 800933a:	d05e      	beq.n	80093fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	441a      	add	r2, r3
 8009344:	2300      	movs	r3, #0
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	2300      	movs	r3, #0
 800934a:	2100      	movs	r1, #0
 800934c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800934e:	f7ff fe05 	bl	8008f5c <xTimerGenericCommand>
 8009352:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d14f      	bne.n	80093fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800935a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935e:	f383 8811 	msr	BASEPRI, r3
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	61bb      	str	r3, [r7, #24]
}
 800936c:	bf00      	nop
 800936e:	e7fe      	b.n	800936e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009372:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009376:	f023 0301 	bic.w	r3, r3, #1
 800937a:	b2da      	uxtb	r2, r3
 800937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009382:	e03a      	b.n	80093fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800938a:	f043 0301 	orr.w	r3, r3, #1
 800938e:	b2da      	uxtb	r2, r3
 8009390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	617b      	str	r3, [r7, #20]
}
 80093b6:	bf00      	nop
 80093b8:	e7fe      	b.n	80093b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80093ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093bc:	699a      	ldr	r2, [r3, #24]
 80093be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c0:	18d1      	adds	r1, r2, r3
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093c8:	f7ff ff06 	bl	80091d8 <prvInsertTimerInActiveList>
					break;
 80093cc:	e015      	b.n	80093fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093d4:	f003 0302 	and.w	r3, r3, #2
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d103      	bne.n	80093e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80093dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093de:	f000 fbdf 	bl	8009ba0 <vPortFree>
 80093e2:	e00a      	b.n	80093fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093ea:	f023 0301 	bic.w	r3, r3, #1
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80093f6:	e000      	b.n	80093fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80093f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093fa:	4b08      	ldr	r3, [pc, #32]	; (800941c <prvProcessReceivedCommands+0x1c0>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	1d39      	adds	r1, r7, #4
 8009400:	2200      	movs	r2, #0
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe fc16 	bl	8007c34 <xQueueReceive>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	f47f af2a 	bne.w	8009264 <prvProcessReceivedCommands+0x8>
	}
}
 8009410:	bf00      	nop
 8009412:	bf00      	nop
 8009414:	3730      	adds	r7, #48	; 0x30
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	20001344 	.word	0x20001344

08009420 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009426:	e048      	b.n	80094ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009428:	4b2d      	ldr	r3, [pc, #180]	; (80094e0 <prvSwitchTimerLists+0xc0>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009432:	4b2b      	ldr	r3, [pc, #172]	; (80094e0 <prvSwitchTimerLists+0xc0>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	3304      	adds	r3, #4
 8009440:	4618      	mov	r0, r3
 8009442:	f7fe f92f 	bl	80076a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009454:	f003 0304 	and.w	r3, r3, #4
 8009458:	2b00      	cmp	r3, #0
 800945a:	d02e      	beq.n	80094ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	4413      	add	r3, r2
 8009464:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	429a      	cmp	r2, r3
 800946c:	d90e      	bls.n	800948c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	68ba      	ldr	r2, [r7, #8]
 8009472:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800947a:	4b19      	ldr	r3, [pc, #100]	; (80094e0 <prvSwitchTimerLists+0xc0>)
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3304      	adds	r3, #4
 8009482:	4619      	mov	r1, r3
 8009484:	4610      	mov	r0, r2
 8009486:	f7fe f8d4 	bl	8007632 <vListInsert>
 800948a:	e016      	b.n	80094ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800948c:	2300      	movs	r3, #0
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	2300      	movs	r3, #0
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	2100      	movs	r1, #0
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f7ff fd60 	bl	8008f5c <xTimerGenericCommand>
 800949c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10a      	bne.n	80094ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 80094a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a8:	f383 8811 	msr	BASEPRI, r3
 80094ac:	f3bf 8f6f 	isb	sy
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	603b      	str	r3, [r7, #0]
}
 80094b6:	bf00      	nop
 80094b8:	e7fe      	b.n	80094b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094ba:	4b09      	ldr	r3, [pc, #36]	; (80094e0 <prvSwitchTimerLists+0xc0>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d1b1      	bne.n	8009428 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80094c4:	4b06      	ldr	r3, [pc, #24]	; (80094e0 <prvSwitchTimerLists+0xc0>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80094ca:	4b06      	ldr	r3, [pc, #24]	; (80094e4 <prvSwitchTimerLists+0xc4>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a04      	ldr	r2, [pc, #16]	; (80094e0 <prvSwitchTimerLists+0xc0>)
 80094d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80094d2:	4a04      	ldr	r2, [pc, #16]	; (80094e4 <prvSwitchTimerLists+0xc4>)
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	6013      	str	r3, [r2, #0]
}
 80094d8:	bf00      	nop
 80094da:	3718      	adds	r7, #24
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	2000133c 	.word	0x2000133c
 80094e4:	20001340 	.word	0x20001340

080094e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80094ee:	f000 f969 	bl	80097c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80094f2:	4b15      	ldr	r3, [pc, #84]	; (8009548 <prvCheckForValidListAndQueue+0x60>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d120      	bne.n	800953c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80094fa:	4814      	ldr	r0, [pc, #80]	; (800954c <prvCheckForValidListAndQueue+0x64>)
 80094fc:	f7fe f848 	bl	8007590 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009500:	4813      	ldr	r0, [pc, #76]	; (8009550 <prvCheckForValidListAndQueue+0x68>)
 8009502:	f7fe f845 	bl	8007590 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009506:	4b13      	ldr	r3, [pc, #76]	; (8009554 <prvCheckForValidListAndQueue+0x6c>)
 8009508:	4a10      	ldr	r2, [pc, #64]	; (800954c <prvCheckForValidListAndQueue+0x64>)
 800950a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800950c:	4b12      	ldr	r3, [pc, #72]	; (8009558 <prvCheckForValidListAndQueue+0x70>)
 800950e:	4a10      	ldr	r2, [pc, #64]	; (8009550 <prvCheckForValidListAndQueue+0x68>)
 8009510:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009512:	2300      	movs	r3, #0
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	4b11      	ldr	r3, [pc, #68]	; (800955c <prvCheckForValidListAndQueue+0x74>)
 8009518:	4a11      	ldr	r2, [pc, #68]	; (8009560 <prvCheckForValidListAndQueue+0x78>)
 800951a:	2110      	movs	r1, #16
 800951c:	200a      	movs	r0, #10
 800951e:	f7fe f953 	bl	80077c8 <xQueueGenericCreateStatic>
 8009522:	4603      	mov	r3, r0
 8009524:	4a08      	ldr	r2, [pc, #32]	; (8009548 <prvCheckForValidListAndQueue+0x60>)
 8009526:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009528:	4b07      	ldr	r3, [pc, #28]	; (8009548 <prvCheckForValidListAndQueue+0x60>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d005      	beq.n	800953c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009530:	4b05      	ldr	r3, [pc, #20]	; (8009548 <prvCheckForValidListAndQueue+0x60>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	490b      	ldr	r1, [pc, #44]	; (8009564 <prvCheckForValidListAndQueue+0x7c>)
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe fd6c 	bl	8008014 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800953c:	f000 f972 	bl	8009824 <vPortExitCritical>
}
 8009540:	bf00      	nop
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20001344 	.word	0x20001344
 800954c:	20001314 	.word	0x20001314
 8009550:	20001328 	.word	0x20001328
 8009554:	2000133c 	.word	0x2000133c
 8009558:	20001340 	.word	0x20001340
 800955c:	200013f0 	.word	0x200013f0
 8009560:	20001350 	.word	0x20001350
 8009564:	0800a888 	.word	0x0800a888

08009568 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	3b04      	subs	r3, #4
 8009578:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3b04      	subs	r3, #4
 8009586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	f023 0201 	bic.w	r2, r3, #1
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	3b04      	subs	r3, #4
 8009596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009598:	4a0c      	ldr	r2, [pc, #48]	; (80095cc <pxPortInitialiseStack+0x64>)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	3b14      	subs	r3, #20
 80095a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3b04      	subs	r3, #4
 80095ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f06f 0202 	mvn.w	r2, #2
 80095b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3b20      	subs	r3, #32
 80095bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80095be:	68fb      	ldr	r3, [r7, #12]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	080095d1 	.word	0x080095d1

080095d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80095da:	4b12      	ldr	r3, [pc, #72]	; (8009624 <prvTaskExitError+0x54>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e2:	d00a      	beq.n	80095fa <prvTaskExitError+0x2a>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	60fb      	str	r3, [r7, #12]
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <prvTaskExitError+0x28>
	__asm volatile
 80095fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fe:	f383 8811 	msr	BASEPRI, r3
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	f3bf 8f4f 	dsb	sy
 800960a:	60bb      	str	r3, [r7, #8]
}
 800960c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800960e:	bf00      	nop
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d0fc      	beq.n	8009610 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009616:	bf00      	nop
 8009618:	bf00      	nop
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	2000009c 	.word	0x2000009c
	...

08009630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009630:	4b07      	ldr	r3, [pc, #28]	; (8009650 <pxCurrentTCBConst2>)
 8009632:	6819      	ldr	r1, [r3, #0]
 8009634:	6808      	ldr	r0, [r1, #0]
 8009636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963a:	f380 8809 	msr	PSP, r0
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f04f 0000 	mov.w	r0, #0
 8009646:	f380 8811 	msr	BASEPRI, r0
 800964a:	4770      	bx	lr
 800964c:	f3af 8000 	nop.w

08009650 <pxCurrentTCBConst2>:
 8009650:	20000e14 	.word	0x20000e14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop

08009658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009658:	4808      	ldr	r0, [pc, #32]	; (800967c <prvPortStartFirstTask+0x24>)
 800965a:	6800      	ldr	r0, [r0, #0]
 800965c:	6800      	ldr	r0, [r0, #0]
 800965e:	f380 8808 	msr	MSP, r0
 8009662:	f04f 0000 	mov.w	r0, #0
 8009666:	f380 8814 	msr	CONTROL, r0
 800966a:	b662      	cpsie	i
 800966c:	b661      	cpsie	f
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	df00      	svc	0
 8009678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800967a:	bf00      	nop
 800967c:	e000ed08 	.word	0xe000ed08

08009680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009686:	4b46      	ldr	r3, [pc, #280]	; (80097a0 <xPortStartScheduler+0x120>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a46      	ldr	r2, [pc, #280]	; (80097a4 <xPortStartScheduler+0x124>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d10a      	bne.n	80096a6 <xPortStartScheduler+0x26>
	__asm volatile
 8009690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009694:	f383 8811 	msr	BASEPRI, r3
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	613b      	str	r3, [r7, #16]
}
 80096a2:	bf00      	nop
 80096a4:	e7fe      	b.n	80096a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80096a6:	4b3e      	ldr	r3, [pc, #248]	; (80097a0 <xPortStartScheduler+0x120>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a3f      	ldr	r2, [pc, #252]	; (80097a8 <xPortStartScheduler+0x128>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d10a      	bne.n	80096c6 <xPortStartScheduler+0x46>
	__asm volatile
 80096b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	60fb      	str	r3, [r7, #12]
}
 80096c2:	bf00      	nop
 80096c4:	e7fe      	b.n	80096c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80096c6:	4b39      	ldr	r3, [pc, #228]	; (80097ac <xPortStartScheduler+0x12c>)
 80096c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	22ff      	movs	r2, #255	; 0xff
 80096d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80096e0:	78fb      	ldrb	r3, [r7, #3]
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	4b31      	ldr	r3, [pc, #196]	; (80097b0 <xPortStartScheduler+0x130>)
 80096ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80096ee:	4b31      	ldr	r3, [pc, #196]	; (80097b4 <xPortStartScheduler+0x134>)
 80096f0:	2207      	movs	r2, #7
 80096f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096f4:	e009      	b.n	800970a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80096f6:	4b2f      	ldr	r3, [pc, #188]	; (80097b4 <xPortStartScheduler+0x134>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3b01      	subs	r3, #1
 80096fc:	4a2d      	ldr	r2, [pc, #180]	; (80097b4 <xPortStartScheduler+0x134>)
 80096fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009700:	78fb      	ldrb	r3, [r7, #3]
 8009702:	b2db      	uxtb	r3, r3
 8009704:	005b      	lsls	r3, r3, #1
 8009706:	b2db      	uxtb	r3, r3
 8009708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800970a:	78fb      	ldrb	r3, [r7, #3]
 800970c:	b2db      	uxtb	r3, r3
 800970e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009712:	2b80      	cmp	r3, #128	; 0x80
 8009714:	d0ef      	beq.n	80096f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009716:	4b27      	ldr	r3, [pc, #156]	; (80097b4 <xPortStartScheduler+0x134>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f1c3 0307 	rsb	r3, r3, #7
 800971e:	2b04      	cmp	r3, #4
 8009720:	d00a      	beq.n	8009738 <xPortStartScheduler+0xb8>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	60bb      	str	r3, [r7, #8]
}
 8009734:	bf00      	nop
 8009736:	e7fe      	b.n	8009736 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009738:	4b1e      	ldr	r3, [pc, #120]	; (80097b4 <xPortStartScheduler+0x134>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	021b      	lsls	r3, r3, #8
 800973e:	4a1d      	ldr	r2, [pc, #116]	; (80097b4 <xPortStartScheduler+0x134>)
 8009740:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009742:	4b1c      	ldr	r3, [pc, #112]	; (80097b4 <xPortStartScheduler+0x134>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800974a:	4a1a      	ldr	r2, [pc, #104]	; (80097b4 <xPortStartScheduler+0x134>)
 800974c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	b2da      	uxtb	r2, r3
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009756:	4b18      	ldr	r3, [pc, #96]	; (80097b8 <xPortStartScheduler+0x138>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a17      	ldr	r2, [pc, #92]	; (80097b8 <xPortStartScheduler+0x138>)
 800975c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009760:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009762:	4b15      	ldr	r3, [pc, #84]	; (80097b8 <xPortStartScheduler+0x138>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a14      	ldr	r2, [pc, #80]	; (80097b8 <xPortStartScheduler+0x138>)
 8009768:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800976c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800976e:	f000 f8dd 	bl	800992c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009772:	4b12      	ldr	r3, [pc, #72]	; (80097bc <xPortStartScheduler+0x13c>)
 8009774:	2200      	movs	r2, #0
 8009776:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009778:	f000 f8fc 	bl	8009974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800977c:	4b10      	ldr	r3, [pc, #64]	; (80097c0 <xPortStartScheduler+0x140>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a0f      	ldr	r2, [pc, #60]	; (80097c0 <xPortStartScheduler+0x140>)
 8009782:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009786:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009788:	f7ff ff66 	bl	8009658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800978c:	f7ff f852 	bl	8008834 <vTaskSwitchContext>
	prvTaskExitError();
 8009790:	f7ff ff1e 	bl	80095d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	e000ed00 	.word	0xe000ed00
 80097a4:	410fc271 	.word	0x410fc271
 80097a8:	410fc270 	.word	0x410fc270
 80097ac:	e000e400 	.word	0xe000e400
 80097b0:	20001440 	.word	0x20001440
 80097b4:	20001444 	.word	0x20001444
 80097b8:	e000ed20 	.word	0xe000ed20
 80097bc:	2000009c 	.word	0x2000009c
 80097c0:	e000ef34 	.word	0xe000ef34

080097c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	607b      	str	r3, [r7, #4]
}
 80097dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80097de:	4b0f      	ldr	r3, [pc, #60]	; (800981c <vPortEnterCritical+0x58>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3301      	adds	r3, #1
 80097e4:	4a0d      	ldr	r2, [pc, #52]	; (800981c <vPortEnterCritical+0x58>)
 80097e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80097e8:	4b0c      	ldr	r3, [pc, #48]	; (800981c <vPortEnterCritical+0x58>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d10f      	bne.n	8009810 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80097f0:	4b0b      	ldr	r3, [pc, #44]	; (8009820 <vPortEnterCritical+0x5c>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00a      	beq.n	8009810 <vPortEnterCritical+0x4c>
	__asm volatile
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	603b      	str	r3, [r7, #0]
}
 800980c:	bf00      	nop
 800980e:	e7fe      	b.n	800980e <vPortEnterCritical+0x4a>
	}
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr
 800981c:	2000009c 	.word	0x2000009c
 8009820:	e000ed04 	.word	0xe000ed04

08009824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800982a:	4b12      	ldr	r3, [pc, #72]	; (8009874 <vPortExitCritical+0x50>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10a      	bne.n	8009848 <vPortExitCritical+0x24>
	__asm volatile
 8009832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009836:	f383 8811 	msr	BASEPRI, r3
 800983a:	f3bf 8f6f 	isb	sy
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	607b      	str	r3, [r7, #4]
}
 8009844:	bf00      	nop
 8009846:	e7fe      	b.n	8009846 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009848:	4b0a      	ldr	r3, [pc, #40]	; (8009874 <vPortExitCritical+0x50>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3b01      	subs	r3, #1
 800984e:	4a09      	ldr	r2, [pc, #36]	; (8009874 <vPortExitCritical+0x50>)
 8009850:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009852:	4b08      	ldr	r3, [pc, #32]	; (8009874 <vPortExitCritical+0x50>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d105      	bne.n	8009866 <vPortExitCritical+0x42>
 800985a:	2300      	movs	r3, #0
 800985c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	f383 8811 	msr	BASEPRI, r3
}
 8009864:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009866:	bf00      	nop
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	2000009c 	.word	0x2000009c
	...

08009880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009880:	f3ef 8009 	mrs	r0, PSP
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	4b15      	ldr	r3, [pc, #84]	; (80098e0 <pxCurrentTCBConst>)
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	f01e 0f10 	tst.w	lr, #16
 8009890:	bf08      	it	eq
 8009892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989a:	6010      	str	r0, [r2, #0]
 800989c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80098a4:	f380 8811 	msr	BASEPRI, r0
 80098a8:	f3bf 8f4f 	dsb	sy
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f7fe ffc0 	bl	8008834 <vTaskSwitchContext>
 80098b4:	f04f 0000 	mov.w	r0, #0
 80098b8:	f380 8811 	msr	BASEPRI, r0
 80098bc:	bc09      	pop	{r0, r3}
 80098be:	6819      	ldr	r1, [r3, #0]
 80098c0:	6808      	ldr	r0, [r1, #0]
 80098c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c6:	f01e 0f10 	tst.w	lr, #16
 80098ca:	bf08      	it	eq
 80098cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80098d0:	f380 8809 	msr	PSP, r0
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	f3af 8000 	nop.w

080098e0 <pxCurrentTCBConst>:
 80098e0:	20000e14 	.word	0x20000e14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop

080098e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	607b      	str	r3, [r7, #4]
}
 8009900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009902:	f7fe fedd 	bl	80086c0 <xTaskIncrementTick>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d003      	beq.n	8009914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800990c:	4b06      	ldr	r3, [pc, #24]	; (8009928 <xPortSysTickHandler+0x40>)
 800990e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009912:	601a      	str	r2, [r3, #0]
 8009914:	2300      	movs	r3, #0
 8009916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	f383 8811 	msr	BASEPRI, r3
}
 800991e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	e000ed04 	.word	0xe000ed04

0800992c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800992c:	b480      	push	{r7}
 800992e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009930:	4b0b      	ldr	r3, [pc, #44]	; (8009960 <vPortSetupTimerInterrupt+0x34>)
 8009932:	2200      	movs	r2, #0
 8009934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009936:	4b0b      	ldr	r3, [pc, #44]	; (8009964 <vPortSetupTimerInterrupt+0x38>)
 8009938:	2200      	movs	r2, #0
 800993a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800993c:	4b0a      	ldr	r3, [pc, #40]	; (8009968 <vPortSetupTimerInterrupt+0x3c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a0a      	ldr	r2, [pc, #40]	; (800996c <vPortSetupTimerInterrupt+0x40>)
 8009942:	fba2 2303 	umull	r2, r3, r2, r3
 8009946:	099b      	lsrs	r3, r3, #6
 8009948:	4a09      	ldr	r2, [pc, #36]	; (8009970 <vPortSetupTimerInterrupt+0x44>)
 800994a:	3b01      	subs	r3, #1
 800994c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800994e:	4b04      	ldr	r3, [pc, #16]	; (8009960 <vPortSetupTimerInterrupt+0x34>)
 8009950:	2207      	movs	r2, #7
 8009952:	601a      	str	r2, [r3, #0]
}
 8009954:	bf00      	nop
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	e000e010 	.word	0xe000e010
 8009964:	e000e018 	.word	0xe000e018
 8009968:	2000005c 	.word	0x2000005c
 800996c:	10624dd3 	.word	0x10624dd3
 8009970:	e000e014 	.word	0xe000e014

08009974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009984 <vPortEnableVFP+0x10>
 8009978:	6801      	ldr	r1, [r0, #0]
 800997a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800997e:	6001      	str	r1, [r0, #0]
 8009980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009982:	bf00      	nop
 8009984:	e000ed88 	.word	0xe000ed88

08009988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800998e:	f3ef 8305 	mrs	r3, IPSR
 8009992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2b0f      	cmp	r3, #15
 8009998:	d914      	bls.n	80099c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800999a:	4a17      	ldr	r2, [pc, #92]	; (80099f8 <vPortValidateInterruptPriority+0x70>)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4413      	add	r3, r2
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099a4:	4b15      	ldr	r3, [pc, #84]	; (80099fc <vPortValidateInterruptPriority+0x74>)
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	7afa      	ldrb	r2, [r7, #11]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d20a      	bcs.n	80099c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	607b      	str	r3, [r7, #4]
}
 80099c0:	bf00      	nop
 80099c2:	e7fe      	b.n	80099c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80099c4:	4b0e      	ldr	r3, [pc, #56]	; (8009a00 <vPortValidateInterruptPriority+0x78>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80099cc:	4b0d      	ldr	r3, [pc, #52]	; (8009a04 <vPortValidateInterruptPriority+0x7c>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d90a      	bls.n	80099ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80099d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	603b      	str	r3, [r7, #0]
}
 80099e6:	bf00      	nop
 80099e8:	e7fe      	b.n	80099e8 <vPortValidateInterruptPriority+0x60>
	}
 80099ea:	bf00      	nop
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	e000e3f0 	.word	0xe000e3f0
 80099fc:	20001440 	.word	0x20001440
 8009a00:	e000ed0c 	.word	0xe000ed0c
 8009a04:	20001444 	.word	0x20001444

08009a08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b08a      	sub	sp, #40	; 0x28
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a10:	2300      	movs	r3, #0
 8009a12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a14:	f7fe fd98 	bl	8008548 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a18:	4b5b      	ldr	r3, [pc, #364]	; (8009b88 <pvPortMalloc+0x180>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a20:	f000 f920 	bl	8009c64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a24:	4b59      	ldr	r3, [pc, #356]	; (8009b8c <pvPortMalloc+0x184>)
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f040 8093 	bne.w	8009b58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d01d      	beq.n	8009a74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009a38:	2208      	movs	r2, #8
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f003 0307 	and.w	r3, r3, #7
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d014      	beq.n	8009a74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f023 0307 	bic.w	r3, r3, #7
 8009a50:	3308      	adds	r3, #8
 8009a52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f003 0307 	and.w	r3, r3, #7
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00a      	beq.n	8009a74 <pvPortMalloc+0x6c>
	__asm volatile
 8009a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	617b      	str	r3, [r7, #20]
}
 8009a70:	bf00      	nop
 8009a72:	e7fe      	b.n	8009a72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d06e      	beq.n	8009b58 <pvPortMalloc+0x150>
 8009a7a:	4b45      	ldr	r3, [pc, #276]	; (8009b90 <pvPortMalloc+0x188>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d869      	bhi.n	8009b58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a84:	4b43      	ldr	r3, [pc, #268]	; (8009b94 <pvPortMalloc+0x18c>)
 8009a86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a88:	4b42      	ldr	r3, [pc, #264]	; (8009b94 <pvPortMalloc+0x18c>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a8e:	e004      	b.n	8009a9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d903      	bls.n	8009aac <pvPortMalloc+0xa4>
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1f1      	bne.n	8009a90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009aac:	4b36      	ldr	r3, [pc, #216]	; (8009b88 <pvPortMalloc+0x180>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d050      	beq.n	8009b58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2208      	movs	r2, #8
 8009abc:	4413      	add	r3, r2
 8009abe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	6a3b      	ldr	r3, [r7, #32]
 8009ac6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	1ad2      	subs	r2, r2, r3
 8009ad0:	2308      	movs	r3, #8
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d91f      	bls.n	8009b18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4413      	add	r3, r2
 8009ade:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	f003 0307 	and.w	r3, r3, #7
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00a      	beq.n	8009b00 <pvPortMalloc+0xf8>
	__asm volatile
 8009aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	613b      	str	r3, [r7, #16]
}
 8009afc:	bf00      	nop
 8009afe:	e7fe      	b.n	8009afe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	1ad2      	subs	r2, r2, r3
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b12:	69b8      	ldr	r0, [r7, #24]
 8009b14:	f000 f908 	bl	8009d28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b18:	4b1d      	ldr	r3, [pc, #116]	; (8009b90 <pvPortMalloc+0x188>)
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	4a1b      	ldr	r2, [pc, #108]	; (8009b90 <pvPortMalloc+0x188>)
 8009b24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b26:	4b1a      	ldr	r3, [pc, #104]	; (8009b90 <pvPortMalloc+0x188>)
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	4b1b      	ldr	r3, [pc, #108]	; (8009b98 <pvPortMalloc+0x190>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d203      	bcs.n	8009b3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b32:	4b17      	ldr	r3, [pc, #92]	; (8009b90 <pvPortMalloc+0x188>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a18      	ldr	r2, [pc, #96]	; (8009b98 <pvPortMalloc+0x190>)
 8009b38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	4b13      	ldr	r3, [pc, #76]	; (8009b8c <pvPortMalloc+0x184>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	431a      	orrs	r2, r3
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009b4e:	4b13      	ldr	r3, [pc, #76]	; (8009b9c <pvPortMalloc+0x194>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3301      	adds	r3, #1
 8009b54:	4a11      	ldr	r2, [pc, #68]	; (8009b9c <pvPortMalloc+0x194>)
 8009b56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b58:	f7fe fd04 	bl	8008564 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	f003 0307 	and.w	r3, r3, #7
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00a      	beq.n	8009b7c <pvPortMalloc+0x174>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6a:	f383 8811 	msr	BASEPRI, r3
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	60fb      	str	r3, [r7, #12]
}
 8009b78:	bf00      	nop
 8009b7a:	e7fe      	b.n	8009b7a <pvPortMalloc+0x172>
	return pvReturn;
 8009b7c:	69fb      	ldr	r3, [r7, #28]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3728      	adds	r7, #40	; 0x28
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	20002008 	.word	0x20002008
 8009b8c:	2000201c 	.word	0x2000201c
 8009b90:	2000200c 	.word	0x2000200c
 8009b94:	20002000 	.word	0x20002000
 8009b98:	20002010 	.word	0x20002010
 8009b9c:	20002014 	.word	0x20002014

08009ba0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d04d      	beq.n	8009c4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009bb2:	2308      	movs	r3, #8
 8009bb4:	425b      	negs	r3, r3
 8009bb6:	697a      	ldr	r2, [r7, #20]
 8009bb8:	4413      	add	r3, r2
 8009bba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	4b24      	ldr	r3, [pc, #144]	; (8009c58 <vPortFree+0xb8>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4013      	ands	r3, r2
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10a      	bne.n	8009be4 <vPortFree+0x44>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	60fb      	str	r3, [r7, #12]
}
 8009be0:	bf00      	nop
 8009be2:	e7fe      	b.n	8009be2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00a      	beq.n	8009c02 <vPortFree+0x62>
	__asm volatile
 8009bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	60bb      	str	r3, [r7, #8]
}
 8009bfe:	bf00      	nop
 8009c00:	e7fe      	b.n	8009c00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	685a      	ldr	r2, [r3, #4]
 8009c06:	4b14      	ldr	r3, [pc, #80]	; (8009c58 <vPortFree+0xb8>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d01e      	beq.n	8009c4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d11a      	bne.n	8009c4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	4b0e      	ldr	r3, [pc, #56]	; (8009c58 <vPortFree+0xb8>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	43db      	mvns	r3, r3
 8009c22:	401a      	ands	r2, r3
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c28:	f7fe fc8e 	bl	8008548 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	685a      	ldr	r2, [r3, #4]
 8009c30:	4b0a      	ldr	r3, [pc, #40]	; (8009c5c <vPortFree+0xbc>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4413      	add	r3, r2
 8009c36:	4a09      	ldr	r2, [pc, #36]	; (8009c5c <vPortFree+0xbc>)
 8009c38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c3a:	6938      	ldr	r0, [r7, #16]
 8009c3c:	f000 f874 	bl	8009d28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c40:	4b07      	ldr	r3, [pc, #28]	; (8009c60 <vPortFree+0xc0>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	3301      	adds	r3, #1
 8009c46:	4a06      	ldr	r2, [pc, #24]	; (8009c60 <vPortFree+0xc0>)
 8009c48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009c4a:	f7fe fc8b 	bl	8008564 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c4e:	bf00      	nop
 8009c50:	3718      	adds	r7, #24
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	2000201c 	.word	0x2000201c
 8009c5c:	2000200c 	.word	0x2000200c
 8009c60:	20002018 	.word	0x20002018

08009c64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c6a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009c6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c70:	4b27      	ldr	r3, [pc, #156]	; (8009d10 <prvHeapInit+0xac>)
 8009c72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f003 0307 	and.w	r3, r3, #7
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00c      	beq.n	8009c98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3307      	adds	r3, #7
 8009c82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f023 0307 	bic.w	r3, r3, #7
 8009c8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	4a1f      	ldr	r2, [pc, #124]	; (8009d10 <prvHeapInit+0xac>)
 8009c94:	4413      	add	r3, r2
 8009c96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c9c:	4a1d      	ldr	r2, [pc, #116]	; (8009d14 <prvHeapInit+0xb0>)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ca2:	4b1c      	ldr	r3, [pc, #112]	; (8009d14 <prvHeapInit+0xb0>)
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	4413      	add	r3, r2
 8009cae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009cb0:	2208      	movs	r2, #8
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	1a9b      	subs	r3, r3, r2
 8009cb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f023 0307 	bic.w	r3, r3, #7
 8009cbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	4a15      	ldr	r2, [pc, #84]	; (8009d18 <prvHeapInit+0xb4>)
 8009cc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009cc6:	4b14      	ldr	r3, [pc, #80]	; (8009d18 <prvHeapInit+0xb4>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009cce:	4b12      	ldr	r3, [pc, #72]	; (8009d18 <prvHeapInit+0xb4>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	1ad2      	subs	r2, r2, r3
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ce4:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <prvHeapInit+0xb4>)
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	4a0a      	ldr	r2, [pc, #40]	; (8009d1c <prvHeapInit+0xb8>)
 8009cf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	4a09      	ldr	r2, [pc, #36]	; (8009d20 <prvHeapInit+0xbc>)
 8009cfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009cfc:	4b09      	ldr	r3, [pc, #36]	; (8009d24 <prvHeapInit+0xc0>)
 8009cfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d02:	601a      	str	r2, [r3, #0]
}
 8009d04:	bf00      	nop
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	20001448 	.word	0x20001448
 8009d14:	20002000 	.word	0x20002000
 8009d18:	20002008 	.word	0x20002008
 8009d1c:	20002010 	.word	0x20002010
 8009d20:	2000200c 	.word	0x2000200c
 8009d24:	2000201c 	.word	0x2000201c

08009d28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d30:	4b28      	ldr	r3, [pc, #160]	; (8009dd4 <prvInsertBlockIntoFreeList+0xac>)
 8009d32:	60fb      	str	r3, [r7, #12]
 8009d34:	e002      	b.n	8009d3c <prvInsertBlockIntoFreeList+0x14>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d8f7      	bhi.n	8009d36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	4413      	add	r3, r2
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d108      	bne.n	8009d6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	441a      	add	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	441a      	add	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d118      	bne.n	8009db0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	4b15      	ldr	r3, [pc, #84]	; (8009dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d00d      	beq.n	8009da6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	685a      	ldr	r2, [r3, #4]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	441a      	add	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	e008      	b.n	8009db8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009da6:	4b0c      	ldr	r3, [pc, #48]	; (8009dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	e003      	b.n	8009db8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d002      	beq.n	8009dc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dc6:	bf00      	nop
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	20002000 	.word	0x20002000
 8009dd8:	20002008 	.word	0x20002008

08009ddc <__errno>:
 8009ddc:	4b01      	ldr	r3, [pc, #4]	; (8009de4 <__errno+0x8>)
 8009dde:	6818      	ldr	r0, [r3, #0]
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	200000a0 	.word	0x200000a0

08009de8 <__libc_init_array>:
 8009de8:	b570      	push	{r4, r5, r6, lr}
 8009dea:	4d0d      	ldr	r5, [pc, #52]	; (8009e20 <__libc_init_array+0x38>)
 8009dec:	4c0d      	ldr	r4, [pc, #52]	; (8009e24 <__libc_init_array+0x3c>)
 8009dee:	1b64      	subs	r4, r4, r5
 8009df0:	10a4      	asrs	r4, r4, #2
 8009df2:	2600      	movs	r6, #0
 8009df4:	42a6      	cmp	r6, r4
 8009df6:	d109      	bne.n	8009e0c <__libc_init_array+0x24>
 8009df8:	4d0b      	ldr	r5, [pc, #44]	; (8009e28 <__libc_init_array+0x40>)
 8009dfa:	4c0c      	ldr	r4, [pc, #48]	; (8009e2c <__libc_init_array+0x44>)
 8009dfc:	f000 f936 	bl	800a06c <_init>
 8009e00:	1b64      	subs	r4, r4, r5
 8009e02:	10a4      	asrs	r4, r4, #2
 8009e04:	2600      	movs	r6, #0
 8009e06:	42a6      	cmp	r6, r4
 8009e08:	d105      	bne.n	8009e16 <__libc_init_array+0x2e>
 8009e0a:	bd70      	pop	{r4, r5, r6, pc}
 8009e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e10:	4798      	blx	r3
 8009e12:	3601      	adds	r6, #1
 8009e14:	e7ee      	b.n	8009df4 <__libc_init_array+0xc>
 8009e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e1a:	4798      	blx	r3
 8009e1c:	3601      	adds	r6, #1
 8009e1e:	e7f2      	b.n	8009e06 <__libc_init_array+0x1e>
 8009e20:	0800aa5c 	.word	0x0800aa5c
 8009e24:	0800aa5c 	.word	0x0800aa5c
 8009e28:	0800aa5c 	.word	0x0800aa5c
 8009e2c:	0800aa60 	.word	0x0800aa60

08009e30 <malloc>:
 8009e30:	4b02      	ldr	r3, [pc, #8]	; (8009e3c <malloc+0xc>)
 8009e32:	4601      	mov	r1, r0
 8009e34:	6818      	ldr	r0, [r3, #0]
 8009e36:	f000 b871 	b.w	8009f1c <_malloc_r>
 8009e3a:	bf00      	nop
 8009e3c:	200000a0 	.word	0x200000a0

08009e40 <free>:
 8009e40:	4b02      	ldr	r3, [pc, #8]	; (8009e4c <free+0xc>)
 8009e42:	4601      	mov	r1, r0
 8009e44:	6818      	ldr	r0, [r3, #0]
 8009e46:	f000 b819 	b.w	8009e7c <_free_r>
 8009e4a:	bf00      	nop
 8009e4c:	200000a0 	.word	0x200000a0

08009e50 <memcpy>:
 8009e50:	440a      	add	r2, r1
 8009e52:	4291      	cmp	r1, r2
 8009e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e58:	d100      	bne.n	8009e5c <memcpy+0xc>
 8009e5a:	4770      	bx	lr
 8009e5c:	b510      	push	{r4, lr}
 8009e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e66:	4291      	cmp	r1, r2
 8009e68:	d1f9      	bne.n	8009e5e <memcpy+0xe>
 8009e6a:	bd10      	pop	{r4, pc}

08009e6c <memset>:
 8009e6c:	4402      	add	r2, r0
 8009e6e:	4603      	mov	r3, r0
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d100      	bne.n	8009e76 <memset+0xa>
 8009e74:	4770      	bx	lr
 8009e76:	f803 1b01 	strb.w	r1, [r3], #1
 8009e7a:	e7f9      	b.n	8009e70 <memset+0x4>

08009e7c <_free_r>:
 8009e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e7e:	2900      	cmp	r1, #0
 8009e80:	d048      	beq.n	8009f14 <_free_r+0x98>
 8009e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e86:	9001      	str	r0, [sp, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f1a1 0404 	sub.w	r4, r1, #4
 8009e8e:	bfb8      	it	lt
 8009e90:	18e4      	addlt	r4, r4, r3
 8009e92:	f000 f8dd 	bl	800a050 <__malloc_lock>
 8009e96:	4a20      	ldr	r2, [pc, #128]	; (8009f18 <_free_r+0x9c>)
 8009e98:	9801      	ldr	r0, [sp, #4]
 8009e9a:	6813      	ldr	r3, [r2, #0]
 8009e9c:	4615      	mov	r5, r2
 8009e9e:	b933      	cbnz	r3, 8009eae <_free_r+0x32>
 8009ea0:	6063      	str	r3, [r4, #4]
 8009ea2:	6014      	str	r4, [r2, #0]
 8009ea4:	b003      	add	sp, #12
 8009ea6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009eaa:	f000 b8d7 	b.w	800a05c <__malloc_unlock>
 8009eae:	42a3      	cmp	r3, r4
 8009eb0:	d90b      	bls.n	8009eca <_free_r+0x4e>
 8009eb2:	6821      	ldr	r1, [r4, #0]
 8009eb4:	1862      	adds	r2, r4, r1
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	bf04      	itt	eq
 8009eba:	681a      	ldreq	r2, [r3, #0]
 8009ebc:	685b      	ldreq	r3, [r3, #4]
 8009ebe:	6063      	str	r3, [r4, #4]
 8009ec0:	bf04      	itt	eq
 8009ec2:	1852      	addeq	r2, r2, r1
 8009ec4:	6022      	streq	r2, [r4, #0]
 8009ec6:	602c      	str	r4, [r5, #0]
 8009ec8:	e7ec      	b.n	8009ea4 <_free_r+0x28>
 8009eca:	461a      	mov	r2, r3
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	b10b      	cbz	r3, 8009ed4 <_free_r+0x58>
 8009ed0:	42a3      	cmp	r3, r4
 8009ed2:	d9fa      	bls.n	8009eca <_free_r+0x4e>
 8009ed4:	6811      	ldr	r1, [r2, #0]
 8009ed6:	1855      	adds	r5, r2, r1
 8009ed8:	42a5      	cmp	r5, r4
 8009eda:	d10b      	bne.n	8009ef4 <_free_r+0x78>
 8009edc:	6824      	ldr	r4, [r4, #0]
 8009ede:	4421      	add	r1, r4
 8009ee0:	1854      	adds	r4, r2, r1
 8009ee2:	42a3      	cmp	r3, r4
 8009ee4:	6011      	str	r1, [r2, #0]
 8009ee6:	d1dd      	bne.n	8009ea4 <_free_r+0x28>
 8009ee8:	681c      	ldr	r4, [r3, #0]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	6053      	str	r3, [r2, #4]
 8009eee:	4421      	add	r1, r4
 8009ef0:	6011      	str	r1, [r2, #0]
 8009ef2:	e7d7      	b.n	8009ea4 <_free_r+0x28>
 8009ef4:	d902      	bls.n	8009efc <_free_r+0x80>
 8009ef6:	230c      	movs	r3, #12
 8009ef8:	6003      	str	r3, [r0, #0]
 8009efa:	e7d3      	b.n	8009ea4 <_free_r+0x28>
 8009efc:	6825      	ldr	r5, [r4, #0]
 8009efe:	1961      	adds	r1, r4, r5
 8009f00:	428b      	cmp	r3, r1
 8009f02:	bf04      	itt	eq
 8009f04:	6819      	ldreq	r1, [r3, #0]
 8009f06:	685b      	ldreq	r3, [r3, #4]
 8009f08:	6063      	str	r3, [r4, #4]
 8009f0a:	bf04      	itt	eq
 8009f0c:	1949      	addeq	r1, r1, r5
 8009f0e:	6021      	streq	r1, [r4, #0]
 8009f10:	6054      	str	r4, [r2, #4]
 8009f12:	e7c7      	b.n	8009ea4 <_free_r+0x28>
 8009f14:	b003      	add	sp, #12
 8009f16:	bd30      	pop	{r4, r5, pc}
 8009f18:	20002020 	.word	0x20002020

08009f1c <_malloc_r>:
 8009f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1e:	1ccd      	adds	r5, r1, #3
 8009f20:	f025 0503 	bic.w	r5, r5, #3
 8009f24:	3508      	adds	r5, #8
 8009f26:	2d0c      	cmp	r5, #12
 8009f28:	bf38      	it	cc
 8009f2a:	250c      	movcc	r5, #12
 8009f2c:	2d00      	cmp	r5, #0
 8009f2e:	4606      	mov	r6, r0
 8009f30:	db01      	blt.n	8009f36 <_malloc_r+0x1a>
 8009f32:	42a9      	cmp	r1, r5
 8009f34:	d903      	bls.n	8009f3e <_malloc_r+0x22>
 8009f36:	230c      	movs	r3, #12
 8009f38:	6033      	str	r3, [r6, #0]
 8009f3a:	2000      	movs	r0, #0
 8009f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f3e:	f000 f887 	bl	800a050 <__malloc_lock>
 8009f42:	4921      	ldr	r1, [pc, #132]	; (8009fc8 <_malloc_r+0xac>)
 8009f44:	680a      	ldr	r2, [r1, #0]
 8009f46:	4614      	mov	r4, r2
 8009f48:	b99c      	cbnz	r4, 8009f72 <_malloc_r+0x56>
 8009f4a:	4f20      	ldr	r7, [pc, #128]	; (8009fcc <_malloc_r+0xb0>)
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	b923      	cbnz	r3, 8009f5a <_malloc_r+0x3e>
 8009f50:	4621      	mov	r1, r4
 8009f52:	4630      	mov	r0, r6
 8009f54:	f000 f83c 	bl	8009fd0 <_sbrk_r>
 8009f58:	6038      	str	r0, [r7, #0]
 8009f5a:	4629      	mov	r1, r5
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	f000 f837 	bl	8009fd0 <_sbrk_r>
 8009f62:	1c43      	adds	r3, r0, #1
 8009f64:	d123      	bne.n	8009fae <_malloc_r+0x92>
 8009f66:	230c      	movs	r3, #12
 8009f68:	6033      	str	r3, [r6, #0]
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f000 f876 	bl	800a05c <__malloc_unlock>
 8009f70:	e7e3      	b.n	8009f3a <_malloc_r+0x1e>
 8009f72:	6823      	ldr	r3, [r4, #0]
 8009f74:	1b5b      	subs	r3, r3, r5
 8009f76:	d417      	bmi.n	8009fa8 <_malloc_r+0x8c>
 8009f78:	2b0b      	cmp	r3, #11
 8009f7a:	d903      	bls.n	8009f84 <_malloc_r+0x68>
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	441c      	add	r4, r3
 8009f80:	6025      	str	r5, [r4, #0]
 8009f82:	e004      	b.n	8009f8e <_malloc_r+0x72>
 8009f84:	6863      	ldr	r3, [r4, #4]
 8009f86:	42a2      	cmp	r2, r4
 8009f88:	bf0c      	ite	eq
 8009f8a:	600b      	streq	r3, [r1, #0]
 8009f8c:	6053      	strne	r3, [r2, #4]
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f000 f864 	bl	800a05c <__malloc_unlock>
 8009f94:	f104 000b 	add.w	r0, r4, #11
 8009f98:	1d23      	adds	r3, r4, #4
 8009f9a:	f020 0007 	bic.w	r0, r0, #7
 8009f9e:	1ac2      	subs	r2, r0, r3
 8009fa0:	d0cc      	beq.n	8009f3c <_malloc_r+0x20>
 8009fa2:	1a1b      	subs	r3, r3, r0
 8009fa4:	50a3      	str	r3, [r4, r2]
 8009fa6:	e7c9      	b.n	8009f3c <_malloc_r+0x20>
 8009fa8:	4622      	mov	r2, r4
 8009faa:	6864      	ldr	r4, [r4, #4]
 8009fac:	e7cc      	b.n	8009f48 <_malloc_r+0x2c>
 8009fae:	1cc4      	adds	r4, r0, #3
 8009fb0:	f024 0403 	bic.w	r4, r4, #3
 8009fb4:	42a0      	cmp	r0, r4
 8009fb6:	d0e3      	beq.n	8009f80 <_malloc_r+0x64>
 8009fb8:	1a21      	subs	r1, r4, r0
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f000 f808 	bl	8009fd0 <_sbrk_r>
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	d1dd      	bne.n	8009f80 <_malloc_r+0x64>
 8009fc4:	e7cf      	b.n	8009f66 <_malloc_r+0x4a>
 8009fc6:	bf00      	nop
 8009fc8:	20002020 	.word	0x20002020
 8009fcc:	20002024 	.word	0x20002024

08009fd0 <_sbrk_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	4d06      	ldr	r5, [pc, #24]	; (8009fec <_sbrk_r+0x1c>)
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	4608      	mov	r0, r1
 8009fda:	602b      	str	r3, [r5, #0]
 8009fdc:	f7f9 fe38 	bl	8003c50 <_sbrk>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d102      	bne.n	8009fea <_sbrk_r+0x1a>
 8009fe4:	682b      	ldr	r3, [r5, #0]
 8009fe6:	b103      	cbz	r3, 8009fea <_sbrk_r+0x1a>
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	bd38      	pop	{r3, r4, r5, pc}
 8009fec:	200020c0 	.word	0x200020c0

08009ff0 <strcasecmp>:
 8009ff0:	b570      	push	{r4, r5, r6, lr}
 8009ff2:	4d0c      	ldr	r5, [pc, #48]	; (800a024 <strcasecmp+0x34>)
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	462e      	mov	r6, r5
 8009ff8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ffc:	5d5a      	ldrb	r2, [r3, r5]
 8009ffe:	f002 0203 	and.w	r2, r2, #3
 800a002:	2a01      	cmp	r2, #1
 800a004:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a008:	5cb0      	ldrb	r0, [r6, r2]
 800a00a:	f000 0003 	and.w	r0, r0, #3
 800a00e:	bf08      	it	eq
 800a010:	3320      	addeq	r3, #32
 800a012:	2801      	cmp	r0, #1
 800a014:	bf08      	it	eq
 800a016:	3220      	addeq	r2, #32
 800a018:	1a98      	subs	r0, r3, r2
 800a01a:	d101      	bne.n	800a020 <strcasecmp+0x30>
 800a01c:	2a00      	cmp	r2, #0
 800a01e:	d1eb      	bne.n	8009ff8 <strcasecmp+0x8>
 800a020:	bd70      	pop	{r4, r5, r6, pc}
 800a022:	bf00      	nop
 800a024:	0800a951 	.word	0x0800a951

0800a028 <strncpy>:
 800a028:	b510      	push	{r4, lr}
 800a02a:	3901      	subs	r1, #1
 800a02c:	4603      	mov	r3, r0
 800a02e:	b132      	cbz	r2, 800a03e <strncpy+0x16>
 800a030:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a034:	f803 4b01 	strb.w	r4, [r3], #1
 800a038:	3a01      	subs	r2, #1
 800a03a:	2c00      	cmp	r4, #0
 800a03c:	d1f7      	bne.n	800a02e <strncpy+0x6>
 800a03e:	441a      	add	r2, r3
 800a040:	2100      	movs	r1, #0
 800a042:	4293      	cmp	r3, r2
 800a044:	d100      	bne.n	800a048 <strncpy+0x20>
 800a046:	bd10      	pop	{r4, pc}
 800a048:	f803 1b01 	strb.w	r1, [r3], #1
 800a04c:	e7f9      	b.n	800a042 <strncpy+0x1a>
	...

0800a050 <__malloc_lock>:
 800a050:	4801      	ldr	r0, [pc, #4]	; (800a058 <__malloc_lock+0x8>)
 800a052:	f000 b809 	b.w	800a068 <__retarget_lock_acquire_recursive>
 800a056:	bf00      	nop
 800a058:	200020c8 	.word	0x200020c8

0800a05c <__malloc_unlock>:
 800a05c:	4801      	ldr	r0, [pc, #4]	; (800a064 <__malloc_unlock+0x8>)
 800a05e:	f000 b804 	b.w	800a06a <__retarget_lock_release_recursive>
 800a062:	bf00      	nop
 800a064:	200020c8 	.word	0x200020c8

0800a068 <__retarget_lock_acquire_recursive>:
 800a068:	4770      	bx	lr

0800a06a <__retarget_lock_release_recursive>:
 800a06a:	4770      	bx	lr

0800a06c <_init>:
 800a06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06e:	bf00      	nop
 800a070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a072:	bc08      	pop	{r3}
 800a074:	469e      	mov	lr, r3
 800a076:	4770      	bx	lr

0800a078 <_fini>:
 800a078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a07a:	bf00      	nop
 800a07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a07e:	bc08      	pop	{r3}
 800a080:	469e      	mov	lr, r3
 800a082:	4770      	bx	lr
