
UART-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006544  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  080066d0  080066d0  000166d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eec  08006eec  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ef4  08006ef4  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ef4  08006ef4  00016ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ef8  08006ef8  00016ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08006efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  2000009c  08006f98  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  08006f98  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb68  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002849  00000000  00000000  0002fc34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00032480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  000330a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a85  00000000  00000000  00033bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1e2  00000000  00000000  0005d635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1eac  00000000  00000000  0006b817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d6c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003258  00000000  00000000  0015d718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080066b4 	.word	0x080066b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	080066b4 	.word	0x080066b4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b96e 	b.w	8000df8 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468c      	mov	ip, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 8083 	bne.w	8000c4a <__udivmoddi4+0x116>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d947      	bls.n	8000bda <__udivmoddi4+0xa6>
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	b142      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b50:	f1c2 0020 	rsb	r0, r2, #32
 8000b54:	fa24 f000 	lsr.w	r0, r4, r0
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	4097      	lsls	r7, r2
 8000b5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b60:	4094      	lsls	r4, r2
 8000b62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b66:	0c23      	lsrs	r3, r4, #16
 8000b68:	fbbc f6f8 	udiv	r6, ip, r8
 8000b6c:	fa1f fe87 	uxth.w	lr, r7
 8000b70:	fb08 c116 	mls	r1, r8, r6, ip
 8000b74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b78:	fb06 f10e 	mul.w	r1, r6, lr
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x60>
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b86:	f080 8119 	bcs.w	8000dbc <__udivmoddi4+0x288>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 8116 	bls.w	8000dbc <__udivmoddi4+0x288>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	443b      	add	r3, r7
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x8c>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb2:	f080 8105 	bcs.w	8000dc0 <__udivmoddi4+0x28c>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	f240 8102 	bls.w	8000dc0 <__udivmoddi4+0x28c>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	443c      	add	r4, r7
 8000bc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc4:	eba4 040e 	sub.w	r4, r4, lr
 8000bc8:	2600      	movs	r6, #0
 8000bca:	b11d      	cbz	r5, 8000bd4 <__udivmoddi4+0xa0>
 8000bcc:	40d4      	lsrs	r4, r2
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	b902      	cbnz	r2, 8000bde <__udivmoddi4+0xaa>
 8000bdc:	deff      	udf	#255	; 0xff
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d150      	bne.n	8000c88 <__udivmoddi4+0x154>
 8000be6:	1bcb      	subs	r3, r1, r7
 8000be8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bec:	fa1f f887 	uxth.w	r8, r7
 8000bf0:	2601      	movs	r6, #1
 8000bf2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bf6:	0c21      	lsrs	r1, r4, #16
 8000bf8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c00:	fb08 f30c 	mul.w	r3, r8, ip
 8000c04:	428b      	cmp	r3, r1
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0xe4>
 8000c08:	1879      	adds	r1, r7, r1
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0xe2>
 8000c10:	428b      	cmp	r3, r1
 8000c12:	f200 80e9 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1ac9      	subs	r1, r1, r3
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x10c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x10a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80d9 	bhi.w	8000df0 <__udivmoddi4+0x2bc>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e7bf      	b.n	8000bca <__udivmoddi4+0x96>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0x12e>
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	f000 80b1 	beq.w	8000db6 <__udivmoddi4+0x282>
 8000c54:	2600      	movs	r6, #0
 8000c56:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f683 	clz	r6, r3
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d14a      	bne.n	8000d00 <__udivmoddi4+0x1cc>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0x140>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80b8 	bhi.w	8000de4 <__udivmoddi4+0x2b0>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb61 0103 	sbc.w	r1, r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d0a8      	beq.n	8000bd4 <__udivmoddi4+0xa0>
 8000c82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c86:	e7a5      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c90:	4097      	lsls	r7, r2
 8000c92:	fa01 f002 	lsl.w	r0, r1, r2
 8000c96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9a:	40d9      	lsrs	r1, r3
 8000c9c:	4330      	orrs	r0, r6
 8000c9e:	0c03      	lsrs	r3, r0, #16
 8000ca0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ca4:	fa1f f887 	uxth.w	r8, r7
 8000ca8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb0:	fb06 f108 	mul.w	r1, r6, r8
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cba:	d909      	bls.n	8000cd0 <__udivmoddi4+0x19c>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cc2:	f080 808d 	bcs.w	8000de0 <__udivmoddi4+0x2ac>
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	f240 808a 	bls.w	8000de0 <__udivmoddi4+0x2ac>
 8000ccc:	3e02      	subs	r6, #2
 8000cce:	443b      	add	r3, r7
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b281      	uxth	r1, r0
 8000cd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce0:	fb00 f308 	mul.w	r3, r0, r8
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ce8:	1879      	adds	r1, r7, r1
 8000cea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cee:	d273      	bcs.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d971      	bls.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4439      	add	r1, r7
 8000cf8:	1acb      	subs	r3, r1, r3
 8000cfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cfe:	e778      	b.n	8000bf2 <__udivmoddi4+0xbe>
 8000d00:	f1c6 0c20 	rsb	ip, r6, #32
 8000d04:	fa03 f406 	lsl.w	r4, r3, r6
 8000d08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d0c:	431c      	orrs	r4, r3
 8000d0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d12:	fa01 f306 	lsl.w	r3, r1, r6
 8000d16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	0c3b      	lsrs	r3, r7, #16
 8000d22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d26:	fa1f f884 	uxth.w	r8, r4
 8000d2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d32:	fb09 fa08 	mul.w	sl, r9, r8
 8000d36:	458a      	cmp	sl, r1
 8000d38:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x220>
 8000d42:	1861      	adds	r1, r4, r1
 8000d44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d48:	d248      	bcs.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4a:	458a      	cmp	sl, r1
 8000d4c:	d946      	bls.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d52:	4421      	add	r1, r4
 8000d54:	eba1 010a 	sub.w	r1, r1, sl
 8000d58:	b2bf      	uxth	r7, r7
 8000d5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d66:	fb00 f808 	mul.w	r8, r0, r8
 8000d6a:	45b8      	cmp	r8, r7
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x24a>
 8000d6e:	19e7      	adds	r7, r4, r7
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d22e      	bcs.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d76:	45b8      	cmp	r8, r7
 8000d78:	d92c      	bls.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4427      	add	r7, r4
 8000d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d82:	eba7 0708 	sub.w	r7, r7, r8
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	454f      	cmp	r7, r9
 8000d8c:	46c6      	mov	lr, r8
 8000d8e:	4649      	mov	r1, r9
 8000d90:	d31a      	bcc.n	8000dc8 <__udivmoddi4+0x294>
 8000d92:	d017      	beq.n	8000dc4 <__udivmoddi4+0x290>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x27a>
 8000d96:	ebb3 020e 	subs.w	r2, r3, lr
 8000d9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000da2:	40f2      	lsrs	r2, r6
 8000da4:	ea4c 0202 	orr.w	r2, ip, r2
 8000da8:	40f7      	lsrs	r7, r6
 8000daa:	e9c5 2700 	strd	r2, r7, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	462e      	mov	r6, r5
 8000db8:	4628      	mov	r0, r5
 8000dba:	e70b      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fd      	b.n	8000bc0 <__udivmoddi4+0x8c>
 8000dc4:	4543      	cmp	r3, r8
 8000dc6:	d2e5      	bcs.n	8000d94 <__udivmoddi4+0x260>
 8000dc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	e7df      	b.n	8000d94 <__udivmoddi4+0x260>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e7d2      	b.n	8000d7e <__udivmoddi4+0x24a>
 8000dd8:	4660      	mov	r0, ip
 8000dda:	e78d      	b.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ddc:	4681      	mov	r9, r0
 8000dde:	e7b9      	b.n	8000d54 <__udivmoddi4+0x220>
 8000de0:	4666      	mov	r6, ip
 8000de2:	e775      	b.n	8000cd0 <__udivmoddi4+0x19c>
 8000de4:	4630      	mov	r0, r6
 8000de6:	e74a      	b.n	8000c7e <__udivmoddi4+0x14a>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	4439      	add	r1, r7
 8000dee:	e713      	b.n	8000c18 <__udivmoddi4+0xe4>
 8000df0:	3802      	subs	r0, #2
 8000df2:	443c      	add	r4, r7
 8000df4:	e724      	b.n	8000c40 <__udivmoddi4+0x10c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <cmd_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t cmd_init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
	LOGI(TAG, "Initialized command module.");
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <cmd_init+0x50>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d01a      	beq.n	8000e40 <cmd_init+0x44>
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <cmd_init+0x54>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	dd16      	ble.n	8000e40 <cmd_init+0x44>
 8000e12:	f003 f815 	bl	8003e40 <HAL_GetTick>
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <cmd_init+0x58>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	0999      	lsrs	r1, r3, #6
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <cmd_init+0x58>)
 8000e26:	fba2 0203 	umull	r0, r2, r2, r3
 8000e2a:	0992      	lsrs	r2, r2, #6
 8000e2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e30:	fb00 f202 	mul.w	r2, r0, r2
 8000e34:	1a9a      	subs	r2, r3, r2
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <cmd_init+0x5c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4808      	ldr	r0, [pc, #32]	; (8000e5c <cmd_init+0x60>)
 8000e3c:	f000 fc60 	bl	8001700 <log_printf>
    return 0;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000054 	.word	0x20000054
 8000e50:	20000058 	.word	0x20000058
 8000e54:	10624dd3 	.word	0x10624dd3
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	080066d4 	.word	0x080066d4

08000e60 <cmd_register>:

mod_err_t cmd_register(const cmd_client_info *_client_info)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < CMD_MAX_CLIENTS; i++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]
 8000e6c:	e01d      	b.n	8000eaa <cmd_register+0x4a>
    {
        if (client_infos[i] == NULL || strcasecmp(client_infos[i]->client_name, _client_info->client_name) == 0)
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <cmd_register+0x5c>)
 8000e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00d      	beq.n	8000e96 <cmd_register+0x36>
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	4a0f      	ldr	r2, [pc, #60]	; (8000ebc <cmd_register+0x5c>)
 8000e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	f005 fbf6 	bl	800667c <strcasecmp>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d106      	bne.n	8000ea4 <cmd_register+0x44>
        {
            client_infos[i] = _client_info;
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	4908      	ldr	r1, [pc, #32]	; (8000ebc <cmd_register+0x5c>)
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return MOD_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e006      	b.n	8000eb2 <cmd_register+0x52>
    for (uint8_t i = 0; i < CMD_MAX_CLIENTS; i++)
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	2b09      	cmp	r3, #9
 8000eae:	d9de      	bls.n	8000e6e <cmd_register+0xe>
        }
    }
    return MOD_ERR_RESOURCE;
 8000eb0:	2302      	movs	r3, #2
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200000b8 	.word	0x200000b8

08000ec0 <cmd_execute>:

mod_err_t cmd_execute(char *cmd_line)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b092      	sub	sp, #72	; 0x48
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	6078      	str	r0, [r7, #4]
    LOGI(TAG, "Command received %s", cmd_line);
 8000ec8:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <cmd_execute+0xcc>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d01d      	beq.n	8000f0c <cmd_execute+0x4c>
 8000ed0:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <cmd_execute+0xd0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	dd19      	ble.n	8000f0c <cmd_execute+0x4c>
 8000ed8:	f002 ffb2 	bl	8003e40 <HAL_GetTick>
 8000edc:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ee0:	4a2c      	ldr	r2, [pc, #176]	; (8000f94 <cmd_execute+0xd4>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	0999      	lsrs	r1, r3, #6
 8000ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eea:	4a2a      	ldr	r2, [pc, #168]	; (8000f94 <cmd_execute+0xd4>)
 8000eec:	fba2 0203 	umull	r0, r2, r2, r3
 8000ef0:	0992      	lsrs	r2, r2, #6
 8000ef2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef6:	fb00 f202 	mul.w	r2, r0, r2
 8000efa:	1a9a      	subs	r2, r3, r2
 8000efc:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <cmd_execute+0xd8>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	4603      	mov	r3, r0
 8000f06:	4825      	ldr	r0, [pc, #148]	; (8000f9c <cmd_execute+0xdc>)
 8000f08:	f000 fbfa 	bl	8001700 <log_printf>
    uint32_t num_tokens = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	637b      	str	r3, [r7, #52]	; 0x34
    const char *tokens[CMD_MAX_TOKENS] = {0}; // Store individual tokens as strings.
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2228      	movs	r2, #40	; 0x28
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f005 fba7 	bl	800666c <memset>

    /* Tokenize command line */
    mod_err_t err = tokenize(cmd_line, tokens, &num_tokens);
 8000f1e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	4619      	mov	r1, r3
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f000 f839 	bl	8000fa0 <tokenize>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (err)
 8000f34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <cmd_execute+0x82>
    {
        return err;
 8000f3c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f40:	e01f      	b.n	8000f82 <cmd_execute+0xc2>
    }

    /* If there are no tokens, nothing to do. */
    if (num_tokens == 0)
 8000f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d101      	bne.n	8000f4c <cmd_execute+0x8c>
    {
        return MOD_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	e01a      	b.n	8000f82 <cmd_execute+0xc2>
    }

    /* Handle help/? command. */
    err = help_handler(tokens);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 f8a9 	bl	80010a8 <help_handler>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if(err != MOD_DID_NOTHING)
 8000f5c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	d002      	beq.n	8000f6a <cmd_execute+0xaa>
    {
        return err;
 8000f64:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f68:	e00b      	b.n	8000f82 <cmd_execute+0xc2>
    }
   
    err = client_command_handler(tokens, num_tokens);
 8000f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f922 	bl	80011bc <client_command_handler>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    return err;
 8000f7e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3740      	adds	r7, #64	; 0x40
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000054 	.word	0x20000054
 8000f90:	20000058 	.word	0x20000058
 8000f94:	10624dd3 	.word	0x10624dd3
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	0800670c 	.word	0x0800670c

08000fa0 <tokenize>:
 * @return MOD_OK if successful, "MOD_ERR_" otherwise.
 * 
 * Tokens include name of client, command, and arguments passed.
 */
static mod_err_t tokenize(char *str_to_tokenize, const char **tokens, uint32_t *num_tokens)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
    char *ptr = str_to_tokenize;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	61fb      	str	r3, [r7, #28]
    uint32_t token_count = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]

    /* Iterate through each token. */
    while (1)
    {
        /* Find start of token. */
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 8000fb4:	e002      	b.n	8000fbc <tokenize+0x1c>
        {
            ptr++;
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	61fb      	str	r3, [r7, #28]
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d009      	beq.n	8000fd8 <tokenize+0x38>
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a31      	ldr	r2, [pc, #196]	; (8001090 <tokenize+0xf0>)
 8000fcc:	4413      	add	r3, r2
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1ee      	bne.n	8000fb6 <tokenize+0x16>
        }

        if (*ptr == '\0') // Found end of line.
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d04c      	beq.n	800107a <tokenize+0xda>
        {
            break;
        }
        else
        {
            if (token_count >= CMD_MAX_TOKENS)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	2b09      	cmp	r3, #9
 8000fe4:	d920      	bls.n	8001028 <tokenize+0x88>
            {
                LOGW(TAG, "Too many tokens");
 8000fe6:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <tokenize+0xf4>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d01a      	beq.n	8001024 <tokenize+0x84>
 8000fee:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <tokenize+0xf8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	dd16      	ble.n	8001024 <tokenize+0x84>
 8000ff6:	f002 ff23 	bl	8003e40 <HAL_GetTick>
 8000ffa:	6178      	str	r0, [r7, #20]
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	4a27      	ldr	r2, [pc, #156]	; (800109c <tokenize+0xfc>)
 8001000:	fba2 2303 	umull	r2, r3, r2, r3
 8001004:	0999      	lsrs	r1, r3, #6
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	4a24      	ldr	r2, [pc, #144]	; (800109c <tokenize+0xfc>)
 800100a:	fba2 0203 	umull	r0, r2, r2, r3
 800100e:	0992      	lsrs	r2, r2, #6
 8001010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001014:	fb00 f202 	mul.w	r2, r0, r2
 8001018:	1a9a      	subs	r2, r3, r2
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <tokenize+0x100>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4821      	ldr	r0, [pc, #132]	; (80010a4 <tokenize+0x104>)
 8001020:	f000 fb6e 	bl	8001700 <log_printf>
                return MOD_ERR_BAD_CMD;
 8001024:	2303      	movs	r3, #3
 8001026:	e02f      	b.n	8001088 <tokenize+0xe8>
            }
            else
            {   
                /* Record pointer to start of token, then find end of token. */
                tokens[token_count] = ptr;
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	4413      	add	r3, r2
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	601a      	str	r2, [r3, #0]
                ptr++;
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	3301      	adds	r3, #1
 8001038:	61fb      	str	r3, [r7, #28]
                token_count++;
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	3301      	adds	r3, #1
 800103e:	61bb      	str	r3, [r7, #24]
                while (*ptr != '\0' && !isspace((unsigned char)*ptr))
 8001040:	e002      	b.n	8001048 <tokenize+0xa8>
                {
                    ptr++;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3301      	adds	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
                while (*ptr != '\0' && !isspace((unsigned char)*ptr))
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d009      	beq.n	8001064 <tokenize+0xc4>
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <tokenize+0xf0>)
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	f003 0308 	and.w	r3, r3, #8
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0ee      	beq.n	8001042 <tokenize+0xa2>
                }
                if (*ptr != '\0')
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d008      	beq.n	800107e <tokenize+0xde>
                {
                    *ptr = '\0'; // Terminate end of token.
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
                    ptr++;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3301      	adds	r3, #1
 8001076:	61fb      	str	r3, [r7, #28]
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 8001078:	e7a0      	b.n	8000fbc <tokenize+0x1c>
            break;
 800107a:	bf00      	nop
 800107c:	e000      	b.n	8001080 <tokenize+0xe0>
                }
                else
                {
                    break; // Found end of line ('\0'), no more tokens.
 800107e:	bf00      	nop
                }
            }
        }
    }

    *num_tokens = token_count;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	601a      	str	r2, [r3, #0]
    return MOD_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	08006de8 	.word	0x08006de8
 8001094:	20000054 	.word	0x20000054
 8001098:	20000058 	.word	0x20000058
 800109c:	10624dd3 	.word	0x10624dd3
 80010a0:	20000000 	.word	0x20000000
 80010a4:	08006820 	.word	0x08006820

080010a8 <help_handler>:
 *         otherwise a "MOD_ERR" value.
 * 
 * Iterates through each client infos 
 */
static mod_err_t help_handler(const char** tokens)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    if (strcasecmp("help", tokens[0]) == 0 || strcasecmp("?", tokens[0]) == 0)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	4837      	ldr	r0, [pc, #220]	; (8001194 <help_handler+0xec>)
 80010b8:	f005 fae0 	bl	800667c <strcasecmp>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d008      	beq.n	80010d4 <help_handler+0x2c>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4833      	ldr	r0, [pc, #204]	; (8001198 <help_handler+0xf0>)
 80010ca:	f005 fad7 	bl	800667c <strcasecmp>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d159      	bne.n	8001188 <help_handler+0xe0>
    {
        /* Iterate through commands of each client. */
        for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	75fb      	strb	r3, [r7, #23]
 80010d8:	e04b      	b.n	8001172 <help_handler+0xca>
        {
            const cmd_client_info *ci = client_infos[i];
 80010da:	7dfb      	ldrb	r3, [r7, #23]
 80010dc:	4a2f      	ldr	r2, [pc, #188]	; (800119c <help_handler+0xf4>)
 80010de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e2:	613b      	str	r3, [r7, #16]

            LOG("%s (", ci->client_name);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	482d      	ldr	r0, [pc, #180]	; (80011a0 <help_handler+0xf8>)
 80010ec:	f000 fb08 	bl	8001700 <log_printf>

            if (ci->num_u16_pms > 0 && ci->num_cmds == 0)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d007      	beq.n	8001108 <help_handler+0x60>
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d103      	bne.n	8001108 <help_handler+0x60>
			{
                /* If client provided pm info only, display pm command. */
				LOG("pm)\r\n");
 8001100:	4828      	ldr	r0, [pc, #160]	; (80011a4 <help_handler+0xfc>)
 8001102:	f000 fafd 	bl	8001700 <log_printf>
				continue;
 8001106:	e031      	b.n	800116c <help_handler+0xc4>
			}
            else if(ci->num_cmds == 0)
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d02c      	beq.n	800116a <help_handler+0xc2>
            {
            	continue;
            }
            else
            {
            	uint8_t i2 = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	75bb      	strb	r3, [r7, #22]
            	for (i2 = 0; i2 < ci->num_cmds; i2++)
 8001114:	2300      	movs	r3, #0
 8001116:	75bb      	strb	r3, [r7, #22]
 8001118:	e017      	b.n	800114a <help_handler+0xa2>
            	{
					const cmd_cmd_info* cci = &(ci->cmds[i2]);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	6899      	ldr	r1, [r3, #8]
 800111e:	7dba      	ldrb	r2, [r7, #22]
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	440b      	add	r3, r1
 800112a:	60fb      	str	r3, [r7, #12]
					LOG("%s%s", i2 == 0 ? "" : ", ", cci->cmd_name);
 800112c:	7dbb      	ldrb	r3, [r7, #22]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <help_handler+0x8e>
 8001132:	491d      	ldr	r1, [pc, #116]	; (80011a8 <help_handler+0x100>)
 8001134:	e000      	b.n	8001138 <help_handler+0x90>
 8001136:	491d      	ldr	r1, [pc, #116]	; (80011ac <help_handler+0x104>)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	481c      	ldr	r0, [pc, #112]	; (80011b0 <help_handler+0x108>)
 8001140:	f000 fade 	bl	8001700 <log_printf>
            	for (i2 = 0; i2 < ci->num_cmds; i2++)
 8001144:	7dbb      	ldrb	r3, [r7, #22]
 8001146:	3301      	adds	r3, #1
 8001148:	75bb      	strb	r3, [r7, #22]
 800114a:	7dba      	ldrb	r2, [r7, #22]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	429a      	cmp	r2, r3
 8001152:	d3e2      	bcc.n	800111a <help_handler+0x72>
            	}
              	if (ci->num_u16_pms > 0)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <help_handler+0xba>
				{
					LOG(", pm");
 800115c:	4815      	ldr	r0, [pc, #84]	; (80011b4 <help_handler+0x10c>)
 800115e:	f000 facf 	bl	8001700 <log_printf>
				}
              	LOG(")\r\n");
 8001162:	4815      	ldr	r0, [pc, #84]	; (80011b8 <help_handler+0x110>)
 8001164:	f000 facc 	bl	8001700 <log_printf>
 8001168:	e000      	b.n	800116c <help_handler+0xc4>
            	continue;
 800116a:	bf00      	nop
        for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	3301      	adds	r3, #1
 8001170:	75fb      	strb	r3, [r7, #23]
 8001172:	7dfb      	ldrb	r3, [r7, #23]
 8001174:	4a09      	ldr	r2, [pc, #36]	; (800119c <help_handler+0xf4>)
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <help_handler+0xdc>
 800117e:	7dfb      	ldrb	r3, [r7, #23]
 8001180:	2b09      	cmp	r3, #9
 8001182:	d9aa      	bls.n	80010da <help_handler+0x32>
            }
        }

        return MOD_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	e000      	b.n	800118a <help_handler+0xe2>
    }

    return MOD_DID_NOTHING; // Not a top-level help command.
 8001188:	2308      	movs	r3, #8
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	0800684c 	.word	0x0800684c
 8001198:	08006854 	.word	0x08006854
 800119c:	200000b8 	.word	0x200000b8
 80011a0:	08006858 	.word	0x08006858
 80011a4:	08006864 	.word	0x08006864
 80011a8:	08006874 	.word	0x08006874
 80011ac:	08006878 	.word	0x08006878
 80011b0:	0800687c 	.word	0x0800687c
 80011b4:	08006888 	.word	0x08006888
 80011b8:	08006894 	.word	0x08006894

080011bc <client_command_handler>:
 * @return MOD_OK if successful, 
 *         MOD_DID_NOTHING if not a client command, 
 *         otherwise a "MOD_ERR" value.
 */
static mod_err_t client_command_handler(const char** tokens, uint32_t num_tokens)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	77fb      	strb	r3, [r7, #31]
 80011ca:	e112      	b.n	80013f2 <client_command_handler+0x236>
    {
        const cmd_client_info* ci = client_infos[i];
 80011cc:	7ffb      	ldrb	r3, [r7, #31]
 80011ce:	4a9d      	ldr	r2, [pc, #628]	; (8001444 <client_command_handler+0x288>)
 80011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d4:	617b      	str	r3, [r7, #20]

        /* Look for correct client first */
        if (strcasecmp(tokens[0], ci->client_name) != 0)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4619      	mov	r1, r3
 80011e0:	4610      	mov	r0, r2
 80011e2:	f005 fa4b 	bl	800667c <strcasecmp>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <client_command_handler+0x38>
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 80011ec:	7ffb      	ldrb	r3, [r7, #31]
 80011ee:	3301      	adds	r3, #1
 80011f0:	77fb      	strb	r3, [r7, #31]
 80011f2:	e0fe      	b.n	80013f2 <client_command_handler+0x236>
        {
            continue;
        }

        /* If there is no command with client, assume they want help. */
        if (num_tokens == 1)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d103      	bne.n	8001202 <client_command_handler+0x46>
        {
            tokens[1] = "help";
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3304      	adds	r3, #4
 80011fe:	4a92      	ldr	r2, [pc, #584]	; (8001448 <client_command_handler+0x28c>)
 8001200:	601a      	str	r2, [r3, #0]
        }

        /* Handle help command directly. */
        if (strcasecmp(tokens[1], "help") == 0 || strcasecmp(tokens[1], "?") == 0)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3304      	adds	r3, #4
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	498f      	ldr	r1, [pc, #572]	; (8001448 <client_command_handler+0x28c>)
 800120a:	4618      	mov	r0, r3
 800120c:	f005 fa36 	bl	800667c <strcasecmp>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d009      	beq.n	800122a <client_command_handler+0x6e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3304      	adds	r3, #4
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	498b      	ldr	r1, [pc, #556]	; (800144c <client_command_handler+0x290>)
 800121e:	4618      	mov	r0, r3
 8001220:	f005 fa2c 	bl	800667c <strcasecmp>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d128      	bne.n	800127c <client_command_handler+0xc0>
        {
        	/* Print out all commands associated with client */
            for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 800122a:	2300      	movs	r3, #0
 800122c:	77bb      	strb	r3, [r7, #30]
 800122e:	e014      	b.n	800125a <client_command_handler+0x9e>
            {
                const cmd_cmd_info* cci = &(ci->cmds[i2]);
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	6899      	ldr	r1, [r3, #8]
 8001234:	7fba      	ldrb	r2, [r7, #30]
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	60fb      	str	r3, [r7, #12]
                LOG("%s %s: %s\r\n", ci->client_name, cci->cmd_name, cci->help);
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	6819      	ldr	r1, [r3, #0]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	4880      	ldr	r0, [pc, #512]	; (8001450 <client_command_handler+0x294>)
 8001250:	f000 fa56 	bl	8001700 <log_printf>
            for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 8001254:	7fbb      	ldrb	r3, [r7, #30]
 8001256:	3301      	adds	r3, #1
 8001258:	77bb      	strb	r3, [r7, #30]
 800125a:	7fba      	ldrb	r2, [r7, #30]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	429a      	cmp	r2, r3
 8001262:	d3e5      	bcc.n	8001230 <client_command_handler+0x74>
            }
            /* If client provided pm info, print help for pm command also. */
            if (ci->num_u16_pms > 0)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <client_command_handler+0xbc>
            {
                LOG("%s pm: get or clear performance measurements, "
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	4878      	ldr	r0, [pc, #480]	; (8001454 <client_command_handler+0x298>)
 8001274:	f000 fa44 	bl	8001700 <log_printf>
                        "args: [clear] \r\n", ci->client_name);
            }

            return MOD_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	e0de      	b.n	800143a <client_command_handler+0x27e>
        }


        /* Handle pm command directly. */
        if (strcasecmp(tokens[1], "pm") == 0)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3304      	adds	r3, #4
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4975      	ldr	r1, [pc, #468]	; (8001458 <client_command_handler+0x29c>)
 8001284:	4618      	mov	r0, r3
 8001286:	f005 f9f9 	bl	800667c <strcasecmp>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d150      	bne.n	8001332 <client_command_handler+0x176>
        {
            if (ci->num_u16_pms > 0)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d04a      	beq.n	800132e <client_command_handler+0x172>
            {
                bool clear = (num_tokens >= 3 && strcasecmp(tokens[2], "clear") == 0);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d90b      	bls.n	80012b6 <client_command_handler+0xfa>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3308      	adds	r3, #8
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	496d      	ldr	r1, [pc, #436]	; (800145c <client_command_handler+0x2a0>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f005 f9e8 	bl	800667c <strcasecmp>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <client_command_handler+0xfa>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <client_command_handler+0xfc>
 80012b6:	2300      	movs	r3, #0
 80012b8:	74fb      	strb	r3, [r7, #19]
 80012ba:	7cfb      	ldrb	r3, [r7, #19]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	74fb      	strb	r3, [r7, #19]
                if (clear)
 80012c2:	7cfb      	ldrb	r3, [r7, #19]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d006      	beq.n	80012d6 <client_command_handler+0x11a>
                {
                    LOG("Clearing %s performance measurements\r\n", ci->client_name);
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4864      	ldr	r0, [pc, #400]	; (8001460 <client_command_handler+0x2a4>)
 80012d0:	f000 fa16 	bl	8001700 <log_printf>
 80012d4:	e005      	b.n	80012e2 <client_command_handler+0x126>
                }
                else
                {
                    LOG("%s pms:\r\n", ci->client_name);
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4619      	mov	r1, r3
 80012dc:	4861      	ldr	r0, [pc, #388]	; (8001464 <client_command_handler+0x2a8>)
 80012de:	f000 fa0f 	bl	8001700 <log_printf>
                }
                for (uint8_t i2 = 0; i2 < ci->num_u16_pms; i2++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	777b      	strb	r3, [r7, #29]
 80012e6:	e01d      	b.n	8001324 <client_command_handler+0x168>
                {
                    if (clear)
 80012e8:	7cfb      	ldrb	r3, [r7, #19]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <client_command_handler+0x142>
                    {
                        ci->u16_pms[i2] = 0;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	691a      	ldr	r2, [r3, #16]
 80012f2:	7f7b      	ldrb	r3, [r7, #29]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	2200      	movs	r2, #0
 80012fa:	801a      	strh	r2, [r3, #0]
 80012fc:	e00f      	b.n	800131e <client_command_handler+0x162>
                    }
                    else
                    {
                        LOG("%s: %d\r\n", ci->u16_pm_names[i2], ci->u16_pms[i2]);
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	695a      	ldr	r2, [r3, #20]
 8001302:	7f7b      	ldrb	r3, [r7, #29]
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	6819      	ldr	r1, [r3, #0]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	691a      	ldr	r2, [r3, #16]
 800130e:	7f7b      	ldrb	r3, [r7, #29]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	4853      	ldr	r0, [pc, #332]	; (8001468 <client_command_handler+0x2ac>)
 800131a:	f000 f9f1 	bl	8001700 <log_printf>
                for (uint8_t i2 = 0; i2 < ci->num_u16_pms; i2++)
 800131e:	7f7b      	ldrb	r3, [r7, #29]
 8001320:	3301      	adds	r3, #1
 8001322:	777b      	strb	r3, [r7, #29]
 8001324:	7f7a      	ldrb	r2, [r7, #29]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	429a      	cmp	r2, r3
 800132c:	d3dc      	bcc.n	80012e8 <client_command_handler+0x12c>
                    }
                }
            }

            return MOD_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e083      	b.n	800143a <client_command_handler+0x27e>
        }


        /* Look for command within client. */
        for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 8001332:	2300      	movs	r3, #0
 8001334:	773b      	strb	r3, [r7, #28]
 8001336:	e04c      	b.n	80013d2 <client_command_handler+0x216>
        {
            if (strcasecmp(tokens[1], ci->cmds[i2].cmd_name) == 0)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3304      	adds	r3, #4
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	6899      	ldr	r1, [r3, #8]
 8001342:	7f3a      	ldrb	r2, [r7, #28]
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	f005 f993 	bl	800667c <strcasecmp>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d137      	bne.n	80013cc <client_command_handler+0x210>
            {
                if(num_tokens == 3 && strcasecmp(tokens[2], "help") == 0)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2b03      	cmp	r3, #3
 8001360:	d123      	bne.n	80013aa <client_command_handler+0x1ee>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3308      	adds	r3, #8
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4937      	ldr	r1, [pc, #220]	; (8001448 <client_command_handler+0x28c>)
 800136a:	4618      	mov	r0, r3
 800136c:	f005 f986 	bl	800667c <strcasecmp>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d119      	bne.n	80013aa <client_command_handler+0x1ee>
                {
                    LOG("%s %s: %s\r\n", ci->client_name, ci->cmds[i2].cmd_name, ci->cmds[i2].help);
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	6899      	ldr	r1, [r3, #8]
 800137e:	7f3a      	ldrb	r2, [r7, #28]
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	681c      	ldr	r4, [r3, #0]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	6899      	ldr	r1, [r3, #8]
 8001390:	7f3a      	ldrb	r2, [r7, #28]
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	4622      	mov	r2, r4
 80013a0:	4601      	mov	r1, r0
 80013a2:	482b      	ldr	r0, [pc, #172]	; (8001450 <client_command_handler+0x294>)
 80013a4:	f000 f9ac 	bl	8001700 <log_printf>
 80013a8:	e00e      	b.n	80013c8 <client_command_handler+0x20c>
                }
                else 
                {
                    ci->cmds[i2].cb(num_tokens - 2, tokens + 2); // Ignore client and command tokens.
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	6899      	ldr	r1, [r3, #8]
 80013ae:	7f3a      	ldrb	r2, [r7, #28]
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	1e90      	subs	r0, r2, #2
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	4611      	mov	r1, r2
 80013c6:	4798      	blx	r3
                }
                return MOD_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	e036      	b.n	800143a <client_command_handler+0x27e>
        for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 80013cc:	7f3b      	ldrb	r3, [r7, #28]
 80013ce:	3301      	adds	r3, #1
 80013d0:	773b      	strb	r3, [r7, #28]
 80013d2:	7f3a      	ldrb	r2, [r7, #28]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d3ad      	bcc.n	8001338 <client_command_handler+0x17c>
            }
        }

        LOG("No such command (%s %s)\r\n", tokens[0], tokens[1]);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6819      	ldr	r1, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3304      	adds	r3, #4
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4820      	ldr	r0, [pc, #128]	; (800146c <client_command_handler+0x2b0>)
 80013ea:	f000 f989 	bl	8001700 <log_printf>
        return MOD_ERR_BAD_CMD;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e023      	b.n	800143a <client_command_handler+0x27e>
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
 80013f4:	4a13      	ldr	r2, [pc, #76]	; (8001444 <client_command_handler+0x288>)
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <client_command_handler+0x24a>
 80013fe:	7ffb      	ldrb	r3, [r7, #31]
 8001400:	2b09      	cmp	r3, #9
 8001402:	f67f aee3 	bls.w	80011cc <client_command_handler+0x10>
    }

    /* Could not find client */
    LOG("No such command ");
 8001406:	481a      	ldr	r0, [pc, #104]	; (8001470 <client_command_handler+0x2b4>)
 8001408:	f000 f97a 	bl	8001700 <log_printf>
    for(uint8_t i = 0; i < num_tokens ; i++)
 800140c:	2300      	movs	r3, #0
 800140e:	76fb      	strb	r3, [r7, #27]
 8001410:	e00b      	b.n	800142a <client_command_handler+0x26e>
    {
        LOG("%s ", tokens[i]);
 8001412:	7efb      	ldrb	r3, [r7, #27]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	4815      	ldr	r0, [pc, #84]	; (8001474 <client_command_handler+0x2b8>)
 8001420:	f000 f96e 	bl	8001700 <log_printf>
    for(uint8_t i = 0; i < num_tokens ; i++)
 8001424:	7efb      	ldrb	r3, [r7, #27]
 8001426:	3301      	adds	r3, #1
 8001428:	76fb      	strb	r3, [r7, #27]
 800142a:	7efb      	ldrb	r3, [r7, #27]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d8ef      	bhi.n	8001412 <client_command_handler+0x256>
    }
    LOG("\r\n");
 8001432:	4811      	ldr	r0, [pc, #68]	; (8001478 <client_command_handler+0x2bc>)
 8001434:	f000 f964 	bl	8001700 <log_printf>
    return MOD_ERR_BAD_CMD; 
 8001438:	2303      	movs	r3, #3
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd90      	pop	{r4, r7, pc}
 8001442:	bf00      	nop
 8001444:	200000b8 	.word	0x200000b8
 8001448:	0800684c 	.word	0x0800684c
 800144c:	08006854 	.word	0x08006854
 8001450:	080068a0 	.word	0x080068a0
 8001454:	080068b4 	.word	0x080068b4
 8001458:	080068fc 	.word	0x080068fc
 800145c:	08006900 	.word	0x08006900
 8001460:	08006908 	.word	0x08006908
 8001464:	08006938 	.word	0x08006938
 8001468:	0800694c 	.word	0x0800694c
 800146c:	0800695c 	.word	0x0800695c
 8001470:	08006980 	.word	0x08006980
 8001474:	08006998 	.word	0x08006998
 8001478:	080069a4 	.word	0x080069a4

0800147c <console_init>:
 * @brief Initialize console module instance.
 *
 * @return MOD_OK for success.
 */
mod_err_t console_init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
    memset(&console, 0, sizeof(console));
 8001482:	222c      	movs	r2, #44	; 0x2c
 8001484:	2100      	movs	r1, #0
 8001486:	4813      	ldr	r0, [pc, #76]	; (80014d4 <console_init+0x58>)
 8001488:	f005 f8f0 	bl	800666c <memset>
    LOGI(TAG, "Initialized console.");
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <console_init+0x5c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d01a      	beq.n	80014ca <console_init+0x4e>
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <console_init+0x60>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b02      	cmp	r3, #2
 800149a:	dd16      	ble.n	80014ca <console_init+0x4e>
 800149c:	f002 fcd0 	bl	8003e40 <HAL_GetTick>
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <console_init+0x64>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	0999      	lsrs	r1, r3, #6
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <console_init+0x64>)
 80014b0:	fba2 0203 	umull	r0, r2, r2, r3
 80014b4:	0992      	lsrs	r2, r2, #6
 80014b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ba:	fb00 f202 	mul.w	r2, r0, r2
 80014be:	1a9a      	subs	r2, r3, r2
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <console_init+0x68>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4808      	ldr	r0, [pc, #32]	; (80014e8 <console_init+0x6c>)
 80014c6:	f000 f91b 	bl	8001700 <log_printf>
    return MOD_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200000e0 	.word	0x200000e0
 80014d8:	20000054 	.word	0x20000054
 80014dc:	20000058 	.word	0x20000058
 80014e0:	10624dd3 	.word	0x10624dd3
 80014e4:	20000004 	.word	0x20000004
 80014e8:	080069b8 	.word	0x080069b8

080014ec <console_run>:


mod_err_t console_run(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
    char c;
    if (!console.first_run_done)
 80014f2:	4b50      	ldr	r3, [pc, #320]	; (8001634 <console_run+0x148>)
 80014f4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80014f8:	f083 0301 	eor.w	r3, r3, #1
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 808a 	beq.w	8001618 <console_run+0x12c>
    {
        console.first_run_done = true;
 8001504:	4b4b      	ldr	r3, [pc, #300]	; (8001634 <console_run+0x148>)
 8001506:	2201      	movs	r2, #1
 8001508:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        LOG(PROMPT);
 800150c:	484a      	ldr	r0, [pc, #296]	; (8001638 <console_run+0x14c>)
 800150e:	f000 f8f7 	bl	8001700 <log_printf>
    }

    /* Process all characters in UART's receive buffer. */
    while (uart_getc(&c))
 8001512:	e081      	b.n	8001618 <console_run+0x12c>
    {
        /* Execute command once Enter key is pressed. */
        if (c == '\n' || c == '\r')
 8001514:	78bb      	ldrb	r3, [r7, #2]
 8001516:	2b0a      	cmp	r3, #10
 8001518:	d002      	beq.n	8001520 <console_run+0x34>
 800151a:	78bb      	ldrb	r3, [r7, #2]
 800151c:	2b0d      	cmp	r3, #13
 800151e:	d112      	bne.n	8001546 <console_run+0x5a>
        {
            console.cmd_buf[console.num_cmd_buf_chars] = '\0'; // Signal end of command string.
 8001520:	4b44      	ldr	r3, [pc, #272]	; (8001634 <console_run+0x148>)
 8001522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001524:	461a      	mov	r2, r3
 8001526:	4b43      	ldr	r3, [pc, #268]	; (8001634 <console_run+0x148>)
 8001528:	2100      	movs	r1, #0
 800152a:	5499      	strb	r1, [r3, r2]
            LOG("\r\n");
 800152c:	4843      	ldr	r0, [pc, #268]	; (800163c <console_run+0x150>)
 800152e:	f000 f8e7 	bl	8001700 <log_printf>
            cmd_execute(console.cmd_buf); // Execute command's callback function.
 8001532:	4840      	ldr	r0, [pc, #256]	; (8001634 <console_run+0x148>)
 8001534:	f7ff fcc4 	bl	8000ec0 <cmd_execute>
            console.num_cmd_buf_chars = 0;
 8001538:	4b3e      	ldr	r3, [pc, #248]	; (8001634 <console_run+0x148>)
 800153a:	2200      	movs	r2, #0
 800153c:	851a      	strh	r2, [r3, #40]	; 0x28
            LOG(PROMPT);
 800153e:	483e      	ldr	r0, [pc, #248]	; (8001638 <console_run+0x14c>)
 8001540:	f000 f8de 	bl	8001700 <log_printf>
            continue;
 8001544:	e068      	b.n	8001618 <console_run+0x12c>
        }
        /* Delete a character when Backspace key is pressed. */
        if (c == '\b' || c == '\x7f')
 8001546:	78bb      	ldrb	r3, [r7, #2]
 8001548:	2b08      	cmp	r3, #8
 800154a:	d002      	beq.n	8001552 <console_run+0x66>
 800154c:	78bb      	ldrb	r3, [r7, #2]
 800154e:	2b7f      	cmp	r3, #127	; 0x7f
 8001550:	d10d      	bne.n	800156e <console_run+0x82>
        {
            if (console.num_cmd_buf_chars > 0)
 8001552:	4b38      	ldr	r3, [pc, #224]	; (8001634 <console_run+0x148>)
 8001554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001556:	2b00      	cmp	r3, #0
 8001558:	d05e      	beq.n	8001618 <console_run+0x12c>
            {
                LOG("\x7f");
 800155a:	4839      	ldr	r0, [pc, #228]	; (8001640 <console_run+0x154>)
 800155c:	f000 f8d0 	bl	8001700 <log_printf>
                console.num_cmd_buf_chars--; // "Overwrite" last character.
 8001560:	4b34      	ldr	r3, [pc, #208]	; (8001634 <console_run+0x148>)
 8001562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001564:	3b01      	subs	r3, #1
 8001566:	b29a      	uxth	r2, r3
 8001568:	4b32      	ldr	r3, [pc, #200]	; (8001634 <console_run+0x148>)
 800156a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            continue;
 800156c:	e054      	b.n	8001618 <console_run+0x12c>
        }
        /* Toggle logging on and off LOG_TOGGLE_CHAR key is pressed. */
        if (c == LOG_TOGGLE_CHAR)
 800156e:	78bb      	ldrb	r3, [r7, #2]
 8001570:	2b09      	cmp	r3, #9
 8001572:	d111      	bne.n	8001598 <console_run+0xac>
        {
            bool log_active = log_toggle();
 8001574:	f000 f8b2 	bl	80016dc <log_toggle>
 8001578:	4603      	mov	r3, r0
 800157a:	70fb      	strb	r3, [r7, #3]
            LOG("\r\n<Logging %s>\r\n", log_active ? "on" : "off");
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <console_run+0x9a>
 8001582:	4b30      	ldr	r3, [pc, #192]	; (8001644 <console_run+0x158>)
 8001584:	e000      	b.n	8001588 <console_run+0x9c>
 8001586:	4b30      	ldr	r3, [pc, #192]	; (8001648 <console_run+0x15c>)
 8001588:	4619      	mov	r1, r3
 800158a:	4830      	ldr	r0, [pc, #192]	; (800164c <console_run+0x160>)
 800158c:	f000 f8b8 	bl	8001700 <log_printf>
            LOG(PROMPT);
 8001590:	4829      	ldr	r0, [pc, #164]	; (8001638 <console_run+0x14c>)
 8001592:	f000 f8b5 	bl	8001700 <log_printf>
            continue;
 8001596:	e03f      	b.n	8001618 <console_run+0x12c>
        }
        /* Echo the character back. */
        if (isprint(c))
 8001598:	78bb      	ldrb	r3, [r7, #2]
 800159a:	3301      	adds	r3, #1
 800159c:	4a2c      	ldr	r2, [pc, #176]	; (8001650 <console_run+0x164>)
 800159e:	4413      	add	r3, r2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	f003 0397 	and.w	r3, r3, #151	; 0x97
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d036      	beq.n	8001618 <console_run+0x12c>
        {
            if (console.num_cmd_buf_chars < (CONSOLE_CMD_BUF_SIZE - 1))
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <console_run+0x148>)
 80015ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ae:	2b26      	cmp	r3, #38	; 0x26
 80015b0:	d80f      	bhi.n	80015d2 <console_run+0xe6>
            {
                console.cmd_buf[console.num_cmd_buf_chars++] = c;
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <console_run+0x148>)
 80015b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	b291      	uxth	r1, r2
 80015ba:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <console_run+0x148>)
 80015bc:	8511      	strh	r1, [r2, #40]	; 0x28
 80015be:	461a      	mov	r2, r3
 80015c0:	78b9      	ldrb	r1, [r7, #2]
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <console_run+0x148>)
 80015c4:	5499      	strb	r1, [r3, r2]
                LOG("%c", c);
 80015c6:	78bb      	ldrb	r3, [r7, #2]
 80015c8:	4619      	mov	r1, r3
 80015ca:	4822      	ldr	r0, [pc, #136]	; (8001654 <console_run+0x168>)
 80015cc:	f000 f898 	bl	8001700 <log_printf>
 80015d0:	e021      	b.n	8001616 <console_run+0x12a>
            }
            else
            {
                /* No space in buffer, so ring terminal bell. */
                LOGW(TAG, "No more space in command buffer.");
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <console_run+0x16c>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d01a      	beq.n	8001610 <console_run+0x124>
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <console_run+0x170>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	dd16      	ble.n	8001610 <console_run+0x124>
 80015e2:	f002 fc2d 	bl	8003e40 <HAL_GetTick>
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <console_run+0x174>)
 80015ec:	fba2 2303 	umull	r2, r3, r2, r3
 80015f0:	0999      	lsrs	r1, r3, #6
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <console_run+0x174>)
 80015f6:	fba2 0203 	umull	r0, r2, r2, r3
 80015fa:	0992      	lsrs	r2, r2, #6
 80015fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001600:	fb00 f202 	mul.w	r2, r0, r2
 8001604:	1a9a      	subs	r2, r3, r2
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <console_run+0x178>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4817      	ldr	r0, [pc, #92]	; (8001668 <console_run+0x17c>)
 800160c:	f000 f878 	bl	8001700 <log_printf>
                LOG("\a");
 8001610:	4816      	ldr	r0, [pc, #88]	; (800166c <console_run+0x180>)
 8001612:	f000 f875 	bl	8001700 <log_printf>
            }
            continue;
 8001616:	bf00      	nop
    while (uart_getc(&c))
 8001618:	1cbb      	adds	r3, r7, #2
 800161a:	4618      	mov	r0, r3
 800161c:	f002 fa2e 	bl	8003a7c <uart_getc>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	f47f af76 	bne.w	8001514 <console_run+0x28>
        }
    }

    return MOD_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200000e0 	.word	0x200000e0
 8001638:	080069e8 	.word	0x080069e8
 800163c:	080069f4 	.word	0x080069f4
 8001640:	08006a00 	.word	0x08006a00
 8001644:	08006a0c 	.word	0x08006a0c
 8001648:	08006a10 	.word	0x08006a10
 800164c:	08006a14 	.word	0x08006a14
 8001650:	08006de8 	.word	0x08006de8
 8001654:	08006a2c 	.word	0x08006a2c
 8001658:	20000054 	.word	0x20000054
 800165c:	20000058 	.word	0x20000058
 8001660:	10624dd3 	.word	0x10624dd3
 8001664:	20000004 	.word	0x20000004
 8001668:	08006a38 	.word	0x08006a38
 800166c:	08006a74 	.word	0x08006a74

08001670 <log_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t log_init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
	LOGI(TAG, "Initialized log module");
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <log_init+0x54>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01a      	beq.n	80016b4 <log_init+0x44>
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <log_init+0x58>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b02      	cmp	r3, #2
 8001684:	dd16      	ble.n	80016b4 <log_init+0x44>
 8001686:	f002 fbdb 	bl	8003e40 <HAL_GetTick>
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <log_init+0x5c>)
 8001690:	fba2 2303 	umull	r2, r3, r2, r3
 8001694:	0999      	lsrs	r1, r3, #6
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <log_init+0x5c>)
 800169a:	fba2 0203 	umull	r0, r2, r2, r3
 800169e:	0992      	lsrs	r2, r2, #6
 80016a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016a4:	fb00 f202 	mul.w	r2, r0, r2
 80016a8:	1a9a      	subs	r2, r3, r2
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <log_init+0x60>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4809      	ldr	r0, [pc, #36]	; (80016d4 <log_init+0x64>)
 80016b0:	f000 f826 	bl	8001700 <log_printf>
	return cmd_register(&log_client_info);
 80016b4:	4808      	ldr	r0, [pc, #32]	; (80016d8 <log_init+0x68>)
 80016b6:	f7ff fbd3 	bl	8000e60 <cmd_register>
 80016ba:	4603      	mov	r3, r0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000054 	.word	0x20000054
 80016c8:	20000058 	.word	0x20000058
 80016cc:	10624dd3 	.word	0x10624dd3
 80016d0:	20000050 	.word	0x20000050
 80016d4:	08006b88 	.word	0x08006b88
 80016d8:	20000038 	.word	0x20000038

080016dc <log_toggle>:

bool log_toggle(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
    _log_active = _log_active ? false : true;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <log_toggle+0x20>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	f083 0301 	eor.w	r3, r3, #1
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <log_toggle+0x20>)
 80016ec:	701a      	strb	r2, [r3, #0]
    return _log_active;
 80016ee:	4b03      	ldr	r3, [pc, #12]	; (80016fc <log_toggle+0x20>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	20000054 	.word	0x20000054

08001700 <log_printf>:
{
    return _log_active;
}

void log_printf(const char* fmt, ...)
{
 8001700:	b40f      	push	{r0, r1, r2, r3}
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	607b      	str	r3, [r7, #4]
    vprintf(fmt, args);
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	6938      	ldr	r0, [r7, #16]
 8001712:	f001 fee5 	bl	80034e0 <vprintf_>
    va_end(args);
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001720:	b004      	add	sp, #16
 8001722:	4770      	bx	lr

08001724 <log_level_str>:
 * @param level The log level as an integer.
 *
 * @return Log level as a string.
 */
static const char *log_level_str(int32_t level)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	return log_level_names[level];
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <log_level_str+0x1c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	20000008 	.word	0x20000008

08001744 <log_level_int>:
 * @param level_name The log level as a string.
 *
 * @return Log level as an int, or -1 on error.
 */
static int32_t log_level_int(const char *level_name)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
    for (uint8_t level = 0; level < ARRAY_SIZE(log_level_names); level++)
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e00f      	b.n	8001772 <log_level_int+0x2e>
    {
        if (strcasecmp(level_name, log_level_names[level]) == 0)
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <log_level_int+0x40>)
 8001756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175a:	4619      	mov	r1, r3
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f004 ff8d 	bl	800667c <strcasecmp>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <log_level_int+0x28>
        {
            return level;
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	e007      	b.n	800177c <log_level_int+0x38>
    for (uint8_t level = 0; level < ARRAY_SIZE(log_level_names); level++)
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	3301      	adds	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	2b05      	cmp	r3, #5
 8001776:	d9ec      	bls.n	8001752 <log_level_int+0xe>
        }
    }

    return -1; // Log level not found.
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000008 	.word	0x20000008

08001788 <cmd_log_get>:
 * @param argv Argument values.
 *
 * @return 0 if successful, 1 otherwise.
 */
uint32_t cmd_log_get(uint32_t argc, const char **argv)
{
 8001788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178a:	b087      	sub	sp, #28
 800178c:	af02      	add	r7, sp, #8
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
	LOGI(TAG, "Current log level: %s",  log_level_str(_global_log_level));
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <cmd_log_get+0x68>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d024      	beq.n	80017e4 <cmd_log_get+0x5c>
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <cmd_log_get+0x6c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	dd20      	ble.n	80017e4 <cmd_log_get+0x5c>
 80017a2:	f002 fb4d 	bl	8003e40 <HAL_GetTick>
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4a13      	ldr	r2, [pc, #76]	; (80017f8 <cmd_log_get+0x70>)
 80017ac:	fba2 2303 	umull	r2, r3, r2, r3
 80017b0:	099d      	lsrs	r5, r3, #6
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <cmd_log_get+0x70>)
 80017b6:	fba2 1203 	umull	r1, r2, r2, r3
 80017ba:	0994      	lsrs	r4, r2, #6
 80017bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017c0:	fb02 f204 	mul.w	r2, r2, r4
 80017c4:	1a9c      	subs	r4, r3, r2
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <cmd_log_get+0x74>)
 80017c8:	681e      	ldr	r6, [r3, #0]
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <cmd_log_get+0x6c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ffa8 	bl	8001724 <log_level_str>
 80017d4:	4603      	mov	r3, r0
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	4633      	mov	r3, r6
 80017da:	4622      	mov	r2, r4
 80017dc:	4629      	mov	r1, r5
 80017de:	4808      	ldr	r0, [pc, #32]	; (8001800 <cmd_log_get+0x78>)
 80017e0:	f7ff ff8e 	bl	8001700 <log_printf>
	return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000054 	.word	0x20000054
 80017f4:	20000058 	.word	0x20000058
 80017f8:	10624dd3 	.word	0x10624dd3
 80017fc:	20000050 	.word	0x20000050
 8001800:	08006bbc 	.word	0x08006bbc

08001804 <cmd_log_set>:
 * @param argv Argument values.
 *
 * @return 0 if successful, 1 otherwise.
 */
uint32_t cmd_log_set(uint32_t argc, const char **argv)
{
 8001804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af02      	add	r7, sp, #8
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
	if(argc != 1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d020      	beq.n	8001856 <cmd_log_set+0x52>
	{
        LOGW(TAG, "Missing log level argument");
 8001814:	4b40      	ldr	r3, [pc, #256]	; (8001918 <cmd_log_set+0x114>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d01a      	beq.n	8001852 <cmd_log_set+0x4e>
 800181c:	4b3f      	ldr	r3, [pc, #252]	; (800191c <cmd_log_set+0x118>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	dd16      	ble.n	8001852 <cmd_log_set+0x4e>
 8001824:	f002 fb0c 	bl	8003e40 <HAL_GetTick>
 8001828:	60b8      	str	r0, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	4a3c      	ldr	r2, [pc, #240]	; (8001920 <cmd_log_set+0x11c>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	0999      	lsrs	r1, r3, #6
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4a3a      	ldr	r2, [pc, #232]	; (8001920 <cmd_log_set+0x11c>)
 8001838:	fba2 0203 	umull	r0, r2, r2, r3
 800183c:	0992      	lsrs	r2, r2, #6
 800183e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001842:	fb00 f202 	mul.w	r2, r0, r2
 8001846:	1a9a      	subs	r2, r3, r2
 8001848:	4b36      	ldr	r3, [pc, #216]	; (8001924 <cmd_log_set+0x120>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4836      	ldr	r0, [pc, #216]	; (8001928 <cmd_log_set+0x124>)
 800184e:	f7ff ff57 	bl	8001700 <log_printf>
		return 1; // Should include only 1 argument.
 8001852:	2301      	movs	r3, #1
 8001854:	e05b      	b.n	800190e <cmd_log_set+0x10a>
	}
	else
	{
		int32_t new_log_level = log_level_int(argv[0]);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff72 	bl	8001744 <log_level_int>
 8001860:	6178      	str	r0, [r7, #20]
		if(new_log_level == -1)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d124      	bne.n	80018b4 <cmd_log_set+0xb0>
		{
			LOGW(TAG, "Log level (%s) not recognized", argv[0]);
 800186a:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <cmd_log_set+0x114>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d01e      	beq.n	80018b0 <cmd_log_set+0xac>
 8001872:	4b2a      	ldr	r3, [pc, #168]	; (800191c <cmd_log_set+0x118>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b01      	cmp	r3, #1
 8001878:	dd1a      	ble.n	80018b0 <cmd_log_set+0xac>
 800187a:	f002 fae1 	bl	8003e40 <HAL_GetTick>
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4a27      	ldr	r2, [pc, #156]	; (8001920 <cmd_log_set+0x11c>)
 8001884:	fba2 2303 	umull	r2, r3, r2, r3
 8001888:	0999      	lsrs	r1, r3, #6
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4a24      	ldr	r2, [pc, #144]	; (8001920 <cmd_log_set+0x11c>)
 800188e:	fba2 0203 	umull	r0, r2, r2, r3
 8001892:	0992      	lsrs	r2, r2, #6
 8001894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001898:	fb00 f202 	mul.w	r2, r0, r2
 800189c:	1a9a      	subs	r2, r3, r2
 800189e:	4b21      	ldr	r3, [pc, #132]	; (8001924 <cmd_log_set+0x120>)
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	4603      	mov	r3, r0
 80018aa:	4820      	ldr	r0, [pc, #128]	; (800192c <cmd_log_set+0x128>)
 80018ac:	f7ff ff28 	bl	8001700 <log_printf>
			return 1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e02c      	b.n	800190e <cmd_log_set+0x10a>
		}
		else
		{
			_global_log_level = new_log_level;
 80018b4:	4a19      	ldr	r2, [pc, #100]	; (800191c <cmd_log_set+0x118>)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	6013      	str	r3, [r2, #0]
			LOGI(TAG, "Global log level set to %s", log_level_str(_global_log_level));
 80018ba:	4b17      	ldr	r3, [pc, #92]	; (8001918 <cmd_log_set+0x114>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d024      	beq.n	800190c <cmd_log_set+0x108>
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <cmd_log_set+0x118>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	dd20      	ble.n	800190c <cmd_log_set+0x108>
 80018ca:	f002 fab9 	bl	8003e40 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4a13      	ldr	r2, [pc, #76]	; (8001920 <cmd_log_set+0x11c>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	099d      	lsrs	r5, r3, #6
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4a10      	ldr	r2, [pc, #64]	; (8001920 <cmd_log_set+0x11c>)
 80018de:	fba2 1203 	umull	r1, r2, r2, r3
 80018e2:	0994      	lsrs	r4, r2, #6
 80018e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018e8:	fb02 f204 	mul.w	r2, r2, r4
 80018ec:	1a9c      	subs	r4, r3, r2
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <cmd_log_set+0x120>)
 80018f0:	681e      	ldr	r6, [r3, #0]
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <cmd_log_set+0x118>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff14 	bl	8001724 <log_level_str>
 80018fc:	4603      	mov	r3, r0
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	4633      	mov	r3, r6
 8001902:	4622      	mov	r2, r4
 8001904:	4629      	mov	r1, r5
 8001906:	480a      	ldr	r0, [pc, #40]	; (8001930 <cmd_log_set+0x12c>)
 8001908:	f7ff fefa 	bl	8001700 <log_printf>
			return 0;
 800190c:	2300      	movs	r3, #0
		}
	}
}
 800190e:	4618      	mov	r0, r3
 8001910:	371c      	adds	r7, #28
 8001912:	46bd      	mov	sp, r7
 8001914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001916:	bf00      	nop
 8001918:	20000054 	.word	0x20000054
 800191c:	20000058 	.word	0x20000058
 8001920:	10624dd3 	.word	0x10624dd3
 8001924:	20000050 	.word	0x20000050
 8001928:	08006bf0 	.word	0x08006bf0
 800192c:	08006c28 	.word	0x08006c28
 8001930:	08006c64 	.word	0x08006c64

08001934 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f043 0201 	orr.w	r2, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	601a      	str	r2, [r3, #0]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	609a      	str	r2, [r3, #8]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 800198a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800198c:	4907      	ldr	r1, [pc, #28]	; (80019ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4313      	orrs	r3, r2
 8001992:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4013      	ands	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	40021000 	.word	0x40021000

080019b0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80019ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019bc:	4907      	ldr	r1, [pc, #28]	; (80019dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80019c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4013      	ands	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000

080019e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019e6:	f002 f9bb 	bl	8003d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ea:	f000 f821 	bl	8001a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ee:	f000 f8e5 	bl	8001bbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019f2:	f000 f893 	bl	8001b1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_config_t uart_cfg = {.uart_reg_base = USART2, .irq_num = USART2_IRQn};
 80019f6:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <main+0x4c>)
 80019f8:	463b      	mov	r3, r7
 80019fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019fe:	e883 0003 	stmia.w	r3, {r0, r1}
  uart_init(&uart_cfg);
 8001a02:	463b      	mov	r3, r7
 8001a04:	4618      	mov	r0, r3
 8001a06:	f001 ff27 	bl	8003858 <uart_init>
  console_init();
 8001a0a:	f7ff fd37 	bl	800147c <console_init>
  cmd_init();
 8001a0e:	f7ff f9f5 	bl	8000dfc <cmd_init>
  log_init();
 8001a12:	f7ff fe2d 	bl	8001670 <log_init>
  uart_start();
 8001a16:	f001 ff87 	bl	8003928 <uart_start>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2120      	movs	r1, #32
 8001a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a22:	f002 fca9 	bl	8004378 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  console_run();
 8001a26:	f7ff fd61 	bl	80014ec <console_run>
 8001a2a:	e7fc      	b.n	8001a26 <main+0x46>
 8001a2c:	08006c9c 	.word	0x08006c9c

08001a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b0b8      	sub	sp, #224	; 0xe0
 8001a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a3a:	2244      	movs	r2, #68	; 0x44
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f004 fe14 	bl	800666c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a44:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a54:	463b      	mov	r3, r7
 8001a56:	2288      	movs	r2, #136	; 0x88
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f004 fe06 	bl	800666c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a60:	2302      	movs	r3, #2
 8001a62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a6e:	2310      	movs	r3, #16
 8001a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a74:	2302      	movs	r3, #2
 8001a76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a86:	230a      	movs	r3, #10
 8001a88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a8c:	2307      	movs	r3, #7
 8001a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a92:	2302      	movs	r3, #2
 8001a94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 fce4 	bl	8004470 <HAL_RCC_OscConfig>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001aae:	f000 f8ed 	bl	8001c8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab2:	230f      	movs	r3, #15
 8001ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ad0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ad4:	2104      	movs	r1, #4
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 f8b0 	bl	8004c3c <HAL_RCC_ClockConfig>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001ae2:	f000 f8d3 	bl	8001c8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aee:	463b      	mov	r3, r7
 8001af0:	4618      	mov	r0, r3
 8001af2:	f003 fa71 	bl	8004fd8 <HAL_RCCEx_PeriphCLKConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001afc:	f000 f8c6 	bl	8001c8c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b00:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b04:	f002 fc5e 	bl	80043c4 <HAL_PWREx_ControlVoltageScaling>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001b0e:	f000 f8bd 	bl	8001c8c <Error_Handler>
  }
}
 8001b12:	bf00      	nop
 8001b14:	37e0      	adds	r7, #224	; 0xe0
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08e      	sub	sp, #56	; 0x38
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
 8001b44:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001b46:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b4a:	f7ff ff31 	bl	80019b0 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f7ff ff16 	bl	8001980 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001b54:	230c      	movs	r3, #12
 8001b56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001b68:	2307      	movs	r3, #7
 8001b6a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b74:	f004 f837 	bl	8005be6 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001b78:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b7c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b8a:	230c      	movs	r3, #12
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001b92:	2300      	movs	r3, #0
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <MX_USART2_UART_Init+0x9c>)
 8001b9e:	f004 fcc5 	bl	800652c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_USART2_UART_Init+0x9c>)
 8001ba4:	f7ff fed6 	bl	8001954 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <MX_USART2_UART_Init+0x9c>)
 8001baa:	f7ff fec3 	bl	8001934 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	3738      	adds	r7, #56	; 0x38
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40004400 	.word	0x40004400

08001bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <MX_GPIO_Init+0xc4>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	4a2a      	ldr	r2, [pc, #168]	; (8001c80 <MX_GPIO_Init+0xc4>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <MX_GPIO_Init+0xc4>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bea:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <MX_GPIO_Init+0xc4>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bee:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <MX_GPIO_Init+0xc4>)
 8001bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf6:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <MX_GPIO_Init+0xc4>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <MX_GPIO_Init+0xc4>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	4a1e      	ldr	r2, [pc, #120]	; (8001c80 <MX_GPIO_Init+0xc4>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <MX_GPIO_Init+0xc4>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <MX_GPIO_Init+0xc4>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <MX_GPIO_Init+0xc4>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <MX_GPIO_Init+0xc4>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2120      	movs	r1, #32
 8001c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3a:	f002 fb9d 	bl	8004378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <MX_GPIO_Init+0xc8>)
 8001c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	480d      	ldr	r0, [pc, #52]	; (8001c88 <MX_GPIO_Init+0xcc>)
 8001c54:	f002 f9e6 	bl	8004024 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c58:	2320      	movs	r3, #32
 8001c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c72:	f002 f9d7 	bl	8004024 <HAL_GPIO_Init>

}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000
 8001c84:	10210000 	.word	0x10210000
 8001c88:	48000800 	.word	0x48000800

08001c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <Error_Handler+0x8>

08001c96 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b085      	sub	sp, #20
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <_out_char+0x1e>
    uart_putc(character);
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 fe86 	bl	80039dc <uart_putc>
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	e002      	b.n	8001cee <_strnlen_s+0x16>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3301      	adds	r3, #1
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <_strnlen_s+0x28>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	1e5a      	subs	r2, r3, #1
 8001cfa:	603a      	str	r2, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f3      	bne.n	8001ce8 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	1ad3      	subs	r3, r2, r3
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	2b2f      	cmp	r3, #47	; 0x2f
 8001d20:	d904      	bls.n	8001d2c <_is_digit+0x1a>
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	2b39      	cmp	r3, #57	; 0x39
 8001d26:	d801      	bhi.n	8001d2c <_is_digit+0x1a>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <_is_digit+0x1c>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	b2db      	uxtb	r3, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001d4c:	e00e      	b.n	8001d6c <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4618      	mov	r0, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	1c59      	adds	r1, r3, #1
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6011      	str	r1, [r2, #0]
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	4403      	add	r3, r0
 8001d68:	3b30      	subs	r3, #48	; 0x30
 8001d6a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ffcd 	bl	8001d12 <_is_digit>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1e7      	bne.n	8001d4e <_atoi+0xe>
  }
  return i;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d125      	bne.n	8001df0 <_out_rev+0x68>
 8001da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d120      	bne.n	8001df0 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8001dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	e00a      	b.n	8001dca <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	1c53      	adds	r3, r2, #1
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	68fc      	ldr	r4, [r7, #12]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	2020      	movs	r0, #32
 8001dc2:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d3f0      	bcc.n	8001db4 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8001dd2:	e00d      	b.n	8001df0 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8001dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dde:	4413      	add	r3, r2
 8001de0:	7818      	ldrb	r0, [r3, #0]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	1c53      	adds	r3, r2, #1
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	68fc      	ldr	r4, [r7, #12]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	47a0      	blx	r4
  while (len) {
 8001df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ee      	bne.n	8001dd4 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00e      	beq.n	8001e1e <_out_rev+0x96>
    while (idx - start_idx < width) {
 8001e00:	e007      	b.n	8001e12 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	1c53      	adds	r3, r2, #1
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	68fc      	ldr	r4, [r7, #12]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	2020      	movs	r0, #32
 8001e10:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d8f1      	bhi.n	8001e02 <_out_rev+0x7a>
    }
  }

  return idx;
 8001e1e:	687b      	ldr	r3, [r7, #4]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd90      	pop	{r4, r7, pc}

08001e28 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af04      	add	r7, sp, #16
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d136      	bne.n	8001eae <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d018      	beq.n	8001e78 <_ntoa_format+0x50>
 8001e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d013      	beq.n	8001e78 <_ntoa_format+0x50>
 8001e50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d104      	bne.n	8001e62 <_ntoa_format+0x3a>
 8001e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <_ntoa_format+0x50>
      width--;
 8001e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e64:	3b01      	subs	r3, #1
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001e68:	e006      	b.n	8001e78 <_ntoa_format+0x50>
      buf[len++] = '0';
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	61fa      	str	r2, [r7, #28]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4413      	add	r3, r2
 8001e74:	2230      	movs	r2, #48	; 0x30
 8001e76:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d20a      	bcs.n	8001e96 <_ntoa_format+0x6e>
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b1f      	cmp	r3, #31
 8001e84:	d9f1      	bls.n	8001e6a <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001e86:	e006      	b.n	8001e96 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	61fa      	str	r2, [r7, #28]
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4413      	add	r3, r2
 8001e92:	2230      	movs	r2, #48	; 0x30
 8001e94:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <_ntoa_format+0x86>
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d202      	bcs.n	8001eae <_ntoa_format+0x86>
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	2b1f      	cmp	r3, #31
 8001eac:	d9ec      	bls.n	8001e88 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8001eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d058      	beq.n	8001f6a <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8001eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d116      	bne.n	8001ef0 <_ntoa_format+0xc8>
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <_ntoa_format+0xc8>
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d003      	beq.n	8001ed8 <_ntoa_format+0xb0>
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d10b      	bne.n	8001ef0 <_ntoa_format+0xc8>
      len--;
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <_ntoa_format+0xc8>
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	2b10      	cmp	r3, #16
 8001ee8:	d102      	bne.n	8001ef0 <_ntoa_format+0xc8>
        len--;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	d10f      	bne.n	8001f16 <_ntoa_format+0xee>
 8001ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef8:	f003 0320 	and.w	r3, r3, #32
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10a      	bne.n	8001f16 <_ntoa_format+0xee>
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	2b1f      	cmp	r3, #31
 8001f04:	d807      	bhi.n	8001f16 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	61fa      	str	r2, [r7, #28]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4413      	add	r3, r2
 8001f10:	2278      	movs	r2, #120	; 0x78
 8001f12:	701a      	strb	r2, [r3, #0]
 8001f14:	e01f      	b.n	8001f56 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	2b10      	cmp	r3, #16
 8001f1a:	d10f      	bne.n	8001f3c <_ntoa_format+0x114>
 8001f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1e:	f003 0320 	and.w	r3, r3, #32
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <_ntoa_format+0x114>
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	2b1f      	cmp	r3, #31
 8001f2a:	d807      	bhi.n	8001f3c <_ntoa_format+0x114>
      buf[len++] = 'X';
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	61fa      	str	r2, [r7, #28]
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4413      	add	r3, r2
 8001f36:	2258      	movs	r2, #88	; 0x58
 8001f38:	701a      	strb	r2, [r3, #0]
 8001f3a:	e00c      	b.n	8001f56 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d109      	bne.n	8001f56 <_ntoa_format+0x12e>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	2b1f      	cmp	r3, #31
 8001f46:	d806      	bhi.n	8001f56 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	61fa      	str	r2, [r7, #28]
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4413      	add	r3, r2
 8001f52:	2262      	movs	r2, #98	; 0x62
 8001f54:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	2b1f      	cmp	r3, #31
 8001f5a:	d806      	bhi.n	8001f6a <_ntoa_format+0x142>
      buf[len++] = '0';
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	61fa      	str	r2, [r7, #28]
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4413      	add	r3, r2
 8001f66:	2230      	movs	r2, #48	; 0x30
 8001f68:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	2b1f      	cmp	r3, #31
 8001f6e:	d824      	bhi.n	8001fba <_ntoa_format+0x192>
    if (negative) {
 8001f70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d007      	beq.n	8001f88 <_ntoa_format+0x160>
      buf[len++] = '-';
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	61fa      	str	r2, [r7, #28]
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4413      	add	r3, r2
 8001f82:	222d      	movs	r2, #45	; 0x2d
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e018      	b.n	8001fba <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	61fa      	str	r2, [r7, #28]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	222b      	movs	r2, #43	; 0x2b
 8001f9e:	701a      	strb	r2, [r3, #0]
 8001fa0:	e00b      	b.n	8001fba <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8001fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <_ntoa_format+0x192>
      buf[len++] = ' ';
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	61fa      	str	r2, [r7, #28]
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbc:	9303      	str	r3, [sp, #12]
 8001fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc0:	9302      	str	r3, [sp, #8]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68b9      	ldr	r1, [r7, #8]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f7ff fed9 	bl	8001d88 <_out_rev>
 8001fd6:	4603      	mov	r3, r0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b096      	sub	sp, #88	; 0x58
 8001fe4:	af08      	add	r7, sp, #32
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d103      	bne.n	8002000 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffa:	f023 0310 	bic.w	r3, r3, #16
 8001ffe:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <_ntoa_long+0x30>
 800200a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800200c:	2b00      	cmp	r3, #0
 800200e:	d033      	beq.n	8002078 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8002010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002014:	fbb3 f2f2 	udiv	r2, r3, r2
 8002018:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800201a:	fb01 f202 	mul.w	r2, r1, r2
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002024:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002028:	2b09      	cmp	r3, #9
 800202a:	d804      	bhi.n	8002036 <_ntoa_long+0x56>
 800202c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002030:	3330      	adds	r3, #48	; 0x30
 8002032:	b2da      	uxtb	r2, r3
 8002034:	e00d      	b.n	8002052 <_ntoa_long+0x72>
 8002036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002038:	f003 0320 	and.w	r3, r3, #32
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <_ntoa_long+0x64>
 8002040:	2241      	movs	r2, #65	; 0x41
 8002042:	e000      	b.n	8002046 <_ntoa_long+0x66>
 8002044:	2261      	movs	r2, #97	; 0x61
 8002046:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800204a:	4413      	add	r3, r2
 800204c:	b2db      	uxtb	r3, r3
 800204e:	3b0a      	subs	r3, #10
 8002050:	b2da      	uxtb	r2, r3
 8002052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002054:	1c59      	adds	r1, r3, #1
 8002056:	6379      	str	r1, [r7, #52]	; 0x34
 8002058:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800205c:	440b      	add	r3, r1
 800205e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800206c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <_ntoa_long+0x98>
 8002072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002074:	2b1f      	cmp	r3, #31
 8002076:	d9cb      	bls.n	8002010 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207a:	9306      	str	r3, [sp, #24]
 800207c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800207e:	9305      	str	r3, [sp, #20]
 8002080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002082:	9304      	str	r3, [sp, #16]
 8002084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002086:	9303      	str	r3, [sp, #12]
 8002088:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800208c:	9302      	str	r3, [sp, #8]
 800208e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	f107 0310 	add.w	r3, r7, #16
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f7ff fec2 	bl	8001e28 <_ntoa_format>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3738      	adds	r7, #56	; 0x38
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b096      	sub	sp, #88	; 0x58
 80020b2:	af08      	add	r7, sp, #32
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80020c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020c4:	4313      	orrs	r3, r2
 80020c6:	d103      	bne.n	80020d0 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80020c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020ca:	f023 0310 	bic.w	r3, r3, #16
 80020ce:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80020d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <_ntoa_long_long+0x34>
 80020da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020de:	4313      	orrs	r3, r2
 80020e0:	d038      	beq.n	8002154 <_ntoa_long_long+0xa6>
    do {
      const char digit = (char)(value % base);
 80020e2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80020e6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80020ea:	f7fe fd0b 	bl	8000b04 <__aeabi_uldivmod>
 80020ee:	4613      	mov	r3, r2
 80020f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80020f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020f8:	2b09      	cmp	r3, #9
 80020fa:	d804      	bhi.n	8002106 <_ntoa_long_long+0x58>
 80020fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002100:	3330      	adds	r3, #48	; 0x30
 8002102:	b2da      	uxtb	r2, r3
 8002104:	e00d      	b.n	8002122 <_ntoa_long_long+0x74>
 8002106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <_ntoa_long_long+0x66>
 8002110:	2241      	movs	r2, #65	; 0x41
 8002112:	e000      	b.n	8002116 <_ntoa_long_long+0x68>
 8002114:	2261      	movs	r2, #97	; 0x61
 8002116:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800211a:	4413      	add	r3, r2
 800211c:	b2db      	uxtb	r3, r3
 800211e:	3b0a      	subs	r3, #10
 8002120:	b2da      	uxtb	r2, r3
 8002122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002124:	1c59      	adds	r1, r3, #1
 8002126:	6379      	str	r1, [r7, #52]	; 0x34
 8002128:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800212c:	440b      	add	r3, r1
 800212e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002132:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002136:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800213a:	f7fe fce3 	bl	8000b04 <__aeabi_uldivmod>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002146:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800214a:	4313      	orrs	r3, r2
 800214c:	d002      	beq.n	8002154 <_ntoa_long_long+0xa6>
 800214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002150:	2b1f      	cmp	r3, #31
 8002152:	d9c6      	bls.n	80020e2 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002156:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002158:	9206      	str	r2, [sp, #24]
 800215a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800215c:	9205      	str	r2, [sp, #20]
 800215e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002160:	9204      	str	r2, [sp, #16]
 8002162:	9303      	str	r3, [sp, #12]
 8002164:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002168:	9302      	str	r3, [sp, #8]
 800216a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	f107 0310 	add.w	r3, r7, #16
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f7ff fe54 	bl	8001e28 <_ntoa_format>
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3738      	adds	r7, #56	; 0x38
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	0000      	movs	r0, r0
 800218c:	0000      	movs	r0, r0
	...

08002190 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b09d      	sub	sp, #116	; 0x74
 8002194:	af04      	add	r7, sp, #16
 8002196:	6178      	str	r0, [r7, #20]
 8002198:	6139      	str	r1, [r7, #16]
 800219a:	60fa      	str	r2, [r7, #12]
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80021b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021ba:	f7fe fc29 	bl	8000a10 <__aeabi_dcmpeq>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10f      	bne.n	80021e4 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80021c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021c6:	9303      	str	r3, [sp, #12]
 80021c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ca:	9302      	str	r3, [sp, #8]
 80021cc:	2303      	movs	r3, #3
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	4ba9      	ldr	r3, [pc, #676]	; (8002478 <_ftoa+0x2e8>)
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	6939      	ldr	r1, [r7, #16]
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f7ff fdd4 	bl	8001d88 <_out_rev>
 80021e0:	4603      	mov	r3, r0
 80021e2:	e22b      	b.n	800263c <_ftoa+0x4ac>
  if (value < -DBL_MAX)
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80021ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021f0:	f7fe fc18 	bl	8000a24 <__aeabi_dcmplt>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00f      	beq.n	800221a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80021fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021fc:	9303      	str	r3, [sp, #12]
 80021fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002200:	9302      	str	r3, [sp, #8]
 8002202:	2304      	movs	r3, #4
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	4b9d      	ldr	r3, [pc, #628]	; (800247c <_ftoa+0x2ec>)
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	6939      	ldr	r1, [r7, #16]
 8002210:	6978      	ldr	r0, [r7, #20]
 8002212:	f7ff fdb9 	bl	8001d88 <_out_rev>
 8002216:	4603      	mov	r3, r0
 8002218:	e210      	b.n	800263c <_ftoa+0x4ac>
  if (value > DBL_MAX)
 800221a:	f04f 32ff 	mov.w	r2, #4294967295
 800221e:	4b98      	ldr	r3, [pc, #608]	; (8002480 <_ftoa+0x2f0>)
 8002220:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002224:	f7fe fc1c 	bl	8000a60 <__aeabi_dcmpgt>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d01d      	beq.n	800226a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800222e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <_ftoa+0xac>
 8002238:	4b92      	ldr	r3, [pc, #584]	; (8002484 <_ftoa+0x2f4>)
 800223a:	e000      	b.n	800223e <_ftoa+0xae>
 800223c:	4b92      	ldr	r3, [pc, #584]	; (8002488 <_ftoa+0x2f8>)
 800223e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002240:	f002 0204 	and.w	r2, r2, #4
 8002244:	2a00      	cmp	r2, #0
 8002246:	d001      	beq.n	800224c <_ftoa+0xbc>
 8002248:	2204      	movs	r2, #4
 800224a:	e000      	b.n	800224e <_ftoa+0xbe>
 800224c:	2203      	movs	r2, #3
 800224e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002250:	9103      	str	r1, [sp, #12]
 8002252:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002254:	9102      	str	r1, [sp, #8]
 8002256:	9201      	str	r2, [sp, #4]
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	6939      	ldr	r1, [r7, #16]
 8002260:	6978      	ldr	r0, [r7, #20]
 8002262:	f7ff fd91 	bl	8001d88 <_out_rev>
 8002266:	4603      	mov	r3, r0
 8002268:	e1e8      	b.n	800263c <_ftoa+0x4ac>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800226a:	a37f      	add	r3, pc, #508	; (adr r3, 8002468 <_ftoa+0x2d8>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002274:	f7fe fbf4 	bl	8000a60 <__aeabi_dcmpgt>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <_ftoa+0x102>
 800227e:	a37c      	add	r3, pc, #496	; (adr r3, 8002470 <_ftoa+0x2e0>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002288:	f7fe fbcc 	bl	8000a24 <__aeabi_dcmplt>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00f      	beq.n	80022b2 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002294:	9302      	str	r3, [sp, #8]
 8002296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	ed97 0b00 	vldr	d0, [r7]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	6939      	ldr	r1, [r7, #16]
 80022a8:	6978      	ldr	r0, [r7, #20]
 80022aa:	f000 f9d1 	bl	8002650 <_etoa>
 80022ae:	4603      	mov	r3, r0
 80022b0:	e1c4      	b.n	800263c <_ftoa+0x4ac>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022c4:	f7fe fbae 	bl	8000a24 <__aeabi_dcmplt>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00e      	beq.n	80022ec <_ftoa+0x15c>
    negative = true;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 80022d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022d8:	f04f 0000 	mov.w	r0, #0
 80022dc:	f04f 0100 	mov.w	r1, #0
 80022e0:	f7fd ff76 	bl	80001d0 <__aeabi_dsub>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80022ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10e      	bne.n	8002314 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80022f6:	2306      	movs	r3, #6
 80022f8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80022fa:	e00b      	b.n	8002314 <_ftoa+0x184>
    buf[len++] = '0';
 80022fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002302:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002306:	4413      	add	r3, r2
 8002308:	2230      	movs	r2, #48	; 0x30
 800230a:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800230e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002310:	3b01      	subs	r3, #1
 8002312:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002316:	2b1f      	cmp	r3, #31
 8002318:	d802      	bhi.n	8002320 <_ftoa+0x190>
 800231a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800231c:	2b09      	cmp	r3, #9
 800231e:	d8ed      	bhi.n	80022fc <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002320:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002324:	f7fe fba6 	bl	8000a74 <__aeabi_d2iz>
 8002328:	4603      	mov	r3, r0
 800232a:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800232c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800232e:	f7fe f89d 	bl	800046c <__aeabi_i2d>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	e9d7 0100 	ldrd	r0, r1, [r7]
 800233a:	f7fd ff49 	bl	80001d0 <__aeabi_dsub>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	4a51      	ldr	r2, [pc, #324]	; (800248c <_ftoa+0x2fc>)
 8002348:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4413      	add	r3, r2
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	f7fe f8f5 	bl	8000540 <__aeabi_dmul>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800235e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002362:	f7fe fbaf 	bl	8000ac4 <__aeabi_d2uiz>
 8002366:	4603      	mov	r3, r0
 8002368:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800236a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800236c:	f7fe f86e 	bl	800044c <__aeabi_ui2d>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002378:	f7fd ff2a 	bl	80001d0 <__aeabi_dsub>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	4b41      	ldr	r3, [pc, #260]	; (8002490 <_ftoa+0x300>)
 800238a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800238e:	f7fe fb67 	bl	8000a60 <__aeabi_dcmpgt>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d016      	beq.n	80023c6 <_ftoa+0x236>
    ++frac;
 8002398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800239a:	3301      	adds	r3, #1
 800239c:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800239e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80023a0:	f7fe f854 	bl	800044c <__aeabi_ui2d>
 80023a4:	4a39      	ldr	r2, [pc, #228]	; (800248c <_ftoa+0x2fc>)
 80023a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f7fe fb4c 	bl	8000a4c <__aeabi_dcmpge>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01a      	beq.n	80023f0 <_ftoa+0x260>
      frac = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80023be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c0:	3301      	adds	r3, #1
 80023c2:	657b      	str	r3, [r7, #84]	; 0x54
 80023c4:	e014      	b.n	80023f0 <_ftoa+0x260>
    }
  }
  else if (diff < 0.5) {
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	4b31      	ldr	r3, [pc, #196]	; (8002490 <_ftoa+0x300>)
 80023cc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80023d0:	f7fe fb28 	bl	8000a24 <__aeabi_dcmplt>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10a      	bne.n	80023f0 <_ftoa+0x260>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80023da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d004      	beq.n	80023ea <_ftoa+0x25a>
 80023e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <_ftoa+0x260>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80023ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ec:	3301      	adds	r3, #1
 80023ee:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 80023f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d134      	bne.n	8002460 <_ftoa+0x2d0>
    diff = value - (double)whole;
 80023f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80023f8:	f7fe f838 	bl	800046c <__aeabi_i2d>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002404:	f7fd fee4 	bl	80001d0 <__aeabi_dsub>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002410:	2301      	movs	r3, #1
 8002412:	461c      	mov	r4, r3
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <_ftoa+0x300>)
 800241a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800241e:	f7fe fb01 	bl	8000a24 <__aeabi_dcmplt>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <_ftoa+0x29c>
 8002428:	2300      	movs	r3, #0
 800242a:	461c      	mov	r4, r3
 800242c:	b2e3      	uxtb	r3, r4
 800242e:	f083 0301 	eor.w	r3, r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d109      	bne.n	800244c <_ftoa+0x2bc>
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <_ftoa+0x300>)
 800243e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002442:	f7fe fb0d 	bl	8000a60 <__aeabi_dcmpgt>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d067      	beq.n	800251c <_ftoa+0x38c>
 800244c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 8085 	beq.w	8002562 <_ftoa+0x3d2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800245a:	3301      	adds	r3, #1
 800245c:	657b      	str	r3, [r7, #84]	; 0x54
 800245e:	e080      	b.n	8002562 <_ftoa+0x3d2>
    }
  }
  else {
    unsigned int count = prec;
 8002460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002462:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002464:	e037      	b.n	80024d6 <_ftoa+0x346>
 8002466:	bf00      	nop
 8002468:	00000000 	.word	0x00000000
 800246c:	41cdcd65 	.word	0x41cdcd65
 8002470:	00000000 	.word	0x00000000
 8002474:	c1cdcd65 	.word	0xc1cdcd65
 8002478:	08006ca4 	.word	0x08006ca4
 800247c:	08006ca8 	.word	0x08006ca8
 8002480:	7fefffff 	.word	0x7fefffff
 8002484:	08006cb0 	.word	0x08006cb0
 8002488:	08006cb8 	.word	0x08006cb8
 800248c:	08006d50 	.word	0x08006d50
 8002490:	3fe00000 	.word	0x3fe00000
      --count;
 8002494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002496:	3b01      	subs	r3, #1
 8002498:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800249a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800249c:	4b69      	ldr	r3, [pc, #420]	; (8002644 <_ftoa+0x4b4>)
 800249e:	fba3 2301 	umull	r2, r3, r3, r1
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	1aca      	subs	r2, r1, r3
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b2:	1c59      	adds	r1, r3, #1
 80024b4:	65f9      	str	r1, [r7, #92]	; 0x5c
 80024b6:	3230      	adds	r2, #48	; 0x30
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80024be:	440b      	add	r3, r1
 80024c0:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80024c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024c6:	4a5f      	ldr	r2, [pc, #380]	; (8002644 <_ftoa+0x4b4>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	08db      	lsrs	r3, r3, #3
 80024ce:	653b      	str	r3, [r7, #80]	; 0x50
 80024d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <_ftoa+0x34e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80024d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024d8:	2b1f      	cmp	r3, #31
 80024da:	d9db      	bls.n	8002494 <_ftoa+0x304>
 80024dc:	e00a      	b.n	80024f4 <_ftoa+0x364>
        break;
 80024de:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80024e0:	e008      	b.n	80024f4 <_ftoa+0x364>
      buf[len++] = '0';
 80024e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80024e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80024ec:	4413      	add	r3, r2
 80024ee:	2230      	movs	r2, #48	; 0x30
 80024f0:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80024f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f6:	2b1f      	cmp	r3, #31
 80024f8:	d804      	bhi.n	8002504 <_ftoa+0x374>
 80024fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fc:	1e5a      	subs	r2, r3, #1
 80024fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ee      	bne.n	80024e2 <_ftoa+0x352>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002506:	2b1f      	cmp	r3, #31
 8002508:	d82b      	bhi.n	8002562 <_ftoa+0x3d2>
      // add decimal
      buf[len++] = '.';
 800250a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002510:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002514:	4413      	add	r3, r2
 8002516:	222e      	movs	r2, #46	; 0x2e
 8002518:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800251c:	e021      	b.n	8002562 <_ftoa+0x3d2>
    buf[len++] = (char)(48 + (whole % 10));
 800251e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002520:	4b49      	ldr	r3, [pc, #292]	; (8002648 <_ftoa+0x4b8>)
 8002522:	fb83 1302 	smull	r1, r3, r3, r2
 8002526:	1099      	asrs	r1, r3, #2
 8002528:	17d3      	asrs	r3, r2, #31
 800252a:	1ac9      	subs	r1, r1, r3
 800252c:	460b      	mov	r3, r1
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	1ad1      	subs	r1, r2, r3
 8002536:	b2ca      	uxtb	r2, r1
 8002538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800253a:	1c59      	adds	r1, r3, #1
 800253c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800253e:	3230      	adds	r2, #48	; 0x30
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002546:	440b      	add	r3, r1
 8002548:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800254c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254e:	4a3e      	ldr	r2, [pc, #248]	; (8002648 <_ftoa+0x4b8>)
 8002550:	fb82 1203 	smull	r1, r2, r2, r3
 8002554:	1092      	asrs	r2, r2, #2
 8002556:	17db      	asrs	r3, r3, #31
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	657b      	str	r3, [r7, #84]	; 0x54
 800255c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <_ftoa+0x3da>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002564:	2b1f      	cmp	r3, #31
 8002566:	d9da      	bls.n	800251e <_ftoa+0x38e>
 8002568:	e000      	b.n	800256c <_ftoa+0x3dc>
      break;
 800256a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800256c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d124      	bne.n	80025c0 <_ftoa+0x430>
 8002576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01f      	beq.n	80025c0 <_ftoa+0x430>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002582:	2b00      	cmp	r3, #0
 8002584:	d015      	beq.n	80025b2 <_ftoa+0x422>
 8002586:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800258a:	2b00      	cmp	r3, #0
 800258c:	d104      	bne.n	8002598 <_ftoa+0x408>
 800258e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00c      	beq.n	80025b2 <_ftoa+0x422>
      width--;
 8002598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800259a:	3b01      	subs	r3, #1
 800259c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800259e:	e008      	b.n	80025b2 <_ftoa+0x422>
      buf[len++] = '0';
 80025a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80025a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025aa:	4413      	add	r3, r2
 80025ac:	2230      	movs	r2, #48	; 0x30
 80025ae:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80025b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80025b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d202      	bcs.n	80025c0 <_ftoa+0x430>
 80025ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025bc:	2b1f      	cmp	r3, #31
 80025be:	d9ef      	bls.n	80025a0 <_ftoa+0x410>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80025c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025c2:	2b1f      	cmp	r3, #31
 80025c4:	d82a      	bhi.n	800261c <_ftoa+0x48c>
    if (negative) {
 80025c6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <_ftoa+0x452>
      buf[len++] = '-';
 80025ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80025d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025d8:	4413      	add	r3, r2
 80025da:	222d      	movs	r2, #45	; 0x2d
 80025dc:	f803 2c48 	strb.w	r2, [r3, #-72]
 80025e0:	e01c      	b.n	800261c <_ftoa+0x48c>
    }
    else if (flags & FLAGS_PLUS) {
 80025e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d009      	beq.n	8002600 <_ftoa+0x470>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80025ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80025f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025f6:	4413      	add	r3, r2
 80025f8:	222b      	movs	r2, #43	; 0x2b
 80025fa:	f803 2c48 	strb.w	r2, [r3, #-72]
 80025fe:	e00d      	b.n	800261c <_ftoa+0x48c>
    }
    else if (flags & FLAGS_SPACE) {
 8002600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <_ftoa+0x48c>
      buf[len++] = ' ';
 800260a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002610:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002614:	4413      	add	r3, r2
 8002616:	2220      	movs	r2, #32
 8002618:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800261c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800261e:	9303      	str	r3, [sp, #12]
 8002620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002622:	9302      	str	r3, [sp, #8]
 8002624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	f107 0318 	add.w	r3, r7, #24
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	6939      	ldr	r1, [r7, #16]
 8002634:	6978      	ldr	r0, [r7, #20]
 8002636:	f7ff fba7 	bl	8001d88 <_out_rev>
 800263a:	4603      	mov	r3, r0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3764      	adds	r7, #100	; 0x64
 8002640:	46bd      	mov	sp, r7
 8002642:	bd90      	pop	{r4, r7, pc}
 8002644:	cccccccd 	.word	0xcccccccd
 8002648:	66666667 	.word	0x66666667
 800264c:	00000000 	.word	0x00000000

08002650 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002654:	b09d      	sub	sp, #116	; 0x74
 8002656:	af06      	add	r7, sp, #24
 8002658:	61f8      	str	r0, [r7, #28]
 800265a:	61b9      	str	r1, [r7, #24]
 800265c:	617a      	str	r2, [r7, #20]
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002664:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002668:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800266c:	f7fe f9d0 	bl	8000a10 <__aeabi_dcmpeq>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d014      	beq.n	80026a0 <_etoa+0x50>
 8002676:	f04f 32ff 	mov.w	r2, #4294967295
 800267a:	4bc3      	ldr	r3, [pc, #780]	; (8002988 <_etoa+0x338>)
 800267c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002680:	f7fe f9ee 	bl	8000a60 <__aeabi_dcmpgt>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10a      	bne.n	80026a0 <_etoa+0x50>
 800268a:	f04f 32ff 	mov.w	r2, #4294967295
 800268e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002692:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002696:	f7fe f9c5 	bl	8000a24 <__aeabi_dcmplt>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d012      	beq.n	80026c6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80026a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026a4:	9302      	str	r3, [sp, #8]
 80026a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	ed97 0b02 	vldr	d0, [r7, #8]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	69b9      	ldr	r1, [r7, #24]
 80026bc:	69f8      	ldr	r0, [r7, #28]
 80026be:	f7ff fd67 	bl	8002190 <_ftoa>
 80026c2:	4603      	mov	r3, r0
 80026c4:	e245      	b.n	8002b52 <_etoa+0x502>
  }

  // determine the sign
  const bool negative = value < 0;
 80026c6:	2301      	movs	r3, #1
 80026c8:	461e      	mov	r6, r3
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026d6:	f7fe f9a5 	bl	8000a24 <__aeabi_dcmplt>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <_etoa+0x94>
 80026e0:	2300      	movs	r3, #0
 80026e2:	461e      	mov	r6, r3
 80026e4:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 80026e8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <_etoa+0xac>
    value = -value;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80026fa:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80026fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002708:	2306      	movs	r3, #6
 800270a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800270e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002712:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002716:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	0d0a      	lsrs	r2, r1, #20
 8002724:	2300      	movs	r3, #0
 8002726:	4613      	mov	r3, r2
 8002728:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800272c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002730:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002732:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002736:	f04f 30ff 	mov.w	r0, #4294967295
 800273a:	4994      	ldr	r1, [pc, #592]	; (800298c <_etoa+0x33c>)
 800273c:	ea02 0400 	and.w	r4, r2, r0
 8002740:	ea03 0501 	and.w	r5, r3, r1
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	4b91      	ldr	r3, [pc, #580]	; (8002990 <_etoa+0x340>)
 800274a:	ea44 0802 	orr.w	r8, r4, r2
 800274e:	ea45 0903 	orr.w	r9, r5, r3
 8002752:	e9c7 8908 	strd	r8, r9, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002756:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002758:	f7fd fe88 	bl	800046c <__aeabi_i2d>
 800275c:	a37e      	add	r3, pc, #504	; (adr r3, 8002958 <_etoa+0x308>)
 800275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002762:	f7fd feed 	bl	8000540 <__aeabi_dmul>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	a37c      	add	r3, pc, #496	; (adr r3, 8002960 <_etoa+0x310>)
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f7fd fd2e 	bl	80001d4 <__adddf3>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4614      	mov	r4, r2
 800277e:	461d      	mov	r5, r3
 8002780:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	4b82      	ldr	r3, [pc, #520]	; (8002994 <_etoa+0x344>)
 800278a:	f7fd fd21 	bl	80001d0 <__aeabi_dsub>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
 8002796:	a374      	add	r3, pc, #464	; (adr r3, 8002968 <_etoa+0x318>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	f7fd fed0 	bl	8000540 <__aeabi_dmul>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4620      	mov	r0, r4
 80027a6:	4629      	mov	r1, r5
 80027a8:	f7fd fd14 	bl	80001d4 <__adddf3>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4610      	mov	r0, r2
 80027b2:	4619      	mov	r1, r3
 80027b4:	f7fe f95e 	bl	8000a74 <__aeabi_d2iz>
 80027b8:	4603      	mov	r3, r0
 80027ba:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80027bc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80027be:	f7fd fe55 	bl	800046c <__aeabi_i2d>
 80027c2:	a36b      	add	r3, pc, #428	; (adr r3, 8002970 <_etoa+0x320>)
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	f7fd feba 	bl	8000540 <__aeabi_dmul>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	4b6f      	ldr	r3, [pc, #444]	; (8002998 <_etoa+0x348>)
 80027da:	f7fd fcfb 	bl	80001d4 <__adddf3>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4610      	mov	r0, r2
 80027e4:	4619      	mov	r1, r3
 80027e6:	f7fe f945 	bl	8000a74 <__aeabi_d2iz>
 80027ea:	4603      	mov	r3, r0
 80027ec:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80027ee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80027f0:	f7fd fe3c 	bl	800046c <__aeabi_i2d>
 80027f4:	a360      	add	r3, pc, #384	; (adr r3, 8002978 <_etoa+0x328>)
 80027f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fa:	f7fd fea1 	bl	8000540 <__aeabi_dmul>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4614      	mov	r4, r2
 8002804:	461d      	mov	r5, r3
 8002806:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002808:	f7fd fe30 	bl	800046c <__aeabi_i2d>
 800280c:	a35c      	add	r3, pc, #368	; (adr r3, 8002980 <_etoa+0x330>)
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	f7fd fe95 	bl	8000540 <__aeabi_dmul>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4620      	mov	r0, r4
 800281c:	4629      	mov	r1, r5
 800281e:	f7fd fcd7 	bl	80001d0 <__aeabi_dsub>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 800282a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800282e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002832:	f7fd fe85 	bl	8000540 <__aeabi_dmul>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800283e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002840:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002844:	4618      	mov	r0, r3
 8002846:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	0503      	lsls	r3, r0, #20
 8002854:	2200      	movs	r2, #0
 8002856:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800285a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800285e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	f7fd fcb5 	bl	80001d4 <__adddf3>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4690      	mov	r8, r2
 8002870:	4699      	mov	r9, r3
 8002872:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002876:	f04f 0000 	mov.w	r0, #0
 800287a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800287e:	f7fd fca7 	bl	80001d0 <__aeabi_dsub>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4692      	mov	sl, r2
 8002888:	469b      	mov	fp, r3
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	4b43      	ldr	r3, [pc, #268]	; (800299c <_etoa+0x34c>)
 8002890:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002894:	f7fd ff7e 	bl	8000794 <__aeabi_ddiv>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	4b3e      	ldr	r3, [pc, #248]	; (80029a0 <_etoa+0x350>)
 80028a6:	f7fd fc95 	bl	80001d4 <__adddf3>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80028b2:	f7fd ff6f 	bl	8000794 <__aeabi_ddiv>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	4b38      	ldr	r3, [pc, #224]	; (80029a4 <_etoa+0x354>)
 80028c4:	f7fd fc86 	bl	80001d4 <__adddf3>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80028d0:	f7fd ff60 	bl	8000794 <__aeabi_ddiv>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4650      	mov	r0, sl
 80028da:	4659      	mov	r1, fp
 80028dc:	f7fd fc7a 	bl	80001d4 <__adddf3>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4640      	mov	r0, r8
 80028e6:	4649      	mov	r1, r9
 80028e8:	f7fd ff54 	bl	8000794 <__aeabi_ddiv>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	4b25      	ldr	r3, [pc, #148]	; (8002990 <_etoa+0x340>)
 80028fa:	f7fd fc6b 	bl	80001d4 <__adddf3>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4620      	mov	r0, r4
 8002904:	4629      	mov	r1, r5
 8002906:	f7fd fe1b 	bl	8000540 <__aeabi_dmul>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8002912:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002916:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800291a:	f7fe f883 	bl	8000a24 <__aeabi_dcmplt>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00d      	beq.n	8002940 <_etoa+0x2f0>
    expval--;
 8002924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002926:	3b01      	subs	r3, #1
 8002928:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 800292a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <_etoa+0x350>)
 8002934:	f7fd ff2e 	bl	8000794 <__aeabi_ddiv>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002942:	2b63      	cmp	r3, #99	; 0x63
 8002944:	dc30      	bgt.n	80029a8 <_etoa+0x358>
 8002946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002948:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800294c:	db2c      	blt.n	80029a8 <_etoa+0x358>
 800294e:	2304      	movs	r3, #4
 8002950:	e02b      	b.n	80029aa <_etoa+0x35a>
 8002952:	bf00      	nop
 8002954:	f3af 8000 	nop.w
 8002958:	509f79fb 	.word	0x509f79fb
 800295c:	3fd34413 	.word	0x3fd34413
 8002960:	8b60c8b3 	.word	0x8b60c8b3
 8002964:	3fc68a28 	.word	0x3fc68a28
 8002968:	636f4361 	.word	0x636f4361
 800296c:	3fd287a7 	.word	0x3fd287a7
 8002970:	0979a371 	.word	0x0979a371
 8002974:	400a934f 	.word	0x400a934f
 8002978:	bbb55516 	.word	0xbbb55516
 800297c:	40026bb1 	.word	0x40026bb1
 8002980:	fefa39ef 	.word	0xfefa39ef
 8002984:	3fe62e42 	.word	0x3fe62e42
 8002988:	7fefffff 	.word	0x7fefffff
 800298c:	000fffff 	.word	0x000fffff
 8002990:	3ff00000 	.word	0x3ff00000
 8002994:	3ff80000 	.word	0x3ff80000
 8002998:	3fe00000 	.word	0x3fe00000
 800299c:	402c0000 	.word	0x402c0000
 80029a0:	40240000 	.word	0x40240000
 80029a4:	40180000 	.word	0x40180000
 80029a8:	2305      	movs	r3, #5
 80029aa:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80029ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d03d      	beq.n	8002a34 <_etoa+0x3e4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80029b8:	a369      	add	r3, pc, #420	; (adr r3, 8002b60 <_etoa+0x510>)
 80029ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029c2:	f7fe f843 	bl	8000a4c <__aeabi_dcmpge>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d024      	beq.n	8002a16 <_etoa+0x3c6>
 80029cc:	a366      	add	r3, pc, #408	; (adr r3, 8002b68 <_etoa+0x518>)
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029d6:	f7fe f825 	bl	8000a24 <__aeabi_dcmplt>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01a      	beq.n	8002a16 <_etoa+0x3c6>
      if ((int)prec > expval) {
 80029e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029e6:	429a      	cmp	r2, r3
 80029e8:	da07      	bge.n	80029fa <_etoa+0x3aa>
        prec = (unsigned)((int)prec - expval - 1);
 80029ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029f8:	e002      	b.n	8002a00 <_etoa+0x3b0>
      }
      else {
        prec = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	657b      	str	r3, [r7, #84]	; 0x54
 8002a14:	e00e      	b.n	8002a34 <_etoa+0x3e4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002a16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <_etoa+0x3e4>
 8002a1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d004      	beq.n	8002a34 <_etoa+0x3e4>
        --prec;
 8002a2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8002a3a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d904      	bls.n	8002a4e <_etoa+0x3fe>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a4c:	e001      	b.n	8002a52 <_etoa+0x402>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002a52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d004      	beq.n	8002a68 <_etoa+0x418>
 8002a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <_etoa+0x418>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8002a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <_etoa+0x432>
    value /= conv.F;
 8002a6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a76:	f7fd fe8d 	bl	8000794 <__aeabi_ddiv>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002a86:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d006      	beq.n	8002a9c <_etoa+0x44c>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	603b      	str	r3, [r7, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	e003      	b.n	8002aa4 <_etoa+0x454>
 8002a9c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002aa0:	ed87 7b00 	vstr	d7, [r7]
 8002aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aac:	9302      	str	r3, [sp, #8]
 8002aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	ed97 0b00 	vldr	d0, [r7]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	69b9      	ldr	r1, [r7, #24]
 8002ac2:	69f8      	ldr	r0, [r7, #28]
 8002ac4:	f7ff fb64 	bl	8002190 <_ftoa>
 8002ac8:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8002aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d03f      	beq.n	8002b50 <_etoa+0x500>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8002ad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <_etoa+0x490>
 8002adc:	2045      	movs	r0, #69	; 0x45
 8002ade:	e000      	b.n	8002ae2 <_etoa+0x492>
 8002ae0:	2065      	movs	r0, #101	; 0x65
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	1c53      	adds	r3, r2, #1
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	69fc      	ldr	r4, [r7, #28]
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	69b9      	ldr	r1, [r7, #24]
 8002aee:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8002af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bfb8      	it	lt
 8002af6:	425b      	neglt	r3, r3
 8002af8:	4618      	mov	r0, r3
 8002afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afc:	0fdb      	lsrs	r3, r3, #31
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b02:	3a01      	subs	r2, #1
 8002b04:	2105      	movs	r1, #5
 8002b06:	9105      	str	r1, [sp, #20]
 8002b08:	9204      	str	r2, [sp, #16]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	9203      	str	r2, [sp, #12]
 8002b0e:	220a      	movs	r2, #10
 8002b10:	9202      	str	r2, [sp, #8]
 8002b12:	9301      	str	r3, [sp, #4]
 8002b14:	9000      	str	r0, [sp, #0]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	69b9      	ldr	r1, [r7, #24]
 8002b1c:	69f8      	ldr	r0, [r7, #28]
 8002b1e:	f7ff fa5f 	bl	8001fe0 <_ntoa_long>
 8002b22:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00f      	beq.n	8002b50 <_etoa+0x500>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8002b30:	e007      	b.n	8002b42 <_etoa+0x4f2>
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	1c53      	adds	r3, r2, #1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	69fc      	ldr	r4, [r7, #28]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	69b9      	ldr	r1, [r7, #24]
 8002b3e:	2020      	movs	r0, #32
 8002b40:	47a0      	blx	r4
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d8f0      	bhi.n	8002b32 <_etoa+0x4e2>
    }
  }
  return idx;
 8002b50:	697b      	ldr	r3, [r7, #20]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	375c      	adds	r7, #92	; 0x5c
 8002b56:	46bd      	mov	sp, r7
 8002b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b5c:	f3af 8000 	nop.w
 8002b60:	eb1c432d 	.word	0xeb1c432d
 8002b64:	3f1a36e2 	.word	0x3f1a36e2
 8002b68:	00000000 	.word	0x00000000
 8002b6c:	412e8480 	.word	0x412e8480

08002b70 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002b70:	b5b0      	push	{r4, r5, r7, lr}
 8002b72:	b0a0      	sub	sp, #128	; 0x80
 8002b74:	af0a      	add	r7, sp, #40	; 0x28
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f040 8494 	bne.w	80034b2 <_vsnprintf+0x942>
    // use null output function
    out = _out_null;
 8002b8a:	4ba0      	ldr	r3, [pc, #640]	; (8002e0c <_vsnprintf+0x29c>)
 8002b8c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8002b8e:	f000 bc90 	b.w	80034b2 <_vsnprintf+0x942>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b25      	cmp	r3, #37	; 0x25
 8002b98:	d00d      	beq.n	8002bb6 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	7818      	ldrb	r0, [r3, #0]
 8002b9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ba0:	1c53      	adds	r3, r2, #1
 8002ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ba4:	68fc      	ldr	r4, [r7, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	47a0      	blx	r4
      format++;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	603b      	str	r3, [r7, #0]
      continue;
 8002bb2:	f000 bc7e 	b.w	80034b2 <_vsnprintf+0x942>
    }
    else {
      // yes, evaluate it
      format++;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	3b20      	subs	r3, #32
 8002bc6:	2b10      	cmp	r3, #16
 8002bc8:	d856      	bhi.n	8002c78 <_vsnprintf+0x108>
 8002bca:	a201      	add	r2, pc, #4	; (adr r2, 8002bd0 <_vsnprintf+0x60>)
 8002bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd0:	08002c51 	.word	0x08002c51
 8002bd4:	08002c79 	.word	0x08002c79
 8002bd8:	08002c79 	.word	0x08002c79
 8002bdc:	08002c65 	.word	0x08002c65
 8002be0:	08002c79 	.word	0x08002c79
 8002be4:	08002c79 	.word	0x08002c79
 8002be8:	08002c79 	.word	0x08002c79
 8002bec:	08002c79 	.word	0x08002c79
 8002bf0:	08002c79 	.word	0x08002c79
 8002bf4:	08002c79 	.word	0x08002c79
 8002bf8:	08002c79 	.word	0x08002c79
 8002bfc:	08002c3d 	.word	0x08002c3d
 8002c00:	08002c79 	.word	0x08002c79
 8002c04:	08002c29 	.word	0x08002c29
 8002c08:	08002c79 	.word	0x08002c79
 8002c0c:	08002c79 	.word	0x08002c79
 8002c10:	08002c15 	.word	0x08002c15
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	603b      	str	r3, [r7, #0]
 8002c22:	2301      	movs	r3, #1
 8002c24:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c26:	e02a      	b.n	8002c7e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c2a:	f043 0302 	orr.w	r3, r3, #2
 8002c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	3301      	adds	r3, #1
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	2301      	movs	r3, #1
 8002c38:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c3a:	e020      	b.n	8002c7e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	657b      	str	r3, [r7, #84]	; 0x54
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	3301      	adds	r3, #1
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c4e:	e016      	b.n	8002c7e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c52:	f043 0308 	orr.w	r3, r3, #8
 8002c56:	657b      	str	r3, [r7, #84]	; 0x54
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	2301      	movs	r3, #1
 8002c60:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c62:	e00c      	b.n	8002c7e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c66:	f043 0310 	orr.w	r3, r3, #16
 8002c6a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	2301      	movs	r3, #1
 8002c74:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c76:	e002      	b.n	8002c7e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c7c:	bf00      	nop
      }
    } while (n);
 8002c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d19d      	bne.n	8002bc0 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff f840 	bl	8001d12 <_is_digit>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <_vsnprintf+0x134>
      width = _atoi(&format);
 8002c98:	463b      	mov	r3, r7
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff f850 	bl	8001d40 <_atoi>
 8002ca0:	6538      	str	r0, [r7, #80]	; 0x50
 8002ca2:	e018      	b.n	8002cd6 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8002caa:	d114      	bne.n	8002cd6 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 8002cac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cae:	1d1a      	adds	r2, r3, #4
 8002cb0:	66ba      	str	r2, [r7, #104]	; 0x68
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	da07      	bge.n	8002ccc <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 8002cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc6:	425b      	negs	r3, r3
 8002cc8:	653b      	str	r3, [r7, #80]	; 0x50
 8002cca:	e001      	b.n	8002cd0 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b2e      	cmp	r3, #46	; 0x2e
 8002ce0:	d124      	bne.n	8002d2c <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 8002ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ce8:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	3301      	adds	r3, #1
 8002cee:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff f80c 	bl	8001d12 <_is_digit>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8002d00:	463b      	mov	r3, r7
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff f81c 	bl	8001d40 <_atoi>
 8002d08:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002d0a:	e00f      	b.n	8002d2c <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b2a      	cmp	r3, #42	; 0x2a
 8002d12:	d10b      	bne.n	8002d2c <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 8002d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d16:	1d1a      	adds	r2, r3, #4
 8002d18:	66ba      	str	r2, [r7, #104]	; 0x68
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002d24:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	3b68      	subs	r3, #104	; 0x68
 8002d32:	2b12      	cmp	r3, #18
 8002d34:	d866      	bhi.n	8002e04 <_vsnprintf+0x294>
 8002d36:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <_vsnprintf+0x1cc>)
 8002d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3c:	08002daf 	.word	0x08002daf
 8002d40:	08002e05 	.word	0x08002e05
 8002d44:	08002de5 	.word	0x08002de5
 8002d48:	08002e05 	.word	0x08002e05
 8002d4c:	08002d89 	.word	0x08002d89
 8002d50:	08002e05 	.word	0x08002e05
 8002d54:	08002e05 	.word	0x08002e05
 8002d58:	08002e05 	.word	0x08002e05
 8002d5c:	08002e05 	.word	0x08002e05
 8002d60:	08002e05 	.word	0x08002e05
 8002d64:	08002e05 	.word	0x08002e05
 8002d68:	08002e05 	.word	0x08002e05
 8002d6c:	08002dd5 	.word	0x08002dd5
 8002d70:	08002e05 	.word	0x08002e05
 8002d74:	08002e05 	.word	0x08002e05
 8002d78:	08002e05 	.word	0x08002e05
 8002d7c:	08002e05 	.word	0x08002e05
 8002d80:	08002e05 	.word	0x08002e05
 8002d84:	08002df5 	.word	0x08002df5
      case 'l' :
        flags |= FLAGS_LONG;
 8002d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	3301      	adds	r3, #1
 8002d94:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b6c      	cmp	r3, #108	; 0x6c
 8002d9c:	d134      	bne.n	8002e08 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8002d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002da4:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	603b      	str	r3, [r7, #0]
        }
        break;
 8002dac:	e02c      	b.n	8002e08 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b68      	cmp	r3, #104	; 0x68
 8002dc2:	d125      	bne.n	8002e10 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8002dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dca:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	603b      	str	r3, [r7, #0]
        }
        break;
 8002dd2:	e01d      	b.n	8002e10 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dda:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	3301      	adds	r3, #1
 8002de0:	603b      	str	r3, [r7, #0]
        break;
 8002de2:	e016      	b.n	8002e12 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dea:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	3301      	adds	r3, #1
 8002df0:	603b      	str	r3, [r7, #0]
        break;
 8002df2:	e00e      	b.n	8002e12 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfa:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	603b      	str	r3, [r7, #0]
        break;
 8002e02:	e006      	b.n	8002e12 <_vsnprintf+0x2a2>
      default :
        break;
 8002e04:	bf00      	nop
 8002e06:	e004      	b.n	8002e12 <_vsnprintf+0x2a2>
        break;
 8002e08:	bf00      	nop
 8002e0a:	e002      	b.n	8002e12 <_vsnprintf+0x2a2>
 8002e0c:	08001c97 	.word	0x08001c97
        break;
 8002e10:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	3b25      	subs	r3, #37	; 0x25
 8002e18:	2b53      	cmp	r3, #83	; 0x53
 8002e1a:	f200 833d 	bhi.w	8003498 <_vsnprintf+0x928>
 8002e1e:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <_vsnprintf+0x2b4>)
 8002e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e24:	08003481 	.word	0x08003481
 8002e28:	08003499 	.word	0x08003499
 8002e2c:	08003499 	.word	0x08003499
 8002e30:	08003499 	.word	0x08003499
 8002e34:	08003499 	.word	0x08003499
 8002e38:	08003499 	.word	0x08003499
 8002e3c:	08003499 	.word	0x08003499
 8002e40:	08003499 	.word	0x08003499
 8002e44:	08003499 	.word	0x08003499
 8002e48:	08003499 	.word	0x08003499
 8002e4c:	08003499 	.word	0x08003499
 8002e50:	08003499 	.word	0x08003499
 8002e54:	08003499 	.word	0x08003499
 8002e58:	08003499 	.word	0x08003499
 8002e5c:	08003499 	.word	0x08003499
 8002e60:	08003499 	.word	0x08003499
 8002e64:	08003499 	.word	0x08003499
 8002e68:	08003499 	.word	0x08003499
 8002e6c:	08003499 	.word	0x08003499
 8002e70:	08003499 	.word	0x08003499
 8002e74:	08003499 	.word	0x08003499
 8002e78:	08003499 	.word	0x08003499
 8002e7c:	08003499 	.word	0x08003499
 8002e80:	08003499 	.word	0x08003499
 8002e84:	08003499 	.word	0x08003499
 8002e88:	08003499 	.word	0x08003499
 8002e8c:	08003499 	.word	0x08003499
 8002e90:	08003499 	.word	0x08003499
 8002e94:	08003499 	.word	0x08003499
 8002e98:	08003499 	.word	0x08003499
 8002e9c:	08003499 	.word	0x08003499
 8002ea0:	08003499 	.word	0x08003499
 8002ea4:	0800324f 	.word	0x0800324f
 8002ea8:	08003203 	.word	0x08003203
 8002eac:	0800324f 	.word	0x0800324f
 8002eb0:	08003499 	.word	0x08003499
 8002eb4:	08003499 	.word	0x08003499
 8002eb8:	08003499 	.word	0x08003499
 8002ebc:	08003499 	.word	0x08003499
 8002ec0:	08003499 	.word	0x08003499
 8002ec4:	08003499 	.word	0x08003499
 8002ec8:	08003499 	.word	0x08003499
 8002ecc:	08003499 	.word	0x08003499
 8002ed0:	08003499 	.word	0x08003499
 8002ed4:	08003499 	.word	0x08003499
 8002ed8:	08003499 	.word	0x08003499
 8002edc:	08003499 	.word	0x08003499
 8002ee0:	08003499 	.word	0x08003499
 8002ee4:	08003499 	.word	0x08003499
 8002ee8:	08003499 	.word	0x08003499
 8002eec:	08003499 	.word	0x08003499
 8002ef0:	08002f75 	.word	0x08002f75
 8002ef4:	08003499 	.word	0x08003499
 8002ef8:	08003499 	.word	0x08003499
 8002efc:	08003499 	.word	0x08003499
 8002f00:	08003499 	.word	0x08003499
 8002f04:	08003499 	.word	0x08003499
 8002f08:	08003499 	.word	0x08003499
 8002f0c:	08003499 	.word	0x08003499
 8002f10:	08003499 	.word	0x08003499
 8002f14:	08003499 	.word	0x08003499
 8002f18:	08002f75 	.word	0x08002f75
 8002f1c:	080032bb 	.word	0x080032bb
 8002f20:	08002f75 	.word	0x08002f75
 8002f24:	0800324f 	.word	0x0800324f
 8002f28:	08003203 	.word	0x08003203
 8002f2c:	0800324f 	.word	0x0800324f
 8002f30:	08003499 	.word	0x08003499
 8002f34:	08002f75 	.word	0x08002f75
 8002f38:	08003499 	.word	0x08003499
 8002f3c:	08003499 	.word	0x08003499
 8002f40:	08003499 	.word	0x08003499
 8002f44:	08003499 	.word	0x08003499
 8002f48:	08003499 	.word	0x08003499
 8002f4c:	08002f75 	.word	0x08002f75
 8002f50:	080033f3 	.word	0x080033f3
 8002f54:	08003499 	.word	0x08003499
 8002f58:	08003499 	.word	0x08003499
 8002f5c:	0800332f 	.word	0x0800332f
 8002f60:	08003499 	.word	0x08003499
 8002f64:	08002f75 	.word	0x08002f75
 8002f68:	08003499 	.word	0x08003499
 8002f6c:	08003499 	.word	0x08003499
 8002f70:	08002f75 	.word	0x08002f75
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b78      	cmp	r3, #120	; 0x78
 8002f7a:	d003      	beq.n	8002f84 <_vsnprintf+0x414>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b58      	cmp	r3, #88	; 0x58
 8002f82:	d102      	bne.n	8002f8a <_vsnprintf+0x41a>
          base = 16U;
 8002f84:	2310      	movs	r3, #16
 8002f86:	643b      	str	r3, [r7, #64]	; 0x40
 8002f88:	e013      	b.n	8002fb2 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b6f      	cmp	r3, #111	; 0x6f
 8002f90:	d102      	bne.n	8002f98 <_vsnprintf+0x428>
          base =  8U;
 8002f92:	2308      	movs	r3, #8
 8002f94:	643b      	str	r3, [r7, #64]	; 0x40
 8002f96:	e00c      	b.n	8002fb2 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b62      	cmp	r3, #98	; 0x62
 8002f9e:	d102      	bne.n	8002fa6 <_vsnprintf+0x436>
          base =  2U;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8002fa4:	e005      	b.n	8002fb2 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8002fa6:	230a      	movs	r3, #10
 8002fa8:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fac:	f023 0310 	bic.w	r3, r3, #16
 8002fb0:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b58      	cmp	r3, #88	; 0x58
 8002fb8:	d103      	bne.n	8002fc2 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8002fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fbc:	f043 0320 	orr.w	r3, r3, #32
 8002fc0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b69      	cmp	r3, #105	; 0x69
 8002fc8:	d007      	beq.n	8002fda <_vsnprintf+0x46a>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d003      	beq.n	8002fda <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd4:	f023 030c 	bic.w	r3, r3, #12
 8002fd8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8002fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b69      	cmp	r3, #105	; 0x69
 8002ff2:	d004      	beq.n	8002ffe <_vsnprintf+0x48e>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b64      	cmp	r3, #100	; 0x64
 8002ffa:	f040 808e 	bne.w	800311a <_vsnprintf+0x5aa>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003004:	2b00      	cmp	r3, #0
 8003006:	d02f      	beq.n	8003068 <_vsnprintf+0x4f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003008:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800300a:	3307      	adds	r3, #7
 800300c:	f023 0307 	bic.w	r3, r3, #7
 8003010:	f103 0208 	add.w	r2, r3, #8
 8003014:	66ba      	str	r2, [r7, #104]	; 0x68
 8003016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800301e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003022:	2a00      	cmp	r2, #0
 8003024:	f173 0100 	sbcs.w	r1, r3, #0
 8003028:	da02      	bge.n	8003030 <_vsnprintf+0x4c0>
 800302a:	4252      	negs	r2, r2
 800302c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	0fdb      	lsrs	r3, r3, #31
 8003038:	b2dc      	uxtb	r4, r3
 800303a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800303c:	461a      	mov	r2, r3
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8003044:	9508      	str	r5, [sp, #32]
 8003046:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8003048:	9507      	str	r5, [sp, #28]
 800304a:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800304c:	9506      	str	r5, [sp, #24]
 800304e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003052:	9402      	str	r4, [sp, #8]
 8003054:	e9cd 0100 	strd	r0, r1, [sp]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f7ff f825 	bl	80020ae <_ntoa_long_long>
 8003064:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8003066:	e0c8      	b.n	80031fa <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d01e      	beq.n	80030b0 <_vsnprintf+0x540>
            const long value = va_arg(va, long);
 8003072:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003074:	1d1a      	adds	r2, r3, #4
 8003076:	66ba      	str	r2, [r7, #104]	; 0x68
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b00      	cmp	r3, #0
 8003080:	bfb8      	it	lt
 8003082:	425b      	neglt	r3, r3
 8003084:	4619      	mov	r1, r3
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	0fdb      	lsrs	r3, r3, #31
 800308a:	b2db      	uxtb	r3, r3
 800308c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800308e:	9205      	str	r2, [sp, #20]
 8003090:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003092:	9204      	str	r2, [sp, #16]
 8003094:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003096:	9203      	str	r2, [sp, #12]
 8003098:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800309a:	9202      	str	r2, [sp, #8]
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	9100      	str	r1, [sp, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f7fe ff9a 	bl	8001fe0 <_ntoa_long>
 80030ac:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80030ae:	e0a4      	b.n	80031fa <_vsnprintf+0x68a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80030b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <_vsnprintf+0x556>
 80030ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030bc:	1d1a      	adds	r2, r3, #4
 80030be:	66ba      	str	r2, [r7, #104]	; 0x68
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	e00e      	b.n	80030e4 <_vsnprintf+0x574>
 80030c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <_vsnprintf+0x56c>
 80030d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030d2:	1d1a      	adds	r2, r3, #4
 80030d4:	66ba      	str	r2, [r7, #104]	; 0x68
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	b21b      	sxth	r3, r3
 80030da:	e003      	b.n	80030e4 <_vsnprintf+0x574>
 80030dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030de:	1d1a      	adds	r2, r3, #4
 80030e0:	66ba      	str	r2, [r7, #104]	; 0x68
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bfb8      	it	lt
 80030ec:	425b      	neglt	r3, r3
 80030ee:	4619      	mov	r1, r3
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	0fdb      	lsrs	r3, r3, #31
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030f8:	9205      	str	r2, [sp, #20]
 80030fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030fc:	9204      	str	r2, [sp, #16]
 80030fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003100:	9203      	str	r2, [sp, #12]
 8003102:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003104:	9202      	str	r2, [sp, #8]
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	9100      	str	r1, [sp, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7fe ff65 	bl	8001fe0 <_ntoa_long>
 8003116:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8003118:	e06f      	b.n	80031fa <_vsnprintf+0x68a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800311a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800311c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <_vsnprintf+0x5f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003126:	3307      	adds	r3, #7
 8003128:	f023 0307 	bic.w	r3, r3, #7
 800312c:	f103 0208 	add.w	r2, r3, #8
 8003130:	66ba      	str	r2, [r7, #104]	; 0x68
 8003132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003136:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003138:	4608      	mov	r0, r1
 800313a:	f04f 0100 	mov.w	r1, #0
 800313e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8003140:	9408      	str	r4, [sp, #32]
 8003142:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003144:	9407      	str	r4, [sp, #28]
 8003146:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8003148:	9406      	str	r4, [sp, #24]
 800314a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800314e:	2100      	movs	r1, #0
 8003150:	9102      	str	r1, [sp, #8]
 8003152:	e9cd 2300 	strd	r2, r3, [sp]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7fe ffa6 	bl	80020ae <_ntoa_long_long>
 8003162:	6478      	str	r0, [r7, #68]	; 0x44
 8003164:	e049      	b.n	80031fa <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d016      	beq.n	800319e <_vsnprintf+0x62e>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003170:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003172:	1d1a      	adds	r2, r3, #4
 8003174:	66ba      	str	r2, [r7, #104]	; 0x68
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800317a:	9205      	str	r2, [sp, #20]
 800317c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800317e:	9204      	str	r2, [sp, #16]
 8003180:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003182:	9203      	str	r2, [sp, #12]
 8003184:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003186:	9202      	str	r2, [sp, #8]
 8003188:	2200      	movs	r2, #0
 800318a:	9201      	str	r2, [sp, #4]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7fe ff23 	bl	8001fe0 <_ntoa_long>
 800319a:	6478      	str	r0, [r7, #68]	; 0x44
 800319c:	e02d      	b.n	80031fa <_vsnprintf+0x68a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800319e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <_vsnprintf+0x644>
 80031a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031aa:	1d1a      	adds	r2, r3, #4
 80031ac:	66ba      	str	r2, [r7, #104]	; 0x68
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	e00e      	b.n	80031d2 <_vsnprintf+0x662>
 80031b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <_vsnprintf+0x65a>
 80031be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031c0:	1d1a      	adds	r2, r3, #4
 80031c2:	66ba      	str	r2, [r7, #104]	; 0x68
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	e003      	b.n	80031d2 <_vsnprintf+0x662>
 80031ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031cc:	1d1a      	adds	r2, r3, #4
 80031ce:	66ba      	str	r2, [r7, #104]	; 0x68
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80031d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d6:	9305      	str	r3, [sp, #20]
 80031d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031da:	9304      	str	r3, [sp, #16]
 80031dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031de:	9303      	str	r3, [sp, #12]
 80031e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e2:	9302      	str	r3, [sp, #8]
 80031e4:	2300      	movs	r3, #0
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f7fe fef4 	bl	8001fe0 <_ntoa_long>
 80031f8:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	3301      	adds	r3, #1
 80031fe:	603b      	str	r3, [r7, #0]
        break;
 8003200:	e157      	b.n	80034b2 <_vsnprintf+0x942>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b46      	cmp	r3, #70	; 0x46
 8003208:	d103      	bne.n	8003212 <_vsnprintf+0x6a2>
 800320a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800320c:	f043 0320 	orr.w	r3, r3, #32
 8003210:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003214:	3307      	adds	r3, #7
 8003216:	f023 0307 	bic.w	r3, r3, #7
 800321a:	f103 0208 	add.w	r2, r3, #8
 800321e:	66ba      	str	r2, [r7, #104]	; 0x68
 8003220:	ed93 7b00 	vldr	d7, [r3]
 8003224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003226:	9302      	str	r3, [sp, #8]
 8003228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	eeb0 0a47 	vmov.f32	s0, s14
 8003234:	eef0 0a67 	vmov.f32	s1, s15
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f7fe ffa6 	bl	8002190 <_ftoa>
 8003244:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	3301      	adds	r3, #1
 800324a:	603b      	str	r3, [r7, #0]
        break;
 800324c:	e131      	b.n	80034b2 <_vsnprintf+0x942>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b67      	cmp	r3, #103	; 0x67
 8003254:	d003      	beq.n	800325e <_vsnprintf+0x6ee>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b47      	cmp	r3, #71	; 0x47
 800325c:	d103      	bne.n	8003266 <_vsnprintf+0x6f6>
 800325e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003260:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003264:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b45      	cmp	r3, #69	; 0x45
 800326c:	d003      	beq.n	8003276 <_vsnprintf+0x706>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b47      	cmp	r3, #71	; 0x47
 8003274:	d103      	bne.n	800327e <_vsnprintf+0x70e>
 8003276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003278:	f043 0320 	orr.w	r3, r3, #32
 800327c:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800327e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003280:	3307      	adds	r3, #7
 8003282:	f023 0307 	bic.w	r3, r3, #7
 8003286:	f103 0208 	add.w	r2, r3, #8
 800328a:	66ba      	str	r2, [r7, #104]	; 0x68
 800328c:	ed93 7b00 	vldr	d7, [r3]
 8003290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003292:	9302      	str	r3, [sp, #8]
 8003294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003296:	9301      	str	r3, [sp, #4]
 8003298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	eeb0 0a47 	vmov.f32	s0, s14
 80032a0:	eef0 0a67 	vmov.f32	s1, s15
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f7ff f9d0 	bl	8002650 <_etoa>
 80032b0:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	603b      	str	r3, [r7, #0]
        break;
 80032b8:	e0fb      	b.n	80034b2 <_vsnprintf+0x942>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80032ba:	2301      	movs	r3, #1
 80032bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80032be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10e      	bne.n	80032e6 <_vsnprintf+0x776>
          while (l++ < width) {
 80032c8:	e007      	b.n	80032da <_vsnprintf+0x76a>
            out(' ', buffer, idx++, maxlen);
 80032ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032cc:	1c53      	adds	r3, r2, #1
 80032ce:	647b      	str	r3, [r7, #68]	; 0x44
 80032d0:	68fc      	ldr	r4, [r7, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	2020      	movs	r0, #32
 80032d8:	47a0      	blx	r4
          while (l++ < width) {
 80032da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d8f1      	bhi.n	80032ca <_vsnprintf+0x75a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80032e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032e8:	1d1a      	adds	r2, r3, #4
 80032ea:	66ba      	str	r2, [r7, #104]	; 0x68
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	b2d8      	uxtb	r0, r3
 80032f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032f2:	1c53      	adds	r3, r2, #1
 80032f4:	647b      	str	r3, [r7, #68]	; 0x44
 80032f6:	68fc      	ldr	r4, [r7, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80032fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <_vsnprintf+0x7b6>
          while (l++ < width) {
 8003308:	e007      	b.n	800331a <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 800330a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800330c:	1c53      	adds	r3, r2, #1
 800330e:	647b      	str	r3, [r7, #68]	; 0x44
 8003310:	68fc      	ldr	r4, [r7, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	2020      	movs	r0, #32
 8003318:	47a0      	blx	r4
          while (l++ < width) {
 800331a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003320:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003322:	429a      	cmp	r2, r3
 8003324:	d8f1      	bhi.n	800330a <_vsnprintf+0x79a>
          }
        }
        format++;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	603b      	str	r3, [r7, #0]
        break;
 800332c:	e0c1      	b.n	80034b2 <_vsnprintf+0x942>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800332e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003330:	1d1a      	adds	r2, r3, #4
 8003332:	66ba      	str	r2, [r7, #104]	; 0x68
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <_vsnprintf+0x7d2>
 800333e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003340:	e001      	b.n	8003346 <_vsnprintf+0x7d6>
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
 8003346:	4619      	mov	r1, r3
 8003348:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800334a:	f7fe fcc5 	bl	8001cd8 <_strnlen_s>
 800334e:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <_vsnprintf+0x7f6>
          l = (l < precision ? l : precision);
 800335a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800335c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800335e:	4293      	cmp	r3, r2
 8003360:	bf28      	it	cs
 8003362:	4613      	movcs	r3, r2
 8003364:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8003366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d11a      	bne.n	80033a6 <_vsnprintf+0x836>
          while (l++ < width) {
 8003370:	e007      	b.n	8003382 <_vsnprintf+0x812>
            out(' ', buffer, idx++, maxlen);
 8003372:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003374:	1c53      	adds	r3, r2, #1
 8003376:	647b      	str	r3, [r7, #68]	; 0x44
 8003378:	68fc      	ldr	r4, [r7, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	2020      	movs	r0, #32
 8003380:	47a0      	blx	r4
          while (l++ < width) {
 8003382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	637a      	str	r2, [r7, #52]	; 0x34
 8003388:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800338a:	429a      	cmp	r2, r3
 800338c:	d8f1      	bhi.n	8003372 <_vsnprintf+0x802>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800338e:	e00a      	b.n	80033a6 <_vsnprintf+0x836>
          out(*(p++), buffer, idx++, maxlen);
 8003390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	63ba      	str	r2, [r7, #56]	; 0x38
 8003396:	7818      	ldrb	r0, [r3, #0]
 8003398:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800339a:	1c53      	adds	r3, r2, #1
 800339c:	647b      	str	r3, [r7, #68]	; 0x44
 800339e:	68fc      	ldr	r4, [r7, #12]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80033a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <_vsnprintf+0x852>
 80033ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0eb      	beq.n	8003390 <_vsnprintf+0x820>
 80033b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ba:	1e5a      	subs	r2, r3, #1
 80033bc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e6      	bne.n	8003390 <_vsnprintf+0x820>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80033c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00e      	beq.n	80033ea <_vsnprintf+0x87a>
          while (l++ < width) {
 80033cc:	e007      	b.n	80033de <_vsnprintf+0x86e>
            out(' ', buffer, idx++, maxlen);
 80033ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033d0:	1c53      	adds	r3, r2, #1
 80033d2:	647b      	str	r3, [r7, #68]	; 0x44
 80033d4:	68fc      	ldr	r4, [r7, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	2020      	movs	r0, #32
 80033dc:	47a0      	blx	r4
          while (l++ < width) {
 80033de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	637a      	str	r2, [r7, #52]	; 0x34
 80033e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d8f1      	bhi.n	80033ce <_vsnprintf+0x85e>
          }
        }
        format++;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	603b      	str	r3, [r7, #0]
        break;
 80033f0:	e05f      	b.n	80034b2 <_vsnprintf+0x942>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80033f2:	2308      	movs	r3, #8
 80033f4:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80033f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80033fc:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80033fe:	2300      	movs	r3, #0
 8003400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 8003404:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01e      	beq.n	800344a <_vsnprintf+0x8da>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800340c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800340e:	1d1a      	adds	r2, r3, #4
 8003410:	66ba      	str	r2, [r7, #104]	; 0x68
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800341c:	9108      	str	r1, [sp, #32]
 800341e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003420:	9107      	str	r1, [sp, #28]
 8003422:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003424:	9106      	str	r1, [sp, #24]
 8003426:	f04f 0010 	mov.w	r0, #16
 800342a:	f04f 0100 	mov.w	r1, #0
 800342e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003432:	2100      	movs	r1, #0
 8003434:	9102      	str	r1, [sp, #8]
 8003436:	e9cd 2300 	strd	r2, r3, [sp]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7fe fe34 	bl	80020ae <_ntoa_long_long>
 8003446:	6478      	str	r0, [r7, #68]	; 0x44
 8003448:	e016      	b.n	8003478 <_vsnprintf+0x908>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800344a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800344c:	1d1a      	adds	r2, r3, #4
 800344e:	66ba      	str	r2, [r7, #104]	; 0x68
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003456:	9305      	str	r3, [sp, #20]
 8003458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800345a:	9304      	str	r3, [sp, #16]
 800345c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800345e:	9303      	str	r3, [sp, #12]
 8003460:	2310      	movs	r3, #16
 8003462:	9302      	str	r3, [sp, #8]
 8003464:	2300      	movs	r3, #0
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	9200      	str	r2, [sp, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800346e:	68b9      	ldr	r1, [r7, #8]
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f7fe fdb5 	bl	8001fe0 <_ntoa_long>
 8003476:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	3301      	adds	r3, #1
 800347c:	603b      	str	r3, [r7, #0]
        break;
 800347e:	e018      	b.n	80034b2 <_vsnprintf+0x942>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003482:	1c53      	adds	r3, r2, #1
 8003484:	647b      	str	r3, [r7, #68]	; 0x44
 8003486:	68fc      	ldr	r4, [r7, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	2025      	movs	r0, #37	; 0x25
 800348e:	47a0      	blx	r4
        format++;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	603b      	str	r3, [r7, #0]
        break;
 8003496:	e00c      	b.n	80034b2 <_vsnprintf+0x942>

      default :
        out(*format, buffer, idx++, maxlen);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	7818      	ldrb	r0, [r3, #0]
 800349c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800349e:	1c53      	adds	r3, r2, #1
 80034a0:	647b      	str	r3, [r7, #68]	; 0x44
 80034a2:	68fc      	ldr	r4, [r7, #12]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	47a0      	blx	r4
        format++;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	3301      	adds	r3, #1
 80034ae:	603b      	str	r3, [r7, #0]
        break;
 80034b0:	bf00      	nop
  while (*format)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f47f ab6b 	bne.w	8002b92 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80034bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d302      	bcc.n	80034ca <_vsnprintf+0x95a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	1e5a      	subs	r2, r3, #1
 80034c8:	e000      	b.n	80034cc <_vsnprintf+0x95c>
 80034ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034cc:	68fc      	ldr	r4, [r7, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	2000      	movs	r0, #0
 80034d4:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80034d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3758      	adds	r7, #88	; 0x58
 80034dc:	46bd      	mov	sp, r7
 80034de:	bdb0      	pop	{r4, r5, r7, pc}

080034e0 <vprintf_>:
  return ret;
}


int vprintf_(const char* format, va_list va)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80034ea:	f107 010c 	add.w	r1, r7, #12
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f04f 32ff 	mov.w	r2, #4294967295
 80034f8:	4803      	ldr	r0, [pc, #12]	; (8003508 <vprintf_+0x28>)
 80034fa:	f7ff fb39 	bl	8002b70 <_vsnprintf>
 80034fe:	4603      	mov	r3, r0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	08001cb3 	.word	0x08001cb3

0800350c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003512:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <HAL_MspInit+0x44>)
 8003514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003516:	4a0e      	ldr	r2, [pc, #56]	; (8003550 <HAL_MspInit+0x44>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6613      	str	r3, [r2, #96]	; 0x60
 800351e:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <HAL_MspInit+0x44>)
 8003520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_MspInit+0x44>)
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352e:	4a08      	ldr	r2, [pc, #32]	; (8003550 <HAL_MspInit+0x44>)
 8003530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003534:	6593      	str	r3, [r2, #88]	; 0x58
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_MspInit+0x44>)
 8003538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000

08003554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003558:	e7fe      	b.n	8003558 <NMI_Handler+0x4>

0800355a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800355a:	b480      	push	{r7}
 800355c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800355e:	e7fe      	b.n	800355e <HardFault_Handler+0x4>

08003560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003564:	e7fe      	b.n	8003564 <MemManage_Handler+0x4>

08003566 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003566:	b480      	push	{r7}
 8003568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800356a:	e7fe      	b.n	800356a <BusFault_Handler+0x4>

0800356c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003570:	e7fe      	b.n	8003570 <UsageFault_Handler+0x4>

08003572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003572:	b480      	push	{r7}
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800358e:	b480      	push	{r7}
 8003590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035a0:	f000 fc3a 	bl	8003e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035a4:	bf00      	nop
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80035ac:	4b15      	ldr	r3, [pc, #84]	; (8003604 <SystemInit+0x5c>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b2:	4a14      	ldr	r2, [pc, #80]	; (8003604 <SystemInit+0x5c>)
 80035b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80035bc:	4b12      	ldr	r3, [pc, #72]	; (8003608 <SystemInit+0x60>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a11      	ldr	r2, [pc, #68]	; (8003608 <SystemInit+0x60>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <SystemInit+0x60>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80035ce:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <SystemInit+0x60>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <SystemInit+0x60>)
 80035d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80035d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80035dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <SystemInit+0x60>)
 80035e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80035e6:	4b08      	ldr	r3, [pc, #32]	; (8003608 <SystemInit+0x60>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a07      	ldr	r2, [pc, #28]	; (8003608 <SystemInit+0x60>)
 80035ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <SystemInit+0x60>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	619a      	str	r2, [r3, #24]
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000ed00 	.word	0xe000ed00
 8003608:	40021000 	.word	0x40021000

0800360c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003610:	4b04      	ldr	r3, [pc, #16]	; (8003624 <__NVIC_GetPriorityGrouping+0x18>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	0a1b      	lsrs	r3, r3, #8
 8003616:	f003 0307 	and.w	r3, r3, #7
}
 800361a:	4618      	mov	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	2b00      	cmp	r3, #0
 8003638:	db0b      	blt.n	8003652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	f003 021f 	and.w	r2, r3, #31
 8003640:	4907      	ldr	r1, [pc, #28]	; (8003660 <__NVIC_EnableIRQ+0x38>)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	2001      	movs	r0, #1
 800364a:	fa00 f202 	lsl.w	r2, r0, r2
 800364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000e100 	.word	0xe000e100

08003664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	6039      	str	r1, [r7, #0]
 800366e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003674:	2b00      	cmp	r3, #0
 8003676:	db0a      	blt.n	800368e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	490c      	ldr	r1, [pc, #48]	; (80036b0 <__NVIC_SetPriority+0x4c>)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	440b      	add	r3, r1
 8003688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800368c:	e00a      	b.n	80036a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	b2da      	uxtb	r2, r3
 8003692:	4908      	ldr	r1, [pc, #32]	; (80036b4 <__NVIC_SetPriority+0x50>)
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	3b04      	subs	r3, #4
 800369c:	0112      	lsls	r2, r2, #4
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	440b      	add	r3, r1
 80036a2:	761a      	strb	r2, [r3, #24]
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000e100 	.word	0xe000e100
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	; 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f1c3 0307 	rsb	r3, r3, #7
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	bf28      	it	cs
 80036d6:	2304      	movcs	r3, #4
 80036d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3304      	adds	r3, #4
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d902      	bls.n	80036e8 <NVIC_EncodePriority+0x30>
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3b03      	subs	r3, #3
 80036e6:	e000      	b.n	80036ea <NVIC_EncodePriority+0x32>
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	f04f 32ff 	mov.w	r2, #4294967295
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43da      	mvns	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	401a      	ands	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003700:	f04f 31ff 	mov.w	r1, #4294967295
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	43d9      	mvns	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003710:	4313      	orrs	r3, r2
         );
}
 8003712:	4618      	mov	r0, r3
 8003714:	3724      	adds	r7, #36	; 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <LL_USART_IsEnabled>:
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <LL_USART_IsEnabled+0x18>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <LL_USART_IsEnabled+0x1a>
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <LL_USART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	621a      	str	r2, [r3, #32]
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	621a      	str	r2, [r3, #32]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2204      	movs	r2, #4
 8003784:	621a      	str	r2, [r3, #32]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2208      	movs	r2, #8
 800379e:	621a      	str	r2, [r3, #32]
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	601a      	str	r2, [r3, #0]
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	601a      	str	r2, [r3, #0]
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	601a      	str	r2, [r3, #0]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381c:	2b80      	cmp	r3, #128	; 0x80
 800381e:	d101      	bne.n	8003824 <LL_USART_IsEnabledIT_TXE+0x18>
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <LL_USART_IsEnabledIT_TXE+0x1a>
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <LL_USART_RequestRxDataFlush>:
  * @rmtoll RQR          RXFRQ         LL_USART_RequestRxDataFlush
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->RQR, (uint16_t)USART_RQR_RXFRQ);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	8b1b      	ldrh	r3, [r3, #24]
 800383e:	b29b      	uxth	r3, r3
 8003840:	f043 0308 	orr.w	r3, r3, #8
 8003844:	b29a      	uxth	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	831a      	strh	r2, [r3, #24]
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <uart_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t uart_init(uart_config_t* uart_cfg)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
    if (uart_cfg->uart_reg_base == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <uart_init+0x14>
    {
        return MOD_ERR_ARG;
 8003868:	2301      	movs	r3, #1
 800386a:	e04a      	b.n	8003902 <uart_init+0xaa>
    }
    else if (!LL_USART_IsEnabled(uart_cfg->uart_reg_base))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff ff54 	bl	800371e <LL_USART_IsEnabled>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <uart_init+0x28>
    {
    	return MOD_ERR_PERIPH;
 800387c:	2307      	movs	r3, #7
 800387e:	e040      	b.n	8003902 <uart_init+0xaa>
    }
    else
    {
		switch(uart_cfg->irq_num)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003886:	2b27      	cmp	r3, #39	; 0x27
 8003888:	dc02      	bgt.n	8003890 <uart_init+0x38>
 800388a:	2b25      	cmp	r3, #37	; 0x25
 800388c:	da03      	bge.n	8003896 <uart_init+0x3e>
 800388e:	e037      	b.n	8003900 <uart_init+0xa8>
 8003890:	3b34      	subs	r3, #52	; 0x34
 8003892:	2b01      	cmp	r3, #1
 8003894:	d834      	bhi.n	8003900 <uart_init+0xa8>
			case USART1_IRQn:
			case USART2_IRQn:
			case USART3_IRQn:
			case UART4_IRQn:
			case UART5_IRQn:
				memset(&uart, 0, sizeof(uart));
 8003896:	f240 4274 	movw	r2, #1140	; 0x474
 800389a:	2100      	movs	r1, #0
 800389c:	481b      	ldr	r0, [pc, #108]	; (800390c <uart_init+0xb4>)
 800389e:	f002 fee5 	bl	800666c <memset>
				uart.irq_num = uart_cfg->irq_num;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80038a8:	4b18      	ldr	r3, [pc, #96]	; (800390c <uart_init+0xb4>)
 80038aa:	711a      	strb	r2, [r3, #4]
				uart.uart_reg_base = uart_cfg->uart_reg_base;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a16      	ldr	r2, [pc, #88]	; (800390c <uart_init+0xb4>)
 80038b2:	6013      	str	r3, [r2, #0]
			    mod_err_t err = cmd_register(&uart_client_info);
 80038b4:	4816      	ldr	r0, [pc, #88]	; (8003910 <uart_init+0xb8>)
 80038b6:	f7fd fad3 	bl	8000e60 <cmd_register>
 80038ba:	4603      	mov	r3, r0
 80038bc:	73fb      	strb	r3, [r7, #15]
			    LOGI(TAG, "Initialized UART");
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <uart_init+0xbc>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01a      	beq.n	80038fc <uart_init+0xa4>
 80038c6:	4b14      	ldr	r3, [pc, #80]	; (8003918 <uart_init+0xc0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	dd16      	ble.n	80038fc <uart_init+0xa4>
 80038ce:	f000 fab7 	bl	8003e40 <HAL_GetTick>
 80038d2:	60b8      	str	r0, [r7, #8]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4a11      	ldr	r2, [pc, #68]	; (800391c <uart_init+0xc4>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	0999      	lsrs	r1, r3, #6
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4a0e      	ldr	r2, [pc, #56]	; (800391c <uart_init+0xc4>)
 80038e2:	fba2 0203 	umull	r0, r2, r2, r3
 80038e6:	0992      	lsrs	r2, r2, #6
 80038e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038ec:	fb00 f202 	mul.w	r2, r0, r2
 80038f0:	1a9a      	subs	r2, r3, r2
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <uart_init+0xc8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	480b      	ldr	r0, [pc, #44]	; (8003924 <uart_init+0xcc>)
 80038f8:	f7fd ff02 	bl	8001700 <log_printf>
				return err;
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	e000      	b.n	8003902 <uart_init+0xaa>
			default:
				return MOD_ERR_ARG;
 8003900:	2301      	movs	r3, #1
		}
    }

}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	2000010c 	.word	0x2000010c
 8003910:	20000078 	.word	0x20000078
 8003914:	20000054 	.word	0x20000054
 8003918:	20000058 	.word	0x20000058
 800391c:	10624dd3 	.word	0x10624dd3
 8003920:	20000090 	.word	0x20000090
 8003924:	08006cf4 	.word	0x08006cf4

08003928 <uart_start>:

mod_err_t uart_start(void)
{
 8003928:	b590      	push	{r4, r7, lr}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
    if (uart.uart_reg_base == NULL)
 800392e:	4b25      	ldr	r3, [pc, #148]	; (80039c4 <uart_start+0x9c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d120      	bne.n	8003978 <uart_start+0x50>
    {
        LOGE(TAG, "UART not initialized");
 8003936:	4b24      	ldr	r3, [pc, #144]	; (80039c8 <uart_start+0xa0>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01a      	beq.n	8003974 <uart_start+0x4c>
 800393e:	4b23      	ldr	r3, [pc, #140]	; (80039cc <uart_start+0xa4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	dd16      	ble.n	8003974 <uart_start+0x4c>
 8003946:	f000 fa7b 	bl	8003e40 <HAL_GetTick>
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a20      	ldr	r2, [pc, #128]	; (80039d0 <uart_start+0xa8>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	0999      	lsrs	r1, r3, #6
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a1d      	ldr	r2, [pc, #116]	; (80039d0 <uart_start+0xa8>)
 800395a:	fba2 0203 	umull	r0, r2, r2, r3
 800395e:	0992      	lsrs	r2, r2, #6
 8003960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003964:	fb00 f202 	mul.w	r2, r0, r2
 8003968:	1a9a      	subs	r2, r3, r2
 800396a:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <uart_start+0xac>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	481a      	ldr	r0, [pc, #104]	; (80039d8 <uart_start+0xb0>)
 8003970:	f7fd fec6 	bl	8001700 <log_printf>
        return MOD_ERR_NOT_INIT;
 8003974:	2305      	movs	r3, #5
 8003976:	e020      	b.n	80039ba <uart_start+0x92>
    }

    LL_USART_EnableIT_TXE(uart.uart_reg_base);  // Generate interrupt whenever TXE flag is set.
 8003978:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <uart_start+0x9c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff ff25 	bl	80037cc <LL_USART_EnableIT_TXE>
    LL_USART_EnableIT_RXNE(uart.uart_reg_base); // Generate interrupt whenever RXNE flag is set.
 8003982:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <uart_start+0x9c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ff10 	bl	80037ac <LL_USART_EnableIT_RXNE>

    /* Set group and sub priority to highest priority (0). */
    __NVIC_SetPriority(uart.irq_num, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <uart_start+0x9c>)
 800398e:	f993 4004 	ldrsb.w	r4, [r3, #4]
 8003992:	f7ff fe3b 	bl	800360c <__NVIC_GetPriorityGrouping>
 8003996:	4603      	mov	r3, r0
 8003998:	2200      	movs	r2, #0
 800399a:	2100      	movs	r1, #0
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fe8b 	bl	80036b8 <NVIC_EncodePriority>
 80039a2:	4603      	mov	r3, r0
 80039a4:	4619      	mov	r1, r3
 80039a6:	4620      	mov	r0, r4
 80039a8:	f7ff fe5c 	bl	8003664 <__NVIC_SetPriority>

    /* Enable UARTx interrupt channel. */
    __NVIC_EnableIRQ(uart.irq_num);
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <uart_start+0x9c>)
 80039ae:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff fe38 	bl	8003628 <__NVIC_EnableIRQ>

    return MOD_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd90      	pop	{r4, r7, pc}
 80039c2:	bf00      	nop
 80039c4:	2000010c 	.word	0x2000010c
 80039c8:	20000054 	.word	0x20000054
 80039cc:	20000058 	.word	0x20000058
 80039d0:	10624dd3 	.word	0x10624dd3
 80039d4:	20000090 	.word	0x20000090
 80039d8:	08006d20 	.word	0x08006d20

080039dc <uart_putc>:

mod_err_t uart_putc(char c)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]

    uint16_t next_put_idx = (uart.tx_buf_put_idx + 1) % UART_TX_BUF_SIZE;
 80039e6:	4b23      	ldr	r3, [pc, #140]	; (8003a74 <uart_putc+0x98>)
 80039e8:	899b      	ldrh	r3, [r3, #12]
 80039ea:	3301      	adds	r3, #1
 80039ec:	425a      	negs	r2, r3
 80039ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039f2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80039f6:	bf58      	it	pl
 80039f8:	4253      	negpl	r3, r2
 80039fa:	81fb      	strh	r3, [r7, #14]

    /* Tx circular buffer is full. */
    if (next_put_idx == uart.tx_buf_get_idx) {
 80039fc:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <uart_putc+0x98>)
 80039fe:	895b      	ldrh	r3, [r3, #10]
 8003a00:	89fa      	ldrh	r2, [r7, #14]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d111      	bne.n	8003a2a <uart_putc+0x4e>
        INC_SAT_U16(uart_pms[CNT_TX_BUF_OVERRUN]);
 8003a06:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <uart_putc+0x9c>)
 8003a08:	891a      	ldrh	r2, [r3, #8]
 8003a0a:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <uart_putc+0x9c>)
 8003a0c:	891b      	ldrh	r3, [r3, #8]
 8003a0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a12:	428b      	cmp	r3, r1
 8003a14:	bf14      	ite	ne
 8003a16:	2301      	movne	r3, #1
 8003a18:	2300      	moveq	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	4413      	add	r3, r2
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <uart_putc+0x9c>)
 8003a24:	811a      	strh	r2, [r3, #8]
        return MOD_ERR_BUF_OVERRUN;
 8003a26:	2304      	movs	r3, #4
 8003a28:	e01f      	b.n	8003a6a <uart_putc+0x8e>
    }

    /* Place char in buffer */
    uart.tx_buf[uart.tx_buf_put_idx] = c;
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <uart_putc+0x98>)
 8003a2c:	899b      	ldrh	r3, [r3, #12]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <uart_putc+0x98>)
 8003a32:	4413      	add	r3, r2
 8003a34:	79fa      	ldrb	r2, [r7, #7]
 8003a36:	739a      	strb	r2, [r3, #14]
    uart.tx_buf_put_idx = next_put_idx;
 8003a38:	4a0e      	ldr	r2, [pc, #56]	; (8003a74 <uart_putc+0x98>)
 8003a3a:	89fb      	ldrh	r3, [r7, #14]
 8003a3c:	8193      	strh	r3, [r2, #12]

    // Ensure TXE interrupt is enabled.
    if (uart.uart_reg_base != NULL && !LL_USART_IsEnabledIT_TXE(uart.uart_reg_base)) {
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <uart_putc+0x98>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d010      	beq.n	8003a68 <uart_putc+0x8c>
 8003a46:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <uart_putc+0x98>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff fede 	bl	800380c <LL_USART_IsEnabledIT_TXE>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <uart_putc+0x8c>
  __ASM volatile ("cpsid i" : : : "memory");
 8003a56:	b672      	cpsid	i
}
 8003a58:	bf00      	nop
        __disable_irq();
        LL_USART_EnableIT_TXE(uart.uart_reg_base);
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <uart_putc+0x98>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff feb4 	bl	80037cc <LL_USART_EnableIT_TXE>
  __ASM volatile ("cpsie i" : : : "memory");
 8003a64:	b662      	cpsie	i
}
 8003a66:	bf00      	nop
        __enable_irq();
    }

    return MOD_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	2000010c 	.word	0x2000010c
 8003a78:	20000580 	.word	0x20000580

08003a7c <uart_getc>:

uint8_t uart_getc(char* c)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
    /* Check if rx buffer is empty. */
    if (uart.rx_buf_get_idx == uart.rx_buf_put_idx)
 8003a84:	4b13      	ldr	r3, [pc, #76]	; (8003ad4 <uart_getc+0x58>)
 8003a86:	88da      	ldrh	r2, [r3, #6]
 8003a88:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <uart_getc+0x58>)
 8003a8a:	891b      	ldrh	r3, [r3, #8]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d101      	bne.n	8003a94 <uart_getc+0x18>
    {
        return 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e019      	b.n	8003ac8 <uart_getc+0x4c>
    }
    else
    {
    	/* Get character and increment get index */
    	*c = uart.rx_buf[uart.rx_buf_get_idx];
 8003a94:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <uart_getc+0x58>)
 8003a96:	88db      	ldrh	r3, [r3, #6]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <uart_getc+0x58>)
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	701a      	strb	r2, [r3, #0]
    	uart.rx_buf_get_idx = (uart.rx_buf_get_idx + 1) % UART_RX_BUF_SIZE;
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <uart_getc+0x58>)
 8003aa8:	88db      	ldrh	r3, [r3, #6]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <uart_getc+0x5c>)
 8003aae:	fb82 1203 	smull	r1, r2, r2, r3
 8003ab2:	1151      	asrs	r1, r2, #5
 8003ab4:	17da      	asrs	r2, r3, #31
 8003ab6:	1a8a      	subs	r2, r1, r2
 8003ab8:	2164      	movs	r1, #100	; 0x64
 8003aba:	fb01 f202 	mul.w	r2, r1, r2
 8003abe:	1a9a      	subs	r2, r3, r2
 8003ac0:	b292      	uxth	r2, r2
 8003ac2:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <uart_getc+0x58>)
 8003ac4:	80da      	strh	r2, [r3, #6]
    	return 1;
 8003ac6:	2301      	movs	r3, #1
    }
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	2000010c 	.word	0x2000010c
 8003ad8:	51eb851f 	.word	0x51eb851f

08003adc <USART1_IRQHandler>:
////////////////////////////////////////////////////////////////////////////////
// Interrupt handlers
////////////////////////////////////////////////////////////////////////////////

void USART1_IRQHandler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
    UART_ISR();
 8003ae0:	f000 f88a 	bl	8003bf8 <UART_ISR>
}
 8003ae4:	bf00      	nop
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
    UART_ISR();
 8003aec:	f000 f884 	bl	8003bf8 <UART_ISR>
}
 8003af0:	bf00      	nop
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
    UART_ISR();
 8003af8:	f000 f87e 	bl	8003bf8 <UART_ISR>
}
 8003afc:	bf00      	nop
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
    UART_ISR();
 8003b04:	f000 f878 	bl	8003bf8 <UART_ISR>
}
 8003b08:	bf00      	nop
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
    UART_ISR();
 8003b10:	f000 f872 	bl	8003bf8 <UART_ISR>
}
 8003b14:	bf00      	nop
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <read_rdr>:

/**
 * @brief Read character from receive data register (RDR) and place into receive buffer.
 */
static void read_rdr(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
    uint16_t next_rx_put_idx = (uart.rx_buf_put_idx + 1) % UART_RX_BUF_SIZE;
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <read_rdr+0x80>)
 8003b20:	891b      	ldrh	r3, [r3, #8]
 8003b22:	3301      	adds	r3, #1
 8003b24:	4a1d      	ldr	r2, [pc, #116]	; (8003b9c <read_rdr+0x84>)
 8003b26:	fb82 1203 	smull	r1, r2, r2, r3
 8003b2a:	1151      	asrs	r1, r2, #5
 8003b2c:	17da      	asrs	r2, r3, #31
 8003b2e:	1a8a      	subs	r2, r1, r2
 8003b30:	2164      	movs	r1, #100	; 0x64
 8003b32:	fb01 f202 	mul.w	r2, r1, r2
 8003b36:	1a9a      	subs	r2, r3, r2
 8003b38:	4613      	mov	r3, r2
 8003b3a:	80fb      	strh	r3, [r7, #6]
   
    if (next_rx_put_idx == uart.rx_buf_get_idx)
 8003b3c:	4b16      	ldr	r3, [pc, #88]	; (8003b98 <read_rdr+0x80>)
 8003b3e:	88db      	ldrh	r3, [r3, #6]
 8003b40:	88fa      	ldrh	r2, [r7, #6]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d115      	bne.n	8003b72 <read_rdr+0x5a>
    {
        INC_SAT_U16(uart_pms[CNT_RX_BUF_OVERRUN]);
 8003b46:	4b16      	ldr	r3, [pc, #88]	; (8003ba0 <read_rdr+0x88>)
 8003b48:	895a      	ldrh	r2, [r3, #10]
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <read_rdr+0x88>)
 8003b4c:	895b      	ldrh	r3, [r3, #10]
 8003b4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b52:	428b      	cmp	r3, r1
 8003b54:	bf14      	ite	ne
 8003b56:	2301      	movne	r3, #1
 8003b58:	2300      	moveq	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <read_rdr+0x88>)
 8003b64:	815a      	strh	r2, [r3, #10]
        LL_USART_RequestRxDataFlush(uart.uart_reg_base); // Drop character.
 8003b66:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <read_rdr+0x80>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff fe61 	bl	8003832 <LL_USART_RequestRxDataFlush>
    else
    {
        uart.rx_buf[uart.rx_buf_put_idx] = uart.uart_reg_base->RDR & 0xFFU; // Clears RXNE flag.
        uart.rx_buf_put_idx = next_rx_put_idx;
    }
}
 8003b70:	e00e      	b.n	8003b90 <read_rdr+0x78>
        uart.rx_buf[uart.rx_buf_put_idx] = uart.uart_reg_base->RDR & 0xFFU; // Clears RXNE flag.
 8003b72:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <read_rdr+0x80>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <read_rdr+0x80>)
 8003b7c:	891b      	ldrh	r3, [r3, #8]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <read_rdr+0x80>)
 8003b84:	440b      	add	r3, r1
 8003b86:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
        uart.rx_buf_put_idx = next_rx_put_idx;
 8003b8a:	4a03      	ldr	r2, [pc, #12]	; (8003b98 <read_rdr+0x80>)
 8003b8c:	88fb      	ldrh	r3, [r7, #6]
 8003b8e:	8113      	strh	r3, [r2, #8]
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	2000010c 	.word	0x2000010c
 8003b9c:	51eb851f 	.word	0x51eb851f
 8003ba0:	20000580 	.word	0x20000580

08003ba4 <write_tdr>:

/**
 * @brief Write character from transmit buffer to transmit data register (TDR).
 */
static void write_tdr(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
	if (uart.tx_buf_get_idx == uart.tx_buf_put_idx)
 8003ba8:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <write_tdr+0x50>)
 8003baa:	895a      	ldrh	r2, [r3, #10]
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <write_tdr+0x50>)
 8003bae:	899b      	ldrh	r3, [r3, #12]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d105      	bne.n	8003bc0 <write_tdr+0x1c>
	{
		/* Nothing to transmit, disable TXE flag from generating an interrupt. */
		LL_USART_DisableIT_TXE(uart.uart_reg_base);
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <write_tdr+0x50>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fe17 	bl	80037ec <LL_USART_DisableIT_TXE>
	else
	{
		uart.uart_reg_base->TDR = uart.tx_buf[uart.tx_buf_get_idx]; // Clears TXE flag.
		uart.tx_buf_get_idx = (uart.tx_buf_get_idx + 1) % UART_TX_BUF_SIZE;
	}
}
 8003bbe:	e016      	b.n	8003bee <write_tdr+0x4a>
		uart.uart_reg_base->TDR = uart.tx_buf[uart.tx_buf_get_idx]; // Clears TXE flag.
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <write_tdr+0x50>)
 8003bc2:	895b      	ldrh	r3, [r3, #10]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <write_tdr+0x50>)
 8003bc8:	4413      	add	r3, r2
 8003bca:	7b9a      	ldrb	r2, [r3, #14]
 8003bcc:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <write_tdr+0x50>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	b292      	uxth	r2, r2
 8003bd2:	851a      	strh	r2, [r3, #40]	; 0x28
		uart.tx_buf_get_idx = (uart.tx_buf_get_idx + 1) % UART_TX_BUF_SIZE;
 8003bd4:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <write_tdr+0x50>)
 8003bd6:	895b      	ldrh	r3, [r3, #10]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	425a      	negs	r2, r3
 8003bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003be4:	bf58      	it	pl
 8003be6:	4253      	negpl	r3, r2
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	4b02      	ldr	r3, [pc, #8]	; (8003bf4 <write_tdr+0x50>)
 8003bec:	815a      	strh	r2, [r3, #10]
}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	2000010c 	.word	0x2000010c

08003bf8 <UART_ISR>:


static void UART_ISR(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
    /* Read interrupt status register. */
    uint32_t status_reg = uart.uart_reg_base->ISR;
 8003bfe:	4b41      	ldr	r3, [pc, #260]	; (8003d04 <UART_ISR+0x10c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	607b      	str	r3, [r7, #4]

    /* Service interrupt flags. */
    if (status_reg & USART_ISR_RXNE_Msk)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f003 0320 	and.w	r3, r3, #32
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <UART_ISR+0x1c>
    {
        read_rdr();
 8003c10:	f7ff ff82 	bl	8003b18 <read_rdr>
    }
    if (status_reg & USART_ISR_TXE_Msk)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <UART_ISR+0x2a>
    {
    	write_tdr();
 8003c1e:	f7ff ffc1 	bl	8003ba4 <write_tdr>
    }

    /* Check error flags. */
    if (status_reg & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE | USART_ISR_PE))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d067      	beq.n	8003cfc <UART_ISR+0x104>
    {
          if (status_reg & LL_USART_ISR_ORE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d014      	beq.n	8003c60 <UART_ISR+0x68>
          {   // An overrun error occurs if a character is received and RXNE has not been reset.
        	  // The RDR register content is not lost but the shift register is overwritten by incoming data.
              INC_SAT_U16(uart_pms[CNT_RX_UART_ORE]);
 8003c36:	4b34      	ldr	r3, [pc, #208]	; (8003d08 <UART_ISR+0x110>)
 8003c38:	881a      	ldrh	r2, [r3, #0]
 8003c3a:	4b33      	ldr	r3, [pc, #204]	; (8003d08 <UART_ISR+0x110>)
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c42:	428b      	cmp	r3, r1
 8003c44:	bf14      	ite	ne
 8003c46:	2301      	movne	r3, #1
 8003c48:	2300      	moveq	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	4413      	add	r3, r2
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <UART_ISR+0x110>)
 8003c54:	801a      	strh	r2, [r3, #0]
              LL_USART_ClearFlag_ORE(uart.uart_reg_base);
 8003c56:	4b2b      	ldr	r3, [pc, #172]	; (8003d04 <UART_ISR+0x10c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff fd99 	bl	8003792 <LL_USART_ClearFlag_ORE>
          }
          if (status_reg & LL_USART_ISR_NE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d014      	beq.n	8003c94 <UART_ISR+0x9c>
          {
              INC_SAT_U16(uart_pms[CNT_RX_UART_NE]);
 8003c6a:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <UART_ISR+0x110>)
 8003c6c:	885a      	ldrh	r2, [r3, #2]
 8003c6e:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <UART_ISR+0x110>)
 8003c70:	885b      	ldrh	r3, [r3, #2]
 8003c72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c76:	428b      	cmp	r3, r1
 8003c78:	bf14      	ite	ne
 8003c7a:	2301      	movne	r3, #1
 8003c7c:	2300      	moveq	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <UART_ISR+0x110>)
 8003c88:	805a      	strh	r2, [r3, #2]
              LL_USART_ClearFlag_NE(uart.uart_reg_base);
 8003c8a:	4b1e      	ldr	r3, [pc, #120]	; (8003d04 <UART_ISR+0x10c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fd72 	bl	8003778 <LL_USART_ClearFlag_NE>
          }
          if (status_reg & LL_USART_ISR_FE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d014      	beq.n	8003cc8 <UART_ISR+0xd0>
          {
              INC_SAT_U16(uart_pms[CNT_RX_UART_FE]);
 8003c9e:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <UART_ISR+0x110>)
 8003ca0:	889a      	ldrh	r2, [r3, #4]
 8003ca2:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <UART_ISR+0x110>)
 8003ca4:	889b      	ldrh	r3, [r3, #4]
 8003ca6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003caa:	428b      	cmp	r3, r1
 8003cac:	bf14      	ite	ne
 8003cae:	2301      	movne	r3, #1
 8003cb0:	2300      	moveq	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	4b13      	ldr	r3, [pc, #76]	; (8003d08 <UART_ISR+0x110>)
 8003cbc:	809a      	strh	r2, [r3, #4]
              LL_USART_ClearFlag_FE(uart.uart_reg_base);
 8003cbe:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <UART_ISR+0x10c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff fd4b 	bl	800375e <LL_USART_ClearFlag_FE>
          }
          if (status_reg & LL_USART_ISR_PE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d014      	beq.n	8003cfc <UART_ISR+0x104>
          {
              INC_SAT_U16(uart_pms[CNT_RX_UART_PE]);
 8003cd2:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <UART_ISR+0x110>)
 8003cd4:	88da      	ldrh	r2, [r3, #6]
 8003cd6:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <UART_ISR+0x110>)
 8003cd8:	88db      	ldrh	r3, [r3, #6]
 8003cda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003cde:	428b      	cmp	r3, r1
 8003ce0:	bf14      	ite	ne
 8003ce2:	2301      	movne	r3, #1
 8003ce4:	2300      	moveq	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	4413      	add	r3, r2
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <UART_ISR+0x110>)
 8003cf0:	80da      	strh	r2, [r3, #6]
              LL_USART_ClearFlag_PE(uart.uart_reg_base);
 8003cf2:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <UART_ISR+0x10c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff fd24 	bl	8003744 <LL_USART_ClearFlag_PE>
          }
    }

}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	2000010c 	.word	0x2000010c
 8003d08:	20000580 	.word	0x20000580

08003d0c <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 8003d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d10:	f7ff fc4a 	bl	80035a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003d14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003d16:	e003      	b.n	8003d20 <LoopCopyDataInit>

08003d18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003d1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003d1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003d1e:	3104      	adds	r1, #4

08003d20 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003d20:	480a      	ldr	r0, [pc, #40]	; (8003d4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003d24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003d26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003d28:	d3f6      	bcc.n	8003d18 <CopyDataInit>
	ldr	r2, =_sbss
 8003d2a:	4a0a      	ldr	r2, [pc, #40]	; (8003d54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003d2c:	e002      	b.n	8003d34 <LoopFillZerobss>

08003d2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003d2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003d30:	f842 3b04 	str.w	r3, [r2], #4

08003d34 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003d34:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <LoopForever+0x16>)
	cmp	r2, r3
 8003d36:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003d38:	d3f9      	bcc.n	8003d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d3a:	f002 fc73 	bl	8006624 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d3e:	f7fd fe4f 	bl	80019e0 <main>

08003d42 <LoopForever>:

LoopForever:
    b LoopForever
 8003d42:	e7fe      	b.n	8003d42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003d44:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003d48:	08006efc 	.word	0x08006efc
	ldr	r0, =_sdata
 8003d4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003d50:	2000009c 	.word	0x2000009c
	ldr	r2, =_sbss
 8003d54:	2000009c 	.word	0x2000009c
	ldr	r3, = _ebss
 8003d58:	20000590 	.word	0x20000590

08003d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d5c:	e7fe      	b.n	8003d5c <ADC1_2_IRQHandler>
	...

08003d60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d6a:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <HAL_Init+0x3c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a0b      	ldr	r2, [pc, #44]	; (8003d9c <HAL_Init+0x3c>)
 8003d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d76:	2003      	movs	r0, #3
 8003d78:	f000 f920 	bl	8003fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	f000 f80f 	bl	8003da0 <HAL_InitTick>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	71fb      	strb	r3, [r7, #7]
 8003d8c:	e001      	b.n	8003d92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d8e:	f7ff fbbd 	bl	800350c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d92:	79fb      	ldrb	r3, [r7, #7]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40022000 	.word	0x40022000

08003da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003dac:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <HAL_InitTick+0x6c>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d023      	beq.n	8003dfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003db4:	4b16      	ldr	r3, [pc, #88]	; (8003e10 <HAL_InitTick+0x70>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b14      	ldr	r3, [pc, #80]	; (8003e0c <HAL_InitTick+0x6c>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f91d 	bl	800400a <HAL_SYSTICK_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10f      	bne.n	8003df6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b0f      	cmp	r3, #15
 8003dda:	d809      	bhi.n	8003df0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ddc:	2200      	movs	r2, #0
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295
 8003de4:	f000 f8f5 	bl	8003fd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003de8:	4a0a      	ldr	r2, [pc, #40]	; (8003e14 <HAL_InitTick+0x74>)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	e007      	b.n	8003e00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
 8003df4:	e004      	b.n	8003e00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	73fb      	strb	r3, [r7, #15]
 8003dfa:	e001      	b.n	8003e00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000098 	.word	0x20000098
 8003e10:	2000005c 	.word	0x2000005c
 8003e14:	20000094 	.word	0x20000094

08003e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_IncTick+0x20>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_IncTick+0x24>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4413      	add	r3, r2
 8003e28:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <HAL_IncTick+0x24>)
 8003e2a:	6013      	str	r3, [r2, #0]
}
 8003e2c:	bf00      	nop
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000098 	.word	0x20000098
 8003e3c:	2000058c 	.word	0x2000058c

08003e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  return uwTick;
 8003e44:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <HAL_GetTick+0x14>)
 8003e46:	681b      	ldr	r3, [r3, #0]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	2000058c 	.word	0x2000058c

08003e58 <__NVIC_SetPriorityGrouping>:
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e68:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <__NVIC_SetPriorityGrouping+0x44>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e74:	4013      	ands	r3, r2
 8003e76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e8a:	4a04      	ldr	r2, [pc, #16]	; (8003e9c <__NVIC_SetPriorityGrouping+0x44>)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	60d3      	str	r3, [r2, #12]
}
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	e000ed00 	.word	0xe000ed00

08003ea0 <__NVIC_GetPriorityGrouping>:
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ea4:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	0a1b      	lsrs	r3, r3, #8
 8003eaa:	f003 0307 	and.w	r3, r3, #7
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <__NVIC_SetPriority>:
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	6039      	str	r1, [r7, #0]
 8003ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	db0a      	blt.n	8003ee6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	490c      	ldr	r1, [pc, #48]	; (8003f08 <__NVIC_SetPriority+0x4c>)
 8003ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eda:	0112      	lsls	r2, r2, #4
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	440b      	add	r3, r1
 8003ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ee4:	e00a      	b.n	8003efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	4908      	ldr	r1, [pc, #32]	; (8003f0c <__NVIC_SetPriority+0x50>)
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	3b04      	subs	r3, #4
 8003ef4:	0112      	lsls	r2, r2, #4
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	440b      	add	r3, r1
 8003efa:	761a      	strb	r2, [r3, #24]
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	e000e100 	.word	0xe000e100
 8003f0c:	e000ed00 	.word	0xe000ed00

08003f10 <NVIC_EncodePriority>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	b089      	sub	sp, #36	; 0x24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f1c3 0307 	rsb	r3, r3, #7
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	bf28      	it	cs
 8003f2e:	2304      	movcs	r3, #4
 8003f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	3304      	adds	r3, #4
 8003f36:	2b06      	cmp	r3, #6
 8003f38:	d902      	bls.n	8003f40 <NVIC_EncodePriority+0x30>
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3b03      	subs	r3, #3
 8003f3e:	e000      	b.n	8003f42 <NVIC_EncodePriority+0x32>
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f44:	f04f 32ff 	mov.w	r2, #4294967295
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43da      	mvns	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	401a      	ands	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f58:	f04f 31ff 	mov.w	r1, #4294967295
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f62:	43d9      	mvns	r1, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f68:	4313      	orrs	r3, r2
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3724      	adds	r7, #36	; 0x24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f88:	d301      	bcc.n	8003f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e00f      	b.n	8003fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f8e:	4a0a      	ldr	r2, [pc, #40]	; (8003fb8 <SysTick_Config+0x40>)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f96:	210f      	movs	r1, #15
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	f7ff ff8e 	bl	8003ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <SysTick_Config+0x40>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fa6:	4b04      	ldr	r3, [pc, #16]	; (8003fb8 <SysTick_Config+0x40>)
 8003fa8:	2207      	movs	r2, #7
 8003faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	e000e010 	.word	0xe000e010

08003fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff ff47 	bl	8003e58 <__NVIC_SetPriorityGrouping>
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b086      	sub	sp, #24
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	4603      	mov	r3, r0
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
 8003fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fe4:	f7ff ff5c 	bl	8003ea0 <__NVIC_GetPriorityGrouping>
 8003fe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68b9      	ldr	r1, [r7, #8]
 8003fee:	6978      	ldr	r0, [r7, #20]
 8003ff0:	f7ff ff8e 	bl	8003f10 <NVIC_EncodePriority>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff ff5d 	bl	8003ebc <__NVIC_SetPriority>
}
 8004002:	bf00      	nop
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff ffb0 	bl	8003f78 <SysTick_Config>
 8004018:	4603      	mov	r3, r0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004032:	e17f      	b.n	8004334 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	2101      	movs	r1, #1
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	4013      	ands	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 8171 	beq.w	800432e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d00b      	beq.n	800406c <HAL_GPIO_Init+0x48>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d007      	beq.n	800406c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004060:	2b11      	cmp	r3, #17
 8004062:	d003      	beq.n	800406c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b12      	cmp	r3, #18
 800406a:	d130      	bne.n	80040ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	2203      	movs	r2, #3
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4013      	ands	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040a2:	2201      	movs	r2, #1
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4013      	ands	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	f003 0201 	and.w	r2, r3, #1
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d118      	bne.n	800410c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80040e0:	2201      	movs	r2, #1
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4013      	ands	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	08db      	lsrs	r3, r3, #3
 80040f6:	f003 0201 	and.w	r2, r3, #1
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	2203      	movs	r2, #3
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	43db      	mvns	r3, r3
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4013      	ands	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d003      	beq.n	800414c <HAL_GPIO_Init+0x128>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b12      	cmp	r3, #18
 800414a:	d123      	bne.n	8004194 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	08da      	lsrs	r2, r3, #3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3208      	adds	r2, #8
 8004154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004158:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	220f      	movs	r2, #15
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4013      	ands	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	08da      	lsrs	r2, r3, #3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3208      	adds	r2, #8
 800418e:	6939      	ldr	r1, [r7, #16]
 8004190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	2203      	movs	r2, #3
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	43db      	mvns	r3, r3
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 0203 	and.w	r2, r3, #3
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80ac 	beq.w	800432e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041d6:	4b5f      	ldr	r3, [pc, #380]	; (8004354 <HAL_GPIO_Init+0x330>)
 80041d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041da:	4a5e      	ldr	r2, [pc, #376]	; (8004354 <HAL_GPIO_Init+0x330>)
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	6613      	str	r3, [r2, #96]	; 0x60
 80041e2:	4b5c      	ldr	r3, [pc, #368]	; (8004354 <HAL_GPIO_Init+0x330>)
 80041e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041ee:	4a5a      	ldr	r2, [pc, #360]	; (8004358 <HAL_GPIO_Init+0x334>)
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	089b      	lsrs	r3, r3, #2
 80041f4:	3302      	adds	r3, #2
 80041f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	220f      	movs	r2, #15
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	43db      	mvns	r3, r3
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4013      	ands	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004218:	d025      	beq.n	8004266 <HAL_GPIO_Init+0x242>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a4f      	ldr	r2, [pc, #316]	; (800435c <HAL_GPIO_Init+0x338>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d01f      	beq.n	8004262 <HAL_GPIO_Init+0x23e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a4e      	ldr	r2, [pc, #312]	; (8004360 <HAL_GPIO_Init+0x33c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d019      	beq.n	800425e <HAL_GPIO_Init+0x23a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a4d      	ldr	r2, [pc, #308]	; (8004364 <HAL_GPIO_Init+0x340>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d013      	beq.n	800425a <HAL_GPIO_Init+0x236>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a4c      	ldr	r2, [pc, #304]	; (8004368 <HAL_GPIO_Init+0x344>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00d      	beq.n	8004256 <HAL_GPIO_Init+0x232>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a4b      	ldr	r2, [pc, #300]	; (800436c <HAL_GPIO_Init+0x348>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d007      	beq.n	8004252 <HAL_GPIO_Init+0x22e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a4a      	ldr	r2, [pc, #296]	; (8004370 <HAL_GPIO_Init+0x34c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d101      	bne.n	800424e <HAL_GPIO_Init+0x22a>
 800424a:	2306      	movs	r3, #6
 800424c:	e00c      	b.n	8004268 <HAL_GPIO_Init+0x244>
 800424e:	2307      	movs	r3, #7
 8004250:	e00a      	b.n	8004268 <HAL_GPIO_Init+0x244>
 8004252:	2305      	movs	r3, #5
 8004254:	e008      	b.n	8004268 <HAL_GPIO_Init+0x244>
 8004256:	2304      	movs	r3, #4
 8004258:	e006      	b.n	8004268 <HAL_GPIO_Init+0x244>
 800425a:	2303      	movs	r3, #3
 800425c:	e004      	b.n	8004268 <HAL_GPIO_Init+0x244>
 800425e:	2302      	movs	r3, #2
 8004260:	e002      	b.n	8004268 <HAL_GPIO_Init+0x244>
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <HAL_GPIO_Init+0x244>
 8004266:	2300      	movs	r3, #0
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	f002 0203 	and.w	r2, r2, #3
 800426e:	0092      	lsls	r2, r2, #2
 8004270:	4093      	lsls	r3, r2
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004278:	4937      	ldr	r1, [pc, #220]	; (8004358 <HAL_GPIO_Init+0x334>)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	089b      	lsrs	r3, r3, #2
 800427e:	3302      	adds	r3, #2
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004286:	4b3b      	ldr	r3, [pc, #236]	; (8004374 <HAL_GPIO_Init+0x350>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	43db      	mvns	r3, r3
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4013      	ands	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042aa:	4a32      	ldr	r2, [pc, #200]	; (8004374 <HAL_GPIO_Init+0x350>)
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80042b0:	4b30      	ldr	r3, [pc, #192]	; (8004374 <HAL_GPIO_Init+0x350>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4013      	ands	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042d4:	4a27      	ldr	r2, [pc, #156]	; (8004374 <HAL_GPIO_Init+0x350>)
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042da:	4b26      	ldr	r3, [pc, #152]	; (8004374 <HAL_GPIO_Init+0x350>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	43db      	mvns	r3, r3
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4013      	ands	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042fe:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <HAL_GPIO_Init+0x350>)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004304:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <HAL_GPIO_Init+0x350>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	43db      	mvns	r3, r3
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4013      	ands	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004328:	4a12      	ldr	r2, [pc, #72]	; (8004374 <HAL_GPIO_Init+0x350>)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	3301      	adds	r3, #1
 8004332:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	fa22 f303 	lsr.w	r3, r2, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	f47f ae78 	bne.w	8004034 <HAL_GPIO_Init+0x10>
  }
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40021000 	.word	0x40021000
 8004358:	40010000 	.word	0x40010000
 800435c:	48000400 	.word	0x48000400
 8004360:	48000800 	.word	0x48000800
 8004364:	48000c00 	.word	0x48000c00
 8004368:	48001000 	.word	0x48001000
 800436c:	48001400 	.word	0x48001400
 8004370:	48001800 	.word	0x48001800
 8004374:	40010400 	.word	0x40010400

08004378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	807b      	strh	r3, [r7, #2]
 8004384:	4613      	mov	r3, r2
 8004386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004388:	787b      	ldrb	r3, [r7, #1]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800438e:	887a      	ldrh	r2, [r7, #2]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004394:	e002      	b.n	800439c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004396:	887a      	ldrh	r2, [r7, #2]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043ac:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40007000 	.word	0x40007000

080043c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d2:	d130      	bne.n	8004436 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043d4:	4b23      	ldr	r3, [pc, #140]	; (8004464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e0:	d038      	beq.n	8004454 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043e2:	4b20      	ldr	r3, [pc, #128]	; (8004464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043ea:	4a1e      	ldr	r2, [pc, #120]	; (8004464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043f2:	4b1d      	ldr	r3, [pc, #116]	; (8004468 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2232      	movs	r2, #50	; 0x32
 80043f8:	fb02 f303 	mul.w	r3, r2, r3
 80043fc:	4a1b      	ldr	r2, [pc, #108]	; (800446c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	0c9b      	lsrs	r3, r3, #18
 8004404:	3301      	adds	r3, #1
 8004406:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004408:	e002      	b.n	8004410 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3b01      	subs	r3, #1
 800440e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004410:	4b14      	ldr	r3, [pc, #80]	; (8004464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441c:	d102      	bne.n	8004424 <HAL_PWREx_ControlVoltageScaling+0x60>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f2      	bne.n	800440a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004424:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004430:	d110      	bne.n	8004454 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e00f      	b.n	8004456 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004436:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800443e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004442:	d007      	beq.n	8004454 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004444:	4b07      	ldr	r3, [pc, #28]	; (8004464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800444c:	4a05      	ldr	r2, [pc, #20]	; (8004464 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800444e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004452:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40007000 	.word	0x40007000
 8004468:	2000005c 	.word	0x2000005c
 800446c:	431bde83 	.word	0x431bde83

08004470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e3d4      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004482:	4ba1      	ldr	r3, [pc, #644]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 030c 	and.w	r3, r3, #12
 800448a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800448c:	4b9e      	ldr	r3, [pc, #632]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0310 	and.w	r3, r3, #16
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 80e4 	beq.w	800466c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <HAL_RCC_OscConfig+0x4a>
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2b0c      	cmp	r3, #12
 80044ae:	f040 808b 	bne.w	80045c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	f040 8087 	bne.w	80045c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044ba:	4b93      	ldr	r3, [pc, #588]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <HAL_RCC_OscConfig+0x62>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e3ac      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1a      	ldr	r2, [r3, #32]
 80044d6:	4b8c      	ldr	r3, [pc, #560]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d004      	beq.n	80044ec <HAL_RCC_OscConfig+0x7c>
 80044e2:	4b89      	ldr	r3, [pc, #548]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ea:	e005      	b.n	80044f8 <HAL_RCC_OscConfig+0x88>
 80044ec:	4b86      	ldr	r3, [pc, #536]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 80044ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d223      	bcs.n	8004544 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fd09 	bl	8004f18 <RCC_SetFlashLatencyFromMSIRange>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e38d      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004510:	4b7d      	ldr	r3, [pc, #500]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a7c      	ldr	r2, [pc, #496]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 8004516:	f043 0308 	orr.w	r3, r3, #8
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	4b7a      	ldr	r3, [pc, #488]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	4977      	ldr	r1, [pc, #476]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 800452a:	4313      	orrs	r3, r2
 800452c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800452e:	4b76      	ldr	r3, [pc, #472]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	4972      	ldr	r1, [pc, #456]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 800453e:	4313      	orrs	r3, r2
 8004540:	604b      	str	r3, [r1, #4]
 8004542:	e025      	b.n	8004590 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004544:	4b70      	ldr	r3, [pc, #448]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a6f      	ldr	r2, [pc, #444]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 800454a:	f043 0308 	orr.w	r3, r3, #8
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	4b6d      	ldr	r3, [pc, #436]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	496a      	ldr	r1, [pc, #424]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 800455e:	4313      	orrs	r3, r2
 8004560:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004562:	4b69      	ldr	r3, [pc, #420]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	4965      	ldr	r1, [pc, #404]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 8004572:	4313      	orrs	r3, r2
 8004574:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d109      	bne.n	8004590 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fcc9 	bl	8004f18 <RCC_SetFlashLatencyFromMSIRange>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e34d      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004590:	f000 fc36 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8004594:	4602      	mov	r2, r0
 8004596:	4b5c      	ldr	r3, [pc, #368]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	091b      	lsrs	r3, r3, #4
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	495a      	ldr	r1, [pc, #360]	; (800470c <HAL_RCC_OscConfig+0x29c>)
 80045a2:	5ccb      	ldrb	r3, [r1, r3]
 80045a4:	f003 031f 	and.w	r3, r3, #31
 80045a8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ac:	4a58      	ldr	r2, [pc, #352]	; (8004710 <HAL_RCC_OscConfig+0x2a0>)
 80045ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045b0:	4b58      	ldr	r3, [pc, #352]	; (8004714 <HAL_RCC_OscConfig+0x2a4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fbf3 	bl	8003da0 <HAL_InitTick>
 80045ba:	4603      	mov	r3, r0
 80045bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d052      	beq.n	800466a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	e331      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d032      	beq.n	8004636 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045d0:	4b4d      	ldr	r3, [pc, #308]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a4c      	ldr	r2, [pc, #304]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 80045d6:	f043 0301 	orr.w	r3, r3, #1
 80045da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045dc:	f7ff fc30 	bl	8003e40 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045e4:	f7ff fc2c 	bl	8003e40 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e31a      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045f6:	4b44      	ldr	r3, [pc, #272]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004602:	4b41      	ldr	r3, [pc, #260]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a40      	ldr	r2, [pc, #256]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 8004608:	f043 0308 	orr.w	r3, r3, #8
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	4b3e      	ldr	r3, [pc, #248]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	493b      	ldr	r1, [pc, #236]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 800461c:	4313      	orrs	r3, r2
 800461e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004620:	4b39      	ldr	r3, [pc, #228]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	4936      	ldr	r1, [pc, #216]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 8004630:	4313      	orrs	r3, r2
 8004632:	604b      	str	r3, [r1, #4]
 8004634:	e01a      	b.n	800466c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004636:	4b34      	ldr	r3, [pc, #208]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a33      	ldr	r2, [pc, #204]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004642:	f7ff fbfd 	bl	8003e40 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800464a:	f7ff fbf9 	bl	8003e40 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e2e7      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800465c:	4b2a      	ldr	r3, [pc, #168]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f0      	bne.n	800464a <HAL_RCC_OscConfig+0x1da>
 8004668:	e000      	b.n	800466c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800466a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d074      	beq.n	8004762 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b08      	cmp	r3, #8
 800467c:	d005      	beq.n	800468a <HAL_RCC_OscConfig+0x21a>
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b0c      	cmp	r3, #12
 8004682:	d10e      	bne.n	80046a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2b03      	cmp	r3, #3
 8004688:	d10b      	bne.n	80046a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468a:	4b1f      	ldr	r3, [pc, #124]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d064      	beq.n	8004760 <HAL_RCC_OscConfig+0x2f0>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d160      	bne.n	8004760 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e2c4      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046aa:	d106      	bne.n	80046ba <HAL_RCC_OscConfig+0x24a>
 80046ac:	4b16      	ldr	r3, [pc, #88]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a15      	ldr	r2, [pc, #84]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 80046b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	e01d      	b.n	80046f6 <HAL_RCC_OscConfig+0x286>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c2:	d10c      	bne.n	80046de <HAL_RCC_OscConfig+0x26e>
 80046c4:	4b10      	ldr	r3, [pc, #64]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a0f      	ldr	r2, [pc, #60]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 80046ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a0c      	ldr	r2, [pc, #48]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 80046d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	e00b      	b.n	80046f6 <HAL_RCC_OscConfig+0x286>
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a09      	ldr	r2, [pc, #36]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 80046e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	4b07      	ldr	r3, [pc, #28]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a06      	ldr	r2, [pc, #24]	; (8004708 <HAL_RCC_OscConfig+0x298>)
 80046f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d01c      	beq.n	8004738 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fe:	f7ff fb9f 	bl	8003e40 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004704:	e011      	b.n	800472a <HAL_RCC_OscConfig+0x2ba>
 8004706:	bf00      	nop
 8004708:	40021000 	.word	0x40021000
 800470c:	08006da0 	.word	0x08006da0
 8004710:	2000005c 	.word	0x2000005c
 8004714:	20000094 	.word	0x20000094
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004718:	f7ff fb92 	bl	8003e40 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	; 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e280      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800472a:	4baf      	ldr	r3, [pc, #700]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0x2a8>
 8004736:	e014      	b.n	8004762 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004738:	f7ff fb82 	bl	8003e40 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004740:	f7ff fb7e 	bl	8003e40 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b64      	cmp	r3, #100	; 0x64
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e26c      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004752:	4ba5      	ldr	r3, [pc, #660]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x2d0>
 800475e:	e000      	b.n	8004762 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d060      	beq.n	8004830 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	2b04      	cmp	r3, #4
 8004772:	d005      	beq.n	8004780 <HAL_RCC_OscConfig+0x310>
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b0c      	cmp	r3, #12
 8004778:	d119      	bne.n	80047ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d116      	bne.n	80047ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004780:	4b99      	ldr	r3, [pc, #612]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_OscConfig+0x328>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e249      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004798:	4b93      	ldr	r3, [pc, #588]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	061b      	lsls	r3, r3, #24
 80047a6:	4990      	ldr	r1, [pc, #576]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047ac:	e040      	b.n	8004830 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d023      	beq.n	80047fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b6:	4b8c      	ldr	r3, [pc, #560]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a8b      	ldr	r2, [pc, #556]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c2:	f7ff fb3d 	bl	8003e40 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ca:	f7ff fb39 	bl	8003e40 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e227      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047dc:	4b82      	ldr	r3, [pc, #520]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e8:	4b7f      	ldr	r3, [pc, #508]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	061b      	lsls	r3, r3, #24
 80047f6:	497c      	ldr	r1, [pc, #496]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	604b      	str	r3, [r1, #4]
 80047fc:	e018      	b.n	8004830 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047fe:	4b7a      	ldr	r3, [pc, #488]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a79      	ldr	r2, [pc, #484]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 8004804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480a:	f7ff fb19 	bl	8003e40 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004812:	f7ff fb15 	bl	8003e40 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e203      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004824:	4b70      	ldr	r3, [pc, #448]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f0      	bne.n	8004812 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b00      	cmp	r3, #0
 800483a:	d03c      	beq.n	80048b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01c      	beq.n	800487e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004844:	4b68      	ldr	r3, [pc, #416]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 8004846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800484a:	4a67      	ldr	r2, [pc, #412]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004854:	f7ff faf4 	bl	8003e40 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800485c:	f7ff faf0 	bl	8003e40 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e1de      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800486e:	4b5e      	ldr	r3, [pc, #376]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 8004870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0ef      	beq.n	800485c <HAL_RCC_OscConfig+0x3ec>
 800487c:	e01b      	b.n	80048b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800487e:	4b5a      	ldr	r3, [pc, #360]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 8004880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004884:	4a58      	ldr	r2, [pc, #352]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488e:	f7ff fad7 	bl	8003e40 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004896:	f7ff fad3 	bl	8003e40 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e1c1      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048a8:	4b4f      	ldr	r3, [pc, #316]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 80048aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1ef      	bne.n	8004896 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80a6 	beq.w	8004a10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048c4:	2300      	movs	r3, #0
 80048c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048c8:	4b47      	ldr	r3, [pc, #284]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 80048ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10d      	bne.n	80048f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048d4:	4b44      	ldr	r3, [pc, #272]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 80048d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d8:	4a43      	ldr	r2, [pc, #268]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 80048da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048de:	6593      	str	r3, [r2, #88]	; 0x58
 80048e0:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e8:	60bb      	str	r3, [r7, #8]
 80048ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ec:	2301      	movs	r3, #1
 80048ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048f0:	4b3e      	ldr	r3, [pc, #248]	; (80049ec <HAL_RCC_OscConfig+0x57c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d118      	bne.n	800492e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048fc:	4b3b      	ldr	r3, [pc, #236]	; (80049ec <HAL_RCC_OscConfig+0x57c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a3a      	ldr	r2, [pc, #232]	; (80049ec <HAL_RCC_OscConfig+0x57c>)
 8004902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004906:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004908:	f7ff fa9a 	bl	8003e40 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004910:	f7ff fa96 	bl	8003e40 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e184      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004922:	4b32      	ldr	r3, [pc, #200]	; (80049ec <HAL_RCC_OscConfig+0x57c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0f0      	beq.n	8004910 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d108      	bne.n	8004948 <HAL_RCC_OscConfig+0x4d8>
 8004936:	4b2c      	ldr	r3, [pc, #176]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 8004938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493c:	4a2a      	ldr	r2, [pc, #168]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004946:	e024      	b.n	8004992 <HAL_RCC_OscConfig+0x522>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2b05      	cmp	r3, #5
 800494e:	d110      	bne.n	8004972 <HAL_RCC_OscConfig+0x502>
 8004950:	4b25      	ldr	r3, [pc, #148]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004956:	4a24      	ldr	r2, [pc, #144]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 8004958:	f043 0304 	orr.w	r3, r3, #4
 800495c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004960:	4b21      	ldr	r3, [pc, #132]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004966:	4a20      	ldr	r2, [pc, #128]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 8004968:	f043 0301 	orr.w	r3, r3, #1
 800496c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004970:	e00f      	b.n	8004992 <HAL_RCC_OscConfig+0x522>
 8004972:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 8004974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004978:	4a1b      	ldr	r2, [pc, #108]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 800497a:	f023 0301 	bic.w	r3, r3, #1
 800497e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004982:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004988:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 800498a:	f023 0304 	bic.w	r3, r3, #4
 800498e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d016      	beq.n	80049c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499a:	f7ff fa51 	bl	8003e40 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a0:	e00a      	b.n	80049b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a2:	f7ff fa4d 	bl	8003e40 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e139      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049b8:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_RCC_OscConfig+0x578>)
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0ed      	beq.n	80049a2 <HAL_RCC_OscConfig+0x532>
 80049c6:	e01a      	b.n	80049fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c8:	f7ff fa3a 	bl	8003e40 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049ce:	e00f      	b.n	80049f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d0:	f7ff fa36 	bl	8003e40 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	; 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d906      	bls.n	80049f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e122      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
 80049e6:	bf00      	nop
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049f0:	4b90      	ldr	r3, [pc, #576]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1e8      	bne.n	80049d0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049fe:	7ffb      	ldrb	r3, [r7, #31]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d105      	bne.n	8004a10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a04:	4b8b      	ldr	r3, [pc, #556]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a08:	4a8a      	ldr	r2, [pc, #552]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 8108 	beq.w	8004c2a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	f040 80d0 	bne.w	8004bc4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a24:	4b83      	ldr	r3, [pc, #524]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f003 0203 	and.w	r2, r3, #3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d130      	bne.n	8004a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	3b01      	subs	r3, #1
 8004a44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d127      	bne.n	8004a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d11f      	bne.n	8004a9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a64:	2a07      	cmp	r2, #7
 8004a66:	bf14      	ite	ne
 8004a68:	2201      	movne	r2, #1
 8004a6a:	2200      	moveq	r2, #0
 8004a6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d113      	bne.n	8004a9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7c:	085b      	lsrs	r3, r3, #1
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d109      	bne.n	8004a9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a90:	085b      	lsrs	r3, r3, #1
 8004a92:	3b01      	subs	r3, #1
 8004a94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d06e      	beq.n	8004b78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b0c      	cmp	r3, #12
 8004a9e:	d069      	beq.n	8004b74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004aa0:	4b64      	ldr	r3, [pc, #400]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d105      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004aac:	4b61      	ldr	r3, [pc, #388]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0b7      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004abc:	4b5d      	ldr	r3, [pc, #372]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a5c      	ldr	r2, [pc, #368]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ac6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ac8:	f7ff f9ba 	bl	8003e40 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad0:	f7ff f9b6 	bl	8003e40 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e0a4      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ae2:	4b54      	ldr	r3, [pc, #336]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aee:	4b51      	ldr	r3, [pc, #324]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	4b51      	ldr	r3, [pc, #324]	; (8004c38 <HAL_RCC_OscConfig+0x7c8>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004afe:	3a01      	subs	r2, #1
 8004b00:	0112      	lsls	r2, r2, #4
 8004b02:	4311      	orrs	r1, r2
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b08:	0212      	lsls	r2, r2, #8
 8004b0a:	4311      	orrs	r1, r2
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b10:	0852      	lsrs	r2, r2, #1
 8004b12:	3a01      	subs	r2, #1
 8004b14:	0552      	lsls	r2, r2, #21
 8004b16:	4311      	orrs	r1, r2
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b1c:	0852      	lsrs	r2, r2, #1
 8004b1e:	3a01      	subs	r2, #1
 8004b20:	0652      	lsls	r2, r2, #25
 8004b22:	4311      	orrs	r1, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b28:	0912      	lsrs	r2, r2, #4
 8004b2a:	0452      	lsls	r2, r2, #17
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	4941      	ldr	r1, [pc, #260]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b34:	4b3f      	ldr	r3, [pc, #252]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a3e      	ldr	r2, [pc, #248]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b40:	4b3c      	ldr	r3, [pc, #240]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	4a3b      	ldr	r2, [pc, #236]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b4c:	f7ff f978 	bl	8003e40 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b54:	f7ff f974 	bl	8003e40 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e062      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b66:	4b33      	ldr	r3, [pc, #204]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b72:	e05a      	b.n	8004c2a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e059      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b78:	4b2e      	ldr	r3, [pc, #184]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d152      	bne.n	8004c2a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b84:	4b2b      	ldr	r3, [pc, #172]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a2a      	ldr	r2, [pc, #168]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b90:	4b28      	ldr	r3, [pc, #160]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4a27      	ldr	r2, [pc, #156]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b9c:	f7ff f950 	bl	8003e40 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7ff f94c 	bl	8003e40 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e03a      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb6:	4b1f      	ldr	r3, [pc, #124]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x734>
 8004bc2:	e032      	b.n	8004c2a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b0c      	cmp	r3, #12
 8004bc8:	d02d      	beq.n	8004c26 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bca:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a19      	ldr	r2, [pc, #100]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004bd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bd4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004bd6:	4b17      	ldr	r3, [pc, #92]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d105      	bne.n	8004bee <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004be2:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004be8:	f023 0303 	bic.w	r3, r3, #3
 8004bec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004bee:	4b11      	ldr	r3, [pc, #68]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	4a10      	ldr	r2, [pc, #64]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004bf4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bfc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfe:	f7ff f91f 	bl	8003e40 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c06:	f7ff f91b 	bl	8003e40 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e009      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c18:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <HAL_RCC_OscConfig+0x7c4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1f0      	bne.n	8004c06 <HAL_RCC_OscConfig+0x796>
 8004c24:	e001      	b.n	8004c2a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3720      	adds	r7, #32
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000
 8004c38:	f99d808c 	.word	0xf99d808c

08004c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0c8      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c50:	4b66      	ldr	r3, [pc, #408]	; (8004dec <HAL_RCC_ClockConfig+0x1b0>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d910      	bls.n	8004c80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5e:	4b63      	ldr	r3, [pc, #396]	; (8004dec <HAL_RCC_ClockConfig+0x1b0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f023 0207 	bic.w	r2, r3, #7
 8004c66:	4961      	ldr	r1, [pc, #388]	; (8004dec <HAL_RCC_ClockConfig+0x1b0>)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6e:	4b5f      	ldr	r3, [pc, #380]	; (8004dec <HAL_RCC_ClockConfig+0x1b0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e0b0      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d04c      	beq.n	8004d26 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d107      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c94:	4b56      	ldr	r3, [pc, #344]	; (8004df0 <HAL_RCC_ClockConfig+0x1b4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d121      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e09e      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d107      	bne.n	8004cbc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cac:	4b50      	ldr	r3, [pc, #320]	; (8004df0 <HAL_RCC_ClockConfig+0x1b4>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d115      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e092      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d107      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cc4:	4b4a      	ldr	r3, [pc, #296]	; (8004df0 <HAL_RCC_ClockConfig+0x1b4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d109      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e086      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cd4:	4b46      	ldr	r3, [pc, #280]	; (8004df0 <HAL_RCC_ClockConfig+0x1b4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e07e      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ce4:	4b42      	ldr	r3, [pc, #264]	; (8004df0 <HAL_RCC_ClockConfig+0x1b4>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f023 0203 	bic.w	r2, r3, #3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	493f      	ldr	r1, [pc, #252]	; (8004df0 <HAL_RCC_ClockConfig+0x1b4>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf6:	f7ff f8a3 	bl	8003e40 <HAL_GetTick>
 8004cfa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfc:	e00a      	b.n	8004d14 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cfe:	f7ff f89f 	bl	8003e40 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e066      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d14:	4b36      	ldr	r3, [pc, #216]	; (8004df0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 020c 	and.w	r2, r3, #12
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d1eb      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d008      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d32:	4b2f      	ldr	r3, [pc, #188]	; (8004df0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	492c      	ldr	r1, [pc, #176]	; (8004df0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d44:	4b29      	ldr	r3, [pc, #164]	; (8004dec <HAL_RCC_ClockConfig+0x1b0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d210      	bcs.n	8004d74 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d52:	4b26      	ldr	r3, [pc, #152]	; (8004dec <HAL_RCC_ClockConfig+0x1b0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f023 0207 	bic.w	r2, r3, #7
 8004d5a:	4924      	ldr	r1, [pc, #144]	; (8004dec <HAL_RCC_ClockConfig+0x1b0>)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d62:	4b22      	ldr	r3, [pc, #136]	; (8004dec <HAL_RCC_ClockConfig+0x1b0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e036      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d80:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4918      	ldr	r1, [pc, #96]	; (8004df0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d9e:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <HAL_RCC_ClockConfig+0x1b4>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4910      	ldr	r1, [pc, #64]	; (8004df0 <HAL_RCC_ClockConfig+0x1b4>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004db2:	f000 f825 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8004db6:	4602      	mov	r2, r0
 8004db8:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <HAL_RCC_ClockConfig+0x1b4>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	490c      	ldr	r1, [pc, #48]	; (8004df4 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc4:	5ccb      	ldrb	r3, [r1, r3]
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	fa22 f303 	lsr.w	r3, r2, r3
 8004dce:	4a0a      	ldr	r2, [pc, #40]	; (8004df8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <HAL_RCC_ClockConfig+0x1c0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe ffe2 	bl	8003da0 <HAL_InitTick>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	72fb      	strb	r3, [r7, #11]

  return status;
 8004de0:	7afb      	ldrb	r3, [r7, #11]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	40022000 	.word	0x40022000
 8004df0:	40021000 	.word	0x40021000
 8004df4:	08006da0 	.word	0x08006da0
 8004df8:	2000005c 	.word	0x2000005c
 8004dfc:	20000094 	.word	0x20000094

08004e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b089      	sub	sp, #36	; 0x24
 8004e04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e0e:	4b3e      	ldr	r3, [pc, #248]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 030c 	and.w	r3, r3, #12
 8004e16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e18:	4b3b      	ldr	r3, [pc, #236]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f003 0303 	and.w	r3, r3, #3
 8004e20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_RCC_GetSysClockFreq+0x34>
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2b0c      	cmp	r3, #12
 8004e2c:	d121      	bne.n	8004e72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d11e      	bne.n	8004e72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e34:	4b34      	ldr	r3, [pc, #208]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d107      	bne.n	8004e50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e40:	4b31      	ldr	r3, [pc, #196]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e46:	0a1b      	lsrs	r3, r3, #8
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	e005      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e50:	4b2d      	ldr	r3, [pc, #180]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	091b      	lsrs	r3, r3, #4
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e5c:	4a2b      	ldr	r2, [pc, #172]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10d      	bne.n	8004e88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e70:	e00a      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d102      	bne.n	8004e7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e78:	4b25      	ldr	r3, [pc, #148]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e7a:	61bb      	str	r3, [r7, #24]
 8004e7c:	e004      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d101      	bne.n	8004e88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e84:	4b23      	ldr	r3, [pc, #140]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	2b0c      	cmp	r3, #12
 8004e8c:	d134      	bne.n	8004ef8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e8e:	4b1e      	ldr	r3, [pc, #120]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d003      	beq.n	8004ea6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d003      	beq.n	8004eac <HAL_RCC_GetSysClockFreq+0xac>
 8004ea4:	e005      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ea6:	4b1a      	ldr	r3, [pc, #104]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ea8:	617b      	str	r3, [r7, #20]
      break;
 8004eaa:	e005      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x114>)
 8004eae:	617b      	str	r3, [r7, #20]
      break;
 8004eb0:	e002      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	617b      	str	r3, [r7, #20]
      break;
 8004eb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004eb8:	4b13      	ldr	r3, [pc, #76]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ec6:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	0a1b      	lsrs	r3, r3, #8
 8004ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	fb02 f203 	mul.w	r2, r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004edc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ede:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	0e5b      	lsrs	r3, r3, #25
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	3301      	adds	r3, #1
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ef8:	69bb      	ldr	r3, [r7, #24]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3724      	adds	r7, #36	; 0x24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	08006db8 	.word	0x08006db8
 8004f10:	00f42400 	.word	0x00f42400
 8004f14:	007a1200 	.word	0x007a1200

08004f18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f20:	2300      	movs	r3, #0
 8004f22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f24:	4b2a      	ldr	r3, [pc, #168]	; (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f30:	f7ff fa3a 	bl	80043a8 <HAL_PWREx_GetVoltageRange>
 8004f34:	6178      	str	r0, [r7, #20]
 8004f36:	e014      	b.n	8004f62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f38:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3c:	4a24      	ldr	r2, [pc, #144]	; (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f42:	6593      	str	r3, [r2, #88]	; 0x58
 8004f44:	4b22      	ldr	r3, [pc, #136]	; (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f50:	f7ff fa2a 	bl	80043a8 <HAL_PWREx_GetVoltageRange>
 8004f54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f56:	4b1e      	ldr	r3, [pc, #120]	; (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5a:	4a1d      	ldr	r2, [pc, #116]	; (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f68:	d10b      	bne.n	8004f82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b80      	cmp	r3, #128	; 0x80
 8004f6e:	d919      	bls.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2ba0      	cmp	r3, #160	; 0xa0
 8004f74:	d902      	bls.n	8004f7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f76:	2302      	movs	r3, #2
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	e013      	b.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	613b      	str	r3, [r7, #16]
 8004f80:	e010      	b.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b80      	cmp	r3, #128	; 0x80
 8004f86:	d902      	bls.n	8004f8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f88:	2303      	movs	r3, #3
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	e00a      	b.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b80      	cmp	r3, #128	; 0x80
 8004f92:	d102      	bne.n	8004f9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f94:	2302      	movs	r3, #2
 8004f96:	613b      	str	r3, [r7, #16]
 8004f98:	e004      	b.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b70      	cmp	r3, #112	; 0x70
 8004f9e:	d101      	bne.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f023 0207 	bic.w	r2, r3, #7
 8004fac:	4909      	ldr	r1, [pc, #36]	; (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004fb4:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d001      	beq.n	8004fc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40022000 	.word	0x40022000

08004fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d041      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ff8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ffc:	d02a      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ffe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005002:	d824      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005004:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005008:	d008      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800500a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800500e:	d81e      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005018:	d010      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800501a:	e018      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800501c:	4b86      	ldr	r3, [pc, #536]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4a85      	ldr	r2, [pc, #532]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005026:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005028:	e015      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3304      	adds	r3, #4
 800502e:	2100      	movs	r1, #0
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fabb 	bl	80055ac <RCCEx_PLLSAI1_Config>
 8005036:	4603      	mov	r3, r0
 8005038:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800503a:	e00c      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3320      	adds	r3, #32
 8005040:	2100      	movs	r1, #0
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fba6 	bl	8005794 <RCCEx_PLLSAI2_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800504c:	e003      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	74fb      	strb	r3, [r7, #19]
      break;
 8005052:	e000      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005056:	7cfb      	ldrb	r3, [r7, #19]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10b      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800505c:	4b76      	ldr	r3, [pc, #472]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005062:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800506a:	4973      	ldr	r1, [pc, #460]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005072:	e001      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005074:	7cfb      	ldrb	r3, [r7, #19]
 8005076:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d041      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005088:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800508c:	d02a      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800508e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005092:	d824      	bhi.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005094:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005098:	d008      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800509a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800509e:	d81e      	bhi.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80050a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050a8:	d010      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80050aa:	e018      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050ac:	4b62      	ldr	r3, [pc, #392]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	4a61      	ldr	r2, [pc, #388]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050b8:	e015      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3304      	adds	r3, #4
 80050be:	2100      	movs	r1, #0
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fa73 	bl	80055ac <RCCEx_PLLSAI1_Config>
 80050c6:	4603      	mov	r3, r0
 80050c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050ca:	e00c      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3320      	adds	r3, #32
 80050d0:	2100      	movs	r1, #0
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fb5e 	bl	8005794 <RCCEx_PLLSAI2_Config>
 80050d8:	4603      	mov	r3, r0
 80050da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050dc:	e003      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	74fb      	strb	r3, [r7, #19]
      break;
 80050e2:	e000      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80050e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e6:	7cfb      	ldrb	r3, [r7, #19]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10b      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050ec:	4b52      	ldr	r3, [pc, #328]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050fa:	494f      	ldr	r1, [pc, #316]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005102:	e001      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005104:	7cfb      	ldrb	r3, [r7, #19]
 8005106:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80a0 	beq.w	8005256 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005116:	2300      	movs	r3, #0
 8005118:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800511a:	4b47      	ldr	r3, [pc, #284]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005126:	2301      	movs	r3, #1
 8005128:	e000      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800512a:	2300      	movs	r3, #0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00d      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005130:	4b41      	ldr	r3, [pc, #260]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005134:	4a40      	ldr	r2, [pc, #256]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800513a:	6593      	str	r3, [r2, #88]	; 0x58
 800513c:	4b3e      	ldr	r3, [pc, #248]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005148:	2301      	movs	r3, #1
 800514a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800514c:	4b3b      	ldr	r3, [pc, #236]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a3a      	ldr	r2, [pc, #232]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005158:	f7fe fe72 	bl	8003e40 <HAL_GetTick>
 800515c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800515e:	e009      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005160:	f7fe fe6e 	bl	8003e40 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d902      	bls.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	74fb      	strb	r3, [r7, #19]
        break;
 8005172:	e005      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005174:	4b31      	ldr	r3, [pc, #196]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0ef      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005180:	7cfb      	ldrb	r3, [r7, #19]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d15c      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005186:	4b2c      	ldr	r3, [pc, #176]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005190:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d01f      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d019      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051a4:	4b24      	ldr	r3, [pc, #144]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051b0:	4b21      	ldr	r3, [pc, #132]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b6:	4a20      	ldr	r2, [pc, #128]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051c0:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c6:	4a1c      	ldr	r2, [pc, #112]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051d0:	4a19      	ldr	r2, [pc, #100]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d016      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e2:	f7fe fe2d 	bl	8003e40 <HAL_GetTick>
 80051e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051e8:	e00b      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ea:	f7fe fe29 	bl	8003e40 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d902      	bls.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	74fb      	strb	r3, [r7, #19]
            break;
 8005200:	e006      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005202:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0ec      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005210:	7cfb      	ldrb	r3, [r7, #19]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10c      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005216:	4b08      	ldr	r3, [pc, #32]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005226:	4904      	ldr	r1, [pc, #16]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800522e:	e009      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005230:	7cfb      	ldrb	r3, [r7, #19]
 8005232:	74bb      	strb	r3, [r7, #18]
 8005234:	e006      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005236:	bf00      	nop
 8005238:	40021000 	.word	0x40021000
 800523c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005240:	7cfb      	ldrb	r3, [r7, #19]
 8005242:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005244:	7c7b      	ldrb	r3, [r7, #17]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d105      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800524a:	4b9e      	ldr	r3, [pc, #632]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524e:	4a9d      	ldr	r2, [pc, #628]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005254:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005262:	4b98      	ldr	r3, [pc, #608]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005268:	f023 0203 	bic.w	r2, r3, #3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	4994      	ldr	r1, [pc, #592]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005284:	4b8f      	ldr	r3, [pc, #572]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528a:	f023 020c 	bic.w	r2, r3, #12
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	498c      	ldr	r1, [pc, #560]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052a6:	4b87      	ldr	r3, [pc, #540]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b4:	4983      	ldr	r1, [pc, #524]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052c8:	4b7e      	ldr	r3, [pc, #504]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d6:	497b      	ldr	r1, [pc, #492]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052ea:	4b76      	ldr	r3, [pc, #472]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f8:	4972      	ldr	r1, [pc, #456]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00a      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800530c:	4b6d      	ldr	r3, [pc, #436]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005312:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531a:	496a      	ldr	r1, [pc, #424]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800532e:	4b65      	ldr	r3, [pc, #404]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005334:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800533c:	4961      	ldr	r1, [pc, #388]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005350:	4b5c      	ldr	r3, [pc, #368]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005356:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800535e:	4959      	ldr	r1, [pc, #356]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005372:	4b54      	ldr	r3, [pc, #336]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005378:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005380:	4950      	ldr	r1, [pc, #320]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005394:	4b4b      	ldr	r3, [pc, #300]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a2:	4948      	ldr	r1, [pc, #288]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053b6:	4b43      	ldr	r3, [pc, #268]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c4:	493f      	ldr	r1, [pc, #252]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d028      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053d8:	4b3a      	ldr	r3, [pc, #232]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e6:	4937      	ldr	r1, [pc, #220]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053f6:	d106      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053f8:	4b32      	ldr	r3, [pc, #200]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4a31      	ldr	r2, [pc, #196]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005402:	60d3      	str	r3, [r2, #12]
 8005404:	e011      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800540a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800540e:	d10c      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3304      	adds	r3, #4
 8005414:	2101      	movs	r1, #1
 8005416:	4618      	mov	r0, r3
 8005418:	f000 f8c8 	bl	80055ac <RCCEx_PLLSAI1_Config>
 800541c:	4603      	mov	r3, r0
 800541e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005420:	7cfb      	ldrb	r3, [r7, #19]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005426:	7cfb      	ldrb	r3, [r7, #19]
 8005428:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d028      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005436:	4b23      	ldr	r3, [pc, #140]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005444:	491f      	ldr	r1, [pc, #124]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005454:	d106      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005456:	4b1b      	ldr	r3, [pc, #108]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	4a1a      	ldr	r2, [pc, #104]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005460:	60d3      	str	r3, [r2, #12]
 8005462:	e011      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800546c:	d10c      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3304      	adds	r3, #4
 8005472:	2101      	movs	r1, #1
 8005474:	4618      	mov	r0, r3
 8005476:	f000 f899 	bl	80055ac <RCCEx_PLLSAI1_Config>
 800547a:	4603      	mov	r3, r0
 800547c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800547e:	7cfb      	ldrb	r3, [r7, #19]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005484:	7cfb      	ldrb	r3, [r7, #19]
 8005486:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d02b      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005494:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a2:	4908      	ldr	r1, [pc, #32]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b2:	d109      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b4:	4b03      	ldr	r3, [pc, #12]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4a02      	ldr	r2, [pc, #8]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054be:	60d3      	str	r3, [r2, #12]
 80054c0:	e014      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80054c2:	bf00      	nop
 80054c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054d0:	d10c      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3304      	adds	r3, #4
 80054d6:	2101      	movs	r1, #1
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 f867 	bl	80055ac <RCCEx_PLLSAI1_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054e2:	7cfb      	ldrb	r3, [r7, #19]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d02f      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054f8:	4b2b      	ldr	r3, [pc, #172]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005506:	4928      	ldr	r1, [pc, #160]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005516:	d10d      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3304      	adds	r3, #4
 800551c:	2102      	movs	r1, #2
 800551e:	4618      	mov	r0, r3
 8005520:	f000 f844 	bl	80055ac <RCCEx_PLLSAI1_Config>
 8005524:	4603      	mov	r3, r0
 8005526:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005528:	7cfb      	ldrb	r3, [r7, #19]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d014      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800552e:	7cfb      	ldrb	r3, [r7, #19]
 8005530:	74bb      	strb	r3, [r7, #18]
 8005532:	e011      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800553c:	d10c      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3320      	adds	r3, #32
 8005542:	2102      	movs	r1, #2
 8005544:	4618      	mov	r0, r3
 8005546:	f000 f925 	bl	8005794 <RCCEx_PLLSAI2_Config>
 800554a:	4603      	mov	r3, r0
 800554c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800554e:	7cfb      	ldrb	r3, [r7, #19]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005554:	7cfb      	ldrb	r3, [r7, #19]
 8005556:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005564:	4b10      	ldr	r3, [pc, #64]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005572:	490d      	ldr	r1, [pc, #52]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00b      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005586:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005596:	4904      	ldr	r1, [pc, #16]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005598:	4313      	orrs	r3, r2
 800559a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800559e:	7cbb      	ldrb	r3, [r7, #18]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40021000 	.word	0x40021000

080055ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055ba:	4b75      	ldr	r3, [pc, #468]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d018      	beq.n	80055f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055c6:	4b72      	ldr	r3, [pc, #456]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f003 0203 	and.w	r2, r3, #3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d10d      	bne.n	80055f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
       ||
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d009      	beq.n	80055f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80055de:	4b6c      	ldr	r3, [pc, #432]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	091b      	lsrs	r3, r3, #4
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
       ||
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d047      	beq.n	8005682 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	73fb      	strb	r3, [r7, #15]
 80055f6:	e044      	b.n	8005682 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d018      	beq.n	8005632 <RCCEx_PLLSAI1_Config+0x86>
 8005600:	2b03      	cmp	r3, #3
 8005602:	d825      	bhi.n	8005650 <RCCEx_PLLSAI1_Config+0xa4>
 8005604:	2b01      	cmp	r3, #1
 8005606:	d002      	beq.n	800560e <RCCEx_PLLSAI1_Config+0x62>
 8005608:	2b02      	cmp	r3, #2
 800560a:	d009      	beq.n	8005620 <RCCEx_PLLSAI1_Config+0x74>
 800560c:	e020      	b.n	8005650 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800560e:	4b60      	ldr	r3, [pc, #384]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d11d      	bne.n	8005656 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800561e:	e01a      	b.n	8005656 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005620:	4b5b      	ldr	r3, [pc, #364]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005628:	2b00      	cmp	r3, #0
 800562a:	d116      	bne.n	800565a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005630:	e013      	b.n	800565a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005632:	4b57      	ldr	r3, [pc, #348]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10f      	bne.n	800565e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800563e:	4b54      	ldr	r3, [pc, #336]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d109      	bne.n	800565e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800564e:	e006      	b.n	800565e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
      break;
 8005654:	e004      	b.n	8005660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005656:	bf00      	nop
 8005658:	e002      	b.n	8005660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800565a:	bf00      	nop
 800565c:	e000      	b.n	8005660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800565e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10d      	bne.n	8005682 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005666:	4b4a      	ldr	r3, [pc, #296]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6819      	ldr	r1, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	3b01      	subs	r3, #1
 8005678:	011b      	lsls	r3, r3, #4
 800567a:	430b      	orrs	r3, r1
 800567c:	4944      	ldr	r1, [pc, #272]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800567e:	4313      	orrs	r3, r2
 8005680:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d17d      	bne.n	8005784 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005688:	4b41      	ldr	r3, [pc, #260]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a40      	ldr	r2, [pc, #256]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800568e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005694:	f7fe fbd4 	bl	8003e40 <HAL_GetTick>
 8005698:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800569a:	e009      	b.n	80056b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800569c:	f7fe fbd0 	bl	8003e40 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d902      	bls.n	80056b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	73fb      	strb	r3, [r7, #15]
        break;
 80056ae:	e005      	b.n	80056bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056b0:	4b37      	ldr	r3, [pc, #220]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1ef      	bne.n	800569c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d160      	bne.n	8005784 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d111      	bne.n	80056ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056c8:	4b31      	ldr	r3, [pc, #196]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80056d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6892      	ldr	r2, [r2, #8]
 80056d8:	0211      	lsls	r1, r2, #8
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	68d2      	ldr	r2, [r2, #12]
 80056de:	0912      	lsrs	r2, r2, #4
 80056e0:	0452      	lsls	r2, r2, #17
 80056e2:	430a      	orrs	r2, r1
 80056e4:	492a      	ldr	r1, [pc, #168]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	610b      	str	r3, [r1, #16]
 80056ea:	e027      	b.n	800573c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d112      	bne.n	8005718 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056f2:	4b27      	ldr	r3, [pc, #156]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80056fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6892      	ldr	r2, [r2, #8]
 8005702:	0211      	lsls	r1, r2, #8
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6912      	ldr	r2, [r2, #16]
 8005708:	0852      	lsrs	r2, r2, #1
 800570a:	3a01      	subs	r2, #1
 800570c:	0552      	lsls	r2, r2, #21
 800570e:	430a      	orrs	r2, r1
 8005710:	491f      	ldr	r1, [pc, #124]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005712:	4313      	orrs	r3, r2
 8005714:	610b      	str	r3, [r1, #16]
 8005716:	e011      	b.n	800573c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005718:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005720:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6892      	ldr	r2, [r2, #8]
 8005728:	0211      	lsls	r1, r2, #8
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6952      	ldr	r2, [r2, #20]
 800572e:	0852      	lsrs	r2, r2, #1
 8005730:	3a01      	subs	r2, #1
 8005732:	0652      	lsls	r2, r2, #25
 8005734:	430a      	orrs	r2, r1
 8005736:	4916      	ldr	r1, [pc, #88]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005738:	4313      	orrs	r3, r2
 800573a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800573c:	4b14      	ldr	r3, [pc, #80]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a13      	ldr	r2, [pc, #76]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005748:	f7fe fb7a 	bl	8003e40 <HAL_GetTick>
 800574c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800574e:	e009      	b.n	8005764 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005750:	f7fe fb76 	bl	8003e40 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d902      	bls.n	8005764 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	73fb      	strb	r3, [r7, #15]
          break;
 8005762:	e005      	b.n	8005770 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005764:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0ef      	beq.n	8005750 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005776:	4b06      	ldr	r3, [pc, #24]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	4904      	ldr	r1, [pc, #16]	; (8005790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005780:	4313      	orrs	r3, r2
 8005782:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40021000 	.word	0x40021000

08005794 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057a2:	4b6a      	ldr	r3, [pc, #424]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d018      	beq.n	80057e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057ae:	4b67      	ldr	r3, [pc, #412]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f003 0203 	and.w	r2, r3, #3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d10d      	bne.n	80057da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
       ||
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d009      	beq.n	80057da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80057c6:	4b61      	ldr	r3, [pc, #388]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	091b      	lsrs	r3, r3, #4
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
       ||
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d047      	beq.n	800586a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	73fb      	strb	r3, [r7, #15]
 80057de:	e044      	b.n	800586a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d018      	beq.n	800581a <RCCEx_PLLSAI2_Config+0x86>
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d825      	bhi.n	8005838 <RCCEx_PLLSAI2_Config+0xa4>
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d002      	beq.n	80057f6 <RCCEx_PLLSAI2_Config+0x62>
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d009      	beq.n	8005808 <RCCEx_PLLSAI2_Config+0x74>
 80057f4:	e020      	b.n	8005838 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057f6:	4b55      	ldr	r3, [pc, #340]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d11d      	bne.n	800583e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005806:	e01a      	b.n	800583e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005808:	4b50      	ldr	r3, [pc, #320]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005810:	2b00      	cmp	r3, #0
 8005812:	d116      	bne.n	8005842 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005818:	e013      	b.n	8005842 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800581a:	4b4c      	ldr	r3, [pc, #304]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10f      	bne.n	8005846 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005826:	4b49      	ldr	r3, [pc, #292]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d109      	bne.n	8005846 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005836:	e006      	b.n	8005846 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	73fb      	strb	r3, [r7, #15]
      break;
 800583c:	e004      	b.n	8005848 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800583e:	bf00      	nop
 8005840:	e002      	b.n	8005848 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005842:	bf00      	nop
 8005844:	e000      	b.n	8005848 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005846:	bf00      	nop
    }

    if(status == HAL_OK)
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10d      	bne.n	800586a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800584e:	4b3f      	ldr	r3, [pc, #252]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6819      	ldr	r1, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	3b01      	subs	r3, #1
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	430b      	orrs	r3, r1
 8005864:	4939      	ldr	r1, [pc, #228]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005866:	4313      	orrs	r3, r2
 8005868:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d167      	bne.n	8005940 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005870:	4b36      	ldr	r3, [pc, #216]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a35      	ldr	r2, [pc, #212]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800587a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800587c:	f7fe fae0 	bl	8003e40 <HAL_GetTick>
 8005880:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005882:	e009      	b.n	8005898 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005884:	f7fe fadc 	bl	8003e40 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d902      	bls.n	8005898 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	73fb      	strb	r3, [r7, #15]
        break;
 8005896:	e005      	b.n	80058a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005898:	4b2c      	ldr	r3, [pc, #176]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1ef      	bne.n	8005884 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d14a      	bne.n	8005940 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d111      	bne.n	80058d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058b0:	4b26      	ldr	r3, [pc, #152]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80058b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6892      	ldr	r2, [r2, #8]
 80058c0:	0211      	lsls	r1, r2, #8
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	68d2      	ldr	r2, [r2, #12]
 80058c6:	0912      	lsrs	r2, r2, #4
 80058c8:	0452      	lsls	r2, r2, #17
 80058ca:	430a      	orrs	r2, r1
 80058cc:	491f      	ldr	r1, [pc, #124]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	614b      	str	r3, [r1, #20]
 80058d2:	e011      	b.n	80058f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058d4:	4b1d      	ldr	r3, [pc, #116]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80058dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6892      	ldr	r2, [r2, #8]
 80058e4:	0211      	lsls	r1, r2, #8
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6912      	ldr	r2, [r2, #16]
 80058ea:	0852      	lsrs	r2, r2, #1
 80058ec:	3a01      	subs	r2, #1
 80058ee:	0652      	lsls	r2, r2, #25
 80058f0:	430a      	orrs	r2, r1
 80058f2:	4916      	ldr	r1, [pc, #88]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058f8:	4b14      	ldr	r3, [pc, #80]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a13      	ldr	r2, [pc, #76]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005902:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005904:	f7fe fa9c 	bl	8003e40 <HAL_GetTick>
 8005908:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800590a:	e009      	b.n	8005920 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800590c:	f7fe fa98 	bl	8003e40 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d902      	bls.n	8005920 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	73fb      	strb	r3, [r7, #15]
          break;
 800591e:	e005      	b.n	800592c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005920:	4b0a      	ldr	r3, [pc, #40]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0ef      	beq.n	800590c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800592c:	7bfb      	ldrb	r3, [r7, #15]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005932:	4b06      	ldr	r3, [pc, #24]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005934:	695a      	ldr	r2, [r3, #20]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	4904      	ldr	r1, [pc, #16]	; (800594c <RCCEx_PLLSAI2_Config+0x1b8>)
 800593c:	4313      	orrs	r3, r2
 800593e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005940:	7bfb      	ldrb	r3, [r7, #15]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40021000 	.word	0x40021000

08005950 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005950:	b480      	push	{r7}
 8005952:	b08b      	sub	sp, #44	; 0x2c
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	fa93 f3a3 	rbit	r3, r3
 800596a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8005976:	2320      	movs	r3, #32
 8005978:	e003      	b.n	8005982 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	fab3 f383 	clz	r3, r3
 8005980:	b2db      	uxtb	r3, r3
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	2103      	movs	r1, #3
 8005986:	fa01 f303 	lsl.w	r3, r1, r3
 800598a:	43db      	mvns	r3, r3
 800598c:	401a      	ands	r2, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	fa93 f3a3 	rbit	r3, r3
 8005998:	61fb      	str	r3, [r7, #28]
  return result;
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80059a4:	2320      	movs	r3, #32
 80059a6:	e003      	b.n	80059b0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	fab3 f383 	clz	r3, r3
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	fa01 f303 	lsl.w	r3, r1, r3
 80059b8:	431a      	orrs	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	601a      	str	r2, [r3, #0]
}
 80059be:	bf00      	nop
 80059c0:	372c      	adds	r7, #44	; 0x2c
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b085      	sub	sp, #20
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	43db      	mvns	r3, r3
 80059de:	401a      	ands	r2, r3
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	fb01 f303 	mul.w	r3, r1, r3
 80059e8:	431a      	orrs	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	605a      	str	r2, [r3, #4]
}
 80059ee:	bf00      	nop
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b08b      	sub	sp, #44	; 0x2c
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	fa93 f3a3 	rbit	r3, r3
 8005a14:	613b      	str	r3, [r7, #16]
  return result;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005a20:	2320      	movs	r3, #32
 8005a22:	e003      	b.n	8005a2c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	fab3 f383 	clz	r3, r3
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	2103      	movs	r1, #3
 8005a30:	fa01 f303 	lsl.w	r3, r1, r3
 8005a34:	43db      	mvns	r3, r3
 8005a36:	401a      	ands	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	fa93 f3a3 	rbit	r3, r3
 8005a42:	61fb      	str	r3, [r7, #28]
  return result;
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005a4e:	2320      	movs	r3, #32
 8005a50:	e003      	b.n	8005a5a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	fab3 f383 	clz	r3, r3
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a62:	431a      	orrs	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005a68:	bf00      	nop
 8005a6a:	372c      	adds	r7, #44	; 0x2c
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b08b      	sub	sp, #44	; 0x2c
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	fa93 f3a3 	rbit	r3, r3
 8005a8e:	613b      	str	r3, [r7, #16]
  return result;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005a9a:	2320      	movs	r3, #32
 8005a9c:	e003      	b.n	8005aa6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	fab3 f383 	clz	r3, r3
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	2103      	movs	r1, #3
 8005aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	401a      	ands	r2, r3
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	fa93 f3a3 	rbit	r3, r3
 8005abc:	61fb      	str	r3, [r7, #28]
  return result;
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005ac8:	2320      	movs	r3, #32
 8005aca:	e003      	b.n	8005ad4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	fab3 f383 	clz	r3, r3
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	6879      	ldr	r1, [r7, #4]
 8005ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	60da      	str	r2, [r3, #12]
}
 8005ae2:	bf00      	nop
 8005ae4:	372c      	adds	r7, #44	; 0x2c
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b08b      	sub	sp, #44	; 0x2c
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a1a      	ldr	r2, [r3, #32]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	fa93 f3a3 	rbit	r3, r3
 8005b08:	613b      	str	r3, [r7, #16]
  return result;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005b14:	2320      	movs	r3, #32
 8005b16:	e003      	b.n	8005b20 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	fab3 f383 	clz	r3, r3
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	210f      	movs	r1, #15
 8005b24:	fa01 f303 	lsl.w	r3, r1, r3
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	401a      	ands	r2, r3
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	fa93 f3a3 	rbit	r3, r3
 8005b36:	61fb      	str	r3, [r7, #28]
  return result;
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005b42:	2320      	movs	r3, #32
 8005b44:	e003      	b.n	8005b4e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	fab3 f383 	clz	r3, r3
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	fa01 f303 	lsl.w	r3, r1, r3
 8005b56:	431a      	orrs	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005b5c:	bf00      	nop
 8005b5e:	372c      	adds	r7, #44	; 0x2c
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b08b      	sub	sp, #44	; 0x2c
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	0a1b      	lsrs	r3, r3, #8
 8005b7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	fa93 f3a3 	rbit	r3, r3
 8005b84:	613b      	str	r3, [r7, #16]
  return result;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005b90:	2320      	movs	r3, #32
 8005b92:	e003      	b.n	8005b9c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	fab3 f383 	clz	r3, r3
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	210f      	movs	r1, #15
 8005ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	401a      	ands	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	0a1b      	lsrs	r3, r3, #8
 8005bac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	fa93 f3a3 	rbit	r3, r3
 8005bb4:	61fb      	str	r3, [r7, #28]
  return result;
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005bc0:	2320      	movs	r3, #32
 8005bc2:	e003      	b.n	8005bcc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	fab3 f383 	clz	r3, r3
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005bda:	bf00      	nop
 8005bdc:	372c      	adds	r7, #44	; 0x2c
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b088      	sub	sp, #32
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	fa93 f3a3 	rbit	r3, r3
 8005bfc:	60fb      	str	r3, [r7, #12]
  return result;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <LL_GPIO_Init+0x26>
    return 32U;
 8005c08:	2320      	movs	r3, #32
 8005c0a:	e003      	b.n	8005c14 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	fab3 f383 	clz	r3, r3
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005c16:	e048      	b.n	8005caa <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	fa01 f303 	lsl.w	r3, r1, r3
 8005c24:	4013      	ands	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d03a      	beq.n	8005ca4 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d003      	beq.n	8005c3e <LL_GPIO_Init+0x58>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d10e      	bne.n	8005c5c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	461a      	mov	r2, r3
 8005c44:	69b9      	ldr	r1, [r7, #24]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7ff fed7 	bl	80059fa <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	6819      	ldr	r1, [r3, #0]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	461a      	mov	r2, r3
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7ff feb7 	bl	80059ca <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	461a      	mov	r2, r3
 8005c62:	69b9      	ldr	r1, [r7, #24]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff ff05 	bl	8005a74 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d111      	bne.n	8005c96 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	2bff      	cmp	r3, #255	; 0xff
 8005c76:	d807      	bhi.n	8005c88 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	69b9      	ldr	r1, [r7, #24]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff ff34 	bl	8005aee <LL_GPIO_SetAFPin_0_7>
 8005c86:	e006      	b.n	8005c96 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	69b9      	ldr	r1, [r7, #24]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7ff ff69 	bl	8005b68 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	69b9      	ldr	r1, [r7, #24]
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff fe56 	bl	8005950 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1af      	bne.n	8005c18 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3720      	adds	r7, #32
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005cc8:	4b07      	ldr	r3, [pc, #28]	; (8005ce8 <LL_RCC_HSI_IsReady+0x24>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd4:	d101      	bne.n	8005cda <LL_RCC_HSI_IsReady+0x16>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <LL_RCC_HSI_IsReady+0x18>
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	40021000 	.word	0x40021000

08005cec <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8005cf0:	4b07      	ldr	r3, [pc, #28]	; (8005d10 <LL_RCC_LSE_IsReady+0x24>)
 8005cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d101      	bne.n	8005d02 <LL_RCC_LSE_IsReady+0x16>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e000      	b.n	8005d04 <LL_RCC_LSE_IsReady+0x18>
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40021000 	.word	0x40021000

08005d14 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8005d18:	4b06      	ldr	r3, [pc, #24]	; (8005d34 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d101      	bne.n	8005d28 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8005d24:	2301      	movs	r3, #1
 8005d26:	e000      	b.n	8005d2a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	40021000 	.word	0x40021000

08005d38 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005d3c:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <LL_RCC_MSI_GetRange+0x18>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40021000 	.word	0x40021000

08005d54 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005d58:	4b04      	ldr	r3, [pc, #16]	; (8005d6c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8005d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d5e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	40021000 	.word	0x40021000

08005d70 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005d70:	b480      	push	{r7}
 8005d72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005d74:	4b04      	ldr	r3, [pc, #16]	; (8005d88 <LL_RCC_GetSysClkSource+0x18>)
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f003 030c 	and.w	r3, r3, #12
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40021000 	.word	0x40021000

08005d8c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005d90:	4b04      	ldr	r3, [pc, #16]	; (8005da4 <LL_RCC_GetAHBPrescaler+0x18>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40021000 	.word	0x40021000

08005da8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005dac:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40021000 	.word	0x40021000

08005dc4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005dc8:	4b04      	ldr	r3, [pc, #16]	; (8005ddc <LL_RCC_GetAPB2Prescaler+0x18>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	40021000 	.word	0x40021000

08005de0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8005de8:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <LL_RCC_GetUSARTClockSource+0x24>)
 8005dea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	401a      	ands	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	041b      	lsls	r3, r3, #16
 8005df6:	4313      	orrs	r3, r2
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	40021000 	.word	0x40021000

08005e08 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8005e10:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <LL_RCC_GetUARTClockSource+0x24>)
 8005e12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	401a      	ands	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	041b      	lsls	r3, r3, #16
 8005e1e:	4313      	orrs	r3, r2
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	40021000 	.word	0x40021000

08005e30 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005e34:	4b04      	ldr	r3, [pc, #16]	; (8005e48 <LL_RCC_PLL_GetMainSource+0x18>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0303 	and.w	r3, r3, #3
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40021000 	.word	0x40021000

08005e4c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005e50:	4b04      	ldr	r3, [pc, #16]	; (8005e64 <LL_RCC_PLL_GetN+0x18>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	0a1b      	lsrs	r3, r3, #8
 8005e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	40021000 	.word	0x40021000

08005e68 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005e6c:	4b04      	ldr	r3, [pc, #16]	; (8005e80 <LL_RCC_PLL_GetR+0x18>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	40021000 	.word	0x40021000

08005e84 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005e84:	b480      	push	{r7}
 8005e86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005e88:	4b04      	ldr	r3, [pc, #16]	; (8005e9c <LL_RCC_PLL_GetDivider+0x18>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40021000 	.word	0x40021000

08005ea0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d137      	bne.n	8005f22 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff ff94 	bl	8005de0 <LL_RCC_GetUSARTClockSource>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	f200 80b3 	bhi.w	800602a <LL_RCC_GetUSARTClockFreq+0x18a>
 8005ec4:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <LL_RCC_GetUSARTClockFreq+0x2c>)
 8005ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eca:	bf00      	nop
 8005ecc:	08005f0b 	.word	0x08005f0b
 8005ed0:	08005edd 	.word	0x08005edd
 8005ed4:	08005ee5 	.word	0x08005ee5
 8005ed8:	08005ef7 	.word	0x08005ef7
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005edc:	f000 f95c 	bl	8006198 <RCC_GetSystemClockFreq>
 8005ee0:	60f8      	str	r0, [r7, #12]
        break;
 8005ee2:	e0b5      	b.n	8006050 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005ee4:	f7ff feee 	bl	8005cc4 <LL_RCC_HSI_IsReady>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 809f 	beq.w	800602e <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8005ef0:	4b5a      	ldr	r3, [pc, #360]	; (800605c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005ef2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005ef4:	e09b      	b.n	800602e <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005ef6:	f7ff fef9 	bl	8005cec <LL_RCC_LSE_IsReady>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8098 	beq.w	8006032 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8005f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f06:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005f08:	e093      	b.n	8006032 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005f0a:	f000 f945 	bl	8006198 <RCC_GetSystemClockFreq>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 f9d1 	bl	80062b8 <RCC_GetHCLKClockFreq>
 8005f16:	4603      	mov	r3, r0
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 f9f7 	bl	800630c <RCC_GetPCLK2ClockFreq>
 8005f1e:	60f8      	str	r0, [r7, #12]
        break;
 8005f20:	e096      	b.n	8006050 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b0c      	cmp	r3, #12
 8005f26:	d146      	bne.n	8005fb6 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff ff59 	bl	8005de0 <LL_RCC_GetUSARTClockSource>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005f34:	2b0c      	cmp	r3, #12
 8005f36:	d87e      	bhi.n	8006036 <LL_RCC_GetUSARTClockFreq+0x196>
 8005f38:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8005f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3e:	bf00      	nop
 8005f40:	08005f9f 	.word	0x08005f9f
 8005f44:	08006037 	.word	0x08006037
 8005f48:	08006037 	.word	0x08006037
 8005f4c:	08006037 	.word	0x08006037
 8005f50:	08005f75 	.word	0x08005f75
 8005f54:	08006037 	.word	0x08006037
 8005f58:	08006037 	.word	0x08006037
 8005f5c:	08006037 	.word	0x08006037
 8005f60:	08005f7d 	.word	0x08005f7d
 8005f64:	08006037 	.word	0x08006037
 8005f68:	08006037 	.word	0x08006037
 8005f6c:	08006037 	.word	0x08006037
 8005f70:	08005f8d 	.word	0x08005f8d
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005f74:	f000 f910 	bl	8006198 <RCC_GetSystemClockFreq>
 8005f78:	60f8      	str	r0, [r7, #12]
        break;
 8005f7a:	e069      	b.n	8006050 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005f7c:	f7ff fea2 	bl	8005cc4 <LL_RCC_HSI_IsReady>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d059      	beq.n	800603a <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8005f86:	4b35      	ldr	r3, [pc, #212]	; (800605c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005f88:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005f8a:	e056      	b.n	800603a <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005f8c:	f7ff feae 	bl	8005cec <LL_RCC_LSE_IsReady>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d053      	beq.n	800603e <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8005f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f9a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005f9c:	e04f      	b.n	800603e <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005f9e:	f000 f8fb 	bl	8006198 <RCC_GetSystemClockFreq>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 f987 	bl	80062b8 <RCC_GetHCLKClockFreq>
 8005faa:	4603      	mov	r3, r0
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 f999 	bl	80062e4 <RCC_GetPCLK1ClockFreq>
 8005fb2:	60f8      	str	r0, [r7, #12]
        break;
 8005fb4:	e04c      	b.n	8006050 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b30      	cmp	r3, #48	; 0x30
 8005fba:	d142      	bne.n	8006042 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff ff0f 	bl	8005de0 <LL_RCC_GetUSARTClockSource>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005fc8:	d01a      	beq.n	8006000 <LL_RCC_GetUSARTClockFreq+0x160>
 8005fca:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005fce:	d83a      	bhi.n	8006046 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005fd0:	4a23      	ldr	r2, [pc, #140]	; (8006060 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00c      	beq.n	8005ff0 <LL_RCC_GetUSARTClockFreq+0x150>
 8005fd6:	4a22      	ldr	r2, [pc, #136]	; (8006060 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d834      	bhi.n	8006046 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005fdc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fe0:	d017      	beq.n	8006012 <LL_RCC_GetUSARTClockFreq+0x172>
 8005fe2:	4a20      	ldr	r2, [pc, #128]	; (8006064 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d12e      	bne.n	8006046 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8005fe8:	f000 f8d6 	bl	8006198 <RCC_GetSystemClockFreq>
 8005fec:	60f8      	str	r0, [r7, #12]
          break;
 8005fee:	e02f      	b.n	8006050 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8005ff0:	f7ff fe68 	bl	8005cc4 <LL_RCC_HSI_IsReady>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d027      	beq.n	800604a <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8005ffa:	4b18      	ldr	r3, [pc, #96]	; (800605c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005ffc:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005ffe:	e024      	b.n	800604a <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8006000:	f7ff fe74 	bl	8005cec <LL_RCC_LSE_IsReady>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d021      	beq.n	800604e <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 800600a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600e:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006010:	e01d      	b.n	800604e <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006012:	f000 f8c1 	bl	8006198 <RCC_GetSystemClockFreq>
 8006016:	4603      	mov	r3, r0
 8006018:	4618      	mov	r0, r3
 800601a:	f000 f94d 	bl	80062b8 <RCC_GetHCLKClockFreq>
 800601e:	4603      	mov	r3, r0
 8006020:	4618      	mov	r0, r3
 8006022:	f000 f95f 	bl	80062e4 <RCC_GetPCLK1ClockFreq>
 8006026:	60f8      	str	r0, [r7, #12]
          break;
 8006028:	e012      	b.n	8006050 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800602a:	bf00      	nop
 800602c:	e010      	b.n	8006050 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800602e:	bf00      	nop
 8006030:	e00e      	b.n	8006050 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006032:	bf00      	nop
 8006034:	e00c      	b.n	8006050 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006036:	bf00      	nop
 8006038:	e00a      	b.n	8006050 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800603a:	bf00      	nop
 800603c:	e008      	b.n	8006050 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800603e:	bf00      	nop
 8006040:	e006      	b.n	8006050 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8006042:	bf00      	nop
 8006044:	e004      	b.n	8006050 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006046:	bf00      	nop
 8006048:	e002      	b.n	8006050 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 800604a:	bf00      	nop
 800604c:	e000      	b.n	8006050 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 800604e:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8006050:	68fb      	ldr	r3, [r7, #12]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	00f42400 	.word	0x00f42400
 8006060:	00300020 	.word	0x00300020
 8006064:	00300010 	.word	0x00300010

08006068 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2bc0      	cmp	r3, #192	; 0xc0
 8006078:	d136      	bne.n	80060e8 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7ff fec4 	bl	8005e08 <LL_RCC_GetUARTClockSource>
 8006080:	4603      	mov	r3, r0
 8006082:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006086:	d01a      	beq.n	80060be <LL_RCC_GetUARTClockFreq+0x56>
 8006088:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800608c:	d82e      	bhi.n	80060ec <LL_RCC_GetUARTClockFreq+0x84>
 800608e:	4a3d      	ldr	r2, [pc, #244]	; (8006184 <LL_RCC_GetUARTClockFreq+0x11c>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00c      	beq.n	80060ae <LL_RCC_GetUARTClockFreq+0x46>
 8006094:	4a3b      	ldr	r2, [pc, #236]	; (8006184 <LL_RCC_GetUARTClockFreq+0x11c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d828      	bhi.n	80060ec <LL_RCC_GetUARTClockFreq+0x84>
 800609a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800609e:	d017      	beq.n	80060d0 <LL_RCC_GetUARTClockFreq+0x68>
 80060a0:	4a39      	ldr	r2, [pc, #228]	; (8006188 <LL_RCC_GetUARTClockFreq+0x120>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d122      	bne.n	80060ec <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80060a6:	f000 f877 	bl	8006198 <RCC_GetSystemClockFreq>
 80060aa:	60f8      	str	r0, [r7, #12]
        break;
 80060ac:	e023      	b.n	80060f6 <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80060ae:	f7ff fe09 	bl	8005cc4 <LL_RCC_HSI_IsReady>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d01b      	beq.n	80060f0 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 80060b8:	4b34      	ldr	r3, [pc, #208]	; (800618c <LL_RCC_GetUARTClockFreq+0x124>)
 80060ba:	60fb      	str	r3, [r7, #12]
        }
        break;
 80060bc:	e018      	b.n	80060f0 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80060be:	f7ff fe15 	bl	8005cec <LL_RCC_LSE_IsReady>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d015      	beq.n	80060f4 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 80060c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060cc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80060ce:	e011      	b.n	80060f4 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80060d0:	f000 f862 	bl	8006198 <RCC_GetSystemClockFreq>
 80060d4:	4603      	mov	r3, r0
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 f8ee 	bl	80062b8 <RCC_GetHCLKClockFreq>
 80060dc:	4603      	mov	r3, r0
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 f900 	bl	80062e4 <RCC_GetPCLK1ClockFreq>
 80060e4:	60f8      	str	r0, [r7, #12]
        break;
 80060e6:	e006      	b.n	80060f6 <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 80060e8:	bf00      	nop
 80060ea:	e004      	b.n	80060f6 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80060ec:	bf00      	nop
 80060ee:	e002      	b.n	80060f6 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80060f0:	bf00      	nop
 80060f2:	e000      	b.n	80060f6 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80060f4:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060fc:	d136      	bne.n	800616c <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff fe82 	bl	8005e08 <LL_RCC_GetUARTClockSource>
 8006104:	4603      	mov	r3, r0
 8006106:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800610a:	d01a      	beq.n	8006142 <LL_RCC_GetUARTClockFreq+0xda>
 800610c:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006110:	d82e      	bhi.n	8006170 <LL_RCC_GetUARTClockFreq+0x108>
 8006112:	4a1f      	ldr	r2, [pc, #124]	; (8006190 <LL_RCC_GetUARTClockFreq+0x128>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00c      	beq.n	8006132 <LL_RCC_GetUARTClockFreq+0xca>
 8006118:	4a1d      	ldr	r2, [pc, #116]	; (8006190 <LL_RCC_GetUARTClockFreq+0x128>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d828      	bhi.n	8006170 <LL_RCC_GetUARTClockFreq+0x108>
 800611e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006122:	d017      	beq.n	8006154 <LL_RCC_GetUARTClockFreq+0xec>
 8006124:	4a1b      	ldr	r2, [pc, #108]	; (8006194 <LL_RCC_GetUARTClockFreq+0x12c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d122      	bne.n	8006170 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800612a:	f000 f835 	bl	8006198 <RCC_GetSystemClockFreq>
 800612e:	60f8      	str	r0, [r7, #12]
        break;
 8006130:	e023      	b.n	800617a <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006132:	f7ff fdc7 	bl	8005cc4 <LL_RCC_HSI_IsReady>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01b      	beq.n	8006174 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 800613c:	4b13      	ldr	r3, [pc, #76]	; (800618c <LL_RCC_GetUARTClockFreq+0x124>)
 800613e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006140:	e018      	b.n	8006174 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006142:	f7ff fdd3 	bl	8005cec <LL_RCC_LSE_IsReady>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d015      	beq.n	8006178 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 800614c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006150:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006152:	e011      	b.n	8006178 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006154:	f000 f820 	bl	8006198 <RCC_GetSystemClockFreq>
 8006158:	4603      	mov	r3, r0
 800615a:	4618      	mov	r0, r3
 800615c:	f000 f8ac 	bl	80062b8 <RCC_GetHCLKClockFreq>
 8006160:	4603      	mov	r3, r0
 8006162:	4618      	mov	r0, r3
 8006164:	f000 f8be 	bl	80062e4 <RCC_GetPCLK1ClockFreq>
 8006168:	60f8      	str	r0, [r7, #12]
        break;
 800616a:	e006      	b.n	800617a <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 800616c:	bf00      	nop
 800616e:	e004      	b.n	800617a <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006170:	bf00      	nop
 8006172:	e002      	b.n	800617a <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006174:	bf00      	nop
 8006176:	e000      	b.n	800617a <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006178:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800617a:	68fb      	ldr	r3, [r7, #12]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	00c00080 	.word	0x00c00080
 8006188:	00c00040 	.word	0x00c00040
 800618c:	00f42400 	.word	0x00f42400
 8006190:	03000200 	.word	0x03000200
 8006194:	03000100 	.word	0x03000100

08006198 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800619e:	f7ff fde7 	bl	8005d70 <LL_RCC_GetSysClkSource>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b0c      	cmp	r3, #12
 80061a6:	d851      	bhi.n	800624c <RCC_GetSystemClockFreq+0xb4>
 80061a8:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <RCC_GetSystemClockFreq+0x18>)
 80061aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ae:	bf00      	nop
 80061b0:	080061e5 	.word	0x080061e5
 80061b4:	0800624d 	.word	0x0800624d
 80061b8:	0800624d 	.word	0x0800624d
 80061bc:	0800624d 	.word	0x0800624d
 80061c0:	08006239 	.word	0x08006239
 80061c4:	0800624d 	.word	0x0800624d
 80061c8:	0800624d 	.word	0x0800624d
 80061cc:	0800624d 	.word	0x0800624d
 80061d0:	0800623f 	.word	0x0800623f
 80061d4:	0800624d 	.word	0x0800624d
 80061d8:	0800624d 	.word	0x0800624d
 80061dc:	0800624d 	.word	0x0800624d
 80061e0:	08006245 	.word	0x08006245
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80061e4:	f7ff fd96 	bl	8005d14 <LL_RCC_MSI_IsEnabledRangeSelect>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d111      	bne.n	8006212 <RCC_GetSystemClockFreq+0x7a>
 80061ee:	f7ff fd91 	bl	8005d14 <LL_RCC_MSI_IsEnabledRangeSelect>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d004      	beq.n	8006202 <RCC_GetSystemClockFreq+0x6a>
 80061f8:	f7ff fd9e 	bl	8005d38 <LL_RCC_MSI_GetRange>
 80061fc:	4603      	mov	r3, r0
 80061fe:	0a1b      	lsrs	r3, r3, #8
 8006200:	e003      	b.n	800620a <RCC_GetSystemClockFreq+0x72>
 8006202:	f7ff fda7 	bl	8005d54 <LL_RCC_MSI_GetRangeAfterStandby>
 8006206:	4603      	mov	r3, r0
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	4a28      	ldr	r2, [pc, #160]	; (80062ac <RCC_GetSystemClockFreq+0x114>)
 800620c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006210:	e010      	b.n	8006234 <RCC_GetSystemClockFreq+0x9c>
 8006212:	f7ff fd7f 	bl	8005d14 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d004      	beq.n	8006226 <RCC_GetSystemClockFreq+0x8e>
 800621c:	f7ff fd8c 	bl	8005d38 <LL_RCC_MSI_GetRange>
 8006220:	4603      	mov	r3, r0
 8006222:	091b      	lsrs	r3, r3, #4
 8006224:	e003      	b.n	800622e <RCC_GetSystemClockFreq+0x96>
 8006226:	f7ff fd95 	bl	8005d54 <LL_RCC_MSI_GetRangeAfterStandby>
 800622a:	4603      	mov	r3, r0
 800622c:	091b      	lsrs	r3, r3, #4
 800622e:	4a1f      	ldr	r2, [pc, #124]	; (80062ac <RCC_GetSystemClockFreq+0x114>)
 8006230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006234:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006236:	e033      	b.n	80062a0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006238:	4b1d      	ldr	r3, [pc, #116]	; (80062b0 <RCC_GetSystemClockFreq+0x118>)
 800623a:	607b      	str	r3, [r7, #4]
      break;
 800623c:	e030      	b.n	80062a0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800623e:	4b1d      	ldr	r3, [pc, #116]	; (80062b4 <RCC_GetSystemClockFreq+0x11c>)
 8006240:	607b      	str	r3, [r7, #4]
      break;
 8006242:	e02d      	b.n	80062a0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006244:	f000 f876 	bl	8006334 <RCC_PLL_GetFreqDomain_SYS>
 8006248:	6078      	str	r0, [r7, #4]
      break;
 800624a:	e029      	b.n	80062a0 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800624c:	f7ff fd62 	bl	8005d14 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d111      	bne.n	800627a <RCC_GetSystemClockFreq+0xe2>
 8006256:	f7ff fd5d 	bl	8005d14 <LL_RCC_MSI_IsEnabledRangeSelect>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <RCC_GetSystemClockFreq+0xd2>
 8006260:	f7ff fd6a 	bl	8005d38 <LL_RCC_MSI_GetRange>
 8006264:	4603      	mov	r3, r0
 8006266:	0a1b      	lsrs	r3, r3, #8
 8006268:	e003      	b.n	8006272 <RCC_GetSystemClockFreq+0xda>
 800626a:	f7ff fd73 	bl	8005d54 <LL_RCC_MSI_GetRangeAfterStandby>
 800626e:	4603      	mov	r3, r0
 8006270:	0a1b      	lsrs	r3, r3, #8
 8006272:	4a0e      	ldr	r2, [pc, #56]	; (80062ac <RCC_GetSystemClockFreq+0x114>)
 8006274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006278:	e010      	b.n	800629c <RCC_GetSystemClockFreq+0x104>
 800627a:	f7ff fd4b 	bl	8005d14 <LL_RCC_MSI_IsEnabledRangeSelect>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <RCC_GetSystemClockFreq+0xf6>
 8006284:	f7ff fd58 	bl	8005d38 <LL_RCC_MSI_GetRange>
 8006288:	4603      	mov	r3, r0
 800628a:	091b      	lsrs	r3, r3, #4
 800628c:	e003      	b.n	8006296 <RCC_GetSystemClockFreq+0xfe>
 800628e:	f7ff fd61 	bl	8005d54 <LL_RCC_MSI_GetRangeAfterStandby>
 8006292:	4603      	mov	r3, r0
 8006294:	091b      	lsrs	r3, r3, #4
 8006296:	4a05      	ldr	r2, [pc, #20]	; (80062ac <RCC_GetSystemClockFreq+0x114>)
 8006298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800629c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800629e:	bf00      	nop
  }

  return frequency;
 80062a0:	687b      	ldr	r3, [r7, #4]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	08006db8 	.word	0x08006db8
 80062b0:	00f42400 	.word	0x00f42400
 80062b4:	007a1200 	.word	0x007a1200

080062b8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80062c0:	f7ff fd64 	bl	8005d8c <LL_RCC_GetAHBPrescaler>
 80062c4:	4603      	mov	r3, r0
 80062c6:	091b      	lsrs	r3, r3, #4
 80062c8:	f003 030f 	and.w	r3, r3, #15
 80062cc:	4a04      	ldr	r2, [pc, #16]	; (80062e0 <RCC_GetHCLKClockFreq+0x28>)
 80062ce:	5cd3      	ldrb	r3, [r2, r3]
 80062d0:	461a      	mov	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	40d3      	lsrs	r3, r2
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	08006da0 	.word	0x08006da0

080062e4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80062ec:	f7ff fd5c 	bl	8005da8 <LL_RCC_GetAPB1Prescaler>
 80062f0:	4603      	mov	r3, r0
 80062f2:	0a1b      	lsrs	r3, r3, #8
 80062f4:	4a04      	ldr	r2, [pc, #16]	; (8006308 <RCC_GetPCLK1ClockFreq+0x24>)
 80062f6:	5cd3      	ldrb	r3, [r2, r3]
 80062f8:	461a      	mov	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	40d3      	lsrs	r3, r2
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	08006db0 	.word	0x08006db0

0800630c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006314:	f7ff fd56 	bl	8005dc4 <LL_RCC_GetAPB2Prescaler>
 8006318:	4603      	mov	r3, r0
 800631a:	0adb      	lsrs	r3, r3, #11
 800631c:	4a04      	ldr	r2, [pc, #16]	; (8006330 <RCC_GetPCLK2ClockFreq+0x24>)
 800631e:	5cd3      	ldrb	r3, [r2, r3]
 8006320:	461a      	mov	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	40d3      	lsrs	r3, r2
}
 8006326:	4618      	mov	r0, r3
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	08006db0 	.word	0x08006db0

08006334 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006334:	b590      	push	{r4, r7, lr}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800633a:	f7ff fd79 	bl	8005e30 <LL_RCC_PLL_GetMainSource>
 800633e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b03      	cmp	r3, #3
 8006344:	d036      	beq.n	80063b4 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b03      	cmp	r3, #3
 800634a:	d836      	bhi.n	80063ba <RCC_PLL_GetFreqDomain_SYS+0x86>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d003      	beq.n	800635a <RCC_PLL_GetFreqDomain_SYS+0x26>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b02      	cmp	r3, #2
 8006356:	d02a      	beq.n	80063ae <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8006358:	e02f      	b.n	80063ba <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800635a:	f7ff fcdb 	bl	8005d14 <LL_RCC_MSI_IsEnabledRangeSelect>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d111      	bne.n	8006388 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8006364:	f7ff fcd6 	bl	8005d14 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d004      	beq.n	8006378 <RCC_PLL_GetFreqDomain_SYS+0x44>
 800636e:	f7ff fce3 	bl	8005d38 <LL_RCC_MSI_GetRange>
 8006372:	4603      	mov	r3, r0
 8006374:	0a1b      	lsrs	r3, r3, #8
 8006376:	e003      	b.n	8006380 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8006378:	f7ff fcec 	bl	8005d54 <LL_RCC_MSI_GetRangeAfterStandby>
 800637c:	4603      	mov	r3, r0
 800637e:	0a1b      	lsrs	r3, r3, #8
 8006380:	4a2f      	ldr	r2, [pc, #188]	; (8006440 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006386:	e010      	b.n	80063aa <RCC_PLL_GetFreqDomain_SYS+0x76>
 8006388:	f7ff fcc4 	bl	8005d14 <LL_RCC_MSI_IsEnabledRangeSelect>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d004      	beq.n	800639c <RCC_PLL_GetFreqDomain_SYS+0x68>
 8006392:	f7ff fcd1 	bl	8005d38 <LL_RCC_MSI_GetRange>
 8006396:	4603      	mov	r3, r0
 8006398:	091b      	lsrs	r3, r3, #4
 800639a:	e003      	b.n	80063a4 <RCC_PLL_GetFreqDomain_SYS+0x70>
 800639c:	f7ff fcda 	bl	8005d54 <LL_RCC_MSI_GetRangeAfterStandby>
 80063a0:	4603      	mov	r3, r0
 80063a2:	091b      	lsrs	r3, r3, #4
 80063a4:	4a26      	ldr	r2, [pc, #152]	; (8006440 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80063a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063aa:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80063ac:	e02f      	b.n	800640e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80063ae:	4b25      	ldr	r3, [pc, #148]	; (8006444 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 80063b0:	607b      	str	r3, [r7, #4]
      break;
 80063b2:	e02c      	b.n	800640e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80063b4:	4b24      	ldr	r3, [pc, #144]	; (8006448 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 80063b6:	607b      	str	r3, [r7, #4]
      break;
 80063b8:	e029      	b.n	800640e <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80063ba:	f7ff fcab 	bl	8005d14 <LL_RCC_MSI_IsEnabledRangeSelect>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d111      	bne.n	80063e8 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80063c4:	f7ff fca6 	bl	8005d14 <LL_RCC_MSI_IsEnabledRangeSelect>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d004      	beq.n	80063d8 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80063ce:	f7ff fcb3 	bl	8005d38 <LL_RCC_MSI_GetRange>
 80063d2:	4603      	mov	r3, r0
 80063d4:	0a1b      	lsrs	r3, r3, #8
 80063d6:	e003      	b.n	80063e0 <RCC_PLL_GetFreqDomain_SYS+0xac>
 80063d8:	f7ff fcbc 	bl	8005d54 <LL_RCC_MSI_GetRangeAfterStandby>
 80063dc:	4603      	mov	r3, r0
 80063de:	0a1b      	lsrs	r3, r3, #8
 80063e0:	4a17      	ldr	r2, [pc, #92]	; (8006440 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80063e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e6:	e010      	b.n	800640a <RCC_PLL_GetFreqDomain_SYS+0xd6>
 80063e8:	f7ff fc94 	bl	8005d14 <LL_RCC_MSI_IsEnabledRangeSelect>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d004      	beq.n	80063fc <RCC_PLL_GetFreqDomain_SYS+0xc8>
 80063f2:	f7ff fca1 	bl	8005d38 <LL_RCC_MSI_GetRange>
 80063f6:	4603      	mov	r3, r0
 80063f8:	091b      	lsrs	r3, r3, #4
 80063fa:	e003      	b.n	8006404 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 80063fc:	f7ff fcaa 	bl	8005d54 <LL_RCC_MSI_GetRangeAfterStandby>
 8006400:	4603      	mov	r3, r0
 8006402:	091b      	lsrs	r3, r3, #4
 8006404:	4a0e      	ldr	r2, [pc, #56]	; (8006440 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800640a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800640c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800640e:	f7ff fd39 	bl	8005e84 <LL_RCC_PLL_GetDivider>
 8006412:	4603      	mov	r3, r0
 8006414:	091b      	lsrs	r3, r3, #4
 8006416:	3301      	adds	r3, #1
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	fbb2 f4f3 	udiv	r4, r2, r3
 800641e:	f7ff fd15 	bl	8005e4c <LL_RCC_PLL_GetN>
 8006422:	4603      	mov	r3, r0
 8006424:	fb03 f404 	mul.w	r4, r3, r4
 8006428:	f7ff fd1e 	bl	8005e68 <LL_RCC_PLL_GetR>
 800642c:	4603      	mov	r3, r0
 800642e:	0e5b      	lsrs	r3, r3, #25
 8006430:	3301      	adds	r3, #1
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8006438:	4618      	mov	r0, r3
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	bd90      	pop	{r4, r7, pc}
 8006440:	08006db8 	.word	0x08006db8
 8006444:	00f42400 	.word	0x00f42400
 8006448:	007a1200 	.word	0x007a1200

0800644c <LL_USART_IsEnabled>:
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <LL_USART_IsEnabled+0x18>
 8006460:	2301      	movs	r3, #1
 8006462:	e000      	b.n	8006466 <LL_USART_IsEnabled+0x1a>
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <LL_USART_SetStopBitsLength>:
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	605a      	str	r2, [r3, #4]
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <LL_USART_SetHWFlowCtrl>:
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	431a      	orrs	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	609a      	str	r2, [r3, #8]
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <LL_USART_SetBaudRate>:
{
 80064be:	b480      	push	{r7}
 80064c0:	b087      	sub	sp, #28
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	607a      	str	r2, [r7, #4]
 80064ca:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064d2:	d11a      	bne.n	800650a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	005a      	lsls	r2, r3, #1
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	085b      	lsrs	r3, r3, #1
 80064dc:	441a      	add	r2, r3
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80064ee:	4013      	ands	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	085b      	lsrs	r3, r3, #1
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	4313      	orrs	r3, r2
 8006500:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	60da      	str	r2, [r3, #12]
}
 8006508:	e00a      	b.n	8006520 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	085a      	lsrs	r2, r3, #1
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	441a      	add	r2, r3
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	fbb2 f3f3 	udiv	r3, r2, r3
 8006518:	b29b      	uxth	r3, r3
 800651a:	461a      	mov	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	60da      	str	r2, [r3, #12]
}
 8006520:	bf00      	nop
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800653a:	2300      	movs	r3, #0
 800653c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff ff84 	bl	800644c <LL_USART_IsEnabled>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d15b      	bne.n	8006602 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	4b2f      	ldr	r3, [pc, #188]	; (800660c <LL_USART_Init+0xe0>)
 8006550:	4013      	ands	r3, r2
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	6851      	ldr	r1, [r2, #4]
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	68d2      	ldr	r2, [r2, #12]
 800655a:	4311      	orrs	r1, r2
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	6912      	ldr	r2, [r2, #16]
 8006560:	4311      	orrs	r1, r2
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	6992      	ldr	r2, [r2, #24]
 8006566:	430a      	orrs	r2, r1
 8006568:	431a      	orrs	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff ff7c 	bl	8006472 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff ff89 	bl	8006498 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a21      	ldr	r2, [pc, #132]	; (8006610 <LL_USART_Init+0xe4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d104      	bne.n	8006598 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800658e:	2003      	movs	r0, #3
 8006590:	f7ff fc86 	bl	8005ea0 <LL_RCC_GetUSARTClockFreq>
 8006594:	60b8      	str	r0, [r7, #8]
 8006596:	e023      	b.n	80065e0 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a1e      	ldr	r2, [pc, #120]	; (8006614 <LL_USART_Init+0xe8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d104      	bne.n	80065aa <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80065a0:	200c      	movs	r0, #12
 80065a2:	f7ff fc7d 	bl	8005ea0 <LL_RCC_GetUSARTClockFreq>
 80065a6:	60b8      	str	r0, [r7, #8]
 80065a8:	e01a      	b.n	80065e0 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a1a      	ldr	r2, [pc, #104]	; (8006618 <LL_USART_Init+0xec>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d104      	bne.n	80065bc <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80065b2:	2030      	movs	r0, #48	; 0x30
 80065b4:	f7ff fc74 	bl	8005ea0 <LL_RCC_GetUSARTClockFreq>
 80065b8:	60b8      	str	r0, [r7, #8]
 80065ba:	e011      	b.n	80065e0 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a17      	ldr	r2, [pc, #92]	; (800661c <LL_USART_Init+0xf0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d104      	bne.n	80065ce <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80065c4:	20c0      	movs	r0, #192	; 0xc0
 80065c6:	f7ff fd4f 	bl	8006068 <LL_RCC_GetUARTClockFreq>
 80065ca:	60b8      	str	r0, [r7, #8]
 80065cc:	e008      	b.n	80065e0 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a13      	ldr	r2, [pc, #76]	; (8006620 <LL_USART_Init+0xf4>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d104      	bne.n	80065e0 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80065d6:	f44f 7040 	mov.w	r0, #768	; 0x300
 80065da:	f7ff fd45 	bl	8006068 <LL_RCC_GetUARTClockFreq>
 80065de:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00d      	beq.n	8006602 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d009      	beq.n	8006602 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	699a      	ldr	r2, [r3, #24]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68b9      	ldr	r1, [r7, #8]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff ff5e 	bl	80064be <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006602:	7bfb      	ldrb	r3, [r7, #15]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	efff69f3 	.word	0xefff69f3
 8006610:	40013800 	.word	0x40013800
 8006614:	40004400 	.word	0x40004400
 8006618:	40004800 	.word	0x40004800
 800661c:	40004c00 	.word	0x40004c00
 8006620:	40005000 	.word	0x40005000

08006624 <__libc_init_array>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	4d0d      	ldr	r5, [pc, #52]	; (800665c <__libc_init_array+0x38>)
 8006628:	4c0d      	ldr	r4, [pc, #52]	; (8006660 <__libc_init_array+0x3c>)
 800662a:	1b64      	subs	r4, r4, r5
 800662c:	10a4      	asrs	r4, r4, #2
 800662e:	2600      	movs	r6, #0
 8006630:	42a6      	cmp	r6, r4
 8006632:	d109      	bne.n	8006648 <__libc_init_array+0x24>
 8006634:	4d0b      	ldr	r5, [pc, #44]	; (8006664 <__libc_init_array+0x40>)
 8006636:	4c0c      	ldr	r4, [pc, #48]	; (8006668 <__libc_init_array+0x44>)
 8006638:	f000 f83c 	bl	80066b4 <_init>
 800663c:	1b64      	subs	r4, r4, r5
 800663e:	10a4      	asrs	r4, r4, #2
 8006640:	2600      	movs	r6, #0
 8006642:	42a6      	cmp	r6, r4
 8006644:	d105      	bne.n	8006652 <__libc_init_array+0x2e>
 8006646:	bd70      	pop	{r4, r5, r6, pc}
 8006648:	f855 3b04 	ldr.w	r3, [r5], #4
 800664c:	4798      	blx	r3
 800664e:	3601      	adds	r6, #1
 8006650:	e7ee      	b.n	8006630 <__libc_init_array+0xc>
 8006652:	f855 3b04 	ldr.w	r3, [r5], #4
 8006656:	4798      	blx	r3
 8006658:	3601      	adds	r6, #1
 800665a:	e7f2      	b.n	8006642 <__libc_init_array+0x1e>
 800665c:	08006ef4 	.word	0x08006ef4
 8006660:	08006ef4 	.word	0x08006ef4
 8006664:	08006ef4 	.word	0x08006ef4
 8006668:	08006ef8 	.word	0x08006ef8

0800666c <memset>:
 800666c:	4402      	add	r2, r0
 800666e:	4603      	mov	r3, r0
 8006670:	4293      	cmp	r3, r2
 8006672:	d100      	bne.n	8006676 <memset+0xa>
 8006674:	4770      	bx	lr
 8006676:	f803 1b01 	strb.w	r1, [r3], #1
 800667a:	e7f9      	b.n	8006670 <memset+0x4>

0800667c <strcasecmp>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	4d0c      	ldr	r5, [pc, #48]	; (80066b0 <strcasecmp+0x34>)
 8006680:	4604      	mov	r4, r0
 8006682:	462e      	mov	r6, r5
 8006684:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006688:	5d5a      	ldrb	r2, [r3, r5]
 800668a:	f002 0203 	and.w	r2, r2, #3
 800668e:	2a01      	cmp	r2, #1
 8006690:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006694:	5cb0      	ldrb	r0, [r6, r2]
 8006696:	f000 0003 	and.w	r0, r0, #3
 800669a:	bf08      	it	eq
 800669c:	3320      	addeq	r3, #32
 800669e:	2801      	cmp	r0, #1
 80066a0:	bf08      	it	eq
 80066a2:	3220      	addeq	r2, #32
 80066a4:	1a98      	subs	r0, r3, r2
 80066a6:	d101      	bne.n	80066ac <strcasecmp+0x30>
 80066a8:	2a00      	cmp	r2, #0
 80066aa:	d1eb      	bne.n	8006684 <strcasecmp+0x8>
 80066ac:	bd70      	pop	{r4, r5, r6, pc}
 80066ae:	bf00      	nop
 80066b0:	08006de9 	.word	0x08006de9

080066b4 <_init>:
 80066b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b6:	bf00      	nop
 80066b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ba:	bc08      	pop	{r3}
 80066bc:	469e      	mov	lr, r3
 80066be:	4770      	bx	lr

080066c0 <_fini>:
 80066c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c2:	bf00      	nop
 80066c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c6:	bc08      	pop	{r3}
 80066c8:	469e      	mov	lr, r3
 80066ca:	4770      	bx	lr
