
UART-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b2c  0800af18  0800af18  0001af18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba44  0800ba44  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba44  0800ba44  0001ba44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba4c  0800ba4c  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba4c  0800ba4c  0001ba4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba50  0800ba50  0001ba50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800ba54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ae4  20000110  0800bb64  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003bf4  0800bb64  00023bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024b45  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bb6  00000000  00000000  00044c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  00049840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001900  00000000  00000000  0004b2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c0b3  00000000  00000000  0004cbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dd0c  00000000  00000000  00078c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b3bf  00000000  00000000  0009699f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a1d5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000739c  00000000  00000000  001a1db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aefc 	.word	0x0800aefc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	0800aefc 	.word	0x0800aefc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_drsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e8:	e002      	b.n	80001f0 <__adddf3>
 80001ea:	bf00      	nop

080001ec <__aeabi_dsub>:
 80001ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f0 <__adddf3>:
 80001f0:	b530      	push	{r4, r5, lr}
 80001f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fa:	ea94 0f05 	teq	r4, r5
 80001fe:	bf08      	it	eq
 8000200:	ea90 0f02 	teqeq	r0, r2
 8000204:	bf1f      	itttt	ne
 8000206:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000216:	f000 80e2 	beq.w	80003de <__adddf3+0x1ee>
 800021a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000222:	bfb8      	it	lt
 8000224:	426d      	neglt	r5, r5
 8000226:	dd0c      	ble.n	8000242 <__adddf3+0x52>
 8000228:	442c      	add	r4, r5
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	ea82 0000 	eor.w	r0, r2, r0
 8000236:	ea83 0101 	eor.w	r1, r3, r1
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	2d36      	cmp	r5, #54	; 0x36
 8000244:	bf88      	it	hi
 8000246:	bd30      	pophi	{r4, r5, pc}
 8000248:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800024c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000250:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x70>
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000264:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x84>
 800026e:	4252      	negs	r2, r2
 8000270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000274:	ea94 0f05 	teq	r4, r5
 8000278:	f000 80a7 	beq.w	80003ca <__adddf3+0x1da>
 800027c:	f1a4 0401 	sub.w	r4, r4, #1
 8000280:	f1d5 0e20 	rsbs	lr, r5, #32
 8000284:	db0d      	blt.n	80002a2 <__adddf3+0xb2>
 8000286:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028a:	fa22 f205 	lsr.w	r2, r2, r5
 800028e:	1880      	adds	r0, r0, r2
 8000290:	f141 0100 	adc.w	r1, r1, #0
 8000294:	fa03 f20e 	lsl.w	r2, r3, lr
 8000298:	1880      	adds	r0, r0, r2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	4159      	adcs	r1, r3
 80002a0:	e00e      	b.n	80002c0 <__adddf3+0xd0>
 80002a2:	f1a5 0520 	sub.w	r5, r5, #32
 80002a6:	f10e 0e20 	add.w	lr, lr, #32
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b0:	bf28      	it	cs
 80002b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	18c0      	adds	r0, r0, r3
 80002bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c4:	d507      	bpl.n	80002d6 <__adddf3+0xe6>
 80002c6:	f04f 0e00 	mov.w	lr, #0
 80002ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002da:	d31b      	bcc.n	8000314 <__adddf3+0x124>
 80002dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e0:	d30c      	bcc.n	80002fc <__adddf3+0x10c>
 80002e2:	0849      	lsrs	r1, r1, #1
 80002e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ec:	f104 0401 	add.w	r4, r4, #1
 80002f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f8:	f080 809a 	bcs.w	8000430 <__adddf3+0x240>
 80002fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000300:	bf08      	it	eq
 8000302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000306:	f150 0000 	adcs.w	r0, r0, #0
 800030a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030e:	ea41 0105 	orr.w	r1, r1, r5
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000318:	4140      	adcs	r0, r0
 800031a:	eb41 0101 	adc.w	r1, r1, r1
 800031e:	3c01      	subs	r4, #1
 8000320:	bf28      	it	cs
 8000322:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000326:	d2e9      	bcs.n	80002fc <__adddf3+0x10c>
 8000328:	f091 0f00 	teq	r1, #0
 800032c:	bf04      	itt	eq
 800032e:	4601      	moveq	r1, r0
 8000330:	2000      	moveq	r0, #0
 8000332:	fab1 f381 	clz	r3, r1
 8000336:	bf08      	it	eq
 8000338:	3320      	addeq	r3, #32
 800033a:	f1a3 030b 	sub.w	r3, r3, #11
 800033e:	f1b3 0220 	subs.w	r2, r3, #32
 8000342:	da0c      	bge.n	800035e <__adddf3+0x16e>
 8000344:	320c      	adds	r2, #12
 8000346:	dd08      	ble.n	800035a <__adddf3+0x16a>
 8000348:	f102 0c14 	add.w	ip, r2, #20
 800034c:	f1c2 020c 	rsb	r2, r2, #12
 8000350:	fa01 f00c 	lsl.w	r0, r1, ip
 8000354:	fa21 f102 	lsr.w	r1, r1, r2
 8000358:	e00c      	b.n	8000374 <__adddf3+0x184>
 800035a:	f102 0214 	add.w	r2, r2, #20
 800035e:	bfd8      	it	le
 8000360:	f1c2 0c20 	rsble	ip, r2, #32
 8000364:	fa01 f102 	lsl.w	r1, r1, r2
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	bfdc      	itt	le
 800036e:	ea41 010c 	orrle.w	r1, r1, ip
 8000372:	4090      	lslle	r0, r2
 8000374:	1ae4      	subs	r4, r4, r3
 8000376:	bfa2      	ittt	ge
 8000378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800037c:	4329      	orrge	r1, r5
 800037e:	bd30      	popge	{r4, r5, pc}
 8000380:	ea6f 0404 	mvn.w	r4, r4
 8000384:	3c1f      	subs	r4, #31
 8000386:	da1c      	bge.n	80003c2 <__adddf3+0x1d2>
 8000388:	340c      	adds	r4, #12
 800038a:	dc0e      	bgt.n	80003aa <__adddf3+0x1ba>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0220 	rsb	r2, r4, #32
 8000394:	fa20 f004 	lsr.w	r0, r0, r4
 8000398:	fa01 f302 	lsl.w	r3, r1, r2
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	fa21 f304 	lsr.w	r3, r1, r4
 80003a4:	ea45 0103 	orr.w	r1, r5, r3
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f1c4 040c 	rsb	r4, r4, #12
 80003ae:	f1c4 0220 	rsb	r2, r4, #32
 80003b2:	fa20 f002 	lsr.w	r0, r0, r2
 80003b6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ba:	ea40 0003 	orr.w	r0, r0, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	fa21 f004 	lsr.w	r0, r1, r4
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f094 0f00 	teq	r4, #0
 80003ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d2:	bf06      	itte	eq
 80003d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d8:	3401      	addeq	r4, #1
 80003da:	3d01      	subne	r5, #1
 80003dc:	e74e      	b.n	800027c <__adddf3+0x8c>
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf18      	it	ne
 80003e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e8:	d029      	beq.n	800043e <__adddf3+0x24e>
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	d005      	beq.n	8000402 <__adddf3+0x212>
 80003f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fa:	bf04      	itt	eq
 80003fc:	4619      	moveq	r1, r3
 80003fe:	4610      	moveq	r0, r2
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	ea91 0f03 	teq	r1, r3
 8000406:	bf1e      	ittt	ne
 8000408:	2100      	movne	r1, #0
 800040a:	2000      	movne	r0, #0
 800040c:	bd30      	popne	{r4, r5, pc}
 800040e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000412:	d105      	bne.n	8000420 <__adddf3+0x230>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	4149      	adcs	r1, r1
 8000418:	bf28      	it	cs
 800041a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000424:	bf3c      	itt	cc
 8000426:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042a:	bd30      	popcc	{r4, r5, pc}
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000430:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000434:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf1a      	itte	ne
 8000444:	4619      	movne	r1, r3
 8000446:	4610      	movne	r0, r2
 8000448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800044c:	bf1c      	itt	ne
 800044e:	460b      	movne	r3, r1
 8000450:	4602      	movne	r2, r0
 8000452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000456:	bf06      	itte	eq
 8000458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800045c:	ea91 0f03 	teqeq	r1, r3
 8000460:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	bf00      	nop

08000468 <__aeabi_ui2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047c:	f04f 0500 	mov.w	r5, #0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e750      	b.n	8000328 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_i2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a0:	bf48      	it	mi
 80004a2:	4240      	negmi	r0, r0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e73e      	b.n	8000328 <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_f2d>:
 80004ac:	0042      	lsls	r2, r0, #1
 80004ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ba:	bf1f      	itttt	ne
 80004bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c8:	4770      	bxne	lr
 80004ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ce:	bf08      	it	eq
 80004d0:	4770      	bxeq	lr
 80004d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d6:	bf04      	itt	eq
 80004d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e71c      	b.n	8000328 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aed8 	beq.w	80002d6 <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6bd      	b.n	80002d6 <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__gedf2>:
 8000980:	f04f 3cff 	mov.w	ip, #4294967295
 8000984:	e006      	b.n	8000994 <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__ledf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	e002      	b.n	8000994 <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__cmpdf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009aa:	d01b      	beq.n	80009e4 <__cmpdf2+0x54>
 80009ac:	b001      	add	sp, #4
 80009ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b2:	bf0c      	ite	eq
 80009b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b8:	ea91 0f03 	teqne	r1, r3
 80009bc:	bf02      	ittt	eq
 80009be:	ea90 0f02 	teqeq	r0, r2
 80009c2:	2000      	moveq	r0, #0
 80009c4:	4770      	bxeq	lr
 80009c6:	f110 0f00 	cmn.w	r0, #0
 80009ca:	ea91 0f03 	teq	r1, r3
 80009ce:	bf58      	it	pl
 80009d0:	4299      	cmppl	r1, r3
 80009d2:	bf08      	it	eq
 80009d4:	4290      	cmpeq	r0, r2
 80009d6:	bf2c      	ite	cs
 80009d8:	17d8      	asrcs	r0, r3, #31
 80009da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009de:	f040 0001 	orr.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	d102      	bne.n	80009f4 <__cmpdf2+0x64>
 80009ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f2:	d107      	bne.n	8000a04 <__cmpdf2+0x74>
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d1d6      	bne.n	80009ac <__cmpdf2+0x1c>
 80009fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a02:	d0d3      	beq.n	80009ac <__cmpdf2+0x1c>
 8000a04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_cdrcmple>:
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4662      	mov	r2, ip
 8000a12:	468c      	mov	ip, r1
 8000a14:	4619      	mov	r1, r3
 8000a16:	4663      	mov	r3, ip
 8000a18:	e000      	b.n	8000a1c <__aeabi_cdcmpeq>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdcmpeq>:
 8000a1c:	b501      	push	{r0, lr}
 8000a1e:	f7ff ffb7 	bl	8000990 <__cmpdf2>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	bf48      	it	mi
 8000a26:	f110 0f00 	cmnmi.w	r0, #0
 8000a2a:	bd01      	pop	{r0, pc}

08000a2c <__aeabi_dcmpeq>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff fff4 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a34:	bf0c      	ite	eq
 8000a36:	2001      	moveq	r0, #1
 8000a38:	2000      	movne	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmplt>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffea 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a48:	bf34      	ite	cc
 8000a4a:	2001      	movcc	r0, #1
 8000a4c:	2000      	movcs	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmple>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffe0 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpge>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffce 	bl	8000a0c <__aeabi_cdrcmple>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpgt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffc4 	bl	8000a0c <__aeabi_cdrcmple>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_d2iz>:
 8000a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a98:	d215      	bcs.n	8000ac6 <__aeabi_d2iz+0x36>
 8000a9a:	d511      	bpl.n	8000ac0 <__aeabi_d2iz+0x30>
 8000a9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa4:	d912      	bls.n	8000acc <__aeabi_d2iz+0x3c>
 8000aa6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aba:	bf18      	it	ne
 8000abc:	4240      	negne	r0, r0
 8000abe:	4770      	bx	lr
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aca:	d105      	bne.n	8000ad8 <__aeabi_d2iz+0x48>
 8000acc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	bf08      	it	eq
 8000ad2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_d2uiz>:
 8000ae0:	004a      	lsls	r2, r1, #1
 8000ae2:	d211      	bcs.n	8000b08 <__aeabi_d2uiz+0x28>
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d211      	bcs.n	8000b0e <__aeabi_d2uiz+0x2e>
 8000aea:	d50d      	bpl.n	8000b08 <__aeabi_d2uiz+0x28>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d40e      	bmi.n	8000b14 <__aeabi_d2uiz+0x34>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_d2uiz+0x3a>
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_uldivmod>:
 8000b20:	b953      	cbnz	r3, 8000b38 <__aeabi_uldivmod+0x18>
 8000b22:	b94a      	cbnz	r2, 8000b38 <__aeabi_uldivmod+0x18>
 8000b24:	2900      	cmp	r1, #0
 8000b26:	bf08      	it	eq
 8000b28:	2800      	cmpeq	r0, #0
 8000b2a:	bf1c      	itt	ne
 8000b2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b30:	f04f 30ff 	movne.w	r0, #4294967295
 8000b34:	f000 b96e 	b.w	8000e14 <__aeabi_idiv0>
 8000b38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b40:	f000 f806 	bl	8000b50 <__udivmoddi4>
 8000b44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b4c:	b004      	add	sp, #16
 8000b4e:	4770      	bx	lr

08000b50 <__udivmoddi4>:
 8000b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b54:	9d08      	ldr	r5, [sp, #32]
 8000b56:	4604      	mov	r4, r0
 8000b58:	468c      	mov	ip, r1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f040 8083 	bne.w	8000c66 <__udivmoddi4+0x116>
 8000b60:	428a      	cmp	r2, r1
 8000b62:	4617      	mov	r7, r2
 8000b64:	d947      	bls.n	8000bf6 <__udivmoddi4+0xa6>
 8000b66:	fab2 f282 	clz	r2, r2
 8000b6a:	b142      	cbz	r2, 8000b7e <__udivmoddi4+0x2e>
 8000b6c:	f1c2 0020 	rsb	r0, r2, #32
 8000b70:	fa24 f000 	lsr.w	r0, r4, r0
 8000b74:	4091      	lsls	r1, r2
 8000b76:	4097      	lsls	r7, r2
 8000b78:	ea40 0c01 	orr.w	ip, r0, r1
 8000b7c:	4094      	lsls	r4, r2
 8000b7e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b82:	0c23      	lsrs	r3, r4, #16
 8000b84:	fbbc f6f8 	udiv	r6, ip, r8
 8000b88:	fa1f fe87 	uxth.w	lr, r7
 8000b8c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b94:	fb06 f10e 	mul.w	r1, r6, lr
 8000b98:	4299      	cmp	r1, r3
 8000b9a:	d909      	bls.n	8000bb0 <__udivmoddi4+0x60>
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ba2:	f080 8119 	bcs.w	8000dd8 <__udivmoddi4+0x288>
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	f240 8116 	bls.w	8000dd8 <__udivmoddi4+0x288>
 8000bac:	3e02      	subs	r6, #2
 8000bae:	443b      	add	r3, r7
 8000bb0:	1a5b      	subs	r3, r3, r1
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d909      	bls.n	8000bdc <__udivmoddi4+0x8c>
 8000bc8:	193c      	adds	r4, r7, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	f080 8105 	bcs.w	8000ddc <__udivmoddi4+0x28c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f240 8102 	bls.w	8000ddc <__udivmoddi4+0x28c>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000be0:	eba4 040e 	sub.w	r4, r4, lr
 8000be4:	2600      	movs	r6, #0
 8000be6:	b11d      	cbz	r5, 8000bf0 <__udivmoddi4+0xa0>
 8000be8:	40d4      	lsrs	r4, r2
 8000bea:	2300      	movs	r3, #0
 8000bec:	e9c5 4300 	strd	r4, r3, [r5]
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	b902      	cbnz	r2, 8000bfa <__udivmoddi4+0xaa>
 8000bf8:	deff      	udf	#255	; 0xff
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	d150      	bne.n	8000ca4 <__udivmoddi4+0x154>
 8000c02:	1bcb      	subs	r3, r1, r7
 8000c04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c08:	fa1f f887 	uxth.w	r8, r7
 8000c0c:	2601      	movs	r6, #1
 8000c0e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c12:	0c21      	lsrs	r1, r4, #16
 8000c14:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c1c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c20:	428b      	cmp	r3, r1
 8000c22:	d907      	bls.n	8000c34 <__udivmoddi4+0xe4>
 8000c24:	1879      	adds	r1, r7, r1
 8000c26:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0xe2>
 8000c2c:	428b      	cmp	r3, r1
 8000c2e:	f200 80e9 	bhi.w	8000e04 <__udivmoddi4+0x2b4>
 8000c32:	4684      	mov	ip, r0
 8000c34:	1ac9      	subs	r1, r1, r3
 8000c36:	b2a3      	uxth	r3, r4
 8000c38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c3c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c40:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c44:	fb08 f800 	mul.w	r8, r8, r0
 8000c48:	45a0      	cmp	r8, r4
 8000c4a:	d907      	bls.n	8000c5c <__udivmoddi4+0x10c>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c52:	d202      	bcs.n	8000c5a <__udivmoddi4+0x10a>
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	f200 80d9 	bhi.w	8000e0c <__udivmoddi4+0x2bc>
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	eba4 0408 	sub.w	r4, r4, r8
 8000c60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c64:	e7bf      	b.n	8000be6 <__udivmoddi4+0x96>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d909      	bls.n	8000c7e <__udivmoddi4+0x12e>
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	f000 80b1 	beq.w	8000dd2 <__udivmoddi4+0x282>
 8000c70:	2600      	movs	r6, #0
 8000c72:	e9c5 0100 	strd	r0, r1, [r5]
 8000c76:	4630      	mov	r0, r6
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	fab3 f683 	clz	r6, r3
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d14a      	bne.n	8000d1c <__udivmoddi4+0x1cc>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0x140>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 80b8 	bhi.w	8000e00 <__udivmoddi4+0x2b0>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb61 0103 	sbc.w	r1, r1, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	468c      	mov	ip, r1
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d0a8      	beq.n	8000bf0 <__udivmoddi4+0xa0>
 8000c9e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ca2:	e7a5      	b.n	8000bf0 <__udivmoddi4+0xa0>
 8000ca4:	f1c2 0320 	rsb	r3, r2, #32
 8000ca8:	fa20 f603 	lsr.w	r6, r0, r3
 8000cac:	4097      	lsls	r7, r2
 8000cae:	fa01 f002 	lsl.w	r0, r1, r2
 8000cb2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb6:	40d9      	lsrs	r1, r3
 8000cb8:	4330      	orrs	r0, r6
 8000cba:	0c03      	lsrs	r3, r0, #16
 8000cbc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f108 	mul.w	r1, r6, r8
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x19c>
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cde:	f080 808d 	bcs.w	8000dfc <__udivmoddi4+0x2ac>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 808a 	bls.w	8000dfc <__udivmoddi4+0x2ac>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	443b      	add	r3, r7
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b281      	uxth	r1, r0
 8000cf0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb00 f308 	mul.w	r3, r0, r8
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x1c4>
 8000d04:	1879      	adds	r1, r7, r1
 8000d06:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d0a:	d273      	bcs.n	8000df4 <__udivmoddi4+0x2a4>
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d971      	bls.n	8000df4 <__udivmoddi4+0x2a4>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4439      	add	r1, r7
 8000d14:	1acb      	subs	r3, r1, r3
 8000d16:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d1a:	e778      	b.n	8000c0e <__udivmoddi4+0xbe>
 8000d1c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d20:	fa03 f406 	lsl.w	r4, r3, r6
 8000d24:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d28:	431c      	orrs	r4, r3
 8000d2a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d32:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d36:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d3a:	431f      	orrs	r7, r3
 8000d3c:	0c3b      	lsrs	r3, r7, #16
 8000d3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d42:	fa1f f884 	uxth.w	r8, r4
 8000d46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d4e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d52:	458a      	cmp	sl, r1
 8000d54:	fa02 f206 	lsl.w	r2, r2, r6
 8000d58:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x220>
 8000d5e:	1861      	adds	r1, r4, r1
 8000d60:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d64:	d248      	bcs.n	8000df8 <__udivmoddi4+0x2a8>
 8000d66:	458a      	cmp	sl, r1
 8000d68:	d946      	bls.n	8000df8 <__udivmoddi4+0x2a8>
 8000d6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6e:	4421      	add	r1, r4
 8000d70:	eba1 010a 	sub.w	r1, r1, sl
 8000d74:	b2bf      	uxth	r7, r7
 8000d76:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d7a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d82:	fb00 f808 	mul.w	r8, r0, r8
 8000d86:	45b8      	cmp	r8, r7
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x24a>
 8000d8a:	19e7      	adds	r7, r4, r7
 8000d8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d90:	d22e      	bcs.n	8000df0 <__udivmoddi4+0x2a0>
 8000d92:	45b8      	cmp	r8, r7
 8000d94:	d92c      	bls.n	8000df0 <__udivmoddi4+0x2a0>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4427      	add	r7, r4
 8000d9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9e:	eba7 0708 	sub.w	r7, r7, r8
 8000da2:	fba0 8902 	umull	r8, r9, r0, r2
 8000da6:	454f      	cmp	r7, r9
 8000da8:	46c6      	mov	lr, r8
 8000daa:	4649      	mov	r1, r9
 8000dac:	d31a      	bcc.n	8000de4 <__udivmoddi4+0x294>
 8000dae:	d017      	beq.n	8000de0 <__udivmoddi4+0x290>
 8000db0:	b15d      	cbz	r5, 8000dca <__udivmoddi4+0x27a>
 8000db2:	ebb3 020e 	subs.w	r2, r3, lr
 8000db6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dba:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dbe:	40f2      	lsrs	r2, r6
 8000dc0:	ea4c 0202 	orr.w	r2, ip, r2
 8000dc4:	40f7      	lsrs	r7, r6
 8000dc6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dca:	2600      	movs	r6, #0
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	462e      	mov	r6, r5
 8000dd4:	4628      	mov	r0, r5
 8000dd6:	e70b      	b.n	8000bf0 <__udivmoddi4+0xa0>
 8000dd8:	4606      	mov	r6, r0
 8000dda:	e6e9      	b.n	8000bb0 <__udivmoddi4+0x60>
 8000ddc:	4618      	mov	r0, r3
 8000dde:	e6fd      	b.n	8000bdc <__udivmoddi4+0x8c>
 8000de0:	4543      	cmp	r3, r8
 8000de2:	d2e5      	bcs.n	8000db0 <__udivmoddi4+0x260>
 8000de4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000de8:	eb69 0104 	sbc.w	r1, r9, r4
 8000dec:	3801      	subs	r0, #1
 8000dee:	e7df      	b.n	8000db0 <__udivmoddi4+0x260>
 8000df0:	4608      	mov	r0, r1
 8000df2:	e7d2      	b.n	8000d9a <__udivmoddi4+0x24a>
 8000df4:	4660      	mov	r0, ip
 8000df6:	e78d      	b.n	8000d14 <__udivmoddi4+0x1c4>
 8000df8:	4681      	mov	r9, r0
 8000dfa:	e7b9      	b.n	8000d70 <__udivmoddi4+0x220>
 8000dfc:	4666      	mov	r6, ip
 8000dfe:	e775      	b.n	8000cec <__udivmoddi4+0x19c>
 8000e00:	4630      	mov	r0, r6
 8000e02:	e74a      	b.n	8000c9a <__udivmoddi4+0x14a>
 8000e04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e08:	4439      	add	r1, r7
 8000e0a:	e713      	b.n	8000c34 <__udivmoddi4+0xe4>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	443c      	add	r4, r7
 8000e10:	e724      	b.n	8000c5c <__udivmoddi4+0x10c>
 8000e12:	bf00      	nop

08000e14 <__aeabi_idiv0>:
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <Active_ctor>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t Active_ctor(Active *const ao, EventHandler evt_handler)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
    if (evt_handler == NULL || ao == NULL)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <Active_ctor+0x16>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <Active_ctor+0x1a>
    {
        return MOD_ERR_ARG;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e003      	b.n	8000e3a <Active_ctor+0x22>
    }

    ao->evt_handler = evt_handler;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	609a      	str	r2, [r3, #8]
    return MOD_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <Active_start>:

mod_err_t Active_start(Active *const ao,
                       const osThreadAttr_t *const thread_attr,
                       uint32_t msg_count,
                       const osMessageQueueAttr_t *const queue_attr)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	603b      	str	r3, [r7, #0]
    ao->thread_id = osThreadNew(Active_event_loop, (void *)ao, thread_attr);
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	68f9      	ldr	r1, [r7, #12]
 8000e5a:	480e      	ldr	r0, [pc, #56]	; (8000e94 <Active_start+0x4c>)
 8000e5c:	f006 fd98 	bl	8007990 <osThreadNew>
 8000e60:	4602      	mov	r2, r0
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	601a      	str	r2, [r3, #0]
    ao->queue_id = osMessageQueueNew(msg_count, sizeof(Event *), queue_attr);
 8000e66:	683a      	ldr	r2, [r7, #0]
 8000e68:	2104      	movs	r1, #4
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f006 ff2a 	bl	8007cc4 <osMessageQueueNew>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	605a      	str	r2, [r3, #4]

    if (ao->thread_id == NULL || ao->queue_id == NULL)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <Active_start+0x3e>
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <Active_start+0x42>
    {
        return MOD_ERR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <Active_start+0x44>
    }

    return MOD_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	08000fe9 	.word	0x08000fe9

08000e98 <Active_post>:

mod_err_t Active_post(Active *const ao, Event const *const evt)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
    /* Put pointer to event object */
    osStatus_t err = osMessageQueuePut(ao->queue_id, &evt, 0U, 0U);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6858      	ldr	r0, [r3, #4]
 8000ea6:	4639      	mov	r1, r7
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f006 ff7e 	bl	8007dac <osMessageQueuePut>
 8000eb0:	60f8      	str	r0, [r7, #12]
    if (err != osOK)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <Active_post+0x24>
    {
        return MOD_ERR_TIMEOUT;
 8000eb8:	2309      	movs	r3, #9
 8000eba:	e000      	b.n	8000ebe <Active_post+0x26>
    }

    return MOD_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <TimeEvent_ctor>:

void TimeEvent_ctor(TimeEvent *const time_evt, Signal sig, Active *ao)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
    /* No critical section because it is presumed that all Time_Events
     * are created *before* multitasking has started. */
    time_evt->base.sig = sig;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	601a      	str	r2, [r3, #0]
    time_evt->ao = ao;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	605a      	str	r2, [r3, #4]
    time_evt->timeout = 0U;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
    time_evt->reload = 0U;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]

    /* Start 1 s software timer. */
    if(num_time_events == 0)
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <TimeEvent_ctor+0xdc>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d12b      	bne.n	8000f4c <TimeEvent_ctor+0x84>
    {
        timer_inst = osTimerNew(TimeEvent_tick, osTimerPeriodic, NULL, NULL);
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2101      	movs	r1, #1
 8000efa:	482b      	ldr	r0, [pc, #172]	; (8000fa8 <TimeEvent_ctor+0xe0>)
 8000efc:	f006 fe38 	bl	8007b70 <osTimerNew>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4a2a      	ldr	r2, [pc, #168]	; (8000fac <TimeEvent_ctor+0xe4>)
 8000f04:	6013      	str	r3, [r2, #0]
        ASSERT(osTimerStart(timer_inst, 1000) == osOK);
 8000f06:	4b29      	ldr	r3, [pc, #164]	; (8000fac <TimeEvent_ctor+0xe4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f006 feaa 	bl	8007c68 <osTimerStart>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d018      	beq.n	8000f4c <TimeEvent_ctor+0x84>
 8000f1a:	f003 fd3f 	bl	800499c <HAL_GetTick>
 8000f1e:	6178      	str	r0, [r7, #20]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	4a23      	ldr	r2, [pc, #140]	; (8000fb0 <TimeEvent_ctor+0xe8>)
 8000f24:	fba2 2303 	umull	r2, r3, r2, r3
 8000f28:	0999      	lsrs	r1, r3, #6
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	4a20      	ldr	r2, [pc, #128]	; (8000fb0 <TimeEvent_ctor+0xe8>)
 8000f2e:	fba2 0203 	umull	r0, r2, r2, r3
 8000f32:	0992      	lsrs	r2, r2, #6
 8000f34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f38:	fb00 f202 	mul.w	r2, r0, r2
 8000f3c:	1a9a      	subs	r2, r3, r2
 8000f3e:	235f      	movs	r3, #95	; 0x5f
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <TimeEvent_ctor+0xec>)
 8000f44:	481c      	ldr	r0, [pc, #112]	; (8000fb8 <TimeEvent_ctor+0xf0>)
 8000f46:	f003 f86b 	bl	8004020 <printf_>
 8000f4a:	e7fe      	b.n	8000f4a <TimeEvent_ctor+0x82>
    }

    /* Register TimeEvent instance. */
    ASSERT(num_time_events < ARRAY_SIZE(time_events));
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <TimeEvent_ctor+0xdc>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b09      	cmp	r3, #9
 8000f52:	d918      	bls.n	8000f86 <TimeEvent_ctor+0xbe>
 8000f54:	f003 fd22 	bl	800499c <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <TimeEvent_ctor+0xe8>)
 8000f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f62:	0999      	lsrs	r1, r3, #6
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <TimeEvent_ctor+0xe8>)
 8000f68:	fba2 0203 	umull	r0, r2, r2, r3
 8000f6c:	0992      	lsrs	r2, r2, #6
 8000f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f72:	fb00 f202 	mul.w	r2, r0, r2
 8000f76:	1a9a      	subs	r2, r3, r2
 8000f78:	2363      	movs	r3, #99	; 0x63
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <TimeEvent_ctor+0xec>)
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <TimeEvent_ctor+0xf0>)
 8000f80:	f003 f84e 	bl	8004020 <printf_>
 8000f84:	e7fe      	b.n	8000f84 <TimeEvent_ctor+0xbc>
    time_events[num_time_events++] = time_evt;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <TimeEvent_ctor+0xdc>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	b2d1      	uxtb	r1, r2
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <TimeEvent_ctor+0xdc>)
 8000f90:	7011      	strb	r1, [r2, #0]
 8000f92:	4619      	mov	r1, r3
 8000f94:	4a09      	ldr	r2, [pc, #36]	; (8000fbc <TimeEvent_ctor+0xf4>)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000f9c:	bf00      	nop
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000154 	.word	0x20000154
 8000fa8:	080010d1 	.word	0x080010d1
 8000fac:	20003b48 	.word	0x20003b48
 8000fb0:	10624dd3 	.word	0x10624dd3
 8000fb4:	0800af20 	.word	0x0800af20
 8000fb8:	0800af38 	.word	0x0800af38
 8000fbc:	2000012c 	.word	0x2000012c

08000fc0 <TimeEvent_arm>:

void TimeEvent_arm(TimeEvent *const time_evt, uint32_t timeout, uint32_t reload)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
    osKernelLock(); // Data shared between threads and timer ISR.
 8000fcc:	f006 fc88 	bl	80078e0 <osKernelLock>
    time_evt->timeout = timeout;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	609a      	str	r2, [r3, #8]
    time_evt->reload = reload;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	60da      	str	r2, [r3, #12]
    osKernelUnlock();
 8000fdc:	f006 fca6 	bl	800792c <osKernelUnlock>
}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <Active_event_loop>:
 *
 * @param argument Starting argument passed to function.
 *                 In this case, an Active *.
 */
static void Active_event_loop(void *argument)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b08b      	sub	sp, #44	; 0x2c
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	6078      	str	r0, [r7, #4]
    Active *ao = (Active *)argument;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	61fb      	str	r3, [r7, #28]

    /* Initialize the AO */
    static const Event initEvt = {.sig = INIT_SIG};
    ao->evt_handler(ao, &initEvt);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	492e      	ldr	r1, [pc, #184]	; (80010b4 <Active_event_loop+0xcc>)
 8000ffa:	69f8      	ldr	r0, [r7, #28]
 8000ffc:	4798      	blx	r3
    /* Event loop */
    while (1)
    {
        /* Get pointer to event object. */
        Event *evt;
        osStatus_t err = osMessageQueueGet(ao->queue_id, &evt, NULL, osWaitForever);
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	6858      	ldr	r0, [r3, #4]
 8001002:	f107 010c 	add.w	r1, r7, #12
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
 800100a:	2200      	movs	r2, #0
 800100c:	f006 ff2e 	bl	8007e6c <osMessageQueueGet>
 8001010:	61b8      	str	r0, [r7, #24]
        LOGI(TAG, "Event received.");
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <Active_event_loop+0xd0>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d01c      	beq.n	8001054 <Active_event_loop+0x6c>
 800101a:	f003 fcbf 	bl	800499c <HAL_GetTick>
 800101e:	6178      	str	r0, [r7, #20]
 8001020:	4b26      	ldr	r3, [pc, #152]	; (80010bc <Active_event_loop+0xd4>)
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <Active_event_loop+0xd8>)
 8001028:	fba2 2303 	umull	r2, r3, r2, r3
 800102c:	0999      	lsrs	r1, r3, #6
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <Active_event_loop+0xd8>)
 8001032:	fba3 4302 	umull	r4, r3, r3, r2
 8001036:	099b      	lsrs	r3, r3, #6
 8001038:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800103c:	fb04 f303 	mul.w	r3, r4, r3
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <Active_event_loop+0xd4>)
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	9201      	str	r2, [sp, #4]
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	460b      	mov	r3, r1
 800104c:	4a1d      	ldr	r2, [pc, #116]	; (80010c4 <Active_event_loop+0xdc>)
 800104e:	2103      	movs	r1, #3
 8001050:	f000 fe74 	bl	8001d3c <log_printf>
        if (err != osOK)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d024      	beq.n	80010a4 <Active_event_loop+0xbc>
        {
            LOGE(TAG, "Message queue error.");
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <Active_event_loop+0xd0>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d020      	beq.n	80010a4 <Active_event_loop+0xbc>
 8001062:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <Active_event_loop+0xe0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	dd1c      	ble.n	80010a4 <Active_event_loop+0xbc>
 800106a:	f003 fc97 	bl	800499c <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <Active_event_loop+0xd4>)
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <Active_event_loop+0xd8>)
 8001078:	fba2 2303 	umull	r2, r3, r2, r3
 800107c:	0999      	lsrs	r1, r3, #6
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <Active_event_loop+0xd8>)
 8001082:	fba3 4302 	umull	r4, r3, r3, r2
 8001086:	099b      	lsrs	r3, r3, #6
 8001088:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800108c:	fb04 f303 	mul.w	r3, r4, r3
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <Active_event_loop+0xd4>)
 8001094:	6812      	ldr	r2, [r2, #0]
 8001096:	9201      	str	r2, [sp, #4]
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	460b      	mov	r3, r1
 800109c:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <Active_event_loop+0xe4>)
 800109e:	2101      	movs	r1, #1
 80010a0:	f000 fe4c 	bl	8001d3c <log_printf>
        }

        /* Dispatch to event handler and run to completion. */
        ao->evt_handler(ao, evt);
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	4611      	mov	r1, r2
 80010ac:	69f8      	ldr	r0, [r7, #28]
 80010ae:	4798      	blx	r3
    {
 80010b0:	e7a5      	b.n	8000ffe <Active_event_loop+0x16>
 80010b2:	bf00      	nop
 80010b4:	0800b834 	.word	0x0800b834
 80010b8:	20000060 	.word	0x20000060
 80010bc:	20000000 	.word	0x20000000
 80010c0:	10624dd3 	.word	0x10624dd3
 80010c4:	0800af70 	.word	0x0800af70
 80010c8:	20000064 	.word	0x20000064
 80010cc:	0800af9c 	.word	0x0800af9c

080010d0 <TimeEvent_tick>:
 *
 * @note This function should be called from within a 1 ms timer ISR
 *       or using a 1 ms OS-specific software timer.
 */
static void TimeEvent_tick(void *argument)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0U; i < num_time_events; ++i)
 80010d8:	2300      	movs	r3, #0
 80010da:	75fb      	strb	r3, [r7, #23]
 80010dc:	e03b      	b.n	8001156 <TimeEvent_tick+0x86>
    {
        TimeEvent *const t = time_events[i];
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	4a22      	ldr	r2, [pc, #136]	; (800116c <TimeEvent_tick+0x9c>)
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	613b      	str	r3, [r7, #16]
        ASSERT(t);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d118      	bne.n	8001120 <TimeEvent_tick+0x50>
 80010ee:	f003 fc55 	bl	800499c <HAL_GetTick>
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4a1e      	ldr	r2, [pc, #120]	; (8001170 <TimeEvent_tick+0xa0>)
 80010f8:	fba2 2303 	umull	r2, r3, r2, r3
 80010fc:	0999      	lsrs	r1, r3, #6
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4a1b      	ldr	r2, [pc, #108]	; (8001170 <TimeEvent_tick+0xa0>)
 8001102:	fba2 0203 	umull	r0, r2, r2, r3
 8001106:	0992      	lsrs	r2, r2, #6
 8001108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800110c:	fb00 f202 	mul.w	r2, r0, r2
 8001110:	1a9a      	subs	r2, r3, r2
 8001112:	23a9      	movs	r3, #169	; 0xa9
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <TimeEvent_tick+0xa4>)
 8001118:	4817      	ldr	r0, [pc, #92]	; (8001178 <TimeEvent_tick+0xa8>)
 800111a:	f002 ff81 	bl	8004020 <printf_>
 800111e:	e7fe      	b.n	800111e <TimeEvent_tick+0x4e>
        
        if (t->timeout > 0U)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d013      	beq.n	8001150 <TimeEvent_tick+0x80>
        { 
            t->timeout = t->timeout - 1; // Down-counting timer.
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	1e5a      	subs	r2, r3, #1
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	609a      	str	r2, [r3, #8]
            if (t->timeout == 0U)
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10a      	bne.n	8001150 <TimeEvent_tick+0x80>
            {   
                Active_post(t->ao, &(t->base));
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fea8 	bl	8000e98 <Active_post>
                t->timeout = t->reload;
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0U; i < num_time_events; ++i)
 8001150:	7dfb      	ldrb	r3, [r7, #23]
 8001152:	3301      	adds	r3, #1
 8001154:	75fb      	strb	r3, [r7, #23]
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <TimeEvent_tick+0xac>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	7dfa      	ldrb	r2, [r7, #23]
 800115c:	429a      	cmp	r2, r3
 800115e:	d3be      	bcc.n	80010de <TimeEvent_tick+0xe>
            }
        }
    }
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000012c 	.word	0x2000012c
 8001170:	10624dd3 	.word	0x10624dd3
 8001174:	0800af20 	.word	0x0800af20
 8001178:	0800af38 	.word	0x0800af38
 800117c:	20000154 	.word	0x20000154

08001180 <cmd_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t cmd_init(void)
{
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b085      	sub	sp, #20
 8001184:	af02      	add	r7, sp, #8
    Active_ctor((Active *)&cmd_ao, (EventHandler)&Cmd_Event_Handler); // Call base active object constructor.
 8001186:	491b      	ldr	r1, [pc, #108]	; (80011f4 <cmd_init+0x74>)
 8001188:	481b      	ldr	r0, [pc, #108]	; (80011f8 <cmd_init+0x78>)
 800118a:	f7ff fe45 	bl	8000e18 <Active_ctor>
    cmd_base = &(cmd_ao.base);
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <cmd_init+0x7c>)
 8001190:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <cmd_init+0x78>)
 8001192:	601a      	str	r2, [r3, #0]
    memset(cmd_ao.cmd_buf, 0, CONSOLE_CMD_BUF_SIZE); // Initialize private variables.
 8001194:	2228      	movs	r2, #40	; 0x28
 8001196:	2100      	movs	r1, #0
 8001198:	4819      	ldr	r0, [pc, #100]	; (8001200 <cmd_init+0x80>)
 800119a:	f009 fdaf 	bl	800acfc <memset>

    TimeEvent_ctor(&cmd_time_evt, TIMEOUT_SIG, &cmd_ao.base);
 800119e:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <cmd_init+0x78>)
 80011a0:	2102      	movs	r1, #2
 80011a2:	4818      	ldr	r0, [pc, #96]	; (8001204 <cmd_init+0x84>)
 80011a4:	f7ff fe90 	bl	8000ec8 <TimeEvent_ctor>

    LOGI(TAG, "Initialized command.");
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <cmd_init+0x88>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d01c      	beq.n	80011ea <cmd_init+0x6a>
 80011b0:	f003 fbf4 	bl	800499c <HAL_GetTick>
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <cmd_init+0x8c>)
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <cmd_init+0x90>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	0999      	lsrs	r1, r3, #6
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <cmd_init+0x90>)
 80011c8:	fba3 4302 	umull	r4, r3, r3, r2
 80011cc:	099b      	lsrs	r3, r3, #6
 80011ce:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80011d2:	fb04 f303 	mul.w	r3, r4, r3
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	4a0c      	ldr	r2, [pc, #48]	; (800120c <cmd_init+0x8c>)
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	9201      	str	r2, [sp, #4]
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	460b      	mov	r3, r1
 80011e2:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <cmd_init+0x94>)
 80011e4:	2103      	movs	r1, #3
 80011e6:	f000 fda9 	bl	8001d3c <log_printf>
    return MOD_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	08001865 	.word	0x08001865
 80011f8:	20000180 	.word	0x20000180
 80011fc:	20003b4c 	.word	0x20003b4c
 8001200:	2000018c 	.word	0x2000018c
 8001204:	200001b4 	.word	0x200001b4
 8001208:	20000060 	.word	0x20000060
 800120c:	20000004 	.word	0x20000004
 8001210:	10624dd3 	.word	0x10624dd3
 8001214:	0800afd4 	.word	0x0800afd4

08001218 <cmd_start>:

mod_err_t cmd_start()
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
    static const osThreadAttr_t thread_attr = {.stack_size = CMD_THREAD_SIZE};
    return Active_start((Active *)&cmd_ao, &thread_attr, CMD_EVENT_MSG_COUNT, NULL);
 800121c:	2300      	movs	r3, #0
 800121e:	2205      	movs	r2, #5
 8001220:	4903      	ldr	r1, [pc, #12]	; (8001230 <cmd_start+0x18>)
 8001222:	4804      	ldr	r0, [pc, #16]	; (8001234 <cmd_start+0x1c>)
 8001224:	f7ff fe10 	bl	8000e48 <Active_start>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	0800b838 	.word	0x0800b838
 8001234:	20000180 	.word	0x20000180

08001238 <cmd_register>:

mod_err_t cmd_register(const cmd_client_info *_client_info)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < CMD_MAX_CLIENTS; i++)
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e01d      	b.n	8001282 <cmd_register+0x4a>
    {
        if (client_infos[i] == NULL || strcasecmp(client_infos[i]->client_name, _client_info->client_name) == 0)
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <cmd_register+0x5c>)
 800124a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00d      	beq.n	800126e <cmd_register+0x36>
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <cmd_register+0x5c>)
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	4610      	mov	r0, r2
 8001264:	f009 fe0c 	bl	800ae80 <strcasecmp>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d106      	bne.n	800127c <cmd_register+0x44>
        {
            client_infos[i] = _client_info;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	4908      	ldr	r1, [pc, #32]	; (8001294 <cmd_register+0x5c>)
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return MOD_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	e006      	b.n	800128a <cmd_register+0x52>
    for (uint8_t i = 0; i < CMD_MAX_CLIENTS; i++)
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	3301      	adds	r3, #1
 8001280:	73fb      	strb	r3, [r7, #15]
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	2b09      	cmp	r3, #9
 8001286:	d9de      	bls.n	8001246 <cmd_register+0xe>
        }
    }
    return MOD_ERR_RESOURCE;
 8001288:	2303      	movs	r3, #3
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000158 	.word	0x20000158

08001298 <cmd_execute>:
 *
 * This function parses the command line and then executes the command,
 * typically by running a command function handler for a client.
 */
static mod_err_t cmd_execute(char *cmd_line)
{
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b095      	sub	sp, #84	; 0x54
 800129c:	af04      	add	r7, sp, #16
 800129e:	6078      	str	r0, [r7, #4]
    LOGI(TAG, "Command received: %s", cmd_line);
 80012a0:	4b30      	ldr	r3, [pc, #192]	; (8001364 <cmd_execute+0xcc>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d01e      	beq.n	80012e6 <cmd_execute+0x4e>
 80012a8:	f003 fb78 	bl	800499c <HAL_GetTick>
 80012ac:	63f8      	str	r0, [r7, #60]	; 0x3c
 80012ae:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <cmd_execute+0xd0>)
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012b4:	4a2d      	ldr	r2, [pc, #180]	; (800136c <cmd_execute+0xd4>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	099c      	lsrs	r4, r3, #6
 80012bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <cmd_execute+0xd4>)
 80012c0:	fba3 1302 	umull	r1, r3, r3, r2
 80012c4:	099b      	lsrs	r3, r3, #6
 80012c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012ca:	fb01 f303 	mul.w	r3, r1, r3
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	4a25      	ldr	r2, [pc, #148]	; (8001368 <cmd_execute+0xd0>)
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	9102      	str	r1, [sp, #8]
 80012d8:	9201      	str	r2, [sp, #4]
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	4623      	mov	r3, r4
 80012de:	4a24      	ldr	r2, [pc, #144]	; (8001370 <cmd_execute+0xd8>)
 80012e0:	2103      	movs	r1, #3
 80012e2:	f000 fd2b 	bl	8001d3c <log_printf>
    uint32_t num_tokens = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
    const char *tokens[CMD_MAX_TOKENS] = {0}; // Store individual tokens as strings.
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2228      	movs	r2, #40	; 0x28
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f009 fd02 	bl	800acfc <memset>

    /* Tokenize command line */
    mod_err_t err = tokenize(cmd_line, tokens, &num_tokens);
 80012f8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	4619      	mov	r1, r3
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f836 	bl	8001374 <tokenize>
 8001308:	4603      	mov	r3, r0
 800130a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (err)
 800130e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <cmd_execute+0x84>
    {
        return err;
 8001316:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800131a:	e01f      	b.n	800135c <cmd_execute+0xc4>
    }

    /* If there are no tokens, nothing to do. */
    if (num_tokens == 0)
 800131c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <cmd_execute+0x8e>
    {
        return MOD_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e01a      	b.n	800135c <cmd_execute+0xc4>
    }

    /* Handle help/? command. */
    err = help_handler(tokens);
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f8a6 	bl	800147c <help_handler>
 8001330:	4603      	mov	r3, r0
 8001332:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (err != MOD_DID_NOTHING)
 8001336:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800133a:	2b0a      	cmp	r3, #10
 800133c:	d002      	beq.n	8001344 <cmd_execute+0xac>
    {
        return err;
 800133e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001342:	e00b      	b.n	800135c <cmd_execute+0xc4>
    }

    err = client_command_handler(tokens, num_tokens);
 8001344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f91f 	bl	8001590 <client_command_handler>
 8001352:	4603      	mov	r3, r0
 8001354:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    return err;
 8001358:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 800135c:	4618      	mov	r0, r3
 800135e:	3744      	adds	r7, #68	; 0x44
 8001360:	46bd      	mov	sp, r7
 8001362:	bd90      	pop	{r4, r7, pc}
 8001364:	20000060 	.word	0x20000060
 8001368:	20000004 	.word	0x20000004
 800136c:	10624dd3 	.word	0x10624dd3
 8001370:	0800b0ec 	.word	0x0800b0ec

08001374 <tokenize>:
 * @return MOD_OK if successful, "MOD_ERR_" otherwise.
 * 
 * Tokens include name of client, command, and arguments passed.
 */
static inline mod_err_t tokenize(char *str_to_tokenize, const char **tokens, uint32_t *num_tokens)
{
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b08b      	sub	sp, #44	; 0x2c
 8001378:	af02      	add	r7, sp, #8
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
    char *ptr = str_to_tokenize;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	61fb      	str	r3, [r7, #28]
    uint32_t token_count = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]

    /* Iterate through each token. */
    while (1)
    {
        /* Find start of token. */
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 8001388:	e002      	b.n	8001390 <tokenize+0x1c>
        {
            ptr++;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3301      	adds	r3, #1
 800138e:	61fb      	str	r3, [r7, #28]
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d009      	beq.n	80013ac <tokenize+0x38>
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	4a32      	ldr	r2, [pc, #200]	; (8001468 <tokenize+0xf4>)
 80013a0:	4413      	add	r3, r2
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1ee      	bne.n	800138a <tokenize+0x16>
        }

        if (*ptr == '\0') // Found end of line.
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d04e      	beq.n	8001452 <tokenize+0xde>
        {
            break;
        }
        else
        {
            if (token_count >= CMD_MAX_TOKENS)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2b09      	cmp	r3, #9
 80013b8:	d922      	bls.n	8001400 <tokenize+0x8c>
            {
                LOGW(TAG, "Too many tokens");
 80013ba:	4b2c      	ldr	r3, [pc, #176]	; (800146c <tokenize+0xf8>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01c      	beq.n	80013fc <tokenize+0x88>
 80013c2:	f003 faeb 	bl	800499c <HAL_GetTick>
 80013c6:	6178      	str	r0, [r7, #20]
 80013c8:	4b29      	ldr	r3, [pc, #164]	; (8001470 <tokenize+0xfc>)
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	4a29      	ldr	r2, [pc, #164]	; (8001474 <tokenize+0x100>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	0999      	lsrs	r1, r3, #6
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4b26      	ldr	r3, [pc, #152]	; (8001474 <tokenize+0x100>)
 80013da:	fba3 4302 	umull	r4, r3, r3, r2
 80013de:	099b      	lsrs	r3, r3, #6
 80013e0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80013e4:	fb04 f303 	mul.w	r3, r4, r3
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	4a21      	ldr	r2, [pc, #132]	; (8001470 <tokenize+0xfc>)
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	9201      	str	r2, [sp, #4]
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	460b      	mov	r3, r1
 80013f4:	4a20      	ldr	r2, [pc, #128]	; (8001478 <tokenize+0x104>)
 80013f6:	2102      	movs	r1, #2
 80013f8:	f000 fca0 	bl	8001d3c <log_printf>
                return MOD_ERR_BAD_CMD;
 80013fc:	2304      	movs	r3, #4
 80013fe:	e02f      	b.n	8001460 <tokenize+0xec>
            }
            else
            {
                /* Record pointer to start of token, then find end of token. */
                tokens[token_count] = ptr;
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	4413      	add	r3, r2
 8001408:	69fa      	ldr	r2, [r7, #28]
 800140a:	601a      	str	r2, [r3, #0]
                ptr++;
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	3301      	adds	r3, #1
 8001410:	61fb      	str	r3, [r7, #28]
                token_count++;
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	3301      	adds	r3, #1
 8001416:	61bb      	str	r3, [r7, #24]
                while (*ptr != '\0' && !isspace((unsigned char)*ptr))
 8001418:	e002      	b.n	8001420 <tokenize+0xac>
                {
                    ptr++;
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3301      	adds	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
                while (*ptr != '\0' && !isspace((unsigned char)*ptr))
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d009      	beq.n	800143c <tokenize+0xc8>
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <tokenize+0xf4>)
 8001430:	4413      	add	r3, r2
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0ee      	beq.n	800141a <tokenize+0xa6>
                }
                if (*ptr != '\0')
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d008      	beq.n	8001456 <tokenize+0xe2>
                {
                    *ptr = '\0'; // Terminate end of token.
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
                    ptr++;
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 8001450:	e79e      	b.n	8001390 <tokenize+0x1c>
            break;
 8001452:	bf00      	nop
 8001454:	e000      	b.n	8001458 <tokenize+0xe4>
                }
                else
                {
                    break; // Found end of line ('\0'), no more tokens.
 8001456:	bf00      	nop
                }
            }
        }
    }

    *num_tokens = token_count;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	601a      	str	r2, [r3, #0]
    return MOD_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3724      	adds	r7, #36	; 0x24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	0800b940 	.word	0x0800b940
 800146c:	20000060 	.word	0x20000060
 8001470:	20000004 	.word	0x20000004
 8001474:	10624dd3 	.word	0x10624dd3
 8001478:	0800b120 	.word	0x0800b120

0800147c <help_handler>:
 *         otherwise a "MOD_ERR" value.
 * 
 * Iterates through each client infos 
 */
static inline mod_err_t help_handler(const char **tokens)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    if (strcasecmp("help", tokens[0]) == 0 || strcasecmp("?", tokens[0]) == 0)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	4837      	ldr	r0, [pc, #220]	; (8001568 <help_handler+0xec>)
 800148c:	f009 fcf8 	bl	800ae80 <strcasecmp>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d008      	beq.n	80014a8 <help_handler+0x2c>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4619      	mov	r1, r3
 800149c:	4833      	ldr	r0, [pc, #204]	; (800156c <help_handler+0xf0>)
 800149e:	f009 fcef 	bl	800ae80 <strcasecmp>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d159      	bne.n	800155c <help_handler+0xe0>
    {
        /* Iterate through commands of each client. */
        for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	75fb      	strb	r3, [r7, #23]
 80014ac:	e04b      	b.n	8001546 <help_handler+0xca>
        {
            const cmd_client_info *ci = client_infos[i];
 80014ae:	7dfb      	ldrb	r3, [r7, #23]
 80014b0:	4a2f      	ldr	r2, [pc, #188]	; (8001570 <help_handler+0xf4>)
 80014b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b6:	613b      	str	r3, [r7, #16]

            LOG("%s (", ci->client_name);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	482d      	ldr	r0, [pc, #180]	; (8001574 <help_handler+0xf8>)
 80014c0:	f002 fdae 	bl	8004020 <printf_>

            if (ci->num_u16_pms > 0 && ci->num_cmds == 0)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d007      	beq.n	80014dc <help_handler+0x60>
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d103      	bne.n	80014dc <help_handler+0x60>
            {
                /* If client provided pm info only, display pm command. */
                LOG("pm)\r\n");
 80014d4:	4828      	ldr	r0, [pc, #160]	; (8001578 <help_handler+0xfc>)
 80014d6:	f002 fda3 	bl	8004020 <printf_>
                continue;
 80014da:	e031      	b.n	8001540 <help_handler+0xc4>
            }
            else if (ci->num_cmds == 0)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d02c      	beq.n	800153e <help_handler+0xc2>
            {
                continue;
            }
            else
            {
                uint8_t i2 = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	75bb      	strb	r3, [r7, #22]
                for (i2 = 0; i2 < ci->num_cmds; i2++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	75bb      	strb	r3, [r7, #22]
 80014ec:	e017      	b.n	800151e <help_handler+0xa2>
                {
                    const cmd_cmd_info *cci = &(ci->cmds[i2]);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	6899      	ldr	r1, [r3, #8]
 80014f2:	7dba      	ldrb	r2, [r7, #22]
 80014f4:	4613      	mov	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	60fb      	str	r3, [r7, #12]
                    LOG("%s%s", i2 == 0 ? "" : ", ", cci->cmd_name);
 8001500:	7dbb      	ldrb	r3, [r7, #22]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <help_handler+0x8e>
 8001506:	491d      	ldr	r1, [pc, #116]	; (800157c <help_handler+0x100>)
 8001508:	e000      	b.n	800150c <help_handler+0x90>
 800150a:	491d      	ldr	r1, [pc, #116]	; (8001580 <help_handler+0x104>)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	481c      	ldr	r0, [pc, #112]	; (8001584 <help_handler+0x108>)
 8001514:	f002 fd84 	bl	8004020 <printf_>
                for (i2 = 0; i2 < ci->num_cmds; i2++)
 8001518:	7dbb      	ldrb	r3, [r7, #22]
 800151a:	3301      	adds	r3, #1
 800151c:	75bb      	strb	r3, [r7, #22]
 800151e:	7dba      	ldrb	r2, [r7, #22]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	d3e2      	bcc.n	80014ee <help_handler+0x72>
                }
                if (ci->num_u16_pms > 0)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <help_handler+0xba>
                {
                    LOG(", pm");
 8001530:	4815      	ldr	r0, [pc, #84]	; (8001588 <help_handler+0x10c>)
 8001532:	f002 fd75 	bl	8004020 <printf_>
                }
                LOG(")\r\n");
 8001536:	4815      	ldr	r0, [pc, #84]	; (800158c <help_handler+0x110>)
 8001538:	f002 fd72 	bl	8004020 <printf_>
 800153c:	e000      	b.n	8001540 <help_handler+0xc4>
                continue;
 800153e:	bf00      	nop
        for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	3301      	adds	r3, #1
 8001544:	75fb      	strb	r3, [r7, #23]
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	4a09      	ldr	r2, [pc, #36]	; (8001570 <help_handler+0xf4>)
 800154a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <help_handler+0xdc>
 8001552:	7dfb      	ldrb	r3, [r7, #23]
 8001554:	2b09      	cmp	r3, #9
 8001556:	d9aa      	bls.n	80014ae <help_handler+0x32>
            }
        }

        return MOD_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	e000      	b.n	800155e <help_handler+0xe2>
    }

    return MOD_DID_NOTHING; // Not a top-level help command.
 800155c:	230a      	movs	r3, #10
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	0800b14c 	.word	0x0800b14c
 800156c:	0800b154 	.word	0x0800b154
 8001570:	20000158 	.word	0x20000158
 8001574:	0800b158 	.word	0x0800b158
 8001578:	0800b164 	.word	0x0800b164
 800157c:	0800b174 	.word	0x0800b174
 8001580:	0800b178 	.word	0x0800b178
 8001584:	0800b17c 	.word	0x0800b17c
 8001588:	0800b188 	.word	0x0800b188
 800158c:	0800b194 	.word	0x0800b194

08001590 <client_command_handler>:
 * @return MOD_OK if successful, 
 *         MOD_DID_NOTHING if not a client command, 
 *         otherwise a "MOD_ERR" value.
 */
static inline mod_err_t client_command_handler(const char **tokens, uint32_t num_tokens)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 800159a:	2300      	movs	r3, #0
 800159c:	77fb      	strb	r3, [r7, #31]
 800159e:	e11c      	b.n	80017da <client_command_handler+0x24a>
    {
        const cmd_client_info *ci = client_infos[i];
 80015a0:	7ffb      	ldrb	r3, [r7, #31]
 80015a2:	4aa2      	ldr	r2, [pc, #648]	; (800182c <client_command_handler+0x29c>)
 80015a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a8:	617b      	str	r3, [r7, #20]

        /* Look for correct client first */
        if (strcasecmp(tokens[0], ci->client_name) != 0)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4610      	mov	r0, r2
 80015b6:	f009 fc63 	bl	800ae80 <strcasecmp>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <client_command_handler+0x38>
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 80015c0:	7ffb      	ldrb	r3, [r7, #31]
 80015c2:	3301      	adds	r3, #1
 80015c4:	77fb      	strb	r3, [r7, #31]
 80015c6:	e108      	b.n	80017da <client_command_handler+0x24a>
        {
            continue;
        }

        /* If there is no command with client, assume they want help. */
        if (num_tokens == 1)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d103      	bne.n	80015d6 <client_command_handler+0x46>
        {
            tokens[1] = "help";
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3304      	adds	r3, #4
 80015d2:	4a97      	ldr	r2, [pc, #604]	; (8001830 <client_command_handler+0x2a0>)
 80015d4:	601a      	str	r2, [r3, #0]
        }

        /* Handle help command directly. */
        if (strcasecmp(tokens[1], "help") == 0 || strcasecmp(tokens[1], "?") == 0)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3304      	adds	r3, #4
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4994      	ldr	r1, [pc, #592]	; (8001830 <client_command_handler+0x2a0>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f009 fc4e 	bl	800ae80 <strcasecmp>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d009      	beq.n	80015fe <client_command_handler+0x6e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3304      	adds	r3, #4
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4990      	ldr	r1, [pc, #576]	; (8001834 <client_command_handler+0x2a4>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f009 fc44 	bl	800ae80 <strcasecmp>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d128      	bne.n	8001650 <client_command_handler+0xc0>
        {
            /* Print out all commands associated with client */
            for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 80015fe:	2300      	movs	r3, #0
 8001600:	77bb      	strb	r3, [r7, #30]
 8001602:	e014      	b.n	800162e <client_command_handler+0x9e>
            {
                const cmd_cmd_info *cci = &(ci->cmds[i2]);
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	6899      	ldr	r1, [r3, #8]
 8001608:	7fba      	ldrb	r2, [r7, #30]
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	60fb      	str	r3, [r7, #12]
                LOG("%s %s: %s\r\n", ci->client_name, cci->cmd_name, cci->help);
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	6819      	ldr	r1, [r3, #0]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	4885      	ldr	r0, [pc, #532]	; (8001838 <client_command_handler+0x2a8>)
 8001624:	f002 fcfc 	bl	8004020 <printf_>
            for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 8001628:	7fbb      	ldrb	r3, [r7, #30]
 800162a:	3301      	adds	r3, #1
 800162c:	77bb      	strb	r3, [r7, #30]
 800162e:	7fba      	ldrb	r2, [r7, #30]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	d3e5      	bcc.n	8001604 <client_command_handler+0x74>
            }
            /* If client provided pm info, print help for pm command also. */
            if (ci->num_u16_pms > 0)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <client_command_handler+0xbc>
            {
                LOG("%s pm: get or clear performance measurements, "
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	487d      	ldr	r0, [pc, #500]	; (800183c <client_command_handler+0x2ac>)
 8001648:	f002 fcea 	bl	8004020 <printf_>
                    "args: [clear] \r\n",
                    ci->client_name);
            }

            return MOD_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	e0e8      	b.n	8001822 <client_command_handler+0x292>
        }

        /* Handle pm command directly. */
        if (strcasecmp(tokens[1], "pm") == 0)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3304      	adds	r3, #4
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	497a      	ldr	r1, [pc, #488]	; (8001840 <client_command_handler+0x2b0>)
 8001658:	4618      	mov	r0, r3
 800165a:	f009 fc11 	bl	800ae80 <strcasecmp>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d150      	bne.n	8001706 <client_command_handler+0x176>
        {
            if (ci->num_u16_pms > 0)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d04a      	beq.n	8001702 <client_command_handler+0x172>
            {
                bool clear = (num_tokens >= 3 && strcasecmp(tokens[2], "clear") == 0);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d90b      	bls.n	800168a <client_command_handler+0xfa>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3308      	adds	r3, #8
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4972      	ldr	r1, [pc, #456]	; (8001844 <client_command_handler+0x2b4>)
 800167a:	4618      	mov	r0, r3
 800167c:	f009 fc00 	bl	800ae80 <strcasecmp>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <client_command_handler+0xfa>
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <client_command_handler+0xfc>
 800168a:	2300      	movs	r3, #0
 800168c:	74fb      	strb	r3, [r7, #19]
 800168e:	7cfb      	ldrb	r3, [r7, #19]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	74fb      	strb	r3, [r7, #19]
                if (clear)
 8001696:	7cfb      	ldrb	r3, [r7, #19]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <client_command_handler+0x11a>
                {
                    LOG("Clearing %s performance measurements\r\n", ci->client_name);
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4619      	mov	r1, r3
 80016a2:	4869      	ldr	r0, [pc, #420]	; (8001848 <client_command_handler+0x2b8>)
 80016a4:	f002 fcbc 	bl	8004020 <printf_>
 80016a8:	e005      	b.n	80016b6 <client_command_handler+0x126>
                }
                else
                {
                    LOG("%s pms:\r\n", ci->client_name);
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4619      	mov	r1, r3
 80016b0:	4866      	ldr	r0, [pc, #408]	; (800184c <client_command_handler+0x2bc>)
 80016b2:	f002 fcb5 	bl	8004020 <printf_>
                }
                for (uint8_t i2 = 0; i2 < ci->num_u16_pms; i2++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	777b      	strb	r3, [r7, #29]
 80016ba:	e01d      	b.n	80016f8 <client_command_handler+0x168>
                {
                    if (clear)
 80016bc:	7cfb      	ldrb	r3, [r7, #19]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d007      	beq.n	80016d2 <client_command_handler+0x142>
                    {
                        ci->u16_pms[i2] = 0;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	7f7b      	ldrb	r3, [r7, #29]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	2200      	movs	r2, #0
 80016ce:	801a      	strh	r2, [r3, #0]
 80016d0:	e00f      	b.n	80016f2 <client_command_handler+0x162>
                    }
                    else
                    {
                        LOG("%s: %d\r\n", ci->u16_pm_names[i2], ci->u16_pms[i2]);
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	695a      	ldr	r2, [r3, #20]
 80016d6:	7f7b      	ldrb	r3, [r7, #29]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	6819      	ldr	r1, [r3, #0]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	7f7b      	ldrb	r3, [r7, #29]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	4858      	ldr	r0, [pc, #352]	; (8001850 <client_command_handler+0x2c0>)
 80016ee:	f002 fc97 	bl	8004020 <printf_>
                for (uint8_t i2 = 0; i2 < ci->num_u16_pms; i2++)
 80016f2:	7f7b      	ldrb	r3, [r7, #29]
 80016f4:	3301      	adds	r3, #1
 80016f6:	777b      	strb	r3, [r7, #29]
 80016f8:	7f7a      	ldrb	r2, [r7, #29]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d3dc      	bcc.n	80016bc <client_command_handler+0x12c>
                    }
                }
            }

            return MOD_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e08d      	b.n	8001822 <client_command_handler+0x292>
        }

        /* Look for command within client. */
        for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 8001706:	2300      	movs	r3, #0
 8001708:	773b      	strb	r3, [r7, #28]
 800170a:	e056      	b.n	80017ba <client_command_handler+0x22a>
        {
            if (strcasecmp(tokens[1], ci->cmds[i2].cmd_name) == 0)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3304      	adds	r3, #4
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	6899      	ldr	r1, [r3, #8]
 8001716:	7f3a      	ldrb	r2, [r7, #28]
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	f009 fbab 	bl	800ae80 <strcasecmp>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d141      	bne.n	80017b4 <client_command_handler+0x224>
            {
                if (num_tokens == 3 && (strcasecmp(tokens[2], "help") == 0 || strcasecmp(tokens[2], "?") == 0))
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d12d      	bne.n	8001792 <client_command_handler+0x202>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3308      	adds	r3, #8
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	493c      	ldr	r1, [pc, #240]	; (8001830 <client_command_handler+0x2a0>)
 800173e:	4618      	mov	r0, r3
 8001740:	f009 fb9e 	bl	800ae80 <strcasecmp>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d009      	beq.n	800175e <client_command_handler+0x1ce>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3308      	adds	r3, #8
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4938      	ldr	r1, [pc, #224]	; (8001834 <client_command_handler+0x2a4>)
 8001752:	4618      	mov	r0, r3
 8001754:	f009 fb94 	bl	800ae80 <strcasecmp>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d119      	bne.n	8001792 <client_command_handler+0x202>
                {
                    LOG("%s %s: %s\r\n", ci->client_name, ci->cmds[i2].cmd_name, ci->cmds[i2].help);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	6899      	ldr	r1, [r3, #8]
 8001766:	7f3a      	ldrb	r2, [r7, #28]
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	681c      	ldr	r4, [r3, #0]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	6899      	ldr	r1, [r3, #8]
 8001778:	7f3a      	ldrb	r2, [r7, #28]
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	440b      	add	r3, r1
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	4622      	mov	r2, r4
 8001788:	4601      	mov	r1, r0
 800178a:	482b      	ldr	r0, [pc, #172]	; (8001838 <client_command_handler+0x2a8>)
 800178c:	f002 fc48 	bl	8004020 <printf_>
 8001790:	e00e      	b.n	80017b0 <client_command_handler+0x220>
                }
                else
                {
                    ci->cmds[i2].cb(num_tokens - 2, tokens + 2); // Ignore client and command tokens.
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	6899      	ldr	r1, [r3, #8]
 8001796:	7f3a      	ldrb	r2, [r7, #28]
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	1e90      	subs	r0, r2, #2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	3208      	adds	r2, #8
 80017ac:	4611      	mov	r1, r2
 80017ae:	4798      	blx	r3
                }
                return MOD_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e036      	b.n	8001822 <client_command_handler+0x292>
        for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 80017b4:	7f3b      	ldrb	r3, [r7, #28]
 80017b6:	3301      	adds	r3, #1
 80017b8:	773b      	strb	r3, [r7, #28]
 80017ba:	7f3a      	ldrb	r2, [r7, #28]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d3a3      	bcc.n	800170c <client_command_handler+0x17c>
            }
        }

        LOG("No such command (%s %s)\r\n", tokens[0], tokens[1]);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6819      	ldr	r1, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3304      	adds	r3, #4
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	4820      	ldr	r0, [pc, #128]	; (8001854 <client_command_handler+0x2c4>)
 80017d2:	f002 fc25 	bl	8004020 <printf_>
        return MOD_ERR_BAD_CMD;
 80017d6:	2304      	movs	r3, #4
 80017d8:	e023      	b.n	8001822 <client_command_handler+0x292>
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 80017da:	7ffb      	ldrb	r3, [r7, #31]
 80017dc:	4a13      	ldr	r2, [pc, #76]	; (800182c <client_command_handler+0x29c>)
 80017de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <client_command_handler+0x25e>
 80017e6:	7ffb      	ldrb	r3, [r7, #31]
 80017e8:	2b09      	cmp	r3, #9
 80017ea:	f67f aed9 	bls.w	80015a0 <client_command_handler+0x10>
    }

    /* Could not find client */
    LOG("No such command: ");
 80017ee:	481a      	ldr	r0, [pc, #104]	; (8001858 <client_command_handler+0x2c8>)
 80017f0:	f002 fc16 	bl	8004020 <printf_>
    for (uint8_t i = 0; i < num_tokens; i++)
 80017f4:	2300      	movs	r3, #0
 80017f6:	76fb      	strb	r3, [r7, #27]
 80017f8:	e00b      	b.n	8001812 <client_command_handler+0x282>
    {
        LOG("%s ", tokens[i]);
 80017fa:	7efb      	ldrb	r3, [r7, #27]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	4815      	ldr	r0, [pc, #84]	; (800185c <client_command_handler+0x2cc>)
 8001808:	f002 fc0a 	bl	8004020 <printf_>
    for (uint8_t i = 0; i < num_tokens; i++)
 800180c:	7efb      	ldrb	r3, [r7, #27]
 800180e:	3301      	adds	r3, #1
 8001810:	76fb      	strb	r3, [r7, #27]
 8001812:	7efb      	ldrb	r3, [r7, #27]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d8ef      	bhi.n	80017fa <client_command_handler+0x26a>
    }
    LOG("\r\n");
 800181a:	4811      	ldr	r0, [pc, #68]	; (8001860 <client_command_handler+0x2d0>)
 800181c:	f002 fc00 	bl	8004020 <printf_>
    return MOD_ERR_BAD_CMD;
 8001820:	2304      	movs	r3, #4
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd90      	pop	{r4, r7, pc}
 800182a:	bf00      	nop
 800182c:	20000158 	.word	0x20000158
 8001830:	0800b14c 	.word	0x0800b14c
 8001834:	0800b154 	.word	0x0800b154
 8001838:	0800b1a0 	.word	0x0800b1a0
 800183c:	0800b1b4 	.word	0x0800b1b4
 8001840:	0800b1fc 	.word	0x0800b1fc
 8001844:	0800b200 	.word	0x0800b200
 8001848:	0800b208 	.word	0x0800b208
 800184c:	0800b238 	.word	0x0800b238
 8001850:	0800b24c 	.word	0x0800b24c
 8001854:	0800b25c 	.word	0x0800b25c
 8001858:	0800b280 	.word	0x0800b280
 800185c:	0800b29c 	.word	0x0800b29c
 8001860:	0800b2a8 	.word	0x0800b2a8

08001864 <Cmd_Event_Handler>:
 *
 * @param ao Command active object.
 * @param evt Command event object.
 */
static void Cmd_Event_Handler(Cmd_Active *const ao, Cmd_Event const *const evt)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af02      	add	r7, sp, #8
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
    switch (evt->base.sig)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d038      	beq.n	80018e8 <Cmd_Event_Handler+0x84>
 8001876:	2b02      	cmp	r3, #2
 8001878:	dc58      	bgt.n	800192c <Cmd_Event_Handler+0xc8>
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <Cmd_Event_Handler+0x20>
 800187e:	2b01      	cmp	r3, #1
 8001880:	d027      	beq.n	80018d2 <Cmd_Event_Handler+0x6e>
 8001882:	e053      	b.n	800192c <Cmd_Event_Handler+0xc8>
    {
    case INIT_SIG:
    	LOGI(TAG, "Arming timer.");
 8001884:	4b3e      	ldr	r3, [pc, #248]	; (8001980 <Cmd_Event_Handler+0x11c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d01c      	beq.n	80018c6 <Cmd_Event_Handler+0x62>
 800188c:	f003 f886 	bl	800499c <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]
 8001892:	4b3c      	ldr	r3, [pc, #240]	; (8001984 <Cmd_Event_Handler+0x120>)
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4a3b      	ldr	r2, [pc, #236]	; (8001988 <Cmd_Event_Handler+0x124>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	0999      	lsrs	r1, r3, #6
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4b39      	ldr	r3, [pc, #228]	; (8001988 <Cmd_Event_Handler+0x124>)
 80018a4:	fba3 4302 	umull	r4, r3, r3, r2
 80018a8:	099b      	lsrs	r3, r3, #6
 80018aa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80018ae:	fb04 f303 	mul.w	r3, r4, r3
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	4a33      	ldr	r2, [pc, #204]	; (8001984 <Cmd_Event_Handler+0x120>)
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	9201      	str	r2, [sp, #4]
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	460b      	mov	r3, r1
 80018be:	4a33      	ldr	r2, [pc, #204]	; (800198c <Cmd_Event_Handler+0x128>)
 80018c0:	2103      	movs	r1, #3
 80018c2:	f000 fa3b 	bl	8001d3c <log_printf>
    	TimeEvent_arm(&cmd_time_evt, 5U, 5U);
 80018c6:	2205      	movs	r2, #5
 80018c8:	2105      	movs	r1, #5
 80018ca:	4831      	ldr	r0, [pc, #196]	; (8001990 <Cmd_Event_Handler+0x12c>)
 80018cc:	f7ff fb78 	bl	8000fc0 <TimeEvent_arm>
        break;
 80018d0:	e051      	b.n	8001976 <Cmd_Event_Handler+0x112>
    case CMD_RX_SIG:
        /* Copy command line to avoid race conditions. */
        strncpy(cmd_ao.cmd_buf, evt->cmd_line, CONSOLE_CMD_BUF_SIZE);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2228      	movs	r2, #40	; 0x28
 80018d8:	4619      	mov	r1, r3
 80018da:	482e      	ldr	r0, [pc, #184]	; (8001994 <Cmd_Event_Handler+0x130>)
 80018dc:	f009 faec 	bl	800aeb8 <strncpy>
        cmd_execute(cmd_ao.cmd_buf);
 80018e0:	482c      	ldr	r0, [pc, #176]	; (8001994 <Cmd_Event_Handler+0x130>)
 80018e2:	f7ff fcd9 	bl	8001298 <cmd_execute>
        break;
 80018e6:	e046      	b.n	8001976 <Cmd_Event_Handler+0x112>
    case TIMEOUT_SIG:
    	LOGI(TAG, "Timeout event received.");
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <Cmd_Event_Handler+0x11c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d03f      	beq.n	8001970 <Cmd_Event_Handler+0x10c>
 80018f0:	f003 f854 	bl	800499c <HAL_GetTick>
 80018f4:	6178      	str	r0, [r7, #20]
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <Cmd_Event_Handler+0x120>)
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	4a22      	ldr	r2, [pc, #136]	; (8001988 <Cmd_Event_Handler+0x124>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	0999      	lsrs	r1, r3, #6
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	4b20      	ldr	r3, [pc, #128]	; (8001988 <Cmd_Event_Handler+0x124>)
 8001908:	fba3 4302 	umull	r4, r3, r3, r2
 800190c:	099b      	lsrs	r3, r3, #6
 800190e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001912:	fb04 f303 	mul.w	r3, r4, r3
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	4a1a      	ldr	r2, [pc, #104]	; (8001984 <Cmd_Event_Handler+0x120>)
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	9201      	str	r2, [sp, #4]
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	460b      	mov	r3, r1
 8001922:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <Cmd_Event_Handler+0x134>)
 8001924:	2103      	movs	r1, #3
 8001926:	f000 fa09 	bl	8001d3c <log_printf>
        break;
 800192a:	e021      	b.n	8001970 <Cmd_Event_Handler+0x10c>
    default:
        LOGW(TAG, "Unknown event signal");
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <Cmd_Event_Handler+0x11c>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01f      	beq.n	8001974 <Cmd_Event_Handler+0x110>
 8001934:	f003 f832 	bl	800499c <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	4b12      	ldr	r3, [pc, #72]	; (8001984 <Cmd_Event_Handler+0x120>)
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4a11      	ldr	r2, [pc, #68]	; (8001988 <Cmd_Event_Handler+0x124>)
 8001942:	fba2 2303 	umull	r2, r3, r2, r3
 8001946:	0999      	lsrs	r1, r3, #6
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <Cmd_Event_Handler+0x124>)
 800194c:	fba3 4302 	umull	r4, r3, r3, r2
 8001950:	099b      	lsrs	r3, r3, #6
 8001952:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001956:	fb04 f303 	mul.w	r3, r4, r3
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	4a09      	ldr	r2, [pc, #36]	; (8001984 <Cmd_Event_Handler+0x120>)
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	9201      	str	r2, [sp, #4]
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	460b      	mov	r3, r1
 8001966:	4a0d      	ldr	r2, [pc, #52]	; (800199c <Cmd_Event_Handler+0x138>)
 8001968:	2102      	movs	r1, #2
 800196a:	f000 f9e7 	bl	8001d3c <log_printf>
        break;
 800196e:	e001      	b.n	8001974 <Cmd_Event_Handler+0x110>
        break;
 8001970:	bf00      	nop
 8001972:	e000      	b.n	8001976 <Cmd_Event_Handler+0x112>
        break;
 8001974:	bf00      	nop
    }
}
 8001976:	bf00      	nop
 8001978:	371c      	adds	r7, #28
 800197a:	46bd      	mov	sp, r7
 800197c:	bd90      	pop	{r4, r7, pc}
 800197e:	bf00      	nop
 8001980:	20000060 	.word	0x20000060
 8001984:	20000004 	.word	0x20000004
 8001988:	10624dd3 	.word	0x10624dd3
 800198c:	0800b2b4 	.word	0x0800b2b4
 8001990:	200001b4 	.word	0x200001b4
 8001994:	2000018c 	.word	0x2000018c
 8001998:	0800b2e0 	.word	0x0800b2e0
 800199c:	0800b314 	.word	0x0800b314

080019a0 <console_init>:
 * @brief Initialize console module instance.
 *
 * @return MOD_OK for success.
 */
mod_err_t console_init(void)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af02      	add	r7, sp, #8
    memset(&console, 0, sizeof(console));
 80019a6:	223c      	movs	r2, #60	; 0x3c
 80019a8:	2100      	movs	r1, #0
 80019aa:	4814      	ldr	r0, [pc, #80]	; (80019fc <console_init+0x5c>)
 80019ac:	f009 f9a6 	bl	800acfc <memset>
    LOGI(TAG, "Initialized console.");
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <console_init+0x60>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d01c      	beq.n	80019f2 <console_init+0x52>
 80019b8:	f002 fff0 	bl	800499c <HAL_GetTick>
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <console_init+0x64>)
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <console_init+0x68>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	0999      	lsrs	r1, r3, #6
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <console_init+0x68>)
 80019d0:	fba3 4302 	umull	r4, r3, r3, r2
 80019d4:	099b      	lsrs	r3, r3, #6
 80019d6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80019da:	fb04 f303 	mul.w	r3, r4, r3
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <console_init+0x64>)
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	9201      	str	r2, [sp, #4]
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	460b      	mov	r3, r1
 80019ea:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <console_init+0x6c>)
 80019ec:	2103      	movs	r1, #3
 80019ee:	f000 f9a5 	bl	8001d3c <log_printf>
    return MOD_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd90      	pop	{r4, r7, pc}
 80019fc:	200001c4 	.word	0x200001c4
 8001a00:	20000060 	.word	0x20000060
 8001a04:	20000008 	.word	0x20000008
 8001a08:	10624dd3 	.word	0x10624dd3
 8001a0c:	0800b350 	.word	0x0800b350

08001a10 <console_start>:

mod_err_t console_start(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
    /* Create OS objects */
    static const osThreadAttr_t thread_attr = {.stack_size = CONSOLE_THREAD_STACK_SIZE};
    console.console_thread_id = osThreadNew(Console_thread, NULL, &thread_attr);
 8001a14:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <console_start+0x44>)
 8001a16:	2100      	movs	r1, #0
 8001a18:	480f      	ldr	r0, [pc, #60]	; (8001a58 <console_start+0x48>)
 8001a1a:	f005 ffb9 	bl	8007990 <osThreadNew>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <console_start+0x4c>)
 8001a22:	6013      	str	r3, [r2, #0]
    console.console_queue_id = osMessageQueueNew(CONSOLE_MSG_QUEUE_SIZE, sizeof(char), NULL);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2101      	movs	r1, #1
 8001a28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a2c:	f006 f94a 	bl	8007cc4 <osMessageQueueNew>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <console_start+0x4c>)
 8001a34:	6053      	str	r3, [r2, #4]

    if (console.console_queue_id == NULL || console.console_thread_id == NULL)
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <console_start+0x4c>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <console_start+0x36>
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <console_start+0x4c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <console_start+0x3a>
    {
        return MOD_ERR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e002      	b.n	8001a50 <console_start+0x40>
    }

    uart_start();
 8001a4a:	f002 fd9d 	bl	8004588 <uart_start>

    return MOD_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	0800b85c 	.word	0x0800b85c
 8001a58:	08001a95 	.word	0x08001a95
 8001a5c:	200001c4 	.word	0x200001c4

08001a60 <console_post>:

mod_err_t console_post(char c)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
    osStatus_t err = osMessageQueuePut(console.console_queue_id, &c, 0U, 0U);
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <console_post+0x30>)
 8001a6c:	6858      	ldr	r0, [r3, #4]
 8001a6e:	1df9      	adds	r1, r7, #7
 8001a70:	2300      	movs	r3, #0
 8001a72:	2200      	movs	r2, #0
 8001a74:	f006 f99a 	bl	8007dac <osMessageQueuePut>
 8001a78:	60f8      	str	r0, [r7, #12]
    if (err != osOK)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <console_post+0x24>
    {
        return MOD_ERR_TIMEOUT;
 8001a80:	2309      	movs	r3, #9
 8001a82:	e000      	b.n	8001a86 <console_post+0x26>
    }

    return MOD_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200001c4 	.word	0x200001c4

08001a94 <Console_thread>:

/**
 * @brief Console thread.
 */
static void Console_thread(void *argument)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	6078      	str	r0, [r7, #4]
    LOG(PROMPT);
 8001a9c:	481e      	ldr	r0, [pc, #120]	; (8001b18 <Console_thread+0x84>)
 8001a9e:	f002 fabf 	bl	8004020 <printf_>
    while (1)
    {
        /* Read character from message queue, then process character */
        char char_to_process = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]
        osStatus_t status = osMessageQueueGet(console.console_queue_id, &char_to_process, NULL, osWaitForever);
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <Console_thread+0x88>)
 8001aa8:	6858      	ldr	r0, [r3, #4]
 8001aaa:	f107 010f 	add.w	r1, r7, #15
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f006 f9da 	bl	8007e6c <osMessageQueueGet>
 8001ab8:	6178      	str	r0, [r7, #20]

        if (status != osOK)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d025      	beq.n	8001b0c <Console_thread+0x78>
        {
            LOGE(TAG, "Could not read character from queue.");
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <Console_thread+0x8c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0ec      	beq.n	8001aa2 <Console_thread+0xe>
 8001ac8:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <Console_thread+0x90>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	dde8      	ble.n	8001aa2 <Console_thread+0xe>
 8001ad0:	f002 ff64 	bl	800499c <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <Console_thread+0x94>)
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4a13      	ldr	r2, [pc, #76]	; (8001b2c <Console_thread+0x98>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	0999      	lsrs	r1, r3, #6
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <Console_thread+0x98>)
 8001ae8:	fba3 4302 	umull	r4, r3, r3, r2
 8001aec:	099b      	lsrs	r3, r3, #6
 8001aee:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001af2:	fb04 f303 	mul.w	r3, r4, r3
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <Console_thread+0x94>)
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	9201      	str	r2, [sp, #4]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	460b      	mov	r3, r1
 8001b02:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <Console_thread+0x9c>)
 8001b04:	2101      	movs	r1, #1
 8001b06:	f000 f919 	bl	8001d3c <log_printf>
 8001b0a:	e7ca      	b.n	8001aa2 <Console_thread+0xe>
        }
        else
        {
            console_process(char_to_process);
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f810 	bl	8001b34 <console_process>
    {
 8001b14:	e7c5      	b.n	8001aa2 <Console_thread+0xe>
 8001b16:	bf00      	nop
 8001b18:	0800b384 	.word	0x0800b384
 8001b1c:	200001c4 	.word	0x200001c4
 8001b20:	20000060 	.word	0x20000060
 8001b24:	20000064 	.word	0x20000064
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	10624dd3 	.word	0x10624dd3
 8001b30:	0800b390 	.word	0x0800b390

08001b34 <console_process>:
 * @param c Character to process.
 *
 * @return MOD_OK if successful, otherwise a "MOD_ERR" value.
 */
static mod_err_t console_process(char c)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]

    /* Execute command once Enter key is pressed. */
    if (c == '\n' || c == '\r')
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	2b0a      	cmp	r3, #10
 8001b42:	d002      	beq.n	8001b4a <console_process+0x16>
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	2b0d      	cmp	r3, #13
 8001b48:	d110      	bne.n	8001b6c <console_process+0x38>
    {
        console.cmd_buf[console.num_cmd_buf_chars] = '\0'; // Signal end of command string.
 8001b4a:	4b41      	ldr	r3, [pc, #260]	; (8001c50 <console_process+0x11c>)
 8001b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <console_process+0x11c>)
 8001b52:	4413      	add	r3, r2
 8001b54:	2200      	movs	r2, #0
 8001b56:	735a      	strb	r2, [r3, #13]
        LOG("\r\n");
 8001b58:	483e      	ldr	r0, [pc, #248]	; (8001c54 <console_process+0x120>)
 8001b5a:	f002 fa61 	bl	8004020 <printf_>
        post_cmd_event();
 8001b5e:	f000 f891 	bl	8001c84 <post_cmd_event>
        console.num_cmd_buf_chars = 0;
 8001b62:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <console_process+0x11c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	86da      	strh	r2, [r3, #54]	; 0x36
        return MOD_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e06c      	b.n	8001c46 <console_process+0x112>
    }
    /* Delete a character when Backspace key is pressed. */
    if (c == '\b' || c == '\x7f')
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d002      	beq.n	8001b78 <console_process+0x44>
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	2b7f      	cmp	r3, #127	; 0x7f
 8001b76:	d10e      	bne.n	8001b96 <console_process+0x62>
    {
        if (console.num_cmd_buf_chars > 0)
 8001b78:	4b35      	ldr	r3, [pc, #212]	; (8001c50 <console_process+0x11c>)
 8001b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <console_process+0x5e>
        {
            LOG("\x7f");
 8001b80:	4835      	ldr	r0, [pc, #212]	; (8001c58 <console_process+0x124>)
 8001b82:	f002 fa4d 	bl	8004020 <printf_>
            console.num_cmd_buf_chars--; // "Overwrite" last character.
 8001b86:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <console_process+0x11c>)
 8001b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <console_process+0x11c>)
 8001b90:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        return MOD_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e057      	b.n	8001c46 <console_process+0x112>
    }
    /* Toggle logging on and off LOG_TOGGLE_CHAR key is pressed. */
    if (c == LOG_TOGGLE_CHAR)
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	d10f      	bne.n	8001bbc <console_process+0x88>
    {
        bool log_active = log_toggle();
 8001b9c:	f000 f8bc 	bl	8001d18 <log_toggle>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	72fb      	strb	r3, [r7, #11]
        LOG("<Logging %s>\r\n", log_active ? "on" : "off");
 8001ba4:	7afb      	ldrb	r3, [r7, #11]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <console_process+0x7a>
 8001baa:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <console_process+0x128>)
 8001bac:	e000      	b.n	8001bb0 <console_process+0x7c>
 8001bae:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <console_process+0x12c>)
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	482c      	ldr	r0, [pc, #176]	; (8001c64 <console_process+0x130>)
 8001bb4:	f002 fa34 	bl	8004020 <printf_>
        return MOD_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e044      	b.n	8001c46 <console_process+0x112>
    }
    /* Echo the character back. */
    if (isprint(c))
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	4a29      	ldr	r2, [pc, #164]	; (8001c68 <console_process+0x134>)
 8001bc2:	4413      	add	r3, r2
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d03a      	beq.n	8001c44 <console_process+0x110>
    {
        if (console.num_cmd_buf_chars < (CONSOLE_CMD_BUF_SIZE - 1))
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <console_process+0x11c>)
 8001bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bd2:	2b26      	cmp	r3, #38	; 0x26
 8001bd4:	d810      	bhi.n	8001bf8 <console_process+0xc4>
        {
            console.cmd_buf[console.num_cmd_buf_chars++] = c;
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <console_process+0x11c>)
 8001bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	b291      	uxth	r1, r2
 8001bde:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <console_process+0x11c>)
 8001be0:	86d1      	strh	r1, [r2, #54]	; 0x36
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <console_process+0x11c>)
 8001be6:	4413      	add	r3, r2
 8001be8:	79fa      	ldrb	r2, [r7, #7]
 8001bea:	735a      	strb	r2, [r3, #13]
            LOG("%c", c);
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	481e      	ldr	r0, [pc, #120]	; (8001c6c <console_process+0x138>)
 8001bf2:	f002 fa15 	bl	8004020 <printf_>
 8001bf6:	e023      	b.n	8001c40 <console_process+0x10c>
        }
        else
        {
            /* No space in buffer, so ring terminal bell. */
            LOGW(TAG, "No more space in command buffer.");
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <console_process+0x13c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d01c      	beq.n	8001c3a <console_process+0x106>
 8001c00:	f002 fecc 	bl	800499c <HAL_GetTick>
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <console_process+0x140>)
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4a1a      	ldr	r2, [pc, #104]	; (8001c78 <console_process+0x144>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	0999      	lsrs	r1, r3, #6
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <console_process+0x144>)
 8001c18:	fba3 4302 	umull	r4, r3, r3, r2
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001c22:	fb04 f303 	mul.w	r3, r4, r3
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <console_process+0x140>)
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	9201      	str	r2, [sp, #4]
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	460b      	mov	r3, r1
 8001c32:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <console_process+0x148>)
 8001c34:	2102      	movs	r1, #2
 8001c36:	f000 f881 	bl	8001d3c <log_printf>
            LOG("\a");
 8001c3a:	4811      	ldr	r0, [pc, #68]	; (8001c80 <console_process+0x14c>)
 8001c3c:	f002 f9f0 	bl	8004020 <printf_>
        }
        return MOD_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	e000      	b.n	8001c46 <console_process+0x112>
    }

    return MOD_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd90      	pop	{r4, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200001c4 	.word	0x200001c4
 8001c54:	0800b3d4 	.word	0x0800b3d4
 8001c58:	0800b3e0 	.word	0x0800b3e0
 8001c5c:	0800b3ec 	.word	0x0800b3ec
 8001c60:	0800b3f0 	.word	0x0800b3f0
 8001c64:	0800b3f4 	.word	0x0800b3f4
 8001c68:	0800b940 	.word	0x0800b940
 8001c6c:	0800b40c 	.word	0x0800b40c
 8001c70:	20000060 	.word	0x20000060
 8001c74:	20000008 	.word	0x20000008
 8001c78:	10624dd3 	.word	0x10624dd3
 8001c7c:	0800b418 	.word	0x0800b418
 8001c80:	0800b458 	.word	0x0800b458

08001c84 <post_cmd_event>:

/**
 * @brief Post command event to command active object.
 */
static inline void post_cmd_event(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
    Active_post(cmd_base, (Event const *)&cmd_evt);
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <post_cmd_event+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4903      	ldr	r1, [pc, #12]	; (8001c9c <post_cmd_event+0x18>)
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f902 	bl	8000e98 <Active_post>
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20003b4c 	.word	0x20003b4c
 8001c9c:	2000000c 	.word	0x2000000c

08001ca0 <log_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t log_init(void)
{
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af02      	add	r7, sp, #8
    SLIST_INIT(&log_head); // Initialize linked list by setting head pointer to NULL.
 8001ca6:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <log_init+0x60>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
    LOGI(TAG, "Initialized log module");
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <log_init+0x64>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d01c      	beq.n	8001cee <log_init+0x4e>
 8001cb4:	f002 fe72 	bl	800499c <HAL_GetTick>
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <log_init+0x68>)
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <log_init+0x6c>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	0999      	lsrs	r1, r3, #6
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <log_init+0x6c>)
 8001ccc:	fba3 4302 	umull	r4, r3, r3, r2
 8001cd0:	099b      	lsrs	r3, r3, #6
 8001cd2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001cd6:	fb04 f303 	mul.w	r3, r4, r3
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <log_init+0x68>)
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	9201      	str	r2, [sp, #4]
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <log_init+0x70>)
 8001ce8:	2103      	movs	r1, #3
 8001cea:	f000 f827 	bl	8001d3c <log_printf>
    return cmd_register(&log_client_info);
 8001cee:	4809      	ldr	r0, [pc, #36]	; (8001d14 <log_init+0x74>)
 8001cf0:	f7ff faa2 	bl	8001238 <cmd_register>
 8001cf4:	4603      	mov	r3, r0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd90      	pop	{r4, r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000200 	.word	0x20000200
 8001d04:	20000060 	.word	0x20000060
 8001d08:	2000005c 	.word	0x2000005c
 8001d0c:	10624dd3 	.word	0x10624dd3
 8001d10:	0800b568 	.word	0x0800b568
 8001d14:	20000044 	.word	0x20000044

08001d18 <log_toggle>:

bool log_toggle(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
    _log_active = _log_active ? false : true;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <log_toggle+0x20>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	f083 0301 	eor.w	r3, r3, #1
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <log_toggle+0x20>)
 8001d28:	701a      	strb	r2, [r3, #0]
    return _log_active;
 8001d2a:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <log_toggle+0x20>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	20000060 	.word	0x20000060

08001d3c <log_printf>:
{
    return _log_active;
}

void log_printf(const char *tag, log_level_t level, const char *fmt, ...)
{
 8001d3c:	b40c      	push	{r2, r3}
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	70fb      	strb	r3, [r7, #3]
    log_level_t tag_level = get_log_level(tag);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fa06 	bl	800215c <get_log_level>
 8001d50:	4603      	mov	r3, r0
 8001d52:	73fb      	strb	r3, [r7, #15]
    if (level > tag_level)
 8001d54:	78fa      	ldrb	r2, [r7, #3]
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d807      	bhi.n	8001d6c <log_printf+0x30>
    {
        return;
    }
    va_list args;
    va_start(args, fmt);
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	60bb      	str	r3, [r7, #8]
    vprintf(fmt, args);
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	69b8      	ldr	r0, [r7, #24]
 8001d66:	f002 f977 	bl	8004058 <vprintf_>
 8001d6a:	e000      	b.n	8001d6e <log_printf+0x32>
        return;
 8001d6c:	bf00      	nop
    va_end(args);
}
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d76:	b002      	add	sp, #8
 8001d78:	4770      	bx	lr
	...

08001d7c <log_level_str>:
 * @param level The log level as an integer.
 *
 * @return Log level as a string. Otherwise, "INVALID".
 */
static const char *log_level_str(int32_t level)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
    if (level < ARRAY_SIZE(log_level_names))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d804      	bhi.n	8001d94 <log_level_str+0x18>
    {
        return log_level_names[level];
 8001d8a:	4a06      	ldr	r2, [pc, #24]	; (8001da4 <log_level_str+0x28>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d92:	e000      	b.n	8001d96 <log_level_str+0x1a>
    }
    return "INVALID";
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <log_level_str+0x2c>)
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000014 	.word	0x20000014
 8001da8:	0800b59c 	.word	0x0800b59c

08001dac <log_level_int>:
 * @param level_name The log level as a string.
 *
 * @return Log level as an int, or -1 on error.
 */
static int32_t log_level_int(const char *level_name)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
    for (uint8_t level = 0; level < ARRAY_SIZE(log_level_names); level++)
 8001db4:	2300      	movs	r3, #0
 8001db6:	73fb      	strb	r3, [r7, #15]
 8001db8:	e00f      	b.n	8001dda <log_level_int+0x2e>
    {
        if (strcasecmp(level_name, log_level_names[level]) == 0)
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <log_level_int+0x40>)
 8001dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f009 f85b 	bl	800ae80 <strcasecmp>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <log_level_int+0x28>
        {
            return level;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	e007      	b.n	8001de4 <log_level_int+0x38>
    for (uint8_t level = 0; level < ARRAY_SIZE(log_level_names); level++)
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	2b05      	cmp	r3, #5
 8001dde:	d9ec      	bls.n	8001dba <log_level_int+0xe>
        }
    }

    return -1; // Log level not found.
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000014 	.word	0x20000014

08001df0 <cmd_log_get>:
 * @return 0 if successful, 1 otherwise.
 *
 * Log levels include global log level and individual tag log levels that override global level.
 */
static uint32_t cmd_log_get(uint32_t argc, const char **argv)
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
    LOG("Global log level: (%s)\r\n", log_level_str(_global_log_level));
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <cmd_log_get+0x64>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ffbc 	bl	8001d7c <log_level_str>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4619      	mov	r1, r3
 8001e08:	4813      	ldr	r0, [pc, #76]	; (8001e58 <cmd_log_get+0x68>)
 8001e0a:	f002 f909 	bl	8004020 <printf_>

    if (!SLIST_EMPTY(&log_head))
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <cmd_log_get+0x6c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d018      	beq.n	8001e48 <cmd_log_get+0x58>
    {
        Log_entry *p = NULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
        SLIST_FOREACH(p, &log_head, entries)
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <cmd_log_get+0x6c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	e00f      	b.n	8001e42 <cmd_log_get+0x52>
        {
            LOG("%s log level: (%s)\r\n", p->tag, log_level_str(p->level));
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1d5c      	adds	r4, r3, #5
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	791b      	ldrb	r3, [r3, #4]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ffa6 	bl	8001d7c <log_level_str>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	4621      	mov	r1, r4
 8001e36:	480a      	ldr	r0, [pc, #40]	; (8001e60 <cmd_log_get+0x70>)
 8001e38:	f002 f8f2 	bl	8004020 <printf_>
        SLIST_FOREACH(p, &log_head, entries)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1ec      	bne.n	8001e22 <cmd_log_get+0x32>
        }
    }

    return 0;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd90      	pop	{r4, r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000064 	.word	0x20000064
 8001e58:	0800b5a4 	.word	0x0800b5a4
 8001e5c:	20000200 	.word	0x20000200
 8001e60:	0800b5c4 	.word	0x0800b5c4

08001e64 <cmd_log_set>:
 * @return 0 if successful, 1 otherwise.
 *
 * TTYS command format: > log set <tag> <level>.
 */
static uint32_t cmd_log_set(uint32_t argc, const char **argv)
{
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b08b      	sub	sp, #44	; 0x2c
 8001e68:	af04      	add	r7, sp, #16
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
    if (argc != 2)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d022      	beq.n	8001eba <cmd_log_set+0x56>
    {
        LOGW(TAG, "Missing log level arguments");
 8001e74:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <cmd_log_set+0xd4>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01c      	beq.n	8001eb6 <cmd_log_set+0x52>
 8001e7c:	f002 fd8e 	bl	800499c <HAL_GetTick>
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <cmd_log_set+0xd8>)
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4a2d      	ldr	r2, [pc, #180]	; (8001f40 <cmd_log_set+0xdc>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	0999      	lsrs	r1, r3, #6
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <cmd_log_set+0xdc>)
 8001e94:	fba3 4302 	umull	r4, r3, r3, r2
 8001e98:	099b      	lsrs	r3, r3, #6
 8001e9a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001e9e:	fb04 f303 	mul.w	r3, r4, r3
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	4a25      	ldr	r2, [pc, #148]	; (8001f3c <cmd_log_set+0xd8>)
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	9201      	str	r2, [sp, #4]
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	460b      	mov	r3, r1
 8001eae:	4a25      	ldr	r2, [pc, #148]	; (8001f44 <cmd_log_set+0xe0>)
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	f7ff ff43 	bl	8001d3c <log_printf>
        return 1; // Should include only 1 argument.
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e03a      	b.n	8001f30 <cmd_log_set+0xcc>
    }
    else
    {
        int32_t new_log_level = log_level_int(argv[1]);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff73 	bl	8001dac <log_level_int>
 8001ec6:	6178      	str	r0, [r7, #20]
        if (new_log_level == -1)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ece:	d126      	bne.n	8001f1e <cmd_log_set+0xba>
        {
            LOGW(TAG, "Log level (%s) not recognized", argv[1]);
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <cmd_log_set+0xd4>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <cmd_log_set+0xb6>
 8001ed8:	f002 fd60 	bl	800499c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <cmd_log_set+0xd8>)
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <cmd_log_set+0xdc>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	099c      	lsrs	r4, r3, #6
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <cmd_log_set+0xdc>)
 8001ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ef4:	099b      	lsrs	r3, r3, #6
 8001ef6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001efa:	fb01 f303 	mul.w	r3, r1, r3
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <cmd_log_set+0xd8>)
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	6839      	ldr	r1, [r7, #0]
 8001f06:	3104      	adds	r1, #4
 8001f08:	6809      	ldr	r1, [r1, #0]
 8001f0a:	9102      	str	r1, [sp, #8]
 8001f0c:	9201      	str	r2, [sp, #4]
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	4623      	mov	r3, r4
 8001f12:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <cmd_log_set+0xe4>)
 8001f14:	2102      	movs	r1, #2
 8001f16:	f7ff ff11 	bl	8001d3c <log_printf>
            return 1;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e008      	b.n	8001f30 <cmd_log_set+0xcc>
        }
        else
        { // tag , level
            log_level_set(argv[0], new_log_level);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f80f 	bl	8001f4c <log_level_set>
            return 0;
 8001f2e:	2300      	movs	r3, #0
        }
    }
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	371c      	adds	r7, #28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd90      	pop	{r4, r7, pc}
 8001f38:	20000060 	.word	0x20000060
 8001f3c:	2000005c 	.word	0x2000005c
 8001f40:	10624dd3 	.word	0x10624dd3
 8001f44:	0800b5e0 	.word	0x0800b5e0
 8001f48:	0800b618 	.word	0x0800b618

08001f4c <log_level_set>:
 * @param level Desired log level.
 *
 * @note Wild-card tag resets log level of all tags to given value.
 */
static inline void log_level_set(const char *tag, log_level_t level)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b08b      	sub	sp, #44	; 0x2c
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
    Log_entry *p = NULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]

    /* Set global log level and delete linked list containing tag entries. */
    if (strcmp("*", tag) == 0)
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4873      	ldr	r0, [pc, #460]	; (800212c <log_level_set+0x1e0>)
 8001f60:	f7fe f936 	bl	80001d0 <strcmp>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d144      	bne.n	8001ff4 <log_level_set+0xa8>
    {
        _global_log_level = level;
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	4a70      	ldr	r2, [pc, #448]	; (8002130 <log_level_set+0x1e4>)
 8001f6e:	6013      	str	r3, [r2, #0]

        LOGI(TAG, "Clearing list and cache");
 8001f70:	4b70      	ldr	r3, [pc, #448]	; (8002134 <log_level_set+0x1e8>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d028      	beq.n	8001fca <log_level_set+0x7e>
 8001f78:	f002 fd10 	bl	800499c <HAL_GetTick>
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	4b6e      	ldr	r3, [pc, #440]	; (8002138 <log_level_set+0x1ec>)
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4a6d      	ldr	r2, [pc, #436]	; (800213c <log_level_set+0x1f0>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	0999      	lsrs	r1, r3, #6
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4b6b      	ldr	r3, [pc, #428]	; (800213c <log_level_set+0x1f0>)
 8001f90:	fba3 4302 	umull	r4, r3, r3, r2
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001f9a:	fb04 f303 	mul.w	r3, r4, r3
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	4a65      	ldr	r2, [pc, #404]	; (8002138 <log_level_set+0x1ec>)
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	9201      	str	r2, [sp, #4]
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4a65      	ldr	r2, [pc, #404]	; (8002140 <log_level_set+0x1f4>)
 8001fac:	2103      	movs	r1, #3
 8001fae:	f7ff fec5 	bl	8001d3c <log_printf>
        while (!SLIST_EMPTY(&log_head))
 8001fb2:	e00a      	b.n	8001fca <log_level_set+0x7e>
        {
            p = SLIST_FIRST(&log_head);
 8001fb4:	4b63      	ldr	r3, [pc, #396]	; (8002144 <log_level_set+0x1f8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	61fb      	str	r3, [r7, #28]
            SLIST_REMOVE_HEAD(&log_head, entries);
 8001fba:	4b62      	ldr	r3, [pc, #392]	; (8002144 <log_level_set+0x1f8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a60      	ldr	r2, [pc, #384]	; (8002144 <log_level_set+0x1f8>)
 8001fc2:	6013      	str	r3, [r2, #0]
            free(p);
 8001fc4:	69f8      	ldr	r0, [r7, #28]
 8001fc6:	f008 fe83 	bl	800acd0 <free>
        while (!SLIST_EMPTY(&log_head))
 8001fca:	4b5e      	ldr	r3, [pc, #376]	; (8002144 <log_level_set+0x1f8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <log_level_set+0x68>
        }

        cache_state.entry_count = 0;
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	; (8002148 <log_level_set+0x1fc>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	605a      	str	r2, [r3, #4]
        cache_state.max_generation = 0;
 8001fd8:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <log_level_set+0x1fc>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]

        LOG("Global log level set to (%s)\r\n", log_level_str(_global_log_level));
 8001fde:	4b54      	ldr	r3, [pc, #336]	; (8002130 <log_level_set+0x1e4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff feca 	bl	8001d7c <log_level_str>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4619      	mov	r1, r3
 8001fec:	4857      	ldr	r0, [pc, #348]	; (800214c <log_level_set+0x200>)
 8001fee:	f002 f817 	bl	8004020 <printf_>
        return;
 8001ff2:	e097      	b.n	8002124 <log_level_set+0x1d8>
    }

    /* Check if tag is already saved in linked list. */
    SLIST_FOREACH(p, &log_head, entries)
 8001ff4:	4b53      	ldr	r3, [pc, #332]	; (8002144 <log_level_set+0x1f8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	e01c      	b.n	8002036 <log_level_set+0xea>
    {
        if (strcmp(p->tag, tag) == 0)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	3305      	adds	r3, #5
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe f8e4 	bl	80001d0 <strcmp>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d110      	bne.n	8002030 <log_level_set+0xe4>
        {
            p->level = level;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	711a      	strb	r2, [r3, #4]
            LOG("%s log level set to (%s)\r\n", p->tag, log_level_str(p->level));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	1d5c      	adds	r4, r3, #5
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	791b      	ldrb	r3, [r3, #4]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fead 	bl	8001d7c <log_level_str>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	4621      	mov	r1, r4
 8002028:	4849      	ldr	r0, [pc, #292]	; (8002150 <log_level_set+0x204>)
 800202a:	f001 fff9 	bl	8004020 <printf_>
            break;
 800202e:	e005      	b.n	800203c <log_level_set+0xf0>
    SLIST_FOREACH(p, &log_head, entries)
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1df      	bne.n	8001ffc <log_level_set+0xb0>
        }
    }

    /* Tag not found in linked list, add new entry. */
    if (p == NULL)
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d147      	bne.n	80020d2 <log_level_set+0x186>
    {
        Log_entry *new_entry = (Log_entry *)malloc(sizeof(Log_entry));
 8002042:	2010      	movs	r0, #16
 8002044:	f008 fe3c 	bl	800acc0 <malloc>
 8002048:	4603      	mov	r3, r0
 800204a:	617b      	str	r3, [r7, #20]
        if (new_entry == NULL)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d121      	bne.n	8002096 <log_level_set+0x14a>
        {
            LOGW(TAG, "Insufficient heap memory for new list entry.");
 8002052:	4b38      	ldr	r3, [pc, #224]	; (8002134 <log_level_set+0x1e8>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d063      	beq.n	8002122 <log_level_set+0x1d6>
 800205a:	f002 fc9f 	bl	800499c <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]
 8002060:	4b35      	ldr	r3, [pc, #212]	; (8002138 <log_level_set+0x1ec>)
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4a35      	ldr	r2, [pc, #212]	; (800213c <log_level_set+0x1f0>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	0999      	lsrs	r1, r3, #6
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4b32      	ldr	r3, [pc, #200]	; (800213c <log_level_set+0x1f0>)
 8002072:	fba3 4302 	umull	r4, r3, r3, r2
 8002076:	099b      	lsrs	r3, r3, #6
 8002078:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800207c:	fb04 f303 	mul.w	r3, r4, r3
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	4a2d      	ldr	r2, [pc, #180]	; (8002138 <log_level_set+0x1ec>)
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	9201      	str	r2, [sp, #4]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	460b      	mov	r3, r1
 800208c:	4a31      	ldr	r2, [pc, #196]	; (8002154 <log_level_set+0x208>)
 800208e:	2102      	movs	r1, #2
 8002090:	f7ff fe54 	bl	8001d3c <log_printf>
            return;
 8002094:	e045      	b.n	8002122 <log_level_set+0x1d6>
        }
        new_entry->level = level;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	711a      	strb	r2, [r3, #4]
        strncpy(new_entry->tag, tag, sizeof(new_entry->tag));
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3305      	adds	r3, #5
 80020a0:	220a      	movs	r2, #10
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f008 ff07 	bl	800aeb8 <strncpy>
        SLIST_INSERT_HEAD(&log_head, new_entry, entries);
 80020aa:	4b26      	ldr	r3, [pc, #152]	; (8002144 <log_level_set+0x1f8>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	4a24      	ldr	r2, [pc, #144]	; (8002144 <log_level_set+0x1f8>)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	6013      	str	r3, [r2, #0]
        LOG("Added tag (%s) to list with level (%s)\r\n", new_entry->tag, log_level_str(new_entry->level));
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	1d5c      	adds	r4, r3, #5
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	791b      	ldrb	r3, [r3, #4]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fe5b 	bl	8001d7c <log_level_str>
 80020c6:	4603      	mov	r3, r0
 80020c8:	461a      	mov	r2, r3
 80020ca:	4621      	mov	r1, r4
 80020cc:	4822      	ldr	r0, [pc, #136]	; (8002158 <log_level_set+0x20c>)
 80020ce:	f001 ffa7 	bl	8004020 <printf_>
    }

    /* Update entry in cache if it exists.
     * search in the cache and update the entry it if exists */
    for (uint32_t i = 0; i < cache_state.entry_count; ++i)
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	e01e      	b.n	8002116 <log_level_set+0x1ca>
    {
        if (strcmp(cache_state.cache[i].tag, tag) == 0)
 80020d8:	4a1b      	ldr	r2, [pc, #108]	; (8002148 <log_level_set+0x1fc>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	3301      	adds	r3, #1
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe f872 	bl	80001d0 <strcmp>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10e      	bne.n	8002110 <log_level_set+0x1c4>
        {
            cache_state.cache[i].level = level;
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	b2d9      	uxtb	r1, r3
 80020fa:	4a13      	ldr	r2, [pc, #76]	; (8002148 <log_level_set+0x1fc>)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	3301      	adds	r3, #1
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	78da      	ldrb	r2, [r3, #3]
 8002106:	f361 1247 	bfi	r2, r1, #5, #3
 800210a:	70da      	strb	r2, [r3, #3]
            break;
 800210c:	bf00      	nop
        }
    }

    return;
 800210e:	e009      	b.n	8002124 <log_level_set+0x1d8>
    for (uint32_t i = 0; i < cache_state.entry_count; ++i)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	3301      	adds	r3, #1
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <log_level_set+0x1fc>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	429a      	cmp	r2, r3
 800211e:	d3db      	bcc.n	80020d8 <log_level_set+0x18c>
    return;
 8002120:	e000      	b.n	8002124 <log_level_set+0x1d8>
            return;
 8002122:	bf00      	nop
}
 8002124:	3724      	adds	r7, #36	; 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd90      	pop	{r4, r7, pc}
 800212a:	bf00      	nop
 800212c:	0800b654 	.word	0x0800b654
 8002130:	20000064 	.word	0x20000064
 8002134:	20000060 	.word	0x20000060
 8002138:	2000005c 	.word	0x2000005c
 800213c:	10624dd3 	.word	0x10624dd3
 8002140:	0800b658 	.word	0x0800b658
 8002144:	20000200 	.word	0x20000200
 8002148:	20000204 	.word	0x20000204
 800214c:	0800b68c 	.word	0x0800b68c
 8002150:	0800b6b4 	.word	0x0800b6b4
 8002154:	0800b6d8 	.word	0x0800b6d8
 8002158:	0800b724 	.word	0x0800b724

0800215c <get_log_level>:
 * @param tag Tag to find level of.
 *
 * @return Tag's log level or global log level if not found.
 */
static inline log_level_t get_log_level(const char *tag)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
    log_level_t tag_lvl = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]
    if (!get_cached_log_level(tag, &tag_lvl))
 8002168:	f107 030f 	add.w	r3, r7, #15
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f822 	bl	80021b8 <get_cached_log_level>
 8002174:	4603      	mov	r3, r0
 8002176:	f083 0301 	eor.w	r3, r3, #1
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d014      	beq.n	80021aa <get_log_level+0x4e>
    {
        if (!get_uncached_log_level(tag, &tag_lvl))
 8002180:	f107 030f 	add.w	r3, r7, #15
 8002184:	4619      	mov	r1, r3
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f864 	bl	8002254 <get_uncached_log_level>
 800218c:	4603      	mov	r3, r0
 800218e:	f083 0301 	eor.w	r3, r3, #1
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <get_log_level+0x44>
        {
            /* Log level not found, default to global log level. */
            tag_lvl = _global_log_level;
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <get_log_level+0x58>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	73fb      	strb	r3, [r7, #15]
        }

        /* Add to cache for faster access */
        log_add_cache(tag, tag_lvl);
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	4619      	mov	r1, r3
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f87d 	bl	80022a4 <log_add_cache>
    }

    return tag_lvl;
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000064 	.word	0x20000064

080021b8 <get_cached_log_level>:
 * @param[out] level Log level corresponding to tag.
 * @return true Level found in cache.
 *         false Level not found in cache.
 */
static inline bool get_cached_log_level(const char *tag, log_level_t *level)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]

    /* Assumes tag stored as static variable */
    uint32_t i;
    for (i = 0; i < cache_state.entry_count; ++i)
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	e00b      	b.n	80021e0 <get_cached_log_level+0x28>
    {
        if (cache_state.cache[i].tag == tag)
 80021c8:	4a21      	ldr	r2, [pc, #132]	; (8002250 <get_cached_log_level+0x98>)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3301      	adds	r3, #1
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d008      	beq.n	80021ec <get_cached_log_level+0x34>
    for (i = 0; i < cache_state.entry_count; ++i)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3301      	adds	r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <get_cached_log_level+0x98>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d3ee      	bcc.n	80021c8 <get_cached_log_level+0x10>
 80021ea:	e000      	b.n	80021ee <get_cached_log_level+0x36>
        {
            break;
 80021ec:	bf00      	nop
        }
    }

    /* Could not find log level */
    if (i == cache_state.entry_count)
 80021ee:	4b18      	ldr	r3, [pc, #96]	; (8002250 <get_cached_log_level+0x98>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d101      	bne.n	80021fc <get_cached_log_level+0x44>
    {
        return false;
 80021f8:	2300      	movs	r3, #0
 80021fa:	e024      	b.n	8002246 <get_cached_log_level+0x8e>
    }

    /* Return level */
    *level = (log_level_t)cache_state.cache[i].level;
 80021fc:	4a14      	ldr	r2, [pc, #80]	; (8002250 <get_cached_log_level+0x98>)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	3301      	adds	r3, #1
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	78db      	ldrb	r3, [r3, #3]
 8002208:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	701a      	strb	r2, [r3, #0]

    /* If cache is full, increment generation with each cache hit and heapify */
    if (cache_state.entry_count == TAG_CACHE_SIZE)
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <get_cached_log_level+0x98>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b1f      	cmp	r3, #31
 800221a:	d113      	bne.n	8002244 <get_cached_log_level+0x8c>
    {
        cache_state.cache[i].generation = cache_state.max_generation++;
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <get_cached_log_level+0x98>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	490b      	ldr	r1, [pc, #44]	; (8002250 <get_cached_log_level+0x98>)
 8002224:	600a      	str	r2, [r1, #0]
 8002226:	f023 4060 	bic.w	r0, r3, #3758096384	; 0xe0000000
 800222a:	4909      	ldr	r1, [pc, #36]	; (8002250 <get_cached_log_level+0x98>)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
 8002234:	f360 031c 	bfi	r3, r0, #0, #29
 8002238:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
        heap_bubble_down(i);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f882 	bl	8002348 <heap_bubble_down>
    }

    return true;
 8002244:	2301      	movs	r3, #1
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000204 	.word	0x20000204

08002254 <get_uncached_log_level>:
 * @param[out] level Log level corresponding to tag.
 *
 * @return true if log level found, false otherwise.
 */
static inline bool get_uncached_log_level(const char *tag, log_level_t *level)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
    Log_entry *p = NULL;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]

    SLIST_FOREACH(p, &log_head, entries)
 8002262:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <get_uncached_log_level+0x4c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	e011      	b.n	800228e <get_uncached_log_level+0x3a>
    {
        if (strcmp(p->tag, tag) == 0)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3305      	adds	r3, #5
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	f7fd ffad 	bl	80001d0 <strcmp>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d105      	bne.n	8002288 <get_uncached_log_level+0x34>
        {
            *level = p->level;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	791a      	ldrb	r2, [r3, #4]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	701a      	strb	r2, [r3, #0]
            return true;
 8002284:	2301      	movs	r3, #1
 8002286:	e006      	b.n	8002296 <get_uncached_log_level+0x42>
    SLIST_FOREACH(p, &log_head, entries)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1ea      	bne.n	800226a <get_uncached_log_level+0x16>
        }
    }

    return false;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000200 	.word	0x20000200

080022a4 <log_add_cache>:
 * @param log_level Module's log level.
 *
 * Cache is implemented using a binary min-heap.
 */
static inline void log_add_cache(const char *tag, log_level_t log_level)
{
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	70fb      	strb	r3, [r7, #3]
    uint32_t generation = cache_state.max_generation++;
 80022b0:	4b24      	ldr	r3, [pc, #144]	; (8002344 <log_add_cache+0xa0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	4923      	ldr	r1, [pc, #140]	; (8002344 <log_add_cache+0xa0>)
 80022b8:	600a      	str	r2, [r1, #0]
 80022ba:	61fb      	str	r3, [r7, #28]

    /* No need to sort since min-heap. */
    if (cache_state.entry_count < TAG_CACHE_SIZE)
 80022bc:	4b21      	ldr	r3, [pc, #132]	; (8002344 <log_add_cache+0xa0>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b1e      	cmp	r3, #30
 80022c2:	d824      	bhi.n	800230e <log_add_cache+0x6a>
    {
        cache_state.cache[cache_state.entry_count] = (Log_cached_entry){
 80022c4:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <log_add_cache+0xa0>)
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f023 4560 	bic.w	r5, r3, #3758096384	; 0xe0000000
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	b2dc      	uxtb	r4, r3
 80022d6:	481b      	ldr	r0, [pc, #108]	; (8002344 <log_add_cache+0xa0>)
 80022d8:	1c51      	adds	r1, r2, #1
 80022da:	f850 3031 	ldr.w	r3, [r0, r1, lsl #3]
 80022de:	f365 031c 	bfi	r3, r5, #0, #29
 80022e2:	f840 3031 	str.w	r3, [r0, r1, lsl #3]
 80022e6:	4917      	ldr	r1, [pc, #92]	; (8002344 <log_add_cache+0xa0>)
 80022e8:	1c53      	adds	r3, r2, #1
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	78d9      	ldrb	r1, [r3, #3]
 80022f0:	f364 1147 	bfi	r1, r4, #5, #3
 80022f4:	70d9      	strb	r1, [r3, #3]
 80022f6:	4913      	ldr	r1, [pc, #76]	; (8002344 <log_add_cache+0xa0>)
 80022f8:	1c53      	adds	r3, r2, #1
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	440b      	add	r3, r1
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	605a      	str	r2, [r3, #4]
            .generation = generation,
            .level = log_level,
            .tag = tag};
        ++cache_state.entry_count;
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <log_add_cache+0xa0>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	3301      	adds	r3, #1
 8002308:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <log_add_cache+0xa0>)
 800230a:	6053      	str	r3, [r2, #4]
 800230c:	e016      	b.n	800233c <log_add_cache+0x98>
    }

    // Cache is full, replace first element
    // and do bubble-down sorting to restore
    // binary min-heap.
    cache_state.cache[0] = (Log_cached_entry){
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f023 4060 	bic.w	r0, r3, #3758096384	; 0xe0000000
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	b2d9      	uxtb	r1, r3
 800231c:	4a09      	ldr	r2, [pc, #36]	; (8002344 <log_add_cache+0xa0>)
 800231e:	6893      	ldr	r3, [r2, #8]
 8002320:	f360 031c 	bfi	r3, r0, #0, #29
 8002324:	6093      	str	r3, [r2, #8]
 8002326:	4a07      	ldr	r2, [pc, #28]	; (8002344 <log_add_cache+0xa0>)
 8002328:	7ad3      	ldrb	r3, [r2, #11]
 800232a:	f361 1347 	bfi	r3, r1, #5, #3
 800232e:	72d3      	strb	r3, [r2, #11]
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <log_add_cache+0xa0>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60d3      	str	r3, [r2, #12]
        .tag = tag,
        .level = log_level,
        .generation = generation};
    heap_bubble_down(0);
 8002336:	2000      	movs	r0, #0
 8002338:	f000 f806 	bl	8002348 <heap_bubble_down>
}
 800233c:	3720      	adds	r7, #32
 800233e:	46bd      	mov	sp, r7
 8002340:	bdb0      	pop	{r4, r5, r7, pc}
 8002342:	bf00      	nop
 8002344:	20000204 	.word	0x20000204

08002348 <heap_bubble_down>:

static inline void heap_bubble_down(int index)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
    while (index < TAG_CACHE_SIZE / 2)
 8002350:	e021      	b.n	8002396 <heap_bubble_down+0x4e>
    {
        uint32_t left_index = index * 2 + 1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	3301      	adds	r3, #1
 8002358:	617b      	str	r3, [r7, #20]
        uint32_t right_index = left_index + 1;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3301      	adds	r3, #1
 800235e:	613b      	str	r3, [r7, #16]
        uint32_t next = (cache_state.cache[left_index].generation < cache_state.cache[right_index].generation) ? left_index : right_index;
 8002360:	4a11      	ldr	r2, [pc, #68]	; (80023a8 <heap_bubble_down+0x60>)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	3301      	adds	r3, #1
 8002366:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800236a:	f3c3 021c 	ubfx	r2, r3, #0, #29
 800236e:	490e      	ldr	r1, [pc, #56]	; (80023a8 <heap_bubble_down+0x60>)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	3301      	adds	r3, #1
 8002374:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8002378:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800237c:	429a      	cmp	r2, r3
 800237e:	d201      	bcs.n	8002384 <heap_bubble_down+0x3c>
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	e000      	b.n	8002386 <heap_bubble_down+0x3e>
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	60fb      	str	r3, [r7, #12]
        heap_swap(index, next); // cache[index] always greater than cache[next]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68f9      	ldr	r1, [r7, #12]
 800238c:	4618      	mov	r0, r3
 800238e:	f000 f80d 	bl	80023ac <heap_swap>
        index = next;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	607b      	str	r3, [r7, #4]
    while (index < TAG_CACHE_SIZE / 2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b0e      	cmp	r3, #14
 800239a:	ddda      	ble.n	8002352 <heap_bubble_down+0xa>
    }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000204 	.word	0x20000204

080023ac <heap_swap>:

static inline void heap_swap(uint32_t i, uint32_t j)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
    Log_cached_entry tmp = cache_state.cache[i];
 80023b6:	4915      	ldr	r1, [pc, #84]	; (800240c <heap_swap+0x60>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3301      	adds	r3, #1
 80023bc:	f107 0208 	add.w	r2, r7, #8
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	440b      	add	r3, r1
 80023c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023c8:	e882 0003 	stmia.w	r2, {r0, r1}
    cache_state.cache[i] = cache_state.cache[j];
 80023cc:	480f      	ldr	r0, [pc, #60]	; (800240c <heap_swap+0x60>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3301      	adds	r3, #1
 80023d2:	490e      	ldr	r1, [pc, #56]	; (800240c <heap_swap+0x60>)
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	3201      	adds	r2, #1
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4403      	add	r3, r0
 80023dc:	00d2      	lsls	r2, r2, #3
 80023de:	440a      	add	r2, r1
 80023e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023e4:	e883 0003 	stmia.w	r3, {r0, r1}
    cache_state.cache[j] = tmp;
 80023e8:	4a08      	ldr	r2, [pc, #32]	; (800240c <heap_swap+0x60>)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	f107 0208 	add.w	r2, r7, #8
 80023f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023fa:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000204 	.word	0x20000204

08002410 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f043 0201 	orr.w	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	601a      	str	r2, [r3, #0]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	609a      	str	r2, [r3, #8]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002466:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002468:	4907      	ldr	r1, [pc, #28]	; (8002488 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4313      	orrs	r3, r2
 800246e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4013      	ands	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	40021000 	.word	0x40021000

0800248c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002496:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002498:	4907      	ldr	r1, [pc, #28]	; (80024b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4313      	orrs	r3, r2
 800249e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4013      	ands	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024aa:	68fb      	ldr	r3, [r7, #12]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40021000 	.word	0x40021000

080024bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024c2:	f002 fa37 	bl	8004934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024c6:	f000 f82b 	bl	8002520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024ca:	f000 f8ef 	bl	80026ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80024ce:	f000 f89d 	bl	800260c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
    uart_config_t uart_cfg = {.uart_reg_base = USART2, .irq_num = USART2_IRQn};
 80024d2:	4a0f      	ldr	r2, [pc, #60]	; (8002510 <main+0x54>)
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024da:	e883 0003 	stmia.w	r3, {r0, r1}
    uart_init(&uart_cfg);
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	4618      	mov	r0, r3
 80024e2:	f001 ffe9 	bl	80044b8 <uart_init>

    mod_err_t err = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80024ea:	2201      	movs	r2, #1
 80024ec:	2120      	movs	r1, #32
 80024ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f2:	f002 fceb 	bl	8004ecc <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80024f6:	f005 f9a9 	bl	800784c <osKernelInitialize>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80024fa:	4a06      	ldr	r2, [pc, #24]	; (8002514 <main+0x58>)
 80024fc:	2100      	movs	r1, #0
 80024fe:	4806      	ldr	r0, [pc, #24]	; (8002518 <main+0x5c>)
 8002500:	f005 fa46 	bl	8007990 <osThreadNew>
 8002504:	4603      	mov	r3, r0
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <main+0x60>)
 8002508:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800250a:	f005 f9c3 	bl	8007894 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 800250e:	e7fe      	b.n	800250e <main+0x52>
 8002510:	0800b760 	.word	0x0800b760
 8002514:	0800b880 	.word	0x0800b880
 8002518:	0800277d 	.word	0x0800277d
 800251c:	20003b50 	.word	0x20003b50

08002520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b0b8      	sub	sp, #224	; 0xe0
 8002524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002526:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800252a:	2244      	movs	r2, #68	; 0x44
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f008 fbe4 	bl	800acfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002534:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002544:	463b      	mov	r3, r7
 8002546:	2288      	movs	r2, #136	; 0x88
 8002548:	2100      	movs	r1, #0
 800254a:	4618      	mov	r0, r3
 800254c:	f008 fbd6 	bl	800acfc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002550:	2302      	movs	r3, #2
 8002552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800255a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800255e:	2310      	movs	r3, #16
 8002560:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002564:	2302      	movs	r3, #2
 8002566:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800256a:	2302      	movs	r3, #2
 800256c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002570:	2301      	movs	r3, #1
 8002572:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002576:	230a      	movs	r3, #10
 8002578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800257c:	2307      	movs	r3, #7
 800257e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002582:	2302      	movs	r3, #2
 8002584:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002588:	2302      	movs	r3, #2
 800258a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800258e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002592:	4618      	mov	r0, r3
 8002594:	f002 fd16 	bl	8004fc4 <HAL_RCC_OscConfig>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800259e:	f000 f915 	bl	80027cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025a2:	230f      	movs	r3, #15
 80025a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025a8:	2303      	movs	r3, #3
 80025aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80025c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80025c4:	2104      	movs	r1, #4
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 f8e2 	bl	8005790 <HAL_RCC_ClockConfig>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80025d2:	f000 f8fb 	bl	80027cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025d6:	2302      	movs	r3, #2
 80025d8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025da:	2300      	movs	r3, #0
 80025dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025de:	463b      	mov	r3, r7
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 faf7 	bl	8005bd4 <HAL_RCCEx_PeriphCLKConfig>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80025ec:	f000 f8ee 	bl	80027cc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80025f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80025f4:	f002 fc90 	bl	8004f18 <HAL_PWREx_ControlVoltageScaling>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80025fe:	f000 f8e5 	bl	80027cc <Error_Handler>
  }
}
 8002602:	bf00      	nop
 8002604:	37e0      	adds	r7, #224	; 0xe0
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08e      	sub	sp, #56	; 0x38
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002612:	f107 031c 	add.w	r3, r7, #28
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	60da      	str	r2, [r3, #12]
 8002620:	611a      	str	r2, [r3, #16]
 8002622:	615a      	str	r2, [r3, #20]
 8002624:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
 8002634:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002636:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800263a:	f7ff ff27 	bl	800248c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800263e:	2001      	movs	r0, #1
 8002640:	f7ff ff0c 	bl	800245c <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8002644:	230c      	movs	r3, #12
 8002646:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002648:	2302      	movs	r3, #2
 800264a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800264c:	2303      	movs	r3, #3
 800264e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002658:	2307      	movs	r3, #7
 800265a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	4619      	mov	r1, r3
 8002660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002664:	f004 fb8f 	bl	8006d86 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002668:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800266c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800266e:	2300      	movs	r3, #0
 8002670:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002672:	2300      	movs	r3, #0
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002676:	2300      	movs	r3, #0
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800267a:	230c      	movs	r3, #12
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800267e:	2300      	movs	r3, #0
 8002680:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002682:	2300      	movs	r3, #0
 8002684:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002686:	f107 031c 	add.w	r3, r7, #28
 800268a:	4619      	mov	r1, r3
 800268c:	4806      	ldr	r0, [pc, #24]	; (80026a8 <MX_USART2_UART_Init+0x9c>)
 800268e:	f005 f81d 	bl	80076cc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002692:	4805      	ldr	r0, [pc, #20]	; (80026a8 <MX_USART2_UART_Init+0x9c>)
 8002694:	f7ff fecc 	bl	8002430 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002698:	4803      	ldr	r0, [pc, #12]	; (80026a8 <MX_USART2_UART_Init+0x9c>)
 800269a:	f7ff feb9 	bl	8002410 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800269e:	bf00      	nop
 80026a0:	3738      	adds	r7, #56	; 0x38
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40004400 	.word	0x40004400

080026ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]
 80026c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c2:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <MX_GPIO_Init+0xc4>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	4a2a      	ldr	r2, [pc, #168]	; (8002770 <MX_GPIO_Init+0xc4>)
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ce:	4b28      	ldr	r3, [pc, #160]	; (8002770 <MX_GPIO_Init+0xc4>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026da:	4b25      	ldr	r3, [pc, #148]	; (8002770 <MX_GPIO_Init+0xc4>)
 80026dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026de:	4a24      	ldr	r2, [pc, #144]	; (8002770 <MX_GPIO_Init+0xc4>)
 80026e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e6:	4b22      	ldr	r3, [pc, #136]	; (8002770 <MX_GPIO_Init+0xc4>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f2:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <MX_GPIO_Init+0xc4>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	4a1e      	ldr	r2, [pc, #120]	; (8002770 <MX_GPIO_Init+0xc4>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026fe:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <MX_GPIO_Init+0xc4>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800270a:	4b19      	ldr	r3, [pc, #100]	; (8002770 <MX_GPIO_Init+0xc4>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	4a18      	ldr	r2, [pc, #96]	; (8002770 <MX_GPIO_Init+0xc4>)
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002716:	4b16      	ldr	r3, [pc, #88]	; (8002770 <MX_GPIO_Init+0xc4>)
 8002718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002722:	2200      	movs	r2, #0
 8002724:	2120      	movs	r1, #32
 8002726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800272a:	f002 fbcf 	bl	8004ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800272e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <MX_GPIO_Init+0xc8>)
 8002736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	4619      	mov	r1, r3
 8002742:	480d      	ldr	r0, [pc, #52]	; (8002778 <MX_GPIO_Init+0xcc>)
 8002744:	f002 fa18 	bl	8004b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002748:	2320      	movs	r3, #32
 800274a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274c:	2301      	movs	r3, #1
 800274e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002754:	2300      	movs	r3, #0
 8002756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4619      	mov	r1, r3
 800275e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002762:	f002 fa09 	bl	8004b78 <HAL_GPIO_Init>

}
 8002766:	bf00      	nop
 8002768:	3728      	adds	r7, #40	; 0x28
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	10210000 	.word	0x10210000
 8002778:	48000800 	.word	0x48000800

0800277c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

    console_init();
 8002784:	f7ff f90c 	bl	80019a0 <console_init>
    cmd_init();
 8002788:	f7fe fcfa 	bl	8001180 <cmd_init>
    log_init();
 800278c:	f7ff fa88 	bl	8001ca0 <log_init>

    console_start();
 8002790:	f7ff f93e 	bl	8001a10 <console_start>
    cmd_start();
 8002794:	f7fe fd40 	bl	8001218 <cmd_start>

    osThreadTerminate(NULL);
 8002798:	2000      	movs	r0, #0
 800279a:	f005 f98b 	bl	8007ab4 <osThreadTerminate>
    /* Infinite loop */
    for (;;)
    {
        osDelay(1);
 800279e:	2001      	movs	r0, #1
 80027a0:	f005 f9b5 	bl	8007b0e <osDelay>
 80027a4:	e7fb      	b.n	800279e <StartDefaultTask+0x22>
	...

080027a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */


  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d101      	bne.n	80027be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027ba:	f002 f8db 	bl	8004974 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40001400 	.word	0x40001400

080027cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d0:	b672      	cpsid	i
}
 80027d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80027d4:	e7fe      	b.n	80027d4 <Error_Handler+0x8>

080027d6 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b085      	sub	sp, #20
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	4603      	mov	r3, r0
 80027e4:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4603      	mov	r3, r0
 8002800:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <_out_char+0x1e>
    uart_putc(character);
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	4618      	mov	r0, r3
 800280c:	f001 ff1c 	bl	8004648 <uart_putc>
  }
}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	e002      	b.n	800282e <_strnlen_s+0x16>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	3301      	adds	r3, #1
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d004      	beq.n	8002840 <_strnlen_s+0x28>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	1e5a      	subs	r2, r3, #1
 800283a:	603a      	str	r2, [r7, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f3      	bne.n	8002828 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	1ad3      	subs	r3, r2, r3
}
 8002846:	4618      	mov	r0, r3
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	2b2f      	cmp	r3, #47	; 0x2f
 8002860:	d904      	bls.n	800286c <_is_digit+0x1a>
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	2b39      	cmp	r3, #57	; 0x39
 8002866:	d801      	bhi.n	800286c <_is_digit+0x1a>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <_is_digit+0x1c>
 800286c:	2300      	movs	r3, #0
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	b2db      	uxtb	r3, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800288c:	e00e      	b.n	80028ac <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4618      	mov	r0, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	1c59      	adds	r1, r3, #1
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6011      	str	r1, [r2, #0]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	4403      	add	r3, r0
 80028a8:	3b30      	subs	r3, #48	; 0x30
 80028aa:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ffcd 	bl	8002852 <_is_digit>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1e7      	bne.n	800288e <_atoi+0xe>
  }
  return i;
 80028be:	68fb      	ldr	r3, [r7, #12]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80028da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d125      	bne.n	8002930 <_out_rev+0x68>
 80028e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d120      	bne.n	8002930 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	e00a      	b.n	800290a <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	1c53      	adds	r3, r2, #1
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	68fc      	ldr	r4, [r7, #12]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	2020      	movs	r0, #32
 8002902:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	3301      	adds	r3, #1
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	429a      	cmp	r2, r3
 8002910:	d3f0      	bcc.n	80028f4 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8002912:	e00d      	b.n	8002930 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002916:	3b01      	subs	r3, #1
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800291a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	4413      	add	r3, r2
 8002920:	7818      	ldrb	r0, [r3, #0]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	1c53      	adds	r3, r2, #1
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	68fc      	ldr	r4, [r7, #12]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	47a0      	blx	r4
  while (len) {
 8002930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1ee      	bne.n	8002914 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00e      	beq.n	800295e <_out_rev+0x96>
    while (idx - start_idx < width) {
 8002940:	e007      	b.n	8002952 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	1c53      	adds	r3, r2, #1
 8002946:	607b      	str	r3, [r7, #4]
 8002948:	68fc      	ldr	r4, [r7, #12]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	2020      	movs	r0, #32
 8002950:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800295a:	429a      	cmp	r2, r3
 800295c:	d8f1      	bhi.n	8002942 <_out_rev+0x7a>
    }
  }

  return idx;
 800295e:	687b      	ldr	r3, [r7, #4]
}
 8002960:	4618      	mov	r0, r3
 8002962:	371c      	adds	r7, #28
 8002964:	46bd      	mov	sp, r7
 8002966:	bd90      	pop	{r4, r7, pc}

08002968 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af04      	add	r7, sp, #16
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d136      	bne.n	80029ee <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d018      	beq.n	80029b8 <_ntoa_format+0x50>
 8002986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d013      	beq.n	80029b8 <_ntoa_format+0x50>
 8002990:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d104      	bne.n	80029a2 <_ntoa_format+0x3a>
 8002998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <_ntoa_format+0x50>
      width--;
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	3b01      	subs	r3, #1
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80029a8:	e006      	b.n	80029b8 <_ntoa_format+0x50>
      buf[len++] = '0';
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	61fa      	str	r2, [r7, #28]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4413      	add	r3, r2
 80029b4:	2230      	movs	r2, #48	; 0x30
 80029b6:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029bc:	429a      	cmp	r2, r3
 80029be:	d20a      	bcs.n	80029d6 <_ntoa_format+0x6e>
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	2b1f      	cmp	r3, #31
 80029c4:	d9f1      	bls.n	80029aa <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80029c6:	e006      	b.n	80029d6 <_ntoa_format+0x6e>
      buf[len++] = '0';
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	61fa      	str	r2, [r7, #28]
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4413      	add	r3, r2
 80029d2:	2230      	movs	r2, #48	; 0x30
 80029d4:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d006      	beq.n	80029ee <_ntoa_format+0x86>
 80029e0:	69fa      	ldr	r2, [r7, #28]
 80029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d202      	bcs.n	80029ee <_ntoa_format+0x86>
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	2b1f      	cmp	r3, #31
 80029ec:	d9ec      	bls.n	80029c8 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80029ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d058      	beq.n	8002aaa <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80029f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d116      	bne.n	8002a30 <_ntoa_format+0xc8>
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <_ntoa_format+0xc8>
 8002a08:	69fa      	ldr	r2, [r7, #28]
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d003      	beq.n	8002a18 <_ntoa_format+0xb0>
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d10b      	bne.n	8002a30 <_ntoa_format+0xc8>
      len--;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <_ntoa_format+0xc8>
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	2b10      	cmp	r3, #16
 8002a28:	d102      	bne.n	8002a30 <_ntoa_format+0xc8>
        len--;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	d10f      	bne.n	8002a56 <_ntoa_format+0xee>
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <_ntoa_format+0xee>
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b1f      	cmp	r3, #31
 8002a44:	d807      	bhi.n	8002a56 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	61fa      	str	r2, [r7, #28]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4413      	add	r3, r2
 8002a50:	2278      	movs	r2, #120	; 0x78
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e01f      	b.n	8002a96 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	2b10      	cmp	r3, #16
 8002a5a:	d10f      	bne.n	8002a7c <_ntoa_format+0x114>
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <_ntoa_format+0x114>
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	2b1f      	cmp	r3, #31
 8002a6a:	d807      	bhi.n	8002a7c <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	61fa      	str	r2, [r7, #28]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4413      	add	r3, r2
 8002a76:	2258      	movs	r2, #88	; 0x58
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	e00c      	b.n	8002a96 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d109      	bne.n	8002a96 <_ntoa_format+0x12e>
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	2b1f      	cmp	r3, #31
 8002a86:	d806      	bhi.n	8002a96 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	61fa      	str	r2, [r7, #28]
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4413      	add	r3, r2
 8002a92:	2262      	movs	r2, #98	; 0x62
 8002a94:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	2b1f      	cmp	r3, #31
 8002a9a:	d806      	bhi.n	8002aaa <_ntoa_format+0x142>
      buf[len++] = '0';
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	61fa      	str	r2, [r7, #28]
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	2230      	movs	r2, #48	; 0x30
 8002aa8:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	2b1f      	cmp	r3, #31
 8002aae:	d824      	bhi.n	8002afa <_ntoa_format+0x192>
    if (negative) {
 8002ab0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <_ntoa_format+0x160>
      buf[len++] = '-';
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	61fa      	str	r2, [r7, #28]
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	222d      	movs	r2, #45	; 0x2d
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e018      	b.n	8002afa <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	61fa      	str	r2, [r7, #28]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4413      	add	r3, r2
 8002adc:	222b      	movs	r2, #43	; 0x2b
 8002ade:	701a      	strb	r2, [r3, #0]
 8002ae0:	e00b      	b.n	8002afa <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d006      	beq.n	8002afa <_ntoa_format+0x192>
      buf[len++] = ' ';
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	61fa      	str	r2, [r7, #28]
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4413      	add	r3, r2
 8002af6:	2220      	movs	r2, #32
 8002af8:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	9303      	str	r3, [sp, #12]
 8002afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b00:	9302      	str	r3, [sp, #8]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f7ff fed9 	bl	80028c8 <_out_rev>
 8002b16:	4603      	mov	r3, r0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b096      	sub	sp, #88	; 0x58
 8002b24:	af08      	add	r7, sp, #32
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d103      	bne.n	8002b40 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3a:	f023 0310 	bic.w	r3, r3, #16
 8002b3e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <_ntoa_long+0x30>
 8002b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d033      	beq.n	8002bb8 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8002b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b54:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b58:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002b5a:	fb01 f202 	mul.w	r2, r1, r2
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002b64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b68:	2b09      	cmp	r3, #9
 8002b6a:	d804      	bhi.n	8002b76 <_ntoa_long+0x56>
 8002b6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b70:	3330      	adds	r3, #48	; 0x30
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	e00d      	b.n	8002b92 <_ntoa_long+0x72>
 8002b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <_ntoa_long+0x64>
 8002b80:	2241      	movs	r2, #65	; 0x41
 8002b82:	e000      	b.n	8002b86 <_ntoa_long+0x66>
 8002b84:	2261      	movs	r2, #97	; 0x61
 8002b86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b8a:	4413      	add	r3, r2
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	3b0a      	subs	r3, #10
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b94:	1c59      	adds	r1, r3, #1
 8002b96:	6379      	str	r1, [r7, #52]	; 0x34
 8002b98:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002b9c:	440b      	add	r3, r1
 8002b9e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002ba2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002baa:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <_ntoa_long+0x98>
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb4:	2b1f      	cmp	r3, #31
 8002bb6:	d9cb      	bls.n	8002b50 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bba:	9306      	str	r3, [sp, #24]
 8002bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bbe:	9305      	str	r3, [sp, #20]
 8002bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc2:	9304      	str	r3, [sp, #16]
 8002bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc6:	9303      	str	r3, [sp, #12]
 8002bc8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002bcc:	9302      	str	r3, [sp, #8]
 8002bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	f107 0310 	add.w	r3, r7, #16
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f7ff fec2 	bl	8002968 <_ntoa_format>
 8002be4:	4603      	mov	r3, r0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3738      	adds	r7, #56	; 0x38
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b096      	sub	sp, #88	; 0x58
 8002bf2:	af08      	add	r7, sp, #32
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002c00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c04:	4313      	orrs	r3, r2
 8002c06:	d103      	bne.n	8002c10 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8002c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c0a:	f023 0310 	bic.w	r3, r3, #16
 8002c0e:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <_ntoa_long_long+0x34>
 8002c1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	d038      	beq.n	8002c94 <_ntoa_long_long+0xa6>
    do {
      const char digit = (char)(value % base);
 8002c22:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002c26:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c2a:	f7fd ff79 	bl	8000b20 <__aeabi_uldivmod>
 8002c2e:	4613      	mov	r3, r2
 8002c30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002c34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c38:	2b09      	cmp	r3, #9
 8002c3a:	d804      	bhi.n	8002c46 <_ntoa_long_long+0x58>
 8002c3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c40:	3330      	adds	r3, #48	; 0x30
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	e00d      	b.n	8002c62 <_ntoa_long_long+0x74>
 8002c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <_ntoa_long_long+0x66>
 8002c50:	2241      	movs	r2, #65	; 0x41
 8002c52:	e000      	b.n	8002c56 <_ntoa_long_long+0x68>
 8002c54:	2261      	movs	r2, #97	; 0x61
 8002c56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c5a:	4413      	add	r3, r2
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	3b0a      	subs	r3, #10
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c64:	1c59      	adds	r1, r3, #1
 8002c66:	6379      	str	r1, [r7, #52]	; 0x34
 8002c68:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002c6c:	440b      	add	r3, r1
 8002c6e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002c72:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c76:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002c7a:	f7fd ff51 	bl	8000b20 <__aeabi_uldivmod>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002c86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	d002      	beq.n	8002c94 <_ntoa_long_long+0xa6>
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c90:	2b1f      	cmp	r3, #31
 8002c92:	d9c6      	bls.n	8002c22 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c98:	9206      	str	r2, [sp, #24]
 8002c9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c9c:	9205      	str	r2, [sp, #20]
 8002c9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ca0:	9204      	str	r2, [sp, #16]
 8002ca2:	9303      	str	r3, [sp, #12]
 8002ca4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002ca8:	9302      	str	r3, [sp, #8]
 8002caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	f107 0310 	add.w	r3, r7, #16
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f7ff fe54 	bl	8002968 <_ntoa_format>
 8002cc0:	4603      	mov	r3, r0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3738      	adds	r7, #56	; 0x38
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	0000      	movs	r0, r0
 8002ccc:	0000      	movs	r0, r0
	...

08002cd0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b09d      	sub	sp, #116	; 0x74
 8002cd4:	af04      	add	r7, sp, #16
 8002cd6:	6178      	str	r0, [r7, #20]
 8002cd8:	6139      	str	r1, [r7, #16]
 8002cda:	60fa      	str	r2, [r7, #12]
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cfa:	f7fd fe97 	bl	8000a2c <__aeabi_dcmpeq>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10f      	bne.n	8002d24 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d06:	9303      	str	r3, [sp, #12]
 8002d08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d0a:	9302      	str	r3, [sp, #8]
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	9301      	str	r3, [sp, #4]
 8002d10:	4ba9      	ldr	r3, [pc, #676]	; (8002fb8 <_ftoa+0x2e8>)
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	6939      	ldr	r1, [r7, #16]
 8002d1a:	6978      	ldr	r0, [r7, #20]
 8002d1c:	f7ff fdd4 	bl	80028c8 <_out_rev>
 8002d20:	4603      	mov	r3, r0
 8002d22:	e22b      	b.n	800317c <_ftoa+0x4ac>
  if (value < -DBL_MAX)
 8002d24:	f04f 32ff 	mov.w	r2, #4294967295
 8002d28:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002d2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d30:	f7fd fe86 	bl	8000a40 <__aeabi_dcmplt>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00f      	beq.n	8002d5a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002d3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d3c:	9303      	str	r3, [sp, #12]
 8002d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d40:	9302      	str	r3, [sp, #8]
 8002d42:	2304      	movs	r3, #4
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	4b9d      	ldr	r3, [pc, #628]	; (8002fbc <_ftoa+0x2ec>)
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	6939      	ldr	r1, [r7, #16]
 8002d50:	6978      	ldr	r0, [r7, #20]
 8002d52:	f7ff fdb9 	bl	80028c8 <_out_rev>
 8002d56:	4603      	mov	r3, r0
 8002d58:	e210      	b.n	800317c <_ftoa+0x4ac>
  if (value > DBL_MAX)
 8002d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5e:	4b98      	ldr	r3, [pc, #608]	; (8002fc0 <_ftoa+0x2f0>)
 8002d60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d64:	f7fd fe8a 	bl	8000a7c <__aeabi_dcmpgt>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d01d      	beq.n	8002daa <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002d6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <_ftoa+0xac>
 8002d78:	4b92      	ldr	r3, [pc, #584]	; (8002fc4 <_ftoa+0x2f4>)
 8002d7a:	e000      	b.n	8002d7e <_ftoa+0xae>
 8002d7c:	4b92      	ldr	r3, [pc, #584]	; (8002fc8 <_ftoa+0x2f8>)
 8002d7e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002d80:	f002 0204 	and.w	r2, r2, #4
 8002d84:	2a00      	cmp	r2, #0
 8002d86:	d001      	beq.n	8002d8c <_ftoa+0xbc>
 8002d88:	2204      	movs	r2, #4
 8002d8a:	e000      	b.n	8002d8e <_ftoa+0xbe>
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002d90:	9103      	str	r1, [sp, #12]
 8002d92:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002d94:	9102      	str	r1, [sp, #8]
 8002d96:	9201      	str	r2, [sp, #4]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	6939      	ldr	r1, [r7, #16]
 8002da0:	6978      	ldr	r0, [r7, #20]
 8002da2:	f7ff fd91 	bl	80028c8 <_out_rev>
 8002da6:	4603      	mov	r3, r0
 8002da8:	e1e8      	b.n	800317c <_ftoa+0x4ac>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002daa:	a37f      	add	r3, pc, #508	; (adr r3, 8002fa8 <_ftoa+0x2d8>)
 8002dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002db4:	f7fd fe62 	bl	8000a7c <__aeabi_dcmpgt>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <_ftoa+0x102>
 8002dbe:	a37c      	add	r3, pc, #496	; (adr r3, 8002fb0 <_ftoa+0x2e0>)
 8002dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dc8:	f7fd fe3a 	bl	8000a40 <__aeabi_dcmplt>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00f      	beq.n	8002df2 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002dd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dd4:	9302      	str	r3, [sp, #8]
 8002dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	ed97 0b00 	vldr	d0, [r7]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	6939      	ldr	r1, [r7, #16]
 8002de8:	6978      	ldr	r0, [r7, #20]
 8002dea:	f000 f9d1 	bl	8003190 <_etoa>
 8002dee:	4603      	mov	r3, r0
 8002df0:	e1c4      	b.n	800317c <_ftoa+0x4ac>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e04:	f7fd fe1c 	bl	8000a40 <__aeabi_dcmplt>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00e      	beq.n	8002e2c <_ftoa+0x15c>
    negative = true;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8002e14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e18:	f04f 0000 	mov.w	r0, #0
 8002e1c:	f04f 0100 	mov.w	r1, #0
 8002e20:	f7fd f9e4 	bl	80001ec <__aeabi_dsub>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10e      	bne.n	8002e54 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002e36:	2306      	movs	r3, #6
 8002e38:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002e3a:	e00b      	b.n	8002e54 <_ftoa+0x184>
    buf[len++] = '0';
 8002e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002e42:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e46:	4413      	add	r3, r2
 8002e48:	2230      	movs	r2, #48	; 0x30
 8002e4a:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8002e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e50:	3b01      	subs	r3, #1
 8002e52:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e56:	2b1f      	cmp	r3, #31
 8002e58:	d802      	bhi.n	8002e60 <_ftoa+0x190>
 8002e5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e5c:	2b09      	cmp	r3, #9
 8002e5e:	d8ed      	bhi.n	8002e3c <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002e60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e64:	f7fd fe14 	bl	8000a90 <__aeabi_d2iz>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8002e6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002e6e:	f7fd fb0b 	bl	8000488 <__aeabi_i2d>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e7a:	f7fd f9b7 	bl	80001ec <__aeabi_dsub>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	4a51      	ldr	r2, [pc, #324]	; (8002fcc <_ftoa+0x2fc>)
 8002e88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	f7fd fb63 	bl	800055c <__aeabi_dmul>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8002e9e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002ea2:	f7fd fe1d 	bl	8000ae0 <__aeabi_d2uiz>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8002eaa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002eac:	f7fd fadc 	bl	8000468 <__aeabi_ui2d>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002eb8:	f7fd f998 	bl	80001ec <__aeabi_dsub>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <_ftoa+0x300>)
 8002eca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002ece:	f7fd fdd5 	bl	8000a7c <__aeabi_dcmpgt>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d016      	beq.n	8002f06 <_ftoa+0x236>
    ++frac;
 8002ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eda:	3301      	adds	r3, #1
 8002edc:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8002ede:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002ee0:	f7fd fac2 	bl	8000468 <__aeabi_ui2d>
 8002ee4:	4a39      	ldr	r2, [pc, #228]	; (8002fcc <_ftoa+0x2fc>)
 8002ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4413      	add	r3, r2
 8002eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef0:	f7fd fdba 	bl	8000a68 <__aeabi_dcmpge>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01a      	beq.n	8002f30 <_ftoa+0x260>
      frac = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8002efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f00:	3301      	adds	r3, #1
 8002f02:	657b      	str	r3, [r7, #84]	; 0x54
 8002f04:	e014      	b.n	8002f30 <_ftoa+0x260>
    }
  }
  else if (diff < 0.5) {
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <_ftoa+0x300>)
 8002f0c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002f10:	f7fd fd96 	bl	8000a40 <__aeabi_dcmplt>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <_ftoa+0x260>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <_ftoa+0x25a>
 8002f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <_ftoa+0x260>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8002f30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d134      	bne.n	8002fa0 <_ftoa+0x2d0>
    diff = value - (double)whole;
 8002f36:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002f38:	f7fd faa6 	bl	8000488 <__aeabi_i2d>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f44:	f7fd f952 	bl	80001ec <__aeabi_dsub>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002f50:	2301      	movs	r3, #1
 8002f52:	461c      	mov	r4, r3
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <_ftoa+0x300>)
 8002f5a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002f5e:	f7fd fd6f 	bl	8000a40 <__aeabi_dcmplt>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <_ftoa+0x29c>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	461c      	mov	r4, r3
 8002f6c:	b2e3      	uxtb	r3, r4
 8002f6e:	f083 0301 	eor.w	r3, r3, #1
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d109      	bne.n	8002f8c <_ftoa+0x2bc>
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <_ftoa+0x300>)
 8002f7e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002f82:	f7fd fd7b 	bl	8000a7c <__aeabi_dcmpgt>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d067      	beq.n	800305c <_ftoa+0x38c>
 8002f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 8085 	beq.w	80030a2 <_ftoa+0x3d2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	657b      	str	r3, [r7, #84]	; 0x54
 8002f9e:	e080      	b.n	80030a2 <_ftoa+0x3d2>
    }
  }
  else {
    unsigned int count = prec;
 8002fa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002fa4:	e037      	b.n	8003016 <_ftoa+0x346>
 8002fa6:	bf00      	nop
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	41cdcd65 	.word	0x41cdcd65
 8002fb0:	00000000 	.word	0x00000000
 8002fb4:	c1cdcd65 	.word	0xc1cdcd65
 8002fb8:	0800b768 	.word	0x0800b768
 8002fbc:	0800b76c 	.word	0x0800b76c
 8002fc0:	7fefffff 	.word	0x7fefffff
 8002fc4:	0800b774 	.word	0x0800b774
 8002fc8:	0800b77c 	.word	0x0800b77c
 8002fcc:	0800b8a8 	.word	0x0800b8a8
 8002fd0:	3fe00000 	.word	0x3fe00000
      --count;
 8002fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8002fda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002fdc:	4b69      	ldr	r3, [pc, #420]	; (8003184 <_ftoa+0x4b4>)
 8002fde:	fba3 2301 	umull	r2, r3, r3, r1
 8002fe2:	08da      	lsrs	r2, r3, #3
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	1aca      	subs	r2, r1, r3
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff2:	1c59      	adds	r1, r3, #1
 8002ff4:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002ff6:	3230      	adds	r2, #48	; 0x30
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002ffe:	440b      	add	r3, r1
 8003000:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8003004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003006:	4a5f      	ldr	r2, [pc, #380]	; (8003184 <_ftoa+0x4b4>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	08db      	lsrs	r3, r3, #3
 800300e:	653b      	str	r3, [r7, #80]	; 0x50
 8003010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <_ftoa+0x34e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003018:	2b1f      	cmp	r3, #31
 800301a:	d9db      	bls.n	8002fd4 <_ftoa+0x304>
 800301c:	e00a      	b.n	8003034 <_ftoa+0x364>
        break;
 800301e:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003020:	e008      	b.n	8003034 <_ftoa+0x364>
      buf[len++] = '0';
 8003022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003028:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800302c:	4413      	add	r3, r2
 800302e:	2230      	movs	r2, #48	; 0x30
 8003030:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003036:	2b1f      	cmp	r3, #31
 8003038:	d804      	bhi.n	8003044 <_ftoa+0x374>
 800303a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800303c:	1e5a      	subs	r2, r3, #1
 800303e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1ee      	bne.n	8003022 <_ftoa+0x352>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003046:	2b1f      	cmp	r3, #31
 8003048:	d82b      	bhi.n	80030a2 <_ftoa+0x3d2>
      // add decimal
      buf[len++] = '.';
 800304a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003050:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003054:	4413      	add	r3, r2
 8003056:	222e      	movs	r2, #46	; 0x2e
 8003058:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800305c:	e021      	b.n	80030a2 <_ftoa+0x3d2>
    buf[len++] = (char)(48 + (whole % 10));
 800305e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003060:	4b49      	ldr	r3, [pc, #292]	; (8003188 <_ftoa+0x4b8>)
 8003062:	fb83 1302 	smull	r1, r3, r3, r2
 8003066:	1099      	asrs	r1, r3, #2
 8003068:	17d3      	asrs	r3, r2, #31
 800306a:	1ac9      	subs	r1, r1, r3
 800306c:	460b      	mov	r3, r1
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	1ad1      	subs	r1, r2, r3
 8003076:	b2ca      	uxtb	r2, r1
 8003078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800307a:	1c59      	adds	r1, r3, #1
 800307c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800307e:	3230      	adds	r2, #48	; 0x30
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003086:	440b      	add	r3, r1
 8003088:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800308c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800308e:	4a3e      	ldr	r2, [pc, #248]	; (8003188 <_ftoa+0x4b8>)
 8003090:	fb82 1203 	smull	r1, r2, r2, r3
 8003094:	1092      	asrs	r2, r2, #2
 8003096:	17db      	asrs	r3, r3, #31
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	657b      	str	r3, [r7, #84]	; 0x54
 800309c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <_ftoa+0x3da>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80030a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a4:	2b1f      	cmp	r3, #31
 80030a6:	d9da      	bls.n	800305e <_ftoa+0x38e>
 80030a8:	e000      	b.n	80030ac <_ftoa+0x3dc>
      break;
 80030aa:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80030ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d124      	bne.n	8003100 <_ftoa+0x430>
 80030b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01f      	beq.n	8003100 <_ftoa+0x430>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80030c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d015      	beq.n	80030f2 <_ftoa+0x422>
 80030c6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d104      	bne.n	80030d8 <_ftoa+0x408>
 80030ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00c      	beq.n	80030f2 <_ftoa+0x422>
      width--;
 80030d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030da:	3b01      	subs	r3, #1
 80030dc:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80030de:	e008      	b.n	80030f2 <_ftoa+0x422>
      buf[len++] = '0';
 80030e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030e6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80030ea:	4413      	add	r3, r2
 80030ec:	2230      	movs	r2, #48	; 0x30
 80030ee:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80030f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d202      	bcs.n	8003100 <_ftoa+0x430>
 80030fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030fc:	2b1f      	cmp	r3, #31
 80030fe:	d9ef      	bls.n	80030e0 <_ftoa+0x410>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003102:	2b1f      	cmp	r3, #31
 8003104:	d82a      	bhi.n	800315c <_ftoa+0x48c>
    if (negative) {
 8003106:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <_ftoa+0x452>
      buf[len++] = '-';
 800310e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003114:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003118:	4413      	add	r3, r2
 800311a:	222d      	movs	r2, #45	; 0x2d
 800311c:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003120:	e01c      	b.n	800315c <_ftoa+0x48c>
    }
    else if (flags & FLAGS_PLUS) {
 8003122:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d009      	beq.n	8003140 <_ftoa+0x470>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800312c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003132:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003136:	4413      	add	r3, r2
 8003138:	222b      	movs	r2, #43	; 0x2b
 800313a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800313e:	e00d      	b.n	800315c <_ftoa+0x48c>
    }
    else if (flags & FLAGS_SPACE) {
 8003140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <_ftoa+0x48c>
      buf[len++] = ' ';
 800314a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003150:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003154:	4413      	add	r3, r2
 8003156:	2220      	movs	r2, #32
 8003158:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800315c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800315e:	9303      	str	r3, [sp, #12]
 8003160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003162:	9302      	str	r3, [sp, #8]
 8003164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	f107 0318 	add.w	r3, r7, #24
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	6939      	ldr	r1, [r7, #16]
 8003174:	6978      	ldr	r0, [r7, #20]
 8003176:	f7ff fba7 	bl	80028c8 <_out_rev>
 800317a:	4603      	mov	r3, r0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3764      	adds	r7, #100	; 0x64
 8003180:	46bd      	mov	sp, r7
 8003182:	bd90      	pop	{r4, r7, pc}
 8003184:	cccccccd 	.word	0xcccccccd
 8003188:	66666667 	.word	0x66666667
 800318c:	00000000 	.word	0x00000000

08003190 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003194:	b09d      	sub	sp, #116	; 0x74
 8003196:	af06      	add	r7, sp, #24
 8003198:	61f8      	str	r0, [r7, #28]
 800319a:	61b9      	str	r1, [r7, #24]
 800319c:	617a      	str	r2, [r7, #20]
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80031a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031ac:	f7fd fc3e 	bl	8000a2c <__aeabi_dcmpeq>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d014      	beq.n	80031e0 <_etoa+0x50>
 80031b6:	f04f 32ff 	mov.w	r2, #4294967295
 80031ba:	4bc3      	ldr	r3, [pc, #780]	; (80034c8 <_etoa+0x338>)
 80031bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031c0:	f7fd fc5c 	bl	8000a7c <__aeabi_dcmpgt>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10a      	bne.n	80031e0 <_etoa+0x50>
 80031ca:	f04f 32ff 	mov.w	r2, #4294967295
 80031ce:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80031d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031d6:	f7fd fc33 	bl	8000a40 <__aeabi_dcmplt>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d012      	beq.n	8003206 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80031e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031e4:	9302      	str	r3, [sp, #8]
 80031e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	ed97 0b02 	vldr	d0, [r7, #8]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	69b9      	ldr	r1, [r7, #24]
 80031fc:	69f8      	ldr	r0, [r7, #28]
 80031fe:	f7ff fd67 	bl	8002cd0 <_ftoa>
 8003202:	4603      	mov	r3, r0
 8003204:	e245      	b.n	8003692 <_etoa+0x502>
  }

  // determine the sign
  const bool negative = value < 0;
 8003206:	2301      	movs	r3, #1
 8003208:	461e      	mov	r6, r3
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003216:	f7fd fc13 	bl	8000a40 <__aeabi_dcmplt>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <_etoa+0x94>
 8003220:	2300      	movs	r3, #0
 8003222:	461e      	mov	r6, r3
 8003224:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8003228:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <_etoa+0xac>
    value = -value;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800323a:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800323c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003248:	2306      	movs	r3, #6
 800324a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800324e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003252:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8003256:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	0d0a      	lsrs	r2, r1, #20
 8003264:	2300      	movs	r3, #0
 8003266:	4613      	mov	r3, r2
 8003268:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800326c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003270:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003272:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003276:	f04f 30ff 	mov.w	r0, #4294967295
 800327a:	4994      	ldr	r1, [pc, #592]	; (80034cc <_etoa+0x33c>)
 800327c:	ea02 0400 	and.w	r4, r2, r0
 8003280:	ea03 0501 	and.w	r5, r3, r1
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	4b91      	ldr	r3, [pc, #580]	; (80034d0 <_etoa+0x340>)
 800328a:	ea44 0802 	orr.w	r8, r4, r2
 800328e:	ea45 0903 	orr.w	r9, r5, r3
 8003292:	e9c7 8908 	strd	r8, r9, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003296:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003298:	f7fd f8f6 	bl	8000488 <__aeabi_i2d>
 800329c:	a37e      	add	r3, pc, #504	; (adr r3, 8003498 <_etoa+0x308>)
 800329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a2:	f7fd f95b 	bl	800055c <__aeabi_dmul>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4610      	mov	r0, r2
 80032ac:	4619      	mov	r1, r3
 80032ae:	a37c      	add	r3, pc, #496	; (adr r3, 80034a0 <_etoa+0x310>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f7fc ff9c 	bl	80001f0 <__adddf3>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4614      	mov	r4, r2
 80032be:	461d      	mov	r5, r3
 80032c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	4b82      	ldr	r3, [pc, #520]	; (80034d4 <_etoa+0x344>)
 80032ca:	f7fc ff8f 	bl	80001ec <__aeabi_dsub>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4610      	mov	r0, r2
 80032d4:	4619      	mov	r1, r3
 80032d6:	a374      	add	r3, pc, #464	; (adr r3, 80034a8 <_etoa+0x318>)
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f7fd f93e 	bl	800055c <__aeabi_dmul>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4620      	mov	r0, r4
 80032e6:	4629      	mov	r1, r5
 80032e8:	f7fc ff82 	bl	80001f0 <__adddf3>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	f7fd fbcc 	bl	8000a90 <__aeabi_d2iz>
 80032f8:	4603      	mov	r3, r0
 80032fa:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80032fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80032fe:	f7fd f8c3 	bl	8000488 <__aeabi_i2d>
 8003302:	a36b      	add	r3, pc, #428	; (adr r3, 80034b0 <_etoa+0x320>)
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	f7fd f928 	bl	800055c <__aeabi_dmul>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	4b6f      	ldr	r3, [pc, #444]	; (80034d8 <_etoa+0x348>)
 800331a:	f7fc ff69 	bl	80001f0 <__adddf3>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4610      	mov	r0, r2
 8003324:	4619      	mov	r1, r3
 8003326:	f7fd fbb3 	bl	8000a90 <__aeabi_d2iz>
 800332a:	4603      	mov	r3, r0
 800332c:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800332e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003330:	f7fd f8aa 	bl	8000488 <__aeabi_i2d>
 8003334:	a360      	add	r3, pc, #384	; (adr r3, 80034b8 <_etoa+0x328>)
 8003336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333a:	f7fd f90f 	bl	800055c <__aeabi_dmul>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4614      	mov	r4, r2
 8003344:	461d      	mov	r5, r3
 8003346:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003348:	f7fd f89e 	bl	8000488 <__aeabi_i2d>
 800334c:	a35c      	add	r3, pc, #368	; (adr r3, 80034c0 <_etoa+0x330>)
 800334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003352:	f7fd f903 	bl	800055c <__aeabi_dmul>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4620      	mov	r0, r4
 800335c:	4629      	mov	r1, r5
 800335e:	f7fc ff45 	bl	80001ec <__aeabi_dsub>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 800336a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800336e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003372:	f7fd f8f3 	bl	800055c <__aeabi_dmul>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800337e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003380:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003384:	4618      	mov	r0, r3
 8003386:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	0503      	lsls	r3, r0, #20
 8003394:	2200      	movs	r2, #0
 8003396:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800339a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800339e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	f7fc ff23 	bl	80001f0 <__adddf3>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4690      	mov	r8, r2
 80033b0:	4699      	mov	r9, r3
 80033b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033b6:	f04f 0000 	mov.w	r0, #0
 80033ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80033be:	f7fc ff15 	bl	80001ec <__aeabi_dsub>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4692      	mov	sl, r2
 80033c8:	469b      	mov	fp, r3
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	4b43      	ldr	r3, [pc, #268]	; (80034dc <_etoa+0x34c>)
 80033d0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80033d4:	f7fd f9ec 	bl	80007b0 <__aeabi_ddiv>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4610      	mov	r0, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	4b3e      	ldr	r3, [pc, #248]	; (80034e0 <_etoa+0x350>)
 80033e6:	f7fc ff03 	bl	80001f0 <__adddf3>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80033f2:	f7fd f9dd 	bl	80007b0 <__aeabi_ddiv>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4610      	mov	r0, r2
 80033fc:	4619      	mov	r1, r3
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	4b38      	ldr	r3, [pc, #224]	; (80034e4 <_etoa+0x354>)
 8003404:	f7fc fef4 	bl	80001f0 <__adddf3>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003410:	f7fd f9ce 	bl	80007b0 <__aeabi_ddiv>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4650      	mov	r0, sl
 800341a:	4659      	mov	r1, fp
 800341c:	f7fc fee8 	bl	80001f0 <__adddf3>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4640      	mov	r0, r8
 8003426:	4649      	mov	r1, r9
 8003428:	f7fd f9c2 	bl	80007b0 <__aeabi_ddiv>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <_etoa+0x340>)
 800343a:	f7fc fed9 	bl	80001f0 <__adddf3>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4620      	mov	r0, r4
 8003444:	4629      	mov	r1, r5
 8003446:	f7fd f889 	bl	800055c <__aeabi_dmul>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8003452:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003456:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800345a:	f7fd faf1 	bl	8000a40 <__aeabi_dcmplt>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00d      	beq.n	8003480 <_etoa+0x2f0>
    expval--;
 8003464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003466:	3b01      	subs	r3, #1
 8003468:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 800346a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <_etoa+0x350>)
 8003474:	f7fd f99c 	bl	80007b0 <__aeabi_ddiv>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8003480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003482:	2b63      	cmp	r3, #99	; 0x63
 8003484:	dc30      	bgt.n	80034e8 <_etoa+0x358>
 8003486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003488:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800348c:	db2c      	blt.n	80034e8 <_etoa+0x358>
 800348e:	2304      	movs	r3, #4
 8003490:	e02b      	b.n	80034ea <_etoa+0x35a>
 8003492:	bf00      	nop
 8003494:	f3af 8000 	nop.w
 8003498:	509f79fb 	.word	0x509f79fb
 800349c:	3fd34413 	.word	0x3fd34413
 80034a0:	8b60c8b3 	.word	0x8b60c8b3
 80034a4:	3fc68a28 	.word	0x3fc68a28
 80034a8:	636f4361 	.word	0x636f4361
 80034ac:	3fd287a7 	.word	0x3fd287a7
 80034b0:	0979a371 	.word	0x0979a371
 80034b4:	400a934f 	.word	0x400a934f
 80034b8:	bbb55516 	.word	0xbbb55516
 80034bc:	40026bb1 	.word	0x40026bb1
 80034c0:	fefa39ef 	.word	0xfefa39ef
 80034c4:	3fe62e42 	.word	0x3fe62e42
 80034c8:	7fefffff 	.word	0x7fefffff
 80034cc:	000fffff 	.word	0x000fffff
 80034d0:	3ff00000 	.word	0x3ff00000
 80034d4:	3ff80000 	.word	0x3ff80000
 80034d8:	3fe00000 	.word	0x3fe00000
 80034dc:	402c0000 	.word	0x402c0000
 80034e0:	40240000 	.word	0x40240000
 80034e4:	40180000 	.word	0x40180000
 80034e8:	2305      	movs	r3, #5
 80034ea:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80034ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d03d      	beq.n	8003574 <_etoa+0x3e4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80034f8:	a369      	add	r3, pc, #420	; (adr r3, 80036a0 <_etoa+0x510>)
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003502:	f7fd fab1 	bl	8000a68 <__aeabi_dcmpge>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d024      	beq.n	8003556 <_etoa+0x3c6>
 800350c:	a366      	add	r3, pc, #408	; (adr r3, 80036a8 <_etoa+0x518>)
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003516:	f7fd fa93 	bl	8000a40 <__aeabi_dcmplt>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01a      	beq.n	8003556 <_etoa+0x3c6>
      if ((int)prec > expval) {
 8003520:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003524:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003526:	429a      	cmp	r2, r3
 8003528:	da07      	bge.n	800353a <_etoa+0x3aa>
        prec = (unsigned)((int)prec - expval - 1);
 800352a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800352e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003538:	e002      	b.n	8003540 <_etoa+0x3b0>
      }
      else {
        prec = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003540:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	657b      	str	r3, [r7, #84]	; 0x54
 8003554:	e00e      	b.n	8003574 <_etoa+0x3e4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8003556:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <_etoa+0x3e4>
 800355e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003566:	2b00      	cmp	r3, #0
 8003568:	d004      	beq.n	8003574 <_etoa+0x3e4>
        --prec;
 800356a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800356e:	3b01      	subs	r3, #1
 8003570:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8003574:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003578:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 800357a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800357e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003580:	429a      	cmp	r2, r3
 8003582:	d904      	bls.n	800358e <_etoa+0x3fe>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003584:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800358c:	e001      	b.n	8003592 <_etoa+0x402>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003592:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d004      	beq.n	80035a8 <_etoa+0x418>
 800359e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <_etoa+0x418>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 80035a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <_etoa+0x432>
    value /= conv.F;
 80035ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035b6:	f7fd f8fb 	bl	80007b0 <__aeabi_ddiv>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80035c6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d006      	beq.n	80035dc <_etoa+0x44c>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80035d8:	607b      	str	r3, [r7, #4]
 80035da:	e003      	b.n	80035e4 <_etoa+0x454>
 80035dc:	ed97 7b02 	vldr	d7, [r7, #8]
 80035e0:	ed87 7b00 	vstr	d7, [r7]
 80035e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035ec:	9302      	str	r3, [sp, #8]
 80035ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	ed97 0b00 	vldr	d0, [r7]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	69b9      	ldr	r1, [r7, #24]
 8003602:	69f8      	ldr	r0, [r7, #28]
 8003604:	f7ff fb64 	bl	8002cd0 <_ftoa>
 8003608:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 800360a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800360c:	2b00      	cmp	r3, #0
 800360e:	d03f      	beq.n	8003690 <_etoa+0x500>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003610:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <_etoa+0x490>
 800361c:	2045      	movs	r0, #69	; 0x45
 800361e:	e000      	b.n	8003622 <_etoa+0x492>
 8003620:	2065      	movs	r0, #101	; 0x65
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	1c53      	adds	r3, r2, #1
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	69fc      	ldr	r4, [r7, #28]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	69b9      	ldr	r1, [r7, #24]
 800362e:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8003630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003632:	2b00      	cmp	r3, #0
 8003634:	bfb8      	it	lt
 8003636:	425b      	neglt	r3, r3
 8003638:	4618      	mov	r0, r3
 800363a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363c:	0fdb      	lsrs	r3, r3, #31
 800363e:	b2db      	uxtb	r3, r3
 8003640:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003642:	3a01      	subs	r2, #1
 8003644:	2105      	movs	r1, #5
 8003646:	9105      	str	r1, [sp, #20]
 8003648:	9204      	str	r2, [sp, #16]
 800364a:	2200      	movs	r2, #0
 800364c:	9203      	str	r2, [sp, #12]
 800364e:	220a      	movs	r2, #10
 8003650:	9202      	str	r2, [sp, #8]
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	9000      	str	r0, [sp, #0]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	69b9      	ldr	r1, [r7, #24]
 800365c:	69f8      	ldr	r0, [r7, #28]
 800365e:	f7ff fa5f 	bl	8002b20 <_ntoa_long>
 8003662:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003664:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00f      	beq.n	8003690 <_etoa+0x500>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003670:	e007      	b.n	8003682 <_etoa+0x4f2>
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	1c53      	adds	r3, r2, #1
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	69fc      	ldr	r4, [r7, #28]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	69b9      	ldr	r1, [r7, #24]
 800367e:	2020      	movs	r0, #32
 8003680:	47a0      	blx	r4
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800368c:	429a      	cmp	r2, r3
 800368e:	d8f0      	bhi.n	8003672 <_etoa+0x4e2>
    }
  }
  return idx;
 8003690:	697b      	ldr	r3, [r7, #20]
}
 8003692:	4618      	mov	r0, r3
 8003694:	375c      	adds	r7, #92	; 0x5c
 8003696:	46bd      	mov	sp, r7
 8003698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800369c:	f3af 8000 	nop.w
 80036a0:	eb1c432d 	.word	0xeb1c432d
 80036a4:	3f1a36e2 	.word	0x3f1a36e2
 80036a8:	00000000 	.word	0x00000000
 80036ac:	412e8480 	.word	0x412e8480

080036b0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80036b0:	b5b0      	push	{r4, r5, r7, lr}
 80036b2:	b0a0      	sub	sp, #128	; 0x80
 80036b4:	af0a      	add	r7, sp, #40	; 0x28
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f040 8494 	bne.w	8003ff2 <_vsnprintf+0x942>
    // use null output function
    out = _out_null;
 80036ca:	4ba0      	ldr	r3, [pc, #640]	; (800394c <_vsnprintf+0x29c>)
 80036cc:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 80036ce:	f000 bc90 	b.w	8003ff2 <_vsnprintf+0x942>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b25      	cmp	r3, #37	; 0x25
 80036d8:	d00d      	beq.n	80036f6 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	7818      	ldrb	r0, [r3, #0]
 80036de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036e0:	1c53      	adds	r3, r2, #1
 80036e2:	647b      	str	r3, [r7, #68]	; 0x44
 80036e4:	68fc      	ldr	r4, [r7, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	47a0      	blx	r4
      format++;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	3301      	adds	r3, #1
 80036f0:	603b      	str	r3, [r7, #0]
      continue;
 80036f2:	f000 bc7e 	b.w	8003ff2 <_vsnprintf+0x942>
    }
    else {
      // yes, evaluate it
      format++;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	3301      	adds	r3, #1
 80036fa:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	3b20      	subs	r3, #32
 8003706:	2b10      	cmp	r3, #16
 8003708:	d856      	bhi.n	80037b8 <_vsnprintf+0x108>
 800370a:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <_vsnprintf+0x60>)
 800370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003710:	08003791 	.word	0x08003791
 8003714:	080037b9 	.word	0x080037b9
 8003718:	080037b9 	.word	0x080037b9
 800371c:	080037a5 	.word	0x080037a5
 8003720:	080037b9 	.word	0x080037b9
 8003724:	080037b9 	.word	0x080037b9
 8003728:	080037b9 	.word	0x080037b9
 800372c:	080037b9 	.word	0x080037b9
 8003730:	080037b9 	.word	0x080037b9
 8003734:	080037b9 	.word	0x080037b9
 8003738:	080037b9 	.word	0x080037b9
 800373c:	0800377d 	.word	0x0800377d
 8003740:	080037b9 	.word	0x080037b9
 8003744:	08003769 	.word	0x08003769
 8003748:	080037b9 	.word	0x080037b9
 800374c:	080037b9 	.word	0x080037b9
 8003750:	08003755 	.word	0x08003755
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	657b      	str	r3, [r7, #84]	; 0x54
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	3301      	adds	r3, #1
 8003760:	603b      	str	r3, [r7, #0]
 8003762:	2301      	movs	r3, #1
 8003764:	64bb      	str	r3, [r7, #72]	; 0x48
 8003766:	e02a      	b.n	80037be <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800376a:	f043 0302 	orr.w	r3, r3, #2
 800376e:	657b      	str	r3, [r7, #84]	; 0x54
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	3301      	adds	r3, #1
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	2301      	movs	r3, #1
 8003778:	64bb      	str	r3, [r7, #72]	; 0x48
 800377a:	e020      	b.n	80037be <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800377c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800377e:	f043 0304 	orr.w	r3, r3, #4
 8003782:	657b      	str	r3, [r7, #84]	; 0x54
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	3301      	adds	r3, #1
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	2301      	movs	r3, #1
 800378c:	64bb      	str	r3, [r7, #72]	; 0x48
 800378e:	e016      	b.n	80037be <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003792:	f043 0308 	orr.w	r3, r3, #8
 8003796:	657b      	str	r3, [r7, #84]	; 0x54
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	3301      	adds	r3, #1
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	2301      	movs	r3, #1
 80037a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80037a2:	e00c      	b.n	80037be <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80037a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a6:	f043 0310 	orr.w	r3, r3, #16
 80037aa:	657b      	str	r3, [r7, #84]	; 0x54
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	3301      	adds	r3, #1
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	2301      	movs	r3, #1
 80037b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80037b6:	e002      	b.n	80037be <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 80037b8:	2300      	movs	r3, #0
 80037ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80037bc:	bf00      	nop
      }
    } while (n);
 80037be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d19d      	bne.n	8003700 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff f840 	bl	8002852 <_is_digit>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <_vsnprintf+0x134>
      width = _atoi(&format);
 80037d8:	463b      	mov	r3, r7
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff f850 	bl	8002880 <_atoi>
 80037e0:	6538      	str	r0, [r7, #80]	; 0x50
 80037e2:	e018      	b.n	8003816 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b2a      	cmp	r3, #42	; 0x2a
 80037ea:	d114      	bne.n	8003816 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 80037ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037ee:	1d1a      	adds	r2, r3, #4
 80037f0:	66ba      	str	r2, [r7, #104]	; 0x68
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	da07      	bge.n	800380c <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 80037fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fe:	f043 0302 	orr.w	r3, r3, #2
 8003802:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	425b      	negs	r3, r3
 8003808:	653b      	str	r3, [r7, #80]	; 0x50
 800380a:	e001      	b.n	8003810 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	3301      	adds	r3, #1
 8003814:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b2e      	cmp	r3, #46	; 0x2e
 8003820:	d124      	bne.n	800386c <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 8003822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003824:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003828:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	3301      	adds	r3, #1
 800382e:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff f80c 	bl	8002852 <_is_digit>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8003840:	463b      	mov	r3, r7
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff f81c 	bl	8002880 <_atoi>
 8003848:	64f8      	str	r0, [r7, #76]	; 0x4c
 800384a:	e00f      	b.n	800386c <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b2a      	cmp	r3, #42	; 0x2a
 8003852:	d10b      	bne.n	800386c <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 8003854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003856:	1d1a      	adds	r2, r3, #4
 8003858:	66ba      	str	r2, [r7, #104]	; 0x68
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800385e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003860:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003864:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	3301      	adds	r3, #1
 800386a:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	3b68      	subs	r3, #104	; 0x68
 8003872:	2b12      	cmp	r3, #18
 8003874:	d866      	bhi.n	8003944 <_vsnprintf+0x294>
 8003876:	a201      	add	r2, pc, #4	; (adr r2, 800387c <_vsnprintf+0x1cc>)
 8003878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387c:	080038ef 	.word	0x080038ef
 8003880:	08003945 	.word	0x08003945
 8003884:	08003925 	.word	0x08003925
 8003888:	08003945 	.word	0x08003945
 800388c:	080038c9 	.word	0x080038c9
 8003890:	08003945 	.word	0x08003945
 8003894:	08003945 	.word	0x08003945
 8003898:	08003945 	.word	0x08003945
 800389c:	08003945 	.word	0x08003945
 80038a0:	08003945 	.word	0x08003945
 80038a4:	08003945 	.word	0x08003945
 80038a8:	08003945 	.word	0x08003945
 80038ac:	08003915 	.word	0x08003915
 80038b0:	08003945 	.word	0x08003945
 80038b4:	08003945 	.word	0x08003945
 80038b8:	08003945 	.word	0x08003945
 80038bc:	08003945 	.word	0x08003945
 80038c0:	08003945 	.word	0x08003945
 80038c4:	08003935 	.word	0x08003935
      case 'l' :
        flags |= FLAGS_LONG;
 80038c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ce:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	3301      	adds	r3, #1
 80038d4:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b6c      	cmp	r3, #108	; 0x6c
 80038dc:	d134      	bne.n	8003948 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 80038de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038e4:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	3301      	adds	r3, #1
 80038ea:	603b      	str	r3, [r7, #0]
        }
        break;
 80038ec:	e02c      	b.n	8003948 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 80038ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	3301      	adds	r3, #1
 80038fa:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b68      	cmp	r3, #104	; 0x68
 8003902:	d125      	bne.n	8003950 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8003904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800390a:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	3301      	adds	r3, #1
 8003910:	603b      	str	r3, [r7, #0]
        }
        break;
 8003912:	e01d      	b.n	8003950 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	3301      	adds	r3, #1
 8003920:	603b      	str	r3, [r7, #0]
        break;
 8003922:	e016      	b.n	8003952 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800392a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	3301      	adds	r3, #1
 8003930:	603b      	str	r3, [r7, #0]
        break;
 8003932:	e00e      	b.n	8003952 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	3301      	adds	r3, #1
 8003940:	603b      	str	r3, [r7, #0]
        break;
 8003942:	e006      	b.n	8003952 <_vsnprintf+0x2a2>
      default :
        break;
 8003944:	bf00      	nop
 8003946:	e004      	b.n	8003952 <_vsnprintf+0x2a2>
        break;
 8003948:	bf00      	nop
 800394a:	e002      	b.n	8003952 <_vsnprintf+0x2a2>
 800394c:	080027d7 	.word	0x080027d7
        break;
 8003950:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	3b25      	subs	r3, #37	; 0x25
 8003958:	2b53      	cmp	r3, #83	; 0x53
 800395a:	f200 833d 	bhi.w	8003fd8 <_vsnprintf+0x928>
 800395e:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <_vsnprintf+0x2b4>)
 8003960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003964:	08003fc1 	.word	0x08003fc1
 8003968:	08003fd9 	.word	0x08003fd9
 800396c:	08003fd9 	.word	0x08003fd9
 8003970:	08003fd9 	.word	0x08003fd9
 8003974:	08003fd9 	.word	0x08003fd9
 8003978:	08003fd9 	.word	0x08003fd9
 800397c:	08003fd9 	.word	0x08003fd9
 8003980:	08003fd9 	.word	0x08003fd9
 8003984:	08003fd9 	.word	0x08003fd9
 8003988:	08003fd9 	.word	0x08003fd9
 800398c:	08003fd9 	.word	0x08003fd9
 8003990:	08003fd9 	.word	0x08003fd9
 8003994:	08003fd9 	.word	0x08003fd9
 8003998:	08003fd9 	.word	0x08003fd9
 800399c:	08003fd9 	.word	0x08003fd9
 80039a0:	08003fd9 	.word	0x08003fd9
 80039a4:	08003fd9 	.word	0x08003fd9
 80039a8:	08003fd9 	.word	0x08003fd9
 80039ac:	08003fd9 	.word	0x08003fd9
 80039b0:	08003fd9 	.word	0x08003fd9
 80039b4:	08003fd9 	.word	0x08003fd9
 80039b8:	08003fd9 	.word	0x08003fd9
 80039bc:	08003fd9 	.word	0x08003fd9
 80039c0:	08003fd9 	.word	0x08003fd9
 80039c4:	08003fd9 	.word	0x08003fd9
 80039c8:	08003fd9 	.word	0x08003fd9
 80039cc:	08003fd9 	.word	0x08003fd9
 80039d0:	08003fd9 	.word	0x08003fd9
 80039d4:	08003fd9 	.word	0x08003fd9
 80039d8:	08003fd9 	.word	0x08003fd9
 80039dc:	08003fd9 	.word	0x08003fd9
 80039e0:	08003fd9 	.word	0x08003fd9
 80039e4:	08003d8f 	.word	0x08003d8f
 80039e8:	08003d43 	.word	0x08003d43
 80039ec:	08003d8f 	.word	0x08003d8f
 80039f0:	08003fd9 	.word	0x08003fd9
 80039f4:	08003fd9 	.word	0x08003fd9
 80039f8:	08003fd9 	.word	0x08003fd9
 80039fc:	08003fd9 	.word	0x08003fd9
 8003a00:	08003fd9 	.word	0x08003fd9
 8003a04:	08003fd9 	.word	0x08003fd9
 8003a08:	08003fd9 	.word	0x08003fd9
 8003a0c:	08003fd9 	.word	0x08003fd9
 8003a10:	08003fd9 	.word	0x08003fd9
 8003a14:	08003fd9 	.word	0x08003fd9
 8003a18:	08003fd9 	.word	0x08003fd9
 8003a1c:	08003fd9 	.word	0x08003fd9
 8003a20:	08003fd9 	.word	0x08003fd9
 8003a24:	08003fd9 	.word	0x08003fd9
 8003a28:	08003fd9 	.word	0x08003fd9
 8003a2c:	08003fd9 	.word	0x08003fd9
 8003a30:	08003ab5 	.word	0x08003ab5
 8003a34:	08003fd9 	.word	0x08003fd9
 8003a38:	08003fd9 	.word	0x08003fd9
 8003a3c:	08003fd9 	.word	0x08003fd9
 8003a40:	08003fd9 	.word	0x08003fd9
 8003a44:	08003fd9 	.word	0x08003fd9
 8003a48:	08003fd9 	.word	0x08003fd9
 8003a4c:	08003fd9 	.word	0x08003fd9
 8003a50:	08003fd9 	.word	0x08003fd9
 8003a54:	08003fd9 	.word	0x08003fd9
 8003a58:	08003ab5 	.word	0x08003ab5
 8003a5c:	08003dfb 	.word	0x08003dfb
 8003a60:	08003ab5 	.word	0x08003ab5
 8003a64:	08003d8f 	.word	0x08003d8f
 8003a68:	08003d43 	.word	0x08003d43
 8003a6c:	08003d8f 	.word	0x08003d8f
 8003a70:	08003fd9 	.word	0x08003fd9
 8003a74:	08003ab5 	.word	0x08003ab5
 8003a78:	08003fd9 	.word	0x08003fd9
 8003a7c:	08003fd9 	.word	0x08003fd9
 8003a80:	08003fd9 	.word	0x08003fd9
 8003a84:	08003fd9 	.word	0x08003fd9
 8003a88:	08003fd9 	.word	0x08003fd9
 8003a8c:	08003ab5 	.word	0x08003ab5
 8003a90:	08003f33 	.word	0x08003f33
 8003a94:	08003fd9 	.word	0x08003fd9
 8003a98:	08003fd9 	.word	0x08003fd9
 8003a9c:	08003e6f 	.word	0x08003e6f
 8003aa0:	08003fd9 	.word	0x08003fd9
 8003aa4:	08003ab5 	.word	0x08003ab5
 8003aa8:	08003fd9 	.word	0x08003fd9
 8003aac:	08003fd9 	.word	0x08003fd9
 8003ab0:	08003ab5 	.word	0x08003ab5
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b78      	cmp	r3, #120	; 0x78
 8003aba:	d003      	beq.n	8003ac4 <_vsnprintf+0x414>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b58      	cmp	r3, #88	; 0x58
 8003ac2:	d102      	bne.n	8003aca <_vsnprintf+0x41a>
          base = 16U;
 8003ac4:	2310      	movs	r3, #16
 8003ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ac8:	e013      	b.n	8003af2 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b6f      	cmp	r3, #111	; 0x6f
 8003ad0:	d102      	bne.n	8003ad8 <_vsnprintf+0x428>
          base =  8U;
 8003ad2:	2308      	movs	r3, #8
 8003ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ad6:	e00c      	b.n	8003af2 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b62      	cmp	r3, #98	; 0x62
 8003ade:	d102      	bne.n	8003ae6 <_vsnprintf+0x436>
          base =  2U;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ae4:	e005      	b.n	8003af2 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8003ae6:	230a      	movs	r3, #10
 8003ae8:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aec:	f023 0310 	bic.w	r3, r3, #16
 8003af0:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b58      	cmp	r3, #88	; 0x58
 8003af8:	d103      	bne.n	8003b02 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8003afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003afc:	f043 0320 	orr.w	r3, r3, #32
 8003b00:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b69      	cmp	r3, #105	; 0x69
 8003b08:	d007      	beq.n	8003b1a <_vsnprintf+0x46a>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d003      	beq.n	8003b1a <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b14:	f023 030c 	bic.w	r3, r3, #12
 8003b18:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8003b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8003b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b69      	cmp	r3, #105	; 0x69
 8003b32:	d004      	beq.n	8003b3e <_vsnprintf+0x48e>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b64      	cmp	r3, #100	; 0x64
 8003b3a:	f040 808e 	bne.w	8003c5a <_vsnprintf+0x5aa>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d02f      	beq.n	8003ba8 <_vsnprintf+0x4f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003b48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b4a:	3307      	adds	r3, #7
 8003b4c:	f023 0307 	bic.w	r3, r3, #7
 8003b50:	f103 0208 	add.w	r2, r3, #8
 8003b54:	66ba      	str	r2, [r7, #104]	; 0x68
 8003b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003b5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b62:	2a00      	cmp	r2, #0
 8003b64:	f173 0100 	sbcs.w	r1, r3, #0
 8003b68:	da02      	bge.n	8003b70 <_vsnprintf+0x4c0>
 8003b6a:	4252      	negs	r2, r2
 8003b6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	0fdb      	lsrs	r3, r3, #31
 8003b78:	b2dc      	uxtb	r4, r3
 8003b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8003b84:	9508      	str	r5, [sp, #32]
 8003b86:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8003b88:	9507      	str	r5, [sp, #28]
 8003b8a:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8003b8c:	9506      	str	r5, [sp, #24]
 8003b8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b92:	9402      	str	r4, [sp, #8]
 8003b94:	e9cd 0100 	strd	r0, r1, [sp]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f7ff f825 	bl	8002bee <_ntoa_long_long>
 8003ba4:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8003ba6:	e0c8      	b.n	8003d3a <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d01e      	beq.n	8003bf0 <_vsnprintf+0x540>
            const long value = va_arg(va, long);
 8003bb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bb4:	1d1a      	adds	r2, r3, #4
 8003bb6:	66ba      	str	r2, [r7, #104]	; 0x68
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bfb8      	it	lt
 8003bc2:	425b      	neglt	r3, r3
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	0fdb      	lsrs	r3, r3, #31
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bce:	9205      	str	r2, [sp, #20]
 8003bd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003bd2:	9204      	str	r2, [sp, #16]
 8003bd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bd6:	9203      	str	r2, [sp, #12]
 8003bd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bda:	9202      	str	r2, [sp, #8]
 8003bdc:	9301      	str	r3, [sp, #4]
 8003bde:	9100      	str	r1, [sp, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f7fe ff9a 	bl	8002b20 <_ntoa_long>
 8003bec:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8003bee:	e0a4      	b.n	8003d3a <_vsnprintf+0x68a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <_vsnprintf+0x556>
 8003bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bfc:	1d1a      	adds	r2, r3, #4
 8003bfe:	66ba      	str	r2, [r7, #104]	; 0x68
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	e00e      	b.n	8003c24 <_vsnprintf+0x574>
 8003c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <_vsnprintf+0x56c>
 8003c10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c12:	1d1a      	adds	r2, r3, #4
 8003c14:	66ba      	str	r2, [r7, #104]	; 0x68
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	b21b      	sxth	r3, r3
 8003c1a:	e003      	b.n	8003c24 <_vsnprintf+0x574>
 8003c1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c1e:	1d1a      	adds	r2, r3, #4
 8003c20:	66ba      	str	r2, [r7, #104]	; 0x68
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	bfb8      	it	lt
 8003c2c:	425b      	neglt	r3, r3
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	0fdb      	lsrs	r3, r3, #31
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c38:	9205      	str	r2, [sp, #20]
 8003c3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c3c:	9204      	str	r2, [sp, #16]
 8003c3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c40:	9203      	str	r2, [sp, #12]
 8003c42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c44:	9202      	str	r2, [sp, #8]
 8003c46:	9301      	str	r3, [sp, #4]
 8003c48:	9100      	str	r1, [sp, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7fe ff65 	bl	8002b20 <_ntoa_long>
 8003c56:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8003c58:	e06f      	b.n	8003d3a <_vsnprintf+0x68a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d020      	beq.n	8003ca6 <_vsnprintf+0x5f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003c64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c66:	3307      	adds	r3, #7
 8003c68:	f023 0307 	bic.w	r3, r3, #7
 8003c6c:	f103 0208 	add.w	r2, r3, #8
 8003c70:	66ba      	str	r2, [r7, #104]	; 0x68
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c78:	4608      	mov	r0, r1
 8003c7a:	f04f 0100 	mov.w	r1, #0
 8003c7e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8003c80:	9408      	str	r4, [sp, #32]
 8003c82:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003c84:	9407      	str	r4, [sp, #28]
 8003c86:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8003c88:	9406      	str	r4, [sp, #24]
 8003c8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c8e:	2100      	movs	r1, #0
 8003c90:	9102      	str	r1, [sp, #8]
 8003c92:	e9cd 2300 	strd	r2, r3, [sp]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c9a:	68b9      	ldr	r1, [r7, #8]
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f7fe ffa6 	bl	8002bee <_ntoa_long_long>
 8003ca2:	6478      	str	r0, [r7, #68]	; 0x44
 8003ca4:	e049      	b.n	8003d3a <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d016      	beq.n	8003cde <_vsnprintf+0x62e>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003cb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cb2:	1d1a      	adds	r2, r3, #4
 8003cb4:	66ba      	str	r2, [r7, #104]	; 0x68
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cba:	9205      	str	r2, [sp, #20]
 8003cbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003cbe:	9204      	str	r2, [sp, #16]
 8003cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cc2:	9203      	str	r2, [sp, #12]
 8003cc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cc6:	9202      	str	r2, [sp, #8]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	9201      	str	r2, [sp, #4]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7fe ff23 	bl	8002b20 <_ntoa_long>
 8003cda:	6478      	str	r0, [r7, #68]	; 0x44
 8003cdc:	e02d      	b.n	8003d3a <_vsnprintf+0x68a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <_vsnprintf+0x644>
 8003ce8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cea:	1d1a      	adds	r2, r3, #4
 8003cec:	66ba      	str	r2, [r7, #104]	; 0x68
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	e00e      	b.n	8003d12 <_vsnprintf+0x662>
 8003cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d005      	beq.n	8003d0a <_vsnprintf+0x65a>
 8003cfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d00:	1d1a      	adds	r2, r3, #4
 8003d02:	66ba      	str	r2, [r7, #104]	; 0x68
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	e003      	b.n	8003d12 <_vsnprintf+0x662>
 8003d0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d0c:	1d1a      	adds	r2, r3, #4
 8003d0e:	66ba      	str	r2, [r7, #104]	; 0x68
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d16:	9305      	str	r3, [sp, #20]
 8003d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d1a:	9304      	str	r3, [sp, #16]
 8003d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d1e:	9303      	str	r3, [sp, #12]
 8003d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d22:	9302      	str	r3, [sp, #8]
 8003d24:	2300      	movs	r3, #0
 8003d26:	9301      	str	r3, [sp, #4]
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f7fe fef4 	bl	8002b20 <_ntoa_long>
 8003d38:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	603b      	str	r3, [r7, #0]
        break;
 8003d40:	e157      	b.n	8003ff2 <_vsnprintf+0x942>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b46      	cmp	r3, #70	; 0x46
 8003d48:	d103      	bne.n	8003d52 <_vsnprintf+0x6a2>
 8003d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d4c:	f043 0320 	orr.w	r3, r3, #32
 8003d50:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003d52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d54:	3307      	adds	r3, #7
 8003d56:	f023 0307 	bic.w	r3, r3, #7
 8003d5a:	f103 0208 	add.w	r2, r3, #8
 8003d5e:	66ba      	str	r2, [r7, #104]	; 0x68
 8003d60:	ed93 7b00 	vldr	d7, [r3]
 8003d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d66:	9302      	str	r3, [sp, #8]
 8003d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d6a:	9301      	str	r3, [sp, #4]
 8003d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	eeb0 0a47 	vmov.f32	s0, s14
 8003d74:	eef0 0a67 	vmov.f32	s1, s15
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f7fe ffa6 	bl	8002cd0 <_ftoa>
 8003d84:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	603b      	str	r3, [r7, #0]
        break;
 8003d8c:	e131      	b.n	8003ff2 <_vsnprintf+0x942>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b67      	cmp	r3, #103	; 0x67
 8003d94:	d003      	beq.n	8003d9e <_vsnprintf+0x6ee>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b47      	cmp	r3, #71	; 0x47
 8003d9c:	d103      	bne.n	8003da6 <_vsnprintf+0x6f6>
 8003d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003da4:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b45      	cmp	r3, #69	; 0x45
 8003dac:	d003      	beq.n	8003db6 <_vsnprintf+0x706>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b47      	cmp	r3, #71	; 0x47
 8003db4:	d103      	bne.n	8003dbe <_vsnprintf+0x70e>
 8003db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003db8:	f043 0320 	orr.w	r3, r3, #32
 8003dbc:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003dbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dc0:	3307      	adds	r3, #7
 8003dc2:	f023 0307 	bic.w	r3, r3, #7
 8003dc6:	f103 0208 	add.w	r2, r3, #8
 8003dca:	66ba      	str	r2, [r7, #104]	; 0x68
 8003dcc:	ed93 7b00 	vldr	d7, [r3]
 8003dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd2:	9302      	str	r3, [sp, #8]
 8003dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	eeb0 0a47 	vmov.f32	s0, s14
 8003de0:	eef0 0a67 	vmov.f32	s1, s15
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f7ff f9d0 	bl	8003190 <_etoa>
 8003df0:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	603b      	str	r3, [r7, #0]
        break;
 8003df8:	e0fb      	b.n	8003ff2 <_vsnprintf+0x942>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10e      	bne.n	8003e26 <_vsnprintf+0x776>
          while (l++ < width) {
 8003e08:	e007      	b.n	8003e1a <_vsnprintf+0x76a>
            out(' ', buffer, idx++, maxlen);
 8003e0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e0c:	1c53      	adds	r3, r2, #1
 8003e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e10:	68fc      	ldr	r4, [r7, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	2020      	movs	r0, #32
 8003e18:	47a0      	blx	r4
          while (l++ < width) {
 8003e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d8f1      	bhi.n	8003e0a <_vsnprintf+0x75a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003e26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e28:	1d1a      	adds	r2, r3, #4
 8003e2a:	66ba      	str	r2, [r7, #104]	; 0x68
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	b2d8      	uxtb	r0, r3
 8003e30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e32:	1c53      	adds	r3, r2, #1
 8003e34:	647b      	str	r3, [r7, #68]	; 0x44
 8003e36:	68fc      	ldr	r4, [r7, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8003e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00e      	beq.n	8003e66 <_vsnprintf+0x7b6>
          while (l++ < width) {
 8003e48:	e007      	b.n	8003e5a <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 8003e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e4c:	1c53      	adds	r3, r2, #1
 8003e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e50:	68fc      	ldr	r4, [r7, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	2020      	movs	r0, #32
 8003e58:	47a0      	blx	r4
          while (l++ < width) {
 8003e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d8f1      	bhi.n	8003e4a <_vsnprintf+0x79a>
          }
        }
        format++;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	603b      	str	r3, [r7, #0]
        break;
 8003e6c:	e0c1      	b.n	8003ff2 <_vsnprintf+0x942>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003e6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e70:	1d1a      	adds	r2, r3, #4
 8003e72:	66ba      	str	r2, [r7, #104]	; 0x68
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <_vsnprintf+0x7d2>
 8003e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e80:	e001      	b.n	8003e86 <_vsnprintf+0x7d6>
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295
 8003e86:	4619      	mov	r1, r3
 8003e88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e8a:	f7fe fcc5 	bl	8002818 <_strnlen_s>
 8003e8e:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <_vsnprintf+0x7f6>
          l = (l < precision ? l : precision);
 8003e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	bf28      	it	cs
 8003ea2:	4613      	movcs	r3, r2
 8003ea4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8003ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d11a      	bne.n	8003ee6 <_vsnprintf+0x836>
          while (l++ < width) {
 8003eb0:	e007      	b.n	8003ec2 <_vsnprintf+0x812>
            out(' ', buffer, idx++, maxlen);
 8003eb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eb4:	1c53      	adds	r3, r2, #1
 8003eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb8:	68fc      	ldr	r4, [r7, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68b9      	ldr	r1, [r7, #8]
 8003ebe:	2020      	movs	r0, #32
 8003ec0:	47a0      	blx	r4
          while (l++ < width) {
 8003ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	637a      	str	r2, [r7, #52]	; 0x34
 8003ec8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d8f1      	bhi.n	8003eb2 <_vsnprintf+0x802>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003ece:	e00a      	b.n	8003ee6 <_vsnprintf+0x836>
          out(*(p++), buffer, idx++, maxlen);
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	63ba      	str	r2, [r7, #56]	; 0x38
 8003ed6:	7818      	ldrb	r0, [r3, #0]
 8003ed8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eda:	1c53      	adds	r3, r2, #1
 8003edc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ede:	68fc      	ldr	r4, [r7, #12]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68b9      	ldr	r1, [r7, #8]
 8003ee4:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <_vsnprintf+0x852>
 8003eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0eb      	beq.n	8003ed0 <_vsnprintf+0x820>
 8003ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efa:	1e5a      	subs	r2, r3, #1
 8003efc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e6      	bne.n	8003ed0 <_vsnprintf+0x820>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00e      	beq.n	8003f2a <_vsnprintf+0x87a>
          while (l++ < width) {
 8003f0c:	e007      	b.n	8003f1e <_vsnprintf+0x86e>
            out(' ', buffer, idx++, maxlen);
 8003f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f10:	1c53      	adds	r3, r2, #1
 8003f12:	647b      	str	r3, [r7, #68]	; 0x44
 8003f14:	68fc      	ldr	r4, [r7, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	2020      	movs	r0, #32
 8003f1c:	47a0      	blx	r4
          while (l++ < width) {
 8003f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	637a      	str	r2, [r7, #52]	; 0x34
 8003f24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d8f1      	bhi.n	8003f0e <_vsnprintf+0x85e>
          }
        }
        format++;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	603b      	str	r3, [r7, #0]
        break;
 8003f30:	e05f      	b.n	8003ff2 <_vsnprintf+0x942>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003f32:	2308      	movs	r3, #8
 8003f34:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f38:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8003f3c:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 8003f44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01e      	beq.n	8003f8a <_vsnprintf+0x8da>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003f4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f4e:	1d1a      	adds	r2, r3, #4
 8003f50:	66ba      	str	r2, [r7, #104]	; 0x68
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f5c:	9108      	str	r1, [sp, #32]
 8003f5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003f60:	9107      	str	r1, [sp, #28]
 8003f62:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003f64:	9106      	str	r1, [sp, #24]
 8003f66:	f04f 0010 	mov.w	r0, #16
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f72:	2100      	movs	r1, #0
 8003f74:	9102      	str	r1, [sp, #8]
 8003f76:	e9cd 2300 	strd	r2, r3, [sp]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f7e:	68b9      	ldr	r1, [r7, #8]
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7fe fe34 	bl	8002bee <_ntoa_long_long>
 8003f86:	6478      	str	r0, [r7, #68]	; 0x44
 8003f88:	e016      	b.n	8003fb8 <_vsnprintf+0x908>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8003f8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f8c:	1d1a      	adds	r2, r3, #4
 8003f8e:	66ba      	str	r2, [r7, #104]	; 0x68
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f96:	9305      	str	r3, [sp, #20]
 8003f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f9a:	9304      	str	r3, [sp, #16]
 8003f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f9e:	9303      	str	r3, [sp, #12]
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	9302      	str	r3, [sp, #8]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9301      	str	r3, [sp, #4]
 8003fa8:	9200      	str	r2, [sp, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7fe fdb5 	bl	8002b20 <_ntoa_long>
 8003fb6:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	603b      	str	r3, [r7, #0]
        break;
 8003fbe:	e018      	b.n	8003ff2 <_vsnprintf+0x942>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fc2:	1c53      	adds	r3, r2, #1
 8003fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc6:	68fc      	ldr	r4, [r7, #12]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	2025      	movs	r0, #37	; 0x25
 8003fce:	47a0      	blx	r4
        format++;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	603b      	str	r3, [r7, #0]
        break;
 8003fd6:	e00c      	b.n	8003ff2 <_vsnprintf+0x942>

      default :
        out(*format, buffer, idx++, maxlen);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	7818      	ldrb	r0, [r3, #0]
 8003fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fde:	1c53      	adds	r3, r2, #1
 8003fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe2:	68fc      	ldr	r4, [r7, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	47a0      	blx	r4
        format++;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	603b      	str	r3, [r7, #0]
        break;
 8003ff0:	bf00      	nop
  while (*format)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f47f ab6b 	bne.w	80036d2 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003ffc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	429a      	cmp	r2, r3
 8004002:	d302      	bcc.n	800400a <_vsnprintf+0x95a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	1e5a      	subs	r2, r3, #1
 8004008:	e000      	b.n	800400c <_vsnprintf+0x95c>
 800400a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800400c:	68fc      	ldr	r4, [r7, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	2000      	movs	r0, #0
 8004014:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8004016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004018:	4618      	mov	r0, r3
 800401a:	3758      	adds	r7, #88	; 0x58
 800401c:	46bd      	mov	sp, r7
 800401e:	bdb0      	pop	{r4, r5, r7, pc}

08004020 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8004020:	b40f      	push	{r0, r1, r2, r3}
 8004022:	b580      	push	{r7, lr}
 8004024:	b086      	sub	sp, #24
 8004026:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8004028:	f107 031c 	add.w	r3, r7, #28
 800402c:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800402e:	1d39      	adds	r1, r7, #4
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f04f 32ff 	mov.w	r2, #4294967295
 800403a:	4806      	ldr	r0, [pc, #24]	; (8004054 <printf_+0x34>)
 800403c:	f7ff fb38 	bl	80036b0 <_vsnprintf>
 8004040:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004042:	68fb      	ldr	r3, [r7, #12]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800404e:	b004      	add	sp, #16
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	080027f3 	.word	0x080027f3

08004058 <vprintf_>:
  return ret;
}


int vprintf_(const char* format, va_list va)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af02      	add	r7, sp, #8
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8004062:	f107 010c 	add.w	r1, r7, #12
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f04f 32ff 	mov.w	r2, #4294967295
 8004070:	4803      	ldr	r0, [pc, #12]	; (8004080 <vprintf_+0x28>)
 8004072:	f7ff fb1d 	bl	80036b0 <_vsnprintf>
 8004076:	4603      	mov	r3, r0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	080027f3 	.word	0x080027f3

08004084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800408a:	4b11      	ldr	r3, [pc, #68]	; (80040d0 <HAL_MspInit+0x4c>)
 800408c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408e:	4a10      	ldr	r2, [pc, #64]	; (80040d0 <HAL_MspInit+0x4c>)
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	6613      	str	r3, [r2, #96]	; 0x60
 8004096:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <HAL_MspInit+0x4c>)
 8004098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	607b      	str	r3, [r7, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040a2:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_MspInit+0x4c>)
 80040a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a6:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <HAL_MspInit+0x4c>)
 80040a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ac:	6593      	str	r3, [r2, #88]	; 0x58
 80040ae:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <HAL_MspInit+0x4c>)
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80040ba:	2200      	movs	r2, #0
 80040bc:	210f      	movs	r1, #15
 80040be:	f06f 0001 	mvn.w	r0, #1
 80040c2:	f000 fd2f 	bl	8004b24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000

080040d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08c      	sub	sp, #48	; 0x30
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80040e4:	2200      	movs	r2, #0
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	2037      	movs	r0, #55	; 0x37
 80040ea:	f000 fd1b 	bl	8004b24 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80040ee:	2037      	movs	r0, #55	; 0x37
 80040f0:	f000 fd34 	bl	8004b5c <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80040f4:	4b1e      	ldr	r3, [pc, #120]	; (8004170 <HAL_InitTick+0x9c>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	4a1d      	ldr	r2, [pc, #116]	; (8004170 <HAL_InitTick+0x9c>)
 80040fa:	f043 0320 	orr.w	r3, r3, #32
 80040fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004100:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <HAL_InitTick+0x9c>)
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800410c:	f107 0210 	add.w	r2, r7, #16
 8004110:	f107 0314 	add.w	r3, r7, #20
 8004114:	4611      	mov	r1, r2
 8004116:	4618      	mov	r0, r3
 8004118:	f001 fcca 	bl	8005ab0 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800411c:	f001 fcb2 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 8004120:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004124:	4a13      	ldr	r2, [pc, #76]	; (8004174 <HAL_InitTick+0xa0>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	0c9b      	lsrs	r3, r3, #18
 800412c:	3b01      	subs	r3, #1
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <HAL_InitTick+0xa4>)
 8004132:	4a12      	ldr	r2, [pc, #72]	; (800417c <HAL_InitTick+0xa8>)
 8004134:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <HAL_InitTick+0xa4>)
 8004138:	f240 32e7 	movw	r2, #999	; 0x3e7
 800413c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800413e:	4a0e      	ldr	r2, [pc, #56]	; (8004178 <HAL_InitTick+0xa4>)
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8004144:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <HAL_InitTick+0xa4>)
 8004146:	2200      	movs	r2, #0
 8004148:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_InitTick+0xa4>)
 800414c:	2200      	movs	r2, #0
 800414e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8004150:	4809      	ldr	r0, [pc, #36]	; (8004178 <HAL_InitTick+0xa4>)
 8004152:	f002 f9fb 	bl	800654c <HAL_TIM_Base_Init>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d104      	bne.n	8004166 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800415c:	4806      	ldr	r0, [pc, #24]	; (8004178 <HAL_InitTick+0xa4>)
 800415e:	f002 fa57 	bl	8006610 <HAL_TIM_Base_Start_IT>
 8004162:	4603      	mov	r3, r0
 8004164:	e000      	b.n	8004168 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
}
 8004168:	4618      	mov	r0, r3
 800416a:	3730      	adds	r7, #48	; 0x30
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40021000 	.word	0x40021000
 8004174:	431bde83 	.word	0x431bde83
 8004178:	20003b54 	.word	0x20003b54
 800417c:	40001400 	.word	0x40001400

08004180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004184:	e7fe      	b.n	8004184 <NMI_Handler+0x4>

08004186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800418a:	e7fe      	b.n	800418a <HardFault_Handler+0x4>

0800418c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004190:	e7fe      	b.n	8004190 <MemManage_Handler+0x4>

08004192 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004192:	b480      	push	{r7}
 8004194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004196:	e7fe      	b.n	8004196 <BusFault_Handler+0x4>

08004198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800419c:	e7fe      	b.n	800419c <UsageFault_Handler+0x4>

0800419e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800419e:	b480      	push	{r7}
 80041a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041a2:	bf00      	nop
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80041b0:	4802      	ldr	r0, [pc, #8]	; (80041bc <TIM7_IRQHandler+0x10>)
 80041b2:	f002 fa9d 	bl	80066f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20003b54 	.word	0x20003b54

080041c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041c8:	4a14      	ldr	r2, [pc, #80]	; (800421c <_sbrk+0x5c>)
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <_sbrk+0x60>)
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041d4:	4b13      	ldr	r3, [pc, #76]	; (8004224 <_sbrk+0x64>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041dc:	4b11      	ldr	r3, [pc, #68]	; (8004224 <_sbrk+0x64>)
 80041de:	4a12      	ldr	r2, [pc, #72]	; (8004228 <_sbrk+0x68>)
 80041e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041e2:	4b10      	ldr	r3, [pc, #64]	; (8004224 <_sbrk+0x64>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d207      	bcs.n	8004200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041f0:	f006 fd3c 	bl	800ac6c <__errno>
 80041f4:	4603      	mov	r3, r0
 80041f6:	220c      	movs	r2, #12
 80041f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041fa:	f04f 33ff 	mov.w	r3, #4294967295
 80041fe:	e009      	b.n	8004214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004200:	4b08      	ldr	r3, [pc, #32]	; (8004224 <_sbrk+0x64>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004206:	4b07      	ldr	r3, [pc, #28]	; (8004224 <_sbrk+0x64>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	4a05      	ldr	r2, [pc, #20]	; (8004224 <_sbrk+0x64>)
 8004210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004212:	68fb      	ldr	r3, [r7, #12]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20018000 	.word	0x20018000
 8004220:	00000400 	.word	0x00000400
 8004224:	20000304 	.word	0x20000304
 8004228:	20003bf8 	.word	0x20003bf8

0800422c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004230:	4b15      	ldr	r3, [pc, #84]	; (8004288 <SystemInit+0x5c>)
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004236:	4a14      	ldr	r2, [pc, #80]	; (8004288 <SystemInit+0x5c>)
 8004238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800423c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004240:	4b12      	ldr	r3, [pc, #72]	; (800428c <SystemInit+0x60>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a11      	ldr	r2, [pc, #68]	; (800428c <SystemInit+0x60>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800424c:	4b0f      	ldr	r3, [pc, #60]	; (800428c <SystemInit+0x60>)
 800424e:	2200      	movs	r2, #0
 8004250:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004252:	4b0e      	ldr	r3, [pc, #56]	; (800428c <SystemInit+0x60>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a0d      	ldr	r2, [pc, #52]	; (800428c <SystemInit+0x60>)
 8004258:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800425c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004260:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004262:	4b0a      	ldr	r3, [pc, #40]	; (800428c <SystemInit+0x60>)
 8004264:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004268:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800426a:	4b08      	ldr	r3, [pc, #32]	; (800428c <SystemInit+0x60>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a07      	ldr	r2, [pc, #28]	; (800428c <SystemInit+0x60>)
 8004270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004274:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <SystemInit+0x60>)
 8004278:	2200      	movs	r2, #0
 800427a:	619a      	str	r2, [r3, #24]
}
 800427c:	bf00      	nop
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000ed00 	.word	0xe000ed00
 800428c:	40021000 	.word	0x40021000

08004290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004294:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	0a1b      	lsrs	r3, r3, #8
 800429a:	f003 0307 	and.w	r3, r3, #7
}
 800429e:	4618      	mov	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	e000ed00 	.word	0xe000ed00

080042ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	db0b      	blt.n	80042d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	f003 021f 	and.w	r2, r3, #31
 80042c4:	4907      	ldr	r1, [pc, #28]	; (80042e4 <__NVIC_EnableIRQ+0x38>)
 80042c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	2001      	movs	r0, #1
 80042ce:	fa00 f202 	lsl.w	r2, r0, r2
 80042d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	e000e100 	.word	0xe000e100

080042e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	6039      	str	r1, [r7, #0]
 80042f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	db0a      	blt.n	8004312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	490c      	ldr	r1, [pc, #48]	; (8004334 <__NVIC_SetPriority+0x4c>)
 8004302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004306:	0112      	lsls	r2, r2, #4
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	440b      	add	r3, r1
 800430c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004310:	e00a      	b.n	8004328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	b2da      	uxtb	r2, r3
 8004316:	4908      	ldr	r1, [pc, #32]	; (8004338 <__NVIC_SetPriority+0x50>)
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	3b04      	subs	r3, #4
 8004320:	0112      	lsls	r2, r2, #4
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	440b      	add	r3, r1
 8004326:	761a      	strb	r2, [r3, #24]
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	e000e100 	.word	0xe000e100
 8004338:	e000ed00 	.word	0xe000ed00

0800433c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800433c:	b480      	push	{r7}
 800433e:	b089      	sub	sp, #36	; 0x24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f1c3 0307 	rsb	r3, r3, #7
 8004356:	2b04      	cmp	r3, #4
 8004358:	bf28      	it	cs
 800435a:	2304      	movcs	r3, #4
 800435c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3304      	adds	r3, #4
 8004362:	2b06      	cmp	r3, #6
 8004364:	d902      	bls.n	800436c <NVIC_EncodePriority+0x30>
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	3b03      	subs	r3, #3
 800436a:	e000      	b.n	800436e <NVIC_EncodePriority+0x32>
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004370:	f04f 32ff 	mov.w	r2, #4294967295
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43da      	mvns	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	401a      	ands	r2, r3
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004384:	f04f 31ff 	mov.w	r1, #4294967295
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	fa01 f303 	lsl.w	r3, r1, r3
 800438e:	43d9      	mvns	r1, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004394:	4313      	orrs	r3, r2
         );
}
 8004396:	4618      	mov	r0, r3
 8004398:	3724      	adds	r7, #36	; 0x24
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <LL_USART_IsEnabled>:
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <LL_USART_IsEnabled+0x18>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <LL_USART_IsEnabled+0x1a>
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <LL_USART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	621a      	str	r2, [r3, #32]
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	621a      	str	r2, [r3, #32]
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2204      	movs	r2, #4
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2208      	movs	r2, #8
 8004422:	621a      	str	r2, [r3, #32]
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f043 0220 	orr.w	r2, r3, #32
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	601a      	str	r2, [r3, #0]
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	601a      	str	r2, [r3, #0]
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	601a      	str	r2, [r3, #0]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a0:	2b80      	cmp	r3, #128	; 0x80
 80044a2:	d101      	bne.n	80044a8 <LL_USART_IsEnabledIT_TXE+0x18>
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <LL_USART_IsEnabledIT_TXE+0x1a>
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
	...

080044b8 <uart_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t uart_init(uart_config_t *uart_cfg)
{
 80044b8:	b590      	push	{r4, r7, lr}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af02      	add	r7, sp, #8
 80044be:	6078      	str	r0, [r7, #4]
    if (uart_cfg->uart_reg_base == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <uart_init+0x14>
    {
        return MOD_ERR_ARG;
 80044c8:	2302      	movs	r3, #2
 80044ca:	e04c      	b.n	8004566 <uart_init+0xae>
    }
    else if (!LL_USART_IsEnabled(uart_cfg->uart_reg_base))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff ff66 	bl	80043a2 <LL_USART_IsEnabled>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <uart_init+0x28>
    {
        return MOD_ERR_PERIPH;
 80044dc:	2308      	movs	r3, #8
 80044de:	e042      	b.n	8004566 <uart_init+0xae>
    }
    else
    {
        switch (uart_cfg->irq_num)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80044e6:	2b27      	cmp	r3, #39	; 0x27
 80044e8:	dc02      	bgt.n	80044f0 <uart_init+0x38>
 80044ea:	2b25      	cmp	r3, #37	; 0x25
 80044ec:	da03      	bge.n	80044f6 <uart_init+0x3e>
 80044ee:	e039      	b.n	8004564 <uart_init+0xac>
 80044f0:	3b34      	subs	r3, #52	; 0x34
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d836      	bhi.n	8004564 <uart_init+0xac>
        case USART1_IRQn:
        case USART2_IRQn:
        case USART3_IRQn:
        case UART4_IRQn:
        case UART5_IRQn:
            memset(&uart, 0, sizeof(uart));
 80044f6:	f240 420c 	movw	r2, #1036	; 0x40c
 80044fa:	2100      	movs	r1, #0
 80044fc:	481c      	ldr	r0, [pc, #112]	; (8004570 <uart_init+0xb8>)
 80044fe:	f006 fbfd 	bl	800acfc <memset>
            uart.irq_num = uart_cfg->irq_num;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8004508:	4b19      	ldr	r3, [pc, #100]	; (8004570 <uart_init+0xb8>)
 800450a:	711a      	strb	r2, [r3, #4]
            uart.uart_reg_base = uart_cfg->uart_reg_base;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a17      	ldr	r2, [pc, #92]	; (8004570 <uart_init+0xb8>)
 8004512:	6013      	str	r3, [r2, #0]
            mod_err_t err = cmd_register(&uart_client_info);
 8004514:	4817      	ldr	r0, [pc, #92]	; (8004574 <uart_init+0xbc>)
 8004516:	f7fc fe8f 	bl	8001238 <cmd_register>
 800451a:	4603      	mov	r3, r0
 800451c:	73fb      	strb	r3, [r7, #15]
            LOGI(TAG, "Initialized UART");
 800451e:	4b16      	ldr	r3, [pc, #88]	; (8004578 <uart_init+0xc0>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d01c      	beq.n	8004560 <uart_init+0xa8>
 8004526:	f000 fa39 	bl	800499c <HAL_GetTick>
 800452a:	60b8      	str	r0, [r7, #8]
 800452c:	4b13      	ldr	r3, [pc, #76]	; (800457c <uart_init+0xc4>)
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4a13      	ldr	r2, [pc, #76]	; (8004580 <uart_init+0xc8>)
 8004534:	fba2 2303 	umull	r2, r3, r2, r3
 8004538:	0999      	lsrs	r1, r3, #6
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	4b10      	ldr	r3, [pc, #64]	; (8004580 <uart_init+0xc8>)
 800453e:	fba3 4302 	umull	r4, r3, r3, r2
 8004542:	099b      	lsrs	r3, r3, #6
 8004544:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004548:	fb04 f303 	mul.w	r3, r4, r3
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	4a0b      	ldr	r2, [pc, #44]	; (800457c <uart_init+0xc4>)
 8004550:	6812      	ldr	r2, [r2, #0]
 8004552:	9201      	str	r2, [sp, #4]
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	460b      	mov	r3, r1
 8004558:	4a0a      	ldr	r2, [pc, #40]	; (8004584 <uart_init+0xcc>)
 800455a:	2103      	movs	r1, #3
 800455c:	f7fd fbee 	bl	8001d3c <log_printf>
            return err;
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	e000      	b.n	8004566 <uart_init+0xae>
        default:
            return MOD_ERR_ARG;
 8004564:	2302      	movs	r3, #2
        }
    }
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	bd90      	pop	{r4, r7, pc}
 800456e:	bf00      	nop
 8004570:	20000308 	.word	0x20000308
 8004574:	20000084 	.word	0x20000084
 8004578:	20000060 	.word	0x20000060
 800457c:	2000009c 	.word	0x2000009c
 8004580:	10624dd3 	.word	0x10624dd3
 8004584:	0800b7b8 	.word	0x0800b7b8

08004588 <uart_start>:

mod_err_t uart_start(void)
{
 8004588:	b590      	push	{r4, r7, lr}
 800458a:	b085      	sub	sp, #20
 800458c:	af02      	add	r7, sp, #8
    if (uart.uart_reg_base == NULL)
 800458e:	4b28      	ldr	r3, [pc, #160]	; (8004630 <uart_start+0xa8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d126      	bne.n	80045e4 <uart_start+0x5c>
    {
        LOGE(TAG, "UART not initialized");
 8004596:	4b27      	ldr	r3, [pc, #156]	; (8004634 <uart_start+0xac>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d020      	beq.n	80045e0 <uart_start+0x58>
 800459e:	4b26      	ldr	r3, [pc, #152]	; (8004638 <uart_start+0xb0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	dd1c      	ble.n	80045e0 <uart_start+0x58>
 80045a6:	f000 f9f9 	bl	800499c <HAL_GetTick>
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	4b23      	ldr	r3, [pc, #140]	; (800463c <uart_start+0xb4>)
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a23      	ldr	r2, [pc, #140]	; (8004640 <uart_start+0xb8>)
 80045b4:	fba2 2303 	umull	r2, r3, r2, r3
 80045b8:	0999      	lsrs	r1, r3, #6
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4b20      	ldr	r3, [pc, #128]	; (8004640 <uart_start+0xb8>)
 80045be:	fba3 4302 	umull	r4, r3, r3, r2
 80045c2:	099b      	lsrs	r3, r3, #6
 80045c4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80045c8:	fb04 f303 	mul.w	r3, r4, r3
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	4a1b      	ldr	r2, [pc, #108]	; (800463c <uart_start+0xb4>)
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	9201      	str	r2, [sp, #4]
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	460b      	mov	r3, r1
 80045d8:	4a1a      	ldr	r2, [pc, #104]	; (8004644 <uart_start+0xbc>)
 80045da:	2101      	movs	r1, #1
 80045dc:	f7fd fbae 	bl	8001d3c <log_printf>
        return MOD_ERR_NOT_INIT;
 80045e0:	2306      	movs	r3, #6
 80045e2:	e020      	b.n	8004626 <uart_start+0x9e>
    }

    LL_USART_EnableIT_TXE(uart.uart_reg_base);  // Generate interrupt whenever TXE flag is set.
 80045e4:	4b12      	ldr	r3, [pc, #72]	; (8004630 <uart_start+0xa8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff ff31 	bl	8004450 <LL_USART_EnableIT_TXE>
    LL_USART_EnableIT_RXNE(uart.uart_reg_base); // Generate interrupt whenever RXNE flag is set.
 80045ee:	4b10      	ldr	r3, [pc, #64]	; (8004630 <uart_start+0xa8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff ff1c 	bl	8004430 <LL_USART_EnableIT_RXNE>

    /* Interrupt priority must be set greater than or
     * equal to configMAX_SYSCALL_INTERRUPT_PRIORITY
     * in order for ISR to use FreeRTOS API.
     * See https://www.freertos.org/RTOS-Cortex-M3-M4.html */
    __NVIC_SetPriority(uart.irq_num, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
 80045f8:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <uart_start+0xa8>)
 80045fa:	f993 4004 	ldrsb.w	r4, [r3, #4]
 80045fe:	f7ff fe47 	bl	8004290 <__NVIC_GetPriorityGrouping>
 8004602:	4603      	mov	r3, r0
 8004604:	2200      	movs	r2, #0
 8004606:	2105      	movs	r1, #5
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fe97 	bl	800433c <NVIC_EncodePriority>
 800460e:	4603      	mov	r3, r0
 8004610:	4619      	mov	r1, r3
 8004612:	4620      	mov	r0, r4
 8004614:	f7ff fe68 	bl	80042e8 <__NVIC_SetPriority>

    __NVIC_EnableIRQ(uart.irq_num);
 8004618:	4b05      	ldr	r3, [pc, #20]	; (8004630 <uart_start+0xa8>)
 800461a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff fe44 	bl	80042ac <__NVIC_EnableIRQ>

    return MOD_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	bd90      	pop	{r4, r7, pc}
 800462e:	bf00      	nop
 8004630:	20000308 	.word	0x20000308
 8004634:	20000060 	.word	0x20000060
 8004638:	20000064 	.word	0x20000064
 800463c:	2000009c 	.word	0x2000009c
 8004640:	10624dd3 	.word	0x10624dd3
 8004644:	0800b7e8 	.word	0x0800b7e8

08004648 <uart_putc>:

mod_err_t uart_putc(char c)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	71fb      	strb	r3, [r7, #7]

    uint16_t next_put_idx = (uart.tx_buf_put_idx + 1) % UART_TX_BUF_SIZE;
 8004652:	4b23      	ldr	r3, [pc, #140]	; (80046e0 <uart_putc+0x98>)
 8004654:	891b      	ldrh	r3, [r3, #8]
 8004656:	3301      	adds	r3, #1
 8004658:	425a      	negs	r2, r3
 800465a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800465e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004662:	bf58      	it	pl
 8004664:	4253      	negpl	r3, r2
 8004666:	81fb      	strh	r3, [r7, #14]

    /* Tx circular buffer is full. */
    if (next_put_idx == uart.tx_buf_get_idx)
 8004668:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <uart_putc+0x98>)
 800466a:	88db      	ldrh	r3, [r3, #6]
 800466c:	89fa      	ldrh	r2, [r7, #14]
 800466e:	429a      	cmp	r2, r3
 8004670:	d111      	bne.n	8004696 <uart_putc+0x4e>
    {
        INC_SAT_U16(uart_pms[CNT_TX_BUF_OVERRUN]);
 8004672:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <uart_putc+0x9c>)
 8004674:	891a      	ldrh	r2, [r3, #8]
 8004676:	4b1b      	ldr	r3, [pc, #108]	; (80046e4 <uart_putc+0x9c>)
 8004678:	891b      	ldrh	r3, [r3, #8]
 800467a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800467e:	428b      	cmp	r3, r1
 8004680:	bf14      	ite	ne
 8004682:	2301      	movne	r3, #1
 8004684:	2300      	moveq	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	b29b      	uxth	r3, r3
 800468a:	4413      	add	r3, r2
 800468c:	b29a      	uxth	r2, r3
 800468e:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <uart_putc+0x9c>)
 8004690:	811a      	strh	r2, [r3, #8]
        return MOD_ERR_BUF_OVERRUN;
 8004692:	2305      	movs	r3, #5
 8004694:	e01f      	b.n	80046d6 <uart_putc+0x8e>
    }

    /* Place char in buffer */
    uart.tx_buf[uart.tx_buf_put_idx] = c;
 8004696:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <uart_putc+0x98>)
 8004698:	891b      	ldrh	r3, [r3, #8]
 800469a:	461a      	mov	r2, r3
 800469c:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <uart_putc+0x98>)
 800469e:	4413      	add	r3, r2
 80046a0:	79fa      	ldrb	r2, [r7, #7]
 80046a2:	729a      	strb	r2, [r3, #10]
    uart.tx_buf_put_idx = next_put_idx;
 80046a4:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <uart_putc+0x98>)
 80046a6:	89fb      	ldrh	r3, [r7, #14]
 80046a8:	8113      	strh	r3, [r2, #8]

    // Ensure TXE interrupt is enabled.
    if (uart.uart_reg_base != NULL && !LL_USART_IsEnabledIT_TXE(uart.uart_reg_base))
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <uart_putc+0x98>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d010      	beq.n	80046d4 <uart_putc+0x8c>
 80046b2:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <uart_putc+0x98>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff feea 	bl	8004490 <LL_USART_IsEnabledIT_TXE>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d108      	bne.n	80046d4 <uart_putc+0x8c>
  __ASM volatile ("cpsid i" : : : "memory");
 80046c2:	b672      	cpsid	i
}
 80046c4:	bf00      	nop
    {
        __disable_irq();
        LL_USART_EnableIT_TXE(uart.uart_reg_base);
 80046c6:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <uart_putc+0x98>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fec0 	bl	8004450 <LL_USART_EnableIT_TXE>
  __ASM volatile ("cpsie i" : : : "memory");
 80046d0:	b662      	cpsie	i
}
 80046d2:	bf00      	nop
        __enable_irq();
    }

    return MOD_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20000308 	.word	0x20000308
 80046e4:	20000714 	.word	0x20000714

080046e8 <USART1_IRQHandler>:
////////////////////////////////////////////////////////////////////////////////
// Interrupt handlers
////////////////////////////////////////////////////////////////////////////////

void USART1_IRQHandler(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
    UART_ISR();
 80046ec:	f000 f81a 	bl	8004724 <UART_ISR>
}
 80046f0:	bf00      	nop
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
    UART_ISR();
 80046f8:	f000 f814 	bl	8004724 <UART_ISR>
}
 80046fc:	bf00      	nop
 80046fe:	bd80      	pop	{r7, pc}

08004700 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
    UART_ISR();
 8004704:	f000 f80e 	bl	8004724 <UART_ISR>
}
 8004708:	bf00      	nop
 800470a:	bd80      	pop	{r7, pc}

0800470c <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
    UART_ISR();
 8004710:	f000 f808 	bl	8004724 <UART_ISR>
}
 8004714:	bf00      	nop
 8004716:	bd80      	pop	{r7, pc}

08004718 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
    UART_ISR();
 800471c:	f000 f802 	bl	8004724 <UART_ISR>
}
 8004720:	bf00      	nop
 8004722:	bd80      	pop	{r7, pc}

08004724 <UART_ISR>:
////////////////////////////////////////////////////////////////////////////////
// Private (static) function definitions
////////////////////////////////////////////////////////////////////////////////

static void UART_ISR(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
    /* Read interrupt status register. */
    uint32_t status_reg = uart.uart_reg_base->ISR;
 800472a:	4b41      	ldr	r3, [pc, #260]	; (8004830 <UART_ISR+0x10c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	607b      	str	r3, [r7, #4]

    /* Service interrupt flags. */
    if (status_reg & USART_ISR_RXNE_Msk)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <UART_ISR+0x1c>
    {
        read_rdr();
 800473c:	f000 f87c 	bl	8004838 <read_rdr>
    }
    if (status_reg & USART_ISR_TXE_Msk)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <UART_ISR+0x2a>
    {
        write_tdr();
 800474a:	f000 f89f 	bl	800488c <write_tdr>
    }

    /* Check error flags. */
    if (status_reg & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE | USART_ISR_PE))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	2b00      	cmp	r3, #0
 8004756:	d067      	beq.n	8004828 <UART_ISR+0x104>
    {
        if (status_reg & LL_USART_ISR_ORE)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d014      	beq.n	800478c <UART_ISR+0x68>
        {   // An overrun error occurs if a character is received and RXNE has not been reset.
            // The RDR register content is not lost but the shift register is overwritten by incoming data.
            INC_SAT_U16(uart_pms[CNT_RX_UART_ORE]);
 8004762:	4b34      	ldr	r3, [pc, #208]	; (8004834 <UART_ISR+0x110>)
 8004764:	881a      	ldrh	r2, [r3, #0]
 8004766:	4b33      	ldr	r3, [pc, #204]	; (8004834 <UART_ISR+0x110>)
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800476e:	428b      	cmp	r3, r1
 8004770:	bf14      	ite	ne
 8004772:	2301      	movne	r3, #1
 8004774:	2300      	moveq	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	b29b      	uxth	r3, r3
 800477a:	4413      	add	r3, r2
 800477c:	b29a      	uxth	r2, r3
 800477e:	4b2d      	ldr	r3, [pc, #180]	; (8004834 <UART_ISR+0x110>)
 8004780:	801a      	strh	r2, [r3, #0]
            LL_USART_ClearFlag_ORE(uart.uart_reg_base);
 8004782:	4b2b      	ldr	r3, [pc, #172]	; (8004830 <UART_ISR+0x10c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fe45 	bl	8004416 <LL_USART_ClearFlag_ORE>
        }
        if (status_reg & LL_USART_ISR_NE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	d014      	beq.n	80047c0 <UART_ISR+0x9c>
        {
            INC_SAT_U16(uart_pms[CNT_RX_UART_NE]);
 8004796:	4b27      	ldr	r3, [pc, #156]	; (8004834 <UART_ISR+0x110>)
 8004798:	885a      	ldrh	r2, [r3, #2]
 800479a:	4b26      	ldr	r3, [pc, #152]	; (8004834 <UART_ISR+0x110>)
 800479c:	885b      	ldrh	r3, [r3, #2]
 800479e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047a2:	428b      	cmp	r3, r1
 80047a4:	bf14      	ite	ne
 80047a6:	2301      	movne	r3, #1
 80047a8:	2300      	moveq	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	4413      	add	r3, r2
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	4b20      	ldr	r3, [pc, #128]	; (8004834 <UART_ISR+0x110>)
 80047b4:	805a      	strh	r2, [r3, #2]
            LL_USART_ClearFlag_NE(uart.uart_reg_base);
 80047b6:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <UART_ISR+0x10c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fe1e 	bl	80043fc <LL_USART_ClearFlag_NE>
        }
        if (status_reg & LL_USART_ISR_FE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d014      	beq.n	80047f4 <UART_ISR+0xd0>
        {
            INC_SAT_U16(uart_pms[CNT_RX_UART_FE]);
 80047ca:	4b1a      	ldr	r3, [pc, #104]	; (8004834 <UART_ISR+0x110>)
 80047cc:	889a      	ldrh	r2, [r3, #4]
 80047ce:	4b19      	ldr	r3, [pc, #100]	; (8004834 <UART_ISR+0x110>)
 80047d0:	889b      	ldrh	r3, [r3, #4]
 80047d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047d6:	428b      	cmp	r3, r1
 80047d8:	bf14      	ite	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	2300      	moveq	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	4413      	add	r3, r2
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	4b13      	ldr	r3, [pc, #76]	; (8004834 <UART_ISR+0x110>)
 80047e8:	809a      	strh	r2, [r3, #4]
            LL_USART_ClearFlag_FE(uart.uart_reg_base);
 80047ea:	4b11      	ldr	r3, [pc, #68]	; (8004830 <UART_ISR+0x10c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fdf7 	bl	80043e2 <LL_USART_ClearFlag_FE>
        }
        if (status_reg & LL_USART_ISR_PE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d014      	beq.n	8004828 <UART_ISR+0x104>
        {
            INC_SAT_U16(uart_pms[CNT_RX_UART_PE]);
 80047fe:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <UART_ISR+0x110>)
 8004800:	88da      	ldrh	r2, [r3, #6]
 8004802:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <UART_ISR+0x110>)
 8004804:	88db      	ldrh	r3, [r3, #6]
 8004806:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800480a:	428b      	cmp	r3, r1
 800480c:	bf14      	ite	ne
 800480e:	2301      	movne	r3, #1
 8004810:	2300      	moveq	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	b29b      	uxth	r3, r3
 8004816:	4413      	add	r3, r2
 8004818:	b29a      	uxth	r2, r3
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <UART_ISR+0x110>)
 800481c:	80da      	strh	r2, [r3, #6]
            LL_USART_ClearFlag_PE(uart.uart_reg_base);
 800481e:	4b04      	ldr	r3, [pc, #16]	; (8004830 <UART_ISR+0x10c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff fdd0 	bl	80043c8 <LL_USART_ClearFlag_PE>
        }
    }
}
 8004828:	bf00      	nop
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20000308 	.word	0x20000308
 8004834:	20000714 	.word	0x20000714

08004838 <read_rdr>:

/**
 * @brief Read character from receive data register (RDR) and send to console message queue.
 */
static inline void read_rdr(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
    char rx_char = uart.uart_reg_base->RDR & 0xFFU; // Clears RXNE flag.
 800483e:	4b11      	ldr	r3, [pc, #68]	; (8004884 <read_rdr+0x4c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004844:	b29b      	uxth	r3, r3
 8004846:	71fb      	strb	r3, [r7, #7]
    mod_err_t err = console_post(rx_char);
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	4618      	mov	r0, r3
 800484c:	f7fd f908 	bl	8001a60 <console_post>
 8004850:	4603      	mov	r3, r0
 8004852:	71bb      	strb	r3, [r7, #6]
    if (err == MOD_ERR_TIMEOUT)
 8004854:	79bb      	ldrb	r3, [r7, #6]
 8004856:	2b09      	cmp	r3, #9
 8004858:	d10f      	bne.n	800487a <read_rdr+0x42>
    {
        INC_SAT_U16(uart_pms[CNT_RX_BUF_OVERRUN]);
 800485a:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <read_rdr+0x50>)
 800485c:	895a      	ldrh	r2, [r3, #10]
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <read_rdr+0x50>)
 8004860:	895b      	ldrh	r3, [r3, #10]
 8004862:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004866:	428b      	cmp	r3, r1
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	b29b      	uxth	r3, r3
 8004872:	4413      	add	r3, r2
 8004874:	b29a      	uxth	r2, r3
 8004876:	4b04      	ldr	r3, [pc, #16]	; (8004888 <read_rdr+0x50>)
 8004878:	815a      	strh	r2, [r3, #10]
    }
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000308 	.word	0x20000308
 8004888:	20000714 	.word	0x20000714

0800488c <write_tdr>:

/**
 * @brief Write character from transmit buffer to transmit data register (TDR).
 */
static inline void write_tdr(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
    if (uart.tx_buf_get_idx == uart.tx_buf_put_idx)
 8004890:	4b12      	ldr	r3, [pc, #72]	; (80048dc <write_tdr+0x50>)
 8004892:	88da      	ldrh	r2, [r3, #6]
 8004894:	4b11      	ldr	r3, [pc, #68]	; (80048dc <write_tdr+0x50>)
 8004896:	891b      	ldrh	r3, [r3, #8]
 8004898:	429a      	cmp	r2, r3
 800489a:	d105      	bne.n	80048a8 <write_tdr+0x1c>
    {
        /* Nothing to transmit, disable TXE flag from generating an interrupt. */
        LL_USART_DisableIT_TXE(uart.uart_reg_base);
 800489c:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <write_tdr+0x50>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fde5 	bl	8004470 <LL_USART_DisableIT_TXE>
    else
    {
        uart.uart_reg_base->TDR = uart.tx_buf[uart.tx_buf_get_idx]; // Clears TXE flag.
        uart.tx_buf_get_idx = (uart.tx_buf_get_idx + 1) % UART_TX_BUF_SIZE;
    }
}
 80048a6:	e016      	b.n	80048d6 <write_tdr+0x4a>
        uart.uart_reg_base->TDR = uart.tx_buf[uart.tx_buf_get_idx]; // Clears TXE flag.
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <write_tdr+0x50>)
 80048aa:	88db      	ldrh	r3, [r3, #6]
 80048ac:	461a      	mov	r2, r3
 80048ae:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <write_tdr+0x50>)
 80048b0:	4413      	add	r3, r2
 80048b2:	7a9a      	ldrb	r2, [r3, #10]
 80048b4:	4b09      	ldr	r3, [pc, #36]	; (80048dc <write_tdr+0x50>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	b292      	uxth	r2, r2
 80048ba:	851a      	strh	r2, [r3, #40]	; 0x28
        uart.tx_buf_get_idx = (uart.tx_buf_get_idx + 1) % UART_TX_BUF_SIZE;
 80048bc:	4b07      	ldr	r3, [pc, #28]	; (80048dc <write_tdr+0x50>)
 80048be:	88db      	ldrh	r3, [r3, #6]
 80048c0:	3301      	adds	r3, #1
 80048c2:	425a      	negs	r2, r3
 80048c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048c8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80048cc:	bf58      	it	pl
 80048ce:	4253      	negpl	r3, r2
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	4b02      	ldr	r3, [pc, #8]	; (80048dc <write_tdr+0x50>)
 80048d4:	80da      	strh	r2, [r3, #6]
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000308 	.word	0x20000308

080048e0 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 80048e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004918 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80048e4:	f7ff fca2 	bl	800422c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80048e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80048ea:	e003      	b.n	80048f4 <LoopCopyDataInit>

080048ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80048ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80048f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80048f2:	3104      	adds	r1, #4

080048f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80048f4:	480a      	ldr	r0, [pc, #40]	; (8004920 <LoopForever+0xa>)
	ldr	r3, =_edata
 80048f6:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <LoopForever+0xe>)
	adds	r2, r0, r1
 80048f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80048fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80048fc:	d3f6      	bcc.n	80048ec <CopyDataInit>
	ldr	r2, =_sbss
 80048fe:	4a0a      	ldr	r2, [pc, #40]	; (8004928 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004900:	e002      	b.n	8004908 <LoopFillZerobss>

08004902 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004902:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004904:	f842 3b04 	str.w	r3, [r2], #4

08004908 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004908:	4b08      	ldr	r3, [pc, #32]	; (800492c <LoopForever+0x16>)
	cmp	r2, r3
 800490a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800490c:	d3f9      	bcc.n	8004902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800490e:	f006 f9b3 	bl	800ac78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004912:	f7fd fdd3 	bl	80024bc <main>

08004916 <LoopForever>:

LoopForever:
    b LoopForever
 8004916:	e7fe      	b.n	8004916 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004918:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800491c:	0800ba54 	.word	0x0800ba54
	ldr	r0, =_sdata
 8004920:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004924:	20000110 	.word	0x20000110
	ldr	r2, =_sbss
 8004928:	20000110 	.word	0x20000110
	ldr	r3, = _ebss
 800492c:	20003bf4 	.word	0x20003bf4

08004930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004930:	e7fe      	b.n	8004930 <ADC1_2_IRQHandler>
	...

08004934 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800493e:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <HAL_Init+0x3c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a0b      	ldr	r2, [pc, #44]	; (8004970 <HAL_Init+0x3c>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004948:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800494a:	2003      	movs	r0, #3
 800494c:	f000 f8df 	bl	8004b0e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004950:	2000      	movs	r0, #0
 8004952:	f7ff fbbf 	bl	80040d4 <HAL_InitTick>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	71fb      	strb	r3, [r7, #7]
 8004960:	e001      	b.n	8004966 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004962:	f7ff fb8f 	bl	8004084 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004966:	79fb      	ldrb	r3, [r7, #7]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40022000 	.word	0x40022000

08004974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004978:	4b06      	ldr	r3, [pc, #24]	; (8004994 <HAL_IncTick+0x20>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <HAL_IncTick+0x24>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4413      	add	r3, r2
 8004984:	4a04      	ldr	r2, [pc, #16]	; (8004998 <HAL_IncTick+0x24>)
 8004986:	6013      	str	r3, [r2, #0]
}
 8004988:	bf00      	nop
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	200000a4 	.word	0x200000a4
 8004998:	20003ba0 	.word	0x20003ba0

0800499c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  return uwTick;
 80049a0:	4b03      	ldr	r3, [pc, #12]	; (80049b0 <HAL_GetTick+0x14>)
 80049a2:	681b      	ldr	r3, [r3, #0]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	20003ba0 	.word	0x20003ba0

080049b4 <__NVIC_SetPriorityGrouping>:
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049c4:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <__NVIC_SetPriorityGrouping+0x44>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049d0:	4013      	ands	r3, r2
 80049d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049e6:	4a04      	ldr	r2, [pc, #16]	; (80049f8 <__NVIC_SetPriorityGrouping+0x44>)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	60d3      	str	r3, [r2, #12]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	e000ed00 	.word	0xe000ed00

080049fc <__NVIC_GetPriorityGrouping>:
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a00:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <__NVIC_GetPriorityGrouping+0x18>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	0a1b      	lsrs	r3, r3, #8
 8004a06:	f003 0307 	and.w	r3, r3, #7
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	e000ed00 	.word	0xe000ed00

08004a18 <__NVIC_EnableIRQ>:
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	db0b      	blt.n	8004a42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	f003 021f 	and.w	r2, r3, #31
 8004a30:	4907      	ldr	r1, [pc, #28]	; (8004a50 <__NVIC_EnableIRQ+0x38>)
 8004a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	2001      	movs	r0, #1
 8004a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	e000e100 	.word	0xe000e100

08004a54 <__NVIC_SetPriority>:
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	6039      	str	r1, [r7, #0]
 8004a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	db0a      	blt.n	8004a7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	490c      	ldr	r1, [pc, #48]	; (8004aa0 <__NVIC_SetPriority+0x4c>)
 8004a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a72:	0112      	lsls	r2, r2, #4
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	440b      	add	r3, r1
 8004a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a7c:	e00a      	b.n	8004a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	4908      	ldr	r1, [pc, #32]	; (8004aa4 <__NVIC_SetPriority+0x50>)
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	3b04      	subs	r3, #4
 8004a8c:	0112      	lsls	r2, r2, #4
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	440b      	add	r3, r1
 8004a92:	761a      	strb	r2, [r3, #24]
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	e000e100 	.word	0xe000e100
 8004aa4:	e000ed00 	.word	0xe000ed00

08004aa8 <NVIC_EncodePriority>:
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b089      	sub	sp, #36	; 0x24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f1c3 0307 	rsb	r3, r3, #7
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	bf28      	it	cs
 8004ac6:	2304      	movcs	r3, #4
 8004ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	3304      	adds	r3, #4
 8004ace:	2b06      	cmp	r3, #6
 8004ad0:	d902      	bls.n	8004ad8 <NVIC_EncodePriority+0x30>
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	3b03      	subs	r3, #3
 8004ad6:	e000      	b.n	8004ada <NVIC_EncodePriority+0x32>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004adc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43da      	mvns	r2, r3
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	401a      	ands	r2, r3
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004af0:	f04f 31ff 	mov.w	r1, #4294967295
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	fa01 f303 	lsl.w	r3, r1, r3
 8004afa:	43d9      	mvns	r1, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b00:	4313      	orrs	r3, r2
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3724      	adds	r7, #36	; 0x24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ff4c 	bl	80049b4 <__NVIC_SetPriorityGrouping>
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b36:	f7ff ff61 	bl	80049fc <__NVIC_GetPriorityGrouping>
 8004b3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	6978      	ldr	r0, [r7, #20]
 8004b42:	f7ff ffb1 	bl	8004aa8 <NVIC_EncodePriority>
 8004b46:	4602      	mov	r2, r0
 8004b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff ff80 	bl	8004a54 <__NVIC_SetPriority>
}
 8004b54:	bf00      	nop
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff ff54 	bl	8004a18 <__NVIC_EnableIRQ>
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b86:	e17f      	b.n	8004e88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	fa01 f303 	lsl.w	r3, r1, r3
 8004b94:	4013      	ands	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 8171 	beq.w	8004e82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d00b      	beq.n	8004bc0 <HAL_GPIO_Init+0x48>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d007      	beq.n	8004bc0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bb4:	2b11      	cmp	r3, #17
 8004bb6:	d003      	beq.n	8004bc0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b12      	cmp	r3, #18
 8004bbe:	d130      	bne.n	8004c22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	2203      	movs	r2, #3
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4013      	ands	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	f003 0201 	and.w	r2, r3, #1
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d118      	bne.n	8004c60 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004c34:	2201      	movs	r2, #1
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4013      	ands	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	08db      	lsrs	r3, r3, #3
 8004c4a:	f003 0201 	and.w	r2, r3, #1
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	2203      	movs	r2, #3
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	43db      	mvns	r3, r3
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4013      	ands	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d003      	beq.n	8004ca0 <HAL_GPIO_Init+0x128>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b12      	cmp	r3, #18
 8004c9e:	d123      	bne.n	8004ce8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	08da      	lsrs	r2, r3, #3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3208      	adds	r2, #8
 8004ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	220f      	movs	r2, #15
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	08da      	lsrs	r2, r3, #3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3208      	adds	r2, #8
 8004ce2:	6939      	ldr	r1, [r7, #16]
 8004ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 0203 	and.w	r2, r3, #3
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80ac 	beq.w	8004e82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d2a:	4b5f      	ldr	r3, [pc, #380]	; (8004ea8 <HAL_GPIO_Init+0x330>)
 8004d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2e:	4a5e      	ldr	r2, [pc, #376]	; (8004ea8 <HAL_GPIO_Init+0x330>)
 8004d30:	f043 0301 	orr.w	r3, r3, #1
 8004d34:	6613      	str	r3, [r2, #96]	; 0x60
 8004d36:	4b5c      	ldr	r3, [pc, #368]	; (8004ea8 <HAL_GPIO_Init+0x330>)
 8004d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d42:	4a5a      	ldr	r2, [pc, #360]	; (8004eac <HAL_GPIO_Init+0x334>)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	089b      	lsrs	r3, r3, #2
 8004d48:	3302      	adds	r3, #2
 8004d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	220f      	movs	r2, #15
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	43db      	mvns	r3, r3
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4013      	ands	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d6c:	d025      	beq.n	8004dba <HAL_GPIO_Init+0x242>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a4f      	ldr	r2, [pc, #316]	; (8004eb0 <HAL_GPIO_Init+0x338>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01f      	beq.n	8004db6 <HAL_GPIO_Init+0x23e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a4e      	ldr	r2, [pc, #312]	; (8004eb4 <HAL_GPIO_Init+0x33c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d019      	beq.n	8004db2 <HAL_GPIO_Init+0x23a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a4d      	ldr	r2, [pc, #308]	; (8004eb8 <HAL_GPIO_Init+0x340>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d013      	beq.n	8004dae <HAL_GPIO_Init+0x236>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a4c      	ldr	r2, [pc, #304]	; (8004ebc <HAL_GPIO_Init+0x344>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00d      	beq.n	8004daa <HAL_GPIO_Init+0x232>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a4b      	ldr	r2, [pc, #300]	; (8004ec0 <HAL_GPIO_Init+0x348>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <HAL_GPIO_Init+0x22e>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a4a      	ldr	r2, [pc, #296]	; (8004ec4 <HAL_GPIO_Init+0x34c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d101      	bne.n	8004da2 <HAL_GPIO_Init+0x22a>
 8004d9e:	2306      	movs	r3, #6
 8004da0:	e00c      	b.n	8004dbc <HAL_GPIO_Init+0x244>
 8004da2:	2307      	movs	r3, #7
 8004da4:	e00a      	b.n	8004dbc <HAL_GPIO_Init+0x244>
 8004da6:	2305      	movs	r3, #5
 8004da8:	e008      	b.n	8004dbc <HAL_GPIO_Init+0x244>
 8004daa:	2304      	movs	r3, #4
 8004dac:	e006      	b.n	8004dbc <HAL_GPIO_Init+0x244>
 8004dae:	2303      	movs	r3, #3
 8004db0:	e004      	b.n	8004dbc <HAL_GPIO_Init+0x244>
 8004db2:	2302      	movs	r3, #2
 8004db4:	e002      	b.n	8004dbc <HAL_GPIO_Init+0x244>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <HAL_GPIO_Init+0x244>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	f002 0203 	and.w	r2, r2, #3
 8004dc2:	0092      	lsls	r2, r2, #2
 8004dc4:	4093      	lsls	r3, r2
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004dcc:	4937      	ldr	r1, [pc, #220]	; (8004eac <HAL_GPIO_Init+0x334>)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	089b      	lsrs	r3, r3, #2
 8004dd2:	3302      	adds	r3, #2
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004dda:	4b3b      	ldr	r3, [pc, #236]	; (8004ec8 <HAL_GPIO_Init+0x350>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	43db      	mvns	r3, r3
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4013      	ands	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004dfe:	4a32      	ldr	r2, [pc, #200]	; (8004ec8 <HAL_GPIO_Init+0x350>)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004e04:	4b30      	ldr	r3, [pc, #192]	; (8004ec8 <HAL_GPIO_Init+0x350>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4013      	ands	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e28:	4a27      	ldr	r2, [pc, #156]	; (8004ec8 <HAL_GPIO_Init+0x350>)
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e2e:	4b26      	ldr	r3, [pc, #152]	; (8004ec8 <HAL_GPIO_Init+0x350>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	43db      	mvns	r3, r3
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e52:	4a1d      	ldr	r2, [pc, #116]	; (8004ec8 <HAL_GPIO_Init+0x350>)
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e58:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <HAL_GPIO_Init+0x350>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	43db      	mvns	r3, r3
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4013      	ands	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e7c:	4a12      	ldr	r2, [pc, #72]	; (8004ec8 <HAL_GPIO_Init+0x350>)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	3301      	adds	r3, #1
 8004e86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f47f ae78 	bne.w	8004b88 <HAL_GPIO_Init+0x10>
  }
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	40010000 	.word	0x40010000
 8004eb0:	48000400 	.word	0x48000400
 8004eb4:	48000800 	.word	0x48000800
 8004eb8:	48000c00 	.word	0x48000c00
 8004ebc:	48001000 	.word	0x48001000
 8004ec0:	48001400 	.word	0x48001400
 8004ec4:	48001800 	.word	0x48001800
 8004ec8:	40010400 	.word	0x40010400

08004ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	807b      	strh	r3, [r7, #2]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004edc:	787b      	ldrb	r3, [r7, #1]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ee2:	887a      	ldrh	r2, [r7, #2]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ee8:	e002      	b.n	8004ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004eea:	887a      	ldrh	r2, [r7, #2]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004f00:	4b04      	ldr	r3, [pc, #16]	; (8004f14 <HAL_PWREx_GetVoltageRange+0x18>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40007000 	.word	0x40007000

08004f18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f26:	d130      	bne.n	8004f8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f28:	4b23      	ldr	r3, [pc, #140]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f34:	d038      	beq.n	8004fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f36:	4b20      	ldr	r3, [pc, #128]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f3e:	4a1e      	ldr	r2, [pc, #120]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f46:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2232      	movs	r2, #50	; 0x32
 8004f4c:	fb02 f303 	mul.w	r3, r2, r3
 8004f50:	4a1b      	ldr	r2, [pc, #108]	; (8004fc0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	0c9b      	lsrs	r3, r3, #18
 8004f58:	3301      	adds	r3, #1
 8004f5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f5c:	e002      	b.n	8004f64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f64:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f70:	d102      	bne.n	8004f78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f2      	bne.n	8004f5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f78:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f84:	d110      	bne.n	8004fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e00f      	b.n	8004faa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f96:	d007      	beq.n	8004fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f98:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fa0:	4a05      	ldr	r2, [pc, #20]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fa6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40007000 	.word	0x40007000
 8004fbc:	20000068 	.word	0x20000068
 8004fc0:	431bde83 	.word	0x431bde83

08004fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e3d4      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fd6:	4ba1      	ldr	r3, [pc, #644]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 030c 	and.w	r3, r3, #12
 8004fde:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fe0:	4b9e      	ldr	r3, [pc, #632]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0303 	and.w	r3, r3, #3
 8004fe8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0310 	and.w	r3, r3, #16
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 80e4 	beq.w	80051c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <HAL_RCC_OscConfig+0x4a>
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2b0c      	cmp	r3, #12
 8005002:	f040 808b 	bne.w	800511c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b01      	cmp	r3, #1
 800500a:	f040 8087 	bne.w	800511c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800500e:	4b93      	ldr	r3, [pc, #588]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d005      	beq.n	8005026 <HAL_RCC_OscConfig+0x62>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e3ac      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1a      	ldr	r2, [r3, #32]
 800502a:	4b8c      	ldr	r3, [pc, #560]	; (800525c <HAL_RCC_OscConfig+0x298>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d004      	beq.n	8005040 <HAL_RCC_OscConfig+0x7c>
 8005036:	4b89      	ldr	r3, [pc, #548]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800503e:	e005      	b.n	800504c <HAL_RCC_OscConfig+0x88>
 8005040:	4b86      	ldr	r3, [pc, #536]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800504c:	4293      	cmp	r3, r2
 800504e:	d223      	bcs.n	8005098 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fd5d 	bl	8005b14 <RCC_SetFlashLatencyFromMSIRange>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e38d      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005064:	4b7d      	ldr	r3, [pc, #500]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a7c      	ldr	r2, [pc, #496]	; (800525c <HAL_RCC_OscConfig+0x298>)
 800506a:	f043 0308 	orr.w	r3, r3, #8
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	4b7a      	ldr	r3, [pc, #488]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	4977      	ldr	r1, [pc, #476]	; (800525c <HAL_RCC_OscConfig+0x298>)
 800507e:	4313      	orrs	r3, r2
 8005080:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005082:	4b76      	ldr	r3, [pc, #472]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	4972      	ldr	r1, [pc, #456]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005092:	4313      	orrs	r3, r2
 8005094:	604b      	str	r3, [r1, #4]
 8005096:	e025      	b.n	80050e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005098:	4b70      	ldr	r3, [pc, #448]	; (800525c <HAL_RCC_OscConfig+0x298>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a6f      	ldr	r2, [pc, #444]	; (800525c <HAL_RCC_OscConfig+0x298>)
 800509e:	f043 0308 	orr.w	r3, r3, #8
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	4b6d      	ldr	r3, [pc, #436]	; (800525c <HAL_RCC_OscConfig+0x298>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	496a      	ldr	r1, [pc, #424]	; (800525c <HAL_RCC_OscConfig+0x298>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050b6:	4b69      	ldr	r3, [pc, #420]	; (800525c <HAL_RCC_OscConfig+0x298>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	021b      	lsls	r3, r3, #8
 80050c4:	4965      	ldr	r1, [pc, #404]	; (800525c <HAL_RCC_OscConfig+0x298>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d109      	bne.n	80050e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fd1d 	bl	8005b14 <RCC_SetFlashLatencyFromMSIRange>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e34d      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050e4:	f000 fc36 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 80050e8:	4602      	mov	r2, r0
 80050ea:	4b5c      	ldr	r3, [pc, #368]	; (800525c <HAL_RCC_OscConfig+0x298>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	091b      	lsrs	r3, r3, #4
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	495a      	ldr	r1, [pc, #360]	; (8005260 <HAL_RCC_OscConfig+0x29c>)
 80050f6:	5ccb      	ldrb	r3, [r1, r3]
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005100:	4a58      	ldr	r2, [pc, #352]	; (8005264 <HAL_RCC_OscConfig+0x2a0>)
 8005102:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005104:	4b58      	ldr	r3, [pc, #352]	; (8005268 <HAL_RCC_OscConfig+0x2a4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f7fe ffe3 	bl	80040d4 <HAL_InitTick>
 800510e:	4603      	mov	r3, r0
 8005110:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005112:	7bfb      	ldrb	r3, [r7, #15]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d052      	beq.n	80051be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	e331      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d032      	beq.n	800518a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005124:	4b4d      	ldr	r3, [pc, #308]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a4c      	ldr	r2, [pc, #304]	; (800525c <HAL_RCC_OscConfig+0x298>)
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005130:	f7ff fc34 	bl	800499c <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005138:	f7ff fc30 	bl	800499c <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e31a      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800514a:	4b44      	ldr	r3, [pc, #272]	; (800525c <HAL_RCC_OscConfig+0x298>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005156:	4b41      	ldr	r3, [pc, #260]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a40      	ldr	r2, [pc, #256]	; (800525c <HAL_RCC_OscConfig+0x298>)
 800515c:	f043 0308 	orr.w	r3, r3, #8
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	4b3e      	ldr	r3, [pc, #248]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	493b      	ldr	r1, [pc, #236]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005170:	4313      	orrs	r3, r2
 8005172:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005174:	4b39      	ldr	r3, [pc, #228]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	4936      	ldr	r1, [pc, #216]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005184:	4313      	orrs	r3, r2
 8005186:	604b      	str	r3, [r1, #4]
 8005188:	e01a      	b.n	80051c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800518a:	4b34      	ldr	r3, [pc, #208]	; (800525c <HAL_RCC_OscConfig+0x298>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a33      	ldr	r2, [pc, #204]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005196:	f7ff fc01 	bl	800499c <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800519e:	f7ff fbfd 	bl	800499c <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e2e7      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051b0:	4b2a      	ldr	r3, [pc, #168]	; (800525c <HAL_RCC_OscConfig+0x298>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f0      	bne.n	800519e <HAL_RCC_OscConfig+0x1da>
 80051bc:	e000      	b.n	80051c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d074      	beq.n	80052b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d005      	beq.n	80051de <HAL_RCC_OscConfig+0x21a>
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b0c      	cmp	r3, #12
 80051d6:	d10e      	bne.n	80051f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d10b      	bne.n	80051f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051de:	4b1f      	ldr	r3, [pc, #124]	; (800525c <HAL_RCC_OscConfig+0x298>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d064      	beq.n	80052b4 <HAL_RCC_OscConfig+0x2f0>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d160      	bne.n	80052b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e2c4      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fe:	d106      	bne.n	800520e <HAL_RCC_OscConfig+0x24a>
 8005200:	4b16      	ldr	r3, [pc, #88]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a15      	ldr	r2, [pc, #84]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	e01d      	b.n	800524a <HAL_RCC_OscConfig+0x286>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005216:	d10c      	bne.n	8005232 <HAL_RCC_OscConfig+0x26e>
 8005218:	4b10      	ldr	r3, [pc, #64]	; (800525c <HAL_RCC_OscConfig+0x298>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a0f      	ldr	r2, [pc, #60]	; (800525c <HAL_RCC_OscConfig+0x298>)
 800521e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	4b0d      	ldr	r3, [pc, #52]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a0c      	ldr	r2, [pc, #48]	; (800525c <HAL_RCC_OscConfig+0x298>)
 800522a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	e00b      	b.n	800524a <HAL_RCC_OscConfig+0x286>
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a09      	ldr	r2, [pc, #36]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	4b07      	ldr	r3, [pc, #28]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a06      	ldr	r2, [pc, #24]	; (800525c <HAL_RCC_OscConfig+0x298>)
 8005244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005248:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d01c      	beq.n	800528c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005252:	f7ff fba3 	bl	800499c <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005258:	e011      	b.n	800527e <HAL_RCC_OscConfig+0x2ba>
 800525a:	bf00      	nop
 800525c:	40021000 	.word	0x40021000
 8005260:	0800b8f8 	.word	0x0800b8f8
 8005264:	20000068 	.word	0x20000068
 8005268:	200000a0 	.word	0x200000a0
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800526c:	f7ff fb96 	bl	800499c <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b64      	cmp	r3, #100	; 0x64
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e280      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800527e:	4baf      	ldr	r3, [pc, #700]	; (800553c <HAL_RCC_OscConfig+0x578>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0f0      	beq.n	800526c <HAL_RCC_OscConfig+0x2a8>
 800528a:	e014      	b.n	80052b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528c:	f7ff fb86 	bl	800499c <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005294:	f7ff fb82 	bl	800499c <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b64      	cmp	r3, #100	; 0x64
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e26c      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052a6:	4ba5      	ldr	r3, [pc, #660]	; (800553c <HAL_RCC_OscConfig+0x578>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f0      	bne.n	8005294 <HAL_RCC_OscConfig+0x2d0>
 80052b2:	e000      	b.n	80052b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d060      	beq.n	8005384 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d005      	beq.n	80052d4 <HAL_RCC_OscConfig+0x310>
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b0c      	cmp	r3, #12
 80052cc:	d119      	bne.n	8005302 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d116      	bne.n	8005302 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052d4:	4b99      	ldr	r3, [pc, #612]	; (800553c <HAL_RCC_OscConfig+0x578>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <HAL_RCC_OscConfig+0x328>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e249      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ec:	4b93      	ldr	r3, [pc, #588]	; (800553c <HAL_RCC_OscConfig+0x578>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	061b      	lsls	r3, r3, #24
 80052fa:	4990      	ldr	r1, [pc, #576]	; (800553c <HAL_RCC_OscConfig+0x578>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005300:	e040      	b.n	8005384 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d023      	beq.n	8005352 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800530a:	4b8c      	ldr	r3, [pc, #560]	; (800553c <HAL_RCC_OscConfig+0x578>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a8b      	ldr	r2, [pc, #556]	; (800553c <HAL_RCC_OscConfig+0x578>)
 8005310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005316:	f7ff fb41 	bl	800499c <HAL_GetTick>
 800531a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800531c:	e008      	b.n	8005330 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800531e:	f7ff fb3d 	bl	800499c <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e227      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005330:	4b82      	ldr	r3, [pc, #520]	; (800553c <HAL_RCC_OscConfig+0x578>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0f0      	beq.n	800531e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800533c:	4b7f      	ldr	r3, [pc, #508]	; (800553c <HAL_RCC_OscConfig+0x578>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	061b      	lsls	r3, r3, #24
 800534a:	497c      	ldr	r1, [pc, #496]	; (800553c <HAL_RCC_OscConfig+0x578>)
 800534c:	4313      	orrs	r3, r2
 800534e:	604b      	str	r3, [r1, #4]
 8005350:	e018      	b.n	8005384 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005352:	4b7a      	ldr	r3, [pc, #488]	; (800553c <HAL_RCC_OscConfig+0x578>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a79      	ldr	r2, [pc, #484]	; (800553c <HAL_RCC_OscConfig+0x578>)
 8005358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800535c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535e:	f7ff fb1d 	bl	800499c <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005366:	f7ff fb19 	bl	800499c <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e203      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005378:	4b70      	ldr	r3, [pc, #448]	; (800553c <HAL_RCC_OscConfig+0x578>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f0      	bne.n	8005366 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b00      	cmp	r3, #0
 800538e:	d03c      	beq.n	800540a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01c      	beq.n	80053d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005398:	4b68      	ldr	r3, [pc, #416]	; (800553c <HAL_RCC_OscConfig+0x578>)
 800539a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800539e:	4a67      	ldr	r2, [pc, #412]	; (800553c <HAL_RCC_OscConfig+0x578>)
 80053a0:	f043 0301 	orr.w	r3, r3, #1
 80053a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a8:	f7ff faf8 	bl	800499c <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053b0:	f7ff faf4 	bl	800499c <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e1de      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053c2:	4b5e      	ldr	r3, [pc, #376]	; (800553c <HAL_RCC_OscConfig+0x578>)
 80053c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0ef      	beq.n	80053b0 <HAL_RCC_OscConfig+0x3ec>
 80053d0:	e01b      	b.n	800540a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053d2:	4b5a      	ldr	r3, [pc, #360]	; (800553c <HAL_RCC_OscConfig+0x578>)
 80053d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053d8:	4a58      	ldr	r2, [pc, #352]	; (800553c <HAL_RCC_OscConfig+0x578>)
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e2:	f7ff fadb 	bl	800499c <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ea:	f7ff fad7 	bl	800499c <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e1c1      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053fc:	4b4f      	ldr	r3, [pc, #316]	; (800553c <HAL_RCC_OscConfig+0x578>)
 80053fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1ef      	bne.n	80053ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 80a6 	beq.w	8005564 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005418:	2300      	movs	r3, #0
 800541a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800541c:	4b47      	ldr	r3, [pc, #284]	; (800553c <HAL_RCC_OscConfig+0x578>)
 800541e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10d      	bne.n	8005444 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005428:	4b44      	ldr	r3, [pc, #272]	; (800553c <HAL_RCC_OscConfig+0x578>)
 800542a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542c:	4a43      	ldr	r2, [pc, #268]	; (800553c <HAL_RCC_OscConfig+0x578>)
 800542e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005432:	6593      	str	r3, [r2, #88]	; 0x58
 8005434:	4b41      	ldr	r3, [pc, #260]	; (800553c <HAL_RCC_OscConfig+0x578>)
 8005436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005440:	2301      	movs	r3, #1
 8005442:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005444:	4b3e      	ldr	r3, [pc, #248]	; (8005540 <HAL_RCC_OscConfig+0x57c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544c:	2b00      	cmp	r3, #0
 800544e:	d118      	bne.n	8005482 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005450:	4b3b      	ldr	r3, [pc, #236]	; (8005540 <HAL_RCC_OscConfig+0x57c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a3a      	ldr	r2, [pc, #232]	; (8005540 <HAL_RCC_OscConfig+0x57c>)
 8005456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800545a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800545c:	f7ff fa9e 	bl	800499c <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005464:	f7ff fa9a 	bl	800499c <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e184      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005476:	4b32      	ldr	r3, [pc, #200]	; (8005540 <HAL_RCC_OscConfig+0x57c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f0      	beq.n	8005464 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d108      	bne.n	800549c <HAL_RCC_OscConfig+0x4d8>
 800548a:	4b2c      	ldr	r3, [pc, #176]	; (800553c <HAL_RCC_OscConfig+0x578>)
 800548c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005490:	4a2a      	ldr	r2, [pc, #168]	; (800553c <HAL_RCC_OscConfig+0x578>)
 8005492:	f043 0301 	orr.w	r3, r3, #1
 8005496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800549a:	e024      	b.n	80054e6 <HAL_RCC_OscConfig+0x522>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b05      	cmp	r3, #5
 80054a2:	d110      	bne.n	80054c6 <HAL_RCC_OscConfig+0x502>
 80054a4:	4b25      	ldr	r3, [pc, #148]	; (800553c <HAL_RCC_OscConfig+0x578>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054aa:	4a24      	ldr	r2, [pc, #144]	; (800553c <HAL_RCC_OscConfig+0x578>)
 80054ac:	f043 0304 	orr.w	r3, r3, #4
 80054b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054b4:	4b21      	ldr	r3, [pc, #132]	; (800553c <HAL_RCC_OscConfig+0x578>)
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ba:	4a20      	ldr	r2, [pc, #128]	; (800553c <HAL_RCC_OscConfig+0x578>)
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054c4:	e00f      	b.n	80054e6 <HAL_RCC_OscConfig+0x522>
 80054c6:	4b1d      	ldr	r3, [pc, #116]	; (800553c <HAL_RCC_OscConfig+0x578>)
 80054c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054cc:	4a1b      	ldr	r2, [pc, #108]	; (800553c <HAL_RCC_OscConfig+0x578>)
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054d6:	4b19      	ldr	r3, [pc, #100]	; (800553c <HAL_RCC_OscConfig+0x578>)
 80054d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054dc:	4a17      	ldr	r2, [pc, #92]	; (800553c <HAL_RCC_OscConfig+0x578>)
 80054de:	f023 0304 	bic.w	r3, r3, #4
 80054e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d016      	beq.n	800551c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ee:	f7ff fa55 	bl	800499c <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054f4:	e00a      	b.n	800550c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f6:	f7ff fa51 	bl	800499c <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	f241 3288 	movw	r2, #5000	; 0x1388
 8005504:	4293      	cmp	r3, r2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e139      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800550c:	4b0b      	ldr	r3, [pc, #44]	; (800553c <HAL_RCC_OscConfig+0x578>)
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0ed      	beq.n	80054f6 <HAL_RCC_OscConfig+0x532>
 800551a:	e01a      	b.n	8005552 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800551c:	f7ff fa3e 	bl	800499c <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005522:	e00f      	b.n	8005544 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005524:	f7ff fa3a 	bl	800499c <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005532:	4293      	cmp	r3, r2
 8005534:	d906      	bls.n	8005544 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e122      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000
 8005540:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005544:	4b90      	ldr	r3, [pc, #576]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 8005546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e8      	bne.n	8005524 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005552:	7ffb      	ldrb	r3, [r7, #31]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d105      	bne.n	8005564 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005558:	4b8b      	ldr	r3, [pc, #556]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 800555a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555c:	4a8a      	ldr	r2, [pc, #552]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 800555e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005562:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 8108 	beq.w	800577e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	2b02      	cmp	r3, #2
 8005574:	f040 80d0 	bne.w	8005718 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005578:	4b83      	ldr	r3, [pc, #524]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f003 0203 	and.w	r2, r3, #3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	429a      	cmp	r2, r3
 800558a:	d130      	bne.n	80055ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	3b01      	subs	r3, #1
 8005598:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800559a:	429a      	cmp	r2, r3
 800559c:	d127      	bne.n	80055ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d11f      	bne.n	80055ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055b8:	2a07      	cmp	r2, #7
 80055ba:	bf14      	ite	ne
 80055bc:	2201      	movne	r2, #1
 80055be:	2200      	moveq	r2, #0
 80055c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d113      	bne.n	80055ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d0:	085b      	lsrs	r3, r3, #1
 80055d2:	3b01      	subs	r3, #1
 80055d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d109      	bne.n	80055ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	085b      	lsrs	r3, r3, #1
 80055e6:	3b01      	subs	r3, #1
 80055e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d06e      	beq.n	80056cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b0c      	cmp	r3, #12
 80055f2:	d069      	beq.n	80056c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80055f4:	4b64      	ldr	r3, [pc, #400]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d105      	bne.n	800560c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005600:	4b61      	ldr	r3, [pc, #388]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e0b7      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005610:	4b5d      	ldr	r3, [pc, #372]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a5c      	ldr	r2, [pc, #368]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 8005616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800561a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800561c:	f7ff f9be 	bl	800499c <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005624:	f7ff f9ba 	bl	800499c <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e0a4      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005636:	4b54      	ldr	r3, [pc, #336]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f0      	bne.n	8005624 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005642:	4b51      	ldr	r3, [pc, #324]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	4b51      	ldr	r3, [pc, #324]	; (800578c <HAL_RCC_OscConfig+0x7c8>)
 8005648:	4013      	ands	r3, r2
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005652:	3a01      	subs	r2, #1
 8005654:	0112      	lsls	r2, r2, #4
 8005656:	4311      	orrs	r1, r2
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800565c:	0212      	lsls	r2, r2, #8
 800565e:	4311      	orrs	r1, r2
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005664:	0852      	lsrs	r2, r2, #1
 8005666:	3a01      	subs	r2, #1
 8005668:	0552      	lsls	r2, r2, #21
 800566a:	4311      	orrs	r1, r2
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005670:	0852      	lsrs	r2, r2, #1
 8005672:	3a01      	subs	r2, #1
 8005674:	0652      	lsls	r2, r2, #25
 8005676:	4311      	orrs	r1, r2
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800567c:	0912      	lsrs	r2, r2, #4
 800567e:	0452      	lsls	r2, r2, #17
 8005680:	430a      	orrs	r2, r1
 8005682:	4941      	ldr	r1, [pc, #260]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 8005684:	4313      	orrs	r3, r2
 8005686:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005688:	4b3f      	ldr	r3, [pc, #252]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a3e      	ldr	r2, [pc, #248]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 800568e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005692:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005694:	4b3c      	ldr	r3, [pc, #240]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	4a3b      	ldr	r2, [pc, #236]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 800569a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800569e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056a0:	f7ff f97c 	bl	800499c <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a8:	f7ff f978 	bl	800499c <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e062      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ba:	4b33      	ldr	r3, [pc, #204]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056c6:	e05a      	b.n	800577e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e059      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056cc:	4b2e      	ldr	r3, [pc, #184]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d152      	bne.n	800577e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80056d8:	4b2b      	ldr	r3, [pc, #172]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a2a      	ldr	r2, [pc, #168]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 80056de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056e4:	4b28      	ldr	r3, [pc, #160]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	4a27      	ldr	r2, [pc, #156]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 80056ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056f0:	f7ff f954 	bl	800499c <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f8:	f7ff f950 	bl	800499c <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e03a      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800570a:	4b1f      	ldr	r3, [pc, #124]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0f0      	beq.n	80056f8 <HAL_RCC_OscConfig+0x734>
 8005716:	e032      	b.n	800577e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	2b0c      	cmp	r3, #12
 800571c:	d02d      	beq.n	800577a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800571e:	4b1a      	ldr	r3, [pc, #104]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a19      	ldr	r2, [pc, #100]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 8005724:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005728:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800572a:	4b17      	ldr	r3, [pc, #92]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d105      	bne.n	8005742 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005736:	4b14      	ldr	r3, [pc, #80]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	4a13      	ldr	r2, [pc, #76]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 800573c:	f023 0303 	bic.w	r3, r3, #3
 8005740:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005742:	4b11      	ldr	r3, [pc, #68]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	4a10      	ldr	r2, [pc, #64]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 8005748:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800574c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005750:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005752:	f7ff f923 	bl	800499c <HAL_GetTick>
 8005756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005758:	e008      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575a:	f7ff f91f 	bl	800499c <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e009      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800576c:	4b06      	ldr	r3, [pc, #24]	; (8005788 <HAL_RCC_OscConfig+0x7c4>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1f0      	bne.n	800575a <HAL_RCC_OscConfig+0x796>
 8005778:	e001      	b.n	800577e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3720      	adds	r7, #32
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40021000 	.word	0x40021000
 800578c:	f99d808c 	.word	0xf99d808c

08005790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e0c8      	b.n	8005936 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057a4:	4b66      	ldr	r3, [pc, #408]	; (8005940 <HAL_RCC_ClockConfig+0x1b0>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d910      	bls.n	80057d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b2:	4b63      	ldr	r3, [pc, #396]	; (8005940 <HAL_RCC_ClockConfig+0x1b0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f023 0207 	bic.w	r2, r3, #7
 80057ba:	4961      	ldr	r1, [pc, #388]	; (8005940 <HAL_RCC_ClockConfig+0x1b0>)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	4313      	orrs	r3, r2
 80057c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c2:	4b5f      	ldr	r3, [pc, #380]	; (8005940 <HAL_RCC_ClockConfig+0x1b0>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d001      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e0b0      	b.n	8005936 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d04c      	beq.n	800587a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d107      	bne.n	80057f8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057e8:	4b56      	ldr	r3, [pc, #344]	; (8005944 <HAL_RCC_ClockConfig+0x1b4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d121      	bne.n	8005838 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e09e      	b.n	8005936 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d107      	bne.n	8005810 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005800:	4b50      	ldr	r3, [pc, #320]	; (8005944 <HAL_RCC_ClockConfig+0x1b4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d115      	bne.n	8005838 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e092      	b.n	8005936 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d107      	bne.n	8005828 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005818:	4b4a      	ldr	r3, [pc, #296]	; (8005944 <HAL_RCC_ClockConfig+0x1b4>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e086      	b.n	8005936 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005828:	4b46      	ldr	r3, [pc, #280]	; (8005944 <HAL_RCC_ClockConfig+0x1b4>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e07e      	b.n	8005936 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005838:	4b42      	ldr	r3, [pc, #264]	; (8005944 <HAL_RCC_ClockConfig+0x1b4>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f023 0203 	bic.w	r2, r3, #3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	493f      	ldr	r1, [pc, #252]	; (8005944 <HAL_RCC_ClockConfig+0x1b4>)
 8005846:	4313      	orrs	r3, r2
 8005848:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800584a:	f7ff f8a7 	bl	800499c <HAL_GetTick>
 800584e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005850:	e00a      	b.n	8005868 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005852:	f7ff f8a3 	bl	800499c <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005860:	4293      	cmp	r3, r2
 8005862:	d901      	bls.n	8005868 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e066      	b.n	8005936 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005868:	4b36      	ldr	r3, [pc, #216]	; (8005944 <HAL_RCC_ClockConfig+0x1b4>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 020c 	and.w	r2, r3, #12
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	429a      	cmp	r2, r3
 8005878:	d1eb      	bne.n	8005852 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d008      	beq.n	8005898 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005886:	4b2f      	ldr	r3, [pc, #188]	; (8005944 <HAL_RCC_ClockConfig+0x1b4>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	492c      	ldr	r1, [pc, #176]	; (8005944 <HAL_RCC_ClockConfig+0x1b4>)
 8005894:	4313      	orrs	r3, r2
 8005896:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005898:	4b29      	ldr	r3, [pc, #164]	; (8005940 <HAL_RCC_ClockConfig+0x1b0>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d210      	bcs.n	80058c8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a6:	4b26      	ldr	r3, [pc, #152]	; (8005940 <HAL_RCC_ClockConfig+0x1b0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f023 0207 	bic.w	r2, r3, #7
 80058ae:	4924      	ldr	r1, [pc, #144]	; (8005940 <HAL_RCC_ClockConfig+0x1b0>)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b6:	4b22      	ldr	r3, [pc, #136]	; (8005940 <HAL_RCC_ClockConfig+0x1b0>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d001      	beq.n	80058c8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e036      	b.n	8005936 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d008      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058d4:	4b1b      	ldr	r3, [pc, #108]	; (8005944 <HAL_RCC_ClockConfig+0x1b4>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	4918      	ldr	r1, [pc, #96]	; (8005944 <HAL_RCC_ClockConfig+0x1b4>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d009      	beq.n	8005906 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058f2:	4b14      	ldr	r3, [pc, #80]	; (8005944 <HAL_RCC_ClockConfig+0x1b4>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	4910      	ldr	r1, [pc, #64]	; (8005944 <HAL_RCC_ClockConfig+0x1b4>)
 8005902:	4313      	orrs	r3, r2
 8005904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005906:	f000 f825 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 800590a:	4602      	mov	r2, r0
 800590c:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <HAL_RCC_ClockConfig+0x1b4>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	490c      	ldr	r1, [pc, #48]	; (8005948 <HAL_RCC_ClockConfig+0x1b8>)
 8005918:	5ccb      	ldrb	r3, [r1, r3]
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	fa22 f303 	lsr.w	r3, r2, r3
 8005922:	4a0a      	ldr	r2, [pc, #40]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 8005924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005926:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <HAL_RCC_ClockConfig+0x1c0>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f7fe fbd2 	bl	80040d4 <HAL_InitTick>
 8005930:	4603      	mov	r3, r0
 8005932:	72fb      	strb	r3, [r7, #11]

  return status;
 8005934:	7afb      	ldrb	r3, [r7, #11]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	40022000 	.word	0x40022000
 8005944:	40021000 	.word	0x40021000
 8005948:	0800b8f8 	.word	0x0800b8f8
 800594c:	20000068 	.word	0x20000068
 8005950:	200000a0 	.word	0x200000a0

08005954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005954:	b480      	push	{r7}
 8005956:	b089      	sub	sp, #36	; 0x24
 8005958:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	2300      	movs	r3, #0
 8005960:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005962:	4b3e      	ldr	r3, [pc, #248]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800596c:	4b3b      	ldr	r3, [pc, #236]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <HAL_RCC_GetSysClockFreq+0x34>
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	2b0c      	cmp	r3, #12
 8005980:	d121      	bne.n	80059c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d11e      	bne.n	80059c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005988:	4b34      	ldr	r3, [pc, #208]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	d107      	bne.n	80059a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005994:	4b31      	ldr	r3, [pc, #196]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8005996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800599a:	0a1b      	lsrs	r3, r3, #8
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	61fb      	str	r3, [r7, #28]
 80059a2:	e005      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80059a4:	4b2d      	ldr	r3, [pc, #180]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	091b      	lsrs	r3, r3, #4
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80059b0:	4a2b      	ldr	r2, [pc, #172]	; (8005a60 <HAL_RCC_GetSysClockFreq+0x10c>)
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10d      	bne.n	80059dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059c4:	e00a      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d102      	bne.n	80059d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059cc:	4b25      	ldr	r3, [pc, #148]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80059ce:	61bb      	str	r3, [r7, #24]
 80059d0:	e004      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d101      	bne.n	80059dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059d8:	4b23      	ldr	r3, [pc, #140]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x114>)
 80059da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	2b0c      	cmp	r3, #12
 80059e0:	d134      	bne.n	8005a4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059e2:	4b1e      	ldr	r3, [pc, #120]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d003      	beq.n	80059fa <HAL_RCC_GetSysClockFreq+0xa6>
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b03      	cmp	r3, #3
 80059f6:	d003      	beq.n	8005a00 <HAL_RCC_GetSysClockFreq+0xac>
 80059f8:	e005      	b.n	8005a06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80059fa:	4b1a      	ldr	r3, [pc, #104]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80059fc:	617b      	str	r3, [r7, #20]
      break;
 80059fe:	e005      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a00:	4b19      	ldr	r3, [pc, #100]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a02:	617b      	str	r3, [r7, #20]
      break;
 8005a04:	e002      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	617b      	str	r3, [r7, #20]
      break;
 8005a0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a0c:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	3301      	adds	r3, #1
 8005a18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a1a:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	0a1b      	lsrs	r3, r3, #8
 8005a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	fb02 f203 	mul.w	r2, r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a32:	4b0a      	ldr	r3, [pc, #40]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	0e5b      	lsrs	r3, r3, #25
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a4c:	69bb      	ldr	r3, [r7, #24]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3724      	adds	r7, #36	; 0x24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	0800b910 	.word	0x0800b910
 8005a64:	00f42400 	.word	0x00f42400
 8005a68:	007a1200 	.word	0x007a1200

08005a6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a70:	4b03      	ldr	r3, [pc, #12]	; (8005a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a72:	681b      	ldr	r3, [r3, #0]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000068 	.word	0x20000068

08005a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a88:	f7ff fff0 	bl	8005a6c <HAL_RCC_GetHCLKFreq>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	0a1b      	lsrs	r3, r3, #8
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	4904      	ldr	r1, [pc, #16]	; (8005aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a9a:	5ccb      	ldrb	r3, [r1, r3]
 8005a9c:	f003 031f 	and.w	r3, r3, #31
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	0800b908 	.word	0x0800b908

08005ab0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	220f      	movs	r2, #15
 8005abe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005ac0:	4b12      	ldr	r3, [pc, #72]	; (8005b0c <HAL_RCC_GetClockConfig+0x5c>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 0203 	and.w	r2, r3, #3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005acc:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <HAL_RCC_GetClockConfig+0x5c>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005ad8:	4b0c      	ldr	r3, [pc, #48]	; (8005b0c <HAL_RCC_GetClockConfig+0x5c>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005ae4:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <HAL_RCC_GetClockConfig+0x5c>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	08db      	lsrs	r3, r3, #3
 8005aea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005af2:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <HAL_RCC_GetClockConfig+0x60>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0207 	and.w	r2, r3, #7
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	601a      	str	r2, [r3, #0]
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	40022000 	.word	0x40022000

08005b14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005b20:	4b2a      	ldr	r3, [pc, #168]	; (8005bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005b2c:	f7ff f9e6 	bl	8004efc <HAL_PWREx_GetVoltageRange>
 8005b30:	6178      	str	r0, [r7, #20]
 8005b32:	e014      	b.n	8005b5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b34:	4b25      	ldr	r3, [pc, #148]	; (8005bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b38:	4a24      	ldr	r2, [pc, #144]	; (8005bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b3e:	6593      	str	r3, [r2, #88]	; 0x58
 8005b40:	4b22      	ldr	r3, [pc, #136]	; (8005bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005b4c:	f7ff f9d6 	bl	8004efc <HAL_PWREx_GetVoltageRange>
 8005b50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005b52:	4b1e      	ldr	r3, [pc, #120]	; (8005bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b56:	4a1d      	ldr	r2, [pc, #116]	; (8005bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b64:	d10b      	bne.n	8005b7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b80      	cmp	r3, #128	; 0x80
 8005b6a:	d919      	bls.n	8005ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2ba0      	cmp	r3, #160	; 0xa0
 8005b70:	d902      	bls.n	8005b78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b72:	2302      	movs	r3, #2
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	e013      	b.n	8005ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b78:	2301      	movs	r3, #1
 8005b7a:	613b      	str	r3, [r7, #16]
 8005b7c:	e010      	b.n	8005ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b80      	cmp	r3, #128	; 0x80
 8005b82:	d902      	bls.n	8005b8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005b84:	2303      	movs	r3, #3
 8005b86:	613b      	str	r3, [r7, #16]
 8005b88:	e00a      	b.n	8005ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b80      	cmp	r3, #128	; 0x80
 8005b8e:	d102      	bne.n	8005b96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b90:	2302      	movs	r3, #2
 8005b92:	613b      	str	r3, [r7, #16]
 8005b94:	e004      	b.n	8005ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b70      	cmp	r3, #112	; 0x70
 8005b9a:	d101      	bne.n	8005ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f023 0207 	bic.w	r2, r3, #7
 8005ba8:	4909      	ldr	r1, [pc, #36]	; (8005bd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005bb0:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d001      	beq.n	8005bc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	40022000 	.word	0x40022000

08005bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bdc:	2300      	movs	r3, #0
 8005bde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005be0:	2300      	movs	r3, #0
 8005be2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d041      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bf4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005bf8:	d02a      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005bfa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005bfe:	d824      	bhi.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c04:	d008      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005c06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c0a:	d81e      	bhi.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c14:	d010      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c16:	e018      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c18:	4b86      	ldr	r3, [pc, #536]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	4a85      	ldr	r2, [pc, #532]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c22:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c24:	e015      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 fabb 	bl	80061a8 <RCCEx_PLLSAI1_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c36:	e00c      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3320      	adds	r3, #32
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fba6 	bl	8006390 <RCCEx_PLLSAI2_Config>
 8005c44:	4603      	mov	r3, r0
 8005c46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c48:	e003      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	74fb      	strb	r3, [r7, #19]
      break;
 8005c4e:	e000      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005c50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c52:	7cfb      	ldrb	r3, [r7, #19]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10b      	bne.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c58:	4b76      	ldr	r3, [pc, #472]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c66:	4973      	ldr	r1, [pc, #460]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005c6e:	e001      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c70:	7cfb      	ldrb	r3, [r7, #19]
 8005c72:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d041      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c88:	d02a      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005c8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c8e:	d824      	bhi.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005c90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c94:	d008      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c9a:	d81e      	bhi.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ca4:	d010      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005ca6:	e018      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ca8:	4b62      	ldr	r3, [pc, #392]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	4a61      	ldr	r2, [pc, #388]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005cb4:	e015      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	2100      	movs	r1, #0
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 fa73 	bl	80061a8 <RCCEx_PLLSAI1_Config>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005cc6:	e00c      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3320      	adds	r3, #32
 8005ccc:	2100      	movs	r1, #0
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fb5e 	bl	8006390 <RCCEx_PLLSAI2_Config>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005cd8:	e003      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	74fb      	strb	r3, [r7, #19]
      break;
 8005cde:	e000      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ce2:	7cfb      	ldrb	r3, [r7, #19]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10b      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ce8:	4b52      	ldr	r3, [pc, #328]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cf6:	494f      	ldr	r1, [pc, #316]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005cfe:	e001      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d00:	7cfb      	ldrb	r3, [r7, #19]
 8005d02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 80a0 	beq.w	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d12:	2300      	movs	r3, #0
 8005d14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d16:	4b47      	ldr	r3, [pc, #284]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005d26:	2300      	movs	r3, #0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00d      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d2c:	4b41      	ldr	r3, [pc, #260]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d30:	4a40      	ldr	r2, [pc, #256]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d36:	6593      	str	r3, [r2, #88]	; 0x58
 8005d38:	4b3e      	ldr	r3, [pc, #248]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d40:	60bb      	str	r3, [r7, #8]
 8005d42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d44:	2301      	movs	r3, #1
 8005d46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d48:	4b3b      	ldr	r3, [pc, #236]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a3a      	ldr	r2, [pc, #232]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d54:	f7fe fe22 	bl	800499c <HAL_GetTick>
 8005d58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d5a:	e009      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d5c:	f7fe fe1e 	bl	800499c <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d902      	bls.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	74fb      	strb	r3, [r7, #19]
        break;
 8005d6e:	e005      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d70:	4b31      	ldr	r3, [pc, #196]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0ef      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005d7c:	7cfb      	ldrb	r3, [r7, #19]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d15c      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d82:	4b2c      	ldr	r3, [pc, #176]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01f      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d019      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005da0:	4b24      	ldr	r3, [pc, #144]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005daa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dac:	4b21      	ldr	r3, [pc, #132]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db2:	4a20      	ldr	r2, [pc, #128]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dbc:	4b1d      	ldr	r3, [pc, #116]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc2:	4a1c      	ldr	r2, [pc, #112]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005dcc:	4a19      	ldr	r2, [pc, #100]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d016      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dde:	f7fe fddd 	bl	800499c <HAL_GetTick>
 8005de2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005de4:	e00b      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005de6:	f7fe fdd9 	bl	800499c <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d902      	bls.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	74fb      	strb	r3, [r7, #19]
            break;
 8005dfc:	e006      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dfe:	4b0d      	ldr	r3, [pc, #52]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0ec      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005e0c:	7cfb      	ldrb	r3, [r7, #19]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10c      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e12:	4b08      	ldr	r3, [pc, #32]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e22:	4904      	ldr	r1, [pc, #16]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e2a:	e009      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e2c:	7cfb      	ldrb	r3, [r7, #19]
 8005e2e:	74bb      	strb	r3, [r7, #18]
 8005e30:	e006      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005e32:	bf00      	nop
 8005e34:	40021000 	.word	0x40021000
 8005e38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3c:	7cfb      	ldrb	r3, [r7, #19]
 8005e3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e40:	7c7b      	ldrb	r3, [r7, #17]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d105      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e46:	4b9e      	ldr	r3, [pc, #632]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4a:	4a9d      	ldr	r2, [pc, #628]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e5e:	4b98      	ldr	r3, [pc, #608]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e64:	f023 0203 	bic.w	r2, r3, #3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	4994      	ldr	r1, [pc, #592]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00a      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e80:	4b8f      	ldr	r3, [pc, #572]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e86:	f023 020c 	bic.w	r2, r3, #12
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8e:	498c      	ldr	r1, [pc, #560]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00a      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ea2:	4b87      	ldr	r3, [pc, #540]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	4983      	ldr	r1, [pc, #524]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00a      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ec4:	4b7e      	ldr	r3, [pc, #504]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed2:	497b      	ldr	r1, [pc, #492]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0310 	and.w	r3, r3, #16
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00a      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ee6:	4b76      	ldr	r3, [pc, #472]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef4:	4972      	ldr	r1, [pc, #456]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00a      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f08:	4b6d      	ldr	r3, [pc, #436]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f16:	496a      	ldr	r1, [pc, #424]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f2a:	4b65      	ldr	r3, [pc, #404]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f38:	4961      	ldr	r1, [pc, #388]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00a      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f4c:	4b5c      	ldr	r3, [pc, #368]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f5a:	4959      	ldr	r1, [pc, #356]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00a      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f6e:	4b54      	ldr	r3, [pc, #336]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f7c:	4950      	ldr	r1, [pc, #320]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00a      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f90:	4b4b      	ldr	r3, [pc, #300]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	4948      	ldr	r1, [pc, #288]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005fb2:	4b43      	ldr	r3, [pc, #268]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc0:	493f      	ldr	r1, [pc, #252]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d028      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fd4:	4b3a      	ldr	r3, [pc, #232]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fe2:	4937      	ldr	r1, [pc, #220]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ff2:	d106      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ff4:	4b32      	ldr	r3, [pc, #200]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	4a31      	ldr	r2, [pc, #196]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ffe:	60d3      	str	r3, [r2, #12]
 8006000:	e011      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006006:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800600a:	d10c      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3304      	adds	r3, #4
 8006010:	2101      	movs	r1, #1
 8006012:	4618      	mov	r0, r3
 8006014:	f000 f8c8 	bl	80061a8 <RCCEx_PLLSAI1_Config>
 8006018:	4603      	mov	r3, r0
 800601a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800601c:	7cfb      	ldrb	r3, [r7, #19]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006022:	7cfb      	ldrb	r3, [r7, #19]
 8006024:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d028      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006032:	4b23      	ldr	r3, [pc, #140]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006038:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006040:	491f      	ldr	r1, [pc, #124]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006050:	d106      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006052:	4b1b      	ldr	r3, [pc, #108]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	4a1a      	ldr	r2, [pc, #104]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006058:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800605c:	60d3      	str	r3, [r2, #12]
 800605e:	e011      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006064:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006068:	d10c      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3304      	adds	r3, #4
 800606e:	2101      	movs	r1, #1
 8006070:	4618      	mov	r0, r3
 8006072:	f000 f899 	bl	80061a8 <RCCEx_PLLSAI1_Config>
 8006076:	4603      	mov	r3, r0
 8006078:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800607a:	7cfb      	ldrb	r3, [r7, #19]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006080:	7cfb      	ldrb	r3, [r7, #19]
 8006082:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d02b      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006090:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006096:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800609e:	4908      	ldr	r1, [pc, #32]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060ae:	d109      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060b0:	4b03      	ldr	r3, [pc, #12]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	4a02      	ldr	r2, [pc, #8]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060ba:	60d3      	str	r3, [r2, #12]
 80060bc:	e014      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80060be:	bf00      	nop
 80060c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060cc:	d10c      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3304      	adds	r3, #4
 80060d2:	2101      	movs	r1, #1
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 f867 	bl	80061a8 <RCCEx_PLLSAI1_Config>
 80060da:	4603      	mov	r3, r0
 80060dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80060de:	7cfb      	ldrb	r3, [r7, #19]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80060e4:	7cfb      	ldrb	r3, [r7, #19]
 80060e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d02f      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060f4:	4b2b      	ldr	r3, [pc, #172]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006102:	4928      	ldr	r1, [pc, #160]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800610e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006112:	d10d      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3304      	adds	r3, #4
 8006118:	2102      	movs	r1, #2
 800611a:	4618      	mov	r0, r3
 800611c:	f000 f844 	bl	80061a8 <RCCEx_PLLSAI1_Config>
 8006120:	4603      	mov	r3, r0
 8006122:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006124:	7cfb      	ldrb	r3, [r7, #19]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d014      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800612a:	7cfb      	ldrb	r3, [r7, #19]
 800612c:	74bb      	strb	r3, [r7, #18]
 800612e:	e011      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006138:	d10c      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3320      	adds	r3, #32
 800613e:	2102      	movs	r1, #2
 8006140:	4618      	mov	r0, r3
 8006142:	f000 f925 	bl	8006390 <RCCEx_PLLSAI2_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800614a:	7cfb      	ldrb	r3, [r7, #19]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006150:	7cfb      	ldrb	r3, [r7, #19]
 8006152:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006160:	4b10      	ldr	r3, [pc, #64]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006166:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800616e:	490d      	ldr	r1, [pc, #52]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006170:	4313      	orrs	r3, r2
 8006172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00b      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006182:	4b08      	ldr	r3, [pc, #32]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006188:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006192:	4904      	ldr	r1, [pc, #16]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006194:	4313      	orrs	r3, r2
 8006196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800619a:	7cbb      	ldrb	r3, [r7, #18]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40021000 	.word	0x40021000

080061a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80061b6:	4b75      	ldr	r3, [pc, #468]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d018      	beq.n	80061f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80061c2:	4b72      	ldr	r3, [pc, #456]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f003 0203 	and.w	r2, r3, #3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d10d      	bne.n	80061ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
       ||
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d009      	beq.n	80061ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80061da:	4b6c      	ldr	r3, [pc, #432]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	091b      	lsrs	r3, r3, #4
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	1c5a      	adds	r2, r3, #1
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
       ||
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d047      	beq.n	800627e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	73fb      	strb	r3, [r7, #15]
 80061f2:	e044      	b.n	800627e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d018      	beq.n	800622e <RCCEx_PLLSAI1_Config+0x86>
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d825      	bhi.n	800624c <RCCEx_PLLSAI1_Config+0xa4>
 8006200:	2b01      	cmp	r3, #1
 8006202:	d002      	beq.n	800620a <RCCEx_PLLSAI1_Config+0x62>
 8006204:	2b02      	cmp	r3, #2
 8006206:	d009      	beq.n	800621c <RCCEx_PLLSAI1_Config+0x74>
 8006208:	e020      	b.n	800624c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800620a:	4b60      	ldr	r3, [pc, #384]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d11d      	bne.n	8006252 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800621a:	e01a      	b.n	8006252 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800621c:	4b5b      	ldr	r3, [pc, #364]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006224:	2b00      	cmp	r3, #0
 8006226:	d116      	bne.n	8006256 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800622c:	e013      	b.n	8006256 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800622e:	4b57      	ldr	r3, [pc, #348]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10f      	bne.n	800625a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800623a:	4b54      	ldr	r3, [pc, #336]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d109      	bne.n	800625a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800624a:	e006      	b.n	800625a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	73fb      	strb	r3, [r7, #15]
      break;
 8006250:	e004      	b.n	800625c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006252:	bf00      	nop
 8006254:	e002      	b.n	800625c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006256:	bf00      	nop
 8006258:	e000      	b.n	800625c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800625a:	bf00      	nop
    }

    if(status == HAL_OK)
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10d      	bne.n	800627e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006262:	4b4a      	ldr	r3, [pc, #296]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6819      	ldr	r1, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	3b01      	subs	r3, #1
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	430b      	orrs	r3, r1
 8006278:	4944      	ldr	r1, [pc, #272]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 800627a:	4313      	orrs	r3, r2
 800627c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d17d      	bne.n	8006380 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006284:	4b41      	ldr	r3, [pc, #260]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a40      	ldr	r2, [pc, #256]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 800628a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800628e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006290:	f7fe fb84 	bl	800499c <HAL_GetTick>
 8006294:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006296:	e009      	b.n	80062ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006298:	f7fe fb80 	bl	800499c <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d902      	bls.n	80062ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	73fb      	strb	r3, [r7, #15]
        break;
 80062aa:	e005      	b.n	80062b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80062ac:	4b37      	ldr	r3, [pc, #220]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1ef      	bne.n	8006298 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d160      	bne.n	8006380 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d111      	bne.n	80062e8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062c4:	4b31      	ldr	r3, [pc, #196]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80062cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6892      	ldr	r2, [r2, #8]
 80062d4:	0211      	lsls	r1, r2, #8
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	68d2      	ldr	r2, [r2, #12]
 80062da:	0912      	lsrs	r2, r2, #4
 80062dc:	0452      	lsls	r2, r2, #17
 80062de:	430a      	orrs	r2, r1
 80062e0:	492a      	ldr	r1, [pc, #168]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	610b      	str	r3, [r1, #16]
 80062e6:	e027      	b.n	8006338 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d112      	bne.n	8006314 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062ee:	4b27      	ldr	r3, [pc, #156]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80062f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	6892      	ldr	r2, [r2, #8]
 80062fe:	0211      	lsls	r1, r2, #8
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6912      	ldr	r2, [r2, #16]
 8006304:	0852      	lsrs	r2, r2, #1
 8006306:	3a01      	subs	r2, #1
 8006308:	0552      	lsls	r2, r2, #21
 800630a:	430a      	orrs	r2, r1
 800630c:	491f      	ldr	r1, [pc, #124]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 800630e:	4313      	orrs	r3, r2
 8006310:	610b      	str	r3, [r1, #16]
 8006312:	e011      	b.n	8006338 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006314:	4b1d      	ldr	r3, [pc, #116]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800631c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6892      	ldr	r2, [r2, #8]
 8006324:	0211      	lsls	r1, r2, #8
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6952      	ldr	r2, [r2, #20]
 800632a:	0852      	lsrs	r2, r2, #1
 800632c:	3a01      	subs	r2, #1
 800632e:	0652      	lsls	r2, r2, #25
 8006330:	430a      	orrs	r2, r1
 8006332:	4916      	ldr	r1, [pc, #88]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006334:	4313      	orrs	r3, r2
 8006336:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006338:	4b14      	ldr	r3, [pc, #80]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a13      	ldr	r2, [pc, #76]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 800633e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006342:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006344:	f7fe fb2a 	bl	800499c <HAL_GetTick>
 8006348:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800634a:	e009      	b.n	8006360 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800634c:	f7fe fb26 	bl	800499c <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b02      	cmp	r3, #2
 8006358:	d902      	bls.n	8006360 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	73fb      	strb	r3, [r7, #15]
          break;
 800635e:	e005      	b.n	800636c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006360:	4b0a      	ldr	r3, [pc, #40]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0ef      	beq.n	800634c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006372:	4b06      	ldr	r3, [pc, #24]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006374:	691a      	ldr	r2, [r3, #16]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	4904      	ldr	r1, [pc, #16]	; (800638c <RCCEx_PLLSAI1_Config+0x1e4>)
 800637c:	4313      	orrs	r3, r2
 800637e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006380:	7bfb      	ldrb	r3, [r7, #15]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	40021000 	.word	0x40021000

08006390 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800639e:	4b6a      	ldr	r3, [pc, #424]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f003 0303 	and.w	r3, r3, #3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d018      	beq.n	80063dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80063aa:	4b67      	ldr	r3, [pc, #412]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f003 0203 	and.w	r2, r3, #3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d10d      	bne.n	80063d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
       ||
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d009      	beq.n	80063d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80063c2:	4b61      	ldr	r3, [pc, #388]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	091b      	lsrs	r3, r3, #4
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
       ||
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d047      	beq.n	8006466 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	73fb      	strb	r3, [r7, #15]
 80063da:	e044      	b.n	8006466 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d018      	beq.n	8006416 <RCCEx_PLLSAI2_Config+0x86>
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d825      	bhi.n	8006434 <RCCEx_PLLSAI2_Config+0xa4>
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d002      	beq.n	80063f2 <RCCEx_PLLSAI2_Config+0x62>
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d009      	beq.n	8006404 <RCCEx_PLLSAI2_Config+0x74>
 80063f0:	e020      	b.n	8006434 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063f2:	4b55      	ldr	r3, [pc, #340]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d11d      	bne.n	800643a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006402:	e01a      	b.n	800643a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006404:	4b50      	ldr	r3, [pc, #320]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800640c:	2b00      	cmp	r3, #0
 800640e:	d116      	bne.n	800643e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006414:	e013      	b.n	800643e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006416:	4b4c      	ldr	r3, [pc, #304]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10f      	bne.n	8006442 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006422:	4b49      	ldr	r3, [pc, #292]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d109      	bne.n	8006442 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006432:	e006      	b.n	8006442 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	73fb      	strb	r3, [r7, #15]
      break;
 8006438:	e004      	b.n	8006444 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800643a:	bf00      	nop
 800643c:	e002      	b.n	8006444 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800643e:	bf00      	nop
 8006440:	e000      	b.n	8006444 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006442:	bf00      	nop
    }

    if(status == HAL_OK)
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10d      	bne.n	8006466 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800644a:	4b3f      	ldr	r3, [pc, #252]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6819      	ldr	r1, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	3b01      	subs	r3, #1
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	430b      	orrs	r3, r1
 8006460:	4939      	ldr	r1, [pc, #228]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006462:	4313      	orrs	r3, r2
 8006464:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d167      	bne.n	800653c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800646c:	4b36      	ldr	r3, [pc, #216]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a35      	ldr	r2, [pc, #212]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006476:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006478:	f7fe fa90 	bl	800499c <HAL_GetTick>
 800647c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800647e:	e009      	b.n	8006494 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006480:	f7fe fa8c 	bl	800499c <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d902      	bls.n	8006494 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	73fb      	strb	r3, [r7, #15]
        break;
 8006492:	e005      	b.n	80064a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006494:	4b2c      	ldr	r3, [pc, #176]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1ef      	bne.n	8006480 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d14a      	bne.n	800653c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d111      	bne.n	80064d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80064ac:	4b26      	ldr	r3, [pc, #152]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80064b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6892      	ldr	r2, [r2, #8]
 80064bc:	0211      	lsls	r1, r2, #8
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	68d2      	ldr	r2, [r2, #12]
 80064c2:	0912      	lsrs	r2, r2, #4
 80064c4:	0452      	lsls	r2, r2, #17
 80064c6:	430a      	orrs	r2, r1
 80064c8:	491f      	ldr	r1, [pc, #124]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	614b      	str	r3, [r1, #20]
 80064ce:	e011      	b.n	80064f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80064d0:	4b1d      	ldr	r3, [pc, #116]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80064d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6892      	ldr	r2, [r2, #8]
 80064e0:	0211      	lsls	r1, r2, #8
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6912      	ldr	r2, [r2, #16]
 80064e6:	0852      	lsrs	r2, r2, #1
 80064e8:	3a01      	subs	r2, #1
 80064ea:	0652      	lsls	r2, r2, #25
 80064ec:	430a      	orrs	r2, r1
 80064ee:	4916      	ldr	r1, [pc, #88]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80064f4:	4b14      	ldr	r3, [pc, #80]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a13      	ldr	r2, [pc, #76]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006500:	f7fe fa4c 	bl	800499c <HAL_GetTick>
 8006504:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006506:	e009      	b.n	800651c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006508:	f7fe fa48 	bl	800499c <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d902      	bls.n	800651c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	73fb      	strb	r3, [r7, #15]
          break;
 800651a:	e005      	b.n	8006528 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800651c:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0ef      	beq.n	8006508 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800652e:	4b06      	ldr	r3, [pc, #24]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006530:	695a      	ldr	r2, [r3, #20]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	4904      	ldr	r1, [pc, #16]	; (8006548 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006538:	4313      	orrs	r3, r2
 800653a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800653c:	7bfb      	ldrb	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	40021000 	.word	0x40021000

0800654c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e049      	b.n	80065f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f841 	bl	80065fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3304      	adds	r3, #4
 8006588:	4619      	mov	r1, r3
 800658a:	4610      	mov	r0, r2
 800658c:	f000 f9f8 	bl	8006980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
	...

08006610 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	d001      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e04f      	b.n	80066c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a23      	ldr	r2, [pc, #140]	; (80066d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d01d      	beq.n	8006686 <HAL_TIM_Base_Start_IT+0x76>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006652:	d018      	beq.n	8006686 <HAL_TIM_Base_Start_IT+0x76>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1f      	ldr	r2, [pc, #124]	; (80066d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d013      	beq.n	8006686 <HAL_TIM_Base_Start_IT+0x76>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a1e      	ldr	r2, [pc, #120]	; (80066dc <HAL_TIM_Base_Start_IT+0xcc>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00e      	beq.n	8006686 <HAL_TIM_Base_Start_IT+0x76>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a1c      	ldr	r2, [pc, #112]	; (80066e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d009      	beq.n	8006686 <HAL_TIM_Base_Start_IT+0x76>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a1b      	ldr	r2, [pc, #108]	; (80066e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d004      	beq.n	8006686 <HAL_TIM_Base_Start_IT+0x76>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a19      	ldr	r2, [pc, #100]	; (80066e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d115      	bne.n	80066b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	4b17      	ldr	r3, [pc, #92]	; (80066ec <HAL_TIM_Base_Start_IT+0xdc>)
 800668e:	4013      	ands	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b06      	cmp	r3, #6
 8006696:	d015      	beq.n	80066c4 <HAL_TIM_Base_Start_IT+0xb4>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800669e:	d011      	beq.n	80066c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0201 	orr.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b0:	e008      	b.n	80066c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0201 	orr.w	r2, r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	e000      	b.n	80066c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	40012c00 	.word	0x40012c00
 80066d8:	40000400 	.word	0x40000400
 80066dc:	40000800 	.word	0x40000800
 80066e0:	40000c00 	.word	0x40000c00
 80066e4:	40013400 	.word	0x40013400
 80066e8:	40014000 	.word	0x40014000
 80066ec:	00010007 	.word	0x00010007

080066f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b02      	cmp	r3, #2
 8006704:	d122      	bne.n	800674c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b02      	cmp	r3, #2
 8006712:	d11b      	bne.n	800674c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f06f 0202 	mvn.w	r2, #2
 800671c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f905 	bl	8006942 <HAL_TIM_IC_CaptureCallback>
 8006738:	e005      	b.n	8006746 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f8f7 	bl	800692e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f908 	bl	8006956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f003 0304 	and.w	r3, r3, #4
 8006756:	2b04      	cmp	r3, #4
 8006758:	d122      	bne.n	80067a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b04      	cmp	r3, #4
 8006766:	d11b      	bne.n	80067a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f06f 0204 	mvn.w	r2, #4
 8006770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2202      	movs	r2, #2
 8006776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f8db 	bl	8006942 <HAL_TIM_IC_CaptureCallback>
 800678c:	e005      	b.n	800679a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f8cd 	bl	800692e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f8de 	bl	8006956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f003 0308 	and.w	r3, r3, #8
 80067aa:	2b08      	cmp	r3, #8
 80067ac:	d122      	bne.n	80067f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f003 0308 	and.w	r3, r3, #8
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d11b      	bne.n	80067f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f06f 0208 	mvn.w	r2, #8
 80067c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2204      	movs	r2, #4
 80067ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f8b1 	bl	8006942 <HAL_TIM_IC_CaptureCallback>
 80067e0:	e005      	b.n	80067ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f8a3 	bl	800692e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f8b4 	bl	8006956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0310 	and.w	r3, r3, #16
 80067fe:	2b10      	cmp	r3, #16
 8006800:	d122      	bne.n	8006848 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f003 0310 	and.w	r3, r3, #16
 800680c:	2b10      	cmp	r3, #16
 800680e:	d11b      	bne.n	8006848 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f06f 0210 	mvn.w	r2, #16
 8006818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2208      	movs	r2, #8
 800681e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f887 	bl	8006942 <HAL_TIM_IC_CaptureCallback>
 8006834:	e005      	b.n	8006842 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f879 	bl	800692e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f88a 	bl	8006956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b01      	cmp	r3, #1
 8006854:	d10e      	bne.n	8006874 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b01      	cmp	r3, #1
 8006862:	d107      	bne.n	8006874 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f06f 0201 	mvn.w	r2, #1
 800686c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fb ff9a 	bl	80027a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687e:	2b80      	cmp	r3, #128	; 0x80
 8006880:	d10e      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688c:	2b80      	cmp	r3, #128	; 0x80
 800688e:	d107      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f914 	bl	8006ac8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ae:	d10e      	bne.n	80068ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ba:	2b80      	cmp	r3, #128	; 0x80
 80068bc:	d107      	bne.n	80068ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f907 	bl	8006adc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d8:	2b40      	cmp	r3, #64	; 0x40
 80068da:	d10e      	bne.n	80068fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e6:	2b40      	cmp	r3, #64	; 0x40
 80068e8:	d107      	bne.n	80068fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f838 	bl	800696a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	f003 0320 	and.w	r3, r3, #32
 8006904:	2b20      	cmp	r3, #32
 8006906:	d10e      	bne.n	8006926 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f003 0320 	and.w	r3, r3, #32
 8006912:	2b20      	cmp	r3, #32
 8006914:	d107      	bne.n	8006926 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f06f 0220 	mvn.w	r2, #32
 800691e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f8c7 	bl	8006ab4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006926:	bf00      	nop
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800692e:	b480      	push	{r7}
 8006930:	b083      	sub	sp, #12
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
	...

08006980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a40      	ldr	r2, [pc, #256]	; (8006a94 <TIM_Base_SetConfig+0x114>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d013      	beq.n	80069c0 <TIM_Base_SetConfig+0x40>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699e:	d00f      	beq.n	80069c0 <TIM_Base_SetConfig+0x40>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a3d      	ldr	r2, [pc, #244]	; (8006a98 <TIM_Base_SetConfig+0x118>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00b      	beq.n	80069c0 <TIM_Base_SetConfig+0x40>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a3c      	ldr	r2, [pc, #240]	; (8006a9c <TIM_Base_SetConfig+0x11c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d007      	beq.n	80069c0 <TIM_Base_SetConfig+0x40>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a3b      	ldr	r2, [pc, #236]	; (8006aa0 <TIM_Base_SetConfig+0x120>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <TIM_Base_SetConfig+0x40>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a3a      	ldr	r2, [pc, #232]	; (8006aa4 <TIM_Base_SetConfig+0x124>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d108      	bne.n	80069d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a2f      	ldr	r2, [pc, #188]	; (8006a94 <TIM_Base_SetConfig+0x114>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d01f      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e0:	d01b      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a2c      	ldr	r2, [pc, #176]	; (8006a98 <TIM_Base_SetConfig+0x118>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d017      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a2b      	ldr	r2, [pc, #172]	; (8006a9c <TIM_Base_SetConfig+0x11c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d013      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a2a      	ldr	r2, [pc, #168]	; (8006aa0 <TIM_Base_SetConfig+0x120>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00f      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a29      	ldr	r2, [pc, #164]	; (8006aa4 <TIM_Base_SetConfig+0x124>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d00b      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a28      	ldr	r2, [pc, #160]	; (8006aa8 <TIM_Base_SetConfig+0x128>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d007      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a27      	ldr	r2, [pc, #156]	; (8006aac <TIM_Base_SetConfig+0x12c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d003      	beq.n	8006a1a <TIM_Base_SetConfig+0x9a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a26      	ldr	r2, [pc, #152]	; (8006ab0 <TIM_Base_SetConfig+0x130>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d108      	bne.n	8006a2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a10      	ldr	r2, [pc, #64]	; (8006a94 <TIM_Base_SetConfig+0x114>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00f      	beq.n	8006a78 <TIM_Base_SetConfig+0xf8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a12      	ldr	r2, [pc, #72]	; (8006aa4 <TIM_Base_SetConfig+0x124>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00b      	beq.n	8006a78 <TIM_Base_SetConfig+0xf8>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a11      	ldr	r2, [pc, #68]	; (8006aa8 <TIM_Base_SetConfig+0x128>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d007      	beq.n	8006a78 <TIM_Base_SetConfig+0xf8>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a10      	ldr	r2, [pc, #64]	; (8006aac <TIM_Base_SetConfig+0x12c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d003      	beq.n	8006a78 <TIM_Base_SetConfig+0xf8>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a0f      	ldr	r2, [pc, #60]	; (8006ab0 <TIM_Base_SetConfig+0x130>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d103      	bne.n	8006a80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	615a      	str	r2, [r3, #20]
}
 8006a86:	bf00      	nop
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	40012c00 	.word	0x40012c00
 8006a98:	40000400 	.word	0x40000400
 8006a9c:	40000800 	.word	0x40000800
 8006aa0:	40000c00 	.word	0x40000c00
 8006aa4:	40013400 	.word	0x40013400
 8006aa8:	40014000 	.word	0x40014000
 8006aac:	40014400 	.word	0x40014400
 8006ab0:	40014800 	.word	0x40014800

08006ab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b08b      	sub	sp, #44	; 0x2c
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	fa93 f3a3 	rbit	r3, r3
 8006b0a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8006b16:	2320      	movs	r3, #32
 8006b18:	e003      	b.n	8006b22 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	fab3 f383 	clz	r3, r3
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	2103      	movs	r1, #3
 8006b26:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2a:	43db      	mvns	r3, r3
 8006b2c:	401a      	ands	r2, r3
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	fa93 f3a3 	rbit	r3, r3
 8006b38:	61fb      	str	r3, [r7, #28]
  return result;
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006b44:	2320      	movs	r3, #32
 8006b46:	e003      	b.n	8006b50 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	fab3 f383 	clz	r3, r3
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	fa01 f303 	lsl.w	r3, r1, r3
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	601a      	str	r2, [r3, #0]
}
 8006b5e:	bf00      	nop
 8006b60:	372c      	adds	r7, #44	; 0x2c
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b085      	sub	sp, #20
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	43db      	mvns	r3, r3
 8006b7e:	401a      	ands	r2, r3
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	fb01 f303 	mul.w	r3, r1, r3
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	605a      	str	r2, [r3, #4]
}
 8006b8e:	bf00      	nop
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b08b      	sub	sp, #44	; 0x2c
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	689a      	ldr	r2, [r3, #8]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	fa93 f3a3 	rbit	r3, r3
 8006bb4:	613b      	str	r3, [r7, #16]
  return result;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006bc0:	2320      	movs	r3, #32
 8006bc2:	e003      	b.n	8006bcc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	fab3 f383 	clz	r3, r3
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	2103      	movs	r1, #3
 8006bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd4:	43db      	mvns	r3, r3
 8006bd6:	401a      	ands	r2, r3
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	fa93 f3a3 	rbit	r3, r3
 8006be2:	61fb      	str	r3, [r7, #28]
  return result;
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006bee:	2320      	movs	r3, #32
 8006bf0:	e003      	b.n	8006bfa <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	fab3 f383 	clz	r3, r3
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	005b      	lsls	r3, r3, #1
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006c02:	431a      	orrs	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006c08:	bf00      	nop
 8006c0a:	372c      	adds	r7, #44	; 0x2c
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b08b      	sub	sp, #44	; 0x2c
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	fa93 f3a3 	rbit	r3, r3
 8006c2e:	613b      	str	r3, [r7, #16]
  return result;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006c3a:	2320      	movs	r3, #32
 8006c3c:	e003      	b.n	8006c46 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	fab3 f383 	clz	r3, r3
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	2103      	movs	r1, #3
 8006c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	401a      	ands	r2, r3
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	fa93 f3a3 	rbit	r3, r3
 8006c5c:	61fb      	str	r3, [r7, #28]
  return result;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006c68:	2320      	movs	r3, #32
 8006c6a:	e003      	b.n	8006c74 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	fab3 f383 	clz	r3, r3
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	fa01 f303 	lsl.w	r3, r1, r3
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	60da      	str	r2, [r3, #12]
}
 8006c82:	bf00      	nop
 8006c84:	372c      	adds	r7, #44	; 0x2c
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b08b      	sub	sp, #44	; 0x2c
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	60f8      	str	r0, [r7, #12]
 8006c96:	60b9      	str	r1, [r7, #8]
 8006c98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a1a      	ldr	r2, [r3, #32]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	fa93 f3a3 	rbit	r3, r3
 8006ca8:	613b      	str	r3, [r7, #16]
  return result;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006cb4:	2320      	movs	r3, #32
 8006cb6:	e003      	b.n	8006cc0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	fab3 f383 	clz	r3, r3
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	210f      	movs	r1, #15
 8006cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	401a      	ands	r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	fa93 f3a3 	rbit	r3, r3
 8006cd6:	61fb      	str	r3, [r7, #28]
  return result;
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006ce2:	2320      	movs	r3, #32
 8006ce4:	e003      	b.n	8006cee <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	fab3 f383 	clz	r3, r3
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006cfc:	bf00      	nop
 8006cfe:	372c      	adds	r7, #44	; 0x2c
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b08b      	sub	sp, #44	; 0x2c
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	0a1b      	lsrs	r3, r3, #8
 8006d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	fa93 f3a3 	rbit	r3, r3
 8006d24:	613b      	str	r3, [r7, #16]
  return result;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006d30:	2320      	movs	r3, #32
 8006d32:	e003      	b.n	8006d3c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	fab3 f383 	clz	r3, r3
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	210f      	movs	r1, #15
 8006d40:	fa01 f303 	lsl.w	r3, r1, r3
 8006d44:	43db      	mvns	r3, r3
 8006d46:	401a      	ands	r2, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	0a1b      	lsrs	r3, r3, #8
 8006d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	fa93 f3a3 	rbit	r3, r3
 8006d54:	61fb      	str	r3, [r7, #28]
  return result;
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006d60:	2320      	movs	r3, #32
 8006d62:	e003      	b.n	8006d6c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	fab3 f383 	clz	r3, r3
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	6879      	ldr	r1, [r7, #4]
 8006d70:	fa01 f303 	lsl.w	r3, r1, r3
 8006d74:	431a      	orrs	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006d7a:	bf00      	nop
 8006d7c:	372c      	adds	r7, #44	; 0x2c
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b088      	sub	sp, #32
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	fa93 f3a3 	rbit	r3, r3
 8006d9c:	60fb      	str	r3, [r7, #12]
  return result;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <LL_GPIO_Init+0x26>
    return 32U;
 8006da8:	2320      	movs	r3, #32
 8006daa:	e003      	b.n	8006db4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	fab3 f383 	clz	r3, r3
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006db6:	e048      	b.n	8006e4a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d03a      	beq.n	8006e44 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d003      	beq.n	8006dde <LL_GPIO_Init+0x58>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d10e      	bne.n	8006dfc <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	461a      	mov	r2, r3
 8006de4:	69b9      	ldr	r1, [r7, #24]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7ff fed7 	bl	8006b9a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	6819      	ldr	r1, [r3, #0]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	461a      	mov	r2, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff feb7 	bl	8006b6a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	461a      	mov	r2, r3
 8006e02:	69b9      	ldr	r1, [r7, #24]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff ff05 	bl	8006c14 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d111      	bne.n	8006e36 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	2bff      	cmp	r3, #255	; 0xff
 8006e16:	d807      	bhi.n	8006e28 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	69b9      	ldr	r1, [r7, #24]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7ff ff34 	bl	8006c8e <LL_GPIO_SetAFPin_0_7>
 8006e26:	e006      	b.n	8006e36 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	69b9      	ldr	r1, [r7, #24]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff ff69 	bl	8006d08 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	69b9      	ldr	r1, [r7, #24]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff fe56 	bl	8006af0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	3301      	adds	r3, #1
 8006e48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	fa22 f303 	lsr.w	r3, r2, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1af      	bne.n	8006db8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3720      	adds	r7, #32
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8006e64:	b480      	push	{r7}
 8006e66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8006e68:	4b07      	ldr	r3, [pc, #28]	; (8006e88 <LL_RCC_HSI_IsReady+0x24>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e74:	d101      	bne.n	8006e7a <LL_RCC_HSI_IsReady+0x16>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <LL_RCC_HSI_IsReady+0x18>
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	40021000 	.word	0x40021000

08006e8c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8006e90:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <LL_RCC_LSE_IsReady+0x24>)
 8006e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d101      	bne.n	8006ea2 <LL_RCC_LSE_IsReady+0x16>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e000      	b.n	8006ea4 <LL_RCC_LSE_IsReady+0x18>
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	40021000 	.word	0x40021000

08006eb4 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8006eb8:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0308 	and.w	r3, r3, #8
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d101      	bne.n	8006ec8 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	40021000 	.word	0x40021000

08006ed8 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006edc:	4b04      	ldr	r3, [pc, #16]	; (8006ef0 <LL_RCC_MSI_GetRange+0x18>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	40021000 	.word	0x40021000

08006ef4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006ef8:	4b04      	ldr	r3, [pc, #16]	; (8006f0c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8006efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006efe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	40021000 	.word	0x40021000

08006f10 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006f10:	b480      	push	{r7}
 8006f12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006f14:	4b04      	ldr	r3, [pc, #16]	; (8006f28 <LL_RCC_GetSysClkSource+0x18>)
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f003 030c 	and.w	r3, r3, #12
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	40021000 	.word	0x40021000

08006f2c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006f30:	4b04      	ldr	r3, [pc, #16]	; (8006f44 <LL_RCC_GetAHBPrescaler+0x18>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	40021000 	.word	0x40021000

08006f48 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006f4c:	4b04      	ldr	r3, [pc, #16]	; (8006f60 <LL_RCC_GetAPB1Prescaler+0x18>)
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	40021000 	.word	0x40021000

08006f64 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006f68:	4b04      	ldr	r3, [pc, #16]	; (8006f7c <LL_RCC_GetAPB2Prescaler+0x18>)
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	40021000 	.word	0x40021000

08006f80 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8006f88:	4b06      	ldr	r3, [pc, #24]	; (8006fa4 <LL_RCC_GetUSARTClockSource+0x24>)
 8006f8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	401a      	ands	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	041b      	lsls	r3, r3, #16
 8006f96:	4313      	orrs	r3, r2
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	40021000 	.word	0x40021000

08006fa8 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8006fb0:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <LL_RCC_GetUARTClockSource+0x24>)
 8006fb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	401a      	ands	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	041b      	lsls	r3, r3, #16
 8006fbe:	4313      	orrs	r3, r2
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	40021000 	.word	0x40021000

08006fd0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006fd4:	4b04      	ldr	r3, [pc, #16]	; (8006fe8 <LL_RCC_PLL_GetMainSource+0x18>)
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f003 0303 	and.w	r3, r3, #3
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40021000 	.word	0x40021000

08006fec <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006fec:	b480      	push	{r7}
 8006fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006ff0:	4b04      	ldr	r3, [pc, #16]	; (8007004 <LL_RCC_PLL_GetN+0x18>)
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	0a1b      	lsrs	r3, r3, #8
 8006ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	40021000 	.word	0x40021000

08007008 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800700c:	4b04      	ldr	r3, [pc, #16]	; (8007020 <LL_RCC_PLL_GetR+0x18>)
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8007014:	4618      	mov	r0, r3
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	40021000 	.word	0x40021000

08007024 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007024:	b480      	push	{r7}
 8007026:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007028:	4b04      	ldr	r3, [pc, #16]	; (800703c <LL_RCC_PLL_GetDivider+0x18>)
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007030:	4618      	mov	r0, r3
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40021000 	.word	0x40021000

08007040 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b03      	cmp	r3, #3
 8007050:	d137      	bne.n	80070c2 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7ff ff94 	bl	8006f80 <LL_RCC_GetUSARTClockSource>
 8007058:	4603      	mov	r3, r0
 800705a:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800705e:	2b03      	cmp	r3, #3
 8007060:	f200 80b3 	bhi.w	80071ca <LL_RCC_GetUSARTClockFreq+0x18a>
 8007064:	a201      	add	r2, pc, #4	; (adr r2, 800706c <LL_RCC_GetUSARTClockFreq+0x2c>)
 8007066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706a:	bf00      	nop
 800706c:	080070ab 	.word	0x080070ab
 8007070:	0800707d 	.word	0x0800707d
 8007074:	08007085 	.word	0x08007085
 8007078:	08007097 	.word	0x08007097
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800707c:	f000 f95c 	bl	8007338 <RCC_GetSystemClockFreq>
 8007080:	60f8      	str	r0, [r7, #12]
        break;
 8007082:	e0b5      	b.n	80071f0 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8007084:	f7ff feee 	bl	8006e64 <LL_RCC_HSI_IsReady>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 809f 	beq.w	80071ce <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8007090:	4b5a      	ldr	r3, [pc, #360]	; (80071fc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8007092:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007094:	e09b      	b.n	80071ce <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8007096:	f7ff fef9 	bl	8006e8c <LL_RCC_LSE_IsReady>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 8098 	beq.w	80071d2 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 80070a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070a6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80070a8:	e093      	b.n	80071d2 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80070aa:	f000 f945 	bl	8007338 <RCC_GetSystemClockFreq>
 80070ae:	4603      	mov	r3, r0
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 f9d1 	bl	8007458 <RCC_GetHCLKClockFreq>
 80070b6:	4603      	mov	r3, r0
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 f9f7 	bl	80074ac <RCC_GetPCLK2ClockFreq>
 80070be:	60f8      	str	r0, [r7, #12]
        break;
 80070c0:	e096      	b.n	80071f0 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b0c      	cmp	r3, #12
 80070c6:	d146      	bne.n	8007156 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7ff ff59 	bl	8006f80 <LL_RCC_GetUSARTClockSource>
 80070ce:	4603      	mov	r3, r0
 80070d0:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80070d4:	2b0c      	cmp	r3, #12
 80070d6:	d87e      	bhi.n	80071d6 <LL_RCC_GetUSARTClockFreq+0x196>
 80070d8:	a201      	add	r2, pc, #4	; (adr r2, 80070e0 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80070da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070de:	bf00      	nop
 80070e0:	0800713f 	.word	0x0800713f
 80070e4:	080071d7 	.word	0x080071d7
 80070e8:	080071d7 	.word	0x080071d7
 80070ec:	080071d7 	.word	0x080071d7
 80070f0:	08007115 	.word	0x08007115
 80070f4:	080071d7 	.word	0x080071d7
 80070f8:	080071d7 	.word	0x080071d7
 80070fc:	080071d7 	.word	0x080071d7
 8007100:	0800711d 	.word	0x0800711d
 8007104:	080071d7 	.word	0x080071d7
 8007108:	080071d7 	.word	0x080071d7
 800710c:	080071d7 	.word	0x080071d7
 8007110:	0800712d 	.word	0x0800712d
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8007114:	f000 f910 	bl	8007338 <RCC_GetSystemClockFreq>
 8007118:	60f8      	str	r0, [r7, #12]
        break;
 800711a:	e069      	b.n	80071f0 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800711c:	f7ff fea2 	bl	8006e64 <LL_RCC_HSI_IsReady>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d059      	beq.n	80071da <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8007126:	4b35      	ldr	r3, [pc, #212]	; (80071fc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8007128:	60fb      	str	r3, [r7, #12]
        }
        break;
 800712a:	e056      	b.n	80071da <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800712c:	f7ff feae 	bl	8006e8c <LL_RCC_LSE_IsReady>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d053      	beq.n	80071de <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8007136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800713a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800713c:	e04f      	b.n	80071de <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800713e:	f000 f8fb 	bl	8007338 <RCC_GetSystemClockFreq>
 8007142:	4603      	mov	r3, r0
 8007144:	4618      	mov	r0, r3
 8007146:	f000 f987 	bl	8007458 <RCC_GetHCLKClockFreq>
 800714a:	4603      	mov	r3, r0
 800714c:	4618      	mov	r0, r3
 800714e:	f000 f999 	bl	8007484 <RCC_GetPCLK1ClockFreq>
 8007152:	60f8      	str	r0, [r7, #12]
        break;
 8007154:	e04c      	b.n	80071f0 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b30      	cmp	r3, #48	; 0x30
 800715a:	d142      	bne.n	80071e2 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff ff0f 	bl	8006f80 <LL_RCC_GetUSARTClockSource>
 8007162:	4603      	mov	r3, r0
 8007164:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8007168:	d01a      	beq.n	80071a0 <LL_RCC_GetUSARTClockFreq+0x160>
 800716a:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800716e:	d83a      	bhi.n	80071e6 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8007170:	4a23      	ldr	r2, [pc, #140]	; (8007200 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00c      	beq.n	8007190 <LL_RCC_GetUSARTClockFreq+0x150>
 8007176:	4a22      	ldr	r2, [pc, #136]	; (8007200 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d834      	bhi.n	80071e6 <LL_RCC_GetUSARTClockFreq+0x1a6>
 800717c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007180:	d017      	beq.n	80071b2 <LL_RCC_GetUSARTClockFreq+0x172>
 8007182:	4a20      	ldr	r2, [pc, #128]	; (8007204 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d12e      	bne.n	80071e6 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8007188:	f000 f8d6 	bl	8007338 <RCC_GetSystemClockFreq>
 800718c:	60f8      	str	r0, [r7, #12]
          break;
 800718e:	e02f      	b.n	80071f0 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8007190:	f7ff fe68 	bl	8006e64 <LL_RCC_HSI_IsReady>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d027      	beq.n	80071ea <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 800719a:	4b18      	ldr	r3, [pc, #96]	; (80071fc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800719c:	60fb      	str	r3, [r7, #12]
          }
          break;
 800719e:	e024      	b.n	80071ea <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80071a0:	f7ff fe74 	bl	8006e8c <LL_RCC_LSE_IsReady>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d021      	beq.n	80071ee <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 80071aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ae:	60fb      	str	r3, [r7, #12]
          }
          break;
 80071b0:	e01d      	b.n	80071ee <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80071b2:	f000 f8c1 	bl	8007338 <RCC_GetSystemClockFreq>
 80071b6:	4603      	mov	r3, r0
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 f94d 	bl	8007458 <RCC_GetHCLKClockFreq>
 80071be:	4603      	mov	r3, r0
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 f95f 	bl	8007484 <RCC_GetPCLK1ClockFreq>
 80071c6:	60f8      	str	r0, [r7, #12]
          break;
 80071c8:	e012      	b.n	80071f0 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80071ca:	bf00      	nop
 80071cc:	e010      	b.n	80071f0 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80071ce:	bf00      	nop
 80071d0:	e00e      	b.n	80071f0 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80071d2:	bf00      	nop
 80071d4:	e00c      	b.n	80071f0 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80071d6:	bf00      	nop
 80071d8:	e00a      	b.n	80071f0 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80071da:	bf00      	nop
 80071dc:	e008      	b.n	80071f0 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80071de:	bf00      	nop
 80071e0:	e006      	b.n	80071f0 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 80071e2:	bf00      	nop
 80071e4:	e004      	b.n	80071f0 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80071e6:	bf00      	nop
 80071e8:	e002      	b.n	80071f0 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80071ea:	bf00      	nop
 80071ec:	e000      	b.n	80071f0 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80071ee:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80071f0:	68fb      	ldr	r3, [r7, #12]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	00f42400 	.word	0x00f42400
 8007200:	00300020 	.word	0x00300020
 8007204:	00300010 	.word	0x00300010

08007208 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2bc0      	cmp	r3, #192	; 0xc0
 8007218:	d136      	bne.n	8007288 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff fec4 	bl	8006fa8 <LL_RCC_GetUARTClockSource>
 8007220:	4603      	mov	r3, r0
 8007222:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8007226:	d01a      	beq.n	800725e <LL_RCC_GetUARTClockFreq+0x56>
 8007228:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800722c:	d82e      	bhi.n	800728c <LL_RCC_GetUARTClockFreq+0x84>
 800722e:	4a3d      	ldr	r2, [pc, #244]	; (8007324 <LL_RCC_GetUARTClockFreq+0x11c>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d00c      	beq.n	800724e <LL_RCC_GetUARTClockFreq+0x46>
 8007234:	4a3b      	ldr	r2, [pc, #236]	; (8007324 <LL_RCC_GetUARTClockFreq+0x11c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d828      	bhi.n	800728c <LL_RCC_GetUARTClockFreq+0x84>
 800723a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800723e:	d017      	beq.n	8007270 <LL_RCC_GetUARTClockFreq+0x68>
 8007240:	4a39      	ldr	r2, [pc, #228]	; (8007328 <LL_RCC_GetUARTClockFreq+0x120>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d122      	bne.n	800728c <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8007246:	f000 f877 	bl	8007338 <RCC_GetSystemClockFreq>
 800724a:	60f8      	str	r0, [r7, #12]
        break;
 800724c:	e023      	b.n	8007296 <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800724e:	f7ff fe09 	bl	8006e64 <LL_RCC_HSI_IsReady>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01b      	beq.n	8007290 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8007258:	4b34      	ldr	r3, [pc, #208]	; (800732c <LL_RCC_GetUARTClockFreq+0x124>)
 800725a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800725c:	e018      	b.n	8007290 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800725e:	f7ff fe15 	bl	8006e8c <LL_RCC_LSE_IsReady>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d015      	beq.n	8007294 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8007268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800726c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800726e:	e011      	b.n	8007294 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8007270:	f000 f862 	bl	8007338 <RCC_GetSystemClockFreq>
 8007274:	4603      	mov	r3, r0
 8007276:	4618      	mov	r0, r3
 8007278:	f000 f8ee 	bl	8007458 <RCC_GetHCLKClockFreq>
 800727c:	4603      	mov	r3, r0
 800727e:	4618      	mov	r0, r3
 8007280:	f000 f900 	bl	8007484 <RCC_GetPCLK1ClockFreq>
 8007284:	60f8      	str	r0, [r7, #12]
        break;
 8007286:	e006      	b.n	8007296 <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8007288:	bf00      	nop
 800728a:	e004      	b.n	8007296 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 800728c:	bf00      	nop
 800728e:	e002      	b.n	8007296 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8007290:	bf00      	nop
 8007292:	e000      	b.n	8007296 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8007294:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800729c:	d136      	bne.n	800730c <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7ff fe82 	bl	8006fa8 <LL_RCC_GetUARTClockSource>
 80072a4:	4603      	mov	r3, r0
 80072a6:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80072aa:	d01a      	beq.n	80072e2 <LL_RCC_GetUARTClockFreq+0xda>
 80072ac:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80072b0:	d82e      	bhi.n	8007310 <LL_RCC_GetUARTClockFreq+0x108>
 80072b2:	4a1f      	ldr	r2, [pc, #124]	; (8007330 <LL_RCC_GetUARTClockFreq+0x128>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d00c      	beq.n	80072d2 <LL_RCC_GetUARTClockFreq+0xca>
 80072b8:	4a1d      	ldr	r2, [pc, #116]	; (8007330 <LL_RCC_GetUARTClockFreq+0x128>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d828      	bhi.n	8007310 <LL_RCC_GetUARTClockFreq+0x108>
 80072be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072c2:	d017      	beq.n	80072f4 <LL_RCC_GetUARTClockFreq+0xec>
 80072c4:	4a1b      	ldr	r2, [pc, #108]	; (8007334 <LL_RCC_GetUARTClockFreq+0x12c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d122      	bne.n	8007310 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80072ca:	f000 f835 	bl	8007338 <RCC_GetSystemClockFreq>
 80072ce:	60f8      	str	r0, [r7, #12]
        break;
 80072d0:	e023      	b.n	800731a <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80072d2:	f7ff fdc7 	bl	8006e64 <LL_RCC_HSI_IsReady>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01b      	beq.n	8007314 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 80072dc:	4b13      	ldr	r3, [pc, #76]	; (800732c <LL_RCC_GetUARTClockFreq+0x124>)
 80072de:	60fb      	str	r3, [r7, #12]
        }
        break;
 80072e0:	e018      	b.n	8007314 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80072e2:	f7ff fdd3 	bl	8006e8c <LL_RCC_LSE_IsReady>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d015      	beq.n	8007318 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 80072ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072f0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80072f2:	e011      	b.n	8007318 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80072f4:	f000 f820 	bl	8007338 <RCC_GetSystemClockFreq>
 80072f8:	4603      	mov	r3, r0
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 f8ac 	bl	8007458 <RCC_GetHCLKClockFreq>
 8007300:	4603      	mov	r3, r0
 8007302:	4618      	mov	r0, r3
 8007304:	f000 f8be 	bl	8007484 <RCC_GetPCLK1ClockFreq>
 8007308:	60f8      	str	r0, [r7, #12]
        break;
 800730a:	e006      	b.n	800731a <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 800730c:	bf00      	nop
 800730e:	e004      	b.n	800731a <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8007310:	bf00      	nop
 8007312:	e002      	b.n	800731a <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8007314:	bf00      	nop
 8007316:	e000      	b.n	800731a <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8007318:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800731a:	68fb      	ldr	r3, [r7, #12]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	00c00080 	.word	0x00c00080
 8007328:	00c00040 	.word	0x00c00040
 800732c:	00f42400 	.word	0x00f42400
 8007330:	03000200 	.word	0x03000200
 8007334:	03000100 	.word	0x03000100

08007338 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800733e:	f7ff fde7 	bl	8006f10 <LL_RCC_GetSysClkSource>
 8007342:	4603      	mov	r3, r0
 8007344:	2b0c      	cmp	r3, #12
 8007346:	d851      	bhi.n	80073ec <RCC_GetSystemClockFreq+0xb4>
 8007348:	a201      	add	r2, pc, #4	; (adr r2, 8007350 <RCC_GetSystemClockFreq+0x18>)
 800734a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734e:	bf00      	nop
 8007350:	08007385 	.word	0x08007385
 8007354:	080073ed 	.word	0x080073ed
 8007358:	080073ed 	.word	0x080073ed
 800735c:	080073ed 	.word	0x080073ed
 8007360:	080073d9 	.word	0x080073d9
 8007364:	080073ed 	.word	0x080073ed
 8007368:	080073ed 	.word	0x080073ed
 800736c:	080073ed 	.word	0x080073ed
 8007370:	080073df 	.word	0x080073df
 8007374:	080073ed 	.word	0x080073ed
 8007378:	080073ed 	.word	0x080073ed
 800737c:	080073ed 	.word	0x080073ed
 8007380:	080073e5 	.word	0x080073e5
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007384:	f7ff fd96 	bl	8006eb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d111      	bne.n	80073b2 <RCC_GetSystemClockFreq+0x7a>
 800738e:	f7ff fd91 	bl	8006eb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d004      	beq.n	80073a2 <RCC_GetSystemClockFreq+0x6a>
 8007398:	f7ff fd9e 	bl	8006ed8 <LL_RCC_MSI_GetRange>
 800739c:	4603      	mov	r3, r0
 800739e:	0a1b      	lsrs	r3, r3, #8
 80073a0:	e003      	b.n	80073aa <RCC_GetSystemClockFreq+0x72>
 80073a2:	f7ff fda7 	bl	8006ef4 <LL_RCC_MSI_GetRangeAfterStandby>
 80073a6:	4603      	mov	r3, r0
 80073a8:	0a1b      	lsrs	r3, r3, #8
 80073aa:	4a28      	ldr	r2, [pc, #160]	; (800744c <RCC_GetSystemClockFreq+0x114>)
 80073ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073b0:	e010      	b.n	80073d4 <RCC_GetSystemClockFreq+0x9c>
 80073b2:	f7ff fd7f 	bl	8006eb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <RCC_GetSystemClockFreq+0x8e>
 80073bc:	f7ff fd8c 	bl	8006ed8 <LL_RCC_MSI_GetRange>
 80073c0:	4603      	mov	r3, r0
 80073c2:	091b      	lsrs	r3, r3, #4
 80073c4:	e003      	b.n	80073ce <RCC_GetSystemClockFreq+0x96>
 80073c6:	f7ff fd95 	bl	8006ef4 <LL_RCC_MSI_GetRangeAfterStandby>
 80073ca:	4603      	mov	r3, r0
 80073cc:	091b      	lsrs	r3, r3, #4
 80073ce:	4a1f      	ldr	r2, [pc, #124]	; (800744c <RCC_GetSystemClockFreq+0x114>)
 80073d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073d4:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80073d6:	e033      	b.n	8007440 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80073d8:	4b1d      	ldr	r3, [pc, #116]	; (8007450 <RCC_GetSystemClockFreq+0x118>)
 80073da:	607b      	str	r3, [r7, #4]
      break;
 80073dc:	e030      	b.n	8007440 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80073de:	4b1d      	ldr	r3, [pc, #116]	; (8007454 <RCC_GetSystemClockFreq+0x11c>)
 80073e0:	607b      	str	r3, [r7, #4]
      break;
 80073e2:	e02d      	b.n	8007440 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80073e4:	f000 f876 	bl	80074d4 <RCC_PLL_GetFreqDomain_SYS>
 80073e8:	6078      	str	r0, [r7, #4]
      break;
 80073ea:	e029      	b.n	8007440 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80073ec:	f7ff fd62 	bl	8006eb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d111      	bne.n	800741a <RCC_GetSystemClockFreq+0xe2>
 80073f6:	f7ff fd5d 	bl	8006eb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d004      	beq.n	800740a <RCC_GetSystemClockFreq+0xd2>
 8007400:	f7ff fd6a 	bl	8006ed8 <LL_RCC_MSI_GetRange>
 8007404:	4603      	mov	r3, r0
 8007406:	0a1b      	lsrs	r3, r3, #8
 8007408:	e003      	b.n	8007412 <RCC_GetSystemClockFreq+0xda>
 800740a:	f7ff fd73 	bl	8006ef4 <LL_RCC_MSI_GetRangeAfterStandby>
 800740e:	4603      	mov	r3, r0
 8007410:	0a1b      	lsrs	r3, r3, #8
 8007412:	4a0e      	ldr	r2, [pc, #56]	; (800744c <RCC_GetSystemClockFreq+0x114>)
 8007414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007418:	e010      	b.n	800743c <RCC_GetSystemClockFreq+0x104>
 800741a:	f7ff fd4b 	bl	8006eb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d004      	beq.n	800742e <RCC_GetSystemClockFreq+0xf6>
 8007424:	f7ff fd58 	bl	8006ed8 <LL_RCC_MSI_GetRange>
 8007428:	4603      	mov	r3, r0
 800742a:	091b      	lsrs	r3, r3, #4
 800742c:	e003      	b.n	8007436 <RCC_GetSystemClockFreq+0xfe>
 800742e:	f7ff fd61 	bl	8006ef4 <LL_RCC_MSI_GetRangeAfterStandby>
 8007432:	4603      	mov	r3, r0
 8007434:	091b      	lsrs	r3, r3, #4
 8007436:	4a05      	ldr	r2, [pc, #20]	; (800744c <RCC_GetSystemClockFreq+0x114>)
 8007438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800743c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800743e:	bf00      	nop
  }

  return frequency;
 8007440:	687b      	ldr	r3, [r7, #4]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	0800b910 	.word	0x0800b910
 8007450:	00f42400 	.word	0x00f42400
 8007454:	007a1200 	.word	0x007a1200

08007458 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007460:	f7ff fd64 	bl	8006f2c <LL_RCC_GetAHBPrescaler>
 8007464:	4603      	mov	r3, r0
 8007466:	091b      	lsrs	r3, r3, #4
 8007468:	f003 030f 	and.w	r3, r3, #15
 800746c:	4a04      	ldr	r2, [pc, #16]	; (8007480 <RCC_GetHCLKClockFreq+0x28>)
 800746e:	5cd3      	ldrb	r3, [r2, r3]
 8007470:	461a      	mov	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	40d3      	lsrs	r3, r2
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	0800b8f8 	.word	0x0800b8f8

08007484 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800748c:	f7ff fd5c 	bl	8006f48 <LL_RCC_GetAPB1Prescaler>
 8007490:	4603      	mov	r3, r0
 8007492:	0a1b      	lsrs	r3, r3, #8
 8007494:	4a04      	ldr	r2, [pc, #16]	; (80074a8 <RCC_GetPCLK1ClockFreq+0x24>)
 8007496:	5cd3      	ldrb	r3, [r2, r3]
 8007498:	461a      	mov	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	40d3      	lsrs	r3, r2
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	0800b908 	.word	0x0800b908

080074ac <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80074b4:	f7ff fd56 	bl	8006f64 <LL_RCC_GetAPB2Prescaler>
 80074b8:	4603      	mov	r3, r0
 80074ba:	0adb      	lsrs	r3, r3, #11
 80074bc:	4a04      	ldr	r2, [pc, #16]	; (80074d0 <RCC_GetPCLK2ClockFreq+0x24>)
 80074be:	5cd3      	ldrb	r3, [r2, r3]
 80074c0:	461a      	mov	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	40d3      	lsrs	r3, r2
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	0800b908 	.word	0x0800b908

080074d4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80074d4:	b590      	push	{r4, r7, lr}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80074da:	f7ff fd79 	bl	8006fd0 <LL_RCC_PLL_GetMainSource>
 80074de:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d036      	beq.n	8007554 <RCC_PLL_GetFreqDomain_SYS+0x80>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d836      	bhi.n	800755a <RCC_PLL_GetFreqDomain_SYS+0x86>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d003      	beq.n	80074fa <RCC_PLL_GetFreqDomain_SYS+0x26>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d02a      	beq.n	800754e <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80074f8:	e02f      	b.n	800755a <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80074fa:	f7ff fcdb 	bl	8006eb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d111      	bne.n	8007528 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8007504:	f7ff fcd6 	bl	8006eb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d004      	beq.n	8007518 <RCC_PLL_GetFreqDomain_SYS+0x44>
 800750e:	f7ff fce3 	bl	8006ed8 <LL_RCC_MSI_GetRange>
 8007512:	4603      	mov	r3, r0
 8007514:	0a1b      	lsrs	r3, r3, #8
 8007516:	e003      	b.n	8007520 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8007518:	f7ff fcec 	bl	8006ef4 <LL_RCC_MSI_GetRangeAfterStandby>
 800751c:	4603      	mov	r3, r0
 800751e:	0a1b      	lsrs	r3, r3, #8
 8007520:	4a2f      	ldr	r2, [pc, #188]	; (80075e0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8007522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007526:	e010      	b.n	800754a <RCC_PLL_GetFreqDomain_SYS+0x76>
 8007528:	f7ff fcc4 	bl	8006eb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d004      	beq.n	800753c <RCC_PLL_GetFreqDomain_SYS+0x68>
 8007532:	f7ff fcd1 	bl	8006ed8 <LL_RCC_MSI_GetRange>
 8007536:	4603      	mov	r3, r0
 8007538:	091b      	lsrs	r3, r3, #4
 800753a:	e003      	b.n	8007544 <RCC_PLL_GetFreqDomain_SYS+0x70>
 800753c:	f7ff fcda 	bl	8006ef4 <LL_RCC_MSI_GetRangeAfterStandby>
 8007540:	4603      	mov	r3, r0
 8007542:	091b      	lsrs	r3, r3, #4
 8007544:	4a26      	ldr	r2, [pc, #152]	; (80075e0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8007546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800754a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800754c:	e02f      	b.n	80075ae <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800754e:	4b25      	ldr	r3, [pc, #148]	; (80075e4 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8007550:	607b      	str	r3, [r7, #4]
      break;
 8007552:	e02c      	b.n	80075ae <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007554:	4b24      	ldr	r3, [pc, #144]	; (80075e8 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8007556:	607b      	str	r3, [r7, #4]
      break;
 8007558:	e029      	b.n	80075ae <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800755a:	f7ff fcab 	bl	8006eb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d111      	bne.n	8007588 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8007564:	f7ff fca6 	bl	8006eb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d004      	beq.n	8007578 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 800756e:	f7ff fcb3 	bl	8006ed8 <LL_RCC_MSI_GetRange>
 8007572:	4603      	mov	r3, r0
 8007574:	0a1b      	lsrs	r3, r3, #8
 8007576:	e003      	b.n	8007580 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8007578:	f7ff fcbc 	bl	8006ef4 <LL_RCC_MSI_GetRangeAfterStandby>
 800757c:	4603      	mov	r3, r0
 800757e:	0a1b      	lsrs	r3, r3, #8
 8007580:	4a17      	ldr	r2, [pc, #92]	; (80075e0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8007582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007586:	e010      	b.n	80075aa <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8007588:	f7ff fc94 	bl	8006eb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d004      	beq.n	800759c <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8007592:	f7ff fca1 	bl	8006ed8 <LL_RCC_MSI_GetRange>
 8007596:	4603      	mov	r3, r0
 8007598:	091b      	lsrs	r3, r3, #4
 800759a:	e003      	b.n	80075a4 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 800759c:	f7ff fcaa 	bl	8006ef4 <LL_RCC_MSI_GetRangeAfterStandby>
 80075a0:	4603      	mov	r3, r0
 80075a2:	091b      	lsrs	r3, r3, #4
 80075a4:	4a0e      	ldr	r2, [pc, #56]	; (80075e0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80075a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075aa:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80075ac:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80075ae:	f7ff fd39 	bl	8007024 <LL_RCC_PLL_GetDivider>
 80075b2:	4603      	mov	r3, r0
 80075b4:	091b      	lsrs	r3, r3, #4
 80075b6:	3301      	adds	r3, #1
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	fbb2 f4f3 	udiv	r4, r2, r3
 80075be:	f7ff fd15 	bl	8006fec <LL_RCC_PLL_GetN>
 80075c2:	4603      	mov	r3, r0
 80075c4:	fb03 f404 	mul.w	r4, r3, r4
 80075c8:	f7ff fd1e 	bl	8007008 <LL_RCC_PLL_GetR>
 80075cc:	4603      	mov	r3, r0
 80075ce:	0e5b      	lsrs	r3, r3, #25
 80075d0:	3301      	adds	r3, #1
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80075d8:	4618      	mov	r0, r3
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd90      	pop	{r4, r7, pc}
 80075e0:	0800b910 	.word	0x0800b910
 80075e4:	00f42400 	.word	0x00f42400
 80075e8:	007a1200 	.word	0x007a1200

080075ec <LL_USART_IsEnabled>:
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d101      	bne.n	8007604 <LL_USART_IsEnabled+0x18>
 8007600:	2301      	movs	r3, #1
 8007602:	e000      	b.n	8007606 <LL_USART_IsEnabled+0x1a>
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <LL_USART_SetStopBitsLength>:
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	431a      	orrs	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	605a      	str	r2, [r3, #4]
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <LL_USART_SetHWFlowCtrl>:
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	609a      	str	r2, [r3, #8]
}
 8007652:	bf00      	nop
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <LL_USART_SetBaudRate>:
{
 800765e:	b480      	push	{r7}
 8007660:	b087      	sub	sp, #28
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	607a      	str	r2, [r7, #4]
 800766a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007672:	d11a      	bne.n	80076aa <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	005a      	lsls	r2, r3, #1
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	085b      	lsrs	r3, r3, #1
 800767c:	441a      	add	r2, r3
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	fbb2 f3f3 	udiv	r3, r2, r3
 8007684:	b29b      	uxth	r3, r3
 8007686:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800768e:	4013      	ands	r3, r2
 8007690:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	085b      	lsrs	r3, r3, #1
 8007696:	b29b      	uxth	r3, r3
 8007698:	f003 0307 	and.w	r3, r3, #7
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	4313      	orrs	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	60da      	str	r2, [r3, #12]
}
 80076a8:	e00a      	b.n	80076c0 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	085a      	lsrs	r2, r3, #1
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	441a      	add	r2, r3
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	461a      	mov	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	60da      	str	r2, [r3, #12]
}
 80076c0:	bf00      	nop
 80076c2:	371c      	adds	r7, #28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80076da:	2300      	movs	r3, #0
 80076dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7ff ff84 	bl	80075ec <LL_USART_IsEnabled>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d15b      	bne.n	80077a2 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	4b2f      	ldr	r3, [pc, #188]	; (80077ac <LL_USART_Init+0xe0>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	6851      	ldr	r1, [r2, #4]
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	68d2      	ldr	r2, [r2, #12]
 80076fa:	4311      	orrs	r1, r2
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	6912      	ldr	r2, [r2, #16]
 8007700:	4311      	orrs	r1, r2
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	6992      	ldr	r2, [r2, #24]
 8007706:	430a      	orrs	r2, r1
 8007708:	431a      	orrs	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7ff ff7c 	bl	8007612 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff ff89 	bl	8007638 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a21      	ldr	r2, [pc, #132]	; (80077b0 <LL_USART_Init+0xe4>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d104      	bne.n	8007738 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800772e:	2003      	movs	r0, #3
 8007730:	f7ff fc86 	bl	8007040 <LL_RCC_GetUSARTClockFreq>
 8007734:	60b8      	str	r0, [r7, #8]
 8007736:	e023      	b.n	8007780 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a1e      	ldr	r2, [pc, #120]	; (80077b4 <LL_USART_Init+0xe8>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d104      	bne.n	800774a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8007740:	200c      	movs	r0, #12
 8007742:	f7ff fc7d 	bl	8007040 <LL_RCC_GetUSARTClockFreq>
 8007746:	60b8      	str	r0, [r7, #8]
 8007748:	e01a      	b.n	8007780 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a1a      	ldr	r2, [pc, #104]	; (80077b8 <LL_USART_Init+0xec>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d104      	bne.n	800775c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8007752:	2030      	movs	r0, #48	; 0x30
 8007754:	f7ff fc74 	bl	8007040 <LL_RCC_GetUSARTClockFreq>
 8007758:	60b8      	str	r0, [r7, #8]
 800775a:	e011      	b.n	8007780 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a17      	ldr	r2, [pc, #92]	; (80077bc <LL_USART_Init+0xf0>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d104      	bne.n	800776e <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8007764:	20c0      	movs	r0, #192	; 0xc0
 8007766:	f7ff fd4f 	bl	8007208 <LL_RCC_GetUARTClockFreq>
 800776a:	60b8      	str	r0, [r7, #8]
 800776c:	e008      	b.n	8007780 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a13      	ldr	r2, [pc, #76]	; (80077c0 <LL_USART_Init+0xf4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d104      	bne.n	8007780 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8007776:	f44f 7040 	mov.w	r0, #768	; 0x300
 800777a:	f7ff fd45 	bl	8007208 <LL_RCC_GetUARTClockFreq>
 800777e:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00d      	beq.n	80077a2 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d009      	beq.n	80077a2 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 800778e:	2300      	movs	r3, #0
 8007790:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	699a      	ldr	r2, [r3, #24]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68b9      	ldr	r1, [r7, #8]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7ff ff5e 	bl	800765e <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	efff69f3 	.word	0xefff69f3
 80077b0:	40013800 	.word	0x40013800
 80077b4:	40004400 	.word	0x40004400
 80077b8:	40004800 	.word	0x40004800
 80077bc:	40004c00 	.word	0x40004c00
 80077c0:	40005000 	.word	0x40005000

080077c4 <__NVIC_SetPriority>:
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	4603      	mov	r3, r0
 80077cc:	6039      	str	r1, [r7, #0]
 80077ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	db0a      	blt.n	80077ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	490c      	ldr	r1, [pc, #48]	; (8007810 <__NVIC_SetPriority+0x4c>)
 80077de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077e2:	0112      	lsls	r2, r2, #4
 80077e4:	b2d2      	uxtb	r2, r2
 80077e6:	440b      	add	r3, r1
 80077e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80077ec:	e00a      	b.n	8007804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	4908      	ldr	r1, [pc, #32]	; (8007814 <__NVIC_SetPriority+0x50>)
 80077f4:	79fb      	ldrb	r3, [r7, #7]
 80077f6:	f003 030f 	and.w	r3, r3, #15
 80077fa:	3b04      	subs	r3, #4
 80077fc:	0112      	lsls	r2, r2, #4
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	440b      	add	r3, r1
 8007802:	761a      	strb	r2, [r3, #24]
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	e000e100 	.word	0xe000e100
 8007814:	e000ed00 	.word	0xe000ed00

08007818 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007818:	b580      	push	{r7, lr}
 800781a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800781c:	4b05      	ldr	r3, [pc, #20]	; (8007834 <SysTick_Handler+0x1c>)
 800781e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007820:	f002 f906 	bl	8009a30 <xTaskGetSchedulerState>
 8007824:	4603      	mov	r3, r0
 8007826:	2b01      	cmp	r3, #1
 8007828:	d001      	beq.n	800782e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800782a:	f002 ffa5 	bl	800a778 <xPortSysTickHandler>
  }
}
 800782e:	bf00      	nop
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	e000e010 	.word	0xe000e010

08007838 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800783c:	2100      	movs	r1, #0
 800783e:	f06f 0004 	mvn.w	r0, #4
 8007842:	f7ff ffbf 	bl	80077c4 <__NVIC_SetPriority>
#endif
}
 8007846:	bf00      	nop
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007852:	f3ef 8305 	mrs	r3, IPSR
 8007856:	603b      	str	r3, [r7, #0]
  return(result);
 8007858:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800785e:	f06f 0305 	mvn.w	r3, #5
 8007862:	607b      	str	r3, [r7, #4]
 8007864:	e00c      	b.n	8007880 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007866:	4b0a      	ldr	r3, [pc, #40]	; (8007890 <osKernelInitialize+0x44>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d105      	bne.n	800787a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800786e:	4b08      	ldr	r3, [pc, #32]	; (8007890 <osKernelInitialize+0x44>)
 8007870:	2201      	movs	r2, #1
 8007872:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007874:	2300      	movs	r3, #0
 8007876:	607b      	str	r3, [r7, #4]
 8007878:	e002      	b.n	8007880 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800787a:	f04f 33ff 	mov.w	r3, #4294967295
 800787e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007880:	687b      	ldr	r3, [r7, #4]
}
 8007882:	4618      	mov	r0, r3
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	20000720 	.word	0x20000720

08007894 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800789a:	f3ef 8305 	mrs	r3, IPSR
 800789e:	603b      	str	r3, [r7, #0]
  return(result);
 80078a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80078a6:	f06f 0305 	mvn.w	r3, #5
 80078aa:	607b      	str	r3, [r7, #4]
 80078ac:	e010      	b.n	80078d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80078ae:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <osKernelStart+0x48>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d109      	bne.n	80078ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80078b6:	f7ff ffbf 	bl	8007838 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80078ba:	4b08      	ldr	r3, [pc, #32]	; (80078dc <osKernelStart+0x48>)
 80078bc:	2202      	movs	r2, #2
 80078be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80078c0:	f001 fc6e 	bl	80091a0 <vTaskStartScheduler>
      stat = osOK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	607b      	str	r3, [r7, #4]
 80078c8:	e002      	b.n	80078d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80078ca:	f04f 33ff 	mov.w	r3, #4294967295
 80078ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80078d0:	687b      	ldr	r3, [r7, #4]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20000720 	.word	0x20000720

080078e0 <osKernelLock>:

int32_t osKernelLock (void) {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078e6:	f3ef 8305 	mrs	r3, IPSR
 80078ea:	603b      	str	r3, [r7, #0]
  return(result);
 80078ec:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d003      	beq.n	80078fa <osKernelLock+0x1a>
    lock = (int32_t)osErrorISR;
 80078f2:	f06f 0305 	mvn.w	r3, #5
 80078f6:	607b      	str	r3, [r7, #4]
 80078f8:	e013      	b.n	8007922 <osKernelLock+0x42>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 80078fa:	f002 f899 	bl	8009a30 <xTaskGetSchedulerState>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <osKernelLock+0x2a>
 8007904:	2b02      	cmp	r3, #2
 8007906:	d003      	beq.n	8007910 <osKernelLock+0x30>
 8007908:	e007      	b.n	800791a <osKernelLock+0x3a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 800790a:	2301      	movs	r3, #1
 800790c:	607b      	str	r3, [r7, #4]
        break;
 800790e:	e008      	b.n	8007922 <osKernelLock+0x42>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 8007910:	f001 fcac 	bl	800926c <vTaskSuspendAll>
        lock = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	607b      	str	r3, [r7, #4]
        break;
 8007918:	e003      	b.n	8007922 <osKernelLock+0x42>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 800791a:	f04f 33ff 	mov.w	r3, #4294967295
 800791e:	607b      	str	r3, [r7, #4]
        break;
 8007920:	bf00      	nop
    }
  }

  return (lock);
 8007922:	687b      	ldr	r3, [r7, #4]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <osKernelUnlock>:

int32_t osKernelUnlock (void) {
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007932:	f3ef 8305 	mrs	r3, IPSR
 8007936:	603b      	str	r3, [r7, #0]
  return(result);
 8007938:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <osKernelUnlock+0x1a>
    lock = (int32_t)osErrorISR;
 800793e:	f06f 0305 	mvn.w	r3, #5
 8007942:	607b      	str	r3, [r7, #4]
 8007944:	e01f      	b.n	8007986 <osKernelUnlock+0x5a>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8007946:	f002 f873 	bl	8009a30 <xTaskGetSchedulerState>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <osKernelUnlock+0x2a>
 8007950:	2b02      	cmp	r3, #2
 8007952:	d010      	beq.n	8007976 <osKernelUnlock+0x4a>
 8007954:	e012      	b.n	800797c <osKernelUnlock+0x50>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8007956:	2301      	movs	r3, #1
 8007958:	607b      	str	r3, [r7, #4]

        if (xTaskResumeAll() != pdTRUE) {
 800795a:	f001 fc95 	bl	8009288 <xTaskResumeAll>
 800795e:	4603      	mov	r3, r0
 8007960:	2b01      	cmp	r3, #1
 8007962:	d00f      	beq.n	8007984 <osKernelUnlock+0x58>
          if (xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) {
 8007964:	f002 f864 	bl	8009a30 <xTaskGetSchedulerState>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10a      	bne.n	8007984 <osKernelUnlock+0x58>
            lock = (int32_t)osError;
 800796e:	f04f 33ff 	mov.w	r3, #4294967295
 8007972:	607b      	str	r3, [r7, #4]
          }
        }
        break;
 8007974:	e006      	b.n	8007984 <osKernelUnlock+0x58>

      case taskSCHEDULER_RUNNING:
        lock = 0;
 8007976:	2300      	movs	r3, #0
 8007978:	607b      	str	r3, [r7, #4]
        break;
 800797a:	e004      	b.n	8007986 <osKernelUnlock+0x5a>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 800797c:	f04f 33ff 	mov.w	r3, #4294967295
 8007980:	607b      	str	r3, [r7, #4]
        break;
 8007982:	e000      	b.n	8007986 <osKernelUnlock+0x5a>
        break;
 8007984:	bf00      	nop
    }
  }

  return (lock);
 8007986:	687b      	ldr	r3, [r7, #4]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007990:	b580      	push	{r7, lr}
 8007992:	b08e      	sub	sp, #56	; 0x38
 8007994:	af04      	add	r7, sp, #16
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800799c:	2300      	movs	r3, #0
 800799e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079a0:	f3ef 8305 	mrs	r3, IPSR
 80079a4:	617b      	str	r3, [r7, #20]
  return(result);
 80079a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d17e      	bne.n	8007aaa <osThreadNew+0x11a>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d07b      	beq.n	8007aaa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80079b2:	2380      	movs	r3, #128	; 0x80
 80079b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80079b6:	2318      	movs	r3, #24
 80079b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80079ba:	2300      	movs	r3, #0
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80079be:	f04f 33ff 	mov.w	r3, #4294967295
 80079c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d045      	beq.n	8007a56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d002      	beq.n	80079d8 <osThreadNew+0x48>
        name = attr->name;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d008      	beq.n	80079fe <osThreadNew+0x6e>
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	2b38      	cmp	r3, #56	; 0x38
 80079f0:	d805      	bhi.n	80079fe <osThreadNew+0x6e>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <osThreadNew+0x72>
        return (NULL);
 80079fe:	2300      	movs	r3, #0
 8007a00:	e054      	b.n	8007aac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	089b      	lsrs	r3, r3, #2
 8007a10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00e      	beq.n	8007a38 <osThreadNew+0xa8>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	2b5b      	cmp	r3, #91	; 0x5b
 8007a20:	d90a      	bls.n	8007a38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d006      	beq.n	8007a38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <osThreadNew+0xa8>
        mem = 1;
 8007a32:	2301      	movs	r3, #1
 8007a34:	61bb      	str	r3, [r7, #24]
 8007a36:	e010      	b.n	8007a5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10c      	bne.n	8007a5a <osThreadNew+0xca>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d108      	bne.n	8007a5a <osThreadNew+0xca>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d104      	bne.n	8007a5a <osThreadNew+0xca>
          mem = 0;
 8007a50:	2300      	movs	r3, #0
 8007a52:	61bb      	str	r3, [r7, #24]
 8007a54:	e001      	b.n	8007a5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d110      	bne.n	8007a82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a68:	9202      	str	r2, [sp, #8]
 8007a6a:	9301      	str	r3, [sp, #4]
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	6a3a      	ldr	r2, [r7, #32]
 8007a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f001 f8e4 	bl	8008c44 <xTaskCreateStatic>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	613b      	str	r3, [r7, #16]
 8007a80:	e013      	b.n	8007aaa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d110      	bne.n	8007aaa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	f107 0310 	add.w	r3, r7, #16
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f001 f92f 	bl	8008cfe <xTaskCreate>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d001      	beq.n	8007aaa <osThreadNew+0x11a>
            hTask = NULL;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007aaa:	693b      	ldr	r3, [r7, #16]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3728      	adds	r7, #40	; 0x28
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ac0:	f3ef 8305 	mrs	r3, IPSR
 8007ac4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ac6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8007acc:	f06f 0305 	mvn.w	r3, #5
 8007ad0:	617b      	str	r3, [r7, #20]
 8007ad2:	e017      	b.n	8007b04 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d103      	bne.n	8007ae2 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8007ada:	f06f 0303 	mvn.w	r3, #3
 8007ade:	617b      	str	r3, [r7, #20]
 8007ae0:	e010      	b.n	8007b04 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8007ae2:	6938      	ldr	r0, [r7, #16]
 8007ae4:	f001 faf6 	bl	80090d4 <eTaskGetState>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
 8007aee:	2b04      	cmp	r3, #4
 8007af0:	d005      	beq.n	8007afe <osThreadTerminate+0x4a>
      stat = osOK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8007af6:	6938      	ldr	r0, [r7, #16]
 8007af8:	f001 fa46 	bl	8008f88 <vTaskDelete>
 8007afc:	e002      	b.n	8007b04 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8007afe:	f06f 0302 	mvn.w	r3, #2
 8007b02:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8007b04:	697b      	ldr	r3, [r7, #20]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b16:	f3ef 8305 	mrs	r3, IPSR
 8007b1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d003      	beq.n	8007b2a <osDelay+0x1c>
    stat = osErrorISR;
 8007b22:	f06f 0305 	mvn.w	r3, #5
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	e007      	b.n	8007b3a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <osDelay+0x2c>
      vTaskDelay(ticks);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 fa99 	bl	800906c <vTaskDelay>
    }
  }

  return (stat);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f002 fc37 	bl	800a3c0 <pvTimerGetTimerID>
 8007b52:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d005      	beq.n	8007b66 <TimerCallback+0x22>
    callb->func (callb->arg);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	6852      	ldr	r2, [r2, #4]
 8007b62:	4610      	mov	r0, r2
 8007b64:	4798      	blx	r3
  }
}
 8007b66:	bf00      	nop
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b08c      	sub	sp, #48	; 0x30
 8007b74:	af02      	add	r7, sp, #8
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	607a      	str	r2, [r7, #4]
 8007b7a:	603b      	str	r3, [r7, #0]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007b80:	2300      	movs	r3, #0
 8007b82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b84:	f3ef 8305 	mrs	r3, IPSR
 8007b88:	613b      	str	r3, [r7, #16]
  return(result);
 8007b8a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d163      	bne.n	8007c58 <osTimerNew+0xe8>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d060      	beq.n	8007c58 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007b96:	2008      	movs	r0, #8
 8007b98:	f002 fe7e 	bl	800a898 <pvPortMalloc>
 8007b9c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d059      	beq.n	8007c58 <osTimerNew+0xe8>
      callb->func = func;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007bb0:	7afb      	ldrb	r3, [r7, #11]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d102      	bne.n	8007bbc <osTimerNew+0x4c>
        reload = pdFALSE;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	61fb      	str	r3, [r7, #28]
 8007bba:	e001      	b.n	8007bc0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8007bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d01c      	beq.n	8007c0a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <osTimerNew+0x6e>
          name = attr->name;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d006      	beq.n	8007bf4 <osTimerNew+0x84>
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	2b2b      	cmp	r3, #43	; 0x2b
 8007bec:	d902      	bls.n	8007bf4 <osTimerNew+0x84>
          mem = 1;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	61bb      	str	r3, [r7, #24]
 8007bf2:	e00c      	b.n	8007c0e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d108      	bne.n	8007c0e <osTimerNew+0x9e>
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d104      	bne.n	8007c0e <osTimerNew+0x9e>
            mem = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	61bb      	str	r3, [r7, #24]
 8007c08:	e001      	b.n	8007c0e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d10c      	bne.n	8007c2e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	9301      	str	r3, [sp, #4]
 8007c1a:	4b12      	ldr	r3, [pc, #72]	; (8007c64 <osTimerNew+0xf4>)
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	69fa      	ldr	r2, [r7, #28]
 8007c22:	2101      	movs	r1, #1
 8007c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c26:	f002 f84c 	bl	8009cc2 <xTimerCreateStatic>
 8007c2a:	6238      	str	r0, [r7, #32]
 8007c2c:	e00b      	b.n	8007c46 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d108      	bne.n	8007c46 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007c34:	4b0b      	ldr	r3, [pc, #44]	; (8007c64 <osTimerNew+0xf4>)
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c40:	f002 f81e 	bl	8009c80 <xTimerCreate>
 8007c44:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d105      	bne.n	8007c58 <osTimerNew+0xe8>
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <osTimerNew+0xe8>
        vPortFree (callb);
 8007c52:	6978      	ldr	r0, [r7, #20]
 8007c54:	f002 feec 	bl	800aa30 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007c58:	6a3b      	ldr	r3, [r7, #32]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3728      	adds	r7, #40	; 0x28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	08007b45 	.word	0x08007b45

08007c68 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b088      	sub	sp, #32
 8007c6c:	af02      	add	r7, sp, #8
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c76:	f3ef 8305 	mrs	r3, IPSR
 8007c7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <osTimerStart+0x22>
    stat = osErrorISR;
 8007c82:	f06f 0305 	mvn.w	r3, #5
 8007c86:	617b      	str	r3, [r7, #20]
 8007c88:	e017      	b.n	8007cba <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d103      	bne.n	8007c98 <osTimerStart+0x30>
    stat = osErrorParameter;
 8007c90:	f06f 0303 	mvn.w	r3, #3
 8007c94:	617b      	str	r3, [r7, #20]
 8007c96:	e010      	b.n	8007cba <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007c98:	2300      	movs	r3, #0
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	2104      	movs	r1, #4
 8007ca2:	6938      	ldr	r0, [r7, #16]
 8007ca4:	f002 f886 	bl	8009db4 <xTimerGenericCommand>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d102      	bne.n	8007cb4 <osTimerStart+0x4c>
      stat = osOK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	617b      	str	r3, [r7, #20]
 8007cb2:	e002      	b.n	8007cba <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8007cb4:	f06f 0302 	mvn.w	r3, #2
 8007cb8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007cba:	697b      	ldr	r3, [r7, #20]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3718      	adds	r7, #24
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08a      	sub	sp, #40	; 0x28
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cd4:	f3ef 8305 	mrs	r3, IPSR
 8007cd8:	613b      	str	r3, [r7, #16]
  return(result);
 8007cda:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d15f      	bne.n	8007da0 <osMessageQueueNew+0xdc>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d05c      	beq.n	8007da0 <osMessageQueueNew+0xdc>
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d059      	beq.n	8007da0 <osMessageQueueNew+0xdc>
    mem = -1;
 8007cec:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d029      	beq.n	8007d4c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d012      	beq.n	8007d26 <osMessageQueueNew+0x62>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	2b4f      	cmp	r3, #79	; 0x4f
 8007d06:	d90e      	bls.n	8007d26 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00a      	beq.n	8007d26 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	695a      	ldr	r2, [r3, #20]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	68b9      	ldr	r1, [r7, #8]
 8007d18:	fb01 f303 	mul.w	r3, r1, r3
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d302      	bcc.n	8007d26 <osMessageQueueNew+0x62>
        mem = 1;
 8007d20:	2301      	movs	r3, #1
 8007d22:	61bb      	str	r3, [r7, #24]
 8007d24:	e014      	b.n	8007d50 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d110      	bne.n	8007d50 <osMessageQueueNew+0x8c>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10c      	bne.n	8007d50 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d108      	bne.n	8007d50 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d104      	bne.n	8007d50 <osMessageQueueNew+0x8c>
          mem = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	61bb      	str	r3, [r7, #24]
 8007d4a:	e001      	b.n	8007d50 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d10b      	bne.n	8007d6e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	691a      	ldr	r2, [r3, #16]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	2100      	movs	r1, #0
 8007d60:	9100      	str	r1, [sp, #0]
 8007d62:	68b9      	ldr	r1, [r7, #8]
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 fa2f 	bl	80081c8 <xQueueGenericCreateStatic>
 8007d6a:	61f8      	str	r0, [r7, #28]
 8007d6c:	e008      	b.n	8007d80 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d105      	bne.n	8007d80 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007d74:	2200      	movs	r2, #0
 8007d76:	68b9      	ldr	r1, [r7, #8]
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 fa9d 	bl	80082b8 <xQueueGenericCreate>
 8007d7e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00c      	beq.n	8007da0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	617b      	str	r3, [r7, #20]
 8007d92:	e001      	b.n	8007d98 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007d94:	2300      	movs	r3, #0
 8007d96:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007d98:	6979      	ldr	r1, [r7, #20]
 8007d9a:	69f8      	ldr	r0, [r7, #28]
 8007d9c:	f000 fef4 	bl	8008b88 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007da0:	69fb      	ldr	r3, [r7, #28]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3720      	adds	r7, #32
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b088      	sub	sp, #32
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	4613      	mov	r3, r2
 8007dba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dc4:	f3ef 8305 	mrs	r3, IPSR
 8007dc8:	617b      	str	r3, [r7, #20]
  return(result);
 8007dca:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d028      	beq.n	8007e22 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d005      	beq.n	8007de2 <osMessageQueuePut+0x36>
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <osMessageQueuePut+0x36>
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007de2:	f06f 0303 	mvn.w	r3, #3
 8007de6:	61fb      	str	r3, [r7, #28]
 8007de8:	e038      	b.n	8007e5c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007dea:	2300      	movs	r3, #0
 8007dec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007dee:	f107 0210 	add.w	r2, r7, #16
 8007df2:	2300      	movs	r3, #0
 8007df4:	68b9      	ldr	r1, [r7, #8]
 8007df6:	69b8      	ldr	r0, [r7, #24]
 8007df8:	f000 fbba 	bl	8008570 <xQueueGenericSendFromISR>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d003      	beq.n	8007e0a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007e02:	f06f 0302 	mvn.w	r3, #2
 8007e06:	61fb      	str	r3, [r7, #28]
 8007e08:	e028      	b.n	8007e5c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d025      	beq.n	8007e5c <osMessageQueuePut+0xb0>
 8007e10:	4b15      	ldr	r3, [pc, #84]	; (8007e68 <osMessageQueuePut+0xbc>)
 8007e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e16:	601a      	str	r2, [r3, #0]
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	e01c      	b.n	8007e5c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d002      	beq.n	8007e2e <osMessageQueuePut+0x82>
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d103      	bne.n	8007e36 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007e2e:	f06f 0303 	mvn.w	r3, #3
 8007e32:	61fb      	str	r3, [r7, #28]
 8007e34:	e012      	b.n	8007e5c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007e36:	2300      	movs	r3, #0
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	68b9      	ldr	r1, [r7, #8]
 8007e3c:	69b8      	ldr	r0, [r7, #24]
 8007e3e:	f000 fa99 	bl	8008374 <xQueueGenericSend>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d009      	beq.n	8007e5c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007e4e:	f06f 0301 	mvn.w	r3, #1
 8007e52:	61fb      	str	r3, [r7, #28]
 8007e54:	e002      	b.n	8007e5c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007e56:	f06f 0302 	mvn.w	r3, #2
 8007e5a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007e5c:	69fb      	ldr	r3, [r7, #28]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3720      	adds	r7, #32
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	e000ed04 	.word	0xe000ed04

08007e6c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b088      	sub	sp, #32
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
 8007e78:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e82:	f3ef 8305 	mrs	r3, IPSR
 8007e86:	617b      	str	r3, [r7, #20]
  return(result);
 8007e88:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d028      	beq.n	8007ee0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <osMessageQueueGet+0x34>
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <osMessageQueueGet+0x34>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007ea0:	f06f 0303 	mvn.w	r3, #3
 8007ea4:	61fb      	str	r3, [r7, #28]
 8007ea6:	e037      	b.n	8007f18 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007eac:	f107 0310 	add.w	r3, r7, #16
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	68b9      	ldr	r1, [r7, #8]
 8007eb4:	69b8      	ldr	r0, [r7, #24]
 8007eb6:	f000 fcd7 	bl	8008868 <xQueueReceiveFromISR>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d003      	beq.n	8007ec8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007ec0:	f06f 0302 	mvn.w	r3, #2
 8007ec4:	61fb      	str	r3, [r7, #28]
 8007ec6:	e027      	b.n	8007f18 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d024      	beq.n	8007f18 <osMessageQueueGet+0xac>
 8007ece:	4b15      	ldr	r3, [pc, #84]	; (8007f24 <osMessageQueueGet+0xb8>)
 8007ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	e01b      	b.n	8007f18 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <osMessageQueueGet+0x80>
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d103      	bne.n	8007ef4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007eec:	f06f 0303 	mvn.w	r3, #3
 8007ef0:	61fb      	str	r3, [r7, #28]
 8007ef2:	e011      	b.n	8007f18 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007ef4:	683a      	ldr	r2, [r7, #0]
 8007ef6:	68b9      	ldr	r1, [r7, #8]
 8007ef8:	69b8      	ldr	r0, [r7, #24]
 8007efa:	f000 fbd5 	bl	80086a8 <xQueueReceive>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d009      	beq.n	8007f18 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007f0a:	f06f 0301 	mvn.w	r3, #1
 8007f0e:	61fb      	str	r3, [r7, #28]
 8007f10:	e002      	b.n	8007f18 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007f12:	f06f 0302 	mvn.w	r3, #2
 8007f16:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007f18:	69fb      	ldr	r3, [r7, #28]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3720      	adds	r7, #32
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	e000ed04 	.word	0xe000ed04

08007f28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4a07      	ldr	r2, [pc, #28]	; (8007f54 <vApplicationGetIdleTaskMemory+0x2c>)
 8007f38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	4a06      	ldr	r2, [pc, #24]	; (8007f58 <vApplicationGetIdleTaskMemory+0x30>)
 8007f3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2280      	movs	r2, #128	; 0x80
 8007f44:	601a      	str	r2, [r3, #0]
}
 8007f46:	bf00      	nop
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	20000724 	.word	0x20000724
 8007f58:	20000780 	.word	0x20000780

08007f5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4a07      	ldr	r2, [pc, #28]	; (8007f88 <vApplicationGetTimerTaskMemory+0x2c>)
 8007f6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	4a06      	ldr	r2, [pc, #24]	; (8007f8c <vApplicationGetTimerTaskMemory+0x30>)
 8007f72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f7a:	601a      	str	r2, [r3, #0]
}
 8007f7c:	bf00      	nop
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	20000980 	.word	0x20000980
 8007f8c:	200009dc 	.word	0x200009dc

08007f90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f103 0208 	add.w	r2, r3, #8
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f103 0208 	add.w	r2, r3, #8
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f103 0208 	add.w	r2, r3, #8
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007fde:	bf00      	nop
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fea:	b480      	push	{r7}
 8007fec:	b085      	sub	sp, #20
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	689a      	ldr	r2, [r3, #8]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	1c5a      	adds	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	601a      	str	r2, [r3, #0]
}
 8008026:	bf00      	nop
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008032:	b480      	push	{r7}
 8008034:	b085      	sub	sp, #20
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008048:	d103      	bne.n	8008052 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	60fb      	str	r3, [r7, #12]
 8008050:	e00c      	b.n	800806c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3308      	adds	r3, #8
 8008056:	60fb      	str	r3, [r7, #12]
 8008058:	e002      	b.n	8008060 <vListInsert+0x2e>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	60fb      	str	r3, [r7, #12]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	429a      	cmp	r2, r3
 800806a:	d2f6      	bcs.n	800805a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	1c5a      	adds	r2, r3, #1
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	601a      	str	r2, [r3, #0]
}
 8008098:	bf00      	nop
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	6892      	ldr	r2, [r2, #8]
 80080ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	6852      	ldr	r2, [r2, #4]
 80080c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d103      	bne.n	80080d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	689a      	ldr	r2, [r3, #8]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	1e5a      	subs	r2, r3, #1
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10a      	bne.n	8008122 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008122:	f002 fa97 	bl	800a654 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800812e:	68f9      	ldr	r1, [r7, #12]
 8008130:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008132:	fb01 f303 	mul.w	r3, r1, r3
 8008136:	441a      	add	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008152:	3b01      	subs	r3, #1
 8008154:	68f9      	ldr	r1, [r7, #12]
 8008156:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008158:	fb01 f303 	mul.w	r3, r1, r3
 800815c:	441a      	add	r2, r3
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	22ff      	movs	r2, #255	; 0xff
 8008166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	22ff      	movs	r2, #255	; 0xff
 800816e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d114      	bne.n	80081a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d01a      	beq.n	80081b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	3310      	adds	r3, #16
 8008184:	4618      	mov	r0, r3
 8008186:	f001 fa95 	bl	80096b4 <xTaskRemoveFromEventList>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d012      	beq.n	80081b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008190:	4b0c      	ldr	r3, [pc, #48]	; (80081c4 <xQueueGenericReset+0xcc>)
 8008192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	e009      	b.n	80081b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	3310      	adds	r3, #16
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7ff fef2 	bl	8007f90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	3324      	adds	r3, #36	; 0x24
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff feed 	bl	8007f90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80081b6:	f002 fa7d 	bl	800a6b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80081ba:	2301      	movs	r3, #1
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	e000ed04 	.word	0xe000ed04

080081c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08e      	sub	sp, #56	; 0x38
 80081cc:	af02      	add	r7, sp, #8
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10a      	bne.n	80081f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e0:	f383 8811 	msr	BASEPRI, r3
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081ee:	bf00      	nop
 80081f0:	e7fe      	b.n	80081f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10a      	bne.n	800820e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	627b      	str	r3, [r7, #36]	; 0x24
}
 800820a:	bf00      	nop
 800820c:	e7fe      	b.n	800820c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <xQueueGenericCreateStatic+0x52>
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <xQueueGenericCreateStatic+0x56>
 800821a:	2301      	movs	r3, #1
 800821c:	e000      	b.n	8008220 <xQueueGenericCreateStatic+0x58>
 800821e:	2300      	movs	r3, #0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10a      	bne.n	800823a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	623b      	str	r3, [r7, #32]
}
 8008236:	bf00      	nop
 8008238:	e7fe      	b.n	8008238 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d102      	bne.n	8008246 <xQueueGenericCreateStatic+0x7e>
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <xQueueGenericCreateStatic+0x82>
 8008246:	2301      	movs	r3, #1
 8008248:	e000      	b.n	800824c <xQueueGenericCreateStatic+0x84>
 800824a:	2300      	movs	r3, #0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10a      	bne.n	8008266 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	61fb      	str	r3, [r7, #28]
}
 8008262:	bf00      	nop
 8008264:	e7fe      	b.n	8008264 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008266:	2350      	movs	r3, #80	; 0x50
 8008268:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2b50      	cmp	r3, #80	; 0x50
 800826e:	d00a      	beq.n	8008286 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	61bb      	str	r3, [r7, #24]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008286:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800828c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00d      	beq.n	80082ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800829a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800829e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	4613      	mov	r3, r2
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	68b9      	ldr	r1, [r7, #8]
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 f83f 	bl	800832c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80082ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3730      	adds	r7, #48	; 0x30
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08a      	sub	sp, #40	; 0x28
 80082bc:	af02      	add	r7, sp, #8
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	4613      	mov	r3, r2
 80082c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10a      	bne.n	80082e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80082cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d0:	f383 8811 	msr	BASEPRI, r3
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	613b      	str	r3, [r7, #16]
}
 80082de:	bf00      	nop
 80082e0:	e7fe      	b.n	80082e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	fb02 f303 	mul.w	r3, r2, r3
 80082ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	3350      	adds	r3, #80	; 0x50
 80082f0:	4618      	mov	r0, r3
 80082f2:	f002 fad1 	bl	800a898 <pvPortMalloc>
 80082f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d011      	beq.n	8008322 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	3350      	adds	r3, #80	; 0x50
 8008306:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008310:	79fa      	ldrb	r2, [r7, #7]
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	4613      	mov	r3, r2
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	68b9      	ldr	r1, [r7, #8]
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 f805 	bl	800832c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008322:	69bb      	ldr	r3, [r7, #24]
	}
 8008324:	4618      	mov	r0, r3
 8008326:	3720      	adds	r7, #32
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d103      	bne.n	8008348 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	e002      	b.n	800834e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800835a:	2101      	movs	r1, #1
 800835c:	69b8      	ldr	r0, [r7, #24]
 800835e:	f7ff fecb 	bl	80080f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	78fa      	ldrb	r2, [r7, #3]
 8008366:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800836a:	bf00      	nop
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b08e      	sub	sp, #56	; 0x38
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
 8008380:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008382:	2300      	movs	r3, #0
 8008384:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10a      	bne.n	80083a6 <xQueueGenericSend+0x32>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083a2:	bf00      	nop
 80083a4:	e7fe      	b.n	80083a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d103      	bne.n	80083b4 <xQueueGenericSend+0x40>
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <xQueueGenericSend+0x44>
 80083b4:	2301      	movs	r3, #1
 80083b6:	e000      	b.n	80083ba <xQueueGenericSend+0x46>
 80083b8:	2300      	movs	r3, #0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10a      	bne.n	80083d4 <xQueueGenericSend+0x60>
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083d0:	bf00      	nop
 80083d2:	e7fe      	b.n	80083d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d103      	bne.n	80083e2 <xQueueGenericSend+0x6e>
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d101      	bne.n	80083e6 <xQueueGenericSend+0x72>
 80083e2:	2301      	movs	r3, #1
 80083e4:	e000      	b.n	80083e8 <xQueueGenericSend+0x74>
 80083e6:	2300      	movs	r3, #0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10a      	bne.n	8008402 <xQueueGenericSend+0x8e>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	623b      	str	r3, [r7, #32]
}
 80083fe:	bf00      	nop
 8008400:	e7fe      	b.n	8008400 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008402:	f001 fb15 	bl	8009a30 <xTaskGetSchedulerState>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d102      	bne.n	8008412 <xQueueGenericSend+0x9e>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d101      	bne.n	8008416 <xQueueGenericSend+0xa2>
 8008412:	2301      	movs	r3, #1
 8008414:	e000      	b.n	8008418 <xQueueGenericSend+0xa4>
 8008416:	2300      	movs	r3, #0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10a      	bne.n	8008432 <xQueueGenericSend+0xbe>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	61fb      	str	r3, [r7, #28]
}
 800842e:	bf00      	nop
 8008430:	e7fe      	b.n	8008430 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008432:	f002 f90f 	bl	800a654 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843e:	429a      	cmp	r2, r3
 8008440:	d302      	bcc.n	8008448 <xQueueGenericSend+0xd4>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d129      	bne.n	800849c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	68b9      	ldr	r1, [r7, #8]
 800844c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800844e:	f000 fa8b 	bl	8008968 <prvCopyDataToQueue>
 8008452:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	2b00      	cmp	r3, #0
 800845a:	d010      	beq.n	800847e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800845c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845e:	3324      	adds	r3, #36	; 0x24
 8008460:	4618      	mov	r0, r3
 8008462:	f001 f927 	bl	80096b4 <xTaskRemoveFromEventList>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d013      	beq.n	8008494 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800846c:	4b3f      	ldr	r3, [pc, #252]	; (800856c <xQueueGenericSend+0x1f8>)
 800846e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	e00a      	b.n	8008494 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800847e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008480:	2b00      	cmp	r3, #0
 8008482:	d007      	beq.n	8008494 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008484:	4b39      	ldr	r3, [pc, #228]	; (800856c <xQueueGenericSend+0x1f8>)
 8008486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008494:	f002 f90e 	bl	800a6b4 <vPortExitCritical>
				return pdPASS;
 8008498:	2301      	movs	r3, #1
 800849a:	e063      	b.n	8008564 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d103      	bne.n	80084aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084a2:	f002 f907 	bl	800a6b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80084a6:	2300      	movs	r3, #0
 80084a8:	e05c      	b.n	8008564 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d106      	bne.n	80084be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084b0:	f107 0314 	add.w	r3, r7, #20
 80084b4:	4618      	mov	r0, r3
 80084b6:	f001 f961 	bl	800977c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084ba:	2301      	movs	r3, #1
 80084bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084be:	f002 f8f9 	bl	800a6b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084c2:	f000 fed3 	bl	800926c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084c6:	f002 f8c5 	bl	800a654 <vPortEnterCritical>
 80084ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084d0:	b25b      	sxtb	r3, r3
 80084d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d6:	d103      	bne.n	80084e0 <xQueueGenericSend+0x16c>
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084e6:	b25b      	sxtb	r3, r3
 80084e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ec:	d103      	bne.n	80084f6 <xQueueGenericSend+0x182>
 80084ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084f6:	f002 f8dd 	bl	800a6b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084fa:	1d3a      	adds	r2, r7, #4
 80084fc:	f107 0314 	add.w	r3, r7, #20
 8008500:	4611      	mov	r1, r2
 8008502:	4618      	mov	r0, r3
 8008504:	f001 f950 	bl	80097a8 <xTaskCheckForTimeOut>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d124      	bne.n	8008558 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800850e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008510:	f000 fb22 	bl	8008b58 <prvIsQueueFull>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d018      	beq.n	800854c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	3310      	adds	r3, #16
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	4611      	mov	r1, r2
 8008522:	4618      	mov	r0, r3
 8008524:	f001 f876 	bl	8009614 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800852a:	f000 faad 	bl	8008a88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800852e:	f000 feab 	bl	8009288 <xTaskResumeAll>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	f47f af7c 	bne.w	8008432 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800853a:	4b0c      	ldr	r3, [pc, #48]	; (800856c <xQueueGenericSend+0x1f8>)
 800853c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	e772      	b.n	8008432 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800854c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800854e:	f000 fa9b 	bl	8008a88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008552:	f000 fe99 	bl	8009288 <xTaskResumeAll>
 8008556:	e76c      	b.n	8008432 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800855a:	f000 fa95 	bl	8008a88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800855e:	f000 fe93 	bl	8009288 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008562:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008564:	4618      	mov	r0, r3
 8008566:	3738      	adds	r7, #56	; 0x38
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	e000ed04 	.word	0xe000ed04

08008570 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b090      	sub	sp, #64	; 0x40
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10a      	bne.n	800859e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800859a:	bf00      	nop
 800859c:	e7fe      	b.n	800859c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d103      	bne.n	80085ac <xQueueGenericSendFromISR+0x3c>
 80085a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <xQueueGenericSendFromISR+0x40>
 80085ac:	2301      	movs	r3, #1
 80085ae:	e000      	b.n	80085b2 <xQueueGenericSendFromISR+0x42>
 80085b0:	2300      	movs	r3, #0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10a      	bne.n	80085cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085c8:	bf00      	nop
 80085ca:	e7fe      	b.n	80085ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d103      	bne.n	80085da <xQueueGenericSendFromISR+0x6a>
 80085d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d101      	bne.n	80085de <xQueueGenericSendFromISR+0x6e>
 80085da:	2301      	movs	r3, #1
 80085dc:	e000      	b.n	80085e0 <xQueueGenericSendFromISR+0x70>
 80085de:	2300      	movs	r3, #0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10a      	bne.n	80085fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80085e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	623b      	str	r3, [r7, #32]
}
 80085f6:	bf00      	nop
 80085f8:	e7fe      	b.n	80085f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085fa:	f002 f90d 	bl	800a818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80085fe:	f3ef 8211 	mrs	r2, BASEPRI
 8008602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	61fa      	str	r2, [r7, #28]
 8008614:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008616:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008618:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800861e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008622:	429a      	cmp	r2, r3
 8008624:	d302      	bcc.n	800862c <xQueueGenericSendFromISR+0xbc>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b02      	cmp	r3, #2
 800862a:	d12f      	bne.n	800868c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800862c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	68b9      	ldr	r1, [r7, #8]
 8008640:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008642:	f000 f991 	bl	8008968 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008646:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800864a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864e:	d112      	bne.n	8008676 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	2b00      	cmp	r3, #0
 8008656:	d016      	beq.n	8008686 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865a:	3324      	adds	r3, #36	; 0x24
 800865c:	4618      	mov	r0, r3
 800865e:	f001 f829 	bl	80096b4 <xTaskRemoveFromEventList>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00e      	beq.n	8008686 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00b      	beq.n	8008686 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	e007      	b.n	8008686 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008676:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800867a:	3301      	adds	r3, #1
 800867c:	b2db      	uxtb	r3, r3
 800867e:	b25a      	sxtb	r2, r3
 8008680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008686:	2301      	movs	r3, #1
 8008688:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800868a:	e001      	b.n	8008690 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800868c:	2300      	movs	r3, #0
 800868e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008692:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800869a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800869c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3740      	adds	r7, #64	; 0x40
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
	...

080086a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b08c      	sub	sp, #48	; 0x30
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80086b4:	2300      	movs	r3, #0
 80086b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10a      	bne.n	80086d8 <xQueueReceive+0x30>
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	623b      	str	r3, [r7, #32]
}
 80086d4:	bf00      	nop
 80086d6:	e7fe      	b.n	80086d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d103      	bne.n	80086e6 <xQueueReceive+0x3e>
 80086de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <xQueueReceive+0x42>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e000      	b.n	80086ec <xQueueReceive+0x44>
 80086ea:	2300      	movs	r3, #0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10a      	bne.n	8008706 <xQueueReceive+0x5e>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	61fb      	str	r3, [r7, #28]
}
 8008702:	bf00      	nop
 8008704:	e7fe      	b.n	8008704 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008706:	f001 f993 	bl	8009a30 <xTaskGetSchedulerState>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <xQueueReceive+0x6e>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <xQueueReceive+0x72>
 8008716:	2301      	movs	r3, #1
 8008718:	e000      	b.n	800871c <xQueueReceive+0x74>
 800871a:	2300      	movs	r3, #0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10a      	bne.n	8008736 <xQueueReceive+0x8e>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	61bb      	str	r3, [r7, #24]
}
 8008732:	bf00      	nop
 8008734:	e7fe      	b.n	8008734 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008736:	f001 ff8d 	bl	800a654 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800873a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	2b00      	cmp	r3, #0
 8008744:	d01f      	beq.n	8008786 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008746:	68b9      	ldr	r1, [r7, #8]
 8008748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800874a:	f000 f977 	bl	8008a3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	1e5a      	subs	r2, r3, #1
 8008752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008754:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00f      	beq.n	800877e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	3310      	adds	r3, #16
 8008762:	4618      	mov	r0, r3
 8008764:	f000 ffa6 	bl	80096b4 <xTaskRemoveFromEventList>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d007      	beq.n	800877e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800876e:	4b3d      	ldr	r3, [pc, #244]	; (8008864 <xQueueReceive+0x1bc>)
 8008770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800877e:	f001 ff99 	bl	800a6b4 <vPortExitCritical>
				return pdPASS;
 8008782:	2301      	movs	r3, #1
 8008784:	e069      	b.n	800885a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d103      	bne.n	8008794 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800878c:	f001 ff92 	bl	800a6b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008790:	2300      	movs	r3, #0
 8008792:	e062      	b.n	800885a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008796:	2b00      	cmp	r3, #0
 8008798:	d106      	bne.n	80087a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800879a:	f107 0310 	add.w	r3, r7, #16
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 ffec 	bl	800977c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087a4:	2301      	movs	r3, #1
 80087a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087a8:	f001 ff84 	bl	800a6b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087ac:	f000 fd5e 	bl	800926c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087b0:	f001 ff50 	bl	800a654 <vPortEnterCritical>
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087ba:	b25b      	sxtb	r3, r3
 80087bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c0:	d103      	bne.n	80087ca <xQueueReceive+0x122>
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087d0:	b25b      	sxtb	r3, r3
 80087d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d6:	d103      	bne.n	80087e0 <xQueueReceive+0x138>
 80087d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087e0:	f001 ff68 	bl	800a6b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087e4:	1d3a      	adds	r2, r7, #4
 80087e6:	f107 0310 	add.w	r3, r7, #16
 80087ea:	4611      	mov	r1, r2
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 ffdb 	bl	80097a8 <xTaskCheckForTimeOut>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d123      	bne.n	8008840 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087fa:	f000 f997 	bl	8008b2c <prvIsQueueEmpty>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d017      	beq.n	8008834 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	3324      	adds	r3, #36	; 0x24
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	4611      	mov	r1, r2
 800880c:	4618      	mov	r0, r3
 800880e:	f000 ff01 	bl	8009614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008814:	f000 f938 	bl	8008a88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008818:	f000 fd36 	bl	8009288 <xTaskResumeAll>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d189      	bne.n	8008736 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008822:	4b10      	ldr	r3, [pc, #64]	; (8008864 <xQueueReceive+0x1bc>)
 8008824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	e780      	b.n	8008736 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008836:	f000 f927 	bl	8008a88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800883a:	f000 fd25 	bl	8009288 <xTaskResumeAll>
 800883e:	e77a      	b.n	8008736 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008842:	f000 f921 	bl	8008a88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008846:	f000 fd1f 	bl	8009288 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800884a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800884c:	f000 f96e 	bl	8008b2c <prvIsQueueEmpty>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	f43f af6f 	beq.w	8008736 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008858:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800885a:	4618      	mov	r0, r3
 800885c:	3730      	adds	r7, #48	; 0x30
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	e000ed04 	.word	0xe000ed04

08008868 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b08e      	sub	sp, #56	; 0x38
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10a      	bne.n	8008894 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	623b      	str	r3, [r7, #32]
}
 8008890:	bf00      	nop
 8008892:	e7fe      	b.n	8008892 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d103      	bne.n	80088a2 <xQueueReceiveFromISR+0x3a>
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <xQueueReceiveFromISR+0x3e>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e000      	b.n	80088a8 <xQueueReceiveFromISR+0x40>
 80088a6:	2300      	movs	r3, #0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10a      	bne.n	80088c2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	61fb      	str	r3, [r7, #28]
}
 80088be:	bf00      	nop
 80088c0:	e7fe      	b.n	80088c0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088c2:	f001 ffa9 	bl	800a818 <vPortValidateInterruptPriority>
	__asm volatile
 80088c6:	f3ef 8211 	mrs	r2, BASEPRI
 80088ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	61ba      	str	r2, [r7, #24]
 80088dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80088de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d02f      	beq.n	800894e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088f8:	68b9      	ldr	r1, [r7, #8]
 80088fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088fc:	f000 f89e 	bl	8008a3c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008902:	1e5a      	subs	r2, r3, #1
 8008904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008906:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008908:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800890c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008910:	d112      	bne.n	8008938 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d016      	beq.n	8008948 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	3310      	adds	r3, #16
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fec8 	bl	80096b4 <xTaskRemoveFromEventList>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00e      	beq.n	8008948 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00b      	beq.n	8008948 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	e007      	b.n	8008948 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800893c:	3301      	adds	r3, #1
 800893e:	b2db      	uxtb	r3, r3
 8008940:	b25a      	sxtb	r2, r3
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008948:	2301      	movs	r3, #1
 800894a:	637b      	str	r3, [r7, #52]	; 0x34
 800894c:	e001      	b.n	8008952 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800894e:	2300      	movs	r3, #0
 8008950:	637b      	str	r3, [r7, #52]	; 0x34
 8008952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008954:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f383 8811 	msr	BASEPRI, r3
}
 800895c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008960:	4618      	mov	r0, r3
 8008962:	3738      	adds	r7, #56	; 0x38
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008974:	2300      	movs	r3, #0
 8008976:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10d      	bne.n	80089a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d14d      	bne.n	8008a2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	4618      	mov	r0, r3
 8008994:	f001 f86a 	bl	8009a6c <xTaskPriorityDisinherit>
 8008998:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	609a      	str	r2, [r3, #8]
 80089a0:	e043      	b.n	8008a2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d119      	bne.n	80089dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6858      	ldr	r0, [r3, #4]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b0:	461a      	mov	r2, r3
 80089b2:	68b9      	ldr	r1, [r7, #8]
 80089b4:	f002 f994 	bl	800ace0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c0:	441a      	add	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d32b      	bcc.n	8008a2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	605a      	str	r2, [r3, #4]
 80089da:	e026      	b.n	8008a2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	68d8      	ldr	r0, [r3, #12]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e4:	461a      	mov	r2, r3
 80089e6:	68b9      	ldr	r1, [r7, #8]
 80089e8:	f002 f97a 	bl	800ace0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	68da      	ldr	r2, [r3, #12]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f4:	425b      	negs	r3, r3
 80089f6:	441a      	add	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d207      	bcs.n	8008a18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	689a      	ldr	r2, [r3, #8]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a10:	425b      	negs	r3, r3
 8008a12:	441a      	add	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d105      	bne.n	8008a2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	1c5a      	adds	r2, r3, #1
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a32:	697b      	ldr	r3, [r7, #20]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3718      	adds	r7, #24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d018      	beq.n	8008a80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a56:	441a      	add	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d303      	bcc.n	8008a70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68d9      	ldr	r1, [r3, #12]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a78:	461a      	mov	r2, r3
 8008a7a:	6838      	ldr	r0, [r7, #0]
 8008a7c:	f002 f930 	bl	800ace0 <memcpy>
	}
}
 8008a80:	bf00      	nop
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a90:	f001 fde0 	bl	800a654 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a9c:	e011      	b.n	8008ac2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d012      	beq.n	8008acc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	3324      	adds	r3, #36	; 0x24
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 fe02 	bl	80096b4 <xTaskRemoveFromEventList>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d001      	beq.n	8008aba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ab6:	f000 fed9 	bl	800986c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	dce9      	bgt.n	8008a9e <prvUnlockQueue+0x16>
 8008aca:	e000      	b.n	8008ace <prvUnlockQueue+0x46>
					break;
 8008acc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	22ff      	movs	r2, #255	; 0xff
 8008ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008ad6:	f001 fded 	bl	800a6b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ada:	f001 fdbb 	bl	800a654 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ae4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ae6:	e011      	b.n	8008b0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d012      	beq.n	8008b16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3310      	adds	r3, #16
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 fddd 	bl	80096b4 <xTaskRemoveFromEventList>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d001      	beq.n	8008b04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b00:	f000 feb4 	bl	800986c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b04:	7bbb      	ldrb	r3, [r7, #14]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	dce9      	bgt.n	8008ae8 <prvUnlockQueue+0x60>
 8008b14:	e000      	b.n	8008b18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	22ff      	movs	r2, #255	; 0xff
 8008b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b20:	f001 fdc8 	bl	800a6b4 <vPortExitCritical>
}
 8008b24:	bf00      	nop
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b34:	f001 fd8e 	bl	800a654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d102      	bne.n	8008b46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b40:	2301      	movs	r3, #1
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	e001      	b.n	8008b4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b46:	2300      	movs	r3, #0
 8008b48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b4a:	f001 fdb3 	bl	800a6b4 <vPortExitCritical>

	return xReturn;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b60:	f001 fd78 	bl	800a654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d102      	bne.n	8008b76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b70:	2301      	movs	r3, #1
 8008b72:	60fb      	str	r3, [r7, #12]
 8008b74:	e001      	b.n	8008b7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b76:	2300      	movs	r3, #0
 8008b78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b7a:	f001 fd9b 	bl	800a6b4 <vPortExitCritical>

	return xReturn;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b92:	2300      	movs	r3, #0
 8008b94:	60fb      	str	r3, [r7, #12]
 8008b96:	e014      	b.n	8008bc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b98:	4a0f      	ldr	r2, [pc, #60]	; (8008bd8 <vQueueAddToRegistry+0x50>)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10b      	bne.n	8008bbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ba4:	490c      	ldr	r1, [pc, #48]	; (8008bd8 <vQueueAddToRegistry+0x50>)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008bae:	4a0a      	ldr	r2, [pc, #40]	; (8008bd8 <vQueueAddToRegistry+0x50>)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	00db      	lsls	r3, r3, #3
 8008bb4:	4413      	add	r3, r2
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008bba:	e006      	b.n	8008bca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	60fb      	str	r3, [r7, #12]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2b07      	cmp	r3, #7
 8008bc6:	d9e7      	bls.n	8008b98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008bc8:	bf00      	nop
 8008bca:	bf00      	nop
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	20003ba4 	.word	0x20003ba4

08008bdc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008bec:	f001 fd32 	bl	800a654 <vPortEnterCritical>
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bf6:	b25b      	sxtb	r3, r3
 8008bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfc:	d103      	bne.n	8008c06 <vQueueWaitForMessageRestricted+0x2a>
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c0c:	b25b      	sxtb	r3, r3
 8008c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c12:	d103      	bne.n	8008c1c <vQueueWaitForMessageRestricted+0x40>
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c1c:	f001 fd4a 	bl	800a6b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d106      	bne.n	8008c36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	3324      	adds	r3, #36	; 0x24
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	68b9      	ldr	r1, [r7, #8]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 fd13 	bl	800965c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c36:	6978      	ldr	r0, [r7, #20]
 8008c38:	f7ff ff26 	bl	8008a88 <prvUnlockQueue>
	}
 8008c3c:	bf00      	nop
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b08e      	sub	sp, #56	; 0x38
 8008c48:	af04      	add	r7, sp, #16
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
 8008c50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10a      	bne.n	8008c6e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5c:	f383 8811 	msr	BASEPRI, r3
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	623b      	str	r3, [r7, #32]
}
 8008c6a:	bf00      	nop
 8008c6c:	e7fe      	b.n	8008c6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <xTaskCreateStatic+0x46>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	61fb      	str	r3, [r7, #28]
}
 8008c86:	bf00      	nop
 8008c88:	e7fe      	b.n	8008c88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c8a:	235c      	movs	r3, #92	; 0x5c
 8008c8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	2b5c      	cmp	r3, #92	; 0x5c
 8008c92:	d00a      	beq.n	8008caa <xTaskCreateStatic+0x66>
	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	61bb      	str	r3, [r7, #24]
}
 8008ca6:	bf00      	nop
 8008ca8:	e7fe      	b.n	8008ca8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008caa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d01e      	beq.n	8008cf0 <xTaskCreateStatic+0xac>
 8008cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d01b      	beq.n	8008cf0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	2202      	movs	r2, #2
 8008cc6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008cca:	2300      	movs	r3, #0
 8008ccc:	9303      	str	r3, [sp, #12]
 8008cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd0:	9302      	str	r3, [sp, #8]
 8008cd2:	f107 0314 	add.w	r3, r7, #20
 8008cd6:	9301      	str	r3, [sp, #4]
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	68b9      	ldr	r1, [r7, #8]
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f000 f850 	bl	8008d88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ce8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cea:	f000 f8dd 	bl	8008ea8 <prvAddNewTaskToReadyList>
 8008cee:	e001      	b.n	8008cf4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008cf4:	697b      	ldr	r3, [r7, #20]
	}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3728      	adds	r7, #40	; 0x28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b08c      	sub	sp, #48	; 0x30
 8008d02:	af04      	add	r7, sp, #16
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	603b      	str	r3, [r7, #0]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d0e:	88fb      	ldrh	r3, [r7, #6]
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4618      	mov	r0, r3
 8008d14:	f001 fdc0 	bl	800a898 <pvPortMalloc>
 8008d18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00e      	beq.n	8008d3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d20:	205c      	movs	r0, #92	; 0x5c
 8008d22:	f001 fdb9 	bl	800a898 <pvPortMalloc>
 8008d26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d003      	beq.n	8008d36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	631a      	str	r2, [r3, #48]	; 0x30
 8008d34:	e005      	b.n	8008d42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d36:	6978      	ldr	r0, [r7, #20]
 8008d38:	f001 fe7a 	bl	800aa30 <vPortFree>
 8008d3c:	e001      	b.n	8008d42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d017      	beq.n	8008d78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d50:	88fa      	ldrh	r2, [r7, #6]
 8008d52:	2300      	movs	r3, #0
 8008d54:	9303      	str	r3, [sp, #12]
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	9302      	str	r3, [sp, #8]
 8008d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5c:	9301      	str	r3, [sp, #4]
 8008d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	68b9      	ldr	r1, [r7, #8]
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 f80e 	bl	8008d88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d6c:	69f8      	ldr	r0, [r7, #28]
 8008d6e:	f000 f89b 	bl	8008ea8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d72:	2301      	movs	r3, #1
 8008d74:	61bb      	str	r3, [r7, #24]
 8008d76:	e002      	b.n	8008d7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d78:	f04f 33ff 	mov.w	r3, #4294967295
 8008d7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d7e:	69bb      	ldr	r3, [r7, #24]
	}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3720      	adds	r7, #32
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b088      	sub	sp, #32
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
 8008d94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	461a      	mov	r2, r3
 8008da0:	21a5      	movs	r1, #165	; 0xa5
 8008da2:	f001 ffab 	bl	800acfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008db0:	3b01      	subs	r3, #1
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	f023 0307 	bic.w	r3, r3, #7
 8008dbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	f003 0307 	and.w	r3, r3, #7
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00a      	beq.n	8008de0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dce:	f383 8811 	msr	BASEPRI, r3
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	617b      	str	r3, [r7, #20]
}
 8008ddc:	bf00      	nop
 8008dde:	e7fe      	b.n	8008dde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d01f      	beq.n	8008e26 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008de6:	2300      	movs	r3, #0
 8008de8:	61fb      	str	r3, [r7, #28]
 8008dea:	e012      	b.n	8008e12 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	4413      	add	r3, r2
 8008df2:	7819      	ldrb	r1, [r3, #0]
 8008df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	4413      	add	r3, r2
 8008dfa:	3334      	adds	r3, #52	; 0x34
 8008dfc:	460a      	mov	r2, r1
 8008dfe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	4413      	add	r3, r2
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d006      	beq.n	8008e1a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	61fb      	str	r3, [r7, #28]
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	2b0f      	cmp	r3, #15
 8008e16:	d9e9      	bls.n	8008dec <prvInitialiseNewTask+0x64>
 8008e18:	e000      	b.n	8008e1c <prvInitialiseNewTask+0x94>
			{
				break;
 8008e1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e24:	e003      	b.n	8008e2e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e30:	2b37      	cmp	r3, #55	; 0x37
 8008e32:	d901      	bls.n	8008e38 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e34:	2337      	movs	r3, #55	; 0x37
 8008e36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	2200      	movs	r2, #0
 8008e48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7ff f8be 	bl	8007fd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e56:	3318      	adds	r3, #24
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7ff f8b9 	bl	8007fd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e76:	2200      	movs	r2, #0
 8008e78:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	68f9      	ldr	r1, [r7, #12]
 8008e86:	69b8      	ldr	r0, [r7, #24]
 8008e88:	f001 faba 	bl	800a400 <pxPortInitialiseStack>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e9e:	bf00      	nop
 8008ea0:	3720      	adds	r7, #32
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008eb0:	f001 fbd0 	bl	800a654 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008eb4:	4b2d      	ldr	r3, [pc, #180]	; (8008f6c <prvAddNewTaskToReadyList+0xc4>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	4a2c      	ldr	r2, [pc, #176]	; (8008f6c <prvAddNewTaskToReadyList+0xc4>)
 8008ebc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ebe:	4b2c      	ldr	r3, [pc, #176]	; (8008f70 <prvAddNewTaskToReadyList+0xc8>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d109      	bne.n	8008eda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ec6:	4a2a      	ldr	r2, [pc, #168]	; (8008f70 <prvAddNewTaskToReadyList+0xc8>)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ecc:	4b27      	ldr	r3, [pc, #156]	; (8008f6c <prvAddNewTaskToReadyList+0xc4>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d110      	bne.n	8008ef6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ed4:	f000 fcee 	bl	80098b4 <prvInitialiseTaskLists>
 8008ed8:	e00d      	b.n	8008ef6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008eda:	4b26      	ldr	r3, [pc, #152]	; (8008f74 <prvAddNewTaskToReadyList+0xcc>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d109      	bne.n	8008ef6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ee2:	4b23      	ldr	r3, [pc, #140]	; (8008f70 <prvAddNewTaskToReadyList+0xc8>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d802      	bhi.n	8008ef6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ef0:	4a1f      	ldr	r2, [pc, #124]	; (8008f70 <prvAddNewTaskToReadyList+0xc8>)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ef6:	4b20      	ldr	r3, [pc, #128]	; (8008f78 <prvAddNewTaskToReadyList+0xd0>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3301      	adds	r3, #1
 8008efc:	4a1e      	ldr	r2, [pc, #120]	; (8008f78 <prvAddNewTaskToReadyList+0xd0>)
 8008efe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f00:	4b1d      	ldr	r3, [pc, #116]	; (8008f78 <prvAddNewTaskToReadyList+0xd0>)
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0c:	4b1b      	ldr	r3, [pc, #108]	; (8008f7c <prvAddNewTaskToReadyList+0xd4>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d903      	bls.n	8008f1c <prvAddNewTaskToReadyList+0x74>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f18:	4a18      	ldr	r2, [pc, #96]	; (8008f7c <prvAddNewTaskToReadyList+0xd4>)
 8008f1a:	6013      	str	r3, [r2, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f20:	4613      	mov	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4a15      	ldr	r2, [pc, #84]	; (8008f80 <prvAddNewTaskToReadyList+0xd8>)
 8008f2a:	441a      	add	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	3304      	adds	r3, #4
 8008f30:	4619      	mov	r1, r3
 8008f32:	4610      	mov	r0, r2
 8008f34:	f7ff f859 	bl	8007fea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f38:	f001 fbbc 	bl	800a6b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f3c:	4b0d      	ldr	r3, [pc, #52]	; (8008f74 <prvAddNewTaskToReadyList+0xcc>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00e      	beq.n	8008f62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f44:	4b0a      	ldr	r3, [pc, #40]	; (8008f70 <prvAddNewTaskToReadyList+0xc8>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d207      	bcs.n	8008f62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f52:	4b0c      	ldr	r3, [pc, #48]	; (8008f84 <prvAddNewTaskToReadyList+0xdc>)
 8008f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f58:	601a      	str	r2, [r3, #0]
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f62:	bf00      	nop
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	200012b0 	.word	0x200012b0
 8008f70:	20000ddc 	.word	0x20000ddc
 8008f74:	200012bc 	.word	0x200012bc
 8008f78:	200012cc 	.word	0x200012cc
 8008f7c:	200012b8 	.word	0x200012b8
 8008f80:	20000de0 	.word	0x20000de0
 8008f84:	e000ed04 	.word	0xe000ed04

08008f88 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008f90:	f001 fb60 	bl	800a654 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d102      	bne.n	8008fa0 <vTaskDelete+0x18>
 8008f9a:	4b2c      	ldr	r3, [pc, #176]	; (800904c <vTaskDelete+0xc4>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	e000      	b.n	8008fa2 <vTaskDelete+0x1a>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7ff f87b 	bl	80080a4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d004      	beq.n	8008fc0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3318      	adds	r3, #24
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7ff f872 	bl	80080a4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008fc0:	4b23      	ldr	r3, [pc, #140]	; (8009050 <vTaskDelete+0xc8>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	4a22      	ldr	r2, [pc, #136]	; (8009050 <vTaskDelete+0xc8>)
 8008fc8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008fca:	4b20      	ldr	r3, [pc, #128]	; (800904c <vTaskDelete+0xc4>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d10b      	bne.n	8008fec <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	4619      	mov	r1, r3
 8008fda:	481e      	ldr	r0, [pc, #120]	; (8009054 <vTaskDelete+0xcc>)
 8008fdc:	f7ff f805 	bl	8007fea <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008fe0:	4b1d      	ldr	r3, [pc, #116]	; (8009058 <vTaskDelete+0xd0>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	4a1c      	ldr	r2, [pc, #112]	; (8009058 <vTaskDelete+0xd0>)
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	e009      	b.n	8009000 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008fec:	4b1b      	ldr	r3, [pc, #108]	; (800905c <vTaskDelete+0xd4>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	4a1a      	ldr	r2, [pc, #104]	; (800905c <vTaskDelete+0xd4>)
 8008ff4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 fcca 	bl	8009990 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008ffc:	f000 fcf8 	bl	80099f0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009000:	f001 fb58 	bl	800a6b4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009004:	4b16      	ldr	r3, [pc, #88]	; (8009060 <vTaskDelete+0xd8>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01b      	beq.n	8009044 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800900c:	4b0f      	ldr	r3, [pc, #60]	; (800904c <vTaskDelete+0xc4>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	429a      	cmp	r2, r3
 8009014:	d116      	bne.n	8009044 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009016:	4b13      	ldr	r3, [pc, #76]	; (8009064 <vTaskDelete+0xdc>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00a      	beq.n	8009034 <vTaskDelete+0xac>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	60bb      	str	r3, [r7, #8]
}
 8009030:	bf00      	nop
 8009032:	e7fe      	b.n	8009032 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8009034:	4b0c      	ldr	r3, [pc, #48]	; (8009068 <vTaskDelete+0xe0>)
 8009036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009044:	bf00      	nop
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	20000ddc 	.word	0x20000ddc
 8009050:	200012cc 	.word	0x200012cc
 8009054:	20001284 	.word	0x20001284
 8009058:	20001298 	.word	0x20001298
 800905c:	200012b0 	.word	0x200012b0
 8009060:	200012bc 	.word	0x200012bc
 8009064:	200012d8 	.word	0x200012d8
 8009068:	e000ed04 	.word	0xe000ed04

0800906c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009074:	2300      	movs	r3, #0
 8009076:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d017      	beq.n	80090ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800907e:	4b13      	ldr	r3, [pc, #76]	; (80090cc <vTaskDelay+0x60>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00a      	beq.n	800909c <vTaskDelay+0x30>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	60bb      	str	r3, [r7, #8]
}
 8009098:	bf00      	nop
 800909a:	e7fe      	b.n	800909a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800909c:	f000 f8e6 	bl	800926c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80090a0:	2100      	movs	r1, #0
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fd50 	bl	8009b48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80090a8:	f000 f8ee 	bl	8009288 <xTaskResumeAll>
 80090ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d107      	bne.n	80090c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80090b4:	4b06      	ldr	r3, [pc, #24]	; (80090d0 <vTaskDelay+0x64>)
 80090b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ba:	601a      	str	r2, [r3, #0]
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090c4:	bf00      	nop
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	200012d8 	.word	0x200012d8
 80090d0:	e000ed04 	.word	0xe000ed04

080090d4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b088      	sub	sp, #32
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10a      	bne.n	80090fc <eTaskGetState+0x28>
	__asm volatile
 80090e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	60bb      	str	r3, [r7, #8]
}
 80090f8:	bf00      	nop
 80090fa:	e7fe      	b.n	80090fa <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80090fc:	4b23      	ldr	r3, [pc, #140]	; (800918c <eTaskGetState+0xb8>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	69ba      	ldr	r2, [r7, #24]
 8009102:	429a      	cmp	r2, r3
 8009104:	d102      	bne.n	800910c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8009106:	2300      	movs	r3, #0
 8009108:	77fb      	strb	r3, [r7, #31]
 800910a:	e03a      	b.n	8009182 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800910c:	f001 faa2 	bl	800a654 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	695b      	ldr	r3, [r3, #20]
 8009114:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8009116:	4b1e      	ldr	r3, [pc, #120]	; (8009190 <eTaskGetState+0xbc>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800911c:	4b1d      	ldr	r3, [pc, #116]	; (8009194 <eTaskGetState+0xc0>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8009122:	f001 fac7 	bl	800a6b4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	429a      	cmp	r2, r3
 800912c:	d003      	beq.n	8009136 <eTaskGetState+0x62>
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	429a      	cmp	r2, r3
 8009134:	d102      	bne.n	800913c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8009136:	2302      	movs	r3, #2
 8009138:	77fb      	strb	r3, [r7, #31]
 800913a:	e022      	b.n	8009182 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	4a16      	ldr	r2, [pc, #88]	; (8009198 <eTaskGetState+0xc4>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d112      	bne.n	800916a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10b      	bne.n	8009164 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b01      	cmp	r3, #1
 8009156:	d102      	bne.n	800915e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8009158:	2302      	movs	r3, #2
 800915a:	77fb      	strb	r3, [r7, #31]
 800915c:	e011      	b.n	8009182 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800915e:	2303      	movs	r3, #3
 8009160:	77fb      	strb	r3, [r7, #31]
 8009162:	e00e      	b.n	8009182 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8009164:	2302      	movs	r3, #2
 8009166:	77fb      	strb	r3, [r7, #31]
 8009168:	e00b      	b.n	8009182 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	4a0b      	ldr	r2, [pc, #44]	; (800919c <eTaskGetState+0xc8>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d002      	beq.n	8009178 <eTaskGetState+0xa4>
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d102      	bne.n	800917e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8009178:	2304      	movs	r3, #4
 800917a:	77fb      	strb	r3, [r7, #31]
 800917c:	e001      	b.n	8009182 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800917e:	2301      	movs	r3, #1
 8009180:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8009182:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009184:	4618      	mov	r0, r3
 8009186:	3720      	adds	r7, #32
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	20000ddc 	.word	0x20000ddc
 8009190:	20001268 	.word	0x20001268
 8009194:	2000126c 	.word	0x2000126c
 8009198:	2000129c 	.word	0x2000129c
 800919c:	20001284 	.word	0x20001284

080091a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08a      	sub	sp, #40	; 0x28
 80091a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80091a6:	2300      	movs	r3, #0
 80091a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091ae:	463a      	mov	r2, r7
 80091b0:	1d39      	adds	r1, r7, #4
 80091b2:	f107 0308 	add.w	r3, r7, #8
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fe feb6 	bl	8007f28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	9202      	str	r2, [sp, #8]
 80091c4:	9301      	str	r3, [sp, #4]
 80091c6:	2300      	movs	r3, #0
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	2300      	movs	r3, #0
 80091cc:	460a      	mov	r2, r1
 80091ce:	4921      	ldr	r1, [pc, #132]	; (8009254 <vTaskStartScheduler+0xb4>)
 80091d0:	4821      	ldr	r0, [pc, #132]	; (8009258 <vTaskStartScheduler+0xb8>)
 80091d2:	f7ff fd37 	bl	8008c44 <xTaskCreateStatic>
 80091d6:	4603      	mov	r3, r0
 80091d8:	4a20      	ldr	r2, [pc, #128]	; (800925c <vTaskStartScheduler+0xbc>)
 80091da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80091dc:	4b1f      	ldr	r3, [pc, #124]	; (800925c <vTaskStartScheduler+0xbc>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d002      	beq.n	80091ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80091e4:	2301      	movs	r3, #1
 80091e6:	617b      	str	r3, [r7, #20]
 80091e8:	e001      	b.n	80091ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d102      	bne.n	80091fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80091f4:	f000 fcfc 	bl	8009bf0 <xTimerCreateTimerTask>
 80091f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d116      	bne.n	800922e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	613b      	str	r3, [r7, #16]
}
 8009212:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009214:	4b12      	ldr	r3, [pc, #72]	; (8009260 <vTaskStartScheduler+0xc0>)
 8009216:	f04f 32ff 	mov.w	r2, #4294967295
 800921a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800921c:	4b11      	ldr	r3, [pc, #68]	; (8009264 <vTaskStartScheduler+0xc4>)
 800921e:	2201      	movs	r2, #1
 8009220:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009222:	4b11      	ldr	r3, [pc, #68]	; (8009268 <vTaskStartScheduler+0xc8>)
 8009224:	2200      	movs	r2, #0
 8009226:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009228:	f001 f972 	bl	800a510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800922c:	e00e      	b.n	800924c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009234:	d10a      	bne.n	800924c <vTaskStartScheduler+0xac>
	__asm volatile
 8009236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	60fb      	str	r3, [r7, #12]
}
 8009248:	bf00      	nop
 800924a:	e7fe      	b.n	800924a <vTaskStartScheduler+0xaa>
}
 800924c:	bf00      	nop
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	0800b81c 	.word	0x0800b81c
 8009258:	08009885 	.word	0x08009885
 800925c:	200012d4 	.word	0x200012d4
 8009260:	200012d0 	.word	0x200012d0
 8009264:	200012bc 	.word	0x200012bc
 8009268:	200012b4 	.word	0x200012b4

0800926c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800926c:	b480      	push	{r7}
 800926e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009270:	4b04      	ldr	r3, [pc, #16]	; (8009284 <vTaskSuspendAll+0x18>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	3301      	adds	r3, #1
 8009276:	4a03      	ldr	r2, [pc, #12]	; (8009284 <vTaskSuspendAll+0x18>)
 8009278:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800927a:	bf00      	nop
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	200012d8 	.word	0x200012d8

08009288 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800928e:	2300      	movs	r3, #0
 8009290:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009292:	2300      	movs	r3, #0
 8009294:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009296:	4b42      	ldr	r3, [pc, #264]	; (80093a0 <xTaskResumeAll+0x118>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10a      	bne.n	80092b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800929e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	603b      	str	r3, [r7, #0]
}
 80092b0:	bf00      	nop
 80092b2:	e7fe      	b.n	80092b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80092b4:	f001 f9ce 	bl	800a654 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80092b8:	4b39      	ldr	r3, [pc, #228]	; (80093a0 <xTaskResumeAll+0x118>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3b01      	subs	r3, #1
 80092be:	4a38      	ldr	r2, [pc, #224]	; (80093a0 <xTaskResumeAll+0x118>)
 80092c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092c2:	4b37      	ldr	r3, [pc, #220]	; (80093a0 <xTaskResumeAll+0x118>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d162      	bne.n	8009390 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80092ca:	4b36      	ldr	r3, [pc, #216]	; (80093a4 <xTaskResumeAll+0x11c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d05e      	beq.n	8009390 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092d2:	e02f      	b.n	8009334 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092d4:	4b34      	ldr	r3, [pc, #208]	; (80093a8 <xTaskResumeAll+0x120>)
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	3318      	adds	r3, #24
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fe fedf 	bl	80080a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3304      	adds	r3, #4
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe feda 	bl	80080a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f4:	4b2d      	ldr	r3, [pc, #180]	; (80093ac <xTaskResumeAll+0x124>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d903      	bls.n	8009304 <xTaskResumeAll+0x7c>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009300:	4a2a      	ldr	r2, [pc, #168]	; (80093ac <xTaskResumeAll+0x124>)
 8009302:	6013      	str	r3, [r2, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009308:	4613      	mov	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4413      	add	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4a27      	ldr	r2, [pc, #156]	; (80093b0 <xTaskResumeAll+0x128>)
 8009312:	441a      	add	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	3304      	adds	r3, #4
 8009318:	4619      	mov	r1, r3
 800931a:	4610      	mov	r0, r2
 800931c:	f7fe fe65 	bl	8007fea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009324:	4b23      	ldr	r3, [pc, #140]	; (80093b4 <xTaskResumeAll+0x12c>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932a:	429a      	cmp	r2, r3
 800932c:	d302      	bcc.n	8009334 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800932e:	4b22      	ldr	r3, [pc, #136]	; (80093b8 <xTaskResumeAll+0x130>)
 8009330:	2201      	movs	r2, #1
 8009332:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009334:	4b1c      	ldr	r3, [pc, #112]	; (80093a8 <xTaskResumeAll+0x120>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1cb      	bne.n	80092d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009342:	f000 fb55 	bl	80099f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009346:	4b1d      	ldr	r3, [pc, #116]	; (80093bc <xTaskResumeAll+0x134>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d010      	beq.n	8009374 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009352:	f000 f847 	bl	80093e4 <xTaskIncrementTick>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800935c:	4b16      	ldr	r3, [pc, #88]	; (80093b8 <xTaskResumeAll+0x130>)
 800935e:	2201      	movs	r2, #1
 8009360:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	3b01      	subs	r3, #1
 8009366:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1f1      	bne.n	8009352 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800936e:	4b13      	ldr	r3, [pc, #76]	; (80093bc <xTaskResumeAll+0x134>)
 8009370:	2200      	movs	r2, #0
 8009372:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009374:	4b10      	ldr	r3, [pc, #64]	; (80093b8 <xTaskResumeAll+0x130>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d009      	beq.n	8009390 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800937c:	2301      	movs	r3, #1
 800937e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009380:	4b0f      	ldr	r3, [pc, #60]	; (80093c0 <xTaskResumeAll+0x138>)
 8009382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009386:	601a      	str	r2, [r3, #0]
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009390:	f001 f990 	bl	800a6b4 <vPortExitCritical>

	return xAlreadyYielded;
 8009394:	68bb      	ldr	r3, [r7, #8]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	200012d8 	.word	0x200012d8
 80093a4:	200012b0 	.word	0x200012b0
 80093a8:	20001270 	.word	0x20001270
 80093ac:	200012b8 	.word	0x200012b8
 80093b0:	20000de0 	.word	0x20000de0
 80093b4:	20000ddc 	.word	0x20000ddc
 80093b8:	200012c4 	.word	0x200012c4
 80093bc:	200012c0 	.word	0x200012c0
 80093c0:	e000ed04 	.word	0xe000ed04

080093c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80093ca:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <xTaskGetTickCount+0x1c>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80093d0:	687b      	ldr	r3, [r7, #4]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	370c      	adds	r7, #12
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	200012b4 	.word	0x200012b4

080093e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093ea:	2300      	movs	r3, #0
 80093ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ee:	4b4f      	ldr	r3, [pc, #316]	; (800952c <xTaskIncrementTick+0x148>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f040 808f 	bne.w	8009516 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093f8:	4b4d      	ldr	r3, [pc, #308]	; (8009530 <xTaskIncrementTick+0x14c>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3301      	adds	r3, #1
 80093fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009400:	4a4b      	ldr	r2, [pc, #300]	; (8009530 <xTaskIncrementTick+0x14c>)
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d120      	bne.n	800944e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800940c:	4b49      	ldr	r3, [pc, #292]	; (8009534 <xTaskIncrementTick+0x150>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <xTaskIncrementTick+0x48>
	__asm volatile
 8009416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	603b      	str	r3, [r7, #0]
}
 8009428:	bf00      	nop
 800942a:	e7fe      	b.n	800942a <xTaskIncrementTick+0x46>
 800942c:	4b41      	ldr	r3, [pc, #260]	; (8009534 <xTaskIncrementTick+0x150>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	60fb      	str	r3, [r7, #12]
 8009432:	4b41      	ldr	r3, [pc, #260]	; (8009538 <xTaskIncrementTick+0x154>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a3f      	ldr	r2, [pc, #252]	; (8009534 <xTaskIncrementTick+0x150>)
 8009438:	6013      	str	r3, [r2, #0]
 800943a:	4a3f      	ldr	r2, [pc, #252]	; (8009538 <xTaskIncrementTick+0x154>)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6013      	str	r3, [r2, #0]
 8009440:	4b3e      	ldr	r3, [pc, #248]	; (800953c <xTaskIncrementTick+0x158>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3301      	adds	r3, #1
 8009446:	4a3d      	ldr	r2, [pc, #244]	; (800953c <xTaskIncrementTick+0x158>)
 8009448:	6013      	str	r3, [r2, #0]
 800944a:	f000 fad1 	bl	80099f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800944e:	4b3c      	ldr	r3, [pc, #240]	; (8009540 <xTaskIncrementTick+0x15c>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	429a      	cmp	r2, r3
 8009456:	d349      	bcc.n	80094ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009458:	4b36      	ldr	r3, [pc, #216]	; (8009534 <xTaskIncrementTick+0x150>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d104      	bne.n	800946c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009462:	4b37      	ldr	r3, [pc, #220]	; (8009540 <xTaskIncrementTick+0x15c>)
 8009464:	f04f 32ff 	mov.w	r2, #4294967295
 8009468:	601a      	str	r2, [r3, #0]
					break;
 800946a:	e03f      	b.n	80094ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800946c:	4b31      	ldr	r3, [pc, #196]	; (8009534 <xTaskIncrementTick+0x150>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	429a      	cmp	r2, r3
 8009482:	d203      	bcs.n	800948c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009484:	4a2e      	ldr	r2, [pc, #184]	; (8009540 <xTaskIncrementTick+0x15c>)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800948a:	e02f      	b.n	80094ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	3304      	adds	r3, #4
 8009490:	4618      	mov	r0, r3
 8009492:	f7fe fe07 	bl	80080a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949a:	2b00      	cmp	r3, #0
 800949c:	d004      	beq.n	80094a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	3318      	adds	r3, #24
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fe fdfe 	bl	80080a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ac:	4b25      	ldr	r3, [pc, #148]	; (8009544 <xTaskIncrementTick+0x160>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d903      	bls.n	80094bc <xTaskIncrementTick+0xd8>
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b8:	4a22      	ldr	r2, [pc, #136]	; (8009544 <xTaskIncrementTick+0x160>)
 80094ba:	6013      	str	r3, [r2, #0]
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c0:	4613      	mov	r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4413      	add	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4a1f      	ldr	r2, [pc, #124]	; (8009548 <xTaskIncrementTick+0x164>)
 80094ca:	441a      	add	r2, r3
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	3304      	adds	r3, #4
 80094d0:	4619      	mov	r1, r3
 80094d2:	4610      	mov	r0, r2
 80094d4:	f7fe fd89 	bl	8007fea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094dc:	4b1b      	ldr	r3, [pc, #108]	; (800954c <xTaskIncrementTick+0x168>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d3b8      	bcc.n	8009458 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80094e6:	2301      	movs	r3, #1
 80094e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094ea:	e7b5      	b.n	8009458 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094ec:	4b17      	ldr	r3, [pc, #92]	; (800954c <xTaskIncrementTick+0x168>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f2:	4915      	ldr	r1, [pc, #84]	; (8009548 <xTaskIncrementTick+0x164>)
 80094f4:	4613      	mov	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	440b      	add	r3, r1
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d901      	bls.n	8009508 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009504:	2301      	movs	r3, #1
 8009506:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009508:	4b11      	ldr	r3, [pc, #68]	; (8009550 <xTaskIncrementTick+0x16c>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d007      	beq.n	8009520 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009510:	2301      	movs	r3, #1
 8009512:	617b      	str	r3, [r7, #20]
 8009514:	e004      	b.n	8009520 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009516:	4b0f      	ldr	r3, [pc, #60]	; (8009554 <xTaskIncrementTick+0x170>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3301      	adds	r3, #1
 800951c:	4a0d      	ldr	r2, [pc, #52]	; (8009554 <xTaskIncrementTick+0x170>)
 800951e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009520:	697b      	ldr	r3, [r7, #20]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	200012d8 	.word	0x200012d8
 8009530:	200012b4 	.word	0x200012b4
 8009534:	20001268 	.word	0x20001268
 8009538:	2000126c 	.word	0x2000126c
 800953c:	200012c8 	.word	0x200012c8
 8009540:	200012d0 	.word	0x200012d0
 8009544:	200012b8 	.word	0x200012b8
 8009548:	20000de0 	.word	0x20000de0
 800954c:	20000ddc 	.word	0x20000ddc
 8009550:	200012c4 	.word	0x200012c4
 8009554:	200012c0 	.word	0x200012c0

08009558 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800955e:	4b28      	ldr	r3, [pc, #160]	; (8009600 <vTaskSwitchContext+0xa8>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d003      	beq.n	800956e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009566:	4b27      	ldr	r3, [pc, #156]	; (8009604 <vTaskSwitchContext+0xac>)
 8009568:	2201      	movs	r2, #1
 800956a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800956c:	e041      	b.n	80095f2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800956e:	4b25      	ldr	r3, [pc, #148]	; (8009604 <vTaskSwitchContext+0xac>)
 8009570:	2200      	movs	r2, #0
 8009572:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009574:	4b24      	ldr	r3, [pc, #144]	; (8009608 <vTaskSwitchContext+0xb0>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	60fb      	str	r3, [r7, #12]
 800957a:	e010      	b.n	800959e <vTaskSwitchContext+0x46>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10a      	bne.n	8009598 <vTaskSwitchContext+0x40>
	__asm volatile
 8009582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009586:	f383 8811 	msr	BASEPRI, r3
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	607b      	str	r3, [r7, #4]
}
 8009594:	bf00      	nop
 8009596:	e7fe      	b.n	8009596 <vTaskSwitchContext+0x3e>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	3b01      	subs	r3, #1
 800959c:	60fb      	str	r3, [r7, #12]
 800959e:	491b      	ldr	r1, [pc, #108]	; (800960c <vTaskSwitchContext+0xb4>)
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	4613      	mov	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	440b      	add	r3, r1
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0e4      	beq.n	800957c <vTaskSwitchContext+0x24>
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	4613      	mov	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4a13      	ldr	r2, [pc, #76]	; (800960c <vTaskSwitchContext+0xb4>)
 80095be:	4413      	add	r3, r2
 80095c0:	60bb      	str	r3, [r7, #8]
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	685a      	ldr	r2, [r3, #4]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	605a      	str	r2, [r3, #4]
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	3308      	adds	r3, #8
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d104      	bne.n	80095e2 <vTaskSwitchContext+0x8a>
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	605a      	str	r2, [r3, #4]
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	4a09      	ldr	r2, [pc, #36]	; (8009610 <vTaskSwitchContext+0xb8>)
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	4a06      	ldr	r2, [pc, #24]	; (8009608 <vTaskSwitchContext+0xb0>)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6013      	str	r3, [r2, #0]
}
 80095f2:	bf00      	nop
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	200012d8 	.word	0x200012d8
 8009604:	200012c4 	.word	0x200012c4
 8009608:	200012b8 	.word	0x200012b8
 800960c:	20000de0 	.word	0x20000de0
 8009610:	20000ddc 	.word	0x20000ddc

08009614 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10a      	bne.n	800963a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	60fb      	str	r3, [r7, #12]
}
 8009636:	bf00      	nop
 8009638:	e7fe      	b.n	8009638 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800963a:	4b07      	ldr	r3, [pc, #28]	; (8009658 <vTaskPlaceOnEventList+0x44>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3318      	adds	r3, #24
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7fe fcf5 	bl	8008032 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009648:	2101      	movs	r1, #1
 800964a:	6838      	ldr	r0, [r7, #0]
 800964c:	f000 fa7c 	bl	8009b48 <prvAddCurrentTaskToDelayedList>
}
 8009650:	bf00      	nop
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	20000ddc 	.word	0x20000ddc

0800965c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10a      	bne.n	8009684 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800966e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	617b      	str	r3, [r7, #20]
}
 8009680:	bf00      	nop
 8009682:	e7fe      	b.n	8009682 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009684:	4b0a      	ldr	r3, [pc, #40]	; (80096b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3318      	adds	r3, #24
 800968a:	4619      	mov	r1, r3
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f7fe fcac 	bl	8007fea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009698:	f04f 33ff 	mov.w	r3, #4294967295
 800969c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800969e:	6879      	ldr	r1, [r7, #4]
 80096a0:	68b8      	ldr	r0, [r7, #8]
 80096a2:	f000 fa51 	bl	8009b48 <prvAddCurrentTaskToDelayedList>
	}
 80096a6:	bf00      	nop
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	20000ddc 	.word	0x20000ddc

080096b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b086      	sub	sp, #24
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10a      	bne.n	80096e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80096ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	60fb      	str	r3, [r7, #12]
}
 80096dc:	bf00      	nop
 80096de:	e7fe      	b.n	80096de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	3318      	adds	r3, #24
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fe fcdd 	bl	80080a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096ea:	4b1e      	ldr	r3, [pc, #120]	; (8009764 <xTaskRemoveFromEventList+0xb0>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d11d      	bne.n	800972e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	3304      	adds	r3, #4
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fe fcd4 	bl	80080a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009700:	4b19      	ldr	r3, [pc, #100]	; (8009768 <xTaskRemoveFromEventList+0xb4>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	429a      	cmp	r2, r3
 8009706:	d903      	bls.n	8009710 <xTaskRemoveFromEventList+0x5c>
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970c:	4a16      	ldr	r2, [pc, #88]	; (8009768 <xTaskRemoveFromEventList+0xb4>)
 800970e:	6013      	str	r3, [r2, #0]
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009714:	4613      	mov	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4a13      	ldr	r2, [pc, #76]	; (800976c <xTaskRemoveFromEventList+0xb8>)
 800971e:	441a      	add	r2, r3
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	3304      	adds	r3, #4
 8009724:	4619      	mov	r1, r3
 8009726:	4610      	mov	r0, r2
 8009728:	f7fe fc5f 	bl	8007fea <vListInsertEnd>
 800972c:	e005      	b.n	800973a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	3318      	adds	r3, #24
 8009732:	4619      	mov	r1, r3
 8009734:	480e      	ldr	r0, [pc, #56]	; (8009770 <xTaskRemoveFromEventList+0xbc>)
 8009736:	f7fe fc58 	bl	8007fea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973e:	4b0d      	ldr	r3, [pc, #52]	; (8009774 <xTaskRemoveFromEventList+0xc0>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009744:	429a      	cmp	r2, r3
 8009746:	d905      	bls.n	8009754 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009748:	2301      	movs	r3, #1
 800974a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800974c:	4b0a      	ldr	r3, [pc, #40]	; (8009778 <xTaskRemoveFromEventList+0xc4>)
 800974e:	2201      	movs	r2, #1
 8009750:	601a      	str	r2, [r3, #0]
 8009752:	e001      	b.n	8009758 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009754:	2300      	movs	r3, #0
 8009756:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009758:	697b      	ldr	r3, [r7, #20]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	200012d8 	.word	0x200012d8
 8009768:	200012b8 	.word	0x200012b8
 800976c:	20000de0 	.word	0x20000de0
 8009770:	20001270 	.word	0x20001270
 8009774:	20000ddc 	.word	0x20000ddc
 8009778:	200012c4 	.word	0x200012c4

0800977c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009784:	4b06      	ldr	r3, [pc, #24]	; (80097a0 <vTaskInternalSetTimeOutState+0x24>)
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800978c:	4b05      	ldr	r3, [pc, #20]	; (80097a4 <vTaskInternalSetTimeOutState+0x28>)
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	605a      	str	r2, [r3, #4]
}
 8009794:	bf00      	nop
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	200012c8 	.word	0x200012c8
 80097a4:	200012b4 	.word	0x200012b4

080097a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b088      	sub	sp, #32
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10a      	bne.n	80097ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80097b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097bc:	f383 8811 	msr	BASEPRI, r3
 80097c0:	f3bf 8f6f 	isb	sy
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	613b      	str	r3, [r7, #16]
}
 80097ca:	bf00      	nop
 80097cc:	e7fe      	b.n	80097cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10a      	bne.n	80097ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	60fb      	str	r3, [r7, #12]
}
 80097e6:	bf00      	nop
 80097e8:	e7fe      	b.n	80097e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80097ea:	f000 ff33 	bl	800a654 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80097ee:	4b1d      	ldr	r3, [pc, #116]	; (8009864 <xTaskCheckForTimeOut+0xbc>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	69ba      	ldr	r2, [r7, #24]
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009806:	d102      	bne.n	800980e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009808:	2300      	movs	r3, #0
 800980a:	61fb      	str	r3, [r7, #28]
 800980c:	e023      	b.n	8009856 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	4b15      	ldr	r3, [pc, #84]	; (8009868 <xTaskCheckForTimeOut+0xc0>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	429a      	cmp	r2, r3
 8009818:	d007      	beq.n	800982a <xTaskCheckForTimeOut+0x82>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	69ba      	ldr	r2, [r7, #24]
 8009820:	429a      	cmp	r2, r3
 8009822:	d302      	bcc.n	800982a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009824:	2301      	movs	r3, #1
 8009826:	61fb      	str	r3, [r7, #28]
 8009828:	e015      	b.n	8009856 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	429a      	cmp	r2, r3
 8009832:	d20b      	bcs.n	800984c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	1ad2      	subs	r2, r2, r3
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7ff ff9b 	bl	800977c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009846:	2300      	movs	r3, #0
 8009848:	61fb      	str	r3, [r7, #28]
 800984a:	e004      	b.n	8009856 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	2200      	movs	r2, #0
 8009850:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009852:	2301      	movs	r3, #1
 8009854:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009856:	f000 ff2d 	bl	800a6b4 <vPortExitCritical>

	return xReturn;
 800985a:	69fb      	ldr	r3, [r7, #28]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3720      	adds	r7, #32
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	200012b4 	.word	0x200012b4
 8009868:	200012c8 	.word	0x200012c8

0800986c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800986c:	b480      	push	{r7}
 800986e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009870:	4b03      	ldr	r3, [pc, #12]	; (8009880 <vTaskMissedYield+0x14>)
 8009872:	2201      	movs	r2, #1
 8009874:	601a      	str	r2, [r3, #0]
}
 8009876:	bf00      	nop
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr
 8009880:	200012c4 	.word	0x200012c4

08009884 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800988c:	f000 f852 	bl	8009934 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009890:	4b06      	ldr	r3, [pc, #24]	; (80098ac <prvIdleTask+0x28>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d9f9      	bls.n	800988c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009898:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <prvIdleTask+0x2c>)
 800989a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800989e:	601a      	str	r2, [r3, #0]
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80098a8:	e7f0      	b.n	800988c <prvIdleTask+0x8>
 80098aa:	bf00      	nop
 80098ac:	20000de0 	.word	0x20000de0
 80098b0:	e000ed04 	.word	0xe000ed04

080098b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098ba:	2300      	movs	r3, #0
 80098bc:	607b      	str	r3, [r7, #4]
 80098be:	e00c      	b.n	80098da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	4613      	mov	r3, r2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	4413      	add	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4a12      	ldr	r2, [pc, #72]	; (8009914 <prvInitialiseTaskLists+0x60>)
 80098cc:	4413      	add	r3, r2
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe fb5e 	bl	8007f90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	3301      	adds	r3, #1
 80098d8:	607b      	str	r3, [r7, #4]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2b37      	cmp	r3, #55	; 0x37
 80098de:	d9ef      	bls.n	80098c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098e0:	480d      	ldr	r0, [pc, #52]	; (8009918 <prvInitialiseTaskLists+0x64>)
 80098e2:	f7fe fb55 	bl	8007f90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098e6:	480d      	ldr	r0, [pc, #52]	; (800991c <prvInitialiseTaskLists+0x68>)
 80098e8:	f7fe fb52 	bl	8007f90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80098ec:	480c      	ldr	r0, [pc, #48]	; (8009920 <prvInitialiseTaskLists+0x6c>)
 80098ee:	f7fe fb4f 	bl	8007f90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80098f2:	480c      	ldr	r0, [pc, #48]	; (8009924 <prvInitialiseTaskLists+0x70>)
 80098f4:	f7fe fb4c 	bl	8007f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098f8:	480b      	ldr	r0, [pc, #44]	; (8009928 <prvInitialiseTaskLists+0x74>)
 80098fa:	f7fe fb49 	bl	8007f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098fe:	4b0b      	ldr	r3, [pc, #44]	; (800992c <prvInitialiseTaskLists+0x78>)
 8009900:	4a05      	ldr	r2, [pc, #20]	; (8009918 <prvInitialiseTaskLists+0x64>)
 8009902:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009904:	4b0a      	ldr	r3, [pc, #40]	; (8009930 <prvInitialiseTaskLists+0x7c>)
 8009906:	4a05      	ldr	r2, [pc, #20]	; (800991c <prvInitialiseTaskLists+0x68>)
 8009908:	601a      	str	r2, [r3, #0]
}
 800990a:	bf00      	nop
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	20000de0 	.word	0x20000de0
 8009918:	20001240 	.word	0x20001240
 800991c:	20001254 	.word	0x20001254
 8009920:	20001270 	.word	0x20001270
 8009924:	20001284 	.word	0x20001284
 8009928:	2000129c 	.word	0x2000129c
 800992c:	20001268 	.word	0x20001268
 8009930:	2000126c 	.word	0x2000126c

08009934 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800993a:	e019      	b.n	8009970 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800993c:	f000 fe8a 	bl	800a654 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009940:	4b10      	ldr	r3, [pc, #64]	; (8009984 <prvCheckTasksWaitingTermination+0x50>)
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	3304      	adds	r3, #4
 800994c:	4618      	mov	r0, r3
 800994e:	f7fe fba9 	bl	80080a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009952:	4b0d      	ldr	r3, [pc, #52]	; (8009988 <prvCheckTasksWaitingTermination+0x54>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	3b01      	subs	r3, #1
 8009958:	4a0b      	ldr	r2, [pc, #44]	; (8009988 <prvCheckTasksWaitingTermination+0x54>)
 800995a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800995c:	4b0b      	ldr	r3, [pc, #44]	; (800998c <prvCheckTasksWaitingTermination+0x58>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3b01      	subs	r3, #1
 8009962:	4a0a      	ldr	r2, [pc, #40]	; (800998c <prvCheckTasksWaitingTermination+0x58>)
 8009964:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009966:	f000 fea5 	bl	800a6b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f810 	bl	8009990 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009970:	4b06      	ldr	r3, [pc, #24]	; (800998c <prvCheckTasksWaitingTermination+0x58>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e1      	bne.n	800993c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009978:	bf00      	nop
 800997a:	bf00      	nop
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	20001284 	.word	0x20001284
 8009988:	200012b0 	.word	0x200012b0
 800998c:	20001298 	.word	0x20001298

08009990 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d108      	bne.n	80099b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a6:	4618      	mov	r0, r3
 80099a8:	f001 f842 	bl	800aa30 <vPortFree>
				vPortFree( pxTCB );
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f001 f83f 	bl	800aa30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099b2:	e018      	b.n	80099e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d103      	bne.n	80099c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f001 f836 	bl	800aa30 <vPortFree>
	}
 80099c4:	e00f      	b.n	80099e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d00a      	beq.n	80099e6 <prvDeleteTCB+0x56>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	60fb      	str	r3, [r7, #12]
}
 80099e2:	bf00      	nop
 80099e4:	e7fe      	b.n	80099e4 <prvDeleteTCB+0x54>
	}
 80099e6:	bf00      	nop
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
	...

080099f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099f6:	4b0c      	ldr	r3, [pc, #48]	; (8009a28 <prvResetNextTaskUnblockTime+0x38>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d104      	bne.n	8009a0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a00:	4b0a      	ldr	r3, [pc, #40]	; (8009a2c <prvResetNextTaskUnblockTime+0x3c>)
 8009a02:	f04f 32ff 	mov.w	r2, #4294967295
 8009a06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a08:	e008      	b.n	8009a1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a0a:	4b07      	ldr	r3, [pc, #28]	; (8009a28 <prvResetNextTaskUnblockTime+0x38>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	4a04      	ldr	r2, [pc, #16]	; (8009a2c <prvResetNextTaskUnblockTime+0x3c>)
 8009a1a:	6013      	str	r3, [r2, #0]
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	20001268 	.word	0x20001268
 8009a2c:	200012d0 	.word	0x200012d0

08009a30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a36:	4b0b      	ldr	r3, [pc, #44]	; (8009a64 <xTaskGetSchedulerState+0x34>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d102      	bne.n	8009a44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	607b      	str	r3, [r7, #4]
 8009a42:	e008      	b.n	8009a56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a44:	4b08      	ldr	r3, [pc, #32]	; (8009a68 <xTaskGetSchedulerState+0x38>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d102      	bne.n	8009a52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	607b      	str	r3, [r7, #4]
 8009a50:	e001      	b.n	8009a56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a52:	2300      	movs	r3, #0
 8009a54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a56:	687b      	ldr	r3, [r7, #4]
	}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	200012bc 	.word	0x200012bc
 8009a68:	200012d8 	.word	0x200012d8

08009a6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d056      	beq.n	8009b30 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a82:	4b2e      	ldr	r3, [pc, #184]	; (8009b3c <xTaskPriorityDisinherit+0xd0>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d00a      	beq.n	8009aa2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	60fb      	str	r3, [r7, #12]
}
 8009a9e:	bf00      	nop
 8009aa0:	e7fe      	b.n	8009aa0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10a      	bne.n	8009ac0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	60bb      	str	r3, [r7, #8]
}
 8009abc:	bf00      	nop
 8009abe:	e7fe      	b.n	8009abe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ac4:	1e5a      	subs	r2, r3, #1
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d02c      	beq.n	8009b30 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d128      	bne.n	8009b30 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fe fade 	bl	80080a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b00:	4b0f      	ldr	r3, [pc, #60]	; (8009b40 <xTaskPriorityDisinherit+0xd4>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d903      	bls.n	8009b10 <xTaskPriorityDisinherit+0xa4>
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0c:	4a0c      	ldr	r2, [pc, #48]	; (8009b40 <xTaskPriorityDisinherit+0xd4>)
 8009b0e:	6013      	str	r3, [r2, #0]
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b14:	4613      	mov	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4a09      	ldr	r2, [pc, #36]	; (8009b44 <xTaskPriorityDisinherit+0xd8>)
 8009b1e:	441a      	add	r2, r3
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	3304      	adds	r3, #4
 8009b24:	4619      	mov	r1, r3
 8009b26:	4610      	mov	r0, r2
 8009b28:	f7fe fa5f 	bl	8007fea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b30:	697b      	ldr	r3, [r7, #20]
	}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3718      	adds	r7, #24
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	20000ddc 	.word	0x20000ddc
 8009b40:	200012b8 	.word	0x200012b8
 8009b44:	20000de0 	.word	0x20000de0

08009b48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b52:	4b21      	ldr	r3, [pc, #132]	; (8009bd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b58:	4b20      	ldr	r3, [pc, #128]	; (8009bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe faa0 	bl	80080a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b6a:	d10a      	bne.n	8009b82 <prvAddCurrentTaskToDelayedList+0x3a>
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d007      	beq.n	8009b82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b72:	4b1a      	ldr	r3, [pc, #104]	; (8009bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	3304      	adds	r3, #4
 8009b78:	4619      	mov	r1, r3
 8009b7a:	4819      	ldr	r0, [pc, #100]	; (8009be0 <prvAddCurrentTaskToDelayedList+0x98>)
 8009b7c:	f7fe fa35 	bl	8007fea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b80:	e026      	b.n	8009bd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4413      	add	r3, r2
 8009b88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b8a:	4b14      	ldr	r3, [pc, #80]	; (8009bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d209      	bcs.n	8009bae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b9a:	4b12      	ldr	r3, [pc, #72]	; (8009be4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	4b0f      	ldr	r3, [pc, #60]	; (8009bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	4610      	mov	r0, r2
 8009ba8:	f7fe fa43 	bl	8008032 <vListInsert>
}
 8009bac:	e010      	b.n	8009bd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bae:	4b0e      	ldr	r3, [pc, #56]	; (8009be8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	4b0a      	ldr	r3, [pc, #40]	; (8009bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3304      	adds	r3, #4
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4610      	mov	r0, r2
 8009bbc:	f7fe fa39 	bl	8008032 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009bc0:	4b0a      	ldr	r3, [pc, #40]	; (8009bec <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d202      	bcs.n	8009bd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009bca:	4a08      	ldr	r2, [pc, #32]	; (8009bec <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	6013      	str	r3, [r2, #0]
}
 8009bd0:	bf00      	nop
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	200012b4 	.word	0x200012b4
 8009bdc:	20000ddc 	.word	0x20000ddc
 8009be0:	2000129c 	.word	0x2000129c
 8009be4:	2000126c 	.word	0x2000126c
 8009be8:	20001268 	.word	0x20001268
 8009bec:	200012d0 	.word	0x200012d0

08009bf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b08a      	sub	sp, #40	; 0x28
 8009bf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009bfa:	f000 fba1 	bl	800a340 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009bfe:	4b1c      	ldr	r3, [pc, #112]	; (8009c70 <xTimerCreateTimerTask+0x80>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d021      	beq.n	8009c4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c0e:	1d3a      	adds	r2, r7, #4
 8009c10:	f107 0108 	add.w	r1, r7, #8
 8009c14:	f107 030c 	add.w	r3, r7, #12
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fe f99f 	bl	8007f5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	9202      	str	r2, [sp, #8]
 8009c26:	9301      	str	r3, [sp, #4]
 8009c28:	2302      	movs	r3, #2
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	460a      	mov	r2, r1
 8009c30:	4910      	ldr	r1, [pc, #64]	; (8009c74 <xTimerCreateTimerTask+0x84>)
 8009c32:	4811      	ldr	r0, [pc, #68]	; (8009c78 <xTimerCreateTimerTask+0x88>)
 8009c34:	f7ff f806 	bl	8008c44 <xTaskCreateStatic>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	4a10      	ldr	r2, [pc, #64]	; (8009c7c <xTimerCreateTimerTask+0x8c>)
 8009c3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c3e:	4b0f      	ldr	r3, [pc, #60]	; (8009c7c <xTimerCreateTimerTask+0x8c>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c46:	2301      	movs	r3, #1
 8009c48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10a      	bne.n	8009c66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	613b      	str	r3, [r7, #16]
}
 8009c62:	bf00      	nop
 8009c64:	e7fe      	b.n	8009c64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009c66:	697b      	ldr	r3, [r7, #20]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3718      	adds	r7, #24
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	2000130c 	.word	0x2000130c
 8009c74:	0800b824 	.word	0x0800b824
 8009c78:	08009ee9 	.word	0x08009ee9
 8009c7c:	20001310 	.word	0x20001310

08009c80 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b088      	sub	sp, #32
 8009c84:	af02      	add	r7, sp, #8
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
 8009c8c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009c8e:	202c      	movs	r0, #44	; 0x2c
 8009c90:	f000 fe02 	bl	800a898 <pvPortMalloc>
 8009c94:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00d      	beq.n	8009cb8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	9301      	str	r3, [sp, #4]
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	68b9      	ldr	r1, [r7, #8]
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 f843 	bl	8009d3e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009cb8:	697b      	ldr	r3, [r7, #20]
	}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3718      	adds	r7, #24
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b08a      	sub	sp, #40	; 0x28
 8009cc6:	af02      	add	r7, sp, #8
 8009cc8:	60f8      	str	r0, [r7, #12]
 8009cca:	60b9      	str	r1, [r7, #8]
 8009ccc:	607a      	str	r2, [r7, #4]
 8009cce:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009cd0:	232c      	movs	r3, #44	; 0x2c
 8009cd2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	2b2c      	cmp	r3, #44	; 0x2c
 8009cd8:	d00a      	beq.n	8009cf0 <xTimerCreateStatic+0x2e>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	61bb      	str	r3, [r7, #24]
}
 8009cec:	bf00      	nop
 8009cee:	e7fe      	b.n	8009cee <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009cf0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10a      	bne.n	8009d0e <xTimerCreateStatic+0x4c>
	__asm volatile
 8009cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfc:	f383 8811 	msr	BASEPRI, r3
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	617b      	str	r3, [r7, #20]
}
 8009d0a:	bf00      	nop
 8009d0c:	e7fe      	b.n	8009d0c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d10:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00d      	beq.n	8009d34 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	9301      	str	r3, [sp, #4]
 8009d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	68b9      	ldr	r1, [r7, #8]
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f000 f805 	bl	8009d3e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009d34:	69fb      	ldr	r3, [r7, #28]
	}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3720      	adds	r7, #32
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b086      	sub	sp, #24
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	60b9      	str	r1, [r7, #8]
 8009d48:	607a      	str	r2, [r7, #4]
 8009d4a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10a      	bne.n	8009d68 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d56:	f383 8811 	msr	BASEPRI, r3
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	617b      	str	r3, [r7, #20]
}
 8009d64:	bf00      	nop
 8009d66:	e7fe      	b.n	8009d66 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d01e      	beq.n	8009dac <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009d6e:	f000 fae7 	bl	800a340 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	6a3a      	ldr	r2, [r7, #32]
 8009d88:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	3304      	adds	r3, #4
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fe f91e 	bl	8007fd0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d008      	beq.n	8009dac <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009da0:	f043 0304 	orr.w	r3, r3, #4
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009dac:	bf00      	nop
 8009dae:	3718      	adds	r7, #24
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b08a      	sub	sp, #40	; 0x28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10a      	bne.n	8009de2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	623b      	str	r3, [r7, #32]
}
 8009dde:	bf00      	nop
 8009de0:	e7fe      	b.n	8009de0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009de2:	4b1a      	ldr	r3, [pc, #104]	; (8009e4c <xTimerGenericCommand+0x98>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d02a      	beq.n	8009e40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	2b05      	cmp	r3, #5
 8009dfa:	dc18      	bgt.n	8009e2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009dfc:	f7ff fe18 	bl	8009a30 <xTaskGetSchedulerState>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d109      	bne.n	8009e1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e06:	4b11      	ldr	r3, [pc, #68]	; (8009e4c <xTimerGenericCommand+0x98>)
 8009e08:	6818      	ldr	r0, [r3, #0]
 8009e0a:	f107 0110 	add.w	r1, r7, #16
 8009e0e:	2300      	movs	r3, #0
 8009e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e12:	f7fe faaf 	bl	8008374 <xQueueGenericSend>
 8009e16:	6278      	str	r0, [r7, #36]	; 0x24
 8009e18:	e012      	b.n	8009e40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009e1a:	4b0c      	ldr	r3, [pc, #48]	; (8009e4c <xTimerGenericCommand+0x98>)
 8009e1c:	6818      	ldr	r0, [r3, #0]
 8009e1e:	f107 0110 	add.w	r1, r7, #16
 8009e22:	2300      	movs	r3, #0
 8009e24:	2200      	movs	r2, #0
 8009e26:	f7fe faa5 	bl	8008374 <xQueueGenericSend>
 8009e2a:	6278      	str	r0, [r7, #36]	; 0x24
 8009e2c:	e008      	b.n	8009e40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e2e:	4b07      	ldr	r3, [pc, #28]	; (8009e4c <xTimerGenericCommand+0x98>)
 8009e30:	6818      	ldr	r0, [r3, #0]
 8009e32:	f107 0110 	add.w	r1, r7, #16
 8009e36:	2300      	movs	r3, #0
 8009e38:	683a      	ldr	r2, [r7, #0]
 8009e3a:	f7fe fb99 	bl	8008570 <xQueueGenericSendFromISR>
 8009e3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3728      	adds	r7, #40	; 0x28
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	2000130c 	.word	0x2000130c

08009e50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b088      	sub	sp, #32
 8009e54:	af02      	add	r7, sp, #8
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e5a:	4b22      	ldr	r3, [pc, #136]	; (8009ee4 <prvProcessExpiredTimer+0x94>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	3304      	adds	r3, #4
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fe f91b 	bl	80080a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e74:	f003 0304 	and.w	r3, r3, #4
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d022      	beq.n	8009ec2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	699a      	ldr	r2, [r3, #24]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	18d1      	adds	r1, r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	6978      	ldr	r0, [r7, #20]
 8009e8a:	f000 f8d1 	bl	800a030 <prvInsertTimerInActiveList>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d01f      	beq.n	8009ed4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e94:	2300      	movs	r3, #0
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	2300      	movs	r3, #0
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	6978      	ldr	r0, [r7, #20]
 8009ea0:	f7ff ff88 	bl	8009db4 <xTimerGenericCommand>
 8009ea4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d113      	bne.n	8009ed4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	60fb      	str	r3, [r7, #12]
}
 8009ebe:	bf00      	nop
 8009ec0:	e7fe      	b.n	8009ec0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ec8:	f023 0301 	bic.w	r3, r3, #1
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	6a1b      	ldr	r3, [r3, #32]
 8009ed8:	6978      	ldr	r0, [r7, #20]
 8009eda:	4798      	blx	r3
}
 8009edc:	bf00      	nop
 8009ede:	3718      	adds	r7, #24
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	20001304 	.word	0x20001304

08009ee8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ef0:	f107 0308 	add.w	r3, r7, #8
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f000 f857 	bl	8009fa8 <prvGetNextExpireTime>
 8009efa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	4619      	mov	r1, r3
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f000 f803 	bl	8009f0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009f06:	f000 f8d5 	bl	800a0b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f0a:	e7f1      	b.n	8009ef0 <prvTimerTask+0x8>

08009f0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009f16:	f7ff f9a9 	bl	800926c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f1a:	f107 0308 	add.w	r3, r7, #8
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f000 f866 	bl	8009ff0 <prvSampleTimeNow>
 8009f24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d130      	bne.n	8009f8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10a      	bne.n	8009f48 <prvProcessTimerOrBlockTask+0x3c>
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d806      	bhi.n	8009f48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f3a:	f7ff f9a5 	bl	8009288 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f3e:	68f9      	ldr	r1, [r7, #12]
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f7ff ff85 	bl	8009e50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f46:	e024      	b.n	8009f92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d008      	beq.n	8009f60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f4e:	4b13      	ldr	r3, [pc, #76]	; (8009f9c <prvProcessTimerOrBlockTask+0x90>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d101      	bne.n	8009f5c <prvProcessTimerOrBlockTask+0x50>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e000      	b.n	8009f5e <prvProcessTimerOrBlockTask+0x52>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f60:	4b0f      	ldr	r3, [pc, #60]	; (8009fa0 <prvProcessTimerOrBlockTask+0x94>)
 8009f62:	6818      	ldr	r0, [r3, #0]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	f7fe fe35 	bl	8008bdc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009f72:	f7ff f989 	bl	8009288 <xTaskResumeAll>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10a      	bne.n	8009f92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f7c:	4b09      	ldr	r3, [pc, #36]	; (8009fa4 <prvProcessTimerOrBlockTask+0x98>)
 8009f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	f3bf 8f6f 	isb	sy
}
 8009f8c:	e001      	b.n	8009f92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f8e:	f7ff f97b 	bl	8009288 <xTaskResumeAll>
}
 8009f92:	bf00      	nop
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	20001308 	.word	0x20001308
 8009fa0:	2000130c 	.word	0x2000130c
 8009fa4:	e000ed04 	.word	0xe000ed04

08009fa8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009fb0:	4b0e      	ldr	r3, [pc, #56]	; (8009fec <prvGetNextExpireTime+0x44>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <prvGetNextExpireTime+0x16>
 8009fba:	2201      	movs	r2, #1
 8009fbc:	e000      	b.n	8009fc0 <prvGetNextExpireTime+0x18>
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d105      	bne.n	8009fd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fcc:	4b07      	ldr	r3, [pc, #28]	; (8009fec <prvGetNextExpireTime+0x44>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	60fb      	str	r3, [r7, #12]
 8009fd6:	e001      	b.n	8009fdc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3714      	adds	r7, #20
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	20001304 	.word	0x20001304

08009ff0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ff8:	f7ff f9e4 	bl	80093c4 <xTaskGetTickCount>
 8009ffc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009ffe:	4b0b      	ldr	r3, [pc, #44]	; (800a02c <prvSampleTimeNow+0x3c>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68fa      	ldr	r2, [r7, #12]
 800a004:	429a      	cmp	r2, r3
 800a006:	d205      	bcs.n	800a014 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a008:	f000 f936 	bl	800a278 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	e002      	b.n	800a01a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a01a:	4a04      	ldr	r2, [pc, #16]	; (800a02c <prvSampleTimeNow+0x3c>)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a020:	68fb      	ldr	r3, [r7, #12]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	20001314 	.word	0x20001314

0800a030 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a03e:	2300      	movs	r3, #0
 800a040:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	429a      	cmp	r2, r3
 800a054:	d812      	bhi.n	800a07c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	1ad2      	subs	r2, r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	429a      	cmp	r2, r3
 800a062:	d302      	bcc.n	800a06a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a064:	2301      	movs	r3, #1
 800a066:	617b      	str	r3, [r7, #20]
 800a068:	e01b      	b.n	800a0a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a06a:	4b10      	ldr	r3, [pc, #64]	; (800a0ac <prvInsertTimerInActiveList+0x7c>)
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3304      	adds	r3, #4
 800a072:	4619      	mov	r1, r3
 800a074:	4610      	mov	r0, r2
 800a076:	f7fd ffdc 	bl	8008032 <vListInsert>
 800a07a:	e012      	b.n	800a0a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	429a      	cmp	r2, r3
 800a082:	d206      	bcs.n	800a092 <prvInsertTimerInActiveList+0x62>
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d302      	bcc.n	800a092 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a08c:	2301      	movs	r3, #1
 800a08e:	617b      	str	r3, [r7, #20]
 800a090:	e007      	b.n	800a0a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a092:	4b07      	ldr	r3, [pc, #28]	; (800a0b0 <prvInsertTimerInActiveList+0x80>)
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	3304      	adds	r3, #4
 800a09a:	4619      	mov	r1, r3
 800a09c:	4610      	mov	r0, r2
 800a09e:	f7fd ffc8 	bl	8008032 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a0a2:	697b      	ldr	r3, [r7, #20]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3718      	adds	r7, #24
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	20001308 	.word	0x20001308
 800a0b0:	20001304 	.word	0x20001304

0800a0b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b08e      	sub	sp, #56	; 0x38
 800a0b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0ba:	e0ca      	b.n	800a252 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	da18      	bge.n	800a0f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a0c2:	1d3b      	adds	r3, r7, #4
 800a0c4:	3304      	adds	r3, #4
 800a0c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d10a      	bne.n	800a0e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	61fb      	str	r3, [r7, #28]
}
 800a0e0:	bf00      	nop
 800a0e2:	e7fe      	b.n	800a0e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0ea:	6850      	ldr	r0, [r2, #4]
 800a0ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0ee:	6892      	ldr	r2, [r2, #8]
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f2c0 80aa 	blt.w	800a250 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a102:	695b      	ldr	r3, [r3, #20]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d004      	beq.n	800a112 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10a:	3304      	adds	r3, #4
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fd ffc9 	bl	80080a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a112:	463b      	mov	r3, r7
 800a114:	4618      	mov	r0, r3
 800a116:	f7ff ff6b 	bl	8009ff0 <prvSampleTimeNow>
 800a11a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b09      	cmp	r3, #9
 800a120:	f200 8097 	bhi.w	800a252 <prvProcessReceivedCommands+0x19e>
 800a124:	a201      	add	r2, pc, #4	; (adr r2, 800a12c <prvProcessReceivedCommands+0x78>)
 800a126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12a:	bf00      	nop
 800a12c:	0800a155 	.word	0x0800a155
 800a130:	0800a155 	.word	0x0800a155
 800a134:	0800a155 	.word	0x0800a155
 800a138:	0800a1c9 	.word	0x0800a1c9
 800a13c:	0800a1dd 	.word	0x0800a1dd
 800a140:	0800a227 	.word	0x0800a227
 800a144:	0800a155 	.word	0x0800a155
 800a148:	0800a155 	.word	0x0800a155
 800a14c:	0800a1c9 	.word	0x0800a1c9
 800a150:	0800a1dd 	.word	0x0800a1dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a15a:	f043 0301 	orr.w	r3, r3, #1
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a166:	68ba      	ldr	r2, [r7, #8]
 800a168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16a:	699b      	ldr	r3, [r3, #24]
 800a16c:	18d1      	adds	r1, r2, r3
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a174:	f7ff ff5c 	bl	800a030 <prvInsertTimerInActiveList>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d069      	beq.n	800a252 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a180:	6a1b      	ldr	r3, [r3, #32]
 800a182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a184:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a18c:	f003 0304 	and.w	r3, r3, #4
 800a190:	2b00      	cmp	r3, #0
 800a192:	d05e      	beq.n	800a252 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	441a      	add	r2, r3
 800a19c:	2300      	movs	r3, #0
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1a6:	f7ff fe05 	bl	8009db4 <xTimerGenericCommand>
 800a1aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a1ac:	6a3b      	ldr	r3, [r7, #32]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d14f      	bne.n	800a252 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	61bb      	str	r3, [r7, #24]
}
 800a1c4:	bf00      	nop
 800a1c6:	e7fe      	b.n	800a1c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1ce:	f023 0301 	bic.w	r3, r3, #1
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a1da:	e03a      	b.n	800a252 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1e2:	f043 0301 	orr.w	r3, r3, #1
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a1ee:	68ba      	ldr	r2, [r7, #8]
 800a1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10a      	bne.n	800a212 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a200:	f383 8811 	msr	BASEPRI, r3
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	617b      	str	r3, [r7, #20]
}
 800a20e:	bf00      	nop
 800a210:	e7fe      	b.n	800a210 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a214:	699a      	ldr	r2, [r3, #24]
 800a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a218:	18d1      	adds	r1, r2, r3
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a21e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a220:	f7ff ff06 	bl	800a030 <prvInsertTimerInActiveList>
					break;
 800a224:	e015      	b.n	800a252 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a22c:	f003 0302 	and.w	r3, r3, #2
 800a230:	2b00      	cmp	r3, #0
 800a232:	d103      	bne.n	800a23c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a236:	f000 fbfb 	bl	800aa30 <vPortFree>
 800a23a:	e00a      	b.n	800a252 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a242:	f023 0301 	bic.w	r3, r3, #1
 800a246:	b2da      	uxtb	r2, r3
 800a248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a24e:	e000      	b.n	800a252 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a250:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a252:	4b08      	ldr	r3, [pc, #32]	; (800a274 <prvProcessReceivedCommands+0x1c0>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	1d39      	adds	r1, r7, #4
 800a258:	2200      	movs	r2, #0
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fe fa24 	bl	80086a8 <xQueueReceive>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	f47f af2a 	bne.w	800a0bc <prvProcessReceivedCommands+0x8>
	}
}
 800a268:	bf00      	nop
 800a26a:	bf00      	nop
 800a26c:	3730      	adds	r7, #48	; 0x30
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	2000130c 	.word	0x2000130c

0800a278 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b088      	sub	sp, #32
 800a27c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a27e:	e048      	b.n	800a312 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a280:	4b2d      	ldr	r3, [pc, #180]	; (800a338 <prvSwitchTimerLists+0xc0>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a28a:	4b2b      	ldr	r3, [pc, #172]	; (800a338 <prvSwitchTimerLists+0xc0>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	3304      	adds	r3, #4
 800a298:	4618      	mov	r0, r3
 800a29a:	f7fd ff03 	bl	80080a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2ac:	f003 0304 	and.w	r3, r3, #4
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d02e      	beq.n	800a312 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	693a      	ldr	r2, [r7, #16]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d90e      	bls.n	800a2e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2d2:	4b19      	ldr	r3, [pc, #100]	; (800a338 <prvSwitchTimerLists+0xc0>)
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3304      	adds	r3, #4
 800a2da:	4619      	mov	r1, r3
 800a2dc:	4610      	mov	r0, r2
 800a2de:	f7fd fea8 	bl	8008032 <vListInsert>
 800a2e2:	e016      	b.n	800a312 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f7ff fd60 	bl	8009db4 <xTimerGenericCommand>
 800a2f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d10a      	bne.n	800a312 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a300:	f383 8811 	msr	BASEPRI, r3
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	603b      	str	r3, [r7, #0]
}
 800a30e:	bf00      	nop
 800a310:	e7fe      	b.n	800a310 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a312:	4b09      	ldr	r3, [pc, #36]	; (800a338 <prvSwitchTimerLists+0xc0>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1b1      	bne.n	800a280 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a31c:	4b06      	ldr	r3, [pc, #24]	; (800a338 <prvSwitchTimerLists+0xc0>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a322:	4b06      	ldr	r3, [pc, #24]	; (800a33c <prvSwitchTimerLists+0xc4>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a04      	ldr	r2, [pc, #16]	; (800a338 <prvSwitchTimerLists+0xc0>)
 800a328:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a32a:	4a04      	ldr	r2, [pc, #16]	; (800a33c <prvSwitchTimerLists+0xc4>)
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	6013      	str	r3, [r2, #0]
}
 800a330:	bf00      	nop
 800a332:	3718      	adds	r7, #24
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	20001304 	.word	0x20001304
 800a33c:	20001308 	.word	0x20001308

0800a340 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a346:	f000 f985 	bl	800a654 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a34a:	4b15      	ldr	r3, [pc, #84]	; (800a3a0 <prvCheckForValidListAndQueue+0x60>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d120      	bne.n	800a394 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a352:	4814      	ldr	r0, [pc, #80]	; (800a3a4 <prvCheckForValidListAndQueue+0x64>)
 800a354:	f7fd fe1c 	bl	8007f90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a358:	4813      	ldr	r0, [pc, #76]	; (800a3a8 <prvCheckForValidListAndQueue+0x68>)
 800a35a:	f7fd fe19 	bl	8007f90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a35e:	4b13      	ldr	r3, [pc, #76]	; (800a3ac <prvCheckForValidListAndQueue+0x6c>)
 800a360:	4a10      	ldr	r2, [pc, #64]	; (800a3a4 <prvCheckForValidListAndQueue+0x64>)
 800a362:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a364:	4b12      	ldr	r3, [pc, #72]	; (800a3b0 <prvCheckForValidListAndQueue+0x70>)
 800a366:	4a10      	ldr	r2, [pc, #64]	; (800a3a8 <prvCheckForValidListAndQueue+0x68>)
 800a368:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a36a:	2300      	movs	r3, #0
 800a36c:	9300      	str	r3, [sp, #0]
 800a36e:	4b11      	ldr	r3, [pc, #68]	; (800a3b4 <prvCheckForValidListAndQueue+0x74>)
 800a370:	4a11      	ldr	r2, [pc, #68]	; (800a3b8 <prvCheckForValidListAndQueue+0x78>)
 800a372:	2110      	movs	r1, #16
 800a374:	200a      	movs	r0, #10
 800a376:	f7fd ff27 	bl	80081c8 <xQueueGenericCreateStatic>
 800a37a:	4603      	mov	r3, r0
 800a37c:	4a08      	ldr	r2, [pc, #32]	; (800a3a0 <prvCheckForValidListAndQueue+0x60>)
 800a37e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a380:	4b07      	ldr	r3, [pc, #28]	; (800a3a0 <prvCheckForValidListAndQueue+0x60>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d005      	beq.n	800a394 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a388:	4b05      	ldr	r3, [pc, #20]	; (800a3a0 <prvCheckForValidListAndQueue+0x60>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	490b      	ldr	r1, [pc, #44]	; (800a3bc <prvCheckForValidListAndQueue+0x7c>)
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fe fbfa 	bl	8008b88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a394:	f000 f98e 	bl	800a6b4 <vPortExitCritical>
}
 800a398:	bf00      	nop
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	2000130c 	.word	0x2000130c
 800a3a4:	200012dc 	.word	0x200012dc
 800a3a8:	200012f0 	.word	0x200012f0
 800a3ac:	20001304 	.word	0x20001304
 800a3b0:	20001308 	.word	0x20001308
 800a3b4:	200013b8 	.word	0x200013b8
 800a3b8:	20001318 	.word	0x20001318
 800a3bc:	0800b82c 	.word	0x0800b82c

0800a3c0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10a      	bne.n	800a3e8 <pvTimerGetTimerID+0x28>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	60fb      	str	r3, [r7, #12]
}
 800a3e4:	bf00      	nop
 800a3e6:	e7fe      	b.n	800a3e6 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800a3e8:	f000 f934 	bl	800a654 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	69db      	ldr	r3, [r3, #28]
 800a3f0:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a3f2:	f000 f95f 	bl	800a6b4 <vPortExitCritical>

	return pvReturn;
 800a3f6:	693b      	ldr	r3, [r7, #16]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3718      	adds	r7, #24
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	3b04      	subs	r3, #4
 800a410:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	3b04      	subs	r3, #4
 800a41e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	f023 0201 	bic.w	r2, r3, #1
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	3b04      	subs	r3, #4
 800a42e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a430:	4a0c      	ldr	r2, [pc, #48]	; (800a464 <pxPortInitialiseStack+0x64>)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	3b14      	subs	r3, #20
 800a43a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	3b04      	subs	r3, #4
 800a446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f06f 0202 	mvn.w	r2, #2
 800a44e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	3b20      	subs	r3, #32
 800a454:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a456:	68fb      	ldr	r3, [r7, #12]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3714      	adds	r7, #20
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr
 800a464:	0800a469 	.word	0x0800a469

0800a468 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a472:	4b12      	ldr	r3, [pc, #72]	; (800a4bc <prvTaskExitError+0x54>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47a:	d00a      	beq.n	800a492 <prvTaskExitError+0x2a>
	__asm volatile
 800a47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a480:	f383 8811 	msr	BASEPRI, r3
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	f3bf 8f4f 	dsb	sy
 800a48c:	60fb      	str	r3, [r7, #12]
}
 800a48e:	bf00      	nop
 800a490:	e7fe      	b.n	800a490 <prvTaskExitError+0x28>
	__asm volatile
 800a492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a496:	f383 8811 	msr	BASEPRI, r3
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	60bb      	str	r3, [r7, #8]
}
 800a4a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a4a6:	bf00      	nop
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d0fc      	beq.n	800a4a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a4ae:	bf00      	nop
 800a4b0:	bf00      	nop
 800a4b2:	3714      	adds	r7, #20
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr
 800a4bc:	200000a8 	.word	0x200000a8

0800a4c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a4c0:	4b07      	ldr	r3, [pc, #28]	; (800a4e0 <pxCurrentTCBConst2>)
 800a4c2:	6819      	ldr	r1, [r3, #0]
 800a4c4:	6808      	ldr	r0, [r1, #0]
 800a4c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ca:	f380 8809 	msr	PSP, r0
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	f04f 0000 	mov.w	r0, #0
 800a4d6:	f380 8811 	msr	BASEPRI, r0
 800a4da:	4770      	bx	lr
 800a4dc:	f3af 8000 	nop.w

0800a4e0 <pxCurrentTCBConst2>:
 800a4e0:	20000ddc 	.word	0x20000ddc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a4e4:	bf00      	nop
 800a4e6:	bf00      	nop

0800a4e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a4e8:	4808      	ldr	r0, [pc, #32]	; (800a50c <prvPortStartFirstTask+0x24>)
 800a4ea:	6800      	ldr	r0, [r0, #0]
 800a4ec:	6800      	ldr	r0, [r0, #0]
 800a4ee:	f380 8808 	msr	MSP, r0
 800a4f2:	f04f 0000 	mov.w	r0, #0
 800a4f6:	f380 8814 	msr	CONTROL, r0
 800a4fa:	b662      	cpsie	i
 800a4fc:	b661      	cpsie	f
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	df00      	svc	0
 800a508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a50a:	bf00      	nop
 800a50c:	e000ed08 	.word	0xe000ed08

0800a510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b086      	sub	sp, #24
 800a514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a516:	4b46      	ldr	r3, [pc, #280]	; (800a630 <xPortStartScheduler+0x120>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a46      	ldr	r2, [pc, #280]	; (800a634 <xPortStartScheduler+0x124>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d10a      	bne.n	800a536 <xPortStartScheduler+0x26>
	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	613b      	str	r3, [r7, #16]
}
 800a532:	bf00      	nop
 800a534:	e7fe      	b.n	800a534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a536:	4b3e      	ldr	r3, [pc, #248]	; (800a630 <xPortStartScheduler+0x120>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a3f      	ldr	r2, [pc, #252]	; (800a638 <xPortStartScheduler+0x128>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d10a      	bne.n	800a556 <xPortStartScheduler+0x46>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	60fb      	str	r3, [r7, #12]
}
 800a552:	bf00      	nop
 800a554:	e7fe      	b.n	800a554 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a556:	4b39      	ldr	r3, [pc, #228]	; (800a63c <xPortStartScheduler+0x12c>)
 800a558:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	22ff      	movs	r2, #255	; 0xff
 800a566:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	b2db      	uxtb	r3, r3
 800a574:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	4b31      	ldr	r3, [pc, #196]	; (800a640 <xPortStartScheduler+0x130>)
 800a57c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a57e:	4b31      	ldr	r3, [pc, #196]	; (800a644 <xPortStartScheduler+0x134>)
 800a580:	2207      	movs	r2, #7
 800a582:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a584:	e009      	b.n	800a59a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a586:	4b2f      	ldr	r3, [pc, #188]	; (800a644 <xPortStartScheduler+0x134>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	3b01      	subs	r3, #1
 800a58c:	4a2d      	ldr	r2, [pc, #180]	; (800a644 <xPortStartScheduler+0x134>)
 800a58e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a590:	78fb      	ldrb	r3, [r7, #3]
 800a592:	b2db      	uxtb	r3, r3
 800a594:	005b      	lsls	r3, r3, #1
 800a596:	b2db      	uxtb	r3, r3
 800a598:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a59a:	78fb      	ldrb	r3, [r7, #3]
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a2:	2b80      	cmp	r3, #128	; 0x80
 800a5a4:	d0ef      	beq.n	800a586 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a5a6:	4b27      	ldr	r3, [pc, #156]	; (800a644 <xPortStartScheduler+0x134>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f1c3 0307 	rsb	r3, r3, #7
 800a5ae:	2b04      	cmp	r3, #4
 800a5b0:	d00a      	beq.n	800a5c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b6:	f383 8811 	msr	BASEPRI, r3
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	60bb      	str	r3, [r7, #8]
}
 800a5c4:	bf00      	nop
 800a5c6:	e7fe      	b.n	800a5c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a5c8:	4b1e      	ldr	r3, [pc, #120]	; (800a644 <xPortStartScheduler+0x134>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	021b      	lsls	r3, r3, #8
 800a5ce:	4a1d      	ldr	r2, [pc, #116]	; (800a644 <xPortStartScheduler+0x134>)
 800a5d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5d2:	4b1c      	ldr	r3, [pc, #112]	; (800a644 <xPortStartScheduler+0x134>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5da:	4a1a      	ldr	r2, [pc, #104]	; (800a644 <xPortStartScheduler+0x134>)
 800a5dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a5e6:	4b18      	ldr	r3, [pc, #96]	; (800a648 <xPortStartScheduler+0x138>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a17      	ldr	r2, [pc, #92]	; (800a648 <xPortStartScheduler+0x138>)
 800a5ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a5f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a5f2:	4b15      	ldr	r3, [pc, #84]	; (800a648 <xPortStartScheduler+0x138>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a14      	ldr	r2, [pc, #80]	; (800a648 <xPortStartScheduler+0x138>)
 800a5f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a5fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a5fe:	f000 f8dd 	bl	800a7bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a602:	4b12      	ldr	r3, [pc, #72]	; (800a64c <xPortStartScheduler+0x13c>)
 800a604:	2200      	movs	r2, #0
 800a606:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a608:	f000 f8fc 	bl	800a804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a60c:	4b10      	ldr	r3, [pc, #64]	; (800a650 <xPortStartScheduler+0x140>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a0f      	ldr	r2, [pc, #60]	; (800a650 <xPortStartScheduler+0x140>)
 800a612:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a616:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a618:	f7ff ff66 	bl	800a4e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a61c:	f7fe ff9c 	bl	8009558 <vTaskSwitchContext>
	prvTaskExitError();
 800a620:	f7ff ff22 	bl	800a468 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3718      	adds	r7, #24
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	e000ed00 	.word	0xe000ed00
 800a634:	410fc271 	.word	0x410fc271
 800a638:	410fc270 	.word	0x410fc270
 800a63c:	e000e400 	.word	0xe000e400
 800a640:	20001408 	.word	0x20001408
 800a644:	2000140c 	.word	0x2000140c
 800a648:	e000ed20 	.word	0xe000ed20
 800a64c:	200000a8 	.word	0x200000a8
 800a650:	e000ef34 	.word	0xe000ef34

0800a654 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	607b      	str	r3, [r7, #4]
}
 800a66c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a66e:	4b0f      	ldr	r3, [pc, #60]	; (800a6ac <vPortEnterCritical+0x58>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	3301      	adds	r3, #1
 800a674:	4a0d      	ldr	r2, [pc, #52]	; (800a6ac <vPortEnterCritical+0x58>)
 800a676:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a678:	4b0c      	ldr	r3, [pc, #48]	; (800a6ac <vPortEnterCritical+0x58>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d10f      	bne.n	800a6a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a680:	4b0b      	ldr	r3, [pc, #44]	; (800a6b0 <vPortEnterCritical+0x5c>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00a      	beq.n	800a6a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	603b      	str	r3, [r7, #0]
}
 800a69c:	bf00      	nop
 800a69e:	e7fe      	b.n	800a69e <vPortEnterCritical+0x4a>
	}
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr
 800a6ac:	200000a8 	.word	0x200000a8
 800a6b0:	e000ed04 	.word	0xe000ed04

0800a6b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a6ba:	4b12      	ldr	r3, [pc, #72]	; (800a704 <vPortExitCritical+0x50>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10a      	bne.n	800a6d8 <vPortExitCritical+0x24>
	__asm volatile
 800a6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c6:	f383 8811 	msr	BASEPRI, r3
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	607b      	str	r3, [r7, #4]
}
 800a6d4:	bf00      	nop
 800a6d6:	e7fe      	b.n	800a6d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a6d8:	4b0a      	ldr	r3, [pc, #40]	; (800a704 <vPortExitCritical+0x50>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	4a09      	ldr	r2, [pc, #36]	; (800a704 <vPortExitCritical+0x50>)
 800a6e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a6e2:	4b08      	ldr	r3, [pc, #32]	; (800a704 <vPortExitCritical+0x50>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d105      	bne.n	800a6f6 <vPortExitCritical+0x42>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	f383 8811 	msr	BASEPRI, r3
}
 800a6f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a6f6:	bf00      	nop
 800a6f8:	370c      	adds	r7, #12
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop
 800a704:	200000a8 	.word	0x200000a8
	...

0800a710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a710:	f3ef 8009 	mrs	r0, PSP
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	4b15      	ldr	r3, [pc, #84]	; (800a770 <pxCurrentTCBConst>)
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	f01e 0f10 	tst.w	lr, #16
 800a720:	bf08      	it	eq
 800a722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72a:	6010      	str	r0, [r2, #0]
 800a72c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a730:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a734:	f380 8811 	msr	BASEPRI, r0
 800a738:	f3bf 8f4f 	dsb	sy
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f7fe ff0a 	bl	8009558 <vTaskSwitchContext>
 800a744:	f04f 0000 	mov.w	r0, #0
 800a748:	f380 8811 	msr	BASEPRI, r0
 800a74c:	bc09      	pop	{r0, r3}
 800a74e:	6819      	ldr	r1, [r3, #0]
 800a750:	6808      	ldr	r0, [r1, #0]
 800a752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a756:	f01e 0f10 	tst.w	lr, #16
 800a75a:	bf08      	it	eq
 800a75c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a760:	f380 8809 	msr	PSP, r0
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	f3af 8000 	nop.w

0800a770 <pxCurrentTCBConst>:
 800a770:	20000ddc 	.word	0x20000ddc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a774:	bf00      	nop
 800a776:	bf00      	nop

0800a778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	607b      	str	r3, [r7, #4]
}
 800a790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a792:	f7fe fe27 	bl	80093e4 <xTaskIncrementTick>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d003      	beq.n	800a7a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a79c:	4b06      	ldr	r3, [pc, #24]	; (800a7b8 <xPortSysTickHandler+0x40>)
 800a79e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7a2:	601a      	str	r2, [r3, #0]
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	f383 8811 	msr	BASEPRI, r3
}
 800a7ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	e000ed04 	.word	0xe000ed04

0800a7bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a7bc:	b480      	push	{r7}
 800a7be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a7c0:	4b0b      	ldr	r3, [pc, #44]	; (800a7f0 <vPortSetupTimerInterrupt+0x34>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a7c6:	4b0b      	ldr	r3, [pc, #44]	; (800a7f4 <vPortSetupTimerInterrupt+0x38>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a7cc:	4b0a      	ldr	r3, [pc, #40]	; (800a7f8 <vPortSetupTimerInterrupt+0x3c>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a0a      	ldr	r2, [pc, #40]	; (800a7fc <vPortSetupTimerInterrupt+0x40>)
 800a7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d6:	099b      	lsrs	r3, r3, #6
 800a7d8:	4a09      	ldr	r2, [pc, #36]	; (800a800 <vPortSetupTimerInterrupt+0x44>)
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a7de:	4b04      	ldr	r3, [pc, #16]	; (800a7f0 <vPortSetupTimerInterrupt+0x34>)
 800a7e0:	2207      	movs	r2, #7
 800a7e2:	601a      	str	r2, [r3, #0]
}
 800a7e4:	bf00      	nop
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	e000e010 	.word	0xe000e010
 800a7f4:	e000e018 	.word	0xe000e018
 800a7f8:	20000068 	.word	0x20000068
 800a7fc:	10624dd3 	.word	0x10624dd3
 800a800:	e000e014 	.word	0xe000e014

0800a804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a804:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a814 <vPortEnableVFP+0x10>
 800a808:	6801      	ldr	r1, [r0, #0]
 800a80a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a80e:	6001      	str	r1, [r0, #0]
 800a810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a812:	bf00      	nop
 800a814:	e000ed88 	.word	0xe000ed88

0800a818 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a81e:	f3ef 8305 	mrs	r3, IPSR
 800a822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2b0f      	cmp	r3, #15
 800a828:	d914      	bls.n	800a854 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a82a:	4a17      	ldr	r2, [pc, #92]	; (800a888 <vPortValidateInterruptPriority+0x70>)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	4413      	add	r3, r2
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a834:	4b15      	ldr	r3, [pc, #84]	; (800a88c <vPortValidateInterruptPriority+0x74>)
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	7afa      	ldrb	r2, [r7, #11]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d20a      	bcs.n	800a854 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	607b      	str	r3, [r7, #4]
}
 800a850:	bf00      	nop
 800a852:	e7fe      	b.n	800a852 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a854:	4b0e      	ldr	r3, [pc, #56]	; (800a890 <vPortValidateInterruptPriority+0x78>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a85c:	4b0d      	ldr	r3, [pc, #52]	; (800a894 <vPortValidateInterruptPriority+0x7c>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	429a      	cmp	r2, r3
 800a862:	d90a      	bls.n	800a87a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	603b      	str	r3, [r7, #0]
}
 800a876:	bf00      	nop
 800a878:	e7fe      	b.n	800a878 <vPortValidateInterruptPriority+0x60>
	}
 800a87a:	bf00      	nop
 800a87c:	3714      	adds	r7, #20
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	e000e3f0 	.word	0xe000e3f0
 800a88c:	20001408 	.word	0x20001408
 800a890:	e000ed0c 	.word	0xe000ed0c
 800a894:	2000140c 	.word	0x2000140c

0800a898 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b08a      	sub	sp, #40	; 0x28
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a8a4:	f7fe fce2 	bl	800926c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a8a8:	4b5b      	ldr	r3, [pc, #364]	; (800aa18 <pvPortMalloc+0x180>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d101      	bne.n	800a8b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a8b0:	f000 f920 	bl	800aaf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a8b4:	4b59      	ldr	r3, [pc, #356]	; (800aa1c <pvPortMalloc+0x184>)
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4013      	ands	r3, r2
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f040 8093 	bne.w	800a9e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d01d      	beq.n	800a904 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a8c8:	2208      	movs	r2, #8
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f003 0307 	and.w	r3, r3, #7
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d014      	beq.n	800a904 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f023 0307 	bic.w	r3, r3, #7
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f003 0307 	and.w	r3, r3, #7
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00a      	beq.n	800a904 <pvPortMalloc+0x6c>
	__asm volatile
 800a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	617b      	str	r3, [r7, #20]
}
 800a900:	bf00      	nop
 800a902:	e7fe      	b.n	800a902 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d06e      	beq.n	800a9e8 <pvPortMalloc+0x150>
 800a90a:	4b45      	ldr	r3, [pc, #276]	; (800aa20 <pvPortMalloc+0x188>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	429a      	cmp	r2, r3
 800a912:	d869      	bhi.n	800a9e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a914:	4b43      	ldr	r3, [pc, #268]	; (800aa24 <pvPortMalloc+0x18c>)
 800a916:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a918:	4b42      	ldr	r3, [pc, #264]	; (800aa24 <pvPortMalloc+0x18c>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a91e:	e004      	b.n	800a92a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	429a      	cmp	r2, r3
 800a932:	d903      	bls.n	800a93c <pvPortMalloc+0xa4>
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1f1      	bne.n	800a920 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a93c:	4b36      	ldr	r3, [pc, #216]	; (800aa18 <pvPortMalloc+0x180>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a942:	429a      	cmp	r2, r3
 800a944:	d050      	beq.n	800a9e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a946:	6a3b      	ldr	r3, [r7, #32]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2208      	movs	r2, #8
 800a94c:	4413      	add	r3, r2
 800a94e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	6a3b      	ldr	r3, [r7, #32]
 800a956:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95a:	685a      	ldr	r2, [r3, #4]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	1ad2      	subs	r2, r2, r3
 800a960:	2308      	movs	r3, #8
 800a962:	005b      	lsls	r3, r3, #1
 800a964:	429a      	cmp	r2, r3
 800a966:	d91f      	bls.n	800a9a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4413      	add	r3, r2
 800a96e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	f003 0307 	and.w	r3, r3, #7
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00a      	beq.n	800a990 <pvPortMalloc+0xf8>
	__asm volatile
 800a97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	613b      	str	r3, [r7, #16]
}
 800a98c:	bf00      	nop
 800a98e:	e7fe      	b.n	800a98e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a992:	685a      	ldr	r2, [r3, #4]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	1ad2      	subs	r2, r2, r3
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a9a2:	69b8      	ldr	r0, [r7, #24]
 800a9a4:	f000 f908 	bl	800abb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9a8:	4b1d      	ldr	r3, [pc, #116]	; (800aa20 <pvPortMalloc+0x188>)
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	4a1b      	ldr	r2, [pc, #108]	; (800aa20 <pvPortMalloc+0x188>)
 800a9b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a9b6:	4b1a      	ldr	r3, [pc, #104]	; (800aa20 <pvPortMalloc+0x188>)
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	4b1b      	ldr	r3, [pc, #108]	; (800aa28 <pvPortMalloc+0x190>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d203      	bcs.n	800a9ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a9c2:	4b17      	ldr	r3, [pc, #92]	; (800aa20 <pvPortMalloc+0x188>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a18      	ldr	r2, [pc, #96]	; (800aa28 <pvPortMalloc+0x190>)
 800a9c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9cc:	685a      	ldr	r2, [r3, #4]
 800a9ce:	4b13      	ldr	r3, [pc, #76]	; (800aa1c <pvPortMalloc+0x184>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	431a      	orrs	r2, r3
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9da:	2200      	movs	r2, #0
 800a9dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a9de:	4b13      	ldr	r3, [pc, #76]	; (800aa2c <pvPortMalloc+0x194>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	4a11      	ldr	r2, [pc, #68]	; (800aa2c <pvPortMalloc+0x194>)
 800a9e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a9e8:	f7fe fc4e 	bl	8009288 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9ec:	69fb      	ldr	r3, [r7, #28]
 800a9ee:	f003 0307 	and.w	r3, r3, #7
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00a      	beq.n	800aa0c <pvPortMalloc+0x174>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	60fb      	str	r3, [r7, #12]
}
 800aa08:	bf00      	nop
 800aa0a:	e7fe      	b.n	800aa0a <pvPortMalloc+0x172>
	return pvReturn;
 800aa0c:	69fb      	ldr	r3, [r7, #28]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3728      	adds	r7, #40	; 0x28
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	20003b28 	.word	0x20003b28
 800aa1c:	20003b3c 	.word	0x20003b3c
 800aa20:	20003b2c 	.word	0x20003b2c
 800aa24:	20003b20 	.word	0x20003b20
 800aa28:	20003b30 	.word	0x20003b30
 800aa2c:	20003b34 	.word	0x20003b34

0800aa30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b086      	sub	sp, #24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d04d      	beq.n	800aade <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa42:	2308      	movs	r3, #8
 800aa44:	425b      	negs	r3, r3
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	4413      	add	r3, r2
 800aa4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	685a      	ldr	r2, [r3, #4]
 800aa54:	4b24      	ldr	r3, [pc, #144]	; (800aae8 <vPortFree+0xb8>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4013      	ands	r3, r2
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10a      	bne.n	800aa74 <vPortFree+0x44>
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	60fb      	str	r3, [r7, #12]
}
 800aa70:	bf00      	nop
 800aa72:	e7fe      	b.n	800aa72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00a      	beq.n	800aa92 <vPortFree+0x62>
	__asm volatile
 800aa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa80:	f383 8811 	msr	BASEPRI, r3
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	60bb      	str	r3, [r7, #8]
}
 800aa8e:	bf00      	nop
 800aa90:	e7fe      	b.n	800aa90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	685a      	ldr	r2, [r3, #4]
 800aa96:	4b14      	ldr	r3, [pc, #80]	; (800aae8 <vPortFree+0xb8>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d01e      	beq.n	800aade <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d11a      	bne.n	800aade <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	685a      	ldr	r2, [r3, #4]
 800aaac:	4b0e      	ldr	r3, [pc, #56]	; (800aae8 <vPortFree+0xb8>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	43db      	mvns	r3, r3
 800aab2:	401a      	ands	r2, r3
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aab8:	f7fe fbd8 	bl	800926c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	685a      	ldr	r2, [r3, #4]
 800aac0:	4b0a      	ldr	r3, [pc, #40]	; (800aaec <vPortFree+0xbc>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4413      	add	r3, r2
 800aac6:	4a09      	ldr	r2, [pc, #36]	; (800aaec <vPortFree+0xbc>)
 800aac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aaca:	6938      	ldr	r0, [r7, #16]
 800aacc:	f000 f874 	bl	800abb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aad0:	4b07      	ldr	r3, [pc, #28]	; (800aaf0 <vPortFree+0xc0>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	3301      	adds	r3, #1
 800aad6:	4a06      	ldr	r2, [pc, #24]	; (800aaf0 <vPortFree+0xc0>)
 800aad8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aada:	f7fe fbd5 	bl	8009288 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aade:	bf00      	nop
 800aae0:	3718      	adds	r7, #24
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	20003b3c 	.word	0x20003b3c
 800aaec:	20003b2c 	.word	0x20003b2c
 800aaf0:	20003b38 	.word	0x20003b38

0800aaf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aafa:	f242 7310 	movw	r3, #10000	; 0x2710
 800aafe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab00:	4b27      	ldr	r3, [pc, #156]	; (800aba0 <prvHeapInit+0xac>)
 800ab02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f003 0307 	and.w	r3, r3, #7
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00c      	beq.n	800ab28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	3307      	adds	r3, #7
 800ab12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f023 0307 	bic.w	r3, r3, #7
 800ab1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab1c:	68ba      	ldr	r2, [r7, #8]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	4a1f      	ldr	r2, [pc, #124]	; (800aba0 <prvHeapInit+0xac>)
 800ab24:	4413      	add	r3, r2
 800ab26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab2c:	4a1d      	ldr	r2, [pc, #116]	; (800aba4 <prvHeapInit+0xb0>)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab32:	4b1c      	ldr	r3, [pc, #112]	; (800aba4 <prvHeapInit+0xb0>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab40:	2208      	movs	r2, #8
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	1a9b      	subs	r3, r3, r2
 800ab46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f023 0307 	bic.w	r3, r3, #7
 800ab4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	4a15      	ldr	r2, [pc, #84]	; (800aba8 <prvHeapInit+0xb4>)
 800ab54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab56:	4b14      	ldr	r3, [pc, #80]	; (800aba8 <prvHeapInit+0xb4>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab5e:	4b12      	ldr	r3, [pc, #72]	; (800aba8 <prvHeapInit+0xb4>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2200      	movs	r2, #0
 800ab64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	1ad2      	subs	r2, r2, r3
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab74:	4b0c      	ldr	r3, [pc, #48]	; (800aba8 <prvHeapInit+0xb4>)
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	4a0a      	ldr	r2, [pc, #40]	; (800abac <prvHeapInit+0xb8>)
 800ab82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	4a09      	ldr	r2, [pc, #36]	; (800abb0 <prvHeapInit+0xbc>)
 800ab8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab8c:	4b09      	ldr	r3, [pc, #36]	; (800abb4 <prvHeapInit+0xc0>)
 800ab8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ab92:	601a      	str	r2, [r3, #0]
}
 800ab94:	bf00      	nop
 800ab96:	3714      	adds	r7, #20
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	20001410 	.word	0x20001410
 800aba4:	20003b20 	.word	0x20003b20
 800aba8:	20003b28 	.word	0x20003b28
 800abac:	20003b30 	.word	0x20003b30
 800abb0:	20003b2c 	.word	0x20003b2c
 800abb4:	20003b3c 	.word	0x20003b3c

0800abb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800abc0:	4b28      	ldr	r3, [pc, #160]	; (800ac64 <prvInsertBlockIntoFreeList+0xac>)
 800abc2:	60fb      	str	r3, [r7, #12]
 800abc4:	e002      	b.n	800abcc <prvInsertBlockIntoFreeList+0x14>
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	60fb      	str	r3, [r7, #12]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d8f7      	bhi.n	800abc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	4413      	add	r3, r2
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d108      	bne.n	800abfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	685a      	ldr	r2, [r3, #4]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	441a      	add	r2, r3
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	441a      	add	r2, r3
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d118      	bne.n	800ac40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	4b15      	ldr	r3, [pc, #84]	; (800ac68 <prvInsertBlockIntoFreeList+0xb0>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d00d      	beq.n	800ac36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685a      	ldr	r2, [r3, #4]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	441a      	add	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	601a      	str	r2, [r3, #0]
 800ac34:	e008      	b.n	800ac48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac36:	4b0c      	ldr	r3, [pc, #48]	; (800ac68 <prvInsertBlockIntoFreeList+0xb0>)
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	601a      	str	r2, [r3, #0]
 800ac3e:	e003      	b.n	800ac48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d002      	beq.n	800ac56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac56:	bf00      	nop
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	20003b20 	.word	0x20003b20
 800ac68:	20003b28 	.word	0x20003b28

0800ac6c <__errno>:
 800ac6c:	4b01      	ldr	r3, [pc, #4]	; (800ac74 <__errno+0x8>)
 800ac6e:	6818      	ldr	r0, [r3, #0]
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop
 800ac74:	200000ac 	.word	0x200000ac

0800ac78 <__libc_init_array>:
 800ac78:	b570      	push	{r4, r5, r6, lr}
 800ac7a:	4d0d      	ldr	r5, [pc, #52]	; (800acb0 <__libc_init_array+0x38>)
 800ac7c:	4c0d      	ldr	r4, [pc, #52]	; (800acb4 <__libc_init_array+0x3c>)
 800ac7e:	1b64      	subs	r4, r4, r5
 800ac80:	10a4      	asrs	r4, r4, #2
 800ac82:	2600      	movs	r6, #0
 800ac84:	42a6      	cmp	r6, r4
 800ac86:	d109      	bne.n	800ac9c <__libc_init_array+0x24>
 800ac88:	4d0b      	ldr	r5, [pc, #44]	; (800acb8 <__libc_init_array+0x40>)
 800ac8a:	4c0c      	ldr	r4, [pc, #48]	; (800acbc <__libc_init_array+0x44>)
 800ac8c:	f000 f936 	bl	800aefc <_init>
 800ac90:	1b64      	subs	r4, r4, r5
 800ac92:	10a4      	asrs	r4, r4, #2
 800ac94:	2600      	movs	r6, #0
 800ac96:	42a6      	cmp	r6, r4
 800ac98:	d105      	bne.n	800aca6 <__libc_init_array+0x2e>
 800ac9a:	bd70      	pop	{r4, r5, r6, pc}
 800ac9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aca0:	4798      	blx	r3
 800aca2:	3601      	adds	r6, #1
 800aca4:	e7ee      	b.n	800ac84 <__libc_init_array+0xc>
 800aca6:	f855 3b04 	ldr.w	r3, [r5], #4
 800acaa:	4798      	blx	r3
 800acac:	3601      	adds	r6, #1
 800acae:	e7f2      	b.n	800ac96 <__libc_init_array+0x1e>
 800acb0:	0800ba4c 	.word	0x0800ba4c
 800acb4:	0800ba4c 	.word	0x0800ba4c
 800acb8:	0800ba4c 	.word	0x0800ba4c
 800acbc:	0800ba50 	.word	0x0800ba50

0800acc0 <malloc>:
 800acc0:	4b02      	ldr	r3, [pc, #8]	; (800accc <malloc+0xc>)
 800acc2:	4601      	mov	r1, r0
 800acc4:	6818      	ldr	r0, [r3, #0]
 800acc6:	f000 b871 	b.w	800adac <_malloc_r>
 800acca:	bf00      	nop
 800accc:	200000ac 	.word	0x200000ac

0800acd0 <free>:
 800acd0:	4b02      	ldr	r3, [pc, #8]	; (800acdc <free+0xc>)
 800acd2:	4601      	mov	r1, r0
 800acd4:	6818      	ldr	r0, [r3, #0]
 800acd6:	f000 b819 	b.w	800ad0c <_free_r>
 800acda:	bf00      	nop
 800acdc:	200000ac 	.word	0x200000ac

0800ace0 <memcpy>:
 800ace0:	440a      	add	r2, r1
 800ace2:	4291      	cmp	r1, r2
 800ace4:	f100 33ff 	add.w	r3, r0, #4294967295
 800ace8:	d100      	bne.n	800acec <memcpy+0xc>
 800acea:	4770      	bx	lr
 800acec:	b510      	push	{r4, lr}
 800acee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acf6:	4291      	cmp	r1, r2
 800acf8:	d1f9      	bne.n	800acee <memcpy+0xe>
 800acfa:	bd10      	pop	{r4, pc}

0800acfc <memset>:
 800acfc:	4402      	add	r2, r0
 800acfe:	4603      	mov	r3, r0
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d100      	bne.n	800ad06 <memset+0xa>
 800ad04:	4770      	bx	lr
 800ad06:	f803 1b01 	strb.w	r1, [r3], #1
 800ad0a:	e7f9      	b.n	800ad00 <memset+0x4>

0800ad0c <_free_r>:
 800ad0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad0e:	2900      	cmp	r1, #0
 800ad10:	d048      	beq.n	800ada4 <_free_r+0x98>
 800ad12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad16:	9001      	str	r0, [sp, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ad1e:	bfb8      	it	lt
 800ad20:	18e4      	addlt	r4, r4, r3
 800ad22:	f000 f8dd 	bl	800aee0 <__malloc_lock>
 800ad26:	4a20      	ldr	r2, [pc, #128]	; (800ada8 <_free_r+0x9c>)
 800ad28:	9801      	ldr	r0, [sp, #4]
 800ad2a:	6813      	ldr	r3, [r2, #0]
 800ad2c:	4615      	mov	r5, r2
 800ad2e:	b933      	cbnz	r3, 800ad3e <_free_r+0x32>
 800ad30:	6063      	str	r3, [r4, #4]
 800ad32:	6014      	str	r4, [r2, #0]
 800ad34:	b003      	add	sp, #12
 800ad36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad3a:	f000 b8d7 	b.w	800aeec <__malloc_unlock>
 800ad3e:	42a3      	cmp	r3, r4
 800ad40:	d90b      	bls.n	800ad5a <_free_r+0x4e>
 800ad42:	6821      	ldr	r1, [r4, #0]
 800ad44:	1862      	adds	r2, r4, r1
 800ad46:	4293      	cmp	r3, r2
 800ad48:	bf04      	itt	eq
 800ad4a:	681a      	ldreq	r2, [r3, #0]
 800ad4c:	685b      	ldreq	r3, [r3, #4]
 800ad4e:	6063      	str	r3, [r4, #4]
 800ad50:	bf04      	itt	eq
 800ad52:	1852      	addeq	r2, r2, r1
 800ad54:	6022      	streq	r2, [r4, #0]
 800ad56:	602c      	str	r4, [r5, #0]
 800ad58:	e7ec      	b.n	800ad34 <_free_r+0x28>
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	b10b      	cbz	r3, 800ad64 <_free_r+0x58>
 800ad60:	42a3      	cmp	r3, r4
 800ad62:	d9fa      	bls.n	800ad5a <_free_r+0x4e>
 800ad64:	6811      	ldr	r1, [r2, #0]
 800ad66:	1855      	adds	r5, r2, r1
 800ad68:	42a5      	cmp	r5, r4
 800ad6a:	d10b      	bne.n	800ad84 <_free_r+0x78>
 800ad6c:	6824      	ldr	r4, [r4, #0]
 800ad6e:	4421      	add	r1, r4
 800ad70:	1854      	adds	r4, r2, r1
 800ad72:	42a3      	cmp	r3, r4
 800ad74:	6011      	str	r1, [r2, #0]
 800ad76:	d1dd      	bne.n	800ad34 <_free_r+0x28>
 800ad78:	681c      	ldr	r4, [r3, #0]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	6053      	str	r3, [r2, #4]
 800ad7e:	4421      	add	r1, r4
 800ad80:	6011      	str	r1, [r2, #0]
 800ad82:	e7d7      	b.n	800ad34 <_free_r+0x28>
 800ad84:	d902      	bls.n	800ad8c <_free_r+0x80>
 800ad86:	230c      	movs	r3, #12
 800ad88:	6003      	str	r3, [r0, #0]
 800ad8a:	e7d3      	b.n	800ad34 <_free_r+0x28>
 800ad8c:	6825      	ldr	r5, [r4, #0]
 800ad8e:	1961      	adds	r1, r4, r5
 800ad90:	428b      	cmp	r3, r1
 800ad92:	bf04      	itt	eq
 800ad94:	6819      	ldreq	r1, [r3, #0]
 800ad96:	685b      	ldreq	r3, [r3, #4]
 800ad98:	6063      	str	r3, [r4, #4]
 800ad9a:	bf04      	itt	eq
 800ad9c:	1949      	addeq	r1, r1, r5
 800ad9e:	6021      	streq	r1, [r4, #0]
 800ada0:	6054      	str	r4, [r2, #4]
 800ada2:	e7c7      	b.n	800ad34 <_free_r+0x28>
 800ada4:	b003      	add	sp, #12
 800ada6:	bd30      	pop	{r4, r5, pc}
 800ada8:	20003b40 	.word	0x20003b40

0800adac <_malloc_r>:
 800adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adae:	1ccd      	adds	r5, r1, #3
 800adb0:	f025 0503 	bic.w	r5, r5, #3
 800adb4:	3508      	adds	r5, #8
 800adb6:	2d0c      	cmp	r5, #12
 800adb8:	bf38      	it	cc
 800adba:	250c      	movcc	r5, #12
 800adbc:	2d00      	cmp	r5, #0
 800adbe:	4606      	mov	r6, r0
 800adc0:	db01      	blt.n	800adc6 <_malloc_r+0x1a>
 800adc2:	42a9      	cmp	r1, r5
 800adc4:	d903      	bls.n	800adce <_malloc_r+0x22>
 800adc6:	230c      	movs	r3, #12
 800adc8:	6033      	str	r3, [r6, #0]
 800adca:	2000      	movs	r0, #0
 800adcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adce:	f000 f887 	bl	800aee0 <__malloc_lock>
 800add2:	4921      	ldr	r1, [pc, #132]	; (800ae58 <_malloc_r+0xac>)
 800add4:	680a      	ldr	r2, [r1, #0]
 800add6:	4614      	mov	r4, r2
 800add8:	b99c      	cbnz	r4, 800ae02 <_malloc_r+0x56>
 800adda:	4f20      	ldr	r7, [pc, #128]	; (800ae5c <_malloc_r+0xb0>)
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	b923      	cbnz	r3, 800adea <_malloc_r+0x3e>
 800ade0:	4621      	mov	r1, r4
 800ade2:	4630      	mov	r0, r6
 800ade4:	f000 f83c 	bl	800ae60 <_sbrk_r>
 800ade8:	6038      	str	r0, [r7, #0]
 800adea:	4629      	mov	r1, r5
 800adec:	4630      	mov	r0, r6
 800adee:	f000 f837 	bl	800ae60 <_sbrk_r>
 800adf2:	1c43      	adds	r3, r0, #1
 800adf4:	d123      	bne.n	800ae3e <_malloc_r+0x92>
 800adf6:	230c      	movs	r3, #12
 800adf8:	6033      	str	r3, [r6, #0]
 800adfa:	4630      	mov	r0, r6
 800adfc:	f000 f876 	bl	800aeec <__malloc_unlock>
 800ae00:	e7e3      	b.n	800adca <_malloc_r+0x1e>
 800ae02:	6823      	ldr	r3, [r4, #0]
 800ae04:	1b5b      	subs	r3, r3, r5
 800ae06:	d417      	bmi.n	800ae38 <_malloc_r+0x8c>
 800ae08:	2b0b      	cmp	r3, #11
 800ae0a:	d903      	bls.n	800ae14 <_malloc_r+0x68>
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	441c      	add	r4, r3
 800ae10:	6025      	str	r5, [r4, #0]
 800ae12:	e004      	b.n	800ae1e <_malloc_r+0x72>
 800ae14:	6863      	ldr	r3, [r4, #4]
 800ae16:	42a2      	cmp	r2, r4
 800ae18:	bf0c      	ite	eq
 800ae1a:	600b      	streq	r3, [r1, #0]
 800ae1c:	6053      	strne	r3, [r2, #4]
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f000 f864 	bl	800aeec <__malloc_unlock>
 800ae24:	f104 000b 	add.w	r0, r4, #11
 800ae28:	1d23      	adds	r3, r4, #4
 800ae2a:	f020 0007 	bic.w	r0, r0, #7
 800ae2e:	1ac2      	subs	r2, r0, r3
 800ae30:	d0cc      	beq.n	800adcc <_malloc_r+0x20>
 800ae32:	1a1b      	subs	r3, r3, r0
 800ae34:	50a3      	str	r3, [r4, r2]
 800ae36:	e7c9      	b.n	800adcc <_malloc_r+0x20>
 800ae38:	4622      	mov	r2, r4
 800ae3a:	6864      	ldr	r4, [r4, #4]
 800ae3c:	e7cc      	b.n	800add8 <_malloc_r+0x2c>
 800ae3e:	1cc4      	adds	r4, r0, #3
 800ae40:	f024 0403 	bic.w	r4, r4, #3
 800ae44:	42a0      	cmp	r0, r4
 800ae46:	d0e3      	beq.n	800ae10 <_malloc_r+0x64>
 800ae48:	1a21      	subs	r1, r4, r0
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	f000 f808 	bl	800ae60 <_sbrk_r>
 800ae50:	3001      	adds	r0, #1
 800ae52:	d1dd      	bne.n	800ae10 <_malloc_r+0x64>
 800ae54:	e7cf      	b.n	800adf6 <_malloc_r+0x4a>
 800ae56:	bf00      	nop
 800ae58:	20003b40 	.word	0x20003b40
 800ae5c:	20003b44 	.word	0x20003b44

0800ae60 <_sbrk_r>:
 800ae60:	b538      	push	{r3, r4, r5, lr}
 800ae62:	4d06      	ldr	r5, [pc, #24]	; (800ae7c <_sbrk_r+0x1c>)
 800ae64:	2300      	movs	r3, #0
 800ae66:	4604      	mov	r4, r0
 800ae68:	4608      	mov	r0, r1
 800ae6a:	602b      	str	r3, [r5, #0]
 800ae6c:	f7f9 f9a8 	bl	80041c0 <_sbrk>
 800ae70:	1c43      	adds	r3, r0, #1
 800ae72:	d102      	bne.n	800ae7a <_sbrk_r+0x1a>
 800ae74:	682b      	ldr	r3, [r5, #0]
 800ae76:	b103      	cbz	r3, 800ae7a <_sbrk_r+0x1a>
 800ae78:	6023      	str	r3, [r4, #0]
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
 800ae7c:	20003be4 	.word	0x20003be4

0800ae80 <strcasecmp>:
 800ae80:	b570      	push	{r4, r5, r6, lr}
 800ae82:	4d0c      	ldr	r5, [pc, #48]	; (800aeb4 <strcasecmp+0x34>)
 800ae84:	4604      	mov	r4, r0
 800ae86:	462e      	mov	r6, r5
 800ae88:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae8c:	5d5a      	ldrb	r2, [r3, r5]
 800ae8e:	f002 0203 	and.w	r2, r2, #3
 800ae92:	2a01      	cmp	r2, #1
 800ae94:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae98:	5cb0      	ldrb	r0, [r6, r2]
 800ae9a:	f000 0003 	and.w	r0, r0, #3
 800ae9e:	bf08      	it	eq
 800aea0:	3320      	addeq	r3, #32
 800aea2:	2801      	cmp	r0, #1
 800aea4:	bf08      	it	eq
 800aea6:	3220      	addeq	r2, #32
 800aea8:	1a98      	subs	r0, r3, r2
 800aeaa:	d101      	bne.n	800aeb0 <strcasecmp+0x30>
 800aeac:	2a00      	cmp	r2, #0
 800aeae:	d1eb      	bne.n	800ae88 <strcasecmp+0x8>
 800aeb0:	bd70      	pop	{r4, r5, r6, pc}
 800aeb2:	bf00      	nop
 800aeb4:	0800b941 	.word	0x0800b941

0800aeb8 <strncpy>:
 800aeb8:	b510      	push	{r4, lr}
 800aeba:	3901      	subs	r1, #1
 800aebc:	4603      	mov	r3, r0
 800aebe:	b132      	cbz	r2, 800aece <strncpy+0x16>
 800aec0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aec4:	f803 4b01 	strb.w	r4, [r3], #1
 800aec8:	3a01      	subs	r2, #1
 800aeca:	2c00      	cmp	r4, #0
 800aecc:	d1f7      	bne.n	800aebe <strncpy+0x6>
 800aece:	441a      	add	r2, r3
 800aed0:	2100      	movs	r1, #0
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d100      	bne.n	800aed8 <strncpy+0x20>
 800aed6:	bd10      	pop	{r4, pc}
 800aed8:	f803 1b01 	strb.w	r1, [r3], #1
 800aedc:	e7f9      	b.n	800aed2 <strncpy+0x1a>
	...

0800aee0 <__malloc_lock>:
 800aee0:	4801      	ldr	r0, [pc, #4]	; (800aee8 <__malloc_lock+0x8>)
 800aee2:	f000 b809 	b.w	800aef8 <__retarget_lock_acquire_recursive>
 800aee6:	bf00      	nop
 800aee8:	20003bec 	.word	0x20003bec

0800aeec <__malloc_unlock>:
 800aeec:	4801      	ldr	r0, [pc, #4]	; (800aef4 <__malloc_unlock+0x8>)
 800aeee:	f000 b804 	b.w	800aefa <__retarget_lock_release_recursive>
 800aef2:	bf00      	nop
 800aef4:	20003bec 	.word	0x20003bec

0800aef8 <__retarget_lock_acquire_recursive>:
 800aef8:	4770      	bx	lr

0800aefa <__retarget_lock_release_recursive>:
 800aefa:	4770      	bx	lr

0800aefc <_init>:
 800aefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefe:	bf00      	nop
 800af00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af02:	bc08      	pop	{r3}
 800af04:	469e      	mov	lr, r3
 800af06:	4770      	bx	lr

0800af08 <_fini>:
 800af08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0a:	bf00      	nop
 800af0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af0e:	bc08      	pop	{r3}
 800af10:	469e      	mov	lr, r3
 800af12:	4770      	bx	lr
