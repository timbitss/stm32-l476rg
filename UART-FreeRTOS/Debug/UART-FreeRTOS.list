
UART-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08008bb8  08008bb8  00018bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dd8  08008dd8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08008dd8  08008dd8  00018dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008de0  08008de0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008de0  08008de0  00018de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008de4  08008de4  00018de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08008de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003598  20000018  08008e00  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200035b0  08008e00  000235b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3bc  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000391a  00000000  00000000  0003e404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001760  00000000  00000000  00041d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001618  00000000  00000000  00043480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fba  00000000  00000000  00044a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e5f  00000000  00000000  0006da52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe254  00000000  00000000  000868b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00184b05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064ec  00000000  00000000  00184b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ba0 	.word	0x08008ba0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08008ba0 	.word	0x08008ba0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2iz>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d215      	bcs.n	8000ac2 <__aeabi_d2iz+0x36>
 8000a96:	d511      	bpl.n	8000abc <__aeabi_d2iz+0x30>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d912      	bls.n	8000ac8 <__aeabi_d2iz+0x3c>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_d2iz+0x48>
 8000ac8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	bf08      	it	eq
 8000ace:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_d2uiz>:
 8000adc:	004a      	lsls	r2, r1, #1
 8000ade:	d211      	bcs.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae4:	d211      	bcs.n	8000b0a <__aeabi_d2uiz+0x2e>
 8000ae6:	d50d      	bpl.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d40e      	bmi.n	8000b10 <__aeabi_d2uiz+0x34>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_d2uiz+0x3a>
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b96e 	b.w	8000e10 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	468c      	mov	ip, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f040 8083 	bne.w	8000c62 <__udivmoddi4+0x116>
 8000b5c:	428a      	cmp	r2, r1
 8000b5e:	4617      	mov	r7, r2
 8000b60:	d947      	bls.n	8000bf2 <__udivmoddi4+0xa6>
 8000b62:	fab2 f282 	clz	r2, r2
 8000b66:	b142      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b68:	f1c2 0020 	rsb	r0, r2, #32
 8000b6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b70:	4091      	lsls	r1, r2
 8000b72:	4097      	lsls	r7, r2
 8000b74:	ea40 0c01 	orr.w	ip, r0, r1
 8000b78:	4094      	lsls	r4, r2
 8000b7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fbbc f6f8 	udiv	r6, ip, r8
 8000b84:	fa1f fe87 	uxth.w	lr, r7
 8000b88:	fb08 c116 	mls	r1, r8, r6, ip
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb06 f10e 	mul.w	r1, r6, lr
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x60>
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b9e:	f080 8119 	bcs.w	8000dd4 <__udivmoddi4+0x288>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 8116 	bls.w	8000dd4 <__udivmoddi4+0x288>
 8000ba8:	3e02      	subs	r6, #2
 8000baa:	443b      	add	r3, r7
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc0:	45a6      	cmp	lr, r4
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x8c>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bca:	f080 8105 	bcs.w	8000dd8 <__udivmoddi4+0x28c>
 8000bce:	45a6      	cmp	lr, r4
 8000bd0:	f240 8102 	bls.w	8000dd8 <__udivmoddi4+0x28c>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	443c      	add	r4, r7
 8000bd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bdc:	eba4 040e 	sub.w	r4, r4, lr
 8000be0:	2600      	movs	r6, #0
 8000be2:	b11d      	cbz	r5, 8000bec <__udivmoddi4+0xa0>
 8000be4:	40d4      	lsrs	r4, r2
 8000be6:	2300      	movs	r3, #0
 8000be8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bec:	4631      	mov	r1, r6
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	b902      	cbnz	r2, 8000bf6 <__udivmoddi4+0xaa>
 8000bf4:	deff      	udf	#255	; 0xff
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d150      	bne.n	8000ca0 <__udivmoddi4+0x154>
 8000bfe:	1bcb      	subs	r3, r1, r7
 8000c00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c04:	fa1f f887 	uxth.w	r8, r7
 8000c08:	2601      	movs	r6, #1
 8000c0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c0e:	0c21      	lsrs	r1, r4, #16
 8000c10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c18:	fb08 f30c 	mul.w	r3, r8, ip
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	d907      	bls.n	8000c30 <__udivmoddi4+0xe4>
 8000c20:	1879      	adds	r1, r7, r1
 8000c22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0xe2>
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	f200 80e9 	bhi.w	8000e00 <__udivmoddi4+0x2b4>
 8000c2e:	4684      	mov	ip, r0
 8000c30:	1ac9      	subs	r1, r1, r3
 8000c32:	b2a3      	uxth	r3, r4
 8000c34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c40:	fb08 f800 	mul.w	r8, r8, r0
 8000c44:	45a0      	cmp	r8, r4
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x10c>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x10a>
 8000c50:	45a0      	cmp	r8, r4
 8000c52:	f200 80d9 	bhi.w	8000e08 <__udivmoddi4+0x2bc>
 8000c56:	4618      	mov	r0, r3
 8000c58:	eba4 0408 	sub.w	r4, r4, r8
 8000c5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c60:	e7bf      	b.n	8000be2 <__udivmoddi4+0x96>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x12e>
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	f000 80b1 	beq.w	8000dce <__udivmoddi4+0x282>
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c72:	4630      	mov	r0, r6
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f683 	clz	r6, r3
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d14a      	bne.n	8000d18 <__udivmoddi4+0x1cc>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0x140>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80b8 	bhi.w	8000dfc <__udivmoddi4+0x2b0>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	468c      	mov	ip, r1
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	d0a8      	beq.n	8000bec <__udivmoddi4+0xa0>
 8000c9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c9e:	e7a5      	b.n	8000bec <__udivmoddi4+0xa0>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ca8:	4097      	lsls	r7, r2
 8000caa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb2:	40d9      	lsrs	r1, r3
 8000cb4:	4330      	orrs	r0, r6
 8000cb6:	0c03      	lsrs	r3, r0, #16
 8000cb8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cbc:	fa1f f887 	uxth.w	r8, r7
 8000cc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb06 f108 	mul.w	r1, r6, r8
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x19c>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cda:	f080 808d 	bcs.w	8000df8 <__udivmoddi4+0x2ac>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 808a 	bls.w	8000df8 <__udivmoddi4+0x2ac>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b281      	uxth	r1, r0
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf8:	fb00 f308 	mul.w	r3, r0, r8
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0x1c4>
 8000d00:	1879      	adds	r1, r7, r1
 8000d02:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d06:	d273      	bcs.n	8000df0 <__udivmoddi4+0x2a4>
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d971      	bls.n	8000df0 <__udivmoddi4+0x2a4>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4439      	add	r1, r7
 8000d10:	1acb      	subs	r3, r1, r3
 8000d12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d16:	e778      	b.n	8000c0a <__udivmoddi4+0xbe>
 8000d18:	f1c6 0c20 	rsb	ip, r6, #32
 8000d1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d24:	431c      	orrs	r4, r3
 8000d26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d36:	431f      	orrs	r7, r3
 8000d38:	0c3b      	lsrs	r3, r7, #16
 8000d3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d3e:	fa1f f884 	uxth.w	r8, r4
 8000d42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d4e:	458a      	cmp	sl, r1
 8000d50:	fa02 f206 	lsl.w	r2, r2, r6
 8000d54:	fa00 f306 	lsl.w	r3, r0, r6
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x220>
 8000d5a:	1861      	adds	r1, r4, r1
 8000d5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d60:	d248      	bcs.n	8000df4 <__udivmoddi4+0x2a8>
 8000d62:	458a      	cmp	sl, r1
 8000d64:	d946      	bls.n	8000df4 <__udivmoddi4+0x2a8>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	4421      	add	r1, r4
 8000d6c:	eba1 010a 	sub.w	r1, r1, sl
 8000d70:	b2bf      	uxth	r7, r7
 8000d72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d7e:	fb00 f808 	mul.w	r8, r0, r8
 8000d82:	45b8      	cmp	r8, r7
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x24a>
 8000d86:	19e7      	adds	r7, r4, r7
 8000d88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8c:	d22e      	bcs.n	8000dec <__udivmoddi4+0x2a0>
 8000d8e:	45b8      	cmp	r8, r7
 8000d90:	d92c      	bls.n	8000dec <__udivmoddi4+0x2a0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4427      	add	r7, r4
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	eba7 0708 	sub.w	r7, r7, r8
 8000d9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000da2:	454f      	cmp	r7, r9
 8000da4:	46c6      	mov	lr, r8
 8000da6:	4649      	mov	r1, r9
 8000da8:	d31a      	bcc.n	8000de0 <__udivmoddi4+0x294>
 8000daa:	d017      	beq.n	8000ddc <__udivmoddi4+0x290>
 8000dac:	b15d      	cbz	r5, 8000dc6 <__udivmoddi4+0x27a>
 8000dae:	ebb3 020e 	subs.w	r2, r3, lr
 8000db2:	eb67 0701 	sbc.w	r7, r7, r1
 8000db6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dba:	40f2      	lsrs	r2, r6
 8000dbc:	ea4c 0202 	orr.w	r2, ip, r2
 8000dc0:	40f7      	lsrs	r7, r6
 8000dc2:	e9c5 2700 	strd	r2, r7, [r5]
 8000dc6:	2600      	movs	r6, #0
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e70b      	b.n	8000bec <__udivmoddi4+0xa0>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e9      	b.n	8000bac <__udivmoddi4+0x60>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6fd      	b.n	8000bd8 <__udivmoddi4+0x8c>
 8000ddc:	4543      	cmp	r3, r8
 8000dde:	d2e5      	bcs.n	8000dac <__udivmoddi4+0x260>
 8000de0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000de4:	eb69 0104 	sbc.w	r1, r9, r4
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7df      	b.n	8000dac <__udivmoddi4+0x260>
 8000dec:	4608      	mov	r0, r1
 8000dee:	e7d2      	b.n	8000d96 <__udivmoddi4+0x24a>
 8000df0:	4660      	mov	r0, ip
 8000df2:	e78d      	b.n	8000d10 <__udivmoddi4+0x1c4>
 8000df4:	4681      	mov	r9, r0
 8000df6:	e7b9      	b.n	8000d6c <__udivmoddi4+0x220>
 8000df8:	4666      	mov	r6, ip
 8000dfa:	e775      	b.n	8000ce8 <__udivmoddi4+0x19c>
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e74a      	b.n	8000c96 <__udivmoddi4+0x14a>
 8000e00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e04:	4439      	add	r1, r7
 8000e06:	e713      	b.n	8000c30 <__udivmoddi4+0xe4>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	443c      	add	r4, r7
 8000e0c:	e724      	b.n	8000c58 <__udivmoddi4+0x10c>
 8000e0e:	bf00      	nop

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <_putchar>:
 *        Requirement for tiny printf() function.
 *
 * @param character Character to place in transmit data register.
 */
void _putchar(char character)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
    /* Wait for TXE bit to be set */
    while (!(uart_handle_ptr->Instance->ISR & USART_ISR_TXE_Msk))
 8000e1e:	bf00      	nop
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <_putchar+0x34>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0f7      	beq.n	8000e20 <_putchar+0xc>
    {
    }
    uart_handle_ptr->Instance->TDR = (uint8_t)character;
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <_putchar+0x34>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	79fa      	ldrb	r2, [r7, #7]
 8000e38:	b292      	uxth	r2, r2
 8000e3a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	20000038 	.word	0x20000038

08000e4c <Menu_Thread>:

/********************* RTOS Threads *********************/

void Menu_Thread(void *args)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    Command_display_menu();
 8000e54:	f000 f8e4 	bl	8001020 <Command_display_menu>

    while (1)
    {
        Command_menu_read();
 8000e58:	f000 f928 	bl	80010ac <Command_menu_read>
        osDelay(1);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f005 f803 	bl	8005e68 <osDelay>
        Command_menu_read();
 8000e62:	e7f9      	b.n	8000e58 <Menu_Thread+0xc>

08000e64 <UART_TX_Thread>:
    }
}

void UART_TX_Thread(void *args)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    /* Wait forever for message from queue, then transmit over UART */
    while (1)
    {
        char *msg_to_tx = NULL; // Buffer to store char *.
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
        osMessageQueueGet(tx_msg_queue_id, (void *)&msg_to_tx, NULL, osWaitForever);
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <UART_TX_Thread+0x2c>)
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	f107 010c 	add.w	r1, r7, #12
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f005 f8e1 	bl	8006044 <osMessageQueueGet>
        printf("%s", msg_to_tx);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	4619      	mov	r1, r3
 8000e86:	4803      	ldr	r0, [pc, #12]	; (8000e94 <UART_TX_Thread+0x30>)
 8000e88:	f001 ff92 	bl	8002db0 <printf_>
    {
 8000e8c:	e7ee      	b.n	8000e6c <UART_TX_Thread+0x8>
 8000e8e:	bf00      	nop
 8000e90:	20000034 	.word	0x20000034
 8000e94:	08008bb8 	.word	0x08008bb8

08000e98 <Command_Init>:
}

/**********************************************************/

uint8_t Command_Init(UART_HandleTypeDef *huart, const Command_menu_option *_menu_options, uint8_t _num_of_options)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b098      	sub	sp, #96	; 0x60
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	71fb      	strb	r3, [r7, #7]
    uart_handle_ptr = huart;
 8000ea6:	4a2a      	ldr	r2, [pc, #168]	; (8000f50 <Command_Init+0xb8>)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	6013      	str	r3, [r2, #0]

    /* Define task attributes */
    const osThreadAttr_t rx_task_attributes = {
 8000eac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eb0:	2224      	movs	r2, #36	; 0x24
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f007 fe6b 	bl	8008b90 <memset>
 8000eba:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <Command_Init+0xbc>)
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8000ebe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ec2:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ec4:	2318      	movs	r3, #24
 8000ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
        .name = "MenuTask",
        .stack_size = 1024 * 2,
        .priority = (osPriority_t)osPriorityNormal,
    };
    const osThreadAttr_t tx_task_attributes = {
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	2224      	movs	r2, #36	; 0x24
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f007 fe5d 	bl	8008b90 <memset>
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <Command_Init+0xc0>)
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee0:	2318      	movs	r3, #24
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
        .stack_size = 1024 * 2,
        .priority = (osPriority_t)osPriorityNormal,
    };

    /* Create threads */
    osThreadId_t rx_thread_handle = (osThreadId_t)osThreadNew(Menu_Thread, NULL, &rx_task_attributes);
 8000ee4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ee8:	461a      	mov	r2, r3
 8000eea:	2100      	movs	r1, #0
 8000eec:	481b      	ldr	r0, [pc, #108]	; (8000f5c <Command_Init+0xc4>)
 8000eee:	f004 ff29 	bl	8005d44 <osThreadNew>
 8000ef2:	65f8      	str	r0, [r7, #92]	; 0x5c
    osThreadId_t tx_thread_handle = (osThreadId_t)osThreadNew(UART_TX_Thread, NULL, &tx_task_attributes);
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	461a      	mov	r2, r3
 8000efa:	2100      	movs	r1, #0
 8000efc:	4818      	ldr	r0, [pc, #96]	; (8000f60 <Command_Init+0xc8>)
 8000efe:	f004 ff21 	bl	8005d44 <osThreadNew>
 8000f02:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Create UART transmit message queue */
    tx_msg_queue_id = osMessageQueueNew(MAX_MSG_COUNT, sizeof(char *), NULL);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2104      	movs	r1, #4
 8000f08:	2005      	movs	r0, #5
 8000f0a:	f004 ffc8 	bl	8005e9e <osMessageQueueNew>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <Command_Init+0xcc>)
 8000f12:	6013      	str	r3, [r2, #0]

    /* Store menu options */
    menu_options = _menu_options;
 8000f14:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <Command_Init+0xd0>)
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	6013      	str	r3, [r2, #0]
    if (_num_of_options > MAX_MENU_OPTIONS)
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b09      	cmp	r3, #9
 8000f1e:	d903      	bls.n	8000f28 <Command_Init+0x90>
    {
        num_of_options = MAX_MENU_OPTIONS;
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <Command_Init+0xd4>)
 8000f22:	2209      	movs	r2, #9
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	e002      	b.n	8000f2e <Command_Init+0x96>
    }
    else
    {
        num_of_options = _num_of_options;
 8000f28:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <Command_Init+0xd4>)
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	7013      	strb	r3, [r2, #0]
    }

    if (rx_thread_handle == NULL || tx_thread_handle == NULL || tx_msg_queue_id == NULL)
 8000f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d006      	beq.n	8000f42 <Command_Init+0xaa>
 8000f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <Command_Init+0xaa>
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <Command_Init+0xcc>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <Command_Init+0xae>
    {
        return 1; // Insufficient memory.
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <Command_Init+0xb0>
    }
    else
    {
        return 0;
 8000f46:	2300      	movs	r3, #0
    }
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3760      	adds	r7, #96	; 0x60
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000038 	.word	0x20000038
 8000f54:	08008bbc 	.word	0x08008bbc
 8000f58:	08008bc8 	.word	0x08008bc8
 8000f5c:	08000e4d 	.word	0x08000e4d
 8000f60:	08000e65 	.word	0x08000e65
 8000f64:	20000034 	.word	0x20000034
 8000f68:	2000003c 	.word	0x2000003c
 8000f6c:	20000040 	.word	0x20000040

08000f70 <Command_Transmit>:

osStatus_t Command_Transmit(const char *msg, uint32_t timeout_period)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
    /* Transmit character pointer. */
    osStatus_t status = osMessageQueuePut(tx_msg_queue_id, (void *)&msg, 0, timeout_period);
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <Command_Transmit+0x24>)
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	1d39      	adds	r1, r7, #4
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f004 fffe 	bl	8005f84 <osMessageQueuePut>
 8000f88:	60f8      	str	r0, [r7, #12]
    return status;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000034 	.word	0x20000034

08000f98 <Command_get_uint32>:

uint32_t Command_get_uint32(const char *prompt)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
    uint32_t val = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]

    Command_Transmit(prompt, 50);
 8000fa4:	2132      	movs	r1, #50	; 0x32
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffe2 	bl	8000f70 <Command_Transmit>
    Command_Transmit("\r\n>> ", 50);
 8000fac:	2132      	movs	r1, #50	; 0x32
 8000fae:	481a      	ldr	r0, [pc, #104]	; (8001018 <Command_get_uint32+0x80>)
 8000fb0:	f7ff ffde 	bl	8000f70 <Command_Transmit>

    while (1)
    {
        char c = _getcharb();
 8000fb4:	f000 f904 	bl	80011c0 <_getcharb>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	72fb      	strb	r3, [r7, #11]
        _putchar(c);
 8000fbc:	7afb      	ldrb	r3, [r7, #11]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff28 	bl	8000e14 <_putchar>
        if (c >= '0' && c <= '9')
 8000fc4:	7afb      	ldrb	r3, [r7, #11]
 8000fc6:	2b2f      	cmp	r3, #47	; 0x2f
 8000fc8:	d90e      	bls.n	8000fe8 <Command_get_uint32+0x50>
 8000fca:	7afb      	ldrb	r3, [r7, #11]
 8000fcc:	2b39      	cmp	r3, #57	; 0x39
 8000fce:	d80b      	bhi.n	8000fe8 <Command_get_uint32+0x50>
        {
            val *= 10; // Handle multiple digits.
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
            val += c - '0';
 8000fdc:	7afa      	ldrb	r2, [r7, #11]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	3b30      	subs	r3, #48	; 0x30
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	e010      	b.n	800100a <Command_get_uint32+0x72>
        }
        else if (c == 127) // User pressed backspace key.
 8000fe8:	7afb      	ldrb	r3, [r7, #11]
 8000fea:	2b7f      	cmp	r3, #127	; 0x7f
 8000fec:	d106      	bne.n	8000ffc <Command_get_uint32+0x64>
        {
            val /= 10; // Truncate
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	; (800101c <Command_get_uint32+0x84>)
 8000ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff6:	08db      	lsrs	r3, r3, #3
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	e7db      	b.n	8000fb4 <Command_get_uint32+0x1c>
        }
        else if (c == '\r') // User pressed Enter key (PuTTY).
 8000ffc:	7afb      	ldrb	r3, [r7, #11]
 8000ffe:	2b0d      	cmp	r3, #13
 8001000:	d1d8      	bne.n	8000fb4 <Command_get_uint32+0x1c>
        {
            _putchar('\n');
 8001002:	200a      	movs	r0, #10
 8001004:	f7ff ff06 	bl	8000e14 <_putchar>
            break;
 8001008:	e000      	b.n	800100c <Command_get_uint32+0x74>
    {
 800100a:	e7d3      	b.n	8000fb4 <Command_get_uint32+0x1c>
        {
            /* Ignore other characters */
        }
    }

    return val;
 800100c:	68fb      	ldr	r3, [r7, #12]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	08008bd0 	.word	0x08008bd0
 800101c:	cccccccd 	.word	0xcccccccd

08001020 <Command_display_menu>:

/**
 * @brief Display menu options to user.
 */
static void Command_display_menu(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
    if (num_of_options > 0)
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <Command_display_menu+0x74>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d029      	beq.n	8001082 <Command_display_menu+0x62>
    {
        Command_Transmit("\r\nMenu (enter # to select):", 50);
 800102e:	2132      	movs	r1, #50	; 0x32
 8001030:	4819      	ldr	r0, [pc, #100]	; (8001098 <Command_display_menu+0x78>)
 8001032:	f7ff ff9d 	bl	8000f70 <Command_Transmit>
        static char option[] = "\r\nx) ";

        for (uint8_t i = 0; i < num_of_options; i++)
 8001036:	2300      	movs	r3, #0
 8001038:	71fb      	strb	r3, [r7, #7]
 800103a:	e018      	b.n	800106e <Command_display_menu+0x4e>
        {
            option[2] = '1' + i;
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	3331      	adds	r3, #49	; 0x31
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <Command_display_menu+0x7c>)
 8001044:	709a      	strb	r2, [r3, #2]
            Command_Transmit(option, 50);
 8001046:	2132      	movs	r1, #50	; 0x32
 8001048:	4814      	ldr	r0, [pc, #80]	; (800109c <Command_display_menu+0x7c>)
 800104a:	f7ff ff91 	bl	8000f70 <Command_Transmit>
            Command_Transmit(menu_options[i].name, 50);
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <Command_display_menu+0x80>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4413      	add	r3, r2
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2132      	movs	r1, #50	; 0x32
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff87 	bl	8000f70 <Command_Transmit>
            osDelay(5); // TODO: More efficient solution??
 8001062:	2005      	movs	r0, #5
 8001064:	f004 ff00 	bl	8005e68 <osDelay>
        for (uint8_t i = 0; i < num_of_options; i++)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	3301      	adds	r3, #1
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <Command_display_menu+0x74>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	79fa      	ldrb	r2, [r7, #7]
 8001074:	429a      	cmp	r2, r3
 8001076:	d3e1      	bcc.n	800103c <Command_display_menu+0x1c>
        };

        /* Print prompt */
        Command_Transmit("\r\n>> ", 50);
 8001078:	2132      	movs	r1, #50	; 0x32
 800107a:	480a      	ldr	r0, [pc, #40]	; (80010a4 <Command_display_menu+0x84>)
 800107c:	f7ff ff78 	bl	8000f70 <Command_Transmit>
    }
    else
    {
        Command_Transmit("\r\nNo menu options to display\r\n", 50);
    }
}
 8001080:	e003      	b.n	800108a <Command_display_menu+0x6a>
        Command_Transmit("\r\nNo menu options to display\r\n", 50);
 8001082:	2132      	movs	r1, #50	; 0x32
 8001084:	4808      	ldr	r0, [pc, #32]	; (80010a8 <Command_display_menu+0x88>)
 8001086:	f7ff ff73 	bl	8000f70 <Command_Transmit>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000040 	.word	0x20000040
 8001098:	08008bd8 	.word	0x08008bd8
 800109c:	20000000 	.word	0x20000000
 80010a0:	2000003c 	.word	0x2000003c
 80010a4:	08008bd0 	.word	0x08008bd0
 80010a8:	08008bf4 	.word	0x08008bf4

080010ac <Command_menu_read>:
 * @brief Save input character and execute option if enter key is pressed. Non-blocking.
 * 
 * @note Recommended to call Command_display_menu() prior to calling Command_run_menu().
 */
static void Command_menu_read(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
    /* Receive and echo back */
    char c = _getchar();
 80010b2:	f000 f86b 	bl	800118c <_getchar>
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
    _putchar(c);
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fea9 	bl	8000e14 <_putchar>

    static uint8_t option_num = 0;
    if (c >= '0' && c <= '9')
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b2f      	cmp	r3, #47	; 0x2f
 80010c6:	d915      	bls.n	80010f4 <Command_menu_read+0x48>
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b39      	cmp	r3, #57	; 0x39
 80010cc:	d812      	bhi.n	80010f4 <Command_menu_read+0x48>
    {
        option_num *= 10; // Handle multiple digits.
 80010ce:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <Command_menu_read+0xcc>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	0092      	lsls	r2, r2, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <Command_menu_read+0xcc>)
 80010de:	701a      	strb	r2, [r3, #0]
        option_num += c - '0';
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <Command_menu_read+0xcc>)
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	4413      	add	r3, r2
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	3b30      	subs	r3, #48	; 0x30
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <Command_menu_read+0xcc>)
 80010f0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        /* Ignore all other characters */
    }
}
 80010f2:	e03c      	b.n	800116e <Command_menu_read+0xc2>
    else if (c == 127) // User pressed backspace key.
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b7f      	cmp	r3, #127	; 0x7f
 80010f8:	d109      	bne.n	800110e <Command_menu_read+0x62>
        option_num /= 10; // Truncate
 80010fa:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <Command_menu_read+0xcc>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	4a1f      	ldr	r2, [pc, #124]	; (800117c <Command_menu_read+0xd0>)
 8001100:	fba2 2303 	umull	r2, r3, r2, r3
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <Command_menu_read+0xcc>)
 800110a:	701a      	strb	r2, [r3, #0]
}
 800110c:	e02f      	b.n	800116e <Command_menu_read+0xc2>
    else if (c == '\r') // User pressed Enter key (PuTTY).
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b0d      	cmp	r3, #13
 8001112:	d12c      	bne.n	800116e <Command_menu_read+0xc2>
        _putchar('\n');
 8001114:	200a      	movs	r0, #10
 8001116:	f7ff fe7d 	bl	8000e14 <_putchar>
        if (menu_options[option_num - 1].cb != NULL)
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <Command_menu_read+0xd4>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <Command_menu_read+0xcc>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001126:	3b01      	subs	r3, #1
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	4413      	add	r3, r2
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d014      	beq.n	800115c <Command_menu_read+0xb0>
            uint8_t err = menu_options[option_num - 1].cb();
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <Command_menu_read+0xd4>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <Command_menu_read+0xcc>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800113e:	3b01      	subs	r3, #1
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4413      	add	r3, r2
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	4798      	blx	r3
 8001148:	4603      	mov	r3, r0
 800114a:	71bb      	strb	r3, [r7, #6]
            if (err)
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d008      	beq.n	8001164 <Command_menu_read+0xb8>
                Command_Transmit("Error calling option\r\n", 50);
 8001152:	2132      	movs	r1, #50	; 0x32
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <Command_menu_read+0xd8>)
 8001156:	f7ff ff0b 	bl	8000f70 <Command_Transmit>
 800115a:	e003      	b.n	8001164 <Command_menu_read+0xb8>
            Command_Transmit("Invalid option\r\n", 50);
 800115c:	2132      	movs	r1, #50	; 0x32
 800115e:	480a      	ldr	r0, [pc, #40]	; (8001188 <Command_menu_read+0xdc>)
 8001160:	f7ff ff06 	bl	8000f70 <Command_Transmit>
        Command_display_menu();
 8001164:	f7ff ff5c 	bl	8001020 <Command_display_menu>
        option_num = 0;
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <Command_menu_read+0xcc>)
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000041 	.word	0x20000041
 800117c:	cccccccd 	.word	0xcccccccd
 8001180:	2000003c 	.word	0x2000003c
 8001184:	08008c14 	.word	0x08008c14
 8001188:	08008c2c 	.word	0x08008c2c

0800118c <_getchar>:
 * @brief Get character from receive data register (non-blocking).
 * 
 * @return char Received character or 0 if nothing is placed in receive register.
 */
static char _getchar(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
    if (uart_handle_ptr->Instance->ISR & USART_ISR_RXNE_Msk)
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <_getchar+0x30>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	2b00      	cmp	r3, #0
 800119e:	d006      	beq.n	80011ae <_getchar+0x22>
    {
        return (char)(uart_handle_ptr->Instance->RDR & 0xFF);
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <_getchar+0x30>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	e000      	b.n	80011b0 <_getchar+0x24>
    }
    else
    {
        return 0;
 80011ae:	2300      	movs	r3, #0
    }
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000038 	.word	0x20000038

080011c0 <_getcharb>:
 * @brief Get character from receive data register (blocking).
 * 
 * @return char Received character or 0 if nothing is placed in receive register.
 */
static char _getcharb(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
    while (!(uart_handle_ptr->Instance->ISR & USART_ISR_RXNE_Msk))
 80011c4:	bf00      	nop
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <_getcharb+0x2c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 0320 	and.w	r3, r3, #32
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f7      	beq.n	80011c6 <_getcharb+0x6>
    {
    }
    return (char)(uart_handle_ptr->Instance->RDR & 0xFF);
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <_getcharb+0x2c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011de:	b29b      	uxth	r3, r3
 80011e0:	b2db      	uxtb	r3, r3
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	20000038 	.word	0x20000038

080011f0 <TurnOnLED>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t TurnOnLED(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2120      	movs	r1, #32
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f002 fa18 	bl	8003630 <HAL_GPIO_WritePin>
    return 0;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	bd80      	pop	{r7, pc}

08001206 <TurnOffLED>:

uint8_t TurnOffLED(void)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2120      	movs	r1, #32
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f002 fa0d 	bl	8003630 <HAL_GPIO_WritePin>
    return 0;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	bd80      	pop	{r7, pc}

0800121c <SetPWMDuty>:

char buf[50] = {0};
uint8_t SetPWMDuty(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
    uint32_t pwm_duty = Command_get_uint32("Enter Duty Cycle [0, 100]");
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <SetPWMDuty+0x2c>)
 8001224:	f7ff feb8 	bl	8000f98 <Command_get_uint32>
 8001228:	6078      	str	r0, [r7, #4]
    snprintf(buf, 50, "Duty Cycle Updated to %d\r\n", pwm_duty);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <SetPWMDuty+0x30>)
 800122e:	2132      	movs	r1, #50	; 0x32
 8001230:	4807      	ldr	r0, [pc, #28]	; (8001250 <SetPWMDuty+0x34>)
 8001232:	f001 fdd9 	bl	8002de8 <snprintf_>
    Command_Transmit(buf, 50);
 8001236:	2132      	movs	r1, #50	; 0x32
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <SetPWMDuty+0x34>)
 800123a:	f7ff fe99 	bl	8000f70 <Command_Transmit>
    return 0;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	08008c4c 	.word	0x08008c4c
 800124c:	08008c68 	.word	0x08008c68
 8001250:	20000044 	.word	0x20000044

08001254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125a:	f001 ff1d 	bl	8003098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125e:	f000 f83f 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001262:	f000 f8e3 	bl	800142c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001266:	f000 f8b1 	bl	80013cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800126a:	f004 fd21 	bl	8005cb0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800126e:	4a16      	ldr	r2, [pc, #88]	; (80012c8 <main+0x74>)
 8001270:	2100      	movs	r1, #0
 8001272:	4816      	ldr	r0, [pc, #88]	; (80012cc <main+0x78>)
 8001274:	f004 fd66 	bl	8005d44 <osThreadNew>
 8001278:	4603      	mov	r3, r0
 800127a:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <main+0x7c>)
 800127c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  uint8_t err = Command_Init(&huart2, menu_opts, 3);
 800127e:	2203      	movs	r2, #3
 8001280:	4914      	ldr	r1, [pc, #80]	; (80012d4 <main+0x80>)
 8001282:	4815      	ldr	r0, [pc, #84]	; (80012d8 <main+0x84>)
 8001284:	f7ff fe08 	bl	8000e98 <Command_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(err)
 800128e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001292:	2b00      	cmp	r3, #0
 8001294:	d014      	beq.n	80012c0 <main+0x6c>
  {
	  char buf[] = "Could not create UART threads\r\n";
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <main+0x88>)
 8001298:	1d3c      	adds	r4, r7, #4
 800129a:	461d      	mov	r5, r3
 800129c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800129e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7fe ff90 	bl	80001d0 <strlen>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	1d39      	adds	r1, r7, #4
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	4807      	ldr	r0, [pc, #28]	; (80012d8 <main+0x84>)
 80012bc:	f004 f82e 	bl	800531c <HAL_UART_Transmit>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012c0:	f004 fd1a 	bl	8005cf8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <main+0x70>
 80012c6:	bf00      	nop
 80012c8:	08008d00 	.word	0x08008d00
 80012cc:	080014fd 	.word	0x080014fd
 80012d0:	20003498 	.word	0x20003498
 80012d4:	08008d24 	.word	0x08008d24
 80012d8:	2000349c 	.word	0x2000349c
 80012dc:	08008cb0 	.word	0x08008cb0

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0b8      	sub	sp, #224	; 0xe0
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012ea:	2244      	movs	r2, #68	; 0x44
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f007 fc4e 	bl	8008b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001304:	463b      	mov	r3, r7
 8001306:	2288      	movs	r2, #136	; 0x88
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f007 fc40 	bl	8008b90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001310:	2302      	movs	r3, #2
 8001312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131e:	2310      	movs	r3, #16
 8001320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800132a:	2302      	movs	r3, #2
 800132c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001330:	2301      	movs	r3, #1
 8001332:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001336:	230a      	movs	r3, #10
 8001338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800133c:	2307      	movs	r3, #7
 800133e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001342:	2302      	movs	r3, #2
 8001344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001348:	2302      	movs	r3, #2
 800134a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001352:	4618      	mov	r0, r3
 8001354:	f002 f9e8 	bl	8003728 <HAL_RCC_OscConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800135e:	f000 f8e7 	bl	8001530 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	230f      	movs	r3, #15
 8001364:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001368:	2303      	movs	r3, #3
 800136a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001380:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001384:	2104      	movs	r1, #4
 8001386:	4618      	mov	r0, r3
 8001388:	f002 fdb4 	bl	8003ef4 <HAL_RCC_ClockConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001392:	f000 f8cd 	bl	8001530 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001396:	2302      	movs	r3, #2
 8001398:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800139a:	2300      	movs	r3, #0
 800139c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139e:	463b      	mov	r3, r7
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 ffdf 	bl	8004364 <HAL_RCCEx_PeriphCLKConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80013ac:	f000 f8c0 	bl	8001530 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013b4:	f002 f962 	bl	800367c <HAL_PWREx_ControlVoltageScaling>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80013be:	f000 f8b7 	bl	8001530 <Error_Handler>
  }
}
 80013c2:	bf00      	nop
 80013c4:	37e0      	adds	r7, #224	; 0xe0
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_USART2_UART_Init+0x58>)
 80013d2:	4a15      	ldr	r2, [pc, #84]	; (8001428 <MX_USART2_UART_Init+0x5c>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_USART2_UART_Init+0x58>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_USART2_UART_Init+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_USART2_UART_Init+0x58>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_USART2_UART_Init+0x58>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_USART2_UART_Init+0x58>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_USART2_UART_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_USART2_UART_Init+0x58>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_USART2_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_USART2_UART_Init+0x58>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_USART2_UART_Init+0x58>)
 8001410:	f003 ff36 	bl	8005280 <HAL_UART_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800141a:	f000 f889 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000349c 	.word	0x2000349c
 8001428:	40004400 	.word	0x40004400

0800142c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <MX_GPIO_Init+0xc4>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	4a2a      	ldr	r2, [pc, #168]	; (80014f0 <MX_GPIO_Init+0xc4>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <MX_GPIO_Init+0xc4>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <MX_GPIO_Init+0xc4>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	4a24      	ldr	r2, [pc, #144]	; (80014f0 <MX_GPIO_Init+0xc4>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <MX_GPIO_Init+0xc4>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <MX_GPIO_Init+0xc4>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <MX_GPIO_Init+0xc4>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <MX_GPIO_Init+0xc4>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <MX_GPIO_Init+0xc4>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <MX_GPIO_Init+0xc4>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <MX_GPIO_Init+0xc4>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2120      	movs	r1, #32
 80014a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014aa:	f002 f8c1 	bl	8003630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_GPIO_Init+0xc8>)
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	480d      	ldr	r0, [pc, #52]	; (80014f8 <MX_GPIO_Init+0xcc>)
 80014c4:	f001 ff0a 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014c8:	2320      	movs	r3, #32
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e2:	f001 fefb 	bl	80032dc <HAL_GPIO_Init>

}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	; 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	10210000 	.word	0x10210000
 80014f8:	48000800 	.word	0x48000800

080014fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001504:	2001      	movs	r0, #1
 8001506:	f004 fcaf 	bl	8005e68 <osDelay>
 800150a:	e7fb      	b.n	8001504 <StartDefaultTask+0x8>

0800150c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d101      	bne.n	8001522 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800151e:	f001 fddb 	bl	80030d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40001400 	.word	0x40001400

08001530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001534:	b672      	cpsid	i
}
 8001536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001538:	e7fe      	b.n	8001538 <Error_Handler+0x8>

0800153a <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	4603      	mov	r3, r0
 8001548:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d204      	bcs.n	800155c <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	701a      	strb	r2, [r3, #0]
  }
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	4603      	mov	r3, r0
 8001576:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	4603      	mov	r3, r0
 8001592:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <_out_char+0x1e>
    _putchar(character);
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fc39 	bl	8000e14 <_putchar>
  }
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b085      	sub	sp, #20
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	e002      	b.n	80015c0 <_strnlen_s+0x16>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3301      	adds	r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <_strnlen_s+0x28>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	1e5a      	subs	r2, r3, #1
 80015cc:	603a      	str	r2, [r7, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f3      	bne.n	80015ba <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	1ad3      	subs	r3, r2, r3
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b2f      	cmp	r3, #47	; 0x2f
 80015f2:	d904      	bls.n	80015fe <_is_digit+0x1a>
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b39      	cmp	r3, #57	; 0x39
 80015f8:	d801      	bhi.n	80015fe <_is_digit+0x1a>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <_is_digit+0x1c>
 80015fe:	2300      	movs	r3, #0
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	b2db      	uxtb	r3, r3
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b084      	sub	sp, #16
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800161e:	e00e      	b.n	800163e <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4618      	mov	r0, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	1c59      	adds	r1, r3, #1
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6011      	str	r1, [r2, #0]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4403      	add	r3, r0
 800163a:	3b30      	subs	r3, #48	; 0x30
 800163c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ffcd 	bl	80015e4 <_is_digit>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1e7      	bne.n	8001620 <_atoi+0xe>
  }
  return i;
 8001650:	68fb      	ldr	r3, [r7, #12]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800165a:	b590      	push	{r4, r7, lr}
 800165c:	b087      	sub	sp, #28
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800166c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d125      	bne.n	80016c2 <_out_rev+0x68>
 8001676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d120      	bne.n	80016c2 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e00a      	b.n	800169c <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	1c53      	adds	r3, r2, #1
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	68fc      	ldr	r4, [r7, #12]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	2020      	movs	r0, #32
 8001694:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d3f0      	bcc.n	8001686 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80016a4:	e00d      	b.n	80016c2 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80016a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a8:	3b01      	subs	r3, #1
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	4413      	add	r3, r2
 80016b2:	7818      	ldrb	r0, [r3, #0]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	1c53      	adds	r3, r2, #1
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	68fc      	ldr	r4, [r7, #12]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68b9      	ldr	r1, [r7, #8]
 80016c0:	47a0      	blx	r4
  while (len) {
 80016c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ee      	bne.n	80016a6 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80016c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00e      	beq.n	80016f0 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80016d2:	e007      	b.n	80016e4 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	1c53      	adds	r3, r2, #1
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	68fc      	ldr	r4, [r7, #12]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	68b9      	ldr	r1, [r7, #8]
 80016e0:	2020      	movs	r0, #32
 80016e2:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d8f1      	bhi.n	80016d4 <_out_rev+0x7a>
    }
  }

  return idx;
 80016f0:	687b      	ldr	r3, [r7, #4]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd90      	pop	{r4, r7, pc}

080016fa <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b088      	sub	sp, #32
 80016fe:	af04      	add	r7, sp, #16
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d136      	bne.n	8001780 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001714:	2b00      	cmp	r3, #0
 8001716:	d018      	beq.n	800174a <_ntoa_format+0x50>
 8001718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d013      	beq.n	800174a <_ntoa_format+0x50>
 8001722:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d104      	bne.n	8001734 <_ntoa_format+0x3a>
 800172a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00a      	beq.n	800174a <_ntoa_format+0x50>
      width--;
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	3b01      	subs	r3, #1
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800173a:	e006      	b.n	800174a <_ntoa_format+0x50>
      buf[len++] = '0';
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	61fa      	str	r2, [r7, #28]
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4413      	add	r3, r2
 8001746:	2230      	movs	r2, #48	; 0x30
 8001748:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174e:	429a      	cmp	r2, r3
 8001750:	d20a      	bcs.n	8001768 <_ntoa_format+0x6e>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	2b1f      	cmp	r3, #31
 8001756:	d9f1      	bls.n	800173c <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001758:	e006      	b.n	8001768 <_ntoa_format+0x6e>
      buf[len++] = '0';
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	61fa      	str	r2, [r7, #28]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4413      	add	r3, r2
 8001764:	2230      	movs	r2, #48	; 0x30
 8001766:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d006      	beq.n	8001780 <_ntoa_format+0x86>
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001776:	429a      	cmp	r2, r3
 8001778:	d202      	bcs.n	8001780 <_ntoa_format+0x86>
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	2b1f      	cmp	r3, #31
 800177e:	d9ec      	bls.n	800175a <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8001780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b00      	cmp	r3, #0
 8001788:	d058      	beq.n	800183c <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800178a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001790:	2b00      	cmp	r3, #0
 8001792:	d116      	bne.n	80017c2 <_ntoa_format+0xc8>
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d013      	beq.n	80017c2 <_ntoa_format+0xc8>
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179e:	429a      	cmp	r2, r3
 80017a0:	d003      	beq.n	80017aa <_ntoa_format+0xb0>
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d10b      	bne.n	80017c2 <_ntoa_format+0xc8>
      len--;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <_ntoa_format+0xc8>
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	2b10      	cmp	r3, #16
 80017ba:	d102      	bne.n	80017c2 <_ntoa_format+0xc8>
        len--;
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	3b01      	subs	r3, #1
 80017c0:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	2b10      	cmp	r3, #16
 80017c6:	d10f      	bne.n	80017e8 <_ntoa_format+0xee>
 80017c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10a      	bne.n	80017e8 <_ntoa_format+0xee>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	2b1f      	cmp	r3, #31
 80017d6:	d807      	bhi.n	80017e8 <_ntoa_format+0xee>
      buf[len++] = 'x';
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	61fa      	str	r2, [r7, #28]
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4413      	add	r3, r2
 80017e2:	2278      	movs	r2, #120	; 0x78
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	e01f      	b.n	8001828 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	2b10      	cmp	r3, #16
 80017ec:	d10f      	bne.n	800180e <_ntoa_format+0x114>
 80017ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f0:	f003 0320 	and.w	r3, r3, #32
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00a      	beq.n	800180e <_ntoa_format+0x114>
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b1f      	cmp	r3, #31
 80017fc:	d807      	bhi.n	800180e <_ntoa_format+0x114>
      buf[len++] = 'X';
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	61fa      	str	r2, [r7, #28]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4413      	add	r3, r2
 8001808:	2258      	movs	r2, #88	; 0x58
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	e00c      	b.n	8001828 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	2b02      	cmp	r3, #2
 8001812:	d109      	bne.n	8001828 <_ntoa_format+0x12e>
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	2b1f      	cmp	r3, #31
 8001818:	d806      	bhi.n	8001828 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	61fa      	str	r2, [r7, #28]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4413      	add	r3, r2
 8001824:	2262      	movs	r2, #98	; 0x62
 8001826:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2b1f      	cmp	r3, #31
 800182c:	d806      	bhi.n	800183c <_ntoa_format+0x142>
      buf[len++] = '0';
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	61fa      	str	r2, [r7, #28]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4413      	add	r3, r2
 8001838:	2230      	movs	r2, #48	; 0x30
 800183a:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	2b1f      	cmp	r3, #31
 8001840:	d824      	bhi.n	800188c <_ntoa_format+0x192>
    if (negative) {
 8001842:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <_ntoa_format+0x160>
      buf[len++] = '-';
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	61fa      	str	r2, [r7, #28]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4413      	add	r3, r2
 8001854:	222d      	movs	r2, #45	; 0x2d
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	e018      	b.n	800188c <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800185a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d007      	beq.n	8001874 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	61fa      	str	r2, [r7, #28]
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4413      	add	r3, r2
 800186e:	222b      	movs	r2, #43	; 0x2b
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	e00b      	b.n	800188c <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8001874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	d006      	beq.n	800188c <_ntoa_format+0x192>
      buf[len++] = ' ';
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	61fa      	str	r2, [r7, #28]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4413      	add	r3, r2
 8001888:	2220      	movs	r2, #32
 800188a:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800188c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188e:	9303      	str	r3, [sp, #12]
 8001890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001892:	9302      	str	r3, [sp, #8]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f7ff fed9 	bl	800165a <_out_rev>
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b096      	sub	sp, #88	; 0x58
 80018b6:	af08      	add	r7, sp, #32
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80018c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d103      	bne.n	80018d2 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80018ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018cc:	f023 0310 	bic.w	r3, r3, #16
 80018d0:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80018d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <_ntoa_long+0x30>
 80018dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d033      	beq.n	800194a <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 80018e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80018ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80018ec:	fb01 f202 	mul.w	r2, r1, r2
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80018f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018fa:	2b09      	cmp	r3, #9
 80018fc:	d804      	bhi.n	8001908 <_ntoa_long+0x56>
 80018fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001902:	3330      	adds	r3, #48	; 0x30
 8001904:	b2da      	uxtb	r2, r3
 8001906:	e00d      	b.n	8001924 <_ntoa_long+0x72>
 8001908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <_ntoa_long+0x64>
 8001912:	2241      	movs	r2, #65	; 0x41
 8001914:	e000      	b.n	8001918 <_ntoa_long+0x66>
 8001916:	2261      	movs	r2, #97	; 0x61
 8001918:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800191c:	4413      	add	r3, r2
 800191e:	b2db      	uxtb	r3, r3
 8001920:	3b0a      	subs	r3, #10
 8001922:	b2da      	uxtb	r2, r3
 8001924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001926:	1c59      	adds	r1, r3, #1
 8001928:	6379      	str	r1, [r7, #52]	; 0x34
 800192a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800192e:	440b      	add	r3, r1
 8001930:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001934:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001938:	fbb2 f3f3 	udiv	r3, r2, r3
 800193c:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800193e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <_ntoa_long+0x98>
 8001944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001946:	2b1f      	cmp	r3, #31
 8001948:	d9cb      	bls.n	80018e2 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800194a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194c:	9306      	str	r3, [sp, #24]
 800194e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001950:	9305      	str	r3, [sp, #20]
 8001952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001954:	9304      	str	r3, [sp, #16]
 8001956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001958:	9303      	str	r3, [sp, #12]
 800195a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800195e:	9302      	str	r3, [sp, #8]
 8001960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f7ff fec2 	bl	80016fa <_ntoa_format>
 8001976:	4603      	mov	r3, r0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3738      	adds	r7, #56	; 0x38
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b096      	sub	sp, #88	; 0x58
 8001984:	af08      	add	r7, sp, #32
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001992:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001996:	4313      	orrs	r3, r2
 8001998:	d103      	bne.n	80019a2 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800199a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800199c:	f023 0310 	bic.w	r3, r3, #16
 80019a0:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80019a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <_ntoa_long_long+0x34>
 80019ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80019b0:	4313      	orrs	r3, r2
 80019b2:	d038      	beq.n	8001a26 <_ntoa_long_long+0xa6>
    do {
      const char digit = (char)(value % base);
 80019b4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80019b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80019bc:	f7ff f8ae 	bl	8000b1c <__aeabi_uldivmod>
 80019c0:	4613      	mov	r3, r2
 80019c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80019c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019ca:	2b09      	cmp	r3, #9
 80019cc:	d804      	bhi.n	80019d8 <_ntoa_long_long+0x58>
 80019ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019d2:	3330      	adds	r3, #48	; 0x30
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	e00d      	b.n	80019f4 <_ntoa_long_long+0x74>
 80019d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <_ntoa_long_long+0x66>
 80019e2:	2241      	movs	r2, #65	; 0x41
 80019e4:	e000      	b.n	80019e8 <_ntoa_long_long+0x68>
 80019e6:	2261      	movs	r2, #97	; 0x61
 80019e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019ec:	4413      	add	r3, r2
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	3b0a      	subs	r3, #10
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f6:	1c59      	adds	r1, r3, #1
 80019f8:	6379      	str	r1, [r7, #52]	; 0x34
 80019fa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80019fe:	440b      	add	r3, r1
 8001a00:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001a04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001a08:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001a0c:	f7ff f886 	bl	8000b1c <__aeabi_uldivmod>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001a18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	d002      	beq.n	8001a26 <_ntoa_long_long+0xa6>
 8001a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a22:	2b1f      	cmp	r3, #31
 8001a24:	d9c6      	bls.n	80019b4 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a2a:	9206      	str	r2, [sp, #24]
 8001a2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a2e:	9205      	str	r2, [sp, #20]
 8001a30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a32:	9204      	str	r2, [sp, #16]
 8001a34:	9303      	str	r3, [sp, #12]
 8001a36:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	68b9      	ldr	r1, [r7, #8]
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f7ff fe54 	bl	80016fa <_ntoa_format>
 8001a52:	4603      	mov	r3, r0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3738      	adds	r7, #56	; 0x38
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	0000      	movs	r0, r0
	...

08001a60 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b09d      	sub	sp, #116	; 0x74
 8001a64:	af04      	add	r7, sp, #16
 8001a66:	6178      	str	r0, [r7, #20]
 8001a68:	6139      	str	r1, [r7, #16]
 8001a6a:	60fa      	str	r2, [r7, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8001a82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a8a:	f7fe ffcd 	bl	8000a28 <__aeabi_dcmpeq>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10f      	bne.n	8001ab4 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8001a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a96:	9303      	str	r3, [sp, #12]
 8001a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a9a:	9302      	str	r3, [sp, #8]
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	4ba9      	ldr	r3, [pc, #676]	; (8001d48 <_ftoa+0x2e8>)
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	6939      	ldr	r1, [r7, #16]
 8001aaa:	6978      	ldr	r0, [r7, #20]
 8001aac:	f7ff fdd5 	bl	800165a <_out_rev>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	e22b      	b.n	8001f0c <_ftoa+0x4ac>
  if (value < -DBL_MAX)
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001abc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ac0:	f7fe ffbc 	bl	8000a3c <__aeabi_dcmplt>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00f      	beq.n	8001aea <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001acc:	9303      	str	r3, [sp, #12]
 8001ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ad0:	9302      	str	r3, [sp, #8]
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	4b9d      	ldr	r3, [pc, #628]	; (8001d4c <_ftoa+0x2ec>)
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	6939      	ldr	r1, [r7, #16]
 8001ae0:	6978      	ldr	r0, [r7, #20]
 8001ae2:	f7ff fdba 	bl	800165a <_out_rev>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	e210      	b.n	8001f0c <_ftoa+0x4ac>
  if (value > DBL_MAX)
 8001aea:	f04f 32ff 	mov.w	r2, #4294967295
 8001aee:	4b98      	ldr	r3, [pc, #608]	; (8001d50 <_ftoa+0x2f0>)
 8001af0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001af4:	f7fe ffc0 	bl	8000a78 <__aeabi_dcmpgt>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d01d      	beq.n	8001b3a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <_ftoa+0xac>
 8001b08:	4b92      	ldr	r3, [pc, #584]	; (8001d54 <_ftoa+0x2f4>)
 8001b0a:	e000      	b.n	8001b0e <_ftoa+0xae>
 8001b0c:	4b92      	ldr	r3, [pc, #584]	; (8001d58 <_ftoa+0x2f8>)
 8001b0e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b10:	f002 0204 	and.w	r2, r2, #4
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	d001      	beq.n	8001b1c <_ftoa+0xbc>
 8001b18:	2204      	movs	r2, #4
 8001b1a:	e000      	b.n	8001b1e <_ftoa+0xbe>
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001b20:	9103      	str	r1, [sp, #12]
 8001b22:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001b24:	9102      	str	r1, [sp, #8]
 8001b26:	9201      	str	r2, [sp, #4]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	6939      	ldr	r1, [r7, #16]
 8001b30:	6978      	ldr	r0, [r7, #20]
 8001b32:	f7ff fd92 	bl	800165a <_out_rev>
 8001b36:	4603      	mov	r3, r0
 8001b38:	e1e8      	b.n	8001f0c <_ftoa+0x4ac>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8001b3a:	a37f      	add	r3, pc, #508	; (adr r3, 8001d38 <_ftoa+0x2d8>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b44:	f7fe ff98 	bl	8000a78 <__aeabi_dcmpgt>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <_ftoa+0x102>
 8001b4e:	a37c      	add	r3, pc, #496	; (adr r3, 8001d40 <_ftoa+0x2e0>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b58:	f7fe ff70 	bl	8000a3c <__aeabi_dcmplt>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00f      	beq.n	8001b82 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001b62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b64:	9302      	str	r3, [sp, #8]
 8001b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	ed97 0b00 	vldr	d0, [r7]
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	6939      	ldr	r1, [r7, #16]
 8001b78:	6978      	ldr	r0, [r7, #20]
 8001b7a:	f000 f9d1 	bl	8001f20 <_etoa>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	e1c4      	b.n	8001f0c <_ftoa+0x4ac>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b94:	f7fe ff52 	bl	8000a3c <__aeabi_dcmplt>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00e      	beq.n	8001bbc <_ftoa+0x15c>
    negative = true;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8001ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ba8:	f04f 0000 	mov.w	r0, #0
 8001bac:	f04f 0100 	mov.w	r1, #0
 8001bb0:	f7fe fb1a 	bl	80001e8 <__aeabi_dsub>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8001bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10e      	bne.n	8001be4 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001bca:	e00b      	b.n	8001be4 <_ftoa+0x184>
    buf[len++] = '0';
 8001bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001bd2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bd6:	4413      	add	r3, r2
 8001bd8:	2230      	movs	r2, #48	; 0x30
 8001bda:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8001bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001be0:	3b01      	subs	r3, #1
 8001be2:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be6:	2b1f      	cmp	r3, #31
 8001be8:	d802      	bhi.n	8001bf0 <_ftoa+0x190>
 8001bea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bec:	2b09      	cmp	r3, #9
 8001bee:	d8ed      	bhi.n	8001bcc <_ftoa+0x16c>
  }

  int whole = (int)value;
 8001bf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bf4:	f7fe ff4a 	bl	8000a8c <__aeabi_d2iz>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8001bfc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001bfe:	f7fe fc41 	bl	8000484 <__aeabi_i2d>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c0a:	f7fe faed 	bl	80001e8 <__aeabi_dsub>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	4a51      	ldr	r2, [pc, #324]	; (8001d5c <_ftoa+0x2fc>)
 8001c18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fc99 	bl	8000558 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8001c2e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c32:	f7fe ff53 	bl	8000adc <__aeabi_d2uiz>
 8001c36:	4603      	mov	r3, r0
 8001c38:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8001c3a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c3c:	f7fe fc12 	bl	8000464 <__aeabi_ui2d>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c48:	f7fe face 	bl	80001e8 <__aeabi_dsub>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <_ftoa+0x300>)
 8001c5a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001c5e:	f7fe ff0b 	bl	8000a78 <__aeabi_dcmpgt>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d016      	beq.n	8001c96 <_ftoa+0x236>
    ++frac;
 8001c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8001c6e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c70:	f7fe fbf8 	bl	8000464 <__aeabi_ui2d>
 8001c74:	4a39      	ldr	r2, [pc, #228]	; (8001d5c <_ftoa+0x2fc>)
 8001c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c80:	f7fe fef0 	bl	8000a64 <__aeabi_dcmpge>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01a      	beq.n	8001cc0 <_ftoa+0x260>
      frac = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8001c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c90:	3301      	adds	r3, #1
 8001c92:	657b      	str	r3, [r7, #84]	; 0x54
 8001c94:	e014      	b.n	8001cc0 <_ftoa+0x260>
    }
  }
  else if (diff < 0.5) {
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	4b31      	ldr	r3, [pc, #196]	; (8001d60 <_ftoa+0x300>)
 8001c9c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001ca0:	f7fe fecc 	bl	8000a3c <__aeabi_dcmplt>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10a      	bne.n	8001cc0 <_ftoa+0x260>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8001caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d004      	beq.n	8001cba <_ftoa+0x25a>
 8001cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <_ftoa+0x260>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8001cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8001cc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d134      	bne.n	8001d30 <_ftoa+0x2d0>
    diff = value - (double)whole;
 8001cc6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001cc8:	f7fe fbdc 	bl	8000484 <__aeabi_i2d>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cd4:	f7fe fa88 	bl	80001e8 <__aeabi_dsub>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	461c      	mov	r4, r3
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <_ftoa+0x300>)
 8001cea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001cee:	f7fe fea5 	bl	8000a3c <__aeabi_dcmplt>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <_ftoa+0x29c>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	461c      	mov	r4, r3
 8001cfc:	b2e3      	uxtb	r3, r4
 8001cfe:	f083 0301 	eor.w	r3, r3, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <_ftoa+0x2bc>
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <_ftoa+0x300>)
 8001d0e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001d12:	f7fe feb1 	bl	8000a78 <__aeabi_dcmpgt>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d067      	beq.n	8001dec <_ftoa+0x38c>
 8001d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8085 	beq.w	8001e32 <_ftoa+0x3d2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8001d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	657b      	str	r3, [r7, #84]	; 0x54
 8001d2e:	e080      	b.n	8001e32 <_ftoa+0x3d2>
    }
  }
  else {
    unsigned int count = prec;
 8001d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d32:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001d34:	e037      	b.n	8001da6 <_ftoa+0x346>
 8001d36:	bf00      	nop
 8001d38:	00000000 	.word	0x00000000
 8001d3c:	41cdcd65 	.word	0x41cdcd65
 8001d40:	00000000 	.word	0x00000000
 8001d44:	c1cdcd65 	.word	0xc1cdcd65
 8001d48:	08008cd0 	.word	0x08008cd0
 8001d4c:	08008cd4 	.word	0x08008cd4
 8001d50:	7fefffff 	.word	0x7fefffff
 8001d54:	08008cdc 	.word	0x08008cdc
 8001d58:	08008ce4 	.word	0x08008ce4
 8001d5c:	08008d40 	.word	0x08008d40
 8001d60:	3fe00000 	.word	0x3fe00000
      --count;
 8001d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d66:	3b01      	subs	r3, #1
 8001d68:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8001d6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001d6c:	4b69      	ldr	r3, [pc, #420]	; (8001f14 <_ftoa+0x4b4>)
 8001d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8001d72:	08da      	lsrs	r2, r3, #3
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	1aca      	subs	r2, r1, r3
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d82:	1c59      	adds	r1, r3, #1
 8001d84:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001d86:	3230      	adds	r2, #48	; 0x30
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001d8e:	440b      	add	r3, r1
 8001d90:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8001d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d96:	4a5f      	ldr	r2, [pc, #380]	; (8001f14 <_ftoa+0x4b4>)
 8001d98:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9c:	08db      	lsrs	r3, r3, #3
 8001d9e:	653b      	str	r3, [r7, #80]	; 0x50
 8001da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <_ftoa+0x34e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da8:	2b1f      	cmp	r3, #31
 8001daa:	d9db      	bls.n	8001d64 <_ftoa+0x304>
 8001dac:	e00a      	b.n	8001dc4 <_ftoa+0x364>
        break;
 8001dae:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001db0:	e008      	b.n	8001dc4 <_ftoa+0x364>
      buf[len++] = '0';
 8001db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001db8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dbc:	4413      	add	r3, r2
 8001dbe:	2230      	movs	r2, #48	; 0x30
 8001dc0:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc6:	2b1f      	cmp	r3, #31
 8001dc8:	d804      	bhi.n	8001dd4 <_ftoa+0x374>
 8001dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dcc:	1e5a      	subs	r2, r3, #1
 8001dce:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ee      	bne.n	8001db2 <_ftoa+0x352>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd6:	2b1f      	cmp	r3, #31
 8001dd8:	d82b      	bhi.n	8001e32 <_ftoa+0x3d2>
      // add decimal
      buf[len++] = '.';
 8001dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001de0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001de4:	4413      	add	r3, r2
 8001de6:	222e      	movs	r2, #46	; 0x2e
 8001de8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001dec:	e021      	b.n	8001e32 <_ftoa+0x3d2>
    buf[len++] = (char)(48 + (whole % 10));
 8001dee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001df0:	4b49      	ldr	r3, [pc, #292]	; (8001f18 <_ftoa+0x4b8>)
 8001df2:	fb83 1302 	smull	r1, r3, r3, r2
 8001df6:	1099      	asrs	r1, r3, #2
 8001df8:	17d3      	asrs	r3, r2, #31
 8001dfa:	1ac9      	subs	r1, r1, r3
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	1ad1      	subs	r1, r2, r3
 8001e06:	b2ca      	uxtb	r2, r1
 8001e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e0a:	1c59      	adds	r1, r3, #1
 8001e0c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001e0e:	3230      	adds	r2, #48	; 0x30
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001e16:	440b      	add	r3, r1
 8001e18:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8001e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1e:	4a3e      	ldr	r2, [pc, #248]	; (8001f18 <_ftoa+0x4b8>)
 8001e20:	fb82 1203 	smull	r1, r2, r2, r3
 8001e24:	1092      	asrs	r2, r2, #2
 8001e26:	17db      	asrs	r3, r3, #31
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	657b      	str	r3, [r7, #84]	; 0x54
 8001e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <_ftoa+0x3da>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e34:	2b1f      	cmp	r3, #31
 8001e36:	d9da      	bls.n	8001dee <_ftoa+0x38e>
 8001e38:	e000      	b.n	8001e3c <_ftoa+0x3dc>
      break;
 8001e3a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8001e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d124      	bne.n	8001e90 <_ftoa+0x430>
 8001e46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01f      	beq.n	8001e90 <_ftoa+0x430>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d015      	beq.n	8001e82 <_ftoa+0x422>
 8001e56:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d104      	bne.n	8001e68 <_ftoa+0x408>
 8001e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00c      	beq.n	8001e82 <_ftoa+0x422>
      width--;
 8001e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001e6e:	e008      	b.n	8001e82 <_ftoa+0x422>
      buf[len++] = '0';
 8001e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e76:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e7a:	4413      	add	r3, r2
 8001e7c:	2230      	movs	r2, #48	; 0x30
 8001e7e:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001e82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d202      	bcs.n	8001e90 <_ftoa+0x430>
 8001e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e8c:	2b1f      	cmp	r3, #31
 8001e8e:	d9ef      	bls.n	8001e70 <_ftoa+0x410>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e92:	2b1f      	cmp	r3, #31
 8001e94:	d82a      	bhi.n	8001eec <_ftoa+0x48c>
    if (negative) {
 8001e96:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d009      	beq.n	8001eb2 <_ftoa+0x452>
      buf[len++] = '-';
 8001e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001ea4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ea8:	4413      	add	r3, r2
 8001eaa:	222d      	movs	r2, #45	; 0x2d
 8001eac:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001eb0:	e01c      	b.n	8001eec <_ftoa+0x48c>
    }
    else if (flags & FLAGS_PLUS) {
 8001eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d009      	beq.n	8001ed0 <_ftoa+0x470>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001ec2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ec6:	4413      	add	r3, r2
 8001ec8:	222b      	movs	r2, #43	; 0x2b
 8001eca:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001ece:	e00d      	b.n	8001eec <_ftoa+0x48c>
    }
    else if (flags & FLAGS_SPACE) {
 8001ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <_ftoa+0x48c>
      buf[len++] = ' ';
 8001eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001ee0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ee4:	4413      	add	r3, r2
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eee:	9303      	str	r3, [sp, #12]
 8001ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ef2:	9302      	str	r3, [sp, #8]
 8001ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	f107 0318 	add.w	r3, r7, #24
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	6939      	ldr	r1, [r7, #16]
 8001f04:	6978      	ldr	r0, [r7, #20]
 8001f06:	f7ff fba8 	bl	800165a <_out_rev>
 8001f0a:	4603      	mov	r3, r0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3764      	adds	r7, #100	; 0x64
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd90      	pop	{r4, r7, pc}
 8001f14:	cccccccd 	.word	0xcccccccd
 8001f18:	66666667 	.word	0x66666667
 8001f1c:	00000000 	.word	0x00000000

08001f20 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f24:	b09d      	sub	sp, #116	; 0x74
 8001f26:	af06      	add	r7, sp, #24
 8001f28:	61f8      	str	r0, [r7, #28]
 8001f2a:	61b9      	str	r1, [r7, #24]
 8001f2c:	617a      	str	r2, [r7, #20]
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8001f34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f3c:	f7fe fd74 	bl	8000a28 <__aeabi_dcmpeq>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d014      	beq.n	8001f70 <_etoa+0x50>
 8001f46:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4a:	4bc3      	ldr	r3, [pc, #780]	; (8002258 <_etoa+0x338>)
 8001f4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f50:	f7fe fd92 	bl	8000a78 <__aeabi_dcmpgt>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10a      	bne.n	8001f70 <_etoa+0x50>
 8001f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001f62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f66:	f7fe fd69 	bl	8000a3c <__aeabi_dcmplt>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d012      	beq.n	8001f96 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f74:	9302      	str	r3, [sp, #8]
 8001f76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	ed97 0b02 	vldr	d0, [r7, #8]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	69b9      	ldr	r1, [r7, #24]
 8001f8c:	69f8      	ldr	r0, [r7, #28]
 8001f8e:	f7ff fd67 	bl	8001a60 <_ftoa>
 8001f92:	4603      	mov	r3, r0
 8001f94:	e245      	b.n	8002422 <_etoa+0x502>
  }

  // determine the sign
  const bool negative = value < 0;
 8001f96:	2301      	movs	r3, #1
 8001f98:	461e      	mov	r6, r3
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fa6:	f7fe fd49 	bl	8000a3c <__aeabi_dcmplt>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <_etoa+0x94>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	461e      	mov	r6, r3
 8001fb4:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8001fb8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <_etoa+0xac>
    value = -value;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001fca:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8001fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001fd8:	2306      	movs	r3, #6
 8001fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8001fde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fe2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8001fe6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	0d0a      	lsrs	r2, r1, #20
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ffc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002000:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002006:	f04f 30ff 	mov.w	r0, #4294967295
 800200a:	4994      	ldr	r1, [pc, #592]	; (800225c <_etoa+0x33c>)
 800200c:	ea02 0400 	and.w	r4, r2, r0
 8002010:	ea03 0501 	and.w	r5, r3, r1
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	4b91      	ldr	r3, [pc, #580]	; (8002260 <_etoa+0x340>)
 800201a:	ea44 0802 	orr.w	r8, r4, r2
 800201e:	ea45 0903 	orr.w	r9, r5, r3
 8002022:	e9c7 8908 	strd	r8, r9, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002026:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002028:	f7fe fa2c 	bl	8000484 <__aeabi_i2d>
 800202c:	a37e      	add	r3, pc, #504	; (adr r3, 8002228 <_etoa+0x308>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	f7fe fa91 	bl	8000558 <__aeabi_dmul>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	a37c      	add	r3, pc, #496	; (adr r3, 8002230 <_etoa+0x310>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	f7fe f8d2 	bl	80001ec <__adddf3>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4614      	mov	r4, r2
 800204e:	461d      	mov	r5, r3
 8002050:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	4b82      	ldr	r3, [pc, #520]	; (8002264 <_etoa+0x344>)
 800205a:	f7fe f8c5 	bl	80001e8 <__aeabi_dsub>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	a374      	add	r3, pc, #464	; (adr r3, 8002238 <_etoa+0x318>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	f7fe fa74 	bl	8000558 <__aeabi_dmul>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4620      	mov	r0, r4
 8002076:	4629      	mov	r1, r5
 8002078:	f7fe f8b8 	bl	80001ec <__adddf3>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	f7fe fd02 	bl	8000a8c <__aeabi_d2iz>
 8002088:	4603      	mov	r3, r0
 800208a:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800208c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800208e:	f7fe f9f9 	bl	8000484 <__aeabi_i2d>
 8002092:	a36b      	add	r3, pc, #428	; (adr r3, 8002240 <_etoa+0x320>)
 8002094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002098:	f7fe fa5e 	bl	8000558 <__aeabi_dmul>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	4b6f      	ldr	r3, [pc, #444]	; (8002268 <_etoa+0x348>)
 80020aa:	f7fe f89f 	bl	80001ec <__adddf3>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7fe fce9 	bl	8000a8c <__aeabi_d2iz>
 80020ba:	4603      	mov	r3, r0
 80020bc:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80020be:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80020c0:	f7fe f9e0 	bl	8000484 <__aeabi_i2d>
 80020c4:	a360      	add	r3, pc, #384	; (adr r3, 8002248 <_etoa+0x328>)
 80020c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ca:	f7fe fa45 	bl	8000558 <__aeabi_dmul>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4614      	mov	r4, r2
 80020d4:	461d      	mov	r5, r3
 80020d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80020d8:	f7fe f9d4 	bl	8000484 <__aeabi_i2d>
 80020dc:	a35c      	add	r3, pc, #368	; (adr r3, 8002250 <_etoa+0x330>)
 80020de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e2:	f7fe fa39 	bl	8000558 <__aeabi_dmul>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4620      	mov	r0, r4
 80020ec:	4629      	mov	r1, r5
 80020ee:	f7fe f87b 	bl	80001e8 <__aeabi_dsub>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 80020fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002102:	f7fe fa29 	bl	8000558 <__aeabi_dmul>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800210e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002110:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002114:	4618      	mov	r0, r3
 8002116:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	0503      	lsls	r3, r0, #20
 8002124:	2200      	movs	r2, #0
 8002126:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800212a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800212e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	f7fe f859 	bl	80001ec <__adddf3>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4690      	mov	r8, r2
 8002140:	4699      	mov	r9, r3
 8002142:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002146:	f04f 0000 	mov.w	r0, #0
 800214a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800214e:	f7fe f84b 	bl	80001e8 <__aeabi_dsub>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4692      	mov	sl, r2
 8002158:	469b      	mov	fp, r3
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	4b43      	ldr	r3, [pc, #268]	; (800226c <_etoa+0x34c>)
 8002160:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002164:	f7fe fb22 	bl	80007ac <__aeabi_ddiv>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4610      	mov	r0, r2
 800216e:	4619      	mov	r1, r3
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	4b3e      	ldr	r3, [pc, #248]	; (8002270 <_etoa+0x350>)
 8002176:	f7fe f839 	bl	80001ec <__adddf3>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002182:	f7fe fb13 	bl	80007ac <__aeabi_ddiv>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	4b38      	ldr	r3, [pc, #224]	; (8002274 <_etoa+0x354>)
 8002194:	f7fe f82a 	bl	80001ec <__adddf3>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80021a0:	f7fe fb04 	bl	80007ac <__aeabi_ddiv>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4650      	mov	r0, sl
 80021aa:	4659      	mov	r1, fp
 80021ac:	f7fe f81e 	bl	80001ec <__adddf3>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4640      	mov	r0, r8
 80021b6:	4649      	mov	r1, r9
 80021b8:	f7fe faf8 	bl	80007ac <__aeabi_ddiv>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	4b25      	ldr	r3, [pc, #148]	; (8002260 <_etoa+0x340>)
 80021ca:	f7fe f80f 	bl	80001ec <__adddf3>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4620      	mov	r0, r4
 80021d4:	4629      	mov	r1, r5
 80021d6:	f7fe f9bf 	bl	8000558 <__aeabi_dmul>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 80021e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021ea:	f7fe fc27 	bl	8000a3c <__aeabi_dcmplt>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00d      	beq.n	8002210 <_etoa+0x2f0>
    expval--;
 80021f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f6:	3b01      	subs	r3, #1
 80021f8:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 80021fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <_etoa+0x350>)
 8002204:	f7fe fad2 	bl	80007ac <__aeabi_ddiv>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002212:	2b63      	cmp	r3, #99	; 0x63
 8002214:	dc30      	bgt.n	8002278 <_etoa+0x358>
 8002216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002218:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800221c:	db2c      	blt.n	8002278 <_etoa+0x358>
 800221e:	2304      	movs	r3, #4
 8002220:	e02b      	b.n	800227a <_etoa+0x35a>
 8002222:	bf00      	nop
 8002224:	f3af 8000 	nop.w
 8002228:	509f79fb 	.word	0x509f79fb
 800222c:	3fd34413 	.word	0x3fd34413
 8002230:	8b60c8b3 	.word	0x8b60c8b3
 8002234:	3fc68a28 	.word	0x3fc68a28
 8002238:	636f4361 	.word	0x636f4361
 800223c:	3fd287a7 	.word	0x3fd287a7
 8002240:	0979a371 	.word	0x0979a371
 8002244:	400a934f 	.word	0x400a934f
 8002248:	bbb55516 	.word	0xbbb55516
 800224c:	40026bb1 	.word	0x40026bb1
 8002250:	fefa39ef 	.word	0xfefa39ef
 8002254:	3fe62e42 	.word	0x3fe62e42
 8002258:	7fefffff 	.word	0x7fefffff
 800225c:	000fffff 	.word	0x000fffff
 8002260:	3ff00000 	.word	0x3ff00000
 8002264:	3ff80000 	.word	0x3ff80000
 8002268:	3fe00000 	.word	0x3fe00000
 800226c:	402c0000 	.word	0x402c0000
 8002270:	40240000 	.word	0x40240000
 8002274:	40180000 	.word	0x40180000
 8002278:	2305      	movs	r3, #5
 800227a:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800227c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002284:	2b00      	cmp	r3, #0
 8002286:	d03d      	beq.n	8002304 <_etoa+0x3e4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002288:	a369      	add	r3, pc, #420	; (adr r3, 8002430 <_etoa+0x510>)
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002292:	f7fe fbe7 	bl	8000a64 <__aeabi_dcmpge>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d024      	beq.n	80022e6 <_etoa+0x3c6>
 800229c:	a366      	add	r3, pc, #408	; (adr r3, 8002438 <_etoa+0x518>)
 800229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022a6:	f7fe fbc9 	bl	8000a3c <__aeabi_dcmplt>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01a      	beq.n	80022e6 <_etoa+0x3c6>
      if ((int)prec > expval) {
 80022b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022b6:	429a      	cmp	r2, r3
 80022b8:	da07      	bge.n	80022ca <_etoa+0x3aa>
        prec = (unsigned)((int)prec - expval - 1);
 80022ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80022be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022c8:	e002      	b.n	80022d0 <_etoa+0x3b0>
      }
      else {
        prec = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80022d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	657b      	str	r3, [r7, #84]	; 0x54
 80022e4:	e00e      	b.n	8002304 <_etoa+0x3e4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80022e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <_etoa+0x3e4>
 80022ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d004      	beq.n	8002304 <_etoa+0x3e4>
        --prec;
 80022fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022fe:	3b01      	subs	r3, #1
 8002300:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002308:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 800230a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800230e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002310:	429a      	cmp	r2, r3
 8002312:	d904      	bls.n	800231e <_etoa+0x3fe>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002314:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800231c:	e001      	b.n	8002322 <_etoa+0x402>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002322:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d004      	beq.n	8002338 <_etoa+0x418>
 800232e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <_etoa+0x418>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8002338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <_etoa+0x432>
    value /= conv.F;
 800233e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002342:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002346:	f7fe fa31 	bl	80007ac <__aeabi_ddiv>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002356:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <_etoa+0x44c>
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	e003      	b.n	8002374 <_etoa+0x454>
 800236c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002370:	ed87 7b00 	vstr	d7, [r7]
 8002374:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800237c:	9302      	str	r3, [sp, #8]
 800237e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002380:	9301      	str	r3, [sp, #4]
 8002382:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	ed97 0b00 	vldr	d0, [r7]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	69b9      	ldr	r1, [r7, #24]
 8002392:	69f8      	ldr	r0, [r7, #28]
 8002394:	f7ff fb64 	bl	8001a60 <_ftoa>
 8002398:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 800239a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800239c:	2b00      	cmp	r3, #0
 800239e:	d03f      	beq.n	8002420 <_etoa+0x500>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80023a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <_etoa+0x490>
 80023ac:	2045      	movs	r0, #69	; 0x45
 80023ae:	e000      	b.n	80023b2 <_etoa+0x492>
 80023b0:	2065      	movs	r0, #101	; 0x65
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	1c53      	adds	r3, r2, #1
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	69fc      	ldr	r4, [r7, #28]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	69b9      	ldr	r1, [r7, #24]
 80023be:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80023c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	bfb8      	it	lt
 80023c6:	425b      	neglt	r3, r3
 80023c8:	4618      	mov	r0, r3
 80023ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023cc:	0fdb      	lsrs	r3, r3, #31
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80023d2:	3a01      	subs	r2, #1
 80023d4:	2105      	movs	r1, #5
 80023d6:	9105      	str	r1, [sp, #20]
 80023d8:	9204      	str	r2, [sp, #16]
 80023da:	2200      	movs	r2, #0
 80023dc:	9203      	str	r2, [sp, #12]
 80023de:	220a      	movs	r2, #10
 80023e0:	9202      	str	r2, [sp, #8]
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	9000      	str	r0, [sp, #0]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	69b9      	ldr	r1, [r7, #24]
 80023ec:	69f8      	ldr	r0, [r7, #28]
 80023ee:	f7ff fa60 	bl	80018b2 <_ntoa_long>
 80023f2:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80023f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00f      	beq.n	8002420 <_etoa+0x500>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8002400:	e007      	b.n	8002412 <_etoa+0x4f2>
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	1c53      	adds	r3, r2, #1
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	69fc      	ldr	r4, [r7, #28]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	69b9      	ldr	r1, [r7, #24]
 800240e:	2020      	movs	r0, #32
 8002410:	47a0      	blx	r4
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800241c:	429a      	cmp	r2, r3
 800241e:	d8f0      	bhi.n	8002402 <_etoa+0x4e2>
    }
  }
  return idx;
 8002420:	697b      	ldr	r3, [r7, #20]
}
 8002422:	4618      	mov	r0, r3
 8002424:	375c      	adds	r7, #92	; 0x5c
 8002426:	46bd      	mov	sp, r7
 8002428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800242c:	f3af 8000 	nop.w
 8002430:	eb1c432d 	.word	0xeb1c432d
 8002434:	3f1a36e2 	.word	0x3f1a36e2
 8002438:	00000000 	.word	0x00000000
 800243c:	412e8480 	.word	0x412e8480

08002440 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002440:	b5b0      	push	{r4, r5, r7, lr}
 8002442:	b0a0      	sub	sp, #128	; 0x80
 8002444:	af0a      	add	r7, sp, #40	; 0x28
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	f040 8494 	bne.w	8002d82 <_vsnprintf+0x942>
    // use null output function
    out = _out_null;
 800245a:	4ba0      	ldr	r3, [pc, #640]	; (80026dc <_vsnprintf+0x29c>)
 800245c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800245e:	f000 bc90 	b.w	8002d82 <_vsnprintf+0x942>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b25      	cmp	r3, #37	; 0x25
 8002468:	d00d      	beq.n	8002486 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	7818      	ldrb	r0, [r3, #0]
 800246e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002470:	1c53      	adds	r3, r2, #1
 8002472:	647b      	str	r3, [r7, #68]	; 0x44
 8002474:	68fc      	ldr	r4, [r7, #12]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	47a0      	blx	r4
      format++;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	3301      	adds	r3, #1
 8002480:	603b      	str	r3, [r7, #0]
      continue;
 8002482:	f000 bc7e 	b.w	8002d82 <_vsnprintf+0x942>
    }
    else {
      // yes, evaluate it
      format++;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	3301      	adds	r3, #1
 800248a:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	3b20      	subs	r3, #32
 8002496:	2b10      	cmp	r3, #16
 8002498:	d856      	bhi.n	8002548 <_vsnprintf+0x108>
 800249a:	a201      	add	r2, pc, #4	; (adr r2, 80024a0 <_vsnprintf+0x60>)
 800249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a0:	08002521 	.word	0x08002521
 80024a4:	08002549 	.word	0x08002549
 80024a8:	08002549 	.word	0x08002549
 80024ac:	08002535 	.word	0x08002535
 80024b0:	08002549 	.word	0x08002549
 80024b4:	08002549 	.word	0x08002549
 80024b8:	08002549 	.word	0x08002549
 80024bc:	08002549 	.word	0x08002549
 80024c0:	08002549 	.word	0x08002549
 80024c4:	08002549 	.word	0x08002549
 80024c8:	08002549 	.word	0x08002549
 80024cc:	0800250d 	.word	0x0800250d
 80024d0:	08002549 	.word	0x08002549
 80024d4:	080024f9 	.word	0x080024f9
 80024d8:	08002549 	.word	0x08002549
 80024dc:	08002549 	.word	0x08002549
 80024e0:	080024e5 	.word	0x080024e5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80024e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	657b      	str	r3, [r7, #84]	; 0x54
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	3301      	adds	r3, #1
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	2301      	movs	r3, #1
 80024f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80024f6:	e02a      	b.n	800254e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80024f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024fa:	f043 0302 	orr.w	r3, r3, #2
 80024fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	3301      	adds	r3, #1
 8002504:	603b      	str	r3, [r7, #0]
 8002506:	2301      	movs	r3, #1
 8002508:	64bb      	str	r3, [r7, #72]	; 0x48
 800250a:	e020      	b.n	800254e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800250c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	657b      	str	r3, [r7, #84]	; 0x54
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	3301      	adds	r3, #1
 8002518:	603b      	str	r3, [r7, #0]
 800251a:	2301      	movs	r3, #1
 800251c:	64bb      	str	r3, [r7, #72]	; 0x48
 800251e:	e016      	b.n	800254e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002522:	f043 0308 	orr.w	r3, r3, #8
 8002526:	657b      	str	r3, [r7, #84]	; 0x54
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	3301      	adds	r3, #1
 800252c:	603b      	str	r3, [r7, #0]
 800252e:	2301      	movs	r3, #1
 8002530:	64bb      	str	r3, [r7, #72]	; 0x48
 8002532:	e00c      	b.n	800254e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002536:	f043 0310 	orr.w	r3, r3, #16
 800253a:	657b      	str	r3, [r7, #84]	; 0x54
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	3301      	adds	r3, #1
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	2301      	movs	r3, #1
 8002544:	64bb      	str	r3, [r7, #72]	; 0x48
 8002546:	e002      	b.n	800254e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8002548:	2300      	movs	r3, #0
 800254a:	64bb      	str	r3, [r7, #72]	; 0x48
 800254c:	bf00      	nop
      }
    } while (n);
 800254e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002550:	2b00      	cmp	r3, #0
 8002552:	d19d      	bne.n	8002490 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff f841 	bl	80015e4 <_is_digit>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <_vsnprintf+0x134>
      width = _atoi(&format);
 8002568:	463b      	mov	r3, r7
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff f851 	bl	8001612 <_atoi>
 8002570:	6538      	str	r0, [r7, #80]	; 0x50
 8002572:	e018      	b.n	80025a6 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b2a      	cmp	r3, #42	; 0x2a
 800257a:	d114      	bne.n	80025a6 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800257c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800257e:	1d1a      	adds	r2, r3, #4
 8002580:	66ba      	str	r2, [r7, #104]	; 0x68
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	2b00      	cmp	r3, #0
 800258a:	da07      	bge.n	800259c <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800258c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258e:	f043 0302 	orr.w	r3, r3, #2
 8002592:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002596:	425b      	negs	r3, r3
 8002598:	653b      	str	r3, [r7, #80]	; 0x50
 800259a:	e001      	b.n	80025a0 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b2e      	cmp	r3, #46	; 0x2e
 80025b0:	d124      	bne.n	80025fc <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 80025b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b8:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff f80d 	bl	80015e4 <_is_digit>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <_vsnprintf+0x19c>
        precision = _atoi(&format);
 80025d0:	463b      	mov	r3, r7
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff f81d 	bl	8001612 <_atoi>
 80025d8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80025da:	e00f      	b.n	80025fc <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b2a      	cmp	r3, #42	; 0x2a
 80025e2:	d10b      	bne.n	80025fc <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 80025e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025e6:	1d1a      	adds	r2, r3, #4
 80025e8:	66ba      	str	r2, [r7, #104]	; 0x68
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80025ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80025f4:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	3b68      	subs	r3, #104	; 0x68
 8002602:	2b12      	cmp	r3, #18
 8002604:	d866      	bhi.n	80026d4 <_vsnprintf+0x294>
 8002606:	a201      	add	r2, pc, #4	; (adr r2, 800260c <_vsnprintf+0x1cc>)
 8002608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260c:	0800267f 	.word	0x0800267f
 8002610:	080026d5 	.word	0x080026d5
 8002614:	080026b5 	.word	0x080026b5
 8002618:	080026d5 	.word	0x080026d5
 800261c:	08002659 	.word	0x08002659
 8002620:	080026d5 	.word	0x080026d5
 8002624:	080026d5 	.word	0x080026d5
 8002628:	080026d5 	.word	0x080026d5
 800262c:	080026d5 	.word	0x080026d5
 8002630:	080026d5 	.word	0x080026d5
 8002634:	080026d5 	.word	0x080026d5
 8002638:	080026d5 	.word	0x080026d5
 800263c:	080026a5 	.word	0x080026a5
 8002640:	080026d5 	.word	0x080026d5
 8002644:	080026d5 	.word	0x080026d5
 8002648:	080026d5 	.word	0x080026d5
 800264c:	080026d5 	.word	0x080026d5
 8002650:	080026d5 	.word	0x080026d5
 8002654:	080026c5 	.word	0x080026c5
      case 'l' :
        flags |= FLAGS_LONG;
 8002658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	3301      	adds	r3, #1
 8002664:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b6c      	cmp	r3, #108	; 0x6c
 800266c:	d134      	bne.n	80026d8 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800266e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002670:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002674:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	3301      	adds	r3, #1
 800267a:	603b      	str	r3, [r7, #0]
        }
        break;
 800267c:	e02c      	b.n	80026d8 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800267e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002684:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b68      	cmp	r3, #104	; 0x68
 8002692:	d125      	bne.n	80026e0 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8002694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800269a:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	3301      	adds	r3, #1
 80026a0:	603b      	str	r3, [r7, #0]
        }
        break;
 80026a2:	e01d      	b.n	80026e0 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80026a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026aa:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	3301      	adds	r3, #1
 80026b0:	603b      	str	r3, [r7, #0]
        break;
 80026b2:	e016      	b.n	80026e2 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80026b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ba:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	3301      	adds	r3, #1
 80026c0:	603b      	str	r3, [r7, #0]
        break;
 80026c2:	e00e      	b.n	80026e2 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80026c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ca:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	3301      	adds	r3, #1
 80026d0:	603b      	str	r3, [r7, #0]
        break;
 80026d2:	e006      	b.n	80026e2 <_vsnprintf+0x2a2>
      default :
        break;
 80026d4:	bf00      	nop
 80026d6:	e004      	b.n	80026e2 <_vsnprintf+0x2a2>
        break;
 80026d8:	bf00      	nop
 80026da:	e002      	b.n	80026e2 <_vsnprintf+0x2a2>
 80026dc:	08001569 	.word	0x08001569
        break;
 80026e0:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	3b25      	subs	r3, #37	; 0x25
 80026e8:	2b53      	cmp	r3, #83	; 0x53
 80026ea:	f200 833d 	bhi.w	8002d68 <_vsnprintf+0x928>
 80026ee:	a201      	add	r2, pc, #4	; (adr r2, 80026f4 <_vsnprintf+0x2b4>)
 80026f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f4:	08002d51 	.word	0x08002d51
 80026f8:	08002d69 	.word	0x08002d69
 80026fc:	08002d69 	.word	0x08002d69
 8002700:	08002d69 	.word	0x08002d69
 8002704:	08002d69 	.word	0x08002d69
 8002708:	08002d69 	.word	0x08002d69
 800270c:	08002d69 	.word	0x08002d69
 8002710:	08002d69 	.word	0x08002d69
 8002714:	08002d69 	.word	0x08002d69
 8002718:	08002d69 	.word	0x08002d69
 800271c:	08002d69 	.word	0x08002d69
 8002720:	08002d69 	.word	0x08002d69
 8002724:	08002d69 	.word	0x08002d69
 8002728:	08002d69 	.word	0x08002d69
 800272c:	08002d69 	.word	0x08002d69
 8002730:	08002d69 	.word	0x08002d69
 8002734:	08002d69 	.word	0x08002d69
 8002738:	08002d69 	.word	0x08002d69
 800273c:	08002d69 	.word	0x08002d69
 8002740:	08002d69 	.word	0x08002d69
 8002744:	08002d69 	.word	0x08002d69
 8002748:	08002d69 	.word	0x08002d69
 800274c:	08002d69 	.word	0x08002d69
 8002750:	08002d69 	.word	0x08002d69
 8002754:	08002d69 	.word	0x08002d69
 8002758:	08002d69 	.word	0x08002d69
 800275c:	08002d69 	.word	0x08002d69
 8002760:	08002d69 	.word	0x08002d69
 8002764:	08002d69 	.word	0x08002d69
 8002768:	08002d69 	.word	0x08002d69
 800276c:	08002d69 	.word	0x08002d69
 8002770:	08002d69 	.word	0x08002d69
 8002774:	08002b1f 	.word	0x08002b1f
 8002778:	08002ad3 	.word	0x08002ad3
 800277c:	08002b1f 	.word	0x08002b1f
 8002780:	08002d69 	.word	0x08002d69
 8002784:	08002d69 	.word	0x08002d69
 8002788:	08002d69 	.word	0x08002d69
 800278c:	08002d69 	.word	0x08002d69
 8002790:	08002d69 	.word	0x08002d69
 8002794:	08002d69 	.word	0x08002d69
 8002798:	08002d69 	.word	0x08002d69
 800279c:	08002d69 	.word	0x08002d69
 80027a0:	08002d69 	.word	0x08002d69
 80027a4:	08002d69 	.word	0x08002d69
 80027a8:	08002d69 	.word	0x08002d69
 80027ac:	08002d69 	.word	0x08002d69
 80027b0:	08002d69 	.word	0x08002d69
 80027b4:	08002d69 	.word	0x08002d69
 80027b8:	08002d69 	.word	0x08002d69
 80027bc:	08002d69 	.word	0x08002d69
 80027c0:	08002845 	.word	0x08002845
 80027c4:	08002d69 	.word	0x08002d69
 80027c8:	08002d69 	.word	0x08002d69
 80027cc:	08002d69 	.word	0x08002d69
 80027d0:	08002d69 	.word	0x08002d69
 80027d4:	08002d69 	.word	0x08002d69
 80027d8:	08002d69 	.word	0x08002d69
 80027dc:	08002d69 	.word	0x08002d69
 80027e0:	08002d69 	.word	0x08002d69
 80027e4:	08002d69 	.word	0x08002d69
 80027e8:	08002845 	.word	0x08002845
 80027ec:	08002b8b 	.word	0x08002b8b
 80027f0:	08002845 	.word	0x08002845
 80027f4:	08002b1f 	.word	0x08002b1f
 80027f8:	08002ad3 	.word	0x08002ad3
 80027fc:	08002b1f 	.word	0x08002b1f
 8002800:	08002d69 	.word	0x08002d69
 8002804:	08002845 	.word	0x08002845
 8002808:	08002d69 	.word	0x08002d69
 800280c:	08002d69 	.word	0x08002d69
 8002810:	08002d69 	.word	0x08002d69
 8002814:	08002d69 	.word	0x08002d69
 8002818:	08002d69 	.word	0x08002d69
 800281c:	08002845 	.word	0x08002845
 8002820:	08002cc3 	.word	0x08002cc3
 8002824:	08002d69 	.word	0x08002d69
 8002828:	08002d69 	.word	0x08002d69
 800282c:	08002bff 	.word	0x08002bff
 8002830:	08002d69 	.word	0x08002d69
 8002834:	08002845 	.word	0x08002845
 8002838:	08002d69 	.word	0x08002d69
 800283c:	08002d69 	.word	0x08002d69
 8002840:	08002845 	.word	0x08002845
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b78      	cmp	r3, #120	; 0x78
 800284a:	d003      	beq.n	8002854 <_vsnprintf+0x414>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b58      	cmp	r3, #88	; 0x58
 8002852:	d102      	bne.n	800285a <_vsnprintf+0x41a>
          base = 16U;
 8002854:	2310      	movs	r3, #16
 8002856:	643b      	str	r3, [r7, #64]	; 0x40
 8002858:	e013      	b.n	8002882 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b6f      	cmp	r3, #111	; 0x6f
 8002860:	d102      	bne.n	8002868 <_vsnprintf+0x428>
          base =  8U;
 8002862:	2308      	movs	r3, #8
 8002864:	643b      	str	r3, [r7, #64]	; 0x40
 8002866:	e00c      	b.n	8002882 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b62      	cmp	r3, #98	; 0x62
 800286e:	d102      	bne.n	8002876 <_vsnprintf+0x436>
          base =  2U;
 8002870:	2302      	movs	r3, #2
 8002872:	643b      	str	r3, [r7, #64]	; 0x40
 8002874:	e005      	b.n	8002882 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8002876:	230a      	movs	r3, #10
 8002878:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800287a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287c:	f023 0310 	bic.w	r3, r3, #16
 8002880:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b58      	cmp	r3, #88	; 0x58
 8002888:	d103      	bne.n	8002892 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800288a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288c:	f043 0320 	orr.w	r3, r3, #32
 8002890:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b69      	cmp	r3, #105	; 0x69
 8002898:	d007      	beq.n	80028aa <_vsnprintf+0x46a>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d003      	beq.n	80028aa <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80028a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a4:	f023 030c 	bic.w	r3, r3, #12
 80028a8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80028aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 80028b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b69      	cmp	r3, #105	; 0x69
 80028c2:	d004      	beq.n	80028ce <_vsnprintf+0x48e>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b64      	cmp	r3, #100	; 0x64
 80028ca:	f040 808e 	bne.w	80029ea <_vsnprintf+0x5aa>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80028ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d02f      	beq.n	8002938 <_vsnprintf+0x4f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80028d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028da:	3307      	adds	r3, #7
 80028dc:	f023 0307 	bic.w	r3, r3, #7
 80028e0:	f103 0208 	add.w	r2, r3, #8
 80028e4:	66ba      	str	r2, [r7, #104]	; 0x68
 80028e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80028ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028f2:	2a00      	cmp	r2, #0
 80028f4:	f173 0100 	sbcs.w	r1, r3, #0
 80028f8:	da02      	bge.n	8002900 <_vsnprintf+0x4c0>
 80028fa:	4252      	negs	r2, r2
 80028fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	0fdb      	lsrs	r3, r3, #31
 8002908:	b2dc      	uxtb	r4, r3
 800290a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800290c:	461a      	mov	r2, r3
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8002914:	9508      	str	r5, [sp, #32]
 8002916:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8002918:	9507      	str	r5, [sp, #28]
 800291a:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800291c:	9506      	str	r5, [sp, #24]
 800291e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002922:	9402      	str	r4, [sp, #8]
 8002924:	e9cd 0100 	strd	r0, r1, [sp]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f7ff f826 	bl	8001980 <_ntoa_long_long>
 8002934:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8002936:	e0c8      	b.n	8002aca <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01e      	beq.n	8002980 <_vsnprintf+0x540>
            const long value = va_arg(va, long);
 8002942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002944:	1d1a      	adds	r2, r3, #4
 8002946:	66ba      	str	r2, [r7, #104]	; 0x68
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	2b00      	cmp	r3, #0
 8002950:	bfb8      	it	lt
 8002952:	425b      	neglt	r3, r3
 8002954:	4619      	mov	r1, r3
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	0fdb      	lsrs	r3, r3, #31
 800295a:	b2db      	uxtb	r3, r3
 800295c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800295e:	9205      	str	r2, [sp, #20]
 8002960:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002962:	9204      	str	r2, [sp, #16]
 8002964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002966:	9203      	str	r2, [sp, #12]
 8002968:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800296a:	9202      	str	r2, [sp, #8]
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	9100      	str	r1, [sp, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7fe ff9b 	bl	80018b2 <_ntoa_long>
 800297c:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800297e:	e0a4      	b.n	8002aca <_vsnprintf+0x68a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <_vsnprintf+0x556>
 800298a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800298c:	1d1a      	adds	r2, r3, #4
 800298e:	66ba      	str	r2, [r7, #104]	; 0x68
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	e00e      	b.n	80029b4 <_vsnprintf+0x574>
 8002996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <_vsnprintf+0x56c>
 80029a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029a2:	1d1a      	adds	r2, r3, #4
 80029a4:	66ba      	str	r2, [r7, #104]	; 0x68
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	b21b      	sxth	r3, r3
 80029aa:	e003      	b.n	80029b4 <_vsnprintf+0x574>
 80029ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ae:	1d1a      	adds	r2, r3, #4
 80029b0:	66ba      	str	r2, [r7, #104]	; 0x68
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bfb8      	it	lt
 80029bc:	425b      	neglt	r3, r3
 80029be:	4619      	mov	r1, r3
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	0fdb      	lsrs	r3, r3, #31
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029c8:	9205      	str	r2, [sp, #20]
 80029ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80029cc:	9204      	str	r2, [sp, #16]
 80029ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029d0:	9203      	str	r2, [sp, #12]
 80029d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029d4:	9202      	str	r2, [sp, #8]
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9100      	str	r1, [sp, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f7fe ff66 	bl	80018b2 <_ntoa_long>
 80029e6:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80029e8:	e06f      	b.n	8002aca <_vsnprintf+0x68a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80029ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d020      	beq.n	8002a36 <_vsnprintf+0x5f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80029f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029f6:	3307      	adds	r3, #7
 80029f8:	f023 0307 	bic.w	r3, r3, #7
 80029fc:	f103 0208 	add.w	r2, r3, #8
 8002a00:	66ba      	str	r2, [r7, #104]	; 0x68
 8002a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a08:	4608      	mov	r0, r1
 8002a0a:	f04f 0100 	mov.w	r1, #0
 8002a0e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8002a10:	9408      	str	r4, [sp, #32]
 8002a12:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002a14:	9407      	str	r4, [sp, #28]
 8002a16:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002a18:	9406      	str	r4, [sp, #24]
 8002a1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002a1e:	2100      	movs	r1, #0
 8002a20:	9102      	str	r1, [sp, #8]
 8002a22:	e9cd 2300 	strd	r2, r3, [sp]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f7fe ffa7 	bl	8001980 <_ntoa_long_long>
 8002a32:	6478      	str	r0, [r7, #68]	; 0x44
 8002a34:	e049      	b.n	8002aca <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d016      	beq.n	8002a6e <_vsnprintf+0x62e>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8002a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a42:	1d1a      	adds	r2, r3, #4
 8002a44:	66ba      	str	r2, [r7, #104]	; 0x68
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a4a:	9205      	str	r2, [sp, #20]
 8002a4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a4e:	9204      	str	r2, [sp, #16]
 8002a50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a52:	9203      	str	r2, [sp, #12]
 8002a54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a56:	9202      	str	r2, [sp, #8]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	9201      	str	r2, [sp, #4]
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f7fe ff24 	bl	80018b2 <_ntoa_long>
 8002a6a:	6478      	str	r0, [r7, #68]	; 0x44
 8002a6c:	e02d      	b.n	8002aca <_vsnprintf+0x68a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8002a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <_vsnprintf+0x644>
 8002a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a7a:	1d1a      	adds	r2, r3, #4
 8002a7c:	66ba      	str	r2, [r7, #104]	; 0x68
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	e00e      	b.n	8002aa2 <_vsnprintf+0x662>
 8002a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <_vsnprintf+0x65a>
 8002a8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a90:	1d1a      	adds	r2, r3, #4
 8002a92:	66ba      	str	r2, [r7, #104]	; 0x68
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	e003      	b.n	8002aa2 <_vsnprintf+0x662>
 8002a9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a9c:	1d1a      	adds	r2, r3, #4
 8002a9e:	66ba      	str	r2, [r7, #104]	; 0x68
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8002aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa6:	9305      	str	r3, [sp, #20]
 8002aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aaa:	9304      	str	r3, [sp, #16]
 8002aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aae:	9303      	str	r3, [sp, #12]
 8002ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab2:	9302      	str	r3, [sp, #8]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f7fe fef5 	bl	80018b2 <_ntoa_long>
 8002ac8:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	603b      	str	r3, [r7, #0]
        break;
 8002ad0:	e157      	b.n	8002d82 <_vsnprintf+0x942>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b46      	cmp	r3, #70	; 0x46
 8002ad8:	d103      	bne.n	8002ae2 <_vsnprintf+0x6a2>
 8002ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002adc:	f043 0320 	orr.w	r3, r3, #32
 8002ae0:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ae4:	3307      	adds	r3, #7
 8002ae6:	f023 0307 	bic.w	r3, r3, #7
 8002aea:	f103 0208 	add.w	r2, r3, #8
 8002aee:	66ba      	str	r2, [r7, #104]	; 0x68
 8002af0:	ed93 7b00 	vldr	d7, [r3]
 8002af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af6:	9302      	str	r3, [sp, #8]
 8002af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	eeb0 0a47 	vmov.f32	s0, s14
 8002b04:	eef0 0a67 	vmov.f32	s1, s15
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f7fe ffa6 	bl	8001a60 <_ftoa>
 8002b14:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	603b      	str	r3, [r7, #0]
        break;
 8002b1c:	e131      	b.n	8002d82 <_vsnprintf+0x942>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b67      	cmp	r3, #103	; 0x67
 8002b24:	d003      	beq.n	8002b2e <_vsnprintf+0x6ee>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b47      	cmp	r3, #71	; 0x47
 8002b2c:	d103      	bne.n	8002b36 <_vsnprintf+0x6f6>
 8002b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b34:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b45      	cmp	r3, #69	; 0x45
 8002b3c:	d003      	beq.n	8002b46 <_vsnprintf+0x706>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b47      	cmp	r3, #71	; 0x47
 8002b44:	d103      	bne.n	8002b4e <_vsnprintf+0x70e>
 8002b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b48:	f043 0320 	orr.w	r3, r3, #32
 8002b4c:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b50:	3307      	adds	r3, #7
 8002b52:	f023 0307 	bic.w	r3, r3, #7
 8002b56:	f103 0208 	add.w	r2, r3, #8
 8002b5a:	66ba      	str	r2, [r7, #104]	; 0x68
 8002b5c:	ed93 7b00 	vldr	d7, [r3]
 8002b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b62:	9302      	str	r3, [sp, #8]
 8002b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b70:	eef0 0a67 	vmov.f32	s1, s15
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f7ff f9d0 	bl	8001f20 <_etoa>
 8002b80:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	3301      	adds	r3, #1
 8002b86:	603b      	str	r3, [r7, #0]
        break;
 8002b88:	e0fb      	b.n	8002d82 <_vsnprintf+0x942>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8002b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10e      	bne.n	8002bb6 <_vsnprintf+0x776>
          while (l++ < width) {
 8002b98:	e007      	b.n	8002baa <_vsnprintf+0x76a>
            out(' ', buffer, idx++, maxlen);
 8002b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b9c:	1c53      	adds	r3, r2, #1
 8002b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002ba0:	68fc      	ldr	r4, [r7, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	2020      	movs	r0, #32
 8002ba8:	47a0      	blx	r4
          while (l++ < width) {
 8002baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d8f1      	bhi.n	8002b9a <_vsnprintf+0x75a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8002bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bb8:	1d1a      	adds	r2, r3, #4
 8002bba:	66ba      	str	r2, [r7, #104]	; 0x68
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	b2d8      	uxtb	r0, r3
 8002bc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bc2:	1c53      	adds	r3, r2, #1
 8002bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8002bc6:	68fc      	ldr	r4, [r7, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8002bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00e      	beq.n	8002bf6 <_vsnprintf+0x7b6>
          while (l++ < width) {
 8002bd8:	e007      	b.n	8002bea <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 8002bda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bdc:	1c53      	adds	r3, r2, #1
 8002bde:	647b      	str	r3, [r7, #68]	; 0x44
 8002be0:	68fc      	ldr	r4, [r7, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	2020      	movs	r0, #32
 8002be8:	47a0      	blx	r4
          while (l++ < width) {
 8002bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d8f1      	bhi.n	8002bda <_vsnprintf+0x79a>
          }
        }
        format++;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	603b      	str	r3, [r7, #0]
        break;
 8002bfc:	e0c1      	b.n	8002d82 <_vsnprintf+0x942>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8002bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c00:	1d1a      	adds	r2, r3, #4
 8002c02:	66ba      	str	r2, [r7, #104]	; 0x68
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8002c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <_vsnprintf+0x7d2>
 8002c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c10:	e001      	b.n	8002c16 <_vsnprintf+0x7d6>
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295
 8002c16:	4619      	mov	r1, r3
 8002c18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c1a:	f7fe fcc6 	bl	80015aa <_strnlen_s>
 8002c1e:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8002c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <_vsnprintf+0x7f6>
          l = (l < precision ? l : precision);
 8002c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	bf28      	it	cs
 8002c32:	4613      	movcs	r3, r2
 8002c34:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8002c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d11a      	bne.n	8002c76 <_vsnprintf+0x836>
          while (l++ < width) {
 8002c40:	e007      	b.n	8002c52 <_vsnprintf+0x812>
            out(' ', buffer, idx++, maxlen);
 8002c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c44:	1c53      	adds	r3, r2, #1
 8002c46:	647b      	str	r3, [r7, #68]	; 0x44
 8002c48:	68fc      	ldr	r4, [r7, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	2020      	movs	r0, #32
 8002c50:	47a0      	blx	r4
          while (l++ < width) {
 8002c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	637a      	str	r2, [r7, #52]	; 0x34
 8002c58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d8f1      	bhi.n	8002c42 <_vsnprintf+0x802>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002c5e:	e00a      	b.n	8002c76 <_vsnprintf+0x836>
          out(*(p++), buffer, idx++, maxlen);
 8002c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c66:	7818      	ldrb	r0, [r3, #0]
 8002c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c6a:	1c53      	adds	r3, r2, #1
 8002c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c6e:	68fc      	ldr	r4, [r7, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <_vsnprintf+0x852>
 8002c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0eb      	beq.n	8002c60 <_vsnprintf+0x820>
 8002c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8a:	1e5a      	subs	r2, r3, #1
 8002c8c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1e6      	bne.n	8002c60 <_vsnprintf+0x820>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8002c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00e      	beq.n	8002cba <_vsnprintf+0x87a>
          while (l++ < width) {
 8002c9c:	e007      	b.n	8002cae <_vsnprintf+0x86e>
            out(' ', buffer, idx++, maxlen);
 8002c9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ca0:	1c53      	adds	r3, r2, #1
 8002ca2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca4:	68fc      	ldr	r4, [r7, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	2020      	movs	r0, #32
 8002cac:	47a0      	blx	r4
          while (l++ < width) {
 8002cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	637a      	str	r2, [r7, #52]	; 0x34
 8002cb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d8f1      	bhi.n	8002c9e <_vsnprintf+0x85e>
          }
        }
        format++;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	603b      	str	r3, [r7, #0]
        break;
 8002cc0:	e05f      	b.n	8002d82 <_vsnprintf+0x942>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8002cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8002ccc:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 8002cd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01e      	beq.n	8002d1a <_vsnprintf+0x8da>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8002cdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cde:	1d1a      	adds	r2, r3, #4
 8002ce0:	66ba      	str	r2, [r7, #104]	; 0x68
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cec:	9108      	str	r1, [sp, #32]
 8002cee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002cf0:	9107      	str	r1, [sp, #28]
 8002cf2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002cf4:	9106      	str	r1, [sp, #24]
 8002cf6:	f04f 0010 	mov.w	r0, #16
 8002cfa:	f04f 0100 	mov.w	r1, #0
 8002cfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002d02:	2100      	movs	r1, #0
 8002d04:	9102      	str	r1, [sp, #8]
 8002d06:	e9cd 2300 	strd	r2, r3, [sp]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d0e:	68b9      	ldr	r1, [r7, #8]
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f7fe fe35 	bl	8001980 <_ntoa_long_long>
 8002d16:	6478      	str	r0, [r7, #68]	; 0x44
 8002d18:	e016      	b.n	8002d48 <_vsnprintf+0x908>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8002d1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d1c:	1d1a      	adds	r2, r3, #4
 8002d1e:	66ba      	str	r2, [r7, #104]	; 0x68
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d26:	9305      	str	r3, [sp, #20]
 8002d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d2a:	9304      	str	r3, [sp, #16]
 8002d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d2e:	9303      	str	r3, [sp, #12]
 8002d30:	2310      	movs	r3, #16
 8002d32:	9302      	str	r3, [sp, #8]
 8002d34:	2300      	movs	r3, #0
 8002d36:	9301      	str	r3, [sp, #4]
 8002d38:	9200      	str	r2, [sp, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7fe fdb6 	bl	80018b2 <_ntoa_long>
 8002d46:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	603b      	str	r3, [r7, #0]
        break;
 8002d4e:	e018      	b.n	8002d82 <_vsnprintf+0x942>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8002d50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d52:	1c53      	adds	r3, r2, #1
 8002d54:	647b      	str	r3, [r7, #68]	; 0x44
 8002d56:	68fc      	ldr	r4, [r7, #12]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	2025      	movs	r0, #37	; 0x25
 8002d5e:	47a0      	blx	r4
        format++;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	3301      	adds	r3, #1
 8002d64:	603b      	str	r3, [r7, #0]
        break;
 8002d66:	e00c      	b.n	8002d82 <_vsnprintf+0x942>

      default :
        out(*format, buffer, idx++, maxlen);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	7818      	ldrb	r0, [r3, #0]
 8002d6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d6e:	1c53      	adds	r3, r2, #1
 8002d70:	647b      	str	r3, [r7, #68]	; 0x44
 8002d72:	68fc      	ldr	r4, [r7, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68b9      	ldr	r1, [r7, #8]
 8002d78:	47a0      	blx	r4
        format++;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	603b      	str	r3, [r7, #0]
        break;
 8002d80:	bf00      	nop
  while (*format)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f47f ab6b 	bne.w	8002462 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8002d8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d302      	bcc.n	8002d9a <_vsnprintf+0x95a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	1e5a      	subs	r2, r3, #1
 8002d98:	e000      	b.n	8002d9c <_vsnprintf+0x95c>
 8002d9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d9c:	68fc      	ldr	r4, [r7, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	2000      	movs	r0, #0
 8002da4:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8002da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3758      	adds	r7, #88	; 0x58
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bdb0      	pop	{r4, r5, r7, pc}

08002db0 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8002db0:	b40f      	push	{r0, r1, r2, r3}
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8002db8:	f107 031c 	add.w	r3, r7, #28
 8002dbc:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8002dbe:	1d39      	adds	r1, r7, #4
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dca:	4806      	ldr	r0, [pc, #24]	; (8002de4 <printf_+0x34>)
 8002dcc:	f7ff fb38 	bl	8002440 <_vsnprintf>
 8002dd0:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dde:	b004      	add	sp, #16
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	08001585 	.word	0x08001585

08002de8 <snprintf_>:
  return ret;
}


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 8002de8:	b40c      	push	{r2, r3}
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b086      	sub	sp, #24
 8002dee:	af02      	add	r7, sp, #8
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
  va_list va;
  va_start(va, format);
 8002df4:	f107 031c 	add.w	r3, r7, #28
 8002df8:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4805      	ldr	r0, [pc, #20]	; (8002e1c <snprintf_+0x34>)
 8002e06:	f7ff fb1b 	bl	8002440 <_vsnprintf>
 8002e0a:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e18:	b002      	add	sp, #8
 8002e1a:	4770      	bx	lr
 8002e1c:	0800153b 	.word	0x0800153b

08002e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e26:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2a:	4a10      	ldr	r2, [pc, #64]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	6613      	str	r3, [r2, #96]	; 0x60
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	607b      	str	r3, [r7, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e42:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	6593      	str	r3, [r2, #88]	; 0x58
 8002e4a:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e56:	2200      	movs	r2, #0
 8002e58:	210f      	movs	r1, #15
 8002e5a:	f06f 0001 	mvn.w	r0, #1
 8002e5e:	f000 fa13 	bl	8003288 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000

08002e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	; 0x28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a17      	ldr	r2, [pc, #92]	; (8002eec <HAL_UART_MspInit+0x7c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d128      	bne.n	8002ee4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e92:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <HAL_UART_MspInit+0x80>)
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	4a16      	ldr	r2, [pc, #88]	; (8002ef0 <HAL_UART_MspInit+0x80>)
 8002e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e9e:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <HAL_UART_MspInit+0x80>)
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eaa:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <HAL_UART_MspInit+0x80>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	4a10      	ldr	r2, [pc, #64]	; (8002ef0 <HAL_UART_MspInit+0x80>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <HAL_UART_MspInit+0x80>)
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ec2:	230c      	movs	r3, #12
 8002ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ed2:	2307      	movs	r3, #7
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed6:	f107 0314 	add.w	r3, r7, #20
 8002eda:	4619      	mov	r1, r3
 8002edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ee0:	f000 f9fc 	bl	80032dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ee4:	bf00      	nop
 8002ee6:	3728      	adds	r7, #40	; 0x28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40004400 	.word	0x40004400
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08c      	sub	sp, #48	; 0x30
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8002f04:	2200      	movs	r2, #0
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	2037      	movs	r0, #55	; 0x37
 8002f0a:	f000 f9bd 	bl	8003288 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002f0e:	2037      	movs	r0, #55	; 0x37
 8002f10:	f000 f9d6 	bl	80032c0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002f14:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <HAL_InitTick+0x9c>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f18:	4a1d      	ldr	r2, [pc, #116]	; (8002f90 <HAL_InitTick+0x9c>)
 8002f1a:	f043 0320 	orr.w	r3, r3, #32
 8002f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f20:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <HAL_InitTick+0x9c>)
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f2c:	f107 0210 	add.w	r2, r7, #16
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f001 f982 	bl	8004240 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002f3c:	f001 f954 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 8002f40:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f44:	4a13      	ldr	r2, [pc, #76]	; (8002f94 <HAL_InitTick+0xa0>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	0c9b      	lsrs	r3, r3, #18
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002f50:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <HAL_InitTick+0xa4>)
 8002f52:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <HAL_InitTick+0xa8>)
 8002f54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <HAL_InitTick+0xa4>)
 8002f58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f5c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <HAL_InitTick+0xa4>)
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <HAL_InitTick+0xa4>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <HAL_InitTick+0xa4>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002f70:	4809      	ldr	r0, [pc, #36]	; (8002f98 <HAL_InitTick+0xa4>)
 8002f72:	f001 feb3 	bl	8004cdc <HAL_TIM_Base_Init>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d104      	bne.n	8002f86 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002f7c:	4806      	ldr	r0, [pc, #24]	; (8002f98 <HAL_InitTick+0xa4>)
 8002f7e:	f001 ff0f 	bl	8004da0 <HAL_TIM_Base_Start_IT>
 8002f82:	4603      	mov	r3, r0
 8002f84:	e000      	b.n	8002f88 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3730      	adds	r7, #48	; 0x30
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40021000 	.word	0x40021000
 8002f94:	431bde83 	.word	0x431bde83
 8002f98:	20003520 	.word	0x20003520
 8002f9c:	40001400 	.word	0x40001400

08002fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fa4:	e7fe      	b.n	8002fa4 <NMI_Handler+0x4>

08002fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002faa:	e7fe      	b.n	8002faa <HardFault_Handler+0x4>

08002fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fb0:	e7fe      	b.n	8002fb0 <MemManage_Handler+0x4>

08002fb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fb6:	e7fe      	b.n	8002fb6 <BusFault_Handler+0x4>

08002fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fbc:	e7fe      	b.n	8002fbc <UsageFault_Handler+0x4>

08002fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002fd0:	4802      	ldr	r0, [pc, #8]	; (8002fdc <TIM7_IRQHandler+0x10>)
 8002fd2:	f001 ff55 	bl	8004e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20003520 	.word	0x20003520

08002fe0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002fe4:	4b15      	ldr	r3, [pc, #84]	; (800303c <SystemInit+0x5c>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fea:	4a14      	ldr	r2, [pc, #80]	; (800303c <SystemInit+0x5c>)
 8002fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <SystemInit+0x60>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a11      	ldr	r2, [pc, #68]	; (8003040 <SystemInit+0x60>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <SystemInit+0x60>)
 8003002:	2200      	movs	r2, #0
 8003004:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003006:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <SystemInit+0x60>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a0d      	ldr	r2, [pc, #52]	; (8003040 <SystemInit+0x60>)
 800300c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003010:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003014:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <SystemInit+0x60>)
 8003018:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800301c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <SystemInit+0x60>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a07      	ldr	r2, [pc, #28]	; (8003040 <SystemInit+0x60>)
 8003024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003028:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800302a:	4b05      	ldr	r3, [pc, #20]	; (8003040 <SystemInit+0x60>)
 800302c:	2200      	movs	r2, #0
 800302e:	619a      	str	r2, [r3, #24]
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	e000ed00 	.word	0xe000ed00
 8003040:	40021000 	.word	0x40021000

08003044 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800307c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003048:	f7ff ffca 	bl	8002fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800304c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800304e:	e003      	b.n	8003058 <LoopCopyDataInit>

08003050 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003052:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003054:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003056:	3104      	adds	r1, #4

08003058 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003058:	480a      	ldr	r0, [pc, #40]	; (8003084 <LoopForever+0xa>)
	ldr	r3, =_edata
 800305a:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <LoopForever+0xe>)
	adds	r2, r0, r1
 800305c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800305e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003060:	d3f6      	bcc.n	8003050 <CopyDataInit>
	ldr	r2, =_sbss
 8003062:	4a0a      	ldr	r2, [pc, #40]	; (800308c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003064:	e002      	b.n	800306c <LoopFillZerobss>

08003066 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003066:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003068:	f842 3b04 	str.w	r3, [r2], #4

0800306c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <LoopForever+0x16>)
	cmp	r2, r3
 800306e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003070:	d3f9      	bcc.n	8003066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003072:	f005 fd5b 	bl	8008b2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003076:	f7fe f8ed 	bl	8001254 <main>

0800307a <LoopForever>:

LoopForever:
    b LoopForever
 800307a:	e7fe      	b.n	800307a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800307c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003080:	08008de8 	.word	0x08008de8
	ldr	r0, =_sdata
 8003084:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003088:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 800308c:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8003090:	200035b0 	.word	0x200035b0

08003094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003094:	e7fe      	b.n	8003094 <ADC1_2_IRQHandler>
	...

08003098 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030a2:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <HAL_Init+0x3c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <HAL_Init+0x3c>)
 80030a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ae:	2003      	movs	r0, #3
 80030b0:	f000 f8df 	bl	8003272 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030b4:	2000      	movs	r0, #0
 80030b6:	f7ff ff1d 	bl	8002ef4 <HAL_InitTick>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	71fb      	strb	r3, [r7, #7]
 80030c4:	e001      	b.n	80030ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030c6:	f7ff feab 	bl	8002e20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030ca:	79fb      	ldrb	r3, [r7, #7]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40022000 	.word	0x40022000

080030d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_IncTick+0x20>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_IncTick+0x24>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	4a04      	ldr	r2, [pc, #16]	; (80030fc <HAL_IncTick+0x24>)
 80030ea:	6013      	str	r3, [r2, #0]
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000010 	.word	0x20000010
 80030fc:	2000356c 	.word	0x2000356c

08003100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return uwTick;
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <HAL_GetTick+0x14>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	2000356c 	.word	0x2000356c

08003118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <__NVIC_SetPriorityGrouping+0x44>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003134:	4013      	ands	r3, r2
 8003136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800314a:	4a04      	ldr	r2, [pc, #16]	; (800315c <__NVIC_SetPriorityGrouping+0x44>)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	60d3      	str	r3, [r2, #12]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003164:	4b04      	ldr	r3, [pc, #16]	; (8003178 <__NVIC_GetPriorityGrouping+0x18>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	f003 0307 	and.w	r3, r3, #7
}
 800316e:	4618      	mov	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	2b00      	cmp	r3, #0
 800318c:	db0b      	blt.n	80031a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	f003 021f 	and.w	r2, r3, #31
 8003194:	4907      	ldr	r1, [pc, #28]	; (80031b4 <__NVIC_EnableIRQ+0x38>)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2001      	movs	r0, #1
 800319e:	fa00 f202 	lsl.w	r2, r0, r2
 80031a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	e000e100 	.word	0xe000e100

080031b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	6039      	str	r1, [r7, #0]
 80031c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	db0a      	blt.n	80031e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	490c      	ldr	r1, [pc, #48]	; (8003204 <__NVIC_SetPriority+0x4c>)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	0112      	lsls	r2, r2, #4
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	440b      	add	r3, r1
 80031dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e0:	e00a      	b.n	80031f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4908      	ldr	r1, [pc, #32]	; (8003208 <__NVIC_SetPriority+0x50>)
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	3b04      	subs	r3, #4
 80031f0:	0112      	lsls	r2, r2, #4
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	440b      	add	r3, r1
 80031f6:	761a      	strb	r2, [r3, #24]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000e100 	.word	0xe000e100
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800320c:	b480      	push	{r7}
 800320e:	b089      	sub	sp, #36	; 0x24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f1c3 0307 	rsb	r3, r3, #7
 8003226:	2b04      	cmp	r3, #4
 8003228:	bf28      	it	cs
 800322a:	2304      	movcs	r3, #4
 800322c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3304      	adds	r3, #4
 8003232:	2b06      	cmp	r3, #6
 8003234:	d902      	bls.n	800323c <NVIC_EncodePriority+0x30>
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	3b03      	subs	r3, #3
 800323a:	e000      	b.n	800323e <NVIC_EncodePriority+0x32>
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003240:	f04f 32ff 	mov.w	r2, #4294967295
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43da      	mvns	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	401a      	ands	r2, r3
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003254:	f04f 31ff 	mov.w	r1, #4294967295
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	fa01 f303 	lsl.w	r3, r1, r3
 800325e:	43d9      	mvns	r1, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003264:	4313      	orrs	r3, r2
         );
}
 8003266:	4618      	mov	r0, r3
 8003268:	3724      	adds	r7, #36	; 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff ff4c 	bl	8003118 <__NVIC_SetPriorityGrouping>
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800329a:	f7ff ff61 	bl	8003160 <__NVIC_GetPriorityGrouping>
 800329e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	6978      	ldr	r0, [r7, #20]
 80032a6:	f7ff ffb1 	bl	800320c <NVIC_EncodePriority>
 80032aa:	4602      	mov	r2, r0
 80032ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff ff80 	bl	80031b8 <__NVIC_SetPriority>
}
 80032b8:	bf00      	nop
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff ff54 	bl	800317c <__NVIC_EnableIRQ>
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ea:	e17f      	b.n	80035ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	2101      	movs	r1, #1
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	fa01 f303 	lsl.w	r3, r1, r3
 80032f8:	4013      	ands	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8171 	beq.w	80035e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d00b      	beq.n	8003324 <HAL_GPIO_Init+0x48>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d007      	beq.n	8003324 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003318:	2b11      	cmp	r3, #17
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b12      	cmp	r3, #18
 8003322:	d130      	bne.n	8003386 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2203      	movs	r2, #3
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800335a:	2201      	movs	r2, #1
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4013      	ands	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	f003 0201 	and.w	r2, r3, #1
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b03      	cmp	r3, #3
 8003390:	d118      	bne.n	80033c4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003398:	2201      	movs	r2, #1
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	08db      	lsrs	r3, r3, #3
 80033ae:	f003 0201 	and.w	r2, r3, #1
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	2203      	movs	r2, #3
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d003      	beq.n	8003404 <HAL_GPIO_Init+0x128>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b12      	cmp	r3, #18
 8003402:	d123      	bne.n	800344c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	08da      	lsrs	r2, r3, #3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3208      	adds	r2, #8
 800340c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003410:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	220f      	movs	r2, #15
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	08da      	lsrs	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3208      	adds	r2, #8
 8003446:	6939      	ldr	r1, [r7, #16]
 8003448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	2203      	movs	r2, #3
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4013      	ands	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0203 	and.w	r2, r3, #3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80ac 	beq.w	80035e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348e:	4b5f      	ldr	r3, [pc, #380]	; (800360c <HAL_GPIO_Init+0x330>)
 8003490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003492:	4a5e      	ldr	r2, [pc, #376]	; (800360c <HAL_GPIO_Init+0x330>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	6613      	str	r3, [r2, #96]	; 0x60
 800349a:	4b5c      	ldr	r3, [pc, #368]	; (800360c <HAL_GPIO_Init+0x330>)
 800349c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034a6:	4a5a      	ldr	r2, [pc, #360]	; (8003610 <HAL_GPIO_Init+0x334>)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	089b      	lsrs	r3, r3, #2
 80034ac:	3302      	adds	r3, #2
 80034ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	220f      	movs	r2, #15
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4013      	ands	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034d0:	d025      	beq.n	800351e <HAL_GPIO_Init+0x242>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a4f      	ldr	r2, [pc, #316]	; (8003614 <HAL_GPIO_Init+0x338>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01f      	beq.n	800351a <HAL_GPIO_Init+0x23e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a4e      	ldr	r2, [pc, #312]	; (8003618 <HAL_GPIO_Init+0x33c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d019      	beq.n	8003516 <HAL_GPIO_Init+0x23a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a4d      	ldr	r2, [pc, #308]	; (800361c <HAL_GPIO_Init+0x340>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d013      	beq.n	8003512 <HAL_GPIO_Init+0x236>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a4c      	ldr	r2, [pc, #304]	; (8003620 <HAL_GPIO_Init+0x344>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00d      	beq.n	800350e <HAL_GPIO_Init+0x232>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a4b      	ldr	r2, [pc, #300]	; (8003624 <HAL_GPIO_Init+0x348>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d007      	beq.n	800350a <HAL_GPIO_Init+0x22e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a4a      	ldr	r2, [pc, #296]	; (8003628 <HAL_GPIO_Init+0x34c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d101      	bne.n	8003506 <HAL_GPIO_Init+0x22a>
 8003502:	2306      	movs	r3, #6
 8003504:	e00c      	b.n	8003520 <HAL_GPIO_Init+0x244>
 8003506:	2307      	movs	r3, #7
 8003508:	e00a      	b.n	8003520 <HAL_GPIO_Init+0x244>
 800350a:	2305      	movs	r3, #5
 800350c:	e008      	b.n	8003520 <HAL_GPIO_Init+0x244>
 800350e:	2304      	movs	r3, #4
 8003510:	e006      	b.n	8003520 <HAL_GPIO_Init+0x244>
 8003512:	2303      	movs	r3, #3
 8003514:	e004      	b.n	8003520 <HAL_GPIO_Init+0x244>
 8003516:	2302      	movs	r3, #2
 8003518:	e002      	b.n	8003520 <HAL_GPIO_Init+0x244>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_GPIO_Init+0x244>
 800351e:	2300      	movs	r3, #0
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	f002 0203 	and.w	r2, r2, #3
 8003526:	0092      	lsls	r2, r2, #2
 8003528:	4093      	lsls	r3, r2
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003530:	4937      	ldr	r1, [pc, #220]	; (8003610 <HAL_GPIO_Init+0x334>)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	089b      	lsrs	r3, r3, #2
 8003536:	3302      	adds	r3, #2
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800353e:	4b3b      	ldr	r3, [pc, #236]	; (800362c <HAL_GPIO_Init+0x350>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	43db      	mvns	r3, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003562:	4a32      	ldr	r2, [pc, #200]	; (800362c <HAL_GPIO_Init+0x350>)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003568:	4b30      	ldr	r3, [pc, #192]	; (800362c <HAL_GPIO_Init+0x350>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	43db      	mvns	r3, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800358c:	4a27      	ldr	r2, [pc, #156]	; (800362c <HAL_GPIO_Init+0x350>)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003592:	4b26      	ldr	r3, [pc, #152]	; (800362c <HAL_GPIO_Init+0x350>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	43db      	mvns	r3, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035b6:	4a1d      	ldr	r2, [pc, #116]	; (800362c <HAL_GPIO_Init+0x350>)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <HAL_GPIO_Init+0x350>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035e0:	4a12      	ldr	r2, [pc, #72]	; (800362c <HAL_GPIO_Init+0x350>)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	3301      	adds	r3, #1
 80035ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	fa22 f303 	lsr.w	r3, r2, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f47f ae78 	bne.w	80032ec <HAL_GPIO_Init+0x10>
  }
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40021000 	.word	0x40021000
 8003610:	40010000 	.word	0x40010000
 8003614:	48000400 	.word	0x48000400
 8003618:	48000800 	.word	0x48000800
 800361c:	48000c00 	.word	0x48000c00
 8003620:	48001000 	.word	0x48001000
 8003624:	48001400 	.word	0x48001400
 8003628:	48001800 	.word	0x48001800
 800362c:	40010400 	.word	0x40010400

08003630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	807b      	strh	r3, [r7, #2]
 800363c:	4613      	mov	r3, r2
 800363e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003640:	787b      	ldrb	r3, [r7, #1]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003646:	887a      	ldrh	r2, [r7, #2]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800364c:	e002      	b.n	8003654 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800364e:	887a      	ldrh	r2, [r7, #2]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003664:	4b04      	ldr	r3, [pc, #16]	; (8003678 <HAL_PWREx_GetVoltageRange+0x18>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800366c:	4618      	mov	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40007000 	.word	0x40007000

0800367c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368a:	d130      	bne.n	80036ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800368c:	4b23      	ldr	r3, [pc, #140]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003698:	d038      	beq.n	800370c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800369a:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036a2:	4a1e      	ldr	r2, [pc, #120]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036aa:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2232      	movs	r2, #50	; 0x32
 80036b0:	fb02 f303 	mul.w	r3, r2, r3
 80036b4:	4a1b      	ldr	r2, [pc, #108]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	0c9b      	lsrs	r3, r3, #18
 80036bc:	3301      	adds	r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036c0:	e002      	b.n	80036c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036c8:	4b14      	ldr	r3, [pc, #80]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d4:	d102      	bne.n	80036dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f2      	bne.n	80036c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036dc:	4b0f      	ldr	r3, [pc, #60]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e8:	d110      	bne.n	800370c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e00f      	b.n	800370e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fa:	d007      	beq.n	800370c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036fc:	4b07      	ldr	r3, [pc, #28]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003704:	4a05      	ldr	r2, [pc, #20]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800370a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40007000 	.word	0x40007000
 8003720:	20000008 	.word	0x20000008
 8003724:	431bde83 	.word	0x431bde83

08003728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e3d4      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800373a:	4ba1      	ldr	r3, [pc, #644]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003744:	4b9e      	ldr	r3, [pc, #632]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80e4 	beq.w	8003924 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <HAL_RCC_OscConfig+0x4a>
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	2b0c      	cmp	r3, #12
 8003766:	f040 808b 	bne.w	8003880 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b01      	cmp	r3, #1
 800376e:	f040 8087 	bne.w	8003880 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003772:	4b93      	ldr	r3, [pc, #588]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_RCC_OscConfig+0x62>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e3ac      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1a      	ldr	r2, [r3, #32]
 800378e:	4b8c      	ldr	r3, [pc, #560]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d004      	beq.n	80037a4 <HAL_RCC_OscConfig+0x7c>
 800379a:	4b89      	ldr	r3, [pc, #548]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a2:	e005      	b.n	80037b0 <HAL_RCC_OscConfig+0x88>
 80037a4:	4b86      	ldr	r3, [pc, #536]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80037a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037aa:	091b      	lsrs	r3, r3, #4
 80037ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d223      	bcs.n	80037fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fd73 	bl	80042a4 <RCC_SetFlashLatencyFromMSIRange>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e38d      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037c8:	4b7d      	ldr	r3, [pc, #500]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a7c      	ldr	r2, [pc, #496]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80037ce:	f043 0308 	orr.w	r3, r3, #8
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	4b7a      	ldr	r3, [pc, #488]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	4977      	ldr	r1, [pc, #476]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037e6:	4b76      	ldr	r3, [pc, #472]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	4972      	ldr	r1, [pc, #456]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	604b      	str	r3, [r1, #4]
 80037fa:	e025      	b.n	8003848 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037fc:	4b70      	ldr	r3, [pc, #448]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a6f      	ldr	r2, [pc, #444]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 8003802:	f043 0308 	orr.w	r3, r3, #8
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	4b6d      	ldr	r3, [pc, #436]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	496a      	ldr	r1, [pc, #424]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800381a:	4b69      	ldr	r3, [pc, #420]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	4965      	ldr	r1, [pc, #404]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 800382a:	4313      	orrs	r3, r2
 800382c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fd33 	bl	80042a4 <RCC_SetFlashLatencyFromMSIRange>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e34d      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003848:	f000 fc36 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b5c      	ldr	r3, [pc, #368]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	495a      	ldr	r1, [pc, #360]	; (80039c4 <HAL_RCC_OscConfig+0x29c>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
 8003864:	4a58      	ldr	r2, [pc, #352]	; (80039c8 <HAL_RCC_OscConfig+0x2a0>)
 8003866:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003868:	4b58      	ldr	r3, [pc, #352]	; (80039cc <HAL_RCC_OscConfig+0x2a4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fb41 	bl	8002ef4 <HAL_InitTick>
 8003872:	4603      	mov	r3, r0
 8003874:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d052      	beq.n	8003922 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	e331      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d032      	beq.n	80038ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003888:	4b4d      	ldr	r3, [pc, #308]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a4c      	ldr	r2, [pc, #304]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003894:	f7ff fc34 	bl	8003100 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800389c:	f7ff fc30 	bl	8003100 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e31a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038ae:	4b44      	ldr	r3, [pc, #272]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ba:	4b41      	ldr	r3, [pc, #260]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a40      	ldr	r2, [pc, #256]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80038c0:	f043 0308 	orr.w	r3, r3, #8
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	4b3e      	ldr	r3, [pc, #248]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	493b      	ldr	r1, [pc, #236]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038d8:	4b39      	ldr	r3, [pc, #228]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	4936      	ldr	r1, [pc, #216]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	604b      	str	r3, [r1, #4]
 80038ec:	e01a      	b.n	8003924 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038ee:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a33      	ldr	r2, [pc, #204]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038fa:	f7ff fc01 	bl	8003100 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003902:	f7ff fbfd 	bl	8003100 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e2e7      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003914:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f0      	bne.n	8003902 <HAL_RCC_OscConfig+0x1da>
 8003920:	e000      	b.n	8003924 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003922:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d074      	beq.n	8003a1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b08      	cmp	r3, #8
 8003934:	d005      	beq.n	8003942 <HAL_RCC_OscConfig+0x21a>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b0c      	cmp	r3, #12
 800393a:	d10e      	bne.n	800395a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2b03      	cmp	r3, #3
 8003940:	d10b      	bne.n	800395a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003942:	4b1f      	ldr	r3, [pc, #124]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d064      	beq.n	8003a18 <HAL_RCC_OscConfig+0x2f0>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d160      	bne.n	8003a18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e2c4      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003962:	d106      	bne.n	8003972 <HAL_RCC_OscConfig+0x24a>
 8003964:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a15      	ldr	r2, [pc, #84]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 800396a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	e01d      	b.n	80039ae <HAL_RCC_OscConfig+0x286>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800397a:	d10c      	bne.n	8003996 <HAL_RCC_OscConfig+0x26e>
 800397c:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a0f      	ldr	r2, [pc, #60]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 8003982:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0c      	ldr	r2, [pc, #48]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 800398e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	e00b      	b.n	80039ae <HAL_RCC_OscConfig+0x286>
 8003996:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a09      	ldr	r2, [pc, #36]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 800399c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a06      	ldr	r2, [pc, #24]	; (80039c0 <HAL_RCC_OscConfig+0x298>)
 80039a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01c      	beq.n	80039f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7ff fba3 	bl	8003100 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039bc:	e011      	b.n	80039e2 <HAL_RCC_OscConfig+0x2ba>
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000
 80039c4:	08008d90 	.word	0x08008d90
 80039c8:	20000008 	.word	0x20000008
 80039cc:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d0:	f7ff fb96 	bl	8003100 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b64      	cmp	r3, #100	; 0x64
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e280      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039e2:	4baf      	ldr	r3, [pc, #700]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0x2a8>
 80039ee:	e014      	b.n	8003a1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7ff fb86 	bl	8003100 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f8:	f7ff fb82 	bl	8003100 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	; 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e26c      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a0a:	4ba5      	ldr	r3, [pc, #660]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x2d0>
 8003a16:	e000      	b.n	8003a1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d060      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_OscConfig+0x310>
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2b0c      	cmp	r3, #12
 8003a30:	d119      	bne.n	8003a66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d116      	bne.n	8003a66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a38:	4b99      	ldr	r3, [pc, #612]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_OscConfig+0x328>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e249      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a50:	4b93      	ldr	r3, [pc, #588]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	061b      	lsls	r3, r3, #24
 8003a5e:	4990      	ldr	r1, [pc, #576]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a64:	e040      	b.n	8003ae8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d023      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a6e:	4b8c      	ldr	r3, [pc, #560]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a8b      	ldr	r2, [pc, #556]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7a:	f7ff fb41 	bl	8003100 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a82:	f7ff fb3d 	bl	8003100 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e227      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a94:	4b82      	ldr	r3, [pc, #520]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa0:	4b7f      	ldr	r3, [pc, #508]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	497c      	ldr	r1, [pc, #496]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
 8003ab4:	e018      	b.n	8003ae8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ab6:	4b7a      	ldr	r3, [pc, #488]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a79      	ldr	r2, [pc, #484]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac2:	f7ff fb1d 	bl	8003100 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aca:	f7ff fb19 	bl	8003100 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e203      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003adc:	4b70      	ldr	r3, [pc, #448]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1f0      	bne.n	8003aca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d03c      	beq.n	8003b6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01c      	beq.n	8003b36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afc:	4b68      	ldr	r3, [pc, #416]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b02:	4a67      	ldr	r2, [pc, #412]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0c:	f7ff faf8 	bl	8003100 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b14:	f7ff faf4 	bl	8003100 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1de      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b26:	4b5e      	ldr	r3, [pc, #376]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0ef      	beq.n	8003b14 <HAL_RCC_OscConfig+0x3ec>
 8003b34:	e01b      	b.n	8003b6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b36:	4b5a      	ldr	r3, [pc, #360]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b3c:	4a58      	ldr	r2, [pc, #352]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003b3e:	f023 0301 	bic.w	r3, r3, #1
 8003b42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b46:	f7ff fadb 	bl	8003100 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b4e:	f7ff fad7 	bl	8003100 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e1c1      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b60:	4b4f      	ldr	r3, [pc, #316]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1ef      	bne.n	8003b4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 80a6 	beq.w	8003cc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b80:	4b47      	ldr	r3, [pc, #284]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10d      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8c:	4b44      	ldr	r3, [pc, #272]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	4a43      	ldr	r2, [pc, #268]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b96:	6593      	str	r3, [r2, #88]	; 0x58
 8003b98:	4b41      	ldr	r3, [pc, #260]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba8:	4b3e      	ldr	r3, [pc, #248]	; (8003ca4 <HAL_RCC_OscConfig+0x57c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d118      	bne.n	8003be6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bb4:	4b3b      	ldr	r3, [pc, #236]	; (8003ca4 <HAL_RCC_OscConfig+0x57c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a3a      	ldr	r2, [pc, #232]	; (8003ca4 <HAL_RCC_OscConfig+0x57c>)
 8003bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc0:	f7ff fa9e 	bl	8003100 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc8:	f7ff fa9a 	bl	8003100 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e184      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bda:	4b32      	ldr	r3, [pc, #200]	; (8003ca4 <HAL_RCC_OscConfig+0x57c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d108      	bne.n	8003c00 <HAL_RCC_OscConfig+0x4d8>
 8003bee:	4b2c      	ldr	r3, [pc, #176]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf4:	4a2a      	ldr	r2, [pc, #168]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bfe:	e024      	b.n	8003c4a <HAL_RCC_OscConfig+0x522>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b05      	cmp	r3, #5
 8003c06:	d110      	bne.n	8003c2a <HAL_RCC_OscConfig+0x502>
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	4a24      	ldr	r2, [pc, #144]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003c10:	f043 0304 	orr.w	r3, r3, #4
 8003c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c18:	4b21      	ldr	r3, [pc, #132]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	4a20      	ldr	r2, [pc, #128]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c28:	e00f      	b.n	8003c4a <HAL_RCC_OscConfig+0x522>
 8003c2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c30:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003c32:	f023 0301 	bic.w	r3, r3, #1
 8003c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c3a:	4b19      	ldr	r3, [pc, #100]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	4a17      	ldr	r2, [pc, #92]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003c42:	f023 0304 	bic.w	r3, r3, #4
 8003c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d016      	beq.n	8003c80 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c52:	f7ff fa55 	bl	8003100 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c58:	e00a      	b.n	8003c70 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5a:	f7ff fa51 	bl	8003100 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e139      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_RCC_OscConfig+0x578>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0ed      	beq.n	8003c5a <HAL_RCC_OscConfig+0x532>
 8003c7e:	e01a      	b.n	8003cb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7ff fa3e 	bl	8003100 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c86:	e00f      	b.n	8003ca8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f7ff fa3a 	bl	8003100 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d906      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e122      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
 8003c9e:	bf00      	nop
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ca8:	4b90      	ldr	r3, [pc, #576]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e8      	bne.n	8003c88 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cb6:	7ffb      	ldrb	r3, [r7, #31]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d105      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cbc:	4b8b      	ldr	r3, [pc, #556]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc0:	4a8a      	ldr	r2, [pc, #552]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8108 	beq.w	8003ee2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	f040 80d0 	bne.w	8003e7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003cdc:	4b83      	ldr	r3, [pc, #524]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f003 0203 	and.w	r2, r3, #3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d130      	bne.n	8003d52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d127      	bne.n	8003d52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d11f      	bne.n	8003d52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d1c:	2a07      	cmp	r2, #7
 8003d1e:	bf14      	ite	ne
 8003d20:	2201      	movne	r2, #1
 8003d22:	2200      	moveq	r2, #0
 8003d24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d113      	bne.n	8003d52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d34:	085b      	lsrs	r3, r3, #1
 8003d36:	3b01      	subs	r3, #1
 8003d38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d109      	bne.n	8003d52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	085b      	lsrs	r3, r3, #1
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d06e      	beq.n	8003e30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	2b0c      	cmp	r3, #12
 8003d56:	d069      	beq.n	8003e2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d58:	4b64      	ldr	r3, [pc, #400]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d105      	bne.n	8003d70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d64:	4b61      	ldr	r3, [pc, #388]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0b7      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d74:	4b5d      	ldr	r3, [pc, #372]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a5c      	ldr	r2, [pc, #368]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d80:	f7ff f9be 	bl	8003100 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d88:	f7ff f9ba 	bl	8003100 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e0a4      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d9a:	4b54      	ldr	r3, [pc, #336]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003da6:	4b51      	ldr	r3, [pc, #324]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	4b51      	ldr	r3, [pc, #324]	; (8003ef0 <HAL_RCC_OscConfig+0x7c8>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003db6:	3a01      	subs	r2, #1
 8003db8:	0112      	lsls	r2, r2, #4
 8003dba:	4311      	orrs	r1, r2
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dc0:	0212      	lsls	r2, r2, #8
 8003dc2:	4311      	orrs	r1, r2
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dc8:	0852      	lsrs	r2, r2, #1
 8003dca:	3a01      	subs	r2, #1
 8003dcc:	0552      	lsls	r2, r2, #21
 8003dce:	4311      	orrs	r1, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003dd4:	0852      	lsrs	r2, r2, #1
 8003dd6:	3a01      	subs	r2, #1
 8003dd8:	0652      	lsls	r2, r2, #25
 8003dda:	4311      	orrs	r1, r2
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003de0:	0912      	lsrs	r2, r2, #4
 8003de2:	0452      	lsls	r2, r2, #17
 8003de4:	430a      	orrs	r2, r1
 8003de6:	4941      	ldr	r1, [pc, #260]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003dec:	4b3f      	ldr	r3, [pc, #252]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a3e      	ldr	r2, [pc, #248]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003df8:	4b3c      	ldr	r3, [pc, #240]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4a3b      	ldr	r2, [pc, #236]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e04:	f7ff f97c 	bl	8003100 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7ff f978 	bl	8003100 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e062      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1e:	4b33      	ldr	r3, [pc, #204]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e2a:	e05a      	b.n	8003ee2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e059      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e30:	4b2e      	ldr	r3, [pc, #184]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d152      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e3c:	4b2b      	ldr	r3, [pc, #172]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a2a      	ldr	r2, [pc, #168]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e48:	4b28      	ldr	r3, [pc, #160]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a27      	ldr	r2, [pc, #156]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e54:	f7ff f954 	bl	8003100 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5c:	f7ff f950 	bl	8003100 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e03a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6e:	4b1f      	ldr	r3, [pc, #124]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0x734>
 8003e7a:	e032      	b.n	8003ee2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b0c      	cmp	r3, #12
 8003e80:	d02d      	beq.n	8003ede <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e82:	4b1a      	ldr	r3, [pc, #104]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a19      	ldr	r2, [pc, #100]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003e88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e8c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003e8e:	4b17      	ldr	r3, [pc, #92]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d105      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e9a:	4b14      	ldr	r3, [pc, #80]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	4a13      	ldr	r2, [pc, #76]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003ea0:	f023 0303 	bic.w	r3, r3, #3
 8003ea4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ea6:	4b11      	ldr	r3, [pc, #68]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	4a10      	ldr	r2, [pc, #64]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003eac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7ff f923 	bl	8003100 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebe:	f7ff f91f 	bl	8003100 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e009      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <HAL_RCC_OscConfig+0x7c4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f0      	bne.n	8003ebe <HAL_RCC_OscConfig+0x796>
 8003edc:	e001      	b.n	8003ee2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3720      	adds	r7, #32
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	f99d808c 	.word	0xf99d808c

08003ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0c8      	b.n	800409a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f08:	4b66      	ldr	r3, [pc, #408]	; (80040a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d910      	bls.n	8003f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b63      	ldr	r3, [pc, #396]	; (80040a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 0207 	bic.w	r2, r3, #7
 8003f1e:	4961      	ldr	r1, [pc, #388]	; (80040a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f26:	4b5f      	ldr	r3, [pc, #380]	; (80040a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d001      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0b0      	b.n	800409a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d04c      	beq.n	8003fde <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d107      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f4c:	4b56      	ldr	r3, [pc, #344]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d121      	bne.n	8003f9c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e09e      	b.n	800409a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d107      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f64:	4b50      	ldr	r3, [pc, #320]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d115      	bne.n	8003f9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e092      	b.n	800409a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d107      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f7c:	4b4a      	ldr	r3, [pc, #296]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d109      	bne.n	8003f9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e086      	b.n	800409a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f8c:	4b46      	ldr	r3, [pc, #280]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e07e      	b.n	800409a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f9c:	4b42      	ldr	r3, [pc, #264]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f023 0203 	bic.w	r2, r3, #3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	493f      	ldr	r1, [pc, #252]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fae:	f7ff f8a7 	bl	8003100 <HAL_GetTick>
 8003fb2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb4:	e00a      	b.n	8003fcc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb6:	f7ff f8a3 	bl	8003100 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e066      	b.n	800409a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fcc:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 020c 	and.w	r2, r3, #12
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d1eb      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fea:	4b2f      	ldr	r3, [pc, #188]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	492c      	ldr	r1, [pc, #176]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b29      	ldr	r3, [pc, #164]	; (80040a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d210      	bcs.n	800402c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b26      	ldr	r3, [pc, #152]	; (80040a4 <HAL_RCC_ClockConfig+0x1b0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 0207 	bic.w	r2, r3, #7
 8004012:	4924      	ldr	r1, [pc, #144]	; (80040a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	4313      	orrs	r3, r2
 8004018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800401a:	4b22      	ldr	r3, [pc, #136]	; (80040a4 <HAL_RCC_ClockConfig+0x1b0>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d001      	beq.n	800402c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e036      	b.n	800409a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004038:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4918      	ldr	r1, [pc, #96]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d009      	beq.n	800406a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004056:	4b14      	ldr	r3, [pc, #80]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4910      	ldr	r1, [pc, #64]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004066:	4313      	orrs	r3, r2
 8004068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800406a:	f000 f825 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 800406e:	4602      	mov	r2, r0
 8004070:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	490c      	ldr	r1, [pc, #48]	; (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 800407c:	5ccb      	ldrb	r3, [r1, r3]
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	fa22 f303 	lsr.w	r3, r2, r3
 8004086:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800408a:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe ff30 	bl	8002ef4 <HAL_InitTick>
 8004094:	4603      	mov	r3, r0
 8004096:	72fb      	strb	r3, [r7, #11]

  return status;
 8004098:	7afb      	ldrb	r3, [r7, #11]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40022000 	.word	0x40022000
 80040a8:	40021000 	.word	0x40021000
 80040ac:	08008d90 	.word	0x08008d90
 80040b0:	20000008 	.word	0x20000008
 80040b4:	2000000c 	.word	0x2000000c

080040b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b089      	sub	sp, #36	; 0x24
 80040bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	2300      	movs	r3, #0
 80040c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040c6:	4b3e      	ldr	r3, [pc, #248]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040d0:	4b3b      	ldr	r3, [pc, #236]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_GetSysClockFreq+0x34>
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	2b0c      	cmp	r3, #12
 80040e4:	d121      	bne.n	800412a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d11e      	bne.n	800412a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040ec:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d107      	bne.n	8004108 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040f8:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040fe:	0a1b      	lsrs	r3, r3, #8
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	e005      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004108:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004114:	4a2b      	ldr	r2, [pc, #172]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800411c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10d      	bne.n	8004140 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004128:	e00a      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b04      	cmp	r3, #4
 800412e:	d102      	bne.n	8004136 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004130:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004132:	61bb      	str	r3, [r7, #24]
 8004134:	e004      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b08      	cmp	r3, #8
 800413a:	d101      	bne.n	8004140 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800413c:	4b23      	ldr	r3, [pc, #140]	; (80041cc <HAL_RCC_GetSysClockFreq+0x114>)
 800413e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	2b0c      	cmp	r3, #12
 8004144:	d134      	bne.n	80041b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004146:	4b1e      	ldr	r3, [pc, #120]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d003      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0xa6>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b03      	cmp	r3, #3
 800415a:	d003      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0xac>
 800415c:	e005      	b.n	800416a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800415e:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004160:	617b      	str	r3, [r7, #20]
      break;
 8004162:	e005      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004164:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_RCC_GetSysClockFreq+0x114>)
 8004166:	617b      	str	r3, [r7, #20]
      break;
 8004168:	e002      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	617b      	str	r3, [r7, #20]
      break;
 800416e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004170:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	3301      	adds	r3, #1
 800417c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	0a1b      	lsrs	r3, r3, #8
 8004184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	fb02 f203 	mul.w	r2, r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	fbb2 f3f3 	udiv	r3, r2, r3
 8004194:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004196:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	0e5b      	lsrs	r3, r3, #25
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	3301      	adds	r3, #1
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041b0:	69bb      	ldr	r3, [r7, #24]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3724      	adds	r7, #36	; 0x24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000
 80041c4:	08008da8 	.word	0x08008da8
 80041c8:	00f42400 	.word	0x00f42400
 80041cc:	007a1200 	.word	0x007a1200

080041d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000008 	.word	0x20000008

080041e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041ec:	f7ff fff0 	bl	80041d0 <HAL_RCC_GetHCLKFreq>
 80041f0:	4602      	mov	r2, r0
 80041f2:	4b06      	ldr	r3, [pc, #24]	; (800420c <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	0a1b      	lsrs	r3, r3, #8
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	4904      	ldr	r1, [pc, #16]	; (8004210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041fe:	5ccb      	ldrb	r3, [r1, r3]
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004208:	4618      	mov	r0, r3
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40021000 	.word	0x40021000
 8004210:	08008da0 	.word	0x08008da0

08004214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004218:	f7ff ffda 	bl	80041d0 <HAL_RCC_GetHCLKFreq>
 800421c:	4602      	mov	r2, r0
 800421e:	4b06      	ldr	r3, [pc, #24]	; (8004238 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	0adb      	lsrs	r3, r3, #11
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	4904      	ldr	r1, [pc, #16]	; (800423c <HAL_RCC_GetPCLK2Freq+0x28>)
 800422a:	5ccb      	ldrb	r3, [r1, r3]
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004234:	4618      	mov	r0, r3
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40021000 	.word	0x40021000
 800423c:	08008da0 	.word	0x08008da0

08004240 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	220f      	movs	r2, #15
 800424e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004250:	4b12      	ldr	r3, [pc, #72]	; (800429c <HAL_RCC_GetClockConfig+0x5c>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 0203 	and.w	r2, r3, #3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800425c:	4b0f      	ldr	r3, [pc, #60]	; (800429c <HAL_RCC_GetClockConfig+0x5c>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004268:	4b0c      	ldr	r3, [pc, #48]	; (800429c <HAL_RCC_GetClockConfig+0x5c>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004274:	4b09      	ldr	r3, [pc, #36]	; (800429c <HAL_RCC_GetClockConfig+0x5c>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004282:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <HAL_RCC_GetClockConfig+0x60>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0207 	and.w	r2, r3, #7
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	601a      	str	r2, [r3, #0]
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40021000 	.word	0x40021000
 80042a0:	40022000 	.word	0x40022000

080042a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042ac:	2300      	movs	r3, #0
 80042ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042b0:	4b2a      	ldr	r3, [pc, #168]	; (800435c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042bc:	f7ff f9d0 	bl	8003660 <HAL_PWREx_GetVoltageRange>
 80042c0:	6178      	str	r0, [r7, #20]
 80042c2:	e014      	b.n	80042ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042c4:	4b25      	ldr	r3, [pc, #148]	; (800435c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c8:	4a24      	ldr	r2, [pc, #144]	; (800435c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ce:	6593      	str	r3, [r2, #88]	; 0x58
 80042d0:	4b22      	ldr	r3, [pc, #136]	; (800435c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042dc:	f7ff f9c0 	bl	8003660 <HAL_PWREx_GetVoltageRange>
 80042e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042e2:	4b1e      	ldr	r3, [pc, #120]	; (800435c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e6:	4a1d      	ldr	r2, [pc, #116]	; (800435c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f4:	d10b      	bne.n	800430e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b80      	cmp	r3, #128	; 0x80
 80042fa:	d919      	bls.n	8004330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2ba0      	cmp	r3, #160	; 0xa0
 8004300:	d902      	bls.n	8004308 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004302:	2302      	movs	r3, #2
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	e013      	b.n	8004330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004308:	2301      	movs	r3, #1
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	e010      	b.n	8004330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b80      	cmp	r3, #128	; 0x80
 8004312:	d902      	bls.n	800431a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004314:	2303      	movs	r3, #3
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	e00a      	b.n	8004330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b80      	cmp	r3, #128	; 0x80
 800431e:	d102      	bne.n	8004326 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004320:	2302      	movs	r3, #2
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	e004      	b.n	8004330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b70      	cmp	r3, #112	; 0x70
 800432a:	d101      	bne.n	8004330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800432c:	2301      	movs	r3, #1
 800432e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f023 0207 	bic.w	r2, r3, #7
 8004338:	4909      	ldr	r1, [pc, #36]	; (8004360 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004340:	4b07      	ldr	r3, [pc, #28]	; (8004360 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	429a      	cmp	r2, r3
 800434c:	d001      	beq.n	8004352 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40021000 	.word	0x40021000
 8004360:	40022000 	.word	0x40022000

08004364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800436c:	2300      	movs	r3, #0
 800436e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004370:	2300      	movs	r3, #0
 8004372:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800437c:	2b00      	cmp	r3, #0
 800437e:	d041      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004384:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004388:	d02a      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800438a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800438e:	d824      	bhi.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004390:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004394:	d008      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004396:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800439a:	d81e      	bhi.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00a      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80043a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a4:	d010      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043a6:	e018      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043a8:	4b86      	ldr	r3, [pc, #536]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4a85      	ldr	r2, [pc, #532]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043b4:	e015      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3304      	adds	r3, #4
 80043ba:	2100      	movs	r1, #0
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 fabb 	bl	8004938 <RCCEx_PLLSAI1_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043c6:	e00c      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3320      	adds	r3, #32
 80043cc:	2100      	movs	r1, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fba6 	bl	8004b20 <RCCEx_PLLSAI2_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043d8:	e003      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	74fb      	strb	r3, [r7, #19]
      break;
 80043de:	e000      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80043e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043e2:	7cfb      	ldrb	r3, [r7, #19]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10b      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043e8:	4b76      	ldr	r3, [pc, #472]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043f6:	4973      	ldr	r1, [pc, #460]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043fe:	e001      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d041      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004414:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004418:	d02a      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800441a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800441e:	d824      	bhi.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004420:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004424:	d008      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800442a:	d81e      	bhi.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004434:	d010      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004436:	e018      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004438:	4b62      	ldr	r3, [pc, #392]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4a61      	ldr	r2, [pc, #388]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004442:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004444:	e015      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3304      	adds	r3, #4
 800444a:	2100      	movs	r1, #0
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fa73 	bl	8004938 <RCCEx_PLLSAI1_Config>
 8004452:	4603      	mov	r3, r0
 8004454:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004456:	e00c      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3320      	adds	r3, #32
 800445c:	2100      	movs	r1, #0
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fb5e 	bl	8004b20 <RCCEx_PLLSAI2_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004468:	e003      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	74fb      	strb	r3, [r7, #19]
      break;
 800446e:	e000      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004470:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004472:	7cfb      	ldrb	r3, [r7, #19]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10b      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004478:	4b52      	ldr	r3, [pc, #328]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004486:	494f      	ldr	r1, [pc, #316]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800448e:	e001      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004490:	7cfb      	ldrb	r3, [r7, #19]
 8004492:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 80a0 	beq.w	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044a2:	2300      	movs	r3, #0
 80044a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044a6:	4b47      	ldr	r3, [pc, #284]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80044b6:	2300      	movs	r3, #0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00d      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044bc:	4b41      	ldr	r3, [pc, #260]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	4a40      	ldr	r2, [pc, #256]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c6:	6593      	str	r3, [r2, #88]	; 0x58
 80044c8:	4b3e      	ldr	r3, [pc, #248]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044d4:	2301      	movs	r3, #1
 80044d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044d8:	4b3b      	ldr	r3, [pc, #236]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a3a      	ldr	r2, [pc, #232]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044e4:	f7fe fe0c 	bl	8003100 <HAL_GetTick>
 80044e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044ea:	e009      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ec:	f7fe fe08 	bl	8003100 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d902      	bls.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	74fb      	strb	r3, [r7, #19]
        break;
 80044fe:	e005      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004500:	4b31      	ldr	r3, [pc, #196]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0ef      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800450c:	7cfb      	ldrb	r3, [r7, #19]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d15c      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004512:	4b2c      	ldr	r3, [pc, #176]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01f      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	429a      	cmp	r2, r3
 800452e:	d019      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004530:	4b24      	ldr	r3, [pc, #144]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800453a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800453c:	4b21      	ldr	r3, [pc, #132]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004542:	4a20      	ldr	r2, [pc, #128]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800454c:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800454e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004552:	4a1c      	ldr	r2, [pc, #112]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800455c:	4a19      	ldr	r2, [pc, #100]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d016      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456e:	f7fe fdc7 	bl	8003100 <HAL_GetTick>
 8004572:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004574:	e00b      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004576:	f7fe fdc3 	bl	8003100 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	f241 3288 	movw	r2, #5000	; 0x1388
 8004584:	4293      	cmp	r3, r2
 8004586:	d902      	bls.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	74fb      	strb	r3, [r7, #19]
            break;
 800458c:	e006      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800458e:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0ec      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800459c:	7cfb      	ldrb	r3, [r7, #19]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10c      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b2:	4904      	ldr	r1, [pc, #16]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045ba:	e009      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045bc:	7cfb      	ldrb	r3, [r7, #19]
 80045be:	74bb      	strb	r3, [r7, #18]
 80045c0:	e006      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045cc:	7cfb      	ldrb	r3, [r7, #19]
 80045ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045d0:	7c7b      	ldrb	r3, [r7, #17]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d105      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d6:	4b9e      	ldr	r3, [pc, #632]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045da:	4a9d      	ldr	r2, [pc, #628]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ee:	4b98      	ldr	r3, [pc, #608]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f4:	f023 0203 	bic.w	r2, r3, #3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	4994      	ldr	r1, [pc, #592]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004610:	4b8f      	ldr	r3, [pc, #572]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	f023 020c 	bic.w	r2, r3, #12
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461e:	498c      	ldr	r1, [pc, #560]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004632:	4b87      	ldr	r3, [pc, #540]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	4983      	ldr	r1, [pc, #524]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004654:	4b7e      	ldr	r3, [pc, #504]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	497b      	ldr	r1, [pc, #492]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004676:	4b76      	ldr	r3, [pc, #472]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004684:	4972      	ldr	r1, [pc, #456]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004698:	4b6d      	ldr	r3, [pc, #436]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a6:	496a      	ldr	r1, [pc, #424]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ba:	4b65      	ldr	r3, [pc, #404]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c8:	4961      	ldr	r1, [pc, #388]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046dc:	4b5c      	ldr	r3, [pc, #368]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ea:	4959      	ldr	r1, [pc, #356]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046fe:	4b54      	ldr	r3, [pc, #336]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004704:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470c:	4950      	ldr	r1, [pc, #320]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004720:	4b4b      	ldr	r3, [pc, #300]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004726:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472e:	4948      	ldr	r1, [pc, #288]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004742:	4b43      	ldr	r3, [pc, #268]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004748:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004750:	493f      	ldr	r1, [pc, #252]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d028      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004764:	4b3a      	ldr	r3, [pc, #232]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004772:	4937      	ldr	r1, [pc, #220]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800477e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004782:	d106      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004784:	4b32      	ldr	r3, [pc, #200]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4a31      	ldr	r2, [pc, #196]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800478e:	60d3      	str	r3, [r2, #12]
 8004790:	e011      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004796:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800479a:	d10c      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	2101      	movs	r1, #1
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f8c8 	bl	8004938 <RCCEx_PLLSAI1_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
 80047b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d028      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047c2:	4b23      	ldr	r3, [pc, #140]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d0:	491f      	ldr	r1, [pc, #124]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047e0:	d106      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e2:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	4a1a      	ldr	r2, [pc, #104]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ec:	60d3      	str	r3, [r2, #12]
 80047ee:	e011      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047f8:	d10c      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3304      	adds	r3, #4
 80047fe:	2101      	movs	r1, #1
 8004800:	4618      	mov	r0, r3
 8004802:	f000 f899 	bl	8004938 <RCCEx_PLLSAI1_Config>
 8004806:	4603      	mov	r3, r0
 8004808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d02b      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004826:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482e:	4908      	ldr	r1, [pc, #32]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800483e:	d109      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004840:	4b03      	ldr	r3, [pc, #12]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4a02      	ldr	r2, [pc, #8]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004846:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800484a:	60d3      	str	r3, [r2, #12]
 800484c:	e014      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800484e:	bf00      	nop
 8004850:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004858:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800485c:	d10c      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3304      	adds	r3, #4
 8004862:	2101      	movs	r1, #1
 8004864:	4618      	mov	r0, r3
 8004866:	f000 f867 	bl	8004938 <RCCEx_PLLSAI1_Config>
 800486a:	4603      	mov	r3, r0
 800486c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800486e:	7cfb      	ldrb	r3, [r7, #19]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004874:	7cfb      	ldrb	r3, [r7, #19]
 8004876:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d02f      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004884:	4b2b      	ldr	r3, [pc, #172]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004892:	4928      	ldr	r1, [pc, #160]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800489e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048a2:	d10d      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3304      	adds	r3, #4
 80048a8:	2102      	movs	r1, #2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 f844 	bl	8004938 <RCCEx_PLLSAI1_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048b4:	7cfb      	ldrb	r3, [r7, #19]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d014      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80048ba:	7cfb      	ldrb	r3, [r7, #19]
 80048bc:	74bb      	strb	r3, [r7, #18]
 80048be:	e011      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048c8:	d10c      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3320      	adds	r3, #32
 80048ce:	2102      	movs	r1, #2
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 f925 	bl	8004b20 <RCCEx_PLLSAI2_Config>
 80048d6:	4603      	mov	r3, r0
 80048d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048da:	7cfb      	ldrb	r3, [r7, #19]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048f0:	4b10      	ldr	r3, [pc, #64]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048fe:	490d      	ldr	r1, [pc, #52]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004912:	4b08      	ldr	r3, [pc, #32]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004922:	4904      	ldr	r1, [pc, #16]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800492a:	7cbb      	ldrb	r3, [r7, #18]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40021000 	.word	0x40021000

08004938 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004946:	4b75      	ldr	r3, [pc, #468]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d018      	beq.n	8004984 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004952:	4b72      	ldr	r3, [pc, #456]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 0203 	and.w	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d10d      	bne.n	800497e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
       ||
 8004966:	2b00      	cmp	r3, #0
 8004968:	d009      	beq.n	800497e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800496a:	4b6c      	ldr	r3, [pc, #432]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	091b      	lsrs	r3, r3, #4
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
       ||
 800497a:	429a      	cmp	r2, r3
 800497c:	d047      	beq.n	8004a0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
 8004982:	e044      	b.n	8004a0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b03      	cmp	r3, #3
 800498a:	d018      	beq.n	80049be <RCCEx_PLLSAI1_Config+0x86>
 800498c:	2b03      	cmp	r3, #3
 800498e:	d825      	bhi.n	80049dc <RCCEx_PLLSAI1_Config+0xa4>
 8004990:	2b01      	cmp	r3, #1
 8004992:	d002      	beq.n	800499a <RCCEx_PLLSAI1_Config+0x62>
 8004994:	2b02      	cmp	r3, #2
 8004996:	d009      	beq.n	80049ac <RCCEx_PLLSAI1_Config+0x74>
 8004998:	e020      	b.n	80049dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800499a:	4b60      	ldr	r3, [pc, #384]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d11d      	bne.n	80049e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049aa:	e01a      	b.n	80049e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049ac:	4b5b      	ldr	r3, [pc, #364]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d116      	bne.n	80049e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049bc:	e013      	b.n	80049e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049be:	4b57      	ldr	r3, [pc, #348]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10f      	bne.n	80049ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049ca:	4b54      	ldr	r3, [pc, #336]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049da:	e006      	b.n	80049ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
      break;
 80049e0:	e004      	b.n	80049ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049e2:	bf00      	nop
 80049e4:	e002      	b.n	80049ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049e6:	bf00      	nop
 80049e8:	e000      	b.n	80049ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10d      	bne.n	8004a0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049f2:	4b4a      	ldr	r3, [pc, #296]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6819      	ldr	r1, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	430b      	orrs	r3, r1
 8004a08:	4944      	ldr	r1, [pc, #272]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d17d      	bne.n	8004b10 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a14:	4b41      	ldr	r3, [pc, #260]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a40      	ldr	r2, [pc, #256]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a20:	f7fe fb6e 	bl	8003100 <HAL_GetTick>
 8004a24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a26:	e009      	b.n	8004a3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a28:	f7fe fb6a 	bl	8003100 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d902      	bls.n	8004a3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	73fb      	strb	r3, [r7, #15]
        break;
 8004a3a:	e005      	b.n	8004a48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a3c:	4b37      	ldr	r3, [pc, #220]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1ef      	bne.n	8004a28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d160      	bne.n	8004b10 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d111      	bne.n	8004a78 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a54:	4b31      	ldr	r3, [pc, #196]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6892      	ldr	r2, [r2, #8]
 8004a64:	0211      	lsls	r1, r2, #8
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	68d2      	ldr	r2, [r2, #12]
 8004a6a:	0912      	lsrs	r2, r2, #4
 8004a6c:	0452      	lsls	r2, r2, #17
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	492a      	ldr	r1, [pc, #168]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	610b      	str	r3, [r1, #16]
 8004a76:	e027      	b.n	8004ac8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d112      	bne.n	8004aa4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a7e:	4b27      	ldr	r3, [pc, #156]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6892      	ldr	r2, [r2, #8]
 8004a8e:	0211      	lsls	r1, r2, #8
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6912      	ldr	r2, [r2, #16]
 8004a94:	0852      	lsrs	r2, r2, #1
 8004a96:	3a01      	subs	r2, #1
 8004a98:	0552      	lsls	r2, r2, #21
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	491f      	ldr	r1, [pc, #124]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	610b      	str	r3, [r1, #16]
 8004aa2:	e011      	b.n	8004ac8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aa4:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004aac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6892      	ldr	r2, [r2, #8]
 8004ab4:	0211      	lsls	r1, r2, #8
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6952      	ldr	r2, [r2, #20]
 8004aba:	0852      	lsrs	r2, r2, #1
 8004abc:	3a01      	subs	r2, #1
 8004abe:	0652      	lsls	r2, r2, #25
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	4916      	ldr	r1, [pc, #88]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ac8:	4b14      	ldr	r3, [pc, #80]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a13      	ldr	r2, [pc, #76]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ace:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ad2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad4:	f7fe fb14 	bl	8003100 <HAL_GetTick>
 8004ad8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ada:	e009      	b.n	8004af0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004adc:	f7fe fb10 	bl	8003100 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d902      	bls.n	8004af0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	73fb      	strb	r3, [r7, #15]
          break;
 8004aee:	e005      	b.n	8004afc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004af0:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0ef      	beq.n	8004adc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b02:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b04:	691a      	ldr	r2, [r3, #16]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	4904      	ldr	r1, [pc, #16]	; (8004b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40021000 	.word	0x40021000

08004b20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b2e:	4b6a      	ldr	r3, [pc, #424]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d018      	beq.n	8004b6c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b3a:	4b67      	ldr	r3, [pc, #412]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f003 0203 	and.w	r2, r3, #3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d10d      	bne.n	8004b66 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
       ||
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b52:	4b61      	ldr	r3, [pc, #388]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	091b      	lsrs	r3, r3, #4
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
       ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d047      	beq.n	8004bf6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	73fb      	strb	r3, [r7, #15]
 8004b6a:	e044      	b.n	8004bf6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d018      	beq.n	8004ba6 <RCCEx_PLLSAI2_Config+0x86>
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d825      	bhi.n	8004bc4 <RCCEx_PLLSAI2_Config+0xa4>
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d002      	beq.n	8004b82 <RCCEx_PLLSAI2_Config+0x62>
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d009      	beq.n	8004b94 <RCCEx_PLLSAI2_Config+0x74>
 8004b80:	e020      	b.n	8004bc4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b82:	4b55      	ldr	r3, [pc, #340]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d11d      	bne.n	8004bca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b92:	e01a      	b.n	8004bca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b94:	4b50      	ldr	r3, [pc, #320]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d116      	bne.n	8004bce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ba4:	e013      	b.n	8004bce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ba6:	4b4c      	ldr	r3, [pc, #304]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10f      	bne.n	8004bd2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bb2:	4b49      	ldr	r3, [pc, #292]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d109      	bne.n	8004bd2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bc2:	e006      	b.n	8004bd2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc8:	e004      	b.n	8004bd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004bca:	bf00      	nop
 8004bcc:	e002      	b.n	8004bd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004bce:	bf00      	nop
 8004bd0:	e000      	b.n	8004bd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004bd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10d      	bne.n	8004bf6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bda:	4b3f      	ldr	r3, [pc, #252]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6819      	ldr	r1, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	4939      	ldr	r1, [pc, #228]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d167      	bne.n	8004ccc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bfc:	4b36      	ldr	r3, [pc, #216]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a35      	ldr	r2, [pc, #212]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c08:	f7fe fa7a 	bl	8003100 <HAL_GetTick>
 8004c0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c0e:	e009      	b.n	8004c24 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c10:	f7fe fa76 	bl	8003100 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d902      	bls.n	8004c24 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	73fb      	strb	r3, [r7, #15]
        break;
 8004c22:	e005      	b.n	8004c30 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c24:	4b2c      	ldr	r3, [pc, #176]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1ef      	bne.n	8004c10 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d14a      	bne.n	8004ccc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d111      	bne.n	8004c60 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c3c:	4b26      	ldr	r3, [pc, #152]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6892      	ldr	r2, [r2, #8]
 8004c4c:	0211      	lsls	r1, r2, #8
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	68d2      	ldr	r2, [r2, #12]
 8004c52:	0912      	lsrs	r2, r2, #4
 8004c54:	0452      	lsls	r2, r2, #17
 8004c56:	430a      	orrs	r2, r1
 8004c58:	491f      	ldr	r1, [pc, #124]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	614b      	str	r3, [r1, #20]
 8004c5e:	e011      	b.n	8004c84 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c60:	4b1d      	ldr	r3, [pc, #116]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6892      	ldr	r2, [r2, #8]
 8004c70:	0211      	lsls	r1, r2, #8
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6912      	ldr	r2, [r2, #16]
 8004c76:	0852      	lsrs	r2, r2, #1
 8004c78:	3a01      	subs	r2, #1
 8004c7a:	0652      	lsls	r2, r2, #25
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	4916      	ldr	r1, [pc, #88]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c84:	4b14      	ldr	r3, [pc, #80]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c90:	f7fe fa36 	bl	8003100 <HAL_GetTick>
 8004c94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c96:	e009      	b.n	8004cac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c98:	f7fe fa32 	bl	8003100 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d902      	bls.n	8004cac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	73fb      	strb	r3, [r7, #15]
          break;
 8004caa:	e005      	b.n	8004cb8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cac:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0ef      	beq.n	8004c98 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	4904      	ldr	r1, [pc, #16]	; (8004cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40021000 	.word	0x40021000

08004cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e049      	b.n	8004d82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f841 	bl	8004d8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f000 f9f8 	bl	8005110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
	...

08004da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d001      	beq.n	8004db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e04f      	b.n	8004e58 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a23      	ldr	r2, [pc, #140]	; (8004e64 <HAL_TIM_Base_Start_IT+0xc4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d01d      	beq.n	8004e16 <HAL_TIM_Base_Start_IT+0x76>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de2:	d018      	beq.n	8004e16 <HAL_TIM_Base_Start_IT+0x76>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1f      	ldr	r2, [pc, #124]	; (8004e68 <HAL_TIM_Base_Start_IT+0xc8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d013      	beq.n	8004e16 <HAL_TIM_Base_Start_IT+0x76>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1e      	ldr	r2, [pc, #120]	; (8004e6c <HAL_TIM_Base_Start_IT+0xcc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00e      	beq.n	8004e16 <HAL_TIM_Base_Start_IT+0x76>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a1c      	ldr	r2, [pc, #112]	; (8004e70 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d009      	beq.n	8004e16 <HAL_TIM_Base_Start_IT+0x76>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1b      	ldr	r2, [pc, #108]	; (8004e74 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d004      	beq.n	8004e16 <HAL_TIM_Base_Start_IT+0x76>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a19      	ldr	r2, [pc, #100]	; (8004e78 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d115      	bne.n	8004e42 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	4b17      	ldr	r3, [pc, #92]	; (8004e7c <HAL_TIM_Base_Start_IT+0xdc>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b06      	cmp	r3, #6
 8004e26:	d015      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0xb4>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2e:	d011      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0201 	orr.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e40:	e008      	b.n	8004e54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 0201 	orr.w	r2, r2, #1
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	e000      	b.n	8004e56 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	40012c00 	.word	0x40012c00
 8004e68:	40000400 	.word	0x40000400
 8004e6c:	40000800 	.word	0x40000800
 8004e70:	40000c00 	.word	0x40000c00
 8004e74:	40013400 	.word	0x40013400
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	00010007 	.word	0x00010007

08004e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d122      	bne.n	8004edc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d11b      	bne.n	8004edc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0202 	mvn.w	r2, #2
 8004eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f905 	bl	80050d2 <HAL_TIM_IC_CaptureCallback>
 8004ec8:	e005      	b.n	8004ed6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f8f7 	bl	80050be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f908 	bl	80050e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d122      	bne.n	8004f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d11b      	bne.n	8004f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0204 	mvn.w	r2, #4
 8004f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f8db 	bl	80050d2 <HAL_TIM_IC_CaptureCallback>
 8004f1c:	e005      	b.n	8004f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f8cd 	bl	80050be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f8de 	bl	80050e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d122      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d11b      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0208 	mvn.w	r2, #8
 8004f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2204      	movs	r2, #4
 8004f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f8b1 	bl	80050d2 <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f8a3 	bl	80050be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f8b4 	bl	80050e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0310 	and.w	r3, r3, #16
 8004f8e:	2b10      	cmp	r3, #16
 8004f90:	d122      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2b10      	cmp	r3, #16
 8004f9e:	d11b      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0210 	mvn.w	r2, #16
 8004fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2208      	movs	r2, #8
 8004fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f887 	bl	80050d2 <HAL_TIM_IC_CaptureCallback>
 8004fc4:	e005      	b.n	8004fd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f879 	bl	80050be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f88a 	bl	80050e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d10e      	bne.n	8005004 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d107      	bne.n	8005004 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0201 	mvn.w	r2, #1
 8004ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fc fa84 	bl	800150c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500e:	2b80      	cmp	r3, #128	; 0x80
 8005010:	d10e      	bne.n	8005030 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501c:	2b80      	cmp	r3, #128	; 0x80
 800501e:	d107      	bne.n	8005030 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f914 	bl	8005258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800503e:	d10e      	bne.n	800505e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504a:	2b80      	cmp	r3, #128	; 0x80
 800504c:	d107      	bne.n	800505e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f907 	bl	800526c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005068:	2b40      	cmp	r3, #64	; 0x40
 800506a:	d10e      	bne.n	800508a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005076:	2b40      	cmp	r3, #64	; 0x40
 8005078:	d107      	bne.n	800508a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f838 	bl	80050fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b20      	cmp	r3, #32
 8005096:	d10e      	bne.n	80050b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	d107      	bne.n	80050b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f06f 0220 	mvn.w	r2, #32
 80050ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f8c7 	bl	8005244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a40      	ldr	r2, [pc, #256]	; (8005224 <TIM_Base_SetConfig+0x114>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d013      	beq.n	8005150 <TIM_Base_SetConfig+0x40>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512e:	d00f      	beq.n	8005150 <TIM_Base_SetConfig+0x40>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a3d      	ldr	r2, [pc, #244]	; (8005228 <TIM_Base_SetConfig+0x118>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00b      	beq.n	8005150 <TIM_Base_SetConfig+0x40>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a3c      	ldr	r2, [pc, #240]	; (800522c <TIM_Base_SetConfig+0x11c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d007      	beq.n	8005150 <TIM_Base_SetConfig+0x40>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a3b      	ldr	r2, [pc, #236]	; (8005230 <TIM_Base_SetConfig+0x120>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d003      	beq.n	8005150 <TIM_Base_SetConfig+0x40>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a3a      	ldr	r2, [pc, #232]	; (8005234 <TIM_Base_SetConfig+0x124>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d108      	bne.n	8005162 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a2f      	ldr	r2, [pc, #188]	; (8005224 <TIM_Base_SetConfig+0x114>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d01f      	beq.n	80051aa <TIM_Base_SetConfig+0x9a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005170:	d01b      	beq.n	80051aa <TIM_Base_SetConfig+0x9a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a2c      	ldr	r2, [pc, #176]	; (8005228 <TIM_Base_SetConfig+0x118>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d017      	beq.n	80051aa <TIM_Base_SetConfig+0x9a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a2b      	ldr	r2, [pc, #172]	; (800522c <TIM_Base_SetConfig+0x11c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d013      	beq.n	80051aa <TIM_Base_SetConfig+0x9a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a2a      	ldr	r2, [pc, #168]	; (8005230 <TIM_Base_SetConfig+0x120>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00f      	beq.n	80051aa <TIM_Base_SetConfig+0x9a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a29      	ldr	r2, [pc, #164]	; (8005234 <TIM_Base_SetConfig+0x124>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00b      	beq.n	80051aa <TIM_Base_SetConfig+0x9a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a28      	ldr	r2, [pc, #160]	; (8005238 <TIM_Base_SetConfig+0x128>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d007      	beq.n	80051aa <TIM_Base_SetConfig+0x9a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a27      	ldr	r2, [pc, #156]	; (800523c <TIM_Base_SetConfig+0x12c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d003      	beq.n	80051aa <TIM_Base_SetConfig+0x9a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a26      	ldr	r2, [pc, #152]	; (8005240 <TIM_Base_SetConfig+0x130>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d108      	bne.n	80051bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a10      	ldr	r2, [pc, #64]	; (8005224 <TIM_Base_SetConfig+0x114>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00f      	beq.n	8005208 <TIM_Base_SetConfig+0xf8>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a12      	ldr	r2, [pc, #72]	; (8005234 <TIM_Base_SetConfig+0x124>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00b      	beq.n	8005208 <TIM_Base_SetConfig+0xf8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a11      	ldr	r2, [pc, #68]	; (8005238 <TIM_Base_SetConfig+0x128>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d007      	beq.n	8005208 <TIM_Base_SetConfig+0xf8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a10      	ldr	r2, [pc, #64]	; (800523c <TIM_Base_SetConfig+0x12c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d003      	beq.n	8005208 <TIM_Base_SetConfig+0xf8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a0f      	ldr	r2, [pc, #60]	; (8005240 <TIM_Base_SetConfig+0x130>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d103      	bne.n	8005210 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	615a      	str	r2, [r3, #20]
}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40000c00 	.word	0x40000c00
 8005234:	40013400 	.word	0x40013400
 8005238:	40014000 	.word	0x40014000
 800523c:	40014400 	.word	0x40014400
 8005240:	40014800 	.word	0x40014800

08005244 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e040      	b.n	8005314 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fd fde4 	bl	8002e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2224      	movs	r2, #36	; 0x24
 80052ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0201 	bic.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f8c0 	bl	8005444 <UART_SetConfig>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e022      	b.n	8005314 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fb3e 	bl	8005958 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689a      	ldr	r2, [r3, #8]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fbc5 	bl	8005a9c <UART_CheckIdleState>
 8005312:	4603      	mov	r3, r0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	; 0x28
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	4613      	mov	r3, r2
 800532a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005330:	2b20      	cmp	r3, #32
 8005332:	f040 8082 	bne.w	800543a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <HAL_UART_Transmit+0x26>
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e07a      	b.n	800543c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_UART_Transmit+0x38>
 8005350:	2302      	movs	r3, #2
 8005352:	e073      	b.n	800543c <HAL_UART_Transmit+0x120>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2221      	movs	r2, #33	; 0x21
 8005368:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800536a:	f7fd fec9 	bl	8003100 <HAL_GetTick>
 800536e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	88fa      	ldrh	r2, [r7, #6]
 8005374:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	88fa      	ldrh	r2, [r7, #6]
 800537c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005388:	d108      	bne.n	800539c <HAL_UART_Transmit+0x80>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005392:	2300      	movs	r3, #0
 8005394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	61bb      	str	r3, [r7, #24]
 800539a:	e003      	b.n	80053a4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80053ac:	e02d      	b.n	800540a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2200      	movs	r2, #0
 80053b6:	2180      	movs	r1, #128	; 0x80
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 fbb8 	bl	8005b2e <UART_WaitOnFlagUntilTimeout>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e039      	b.n	800543c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10b      	bne.n	80053e6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	881a      	ldrh	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053da:	b292      	uxth	r2, r2
 80053dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	3302      	adds	r3, #2
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	e008      	b.n	80053f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	781a      	ldrb	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	b292      	uxth	r2, r2
 80053f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	3301      	adds	r3, #1
 80053f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1cb      	bne.n	80053ae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2200      	movs	r2, #0
 800541e:	2140      	movs	r1, #64	; 0x40
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 fb84 	bl	8005b2e <UART_WaitOnFlagUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e005      	b.n	800543c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2220      	movs	r2, #32
 8005434:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	e000      	b.n	800543c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800543a:	2302      	movs	r3, #2
  }
}
 800543c:	4618      	mov	r0, r3
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005444:	b5b0      	push	{r4, r5, r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	4313      	orrs	r3, r2
 8005466:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4bad      	ldr	r3, [pc, #692]	; (8005724 <UART_SetConfig+0x2e0>)
 8005470:	4013      	ands	r3, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	69f9      	ldr	r1, [r7, #28]
 8005478:	430b      	orrs	r3, r1
 800547a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4aa2      	ldr	r2, [pc, #648]	; (8005728 <UART_SetConfig+0x2e4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	430a      	orrs	r2, r1
 80054be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a99      	ldr	r2, [pc, #612]	; (800572c <UART_SetConfig+0x2e8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d121      	bne.n	800550e <UART_SetConfig+0xca>
 80054ca:	4b99      	ldr	r3, [pc, #612]	; (8005730 <UART_SetConfig+0x2ec>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	f003 0303 	and.w	r3, r3, #3
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d817      	bhi.n	8005508 <UART_SetConfig+0xc4>
 80054d8:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <UART_SetConfig+0x9c>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	080054f1 	.word	0x080054f1
 80054e4:	080054fd 	.word	0x080054fd
 80054e8:	080054f7 	.word	0x080054f7
 80054ec:	08005503 	.word	0x08005503
 80054f0:	2301      	movs	r3, #1
 80054f2:	76fb      	strb	r3, [r7, #27]
 80054f4:	e0e7      	b.n	80056c6 <UART_SetConfig+0x282>
 80054f6:	2302      	movs	r3, #2
 80054f8:	76fb      	strb	r3, [r7, #27]
 80054fa:	e0e4      	b.n	80056c6 <UART_SetConfig+0x282>
 80054fc:	2304      	movs	r3, #4
 80054fe:	76fb      	strb	r3, [r7, #27]
 8005500:	e0e1      	b.n	80056c6 <UART_SetConfig+0x282>
 8005502:	2308      	movs	r3, #8
 8005504:	76fb      	strb	r3, [r7, #27]
 8005506:	e0de      	b.n	80056c6 <UART_SetConfig+0x282>
 8005508:	2310      	movs	r3, #16
 800550a:	76fb      	strb	r3, [r7, #27]
 800550c:	e0db      	b.n	80056c6 <UART_SetConfig+0x282>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a88      	ldr	r2, [pc, #544]	; (8005734 <UART_SetConfig+0x2f0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d132      	bne.n	800557e <UART_SetConfig+0x13a>
 8005518:	4b85      	ldr	r3, [pc, #532]	; (8005730 <UART_SetConfig+0x2ec>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551e:	f003 030c 	and.w	r3, r3, #12
 8005522:	2b0c      	cmp	r3, #12
 8005524:	d828      	bhi.n	8005578 <UART_SetConfig+0x134>
 8005526:	a201      	add	r2, pc, #4	; (adr r2, 800552c <UART_SetConfig+0xe8>)
 8005528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552c:	08005561 	.word	0x08005561
 8005530:	08005579 	.word	0x08005579
 8005534:	08005579 	.word	0x08005579
 8005538:	08005579 	.word	0x08005579
 800553c:	0800556d 	.word	0x0800556d
 8005540:	08005579 	.word	0x08005579
 8005544:	08005579 	.word	0x08005579
 8005548:	08005579 	.word	0x08005579
 800554c:	08005567 	.word	0x08005567
 8005550:	08005579 	.word	0x08005579
 8005554:	08005579 	.word	0x08005579
 8005558:	08005579 	.word	0x08005579
 800555c:	08005573 	.word	0x08005573
 8005560:	2300      	movs	r3, #0
 8005562:	76fb      	strb	r3, [r7, #27]
 8005564:	e0af      	b.n	80056c6 <UART_SetConfig+0x282>
 8005566:	2302      	movs	r3, #2
 8005568:	76fb      	strb	r3, [r7, #27]
 800556a:	e0ac      	b.n	80056c6 <UART_SetConfig+0x282>
 800556c:	2304      	movs	r3, #4
 800556e:	76fb      	strb	r3, [r7, #27]
 8005570:	e0a9      	b.n	80056c6 <UART_SetConfig+0x282>
 8005572:	2308      	movs	r3, #8
 8005574:	76fb      	strb	r3, [r7, #27]
 8005576:	e0a6      	b.n	80056c6 <UART_SetConfig+0x282>
 8005578:	2310      	movs	r3, #16
 800557a:	76fb      	strb	r3, [r7, #27]
 800557c:	e0a3      	b.n	80056c6 <UART_SetConfig+0x282>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a6d      	ldr	r2, [pc, #436]	; (8005738 <UART_SetConfig+0x2f4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d120      	bne.n	80055ca <UART_SetConfig+0x186>
 8005588:	4b69      	ldr	r3, [pc, #420]	; (8005730 <UART_SetConfig+0x2ec>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005592:	2b30      	cmp	r3, #48	; 0x30
 8005594:	d013      	beq.n	80055be <UART_SetConfig+0x17a>
 8005596:	2b30      	cmp	r3, #48	; 0x30
 8005598:	d814      	bhi.n	80055c4 <UART_SetConfig+0x180>
 800559a:	2b20      	cmp	r3, #32
 800559c:	d009      	beq.n	80055b2 <UART_SetConfig+0x16e>
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d810      	bhi.n	80055c4 <UART_SetConfig+0x180>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <UART_SetConfig+0x168>
 80055a6:	2b10      	cmp	r3, #16
 80055a8:	d006      	beq.n	80055b8 <UART_SetConfig+0x174>
 80055aa:	e00b      	b.n	80055c4 <UART_SetConfig+0x180>
 80055ac:	2300      	movs	r3, #0
 80055ae:	76fb      	strb	r3, [r7, #27]
 80055b0:	e089      	b.n	80056c6 <UART_SetConfig+0x282>
 80055b2:	2302      	movs	r3, #2
 80055b4:	76fb      	strb	r3, [r7, #27]
 80055b6:	e086      	b.n	80056c6 <UART_SetConfig+0x282>
 80055b8:	2304      	movs	r3, #4
 80055ba:	76fb      	strb	r3, [r7, #27]
 80055bc:	e083      	b.n	80056c6 <UART_SetConfig+0x282>
 80055be:	2308      	movs	r3, #8
 80055c0:	76fb      	strb	r3, [r7, #27]
 80055c2:	e080      	b.n	80056c6 <UART_SetConfig+0x282>
 80055c4:	2310      	movs	r3, #16
 80055c6:	76fb      	strb	r3, [r7, #27]
 80055c8:	e07d      	b.n	80056c6 <UART_SetConfig+0x282>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a5b      	ldr	r2, [pc, #364]	; (800573c <UART_SetConfig+0x2f8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d120      	bne.n	8005616 <UART_SetConfig+0x1d2>
 80055d4:	4b56      	ldr	r3, [pc, #344]	; (8005730 <UART_SetConfig+0x2ec>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055de:	2bc0      	cmp	r3, #192	; 0xc0
 80055e0:	d013      	beq.n	800560a <UART_SetConfig+0x1c6>
 80055e2:	2bc0      	cmp	r3, #192	; 0xc0
 80055e4:	d814      	bhi.n	8005610 <UART_SetConfig+0x1cc>
 80055e6:	2b80      	cmp	r3, #128	; 0x80
 80055e8:	d009      	beq.n	80055fe <UART_SetConfig+0x1ba>
 80055ea:	2b80      	cmp	r3, #128	; 0x80
 80055ec:	d810      	bhi.n	8005610 <UART_SetConfig+0x1cc>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <UART_SetConfig+0x1b4>
 80055f2:	2b40      	cmp	r3, #64	; 0x40
 80055f4:	d006      	beq.n	8005604 <UART_SetConfig+0x1c0>
 80055f6:	e00b      	b.n	8005610 <UART_SetConfig+0x1cc>
 80055f8:	2300      	movs	r3, #0
 80055fa:	76fb      	strb	r3, [r7, #27]
 80055fc:	e063      	b.n	80056c6 <UART_SetConfig+0x282>
 80055fe:	2302      	movs	r3, #2
 8005600:	76fb      	strb	r3, [r7, #27]
 8005602:	e060      	b.n	80056c6 <UART_SetConfig+0x282>
 8005604:	2304      	movs	r3, #4
 8005606:	76fb      	strb	r3, [r7, #27]
 8005608:	e05d      	b.n	80056c6 <UART_SetConfig+0x282>
 800560a:	2308      	movs	r3, #8
 800560c:	76fb      	strb	r3, [r7, #27]
 800560e:	e05a      	b.n	80056c6 <UART_SetConfig+0x282>
 8005610:	2310      	movs	r3, #16
 8005612:	76fb      	strb	r3, [r7, #27]
 8005614:	e057      	b.n	80056c6 <UART_SetConfig+0x282>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a49      	ldr	r2, [pc, #292]	; (8005740 <UART_SetConfig+0x2fc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d125      	bne.n	800566c <UART_SetConfig+0x228>
 8005620:	4b43      	ldr	r3, [pc, #268]	; (8005730 <UART_SetConfig+0x2ec>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800562a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800562e:	d017      	beq.n	8005660 <UART_SetConfig+0x21c>
 8005630:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005634:	d817      	bhi.n	8005666 <UART_SetConfig+0x222>
 8005636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800563a:	d00b      	beq.n	8005654 <UART_SetConfig+0x210>
 800563c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005640:	d811      	bhi.n	8005666 <UART_SetConfig+0x222>
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <UART_SetConfig+0x20a>
 8005646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800564a:	d006      	beq.n	800565a <UART_SetConfig+0x216>
 800564c:	e00b      	b.n	8005666 <UART_SetConfig+0x222>
 800564e:	2300      	movs	r3, #0
 8005650:	76fb      	strb	r3, [r7, #27]
 8005652:	e038      	b.n	80056c6 <UART_SetConfig+0x282>
 8005654:	2302      	movs	r3, #2
 8005656:	76fb      	strb	r3, [r7, #27]
 8005658:	e035      	b.n	80056c6 <UART_SetConfig+0x282>
 800565a:	2304      	movs	r3, #4
 800565c:	76fb      	strb	r3, [r7, #27]
 800565e:	e032      	b.n	80056c6 <UART_SetConfig+0x282>
 8005660:	2308      	movs	r3, #8
 8005662:	76fb      	strb	r3, [r7, #27]
 8005664:	e02f      	b.n	80056c6 <UART_SetConfig+0x282>
 8005666:	2310      	movs	r3, #16
 8005668:	76fb      	strb	r3, [r7, #27]
 800566a:	e02c      	b.n	80056c6 <UART_SetConfig+0x282>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a2d      	ldr	r2, [pc, #180]	; (8005728 <UART_SetConfig+0x2e4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d125      	bne.n	80056c2 <UART_SetConfig+0x27e>
 8005676:	4b2e      	ldr	r3, [pc, #184]	; (8005730 <UART_SetConfig+0x2ec>)
 8005678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005680:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005684:	d017      	beq.n	80056b6 <UART_SetConfig+0x272>
 8005686:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800568a:	d817      	bhi.n	80056bc <UART_SetConfig+0x278>
 800568c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005690:	d00b      	beq.n	80056aa <UART_SetConfig+0x266>
 8005692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005696:	d811      	bhi.n	80056bc <UART_SetConfig+0x278>
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <UART_SetConfig+0x260>
 800569c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a0:	d006      	beq.n	80056b0 <UART_SetConfig+0x26c>
 80056a2:	e00b      	b.n	80056bc <UART_SetConfig+0x278>
 80056a4:	2300      	movs	r3, #0
 80056a6:	76fb      	strb	r3, [r7, #27]
 80056a8:	e00d      	b.n	80056c6 <UART_SetConfig+0x282>
 80056aa:	2302      	movs	r3, #2
 80056ac:	76fb      	strb	r3, [r7, #27]
 80056ae:	e00a      	b.n	80056c6 <UART_SetConfig+0x282>
 80056b0:	2304      	movs	r3, #4
 80056b2:	76fb      	strb	r3, [r7, #27]
 80056b4:	e007      	b.n	80056c6 <UART_SetConfig+0x282>
 80056b6:	2308      	movs	r3, #8
 80056b8:	76fb      	strb	r3, [r7, #27]
 80056ba:	e004      	b.n	80056c6 <UART_SetConfig+0x282>
 80056bc:	2310      	movs	r3, #16
 80056be:	76fb      	strb	r3, [r7, #27]
 80056c0:	e001      	b.n	80056c6 <UART_SetConfig+0x282>
 80056c2:	2310      	movs	r3, #16
 80056c4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a17      	ldr	r2, [pc, #92]	; (8005728 <UART_SetConfig+0x2e4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	f040 8087 	bne.w	80057e0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056d2:	7efb      	ldrb	r3, [r7, #27]
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d837      	bhi.n	8005748 <UART_SetConfig+0x304>
 80056d8:	a201      	add	r2, pc, #4	; (adr r2, 80056e0 <UART_SetConfig+0x29c>)
 80056da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056de:	bf00      	nop
 80056e0:	08005705 	.word	0x08005705
 80056e4:	08005749 	.word	0x08005749
 80056e8:	0800570d 	.word	0x0800570d
 80056ec:	08005749 	.word	0x08005749
 80056f0:	08005713 	.word	0x08005713
 80056f4:	08005749 	.word	0x08005749
 80056f8:	08005749 	.word	0x08005749
 80056fc:	08005749 	.word	0x08005749
 8005700:	0800571b 	.word	0x0800571b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005704:	f7fe fd70 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 8005708:	6178      	str	r0, [r7, #20]
        break;
 800570a:	e022      	b.n	8005752 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800570c:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <UART_SetConfig+0x300>)
 800570e:	617b      	str	r3, [r7, #20]
        break;
 8005710:	e01f      	b.n	8005752 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005712:	f7fe fcd1 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 8005716:	6178      	str	r0, [r7, #20]
        break;
 8005718:	e01b      	b.n	8005752 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800571a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800571e:	617b      	str	r3, [r7, #20]
        break;
 8005720:	e017      	b.n	8005752 <UART_SetConfig+0x30e>
 8005722:	bf00      	nop
 8005724:	efff69f3 	.word	0xefff69f3
 8005728:	40008000 	.word	0x40008000
 800572c:	40013800 	.word	0x40013800
 8005730:	40021000 	.word	0x40021000
 8005734:	40004400 	.word	0x40004400
 8005738:	40004800 	.word	0x40004800
 800573c:	40004c00 	.word	0x40004c00
 8005740:	40005000 	.word	0x40005000
 8005744:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	76bb      	strb	r3, [r7, #26]
        break;
 8005750:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80f1 	beq.w	800593c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	4413      	add	r3, r2
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	429a      	cmp	r2, r3
 8005768:	d305      	bcc.n	8005776 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	429a      	cmp	r2, r3
 8005774:	d902      	bls.n	800577c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	76bb      	strb	r3, [r7, #26]
 800577a:	e0df      	b.n	800593c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	4618      	mov	r0, r3
 8005780:	f04f 0100 	mov.w	r1, #0
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	020b      	lsls	r3, r1, #8
 800578e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005792:	0202      	lsls	r2, r0, #8
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	6849      	ldr	r1, [r1, #4]
 8005798:	0849      	lsrs	r1, r1, #1
 800579a:	4608      	mov	r0, r1
 800579c:	f04f 0100 	mov.w	r1, #0
 80057a0:	1814      	adds	r4, r2, r0
 80057a2:	eb43 0501 	adc.w	r5, r3, r1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	461a      	mov	r2, r3
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	4620      	mov	r0, r4
 80057b2:	4629      	mov	r1, r5
 80057b4:	f7fb f9b2 	bl	8000b1c <__aeabi_uldivmod>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4613      	mov	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057c6:	d308      	bcc.n	80057da <UART_SetConfig+0x396>
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ce:	d204      	bcs.n	80057da <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	60da      	str	r2, [r3, #12]
 80057d8:	e0b0      	b.n	800593c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	76bb      	strb	r3, [r7, #26]
 80057de:	e0ad      	b.n	800593c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e8:	d15c      	bne.n	80058a4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80057ea:	7efb      	ldrb	r3, [r7, #27]
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d828      	bhi.n	8005842 <UART_SetConfig+0x3fe>
 80057f0:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <UART_SetConfig+0x3b4>)
 80057f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f6:	bf00      	nop
 80057f8:	0800581d 	.word	0x0800581d
 80057fc:	08005825 	.word	0x08005825
 8005800:	0800582d 	.word	0x0800582d
 8005804:	08005843 	.word	0x08005843
 8005808:	08005833 	.word	0x08005833
 800580c:	08005843 	.word	0x08005843
 8005810:	08005843 	.word	0x08005843
 8005814:	08005843 	.word	0x08005843
 8005818:	0800583b 	.word	0x0800583b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800581c:	f7fe fce4 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 8005820:	6178      	str	r0, [r7, #20]
        break;
 8005822:	e013      	b.n	800584c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005824:	f7fe fcf6 	bl	8004214 <HAL_RCC_GetPCLK2Freq>
 8005828:	6178      	str	r0, [r7, #20]
        break;
 800582a:	e00f      	b.n	800584c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800582c:	4b49      	ldr	r3, [pc, #292]	; (8005954 <UART_SetConfig+0x510>)
 800582e:	617b      	str	r3, [r7, #20]
        break;
 8005830:	e00c      	b.n	800584c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005832:	f7fe fc41 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 8005836:	6178      	str	r0, [r7, #20]
        break;
 8005838:	e008      	b.n	800584c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583e:	617b      	str	r3, [r7, #20]
        break;
 8005840:	e004      	b.n	800584c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	76bb      	strb	r3, [r7, #26]
        break;
 800584a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d074      	beq.n	800593c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	005a      	lsls	r2, r3, #1
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	441a      	add	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	fbb2 f3f3 	udiv	r3, r2, r3
 8005866:	b29b      	uxth	r3, r3
 8005868:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	2b0f      	cmp	r3, #15
 800586e:	d916      	bls.n	800589e <UART_SetConfig+0x45a>
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005876:	d212      	bcs.n	800589e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	b29b      	uxth	r3, r3
 800587c:	f023 030f 	bic.w	r3, r3, #15
 8005880:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	085b      	lsrs	r3, r3, #1
 8005886:	b29b      	uxth	r3, r3
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	b29a      	uxth	r2, r3
 800588e:	89fb      	ldrh	r3, [r7, #14]
 8005890:	4313      	orrs	r3, r2
 8005892:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	89fa      	ldrh	r2, [r7, #14]
 800589a:	60da      	str	r2, [r3, #12]
 800589c:	e04e      	b.n	800593c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	76bb      	strb	r3, [r7, #26]
 80058a2:	e04b      	b.n	800593c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058a4:	7efb      	ldrb	r3, [r7, #27]
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	d827      	bhi.n	80058fa <UART_SetConfig+0x4b6>
 80058aa:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <UART_SetConfig+0x46c>)
 80058ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b0:	080058d5 	.word	0x080058d5
 80058b4:	080058dd 	.word	0x080058dd
 80058b8:	080058e5 	.word	0x080058e5
 80058bc:	080058fb 	.word	0x080058fb
 80058c0:	080058eb 	.word	0x080058eb
 80058c4:	080058fb 	.word	0x080058fb
 80058c8:	080058fb 	.word	0x080058fb
 80058cc:	080058fb 	.word	0x080058fb
 80058d0:	080058f3 	.word	0x080058f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d4:	f7fe fc88 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 80058d8:	6178      	str	r0, [r7, #20]
        break;
 80058da:	e013      	b.n	8005904 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058dc:	f7fe fc9a 	bl	8004214 <HAL_RCC_GetPCLK2Freq>
 80058e0:	6178      	str	r0, [r7, #20]
        break;
 80058e2:	e00f      	b.n	8005904 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e4:	4b1b      	ldr	r3, [pc, #108]	; (8005954 <UART_SetConfig+0x510>)
 80058e6:	617b      	str	r3, [r7, #20]
        break;
 80058e8:	e00c      	b.n	8005904 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ea:	f7fe fbe5 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 80058ee:	6178      	str	r0, [r7, #20]
        break;
 80058f0:	e008      	b.n	8005904 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058f6:	617b      	str	r3, [r7, #20]
        break;
 80058f8:	e004      	b.n	8005904 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	76bb      	strb	r3, [r7, #26]
        break;
 8005902:	bf00      	nop
    }

    if (pclk != 0U)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d018      	beq.n	800593c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	085a      	lsrs	r2, r3, #1
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	441a      	add	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	fbb2 f3f3 	udiv	r3, r2, r3
 800591c:	b29b      	uxth	r3, r3
 800591e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	2b0f      	cmp	r3, #15
 8005924:	d908      	bls.n	8005938 <UART_SetConfig+0x4f4>
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592c:	d204      	bcs.n	8005938 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	60da      	str	r2, [r3, #12]
 8005936:	e001      	b.n	800593c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005948:	7ebb      	ldrb	r3, [r7, #26]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bdb0      	pop	{r4, r5, r7, pc}
 8005952:	bf00      	nop
 8005954:	00f42400 	.word	0x00f42400

08005958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01a      	beq.n	8005a6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a56:	d10a      	bne.n	8005a6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	605a      	str	r2, [r3, #4]
  }
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aac:	f7fd fb28 	bl	8003100 <HAL_GetTick>
 8005ab0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d10e      	bne.n	8005ade <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f82d 	bl	8005b2e <UART_WaitOnFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e023      	b.n	8005b26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d10e      	bne.n	8005b0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f817 	bl	8005b2e <UART_WaitOnFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e00d      	b.n	8005b26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2220      	movs	r2, #32
 8005b14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	60f8      	str	r0, [r7, #12]
 8005b36:	60b9      	str	r1, [r7, #8]
 8005b38:	603b      	str	r3, [r7, #0]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b3e:	e05e      	b.n	8005bfe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b46:	d05a      	beq.n	8005bfe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b48:	f7fd fada 	bl	8003100 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d302      	bcc.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x30>
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d11b      	bne.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b6c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0201 	bic.w	r2, r2, #1
 8005b7c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2220      	movs	r2, #32
 8005b82:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2220      	movs	r2, #32
 8005b88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e043      	b.n	8005c1e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d02c      	beq.n	8005bfe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb2:	d124      	bne.n	8005bfe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bbc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bcc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0201 	bic.w	r2, r2, #1
 8005bdc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2220      	movs	r2, #32
 8005be2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2220      	movs	r2, #32
 8005be8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e00f      	b.n	8005c1e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4013      	ands	r3, r2
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	bf0c      	ite	eq
 8005c0e:	2301      	moveq	r3, #1
 8005c10:	2300      	movne	r3, #0
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	461a      	mov	r2, r3
 8005c16:	79fb      	ldrb	r3, [r7, #7]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d091      	beq.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <__NVIC_SetPriority>:
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	6039      	str	r1, [r7, #0]
 8005c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	db0a      	blt.n	8005c52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	490c      	ldr	r1, [pc, #48]	; (8005c74 <__NVIC_SetPriority+0x4c>)
 8005c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c46:	0112      	lsls	r2, r2, #4
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005c50:	e00a      	b.n	8005c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	4908      	ldr	r1, [pc, #32]	; (8005c78 <__NVIC_SetPriority+0x50>)
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	3b04      	subs	r3, #4
 8005c60:	0112      	lsls	r2, r2, #4
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	440b      	add	r3, r1
 8005c66:	761a      	strb	r2, [r3, #24]
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	e000e100 	.word	0xe000e100
 8005c78:	e000ed00 	.word	0xe000ed00

08005c7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005c80:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <SysTick_Handler+0x1c>)
 8005c82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005c84:	f001 fee8 	bl	8007a58 <xTaskGetSchedulerState>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d001      	beq.n	8005c92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005c8e:	f002 fcd3 	bl	8008638 <xPortSysTickHandler>
  }
}
 8005c92:	bf00      	nop
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	e000e010 	.word	0xe000e010

08005c9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	f06f 0004 	mvn.w	r0, #4
 8005ca6:	f7ff ffbf 	bl	8005c28 <__NVIC_SetPriority>
#endif
}
 8005caa:	bf00      	nop
 8005cac:	bd80      	pop	{r7, pc}
	...

08005cb0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cb6:	f3ef 8305 	mrs	r3, IPSR
 8005cba:	603b      	str	r3, [r7, #0]
  return(result);
 8005cbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005cc2:	f06f 0305 	mvn.w	r3, #5
 8005cc6:	607b      	str	r3, [r7, #4]
 8005cc8:	e00c      	b.n	8005ce4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005cca:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <osKernelInitialize+0x44>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d105      	bne.n	8005cde <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005cd2:	4b08      	ldr	r3, [pc, #32]	; (8005cf4 <osKernelInitialize+0x44>)
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	607b      	str	r3, [r7, #4]
 8005cdc:	e002      	b.n	8005ce4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005cde:	f04f 33ff 	mov.w	r3, #4294967295
 8005ce2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ce4:	687b      	ldr	r3, [r7, #4]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	20000078 	.word	0x20000078

08005cf8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cfe:	f3ef 8305 	mrs	r3, IPSR
 8005d02:	603b      	str	r3, [r7, #0]
  return(result);
 8005d04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005d0a:	f06f 0305 	mvn.w	r3, #5
 8005d0e:	607b      	str	r3, [r7, #4]
 8005d10:	e010      	b.n	8005d34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005d12:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <osKernelStart+0x48>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d109      	bne.n	8005d2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d1a:	f7ff ffbf 	bl	8005c9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d1e:	4b08      	ldr	r3, [pc, #32]	; (8005d40 <osKernelStart+0x48>)
 8005d20:	2202      	movs	r2, #2
 8005d22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d24:	f001 fa50 	bl	80071c8 <vTaskStartScheduler>
      stat = osOK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	607b      	str	r3, [r7, #4]
 8005d2c:	e002      	b.n	8005d34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d34:	687b      	ldr	r3, [r7, #4]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000078 	.word	0x20000078

08005d44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08e      	sub	sp, #56	; 0x38
 8005d48:	af04      	add	r7, sp, #16
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d50:	2300      	movs	r3, #0
 8005d52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d54:	f3ef 8305 	mrs	r3, IPSR
 8005d58:	617b      	str	r3, [r7, #20]
  return(result);
 8005d5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d17e      	bne.n	8005e5e <osThreadNew+0x11a>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d07b      	beq.n	8005e5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005d66:	2380      	movs	r3, #128	; 0x80
 8005d68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005d6a:	2318      	movs	r3, #24
 8005d6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005d72:	f04f 33ff 	mov.w	r3, #4294967295
 8005d76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d045      	beq.n	8005e0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <osThreadNew+0x48>
        name = attr->name;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d008      	beq.n	8005db2 <osThreadNew+0x6e>
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	2b38      	cmp	r3, #56	; 0x38
 8005da4:	d805      	bhi.n	8005db2 <osThreadNew+0x6e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <osThreadNew+0x72>
        return (NULL);
 8005db2:	2300      	movs	r3, #0
 8005db4:	e054      	b.n	8005e60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	089b      	lsrs	r3, r3, #2
 8005dc4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00e      	beq.n	8005dec <osThreadNew+0xa8>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	2b5b      	cmp	r3, #91	; 0x5b
 8005dd4:	d90a      	bls.n	8005dec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d006      	beq.n	8005dec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <osThreadNew+0xa8>
        mem = 1;
 8005de6:	2301      	movs	r3, #1
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	e010      	b.n	8005e0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10c      	bne.n	8005e0e <osThreadNew+0xca>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d108      	bne.n	8005e0e <osThreadNew+0xca>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d104      	bne.n	8005e0e <osThreadNew+0xca>
          mem = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	61bb      	str	r3, [r7, #24]
 8005e08:	e001      	b.n	8005e0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d110      	bne.n	8005e36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e1c:	9202      	str	r2, [sp, #8]
 8005e1e:	9301      	str	r3, [sp, #4]
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	6a3a      	ldr	r2, [r7, #32]
 8005e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 fff6 	bl	8006e1c <xTaskCreateStatic>
 8005e30:	4603      	mov	r3, r0
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	e013      	b.n	8005e5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d110      	bne.n	8005e5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	f107 0310 	add.w	r3, r7, #16
 8005e44:	9301      	str	r3, [sp, #4]
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f001 f841 	bl	8006ed6 <xTaskCreate>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d001      	beq.n	8005e5e <osThreadNew+0x11a>
            hTask = NULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e5e:	693b      	ldr	r3, [r7, #16]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3728      	adds	r7, #40	; 0x28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e70:	f3ef 8305 	mrs	r3, IPSR
 8005e74:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <osDelay+0x1c>
    stat = osErrorISR;
 8005e7c:	f06f 0305 	mvn.w	r3, #5
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	e007      	b.n	8005e94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f001 f966 	bl	8007160 <vTaskDelay>
    }
  }

  return (stat);
 8005e94:	68fb      	ldr	r3, [r7, #12]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b08a      	sub	sp, #40	; 0x28
 8005ea2:	af02      	add	r7, sp, #8
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eae:	f3ef 8305 	mrs	r3, IPSR
 8005eb2:	613b      	str	r3, [r7, #16]
  return(result);
 8005eb4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d15f      	bne.n	8005f7a <osMessageQueueNew+0xdc>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d05c      	beq.n	8005f7a <osMessageQueueNew+0xdc>
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d059      	beq.n	8005f7a <osMessageQueueNew+0xdc>
    mem = -1;
 8005ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d029      	beq.n	8005f26 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d012      	beq.n	8005f00 <osMessageQueueNew+0x62>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	2b4f      	cmp	r3, #79	; 0x4f
 8005ee0:	d90e      	bls.n	8005f00 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	695a      	ldr	r2, [r3, #20]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	fb01 f303 	mul.w	r3, r1, r3
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d302      	bcc.n	8005f00 <osMessageQueueNew+0x62>
        mem = 1;
 8005efa:	2301      	movs	r3, #1
 8005efc:	61bb      	str	r3, [r7, #24]
 8005efe:	e014      	b.n	8005f2a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d110      	bne.n	8005f2a <osMessageQueueNew+0x8c>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10c      	bne.n	8005f2a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d108      	bne.n	8005f2a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d104      	bne.n	8005f2a <osMessageQueueNew+0x8c>
          mem = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	61bb      	str	r3, [r7, #24]
 8005f24:	e001      	b.n	8005f2a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d10b      	bne.n	8005f48 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2100      	movs	r1, #0
 8005f3a:	9100      	str	r1, [sp, #0]
 8005f3c:	68b9      	ldr	r1, [r7, #8]
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 fa2e 	bl	80063a0 <xQueueGenericCreateStatic>
 8005f44:	61f8      	str	r0, [r7, #28]
 8005f46:	e008      	b.n	8005f5a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d105      	bne.n	8005f5a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005f4e:	2200      	movs	r2, #0
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 fa9c 	bl	8006490 <xQueueGenericCreate>
 8005f58:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00c      	beq.n	8005f7a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <osMessageQueueNew+0xd0>
        name = attr->name;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	e001      	b.n	8005f72 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005f72:	6979      	ldr	r1, [r7, #20]
 8005f74:	69f8      	ldr	r0, [r7, #28]
 8005f76:	f000 fef3 	bl	8006d60 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005f7a:	69fb      	ldr	r3, [r7, #28]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3720      	adds	r7, #32
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	603b      	str	r3, [r7, #0]
 8005f90:	4613      	mov	r3, r2
 8005f92:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f9c:	f3ef 8305 	mrs	r3, IPSR
 8005fa0:	617b      	str	r3, [r7, #20]
  return(result);
 8005fa2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d028      	beq.n	8005ffa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d005      	beq.n	8005fba <osMessageQueuePut+0x36>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <osMessageQueuePut+0x36>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005fba:	f06f 0303 	mvn.w	r3, #3
 8005fbe:	61fb      	str	r3, [r7, #28]
 8005fc0:	e038      	b.n	8006034 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005fc6:	f107 0210 	add.w	r2, r7, #16
 8005fca:	2300      	movs	r3, #0
 8005fcc:	68b9      	ldr	r1, [r7, #8]
 8005fce:	69b8      	ldr	r0, [r7, #24]
 8005fd0:	f000 fbba 	bl	8006748 <xQueueGenericSendFromISR>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d003      	beq.n	8005fe2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005fda:	f06f 0302 	mvn.w	r3, #2
 8005fde:	61fb      	str	r3, [r7, #28]
 8005fe0:	e028      	b.n	8006034 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d025      	beq.n	8006034 <osMessageQueuePut+0xb0>
 8005fe8:	4b15      	ldr	r3, [pc, #84]	; (8006040 <osMessageQueuePut+0xbc>)
 8005fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	e01c      	b.n	8006034 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <osMessageQueuePut+0x82>
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d103      	bne.n	800600e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006006:	f06f 0303 	mvn.w	r3, #3
 800600a:	61fb      	str	r3, [r7, #28]
 800600c:	e012      	b.n	8006034 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800600e:	2300      	movs	r3, #0
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	69b8      	ldr	r0, [r7, #24]
 8006016:	f000 fa99 	bl	800654c <xQueueGenericSend>
 800601a:	4603      	mov	r3, r0
 800601c:	2b01      	cmp	r3, #1
 800601e:	d009      	beq.n	8006034 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006026:	f06f 0301 	mvn.w	r3, #1
 800602a:	61fb      	str	r3, [r7, #28]
 800602c:	e002      	b.n	8006034 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800602e:	f06f 0302 	mvn.w	r3, #2
 8006032:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006034:	69fb      	ldr	r3, [r7, #28]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3720      	adds	r7, #32
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	e000ed04 	.word	0xe000ed04

08006044 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006056:	2300      	movs	r3, #0
 8006058:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800605a:	f3ef 8305 	mrs	r3, IPSR
 800605e:	617b      	str	r3, [r7, #20]
  return(result);
 8006060:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006062:	2b00      	cmp	r3, #0
 8006064:	d028      	beq.n	80060b8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <osMessageQueueGet+0x34>
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <osMessageQueueGet+0x34>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006078:	f06f 0303 	mvn.w	r3, #3
 800607c:	61fb      	str	r3, [r7, #28]
 800607e:	e037      	b.n	80060f0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006080:	2300      	movs	r3, #0
 8006082:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006084:	f107 0310 	add.w	r3, r7, #16
 8006088:	461a      	mov	r2, r3
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	69b8      	ldr	r0, [r7, #24]
 800608e:	f000 fcd7 	bl	8006a40 <xQueueReceiveFromISR>
 8006092:	4603      	mov	r3, r0
 8006094:	2b01      	cmp	r3, #1
 8006096:	d003      	beq.n	80060a0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006098:	f06f 0302 	mvn.w	r3, #2
 800609c:	61fb      	str	r3, [r7, #28]
 800609e:	e027      	b.n	80060f0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d024      	beq.n	80060f0 <osMessageQueueGet+0xac>
 80060a6:	4b15      	ldr	r3, [pc, #84]	; (80060fc <osMessageQueueGet+0xb8>)
 80060a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	e01b      	b.n	80060f0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <osMessageQueueGet+0x80>
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d103      	bne.n	80060cc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80060c4:	f06f 0303 	mvn.w	r3, #3
 80060c8:	61fb      	str	r3, [r7, #28]
 80060ca:	e011      	b.n	80060f0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	68b9      	ldr	r1, [r7, #8]
 80060d0:	69b8      	ldr	r0, [r7, #24]
 80060d2:	f000 fbd5 	bl	8006880 <xQueueReceive>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d009      	beq.n	80060f0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80060e2:	f06f 0301 	mvn.w	r3, #1
 80060e6:	61fb      	str	r3, [r7, #28]
 80060e8:	e002      	b.n	80060f0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80060ea:	f06f 0302 	mvn.w	r3, #2
 80060ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80060f0:	69fb      	ldr	r3, [r7, #28]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	e000ed04 	.word	0xe000ed04

08006100 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4a07      	ldr	r2, [pc, #28]	; (800612c <vApplicationGetIdleTaskMemory+0x2c>)
 8006110:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	4a06      	ldr	r2, [pc, #24]	; (8006130 <vApplicationGetIdleTaskMemory+0x30>)
 8006116:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2280      	movs	r2, #128	; 0x80
 800611c:	601a      	str	r2, [r3, #0]
}
 800611e:	bf00      	nop
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	2000007c 	.word	0x2000007c
 8006130:	200000d8 	.word	0x200000d8

08006134 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4a07      	ldr	r2, [pc, #28]	; (8006160 <vApplicationGetTimerTaskMemory+0x2c>)
 8006144:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	4a06      	ldr	r2, [pc, #24]	; (8006164 <vApplicationGetTimerTaskMemory+0x30>)
 800614a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006152:	601a      	str	r2, [r3, #0]
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	200002d8 	.word	0x200002d8
 8006164:	20000334 	.word	0x20000334

08006168 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f103 0208 	add.w	r2, r3, #8
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f04f 32ff 	mov.w	r2, #4294967295
 8006180:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f103 0208 	add.w	r2, r3, #8
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f103 0208 	add.w	r2, r3, #8
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061c2:	b480      	push	{r7}
 80061c4:	b085      	sub	sp, #20
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	601a      	str	r2, [r3, #0]
}
 80061fe:	bf00      	nop
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800620a:	b480      	push	{r7}
 800620c:	b085      	sub	sp, #20
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006220:	d103      	bne.n	800622a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	e00c      	b.n	8006244 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3308      	adds	r3, #8
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	e002      	b.n	8006238 <vListInsert+0x2e>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	429a      	cmp	r2, r3
 8006242:	d2f6      	bcs.n	8006232 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	601a      	str	r2, [r3, #0]
}
 8006270:	bf00      	nop
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6892      	ldr	r2, [r2, #8]
 8006292:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6852      	ldr	r2, [r2, #4]
 800629c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d103      	bne.n	80062b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	1e5a      	subs	r2, r3, #1
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062f6:	bf00      	nop
 80062f8:	e7fe      	b.n	80062f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80062fa:	f002 f90b 	bl	8008514 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006306:	68f9      	ldr	r1, [r7, #12]
 8006308:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800630a:	fb01 f303 	mul.w	r3, r1, r3
 800630e:	441a      	add	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632a:	3b01      	subs	r3, #1
 800632c:	68f9      	ldr	r1, [r7, #12]
 800632e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006330:	fb01 f303 	mul.w	r3, r1, r3
 8006334:	441a      	add	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	22ff      	movs	r2, #255	; 0xff
 800633e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	22ff      	movs	r2, #255	; 0xff
 8006346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d114      	bne.n	800637a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01a      	beq.n	800638e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3310      	adds	r3, #16
 800635c:	4618      	mov	r0, r3
 800635e:	f001 f9bd 	bl	80076dc <xTaskRemoveFromEventList>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d012      	beq.n	800638e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006368:	4b0c      	ldr	r3, [pc, #48]	; (800639c <xQueueGenericReset+0xcc>)
 800636a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	e009      	b.n	800638e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3310      	adds	r3, #16
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff fef2 	bl	8006168 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3324      	adds	r3, #36	; 0x24
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff feed 	bl	8006168 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800638e:	f002 f8f1 	bl	8008574 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006392:	2301      	movs	r3, #1
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	e000ed04 	.word	0xe000ed04

080063a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08e      	sub	sp, #56	; 0x38
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10a      	bne.n	80063ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063c6:	bf00      	nop
 80063c8:	e7fe      	b.n	80063c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <xQueueGenericCreateStatic+0x52>
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <xQueueGenericCreateStatic+0x56>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e000      	b.n	80063f8 <xQueueGenericCreateStatic+0x58>
 80063f6:	2300      	movs	r3, #0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10a      	bne.n	8006412 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	623b      	str	r3, [r7, #32]
}
 800640e:	bf00      	nop
 8006410:	e7fe      	b.n	8006410 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d102      	bne.n	800641e <xQueueGenericCreateStatic+0x7e>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <xQueueGenericCreateStatic+0x82>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <xQueueGenericCreateStatic+0x84>
 8006422:	2300      	movs	r3, #0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	61fb      	str	r3, [r7, #28]
}
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800643e:	2350      	movs	r3, #80	; 0x50
 8006440:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b50      	cmp	r3, #80	; 0x50
 8006446:	d00a      	beq.n	800645e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	61bb      	str	r3, [r7, #24]
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800645e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00d      	beq.n	8006486 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006472:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	4613      	mov	r3, r2
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	68b9      	ldr	r1, [r7, #8]
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 f83f 	bl	8006504 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006488:	4618      	mov	r0, r3
 800648a:	3730      	adds	r7, #48	; 0x30
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006490:	b580      	push	{r7, lr}
 8006492:	b08a      	sub	sp, #40	; 0x28
 8006494:	af02      	add	r7, sp, #8
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	4613      	mov	r3, r2
 800649c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10a      	bne.n	80064ba <xQueueGenericCreate+0x2a>
	__asm volatile
 80064a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	613b      	str	r3, [r7, #16]
}
 80064b6:	bf00      	nop
 80064b8:	e7fe      	b.n	80064b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	fb02 f303 	mul.w	r3, r2, r3
 80064c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	3350      	adds	r3, #80	; 0x50
 80064c8:	4618      	mov	r0, r3
 80064ca:	f002 f945 	bl	8008758 <pvPortMalloc>
 80064ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d011      	beq.n	80064fa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	3350      	adds	r3, #80	; 0x50
 80064de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064e8:	79fa      	ldrb	r2, [r7, #7]
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	4613      	mov	r3, r2
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	68b9      	ldr	r1, [r7, #8]
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f805 	bl	8006504 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064fa:	69bb      	ldr	r3, [r7, #24]
	}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3720      	adds	r7, #32
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d103      	bne.n	8006520 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	e002      	b.n	8006526 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006532:	2101      	movs	r1, #1
 8006534:	69b8      	ldr	r0, [r7, #24]
 8006536:	f7ff fecb 	bl	80062d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	78fa      	ldrb	r2, [r7, #3]
 800653e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006542:	bf00      	nop
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08e      	sub	sp, #56	; 0x38
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800655a:	2300      	movs	r3, #0
 800655c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <xQueueGenericSend+0x32>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800657a:	bf00      	nop
 800657c:	e7fe      	b.n	800657c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d103      	bne.n	800658c <xQueueGenericSend+0x40>
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <xQueueGenericSend+0x44>
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <xQueueGenericSend+0x46>
 8006590:	2300      	movs	r3, #0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10a      	bne.n	80065ac <xQueueGenericSend+0x60>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065a8:	bf00      	nop
 80065aa:	e7fe      	b.n	80065aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d103      	bne.n	80065ba <xQueueGenericSend+0x6e>
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <xQueueGenericSend+0x72>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e000      	b.n	80065c0 <xQueueGenericSend+0x74>
 80065be:	2300      	movs	r3, #0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10a      	bne.n	80065da <xQueueGenericSend+0x8e>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	623b      	str	r3, [r7, #32]
}
 80065d6:	bf00      	nop
 80065d8:	e7fe      	b.n	80065d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065da:	f001 fa3d 	bl	8007a58 <xTaskGetSchedulerState>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d102      	bne.n	80065ea <xQueueGenericSend+0x9e>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <xQueueGenericSend+0xa2>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e000      	b.n	80065f0 <xQueueGenericSend+0xa4>
 80065ee:	2300      	movs	r3, #0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10a      	bne.n	800660a <xQueueGenericSend+0xbe>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	61fb      	str	r3, [r7, #28]
}
 8006606:	bf00      	nop
 8006608:	e7fe      	b.n	8006608 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800660a:	f001 ff83 	bl	8008514 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006616:	429a      	cmp	r2, r3
 8006618:	d302      	bcc.n	8006620 <xQueueGenericSend+0xd4>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b02      	cmp	r3, #2
 800661e:	d129      	bne.n	8006674 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006626:	f000 fa8b 	bl	8006b40 <prvCopyDataToQueue>
 800662a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	2b00      	cmp	r3, #0
 8006632:	d010      	beq.n	8006656 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	3324      	adds	r3, #36	; 0x24
 8006638:	4618      	mov	r0, r3
 800663a:	f001 f84f 	bl	80076dc <xTaskRemoveFromEventList>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d013      	beq.n	800666c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006644:	4b3f      	ldr	r3, [pc, #252]	; (8006744 <xQueueGenericSend+0x1f8>)
 8006646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	e00a      	b.n	800666c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d007      	beq.n	800666c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800665c:	4b39      	ldr	r3, [pc, #228]	; (8006744 <xQueueGenericSend+0x1f8>)
 800665e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800666c:	f001 ff82 	bl	8008574 <vPortExitCritical>
				return pdPASS;
 8006670:	2301      	movs	r3, #1
 8006672:	e063      	b.n	800673c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d103      	bne.n	8006682 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800667a:	f001 ff7b 	bl	8008574 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800667e:	2300      	movs	r3, #0
 8006680:	e05c      	b.n	800673c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006684:	2b00      	cmp	r3, #0
 8006686:	d106      	bne.n	8006696 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006688:	f107 0314 	add.w	r3, r7, #20
 800668c:	4618      	mov	r0, r3
 800668e:	f001 f889 	bl	80077a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006692:	2301      	movs	r3, #1
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006696:	f001 ff6d 	bl	8008574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800669a:	f000 fdfb 	bl	8007294 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800669e:	f001 ff39 	bl	8008514 <vPortEnterCritical>
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066a8:	b25b      	sxtb	r3, r3
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ae:	d103      	bne.n	80066b8 <xQueueGenericSend+0x16c>
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066be:	b25b      	sxtb	r3, r3
 80066c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c4:	d103      	bne.n	80066ce <xQueueGenericSend+0x182>
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066ce:	f001 ff51 	bl	8008574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066d2:	1d3a      	adds	r2, r7, #4
 80066d4:	f107 0314 	add.w	r3, r7, #20
 80066d8:	4611      	mov	r1, r2
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 f878 	bl	80077d0 <xTaskCheckForTimeOut>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d124      	bne.n	8006730 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066e8:	f000 fb22 	bl	8006d30 <prvIsQueueFull>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d018      	beq.n	8006724 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	3310      	adds	r3, #16
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	4611      	mov	r1, r2
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 ff9e 	bl	800763c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006702:	f000 faad 	bl	8006c60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006706:	f000 fdd3 	bl	80072b0 <xTaskResumeAll>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	f47f af7c 	bne.w	800660a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006712:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <xQueueGenericSend+0x1f8>)
 8006714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	e772      	b.n	800660a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006726:	f000 fa9b 	bl	8006c60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800672a:	f000 fdc1 	bl	80072b0 <xTaskResumeAll>
 800672e:	e76c      	b.n	800660a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006732:	f000 fa95 	bl	8006c60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006736:	f000 fdbb 	bl	80072b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800673a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800673c:	4618      	mov	r0, r3
 800673e:	3738      	adds	r7, #56	; 0x38
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	e000ed04 	.word	0xe000ed04

08006748 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b090      	sub	sp, #64	; 0x40
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10a      	bne.n	8006776 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006772:	bf00      	nop
 8006774:	e7fe      	b.n	8006774 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d103      	bne.n	8006784 <xQueueGenericSendFromISR+0x3c>
 800677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <xQueueGenericSendFromISR+0x40>
 8006784:	2301      	movs	r3, #1
 8006786:	e000      	b.n	800678a <xQueueGenericSendFromISR+0x42>
 8006788:	2300      	movs	r3, #0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067a0:	bf00      	nop
 80067a2:	e7fe      	b.n	80067a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d103      	bne.n	80067b2 <xQueueGenericSendFromISR+0x6a>
 80067aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d101      	bne.n	80067b6 <xQueueGenericSendFromISR+0x6e>
 80067b2:	2301      	movs	r3, #1
 80067b4:	e000      	b.n	80067b8 <xQueueGenericSendFromISR+0x70>
 80067b6:	2300      	movs	r3, #0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10a      	bne.n	80067d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	623b      	str	r3, [r7, #32]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067d2:	f001 ff81 	bl	80086d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80067d6:	f3ef 8211 	mrs	r2, BASEPRI
 80067da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	61fa      	str	r2, [r7, #28]
 80067ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d302      	bcc.n	8006804 <xQueueGenericSendFromISR+0xbc>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b02      	cmp	r3, #2
 8006802:	d12f      	bne.n	8006864 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800680a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800681a:	f000 f991 	bl	8006b40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800681e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006826:	d112      	bne.n	800684e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	2b00      	cmp	r3, #0
 800682e:	d016      	beq.n	800685e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	3324      	adds	r3, #36	; 0x24
 8006834:	4618      	mov	r0, r3
 8006836:	f000 ff51 	bl	80076dc <xTaskRemoveFromEventList>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00e      	beq.n	800685e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	e007      	b.n	800685e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800684e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006852:	3301      	adds	r3, #1
 8006854:	b2db      	uxtb	r3, r3
 8006856:	b25a      	sxtb	r2, r3
 8006858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800685e:	2301      	movs	r3, #1
 8006860:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006862:	e001      	b.n	8006868 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006864:	2300      	movs	r3, #0
 8006866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006872:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006876:	4618      	mov	r0, r3
 8006878:	3740      	adds	r7, #64	; 0x40
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08c      	sub	sp, #48	; 0x30
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800688c:	2300      	movs	r3, #0
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10a      	bne.n	80068b0 <xQueueReceive+0x30>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	623b      	str	r3, [r7, #32]
}
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d103      	bne.n	80068be <xQueueReceive+0x3e>
 80068b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <xQueueReceive+0x42>
 80068be:	2301      	movs	r3, #1
 80068c0:	e000      	b.n	80068c4 <xQueueReceive+0x44>
 80068c2:	2300      	movs	r3, #0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <xQueueReceive+0x5e>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	61fb      	str	r3, [r7, #28]
}
 80068da:	bf00      	nop
 80068dc:	e7fe      	b.n	80068dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068de:	f001 f8bb 	bl	8007a58 <xTaskGetSchedulerState>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d102      	bne.n	80068ee <xQueueReceive+0x6e>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <xQueueReceive+0x72>
 80068ee:	2301      	movs	r3, #1
 80068f0:	e000      	b.n	80068f4 <xQueueReceive+0x74>
 80068f2:	2300      	movs	r3, #0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10a      	bne.n	800690e <xQueueReceive+0x8e>
	__asm volatile
 80068f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fc:	f383 8811 	msr	BASEPRI, r3
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	61bb      	str	r3, [r7, #24]
}
 800690a:	bf00      	nop
 800690c:	e7fe      	b.n	800690c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800690e:	f001 fe01 	bl	8008514 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006916:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01f      	beq.n	800695e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800691e:	68b9      	ldr	r1, [r7, #8]
 8006920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006922:	f000 f977 	bl	8006c14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	1e5a      	subs	r2, r3, #1
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00f      	beq.n	8006956 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	3310      	adds	r3, #16
 800693a:	4618      	mov	r0, r3
 800693c:	f000 fece 	bl	80076dc <xTaskRemoveFromEventList>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d007      	beq.n	8006956 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006946:	4b3d      	ldr	r3, [pc, #244]	; (8006a3c <xQueueReceive+0x1bc>)
 8006948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006956:	f001 fe0d 	bl	8008574 <vPortExitCritical>
				return pdPASS;
 800695a:	2301      	movs	r3, #1
 800695c:	e069      	b.n	8006a32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d103      	bne.n	800696c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006964:	f001 fe06 	bl	8008574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006968:	2300      	movs	r3, #0
 800696a:	e062      	b.n	8006a32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696e:	2b00      	cmp	r3, #0
 8006970:	d106      	bne.n	8006980 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006972:	f107 0310 	add.w	r3, r7, #16
 8006976:	4618      	mov	r0, r3
 8006978:	f000 ff14 	bl	80077a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800697c:	2301      	movs	r3, #1
 800697e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006980:	f001 fdf8 	bl	8008574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006984:	f000 fc86 	bl	8007294 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006988:	f001 fdc4 	bl	8008514 <vPortEnterCritical>
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006992:	b25b      	sxtb	r3, r3
 8006994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006998:	d103      	bne.n	80069a2 <xQueueReceive+0x122>
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069a8:	b25b      	sxtb	r3, r3
 80069aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ae:	d103      	bne.n	80069b8 <xQueueReceive+0x138>
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069b8:	f001 fddc 	bl	8008574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069bc:	1d3a      	adds	r2, r7, #4
 80069be:	f107 0310 	add.w	r3, r7, #16
 80069c2:	4611      	mov	r1, r2
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 ff03 	bl	80077d0 <xTaskCheckForTimeOut>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d123      	bne.n	8006a18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069d2:	f000 f997 	bl	8006d04 <prvIsQueueEmpty>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d017      	beq.n	8006a0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	3324      	adds	r3, #36	; 0x24
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	4611      	mov	r1, r2
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fe29 	bl	800763c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ec:	f000 f938 	bl	8006c60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069f0:	f000 fc5e 	bl	80072b0 <xTaskResumeAll>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d189      	bne.n	800690e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80069fa:	4b10      	ldr	r3, [pc, #64]	; (8006a3c <xQueueReceive+0x1bc>)
 80069fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	e780      	b.n	800690e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a0e:	f000 f927 	bl	8006c60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a12:	f000 fc4d 	bl	80072b0 <xTaskResumeAll>
 8006a16:	e77a      	b.n	800690e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a1a:	f000 f921 	bl	8006c60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a1e:	f000 fc47 	bl	80072b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a24:	f000 f96e 	bl	8006d04 <prvIsQueueEmpty>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f43f af6f 	beq.w	800690e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3730      	adds	r7, #48	; 0x30
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	e000ed04 	.word	0xe000ed04

08006a40 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08e      	sub	sp, #56	; 0x38
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10a      	bne.n	8006a6c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	623b      	str	r3, [r7, #32]
}
 8006a68:	bf00      	nop
 8006a6a:	e7fe      	b.n	8006a6a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d103      	bne.n	8006a7a <xQueueReceiveFromISR+0x3a>
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <xQueueReceiveFromISR+0x3e>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e000      	b.n	8006a80 <xQueueReceiveFromISR+0x40>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	61fb      	str	r3, [r7, #28]
}
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a9a:	f001 fe1d 	bl	80086d8 <vPortValidateInterruptPriority>
	__asm volatile
 8006a9e:	f3ef 8211 	mrs	r2, BASEPRI
 8006aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	61ba      	str	r2, [r7, #24]
 8006ab4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006ab6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d02f      	beq.n	8006b26 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ad4:	f000 f89e 	bl	8006c14 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	1e5a      	subs	r2, r3, #1
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006ae0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae8:	d112      	bne.n	8006b10 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d016      	beq.n	8006b20 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	3310      	adds	r3, #16
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fdf0 	bl	80076dc <xTaskRemoveFromEventList>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00e      	beq.n	8006b20 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00b      	beq.n	8006b20 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	e007      	b.n	8006b20 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b14:	3301      	adds	r3, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	b25a      	sxtb	r2, r3
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006b20:	2301      	movs	r3, #1
 8006b22:	637b      	str	r3, [r7, #52]	; 0x34
 8006b24:	e001      	b.n	8006b2a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	637b      	str	r3, [r7, #52]	; 0x34
 8006b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f383 8811 	msr	BASEPRI, r3
}
 8006b34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3738      	adds	r7, #56	; 0x38
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10d      	bne.n	8006b7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d14d      	bne.n	8006c02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 ff92 	bl	8007a94 <xTaskPriorityDisinherit>
 8006b70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	609a      	str	r2, [r3, #8]
 8006b78:	e043      	b.n	8006c02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d119      	bne.n	8006bb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6858      	ldr	r0, [r3, #4]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b88:	461a      	mov	r2, r3
 8006b8a:	68b9      	ldr	r1, [r7, #8]
 8006b8c:	f001 fff2 	bl	8008b74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	441a      	add	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d32b      	bcc.n	8006c02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	605a      	str	r2, [r3, #4]
 8006bb2:	e026      	b.n	8006c02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	68d8      	ldr	r0, [r3, #12]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	68b9      	ldr	r1, [r7, #8]
 8006bc0:	f001 ffd8 	bl	8008b74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	425b      	negs	r3, r3
 8006bce:	441a      	add	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d207      	bcs.n	8006bf0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be8:	425b      	negs	r3, r3
 8006bea:	441a      	add	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d105      	bne.n	8006c02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d002      	beq.n	8006c02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	1c5a      	adds	r2, r3, #1
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c0a:	697b      	ldr	r3, [r7, #20]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d018      	beq.n	8006c58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	441a      	add	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68da      	ldr	r2, [r3, #12]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d303      	bcc.n	8006c48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68d9      	ldr	r1, [r3, #12]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	461a      	mov	r2, r3
 8006c52:	6838      	ldr	r0, [r7, #0]
 8006c54:	f001 ff8e 	bl	8008b74 <memcpy>
	}
}
 8006c58:	bf00      	nop
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c68:	f001 fc54 	bl	8008514 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c74:	e011      	b.n	8006c9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d012      	beq.n	8006ca4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	3324      	adds	r3, #36	; 0x24
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fd2a 	bl	80076dc <xTaskRemoveFromEventList>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c8e:	f000 fe01 	bl	8007894 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	dce9      	bgt.n	8006c76 <prvUnlockQueue+0x16>
 8006ca2:	e000      	b.n	8006ca6 <prvUnlockQueue+0x46>
					break;
 8006ca4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	22ff      	movs	r2, #255	; 0xff
 8006caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006cae:	f001 fc61 	bl	8008574 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006cb2:	f001 fc2f 	bl	8008514 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cbe:	e011      	b.n	8006ce4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d012      	beq.n	8006cee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3310      	adds	r3, #16
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fd05 	bl	80076dc <xTaskRemoveFromEventList>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006cd8:	f000 fddc 	bl	8007894 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ce4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	dce9      	bgt.n	8006cc0 <prvUnlockQueue+0x60>
 8006cec:	e000      	b.n	8006cf0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006cee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	22ff      	movs	r2, #255	; 0xff
 8006cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006cf8:	f001 fc3c 	bl	8008574 <vPortExitCritical>
}
 8006cfc:	bf00      	nop
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d0c:	f001 fc02 	bl	8008514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d102      	bne.n	8006d1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	e001      	b.n	8006d22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d22:	f001 fc27 	bl	8008574 <vPortExitCritical>

	return xReturn;
 8006d26:	68fb      	ldr	r3, [r7, #12]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d38:	f001 fbec 	bl	8008514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d102      	bne.n	8006d4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	e001      	b.n	8006d52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d52:	f001 fc0f 	bl	8008574 <vPortExitCritical>

	return xReturn;
 8006d56:	68fb      	ldr	r3, [r7, #12]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	e014      	b.n	8006d9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d70:	4a0f      	ldr	r2, [pc, #60]	; (8006db0 <vQueueAddToRegistry+0x50>)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10b      	bne.n	8006d94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d7c:	490c      	ldr	r1, [pc, #48]	; (8006db0 <vQueueAddToRegistry+0x50>)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d86:	4a0a      	ldr	r2, [pc, #40]	; (8006db0 <vQueueAddToRegistry+0x50>)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	00db      	lsls	r3, r3, #3
 8006d8c:	4413      	add	r3, r2
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d92:	e006      	b.n	8006da2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3301      	adds	r3, #1
 8006d98:	60fb      	str	r3, [r7, #12]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b07      	cmp	r3, #7
 8006d9e:	d9e7      	bls.n	8006d70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006da0:	bf00      	nop
 8006da2:	bf00      	nop
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	20003570 	.word	0x20003570

08006db4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006dc4:	f001 fba6 	bl	8008514 <vPortEnterCritical>
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dce:	b25b      	sxtb	r3, r3
 8006dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd4:	d103      	bne.n	8006dde <vQueueWaitForMessageRestricted+0x2a>
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006de4:	b25b      	sxtb	r3, r3
 8006de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dea:	d103      	bne.n	8006df4 <vQueueWaitForMessageRestricted+0x40>
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006df4:	f001 fbbe 	bl	8008574 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d106      	bne.n	8006e0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	3324      	adds	r3, #36	; 0x24
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fc3b 	bl	8007684 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e0e:	6978      	ldr	r0, [r7, #20]
 8006e10:	f7ff ff26 	bl	8006c60 <prvUnlockQueue>
	}
 8006e14:	bf00      	nop
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08e      	sub	sp, #56	; 0x38
 8006e20:	af04      	add	r7, sp, #16
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10a      	bne.n	8006e46 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	623b      	str	r3, [r7, #32]
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <xTaskCreateStatic+0x46>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	61fb      	str	r3, [r7, #28]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e62:	235c      	movs	r3, #92	; 0x5c
 8006e64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b5c      	cmp	r3, #92	; 0x5c
 8006e6a:	d00a      	beq.n	8006e82 <xTaskCreateStatic+0x66>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	61bb      	str	r3, [r7, #24]
}
 8006e7e:	bf00      	nop
 8006e80:	e7fe      	b.n	8006e80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d01e      	beq.n	8006ec8 <xTaskCreateStatic+0xac>
 8006e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01b      	beq.n	8006ec8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	9303      	str	r3, [sp, #12]
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	9302      	str	r3, [sp, #8]
 8006eaa:	f107 0314 	add.w	r3, r7, #20
 8006eae:	9301      	str	r3, [sp, #4]
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	68b9      	ldr	r1, [r7, #8]
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 f850 	bl	8006f60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ec2:	f000 f8dd 	bl	8007080 <prvAddNewTaskToReadyList>
 8006ec6:	e001      	b.n	8006ecc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ecc:	697b      	ldr	r3, [r7, #20]
	}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3728      	adds	r7, #40	; 0x28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b08c      	sub	sp, #48	; 0x30
 8006eda:	af04      	add	r7, sp, #16
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	603b      	str	r3, [r7, #0]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ee6:	88fb      	ldrh	r3, [r7, #6]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4618      	mov	r0, r3
 8006eec:	f001 fc34 	bl	8008758 <pvPortMalloc>
 8006ef0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00e      	beq.n	8006f16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ef8:	205c      	movs	r0, #92	; 0x5c
 8006efa:	f001 fc2d 	bl	8008758 <pvPortMalloc>
 8006efe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8006f0c:	e005      	b.n	8006f1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f0e:	6978      	ldr	r0, [r7, #20]
 8006f10:	f001 fcee 	bl	80088f0 <vPortFree>
 8006f14:	e001      	b.n	8006f1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d017      	beq.n	8006f50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f28:	88fa      	ldrh	r2, [r7, #6]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	9303      	str	r3, [sp, #12]
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	9302      	str	r3, [sp, #8]
 8006f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68b9      	ldr	r1, [r7, #8]
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 f80e 	bl	8006f60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f44:	69f8      	ldr	r0, [r7, #28]
 8006f46:	f000 f89b 	bl	8007080 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	61bb      	str	r3, [r7, #24]
 8006f4e:	e002      	b.n	8006f56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f50:	f04f 33ff 	mov.w	r3, #4294967295
 8006f54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f56:	69bb      	ldr	r3, [r7, #24]
	}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3720      	adds	r7, #32
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	461a      	mov	r2, r3
 8006f78:	21a5      	movs	r1, #165	; 0xa5
 8006f7a:	f001 fe09 	bl	8008b90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	f023 0307 	bic.w	r3, r3, #7
 8006f96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00a      	beq.n	8006fb8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	617b      	str	r3, [r7, #20]
}
 8006fb4:	bf00      	nop
 8006fb6:	e7fe      	b.n	8006fb6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d01f      	beq.n	8006ffe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	61fb      	str	r3, [r7, #28]
 8006fc2:	e012      	b.n	8006fea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	4413      	add	r3, r2
 8006fca:	7819      	ldrb	r1, [r3, #0]
 8006fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	3334      	adds	r3, #52	; 0x34
 8006fd4:	460a      	mov	r2, r1
 8006fd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	4413      	add	r3, r2
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d006      	beq.n	8006ff2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	61fb      	str	r3, [r7, #28]
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	2b0f      	cmp	r3, #15
 8006fee:	d9e9      	bls.n	8006fc4 <prvInitialiseNewTask+0x64>
 8006ff0:	e000      	b.n	8006ff4 <prvInitialiseNewTask+0x94>
			{
				break;
 8006ff2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ffc:	e003      	b.n	8007006 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	2b37      	cmp	r3, #55	; 0x37
 800700a:	d901      	bls.n	8007010 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800700c:	2337      	movs	r3, #55	; 0x37
 800700e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007014:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800701a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701e:	2200      	movs	r2, #0
 8007020:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007024:	3304      	adds	r3, #4
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff f8be 	bl	80061a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800702c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702e:	3318      	adds	r3, #24
 8007030:	4618      	mov	r0, r3
 8007032:	f7ff f8b9 	bl	80061a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800703a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007044:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800704a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	2200      	movs	r2, #0
 8007050:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	68f9      	ldr	r1, [r7, #12]
 800705e:	69b8      	ldr	r0, [r7, #24]
 8007060:	f001 f928 	bl	80082b4 <pxPortInitialiseStack>
 8007064:	4602      	mov	r2, r0
 8007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007068:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800706a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007076:	bf00      	nop
 8007078:	3720      	adds	r7, #32
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
	...

08007080 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007088:	f001 fa44 	bl	8008514 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800708c:	4b2d      	ldr	r3, [pc, #180]	; (8007144 <prvAddNewTaskToReadyList+0xc4>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3301      	adds	r3, #1
 8007092:	4a2c      	ldr	r2, [pc, #176]	; (8007144 <prvAddNewTaskToReadyList+0xc4>)
 8007094:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007096:	4b2c      	ldr	r3, [pc, #176]	; (8007148 <prvAddNewTaskToReadyList+0xc8>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d109      	bne.n	80070b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800709e:	4a2a      	ldr	r2, [pc, #168]	; (8007148 <prvAddNewTaskToReadyList+0xc8>)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80070a4:	4b27      	ldr	r3, [pc, #156]	; (8007144 <prvAddNewTaskToReadyList+0xc4>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d110      	bne.n	80070ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80070ac:	f000 fc16 	bl	80078dc <prvInitialiseTaskLists>
 80070b0:	e00d      	b.n	80070ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80070b2:	4b26      	ldr	r3, [pc, #152]	; (800714c <prvAddNewTaskToReadyList+0xcc>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d109      	bne.n	80070ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80070ba:	4b23      	ldr	r3, [pc, #140]	; (8007148 <prvAddNewTaskToReadyList+0xc8>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d802      	bhi.n	80070ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80070c8:	4a1f      	ldr	r2, [pc, #124]	; (8007148 <prvAddNewTaskToReadyList+0xc8>)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80070ce:	4b20      	ldr	r3, [pc, #128]	; (8007150 <prvAddNewTaskToReadyList+0xd0>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3301      	adds	r3, #1
 80070d4:	4a1e      	ldr	r2, [pc, #120]	; (8007150 <prvAddNewTaskToReadyList+0xd0>)
 80070d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80070d8:	4b1d      	ldr	r3, [pc, #116]	; (8007150 <prvAddNewTaskToReadyList+0xd0>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e4:	4b1b      	ldr	r3, [pc, #108]	; (8007154 <prvAddNewTaskToReadyList+0xd4>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d903      	bls.n	80070f4 <prvAddNewTaskToReadyList+0x74>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	4a18      	ldr	r2, [pc, #96]	; (8007154 <prvAddNewTaskToReadyList+0xd4>)
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4a15      	ldr	r2, [pc, #84]	; (8007158 <prvAddNewTaskToReadyList+0xd8>)
 8007102:	441a      	add	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3304      	adds	r3, #4
 8007108:	4619      	mov	r1, r3
 800710a:	4610      	mov	r0, r2
 800710c:	f7ff f859 	bl	80061c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007110:	f001 fa30 	bl	8008574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007114:	4b0d      	ldr	r3, [pc, #52]	; (800714c <prvAddNewTaskToReadyList+0xcc>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00e      	beq.n	800713a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800711c:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <prvAddNewTaskToReadyList+0xc8>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	429a      	cmp	r2, r3
 8007128:	d207      	bcs.n	800713a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800712a:	4b0c      	ldr	r3, [pc, #48]	; (800715c <prvAddNewTaskToReadyList+0xdc>)
 800712c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20000c08 	.word	0x20000c08
 8007148:	20000734 	.word	0x20000734
 800714c:	20000c14 	.word	0x20000c14
 8007150:	20000c24 	.word	0x20000c24
 8007154:	20000c10 	.word	0x20000c10
 8007158:	20000738 	.word	0x20000738
 800715c:	e000ed04 	.word	0xe000ed04

08007160 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007168:	2300      	movs	r3, #0
 800716a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d017      	beq.n	80071a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007172:	4b13      	ldr	r3, [pc, #76]	; (80071c0 <vTaskDelay+0x60>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <vTaskDelay+0x30>
	__asm volatile
 800717a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	60bb      	str	r3, [r7, #8]
}
 800718c:	bf00      	nop
 800718e:	e7fe      	b.n	800718e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007190:	f000 f880 	bl	8007294 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007194:	2100      	movs	r1, #0
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fcea 	bl	8007b70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800719c:	f000 f888 	bl	80072b0 <xTaskResumeAll>
 80071a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d107      	bne.n	80071b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80071a8:	4b06      	ldr	r3, [pc, #24]	; (80071c4 <vTaskDelay+0x64>)
 80071aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071b8:	bf00      	nop
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	20000c30 	.word	0x20000c30
 80071c4:	e000ed04 	.word	0xe000ed04

080071c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08a      	sub	sp, #40	; 0x28
 80071cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80071d6:	463a      	mov	r2, r7
 80071d8:	1d39      	adds	r1, r7, #4
 80071da:	f107 0308 	add.w	r3, r7, #8
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe ff8e 	bl	8006100 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	9202      	str	r2, [sp, #8]
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	2300      	movs	r3, #0
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	2300      	movs	r3, #0
 80071f4:	460a      	mov	r2, r1
 80071f6:	4921      	ldr	r1, [pc, #132]	; (800727c <vTaskStartScheduler+0xb4>)
 80071f8:	4821      	ldr	r0, [pc, #132]	; (8007280 <vTaskStartScheduler+0xb8>)
 80071fa:	f7ff fe0f 	bl	8006e1c <xTaskCreateStatic>
 80071fe:	4603      	mov	r3, r0
 8007200:	4a20      	ldr	r2, [pc, #128]	; (8007284 <vTaskStartScheduler+0xbc>)
 8007202:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007204:	4b1f      	ldr	r3, [pc, #124]	; (8007284 <vTaskStartScheduler+0xbc>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800720c:	2301      	movs	r3, #1
 800720e:	617b      	str	r3, [r7, #20]
 8007210:	e001      	b.n	8007216 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d102      	bne.n	8007222 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800721c:	f000 fcfc 	bl	8007c18 <xTimerCreateTimerTask>
 8007220:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d116      	bne.n	8007256 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	613b      	str	r3, [r7, #16]
}
 800723a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800723c:	4b12      	ldr	r3, [pc, #72]	; (8007288 <vTaskStartScheduler+0xc0>)
 800723e:	f04f 32ff 	mov.w	r2, #4294967295
 8007242:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007244:	4b11      	ldr	r3, [pc, #68]	; (800728c <vTaskStartScheduler+0xc4>)
 8007246:	2201      	movs	r2, #1
 8007248:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800724a:	4b11      	ldr	r3, [pc, #68]	; (8007290 <vTaskStartScheduler+0xc8>)
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007250:	f001 f8be 	bl	80083d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007254:	e00e      	b.n	8007274 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725c:	d10a      	bne.n	8007274 <vTaskStartScheduler+0xac>
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	60fb      	str	r3, [r7, #12]
}
 8007270:	bf00      	nop
 8007272:	e7fe      	b.n	8007272 <vTaskStartScheduler+0xaa>
}
 8007274:	bf00      	nop
 8007276:	3718      	adds	r7, #24
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	08008ce8 	.word	0x08008ce8
 8007280:	080078ad 	.word	0x080078ad
 8007284:	20000c2c 	.word	0x20000c2c
 8007288:	20000c28 	.word	0x20000c28
 800728c:	20000c14 	.word	0x20000c14
 8007290:	20000c0c 	.word	0x20000c0c

08007294 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007294:	b480      	push	{r7}
 8007296:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007298:	4b04      	ldr	r3, [pc, #16]	; (80072ac <vTaskSuspendAll+0x18>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3301      	adds	r3, #1
 800729e:	4a03      	ldr	r2, [pc, #12]	; (80072ac <vTaskSuspendAll+0x18>)
 80072a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80072a2:	bf00      	nop
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	20000c30 	.word	0x20000c30

080072b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80072b6:	2300      	movs	r3, #0
 80072b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80072be:	4b42      	ldr	r3, [pc, #264]	; (80073c8 <xTaskResumeAll+0x118>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10a      	bne.n	80072dc <xTaskResumeAll+0x2c>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	603b      	str	r3, [r7, #0]
}
 80072d8:	bf00      	nop
 80072da:	e7fe      	b.n	80072da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80072dc:	f001 f91a 	bl	8008514 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80072e0:	4b39      	ldr	r3, [pc, #228]	; (80073c8 <xTaskResumeAll+0x118>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	4a38      	ldr	r2, [pc, #224]	; (80073c8 <xTaskResumeAll+0x118>)
 80072e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072ea:	4b37      	ldr	r3, [pc, #220]	; (80073c8 <xTaskResumeAll+0x118>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d162      	bne.n	80073b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072f2:	4b36      	ldr	r3, [pc, #216]	; (80073cc <xTaskResumeAll+0x11c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d05e      	beq.n	80073b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072fa:	e02f      	b.n	800735c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072fc:	4b34      	ldr	r3, [pc, #208]	; (80073d0 <xTaskResumeAll+0x120>)
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	3318      	adds	r3, #24
 8007308:	4618      	mov	r0, r3
 800730a:	f7fe ffb7 	bl	800627c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3304      	adds	r3, #4
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe ffb2 	bl	800627c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731c:	4b2d      	ldr	r3, [pc, #180]	; (80073d4 <xTaskResumeAll+0x124>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d903      	bls.n	800732c <xTaskResumeAll+0x7c>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	4a2a      	ldr	r2, [pc, #168]	; (80073d4 <xTaskResumeAll+0x124>)
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007330:	4613      	mov	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4a27      	ldr	r2, [pc, #156]	; (80073d8 <xTaskResumeAll+0x128>)
 800733a:	441a      	add	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3304      	adds	r3, #4
 8007340:	4619      	mov	r1, r3
 8007342:	4610      	mov	r0, r2
 8007344:	f7fe ff3d 	bl	80061c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734c:	4b23      	ldr	r3, [pc, #140]	; (80073dc <xTaskResumeAll+0x12c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	429a      	cmp	r2, r3
 8007354:	d302      	bcc.n	800735c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007356:	4b22      	ldr	r3, [pc, #136]	; (80073e0 <xTaskResumeAll+0x130>)
 8007358:	2201      	movs	r2, #1
 800735a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800735c:	4b1c      	ldr	r3, [pc, #112]	; (80073d0 <xTaskResumeAll+0x120>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1cb      	bne.n	80072fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800736a:	f000 fb55 	bl	8007a18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800736e:	4b1d      	ldr	r3, [pc, #116]	; (80073e4 <xTaskResumeAll+0x134>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d010      	beq.n	800739c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800737a:	f000 f847 	bl	800740c <xTaskIncrementTick>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007384:	4b16      	ldr	r3, [pc, #88]	; (80073e0 <xTaskResumeAll+0x130>)
 8007386:	2201      	movs	r2, #1
 8007388:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	3b01      	subs	r3, #1
 800738e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1f1      	bne.n	800737a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007396:	4b13      	ldr	r3, [pc, #76]	; (80073e4 <xTaskResumeAll+0x134>)
 8007398:	2200      	movs	r2, #0
 800739a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800739c:	4b10      	ldr	r3, [pc, #64]	; (80073e0 <xTaskResumeAll+0x130>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d009      	beq.n	80073b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80073a8:	4b0f      	ldr	r3, [pc, #60]	; (80073e8 <xTaskResumeAll+0x138>)
 80073aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ae:	601a      	str	r2, [r3, #0]
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073b8:	f001 f8dc 	bl	8008574 <vPortExitCritical>

	return xAlreadyYielded;
 80073bc:	68bb      	ldr	r3, [r7, #8]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20000c30 	.word	0x20000c30
 80073cc:	20000c08 	.word	0x20000c08
 80073d0:	20000bc8 	.word	0x20000bc8
 80073d4:	20000c10 	.word	0x20000c10
 80073d8:	20000738 	.word	0x20000738
 80073dc:	20000734 	.word	0x20000734
 80073e0:	20000c1c 	.word	0x20000c1c
 80073e4:	20000c18 	.word	0x20000c18
 80073e8:	e000ed04 	.word	0xe000ed04

080073ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80073f2:	4b05      	ldr	r3, [pc, #20]	; (8007408 <xTaskGetTickCount+0x1c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80073f8:	687b      	ldr	r3, [r7, #4]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	20000c0c 	.word	0x20000c0c

0800740c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007412:	2300      	movs	r3, #0
 8007414:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007416:	4b4f      	ldr	r3, [pc, #316]	; (8007554 <xTaskIncrementTick+0x148>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	f040 808f 	bne.w	800753e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007420:	4b4d      	ldr	r3, [pc, #308]	; (8007558 <xTaskIncrementTick+0x14c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3301      	adds	r3, #1
 8007426:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007428:	4a4b      	ldr	r2, [pc, #300]	; (8007558 <xTaskIncrementTick+0x14c>)
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d120      	bne.n	8007476 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007434:	4b49      	ldr	r3, [pc, #292]	; (800755c <xTaskIncrementTick+0x150>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <xTaskIncrementTick+0x48>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	603b      	str	r3, [r7, #0]
}
 8007450:	bf00      	nop
 8007452:	e7fe      	b.n	8007452 <xTaskIncrementTick+0x46>
 8007454:	4b41      	ldr	r3, [pc, #260]	; (800755c <xTaskIncrementTick+0x150>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	4b41      	ldr	r3, [pc, #260]	; (8007560 <xTaskIncrementTick+0x154>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a3f      	ldr	r2, [pc, #252]	; (800755c <xTaskIncrementTick+0x150>)
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	4a3f      	ldr	r2, [pc, #252]	; (8007560 <xTaskIncrementTick+0x154>)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	4b3e      	ldr	r3, [pc, #248]	; (8007564 <xTaskIncrementTick+0x158>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3301      	adds	r3, #1
 800746e:	4a3d      	ldr	r2, [pc, #244]	; (8007564 <xTaskIncrementTick+0x158>)
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	f000 fad1 	bl	8007a18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007476:	4b3c      	ldr	r3, [pc, #240]	; (8007568 <xTaskIncrementTick+0x15c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	429a      	cmp	r2, r3
 800747e:	d349      	bcc.n	8007514 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007480:	4b36      	ldr	r3, [pc, #216]	; (800755c <xTaskIncrementTick+0x150>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d104      	bne.n	8007494 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800748a:	4b37      	ldr	r3, [pc, #220]	; (8007568 <xTaskIncrementTick+0x15c>)
 800748c:	f04f 32ff 	mov.w	r2, #4294967295
 8007490:	601a      	str	r2, [r3, #0]
					break;
 8007492:	e03f      	b.n	8007514 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007494:	4b31      	ldr	r3, [pc, #196]	; (800755c <xTaskIncrementTick+0x150>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d203      	bcs.n	80074b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80074ac:	4a2e      	ldr	r2, [pc, #184]	; (8007568 <xTaskIncrementTick+0x15c>)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80074b2:	e02f      	b.n	8007514 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	3304      	adds	r3, #4
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fe fedf 	bl	800627c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d004      	beq.n	80074d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	3318      	adds	r3, #24
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fe fed6 	bl	800627c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d4:	4b25      	ldr	r3, [pc, #148]	; (800756c <xTaskIncrementTick+0x160>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d903      	bls.n	80074e4 <xTaskIncrementTick+0xd8>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	4a22      	ldr	r2, [pc, #136]	; (800756c <xTaskIncrementTick+0x160>)
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4a1f      	ldr	r2, [pc, #124]	; (8007570 <xTaskIncrementTick+0x164>)
 80074f2:	441a      	add	r2, r3
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	3304      	adds	r3, #4
 80074f8:	4619      	mov	r1, r3
 80074fa:	4610      	mov	r0, r2
 80074fc:	f7fe fe61 	bl	80061c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007504:	4b1b      	ldr	r3, [pc, #108]	; (8007574 <xTaskIncrementTick+0x168>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750a:	429a      	cmp	r2, r3
 800750c:	d3b8      	bcc.n	8007480 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800750e:	2301      	movs	r3, #1
 8007510:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007512:	e7b5      	b.n	8007480 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007514:	4b17      	ldr	r3, [pc, #92]	; (8007574 <xTaskIncrementTick+0x168>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751a:	4915      	ldr	r1, [pc, #84]	; (8007570 <xTaskIncrementTick+0x164>)
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	440b      	add	r3, r1
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d901      	bls.n	8007530 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800752c:	2301      	movs	r3, #1
 800752e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007530:	4b11      	ldr	r3, [pc, #68]	; (8007578 <xTaskIncrementTick+0x16c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d007      	beq.n	8007548 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007538:	2301      	movs	r3, #1
 800753a:	617b      	str	r3, [r7, #20]
 800753c:	e004      	b.n	8007548 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800753e:	4b0f      	ldr	r3, [pc, #60]	; (800757c <xTaskIncrementTick+0x170>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3301      	adds	r3, #1
 8007544:	4a0d      	ldr	r2, [pc, #52]	; (800757c <xTaskIncrementTick+0x170>)
 8007546:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007548:	697b      	ldr	r3, [r7, #20]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20000c30 	.word	0x20000c30
 8007558:	20000c0c 	.word	0x20000c0c
 800755c:	20000bc0 	.word	0x20000bc0
 8007560:	20000bc4 	.word	0x20000bc4
 8007564:	20000c20 	.word	0x20000c20
 8007568:	20000c28 	.word	0x20000c28
 800756c:	20000c10 	.word	0x20000c10
 8007570:	20000738 	.word	0x20000738
 8007574:	20000734 	.word	0x20000734
 8007578:	20000c1c 	.word	0x20000c1c
 800757c:	20000c18 	.word	0x20000c18

08007580 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007586:	4b28      	ldr	r3, [pc, #160]	; (8007628 <vTaskSwitchContext+0xa8>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800758e:	4b27      	ldr	r3, [pc, #156]	; (800762c <vTaskSwitchContext+0xac>)
 8007590:	2201      	movs	r2, #1
 8007592:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007594:	e041      	b.n	800761a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007596:	4b25      	ldr	r3, [pc, #148]	; (800762c <vTaskSwitchContext+0xac>)
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800759c:	4b24      	ldr	r3, [pc, #144]	; (8007630 <vTaskSwitchContext+0xb0>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	e010      	b.n	80075c6 <vTaskSwitchContext+0x46>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10a      	bne.n	80075c0 <vTaskSwitchContext+0x40>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	607b      	str	r3, [r7, #4]
}
 80075bc:	bf00      	nop
 80075be:	e7fe      	b.n	80075be <vTaskSwitchContext+0x3e>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	491b      	ldr	r1, [pc, #108]	; (8007634 <vTaskSwitchContext+0xb4>)
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	4613      	mov	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	440b      	add	r3, r1
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0e4      	beq.n	80075a4 <vTaskSwitchContext+0x24>
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	4613      	mov	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4a13      	ldr	r2, [pc, #76]	; (8007634 <vTaskSwitchContext+0xb4>)
 80075e6:	4413      	add	r3, r2
 80075e8:	60bb      	str	r3, [r7, #8]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	605a      	str	r2, [r3, #4]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	3308      	adds	r3, #8
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d104      	bne.n	800760a <vTaskSwitchContext+0x8a>
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	605a      	str	r2, [r3, #4]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	4a09      	ldr	r2, [pc, #36]	; (8007638 <vTaskSwitchContext+0xb8>)
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	4a06      	ldr	r2, [pc, #24]	; (8007630 <vTaskSwitchContext+0xb0>)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6013      	str	r3, [r2, #0]
}
 800761a:	bf00      	nop
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	20000c30 	.word	0x20000c30
 800762c:	20000c1c 	.word	0x20000c1c
 8007630:	20000c10 	.word	0x20000c10
 8007634:	20000738 	.word	0x20000738
 8007638:	20000734 	.word	0x20000734

0800763c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10a      	bne.n	8007662 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	60fb      	str	r3, [r7, #12]
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007662:	4b07      	ldr	r3, [pc, #28]	; (8007680 <vTaskPlaceOnEventList+0x44>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3318      	adds	r3, #24
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7fe fdcd 	bl	800620a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007670:	2101      	movs	r1, #1
 8007672:	6838      	ldr	r0, [r7, #0]
 8007674:	f000 fa7c 	bl	8007b70 <prvAddCurrentTaskToDelayedList>
}
 8007678:	bf00      	nop
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000734 	.word	0x20000734

08007684 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10a      	bne.n	80076ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769a:	f383 8811 	msr	BASEPRI, r3
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f3bf 8f4f 	dsb	sy
 80076a6:	617b      	str	r3, [r7, #20]
}
 80076a8:	bf00      	nop
 80076aa:	e7fe      	b.n	80076aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076ac:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3318      	adds	r3, #24
 80076b2:	4619      	mov	r1, r3
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f7fe fd84 	bl	80061c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80076c0:	f04f 33ff 	mov.w	r3, #4294967295
 80076c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	68b8      	ldr	r0, [r7, #8]
 80076ca:	f000 fa51 	bl	8007b70 <prvAddCurrentTaskToDelayedList>
	}
 80076ce:	bf00      	nop
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000734 	.word	0x20000734

080076dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10a      	bne.n	8007708 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60fb      	str	r3, [r7, #12]
}
 8007704:	bf00      	nop
 8007706:	e7fe      	b.n	8007706 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	3318      	adds	r3, #24
 800770c:	4618      	mov	r0, r3
 800770e:	f7fe fdb5 	bl	800627c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007712:	4b1e      	ldr	r3, [pc, #120]	; (800778c <xTaskRemoveFromEventList+0xb0>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d11d      	bne.n	8007756 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	3304      	adds	r3, #4
 800771e:	4618      	mov	r0, r3
 8007720:	f7fe fdac 	bl	800627c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007728:	4b19      	ldr	r3, [pc, #100]	; (8007790 <xTaskRemoveFromEventList+0xb4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d903      	bls.n	8007738 <xTaskRemoveFromEventList+0x5c>
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	4a16      	ldr	r2, [pc, #88]	; (8007790 <xTaskRemoveFromEventList+0xb4>)
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800773c:	4613      	mov	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4a13      	ldr	r2, [pc, #76]	; (8007794 <xTaskRemoveFromEventList+0xb8>)
 8007746:	441a      	add	r2, r3
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	3304      	adds	r3, #4
 800774c:	4619      	mov	r1, r3
 800774e:	4610      	mov	r0, r2
 8007750:	f7fe fd37 	bl	80061c2 <vListInsertEnd>
 8007754:	e005      	b.n	8007762 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	3318      	adds	r3, #24
 800775a:	4619      	mov	r1, r3
 800775c:	480e      	ldr	r0, [pc, #56]	; (8007798 <xTaskRemoveFromEventList+0xbc>)
 800775e:	f7fe fd30 	bl	80061c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007766:	4b0d      	ldr	r3, [pc, #52]	; (800779c <xTaskRemoveFromEventList+0xc0>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	429a      	cmp	r2, r3
 800776e:	d905      	bls.n	800777c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007770:	2301      	movs	r3, #1
 8007772:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007774:	4b0a      	ldr	r3, [pc, #40]	; (80077a0 <xTaskRemoveFromEventList+0xc4>)
 8007776:	2201      	movs	r2, #1
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	e001      	b.n	8007780 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800777c:	2300      	movs	r3, #0
 800777e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007780:	697b      	ldr	r3, [r7, #20]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	20000c30 	.word	0x20000c30
 8007790:	20000c10 	.word	0x20000c10
 8007794:	20000738 	.word	0x20000738
 8007798:	20000bc8 	.word	0x20000bc8
 800779c:	20000734 	.word	0x20000734
 80077a0:	20000c1c 	.word	0x20000c1c

080077a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80077ac:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <vTaskInternalSetTimeOutState+0x24>)
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80077b4:	4b05      	ldr	r3, [pc, #20]	; (80077cc <vTaskInternalSetTimeOutState+0x28>)
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	605a      	str	r2, [r3, #4]
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	20000c20 	.word	0x20000c20
 80077cc:	20000c0c 	.word	0x20000c0c

080077d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10a      	bne.n	80077f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	613b      	str	r3, [r7, #16]
}
 80077f2:	bf00      	nop
 80077f4:	e7fe      	b.n	80077f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10a      	bne.n	8007812 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	60fb      	str	r3, [r7, #12]
}
 800780e:	bf00      	nop
 8007810:	e7fe      	b.n	8007810 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007812:	f000 fe7f 	bl	8008514 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007816:	4b1d      	ldr	r3, [pc, #116]	; (800788c <xTaskCheckForTimeOut+0xbc>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782e:	d102      	bne.n	8007836 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007830:	2300      	movs	r3, #0
 8007832:	61fb      	str	r3, [r7, #28]
 8007834:	e023      	b.n	800787e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	4b15      	ldr	r3, [pc, #84]	; (8007890 <xTaskCheckForTimeOut+0xc0>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	429a      	cmp	r2, r3
 8007840:	d007      	beq.n	8007852 <xTaskCheckForTimeOut+0x82>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	429a      	cmp	r2, r3
 800784a:	d302      	bcc.n	8007852 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800784c:	2301      	movs	r3, #1
 800784e:	61fb      	str	r3, [r7, #28]
 8007850:	e015      	b.n	800787e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	429a      	cmp	r2, r3
 800785a:	d20b      	bcs.n	8007874 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	1ad2      	subs	r2, r2, r3
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff ff9b 	bl	80077a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800786e:	2300      	movs	r3, #0
 8007870:	61fb      	str	r3, [r7, #28]
 8007872:	e004      	b.n	800787e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800787a:	2301      	movs	r3, #1
 800787c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800787e:	f000 fe79 	bl	8008574 <vPortExitCritical>

	return xReturn;
 8007882:	69fb      	ldr	r3, [r7, #28]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3720      	adds	r7, #32
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20000c0c 	.word	0x20000c0c
 8007890:	20000c20 	.word	0x20000c20

08007894 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007894:	b480      	push	{r7}
 8007896:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007898:	4b03      	ldr	r3, [pc, #12]	; (80078a8 <vTaskMissedYield+0x14>)
 800789a:	2201      	movs	r2, #1
 800789c:	601a      	str	r2, [r3, #0]
}
 800789e:	bf00      	nop
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	20000c1c 	.word	0x20000c1c

080078ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80078b4:	f000 f852 	bl	800795c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80078b8:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <prvIdleTask+0x28>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d9f9      	bls.n	80078b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80078c0:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <prvIdleTask+0x2c>)
 80078c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80078d0:	e7f0      	b.n	80078b4 <prvIdleTask+0x8>
 80078d2:	bf00      	nop
 80078d4:	20000738 	.word	0x20000738
 80078d8:	e000ed04 	.word	0xe000ed04

080078dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078e2:	2300      	movs	r3, #0
 80078e4:	607b      	str	r3, [r7, #4]
 80078e6:	e00c      	b.n	8007902 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4a12      	ldr	r2, [pc, #72]	; (800793c <prvInitialiseTaskLists+0x60>)
 80078f4:	4413      	add	r3, r2
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fe fc36 	bl	8006168 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3301      	adds	r3, #1
 8007900:	607b      	str	r3, [r7, #4]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b37      	cmp	r3, #55	; 0x37
 8007906:	d9ef      	bls.n	80078e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007908:	480d      	ldr	r0, [pc, #52]	; (8007940 <prvInitialiseTaskLists+0x64>)
 800790a:	f7fe fc2d 	bl	8006168 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800790e:	480d      	ldr	r0, [pc, #52]	; (8007944 <prvInitialiseTaskLists+0x68>)
 8007910:	f7fe fc2a 	bl	8006168 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007914:	480c      	ldr	r0, [pc, #48]	; (8007948 <prvInitialiseTaskLists+0x6c>)
 8007916:	f7fe fc27 	bl	8006168 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800791a:	480c      	ldr	r0, [pc, #48]	; (800794c <prvInitialiseTaskLists+0x70>)
 800791c:	f7fe fc24 	bl	8006168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007920:	480b      	ldr	r0, [pc, #44]	; (8007950 <prvInitialiseTaskLists+0x74>)
 8007922:	f7fe fc21 	bl	8006168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007926:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <prvInitialiseTaskLists+0x78>)
 8007928:	4a05      	ldr	r2, [pc, #20]	; (8007940 <prvInitialiseTaskLists+0x64>)
 800792a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800792c:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <prvInitialiseTaskLists+0x7c>)
 800792e:	4a05      	ldr	r2, [pc, #20]	; (8007944 <prvInitialiseTaskLists+0x68>)
 8007930:	601a      	str	r2, [r3, #0]
}
 8007932:	bf00      	nop
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20000738 	.word	0x20000738
 8007940:	20000b98 	.word	0x20000b98
 8007944:	20000bac 	.word	0x20000bac
 8007948:	20000bc8 	.word	0x20000bc8
 800794c:	20000bdc 	.word	0x20000bdc
 8007950:	20000bf4 	.word	0x20000bf4
 8007954:	20000bc0 	.word	0x20000bc0
 8007958:	20000bc4 	.word	0x20000bc4

0800795c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007962:	e019      	b.n	8007998 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007964:	f000 fdd6 	bl	8008514 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007968:	4b10      	ldr	r3, [pc, #64]	; (80079ac <prvCheckTasksWaitingTermination+0x50>)
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	3304      	adds	r3, #4
 8007974:	4618      	mov	r0, r3
 8007976:	f7fe fc81 	bl	800627c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800797a:	4b0d      	ldr	r3, [pc, #52]	; (80079b0 <prvCheckTasksWaitingTermination+0x54>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3b01      	subs	r3, #1
 8007980:	4a0b      	ldr	r2, [pc, #44]	; (80079b0 <prvCheckTasksWaitingTermination+0x54>)
 8007982:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007984:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <prvCheckTasksWaitingTermination+0x58>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3b01      	subs	r3, #1
 800798a:	4a0a      	ldr	r2, [pc, #40]	; (80079b4 <prvCheckTasksWaitingTermination+0x58>)
 800798c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800798e:	f000 fdf1 	bl	8008574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f810 	bl	80079b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007998:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <prvCheckTasksWaitingTermination+0x58>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e1      	bne.n	8007964 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80079a0:	bf00      	nop
 80079a2:	bf00      	nop
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20000bdc 	.word	0x20000bdc
 80079b0:	20000c08 	.word	0x20000c08
 80079b4:	20000bf0 	.word	0x20000bf0

080079b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d108      	bne.n	80079dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 ff8e 	bl	80088f0 <vPortFree>
				vPortFree( pxTCB );
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 ff8b 	bl	80088f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80079da:	e018      	b.n	8007a0e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d103      	bne.n	80079ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 ff82 	bl	80088f0 <vPortFree>
	}
 80079ec:	e00f      	b.n	8007a0e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d00a      	beq.n	8007a0e <prvDeleteTCB+0x56>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	60fb      	str	r3, [r7, #12]
}
 8007a0a:	bf00      	nop
 8007a0c:	e7fe      	b.n	8007a0c <prvDeleteTCB+0x54>
	}
 8007a0e:	bf00      	nop
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a1e:	4b0c      	ldr	r3, [pc, #48]	; (8007a50 <prvResetNextTaskUnblockTime+0x38>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d104      	bne.n	8007a32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a28:	4b0a      	ldr	r3, [pc, #40]	; (8007a54 <prvResetNextTaskUnblockTime+0x3c>)
 8007a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a30:	e008      	b.n	8007a44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a32:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <prvResetNextTaskUnblockTime+0x38>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	4a04      	ldr	r2, [pc, #16]	; (8007a54 <prvResetNextTaskUnblockTime+0x3c>)
 8007a42:	6013      	str	r3, [r2, #0]
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	20000bc0 	.word	0x20000bc0
 8007a54:	20000c28 	.word	0x20000c28

08007a58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a5e:	4b0b      	ldr	r3, [pc, #44]	; (8007a8c <xTaskGetSchedulerState+0x34>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d102      	bne.n	8007a6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a66:	2301      	movs	r3, #1
 8007a68:	607b      	str	r3, [r7, #4]
 8007a6a:	e008      	b.n	8007a7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a6c:	4b08      	ldr	r3, [pc, #32]	; (8007a90 <xTaskGetSchedulerState+0x38>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d102      	bne.n	8007a7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a74:	2302      	movs	r3, #2
 8007a76:	607b      	str	r3, [r7, #4]
 8007a78:	e001      	b.n	8007a7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a7e:	687b      	ldr	r3, [r7, #4]
	}
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	20000c14 	.word	0x20000c14
 8007a90:	20000c30 	.word	0x20000c30

08007a94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d056      	beq.n	8007b58 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007aaa:	4b2e      	ldr	r3, [pc, #184]	; (8007b64 <xTaskPriorityDisinherit+0xd0>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d00a      	beq.n	8007aca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	60fb      	str	r3, [r7, #12]
}
 8007ac6:	bf00      	nop
 8007ac8:	e7fe      	b.n	8007ac8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10a      	bne.n	8007ae8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	60bb      	str	r3, [r7, #8]
}
 8007ae4:	bf00      	nop
 8007ae6:	e7fe      	b.n	8007ae6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aec:	1e5a      	subs	r2, r3, #1
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d02c      	beq.n	8007b58 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d128      	bne.n	8007b58 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	3304      	adds	r3, #4
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe fbb6 	bl	800627c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b28:	4b0f      	ldr	r3, [pc, #60]	; (8007b68 <xTaskPriorityDisinherit+0xd4>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d903      	bls.n	8007b38 <xTaskPriorityDisinherit+0xa4>
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b34:	4a0c      	ldr	r2, [pc, #48]	; (8007b68 <xTaskPriorityDisinherit+0xd4>)
 8007b36:	6013      	str	r3, [r2, #0]
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4a09      	ldr	r2, [pc, #36]	; (8007b6c <xTaskPriorityDisinherit+0xd8>)
 8007b46:	441a      	add	r2, r3
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4610      	mov	r0, r2
 8007b50:	f7fe fb37 	bl	80061c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b54:	2301      	movs	r3, #1
 8007b56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b58:	697b      	ldr	r3, [r7, #20]
	}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20000734 	.word	0x20000734
 8007b68:	20000c10 	.word	0x20000c10
 8007b6c:	20000738 	.word	0x20000738

08007b70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b7a:	4b21      	ldr	r3, [pc, #132]	; (8007c00 <prvAddCurrentTaskToDelayedList+0x90>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b80:	4b20      	ldr	r3, [pc, #128]	; (8007c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3304      	adds	r3, #4
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fe fb78 	bl	800627c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b92:	d10a      	bne.n	8007baa <prvAddCurrentTaskToDelayedList+0x3a>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d007      	beq.n	8007baa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b9a:	4b1a      	ldr	r3, [pc, #104]	; (8007c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	4819      	ldr	r0, [pc, #100]	; (8007c08 <prvAddCurrentTaskToDelayedList+0x98>)
 8007ba4:	f7fe fb0d 	bl	80061c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ba8:	e026      	b.n	8007bf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4413      	add	r3, r2
 8007bb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bb2:	4b14      	ldr	r3, [pc, #80]	; (8007c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d209      	bcs.n	8007bd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bc2:	4b12      	ldr	r3, [pc, #72]	; (8007c0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	4b0f      	ldr	r3, [pc, #60]	; (8007c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3304      	adds	r3, #4
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4610      	mov	r0, r2
 8007bd0:	f7fe fb1b 	bl	800620a <vListInsert>
}
 8007bd4:	e010      	b.n	8007bf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bd6:	4b0e      	ldr	r3, [pc, #56]	; (8007c10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	4b0a      	ldr	r3, [pc, #40]	; (8007c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3304      	adds	r3, #4
 8007be0:	4619      	mov	r1, r3
 8007be2:	4610      	mov	r0, r2
 8007be4:	f7fe fb11 	bl	800620a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007be8:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d202      	bcs.n	8007bf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007bf2:	4a08      	ldr	r2, [pc, #32]	; (8007c14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	6013      	str	r3, [r2, #0]
}
 8007bf8:	bf00      	nop
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20000c0c 	.word	0x20000c0c
 8007c04:	20000734 	.word	0x20000734
 8007c08:	20000bf4 	.word	0x20000bf4
 8007c0c:	20000bc4 	.word	0x20000bc4
 8007c10:	20000bc0 	.word	0x20000bc0
 8007c14:	20000c28 	.word	0x20000c28

08007c18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b08a      	sub	sp, #40	; 0x28
 8007c1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c22:	f000 fb07 	bl	8008234 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c26:	4b1c      	ldr	r3, [pc, #112]	; (8007c98 <xTimerCreateTimerTask+0x80>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d021      	beq.n	8007c72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c32:	2300      	movs	r3, #0
 8007c34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c36:	1d3a      	adds	r2, r7, #4
 8007c38:	f107 0108 	add.w	r1, r7, #8
 8007c3c:	f107 030c 	add.w	r3, r7, #12
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fe fa77 	bl	8006134 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	9202      	str	r2, [sp, #8]
 8007c4e:	9301      	str	r3, [sp, #4]
 8007c50:	2302      	movs	r3, #2
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	2300      	movs	r3, #0
 8007c56:	460a      	mov	r2, r1
 8007c58:	4910      	ldr	r1, [pc, #64]	; (8007c9c <xTimerCreateTimerTask+0x84>)
 8007c5a:	4811      	ldr	r0, [pc, #68]	; (8007ca0 <xTimerCreateTimerTask+0x88>)
 8007c5c:	f7ff f8de 	bl	8006e1c <xTaskCreateStatic>
 8007c60:	4603      	mov	r3, r0
 8007c62:	4a10      	ldr	r2, [pc, #64]	; (8007ca4 <xTimerCreateTimerTask+0x8c>)
 8007c64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c66:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <xTimerCreateTimerTask+0x8c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10a      	bne.n	8007c8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	613b      	str	r3, [r7, #16]
}
 8007c8a:	bf00      	nop
 8007c8c:	e7fe      	b.n	8007c8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007c8e:	697b      	ldr	r3, [r7, #20]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	20000c64 	.word	0x20000c64
 8007c9c:	08008cf0 	.word	0x08008cf0
 8007ca0:	08007ddd 	.word	0x08007ddd
 8007ca4:	20000c68 	.word	0x20000c68

08007ca8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	; 0x28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10a      	bne.n	8007cd6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	623b      	str	r3, [r7, #32]
}
 8007cd2:	bf00      	nop
 8007cd4:	e7fe      	b.n	8007cd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007cd6:	4b1a      	ldr	r3, [pc, #104]	; (8007d40 <xTimerGenericCommand+0x98>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d02a      	beq.n	8007d34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2b05      	cmp	r3, #5
 8007cee:	dc18      	bgt.n	8007d22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007cf0:	f7ff feb2 	bl	8007a58 <xTaskGetSchedulerState>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d109      	bne.n	8007d0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007cfa:	4b11      	ldr	r3, [pc, #68]	; (8007d40 <xTimerGenericCommand+0x98>)
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	f107 0110 	add.w	r1, r7, #16
 8007d02:	2300      	movs	r3, #0
 8007d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d06:	f7fe fc21 	bl	800654c <xQueueGenericSend>
 8007d0a:	6278      	str	r0, [r7, #36]	; 0x24
 8007d0c:	e012      	b.n	8007d34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d0e:	4b0c      	ldr	r3, [pc, #48]	; (8007d40 <xTimerGenericCommand+0x98>)
 8007d10:	6818      	ldr	r0, [r3, #0]
 8007d12:	f107 0110 	add.w	r1, r7, #16
 8007d16:	2300      	movs	r3, #0
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f7fe fc17 	bl	800654c <xQueueGenericSend>
 8007d1e:	6278      	str	r0, [r7, #36]	; 0x24
 8007d20:	e008      	b.n	8007d34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d22:	4b07      	ldr	r3, [pc, #28]	; (8007d40 <xTimerGenericCommand+0x98>)
 8007d24:	6818      	ldr	r0, [r3, #0]
 8007d26:	f107 0110 	add.w	r1, r7, #16
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	f7fe fd0b 	bl	8006748 <xQueueGenericSendFromISR>
 8007d32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3728      	adds	r7, #40	; 0x28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20000c64 	.word	0x20000c64

08007d44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b088      	sub	sp, #32
 8007d48:	af02      	add	r7, sp, #8
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d4e:	4b22      	ldr	r3, [pc, #136]	; (8007dd8 <prvProcessExpiredTimer+0x94>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fe fa8d 	bl	800627c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d68:	f003 0304 	and.w	r3, r3, #4
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d022      	beq.n	8007db6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	699a      	ldr	r2, [r3, #24]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	18d1      	adds	r1, r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	6978      	ldr	r0, [r7, #20]
 8007d7e:	f000 f8d1 	bl	8007f24 <prvInsertTimerInActiveList>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d01f      	beq.n	8007dc8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d88:	2300      	movs	r3, #0
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	2100      	movs	r1, #0
 8007d92:	6978      	ldr	r0, [r7, #20]
 8007d94:	f7ff ff88 	bl	8007ca8 <xTimerGenericCommand>
 8007d98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d113      	bne.n	8007dc8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	60fb      	str	r3, [r7, #12]
}
 8007db2:	bf00      	nop
 8007db4:	e7fe      	b.n	8007db4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dbc:	f023 0301 	bic.w	r3, r3, #1
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	6a1b      	ldr	r3, [r3, #32]
 8007dcc:	6978      	ldr	r0, [r7, #20]
 8007dce:	4798      	blx	r3
}
 8007dd0:	bf00      	nop
 8007dd2:	3718      	adds	r7, #24
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	20000c5c 	.word	0x20000c5c

08007ddc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007de4:	f107 0308 	add.w	r3, r7, #8
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f857 	bl	8007e9c <prvGetNextExpireTime>
 8007dee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	4619      	mov	r1, r3
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f000 f803 	bl	8007e00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007dfa:	f000 f8d5 	bl	8007fa8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dfe:	e7f1      	b.n	8007de4 <prvTimerTask+0x8>

08007e00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e0a:	f7ff fa43 	bl	8007294 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e0e:	f107 0308 	add.w	r3, r7, #8
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 f866 	bl	8007ee4 <prvSampleTimeNow>
 8007e18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d130      	bne.n	8007e82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10a      	bne.n	8007e3c <prvProcessTimerOrBlockTask+0x3c>
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d806      	bhi.n	8007e3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007e2e:	f7ff fa3f 	bl	80072b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e32:	68f9      	ldr	r1, [r7, #12]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7ff ff85 	bl	8007d44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e3a:	e024      	b.n	8007e86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d008      	beq.n	8007e54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e42:	4b13      	ldr	r3, [pc, #76]	; (8007e90 <prvProcessTimerOrBlockTask+0x90>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <prvProcessTimerOrBlockTask+0x50>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e000      	b.n	8007e52 <prvProcessTimerOrBlockTask+0x52>
 8007e50:	2300      	movs	r3, #0
 8007e52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e54:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <prvProcessTimerOrBlockTask+0x94>)
 8007e56:	6818      	ldr	r0, [r3, #0]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	4619      	mov	r1, r3
 8007e62:	f7fe ffa7 	bl	8006db4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e66:	f7ff fa23 	bl	80072b0 <xTaskResumeAll>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10a      	bne.n	8007e86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e70:	4b09      	ldr	r3, [pc, #36]	; (8007e98 <prvProcessTimerOrBlockTask+0x98>)
 8007e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	f3bf 8f6f 	isb	sy
}
 8007e80:	e001      	b.n	8007e86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e82:	f7ff fa15 	bl	80072b0 <xTaskResumeAll>
}
 8007e86:	bf00      	nop
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000c60 	.word	0x20000c60
 8007e94:	20000c64 	.word	0x20000c64
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ea4:	4b0e      	ldr	r3, [pc, #56]	; (8007ee0 <prvGetNextExpireTime+0x44>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <prvGetNextExpireTime+0x16>
 8007eae:	2201      	movs	r2, #1
 8007eb0:	e000      	b.n	8007eb4 <prvGetNextExpireTime+0x18>
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d105      	bne.n	8007ecc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ec0:	4b07      	ldr	r3, [pc, #28]	; (8007ee0 <prvGetNextExpireTime+0x44>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	e001      	b.n	8007ed0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	20000c5c 	.word	0x20000c5c

08007ee4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007eec:	f7ff fa7e 	bl	80073ec <xTaskGetTickCount>
 8007ef0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ef2:	4b0b      	ldr	r3, [pc, #44]	; (8007f20 <prvSampleTimeNow+0x3c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d205      	bcs.n	8007f08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007efc:	f000 f936 	bl	800816c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	e002      	b.n	8007f0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f0e:	4a04      	ldr	r2, [pc, #16]	; (8007f20 <prvSampleTimeNow+0x3c>)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007f14:	68fb      	ldr	r3, [r7, #12]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20000c6c 	.word	0x20000c6c

08007f24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f32:	2300      	movs	r3, #0
 8007f34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d812      	bhi.n	8007f70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	1ad2      	subs	r2, r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d302      	bcc.n	8007f5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	617b      	str	r3, [r7, #20]
 8007f5c:	e01b      	b.n	8007f96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f5e:	4b10      	ldr	r3, [pc, #64]	; (8007fa0 <prvInsertTimerInActiveList+0x7c>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	3304      	adds	r3, #4
 8007f66:	4619      	mov	r1, r3
 8007f68:	4610      	mov	r0, r2
 8007f6a:	f7fe f94e 	bl	800620a <vListInsert>
 8007f6e:	e012      	b.n	8007f96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d206      	bcs.n	8007f86 <prvInsertTimerInActiveList+0x62>
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d302      	bcc.n	8007f86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f80:	2301      	movs	r3, #1
 8007f82:	617b      	str	r3, [r7, #20]
 8007f84:	e007      	b.n	8007f96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f86:	4b07      	ldr	r3, [pc, #28]	; (8007fa4 <prvInsertTimerInActiveList+0x80>)
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4610      	mov	r0, r2
 8007f92:	f7fe f93a 	bl	800620a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f96:	697b      	ldr	r3, [r7, #20]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	20000c60 	.word	0x20000c60
 8007fa4:	20000c5c 	.word	0x20000c5c

08007fa8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08e      	sub	sp, #56	; 0x38
 8007fac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fae:	e0ca      	b.n	8008146 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	da18      	bge.n	8007fe8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007fb6:	1d3b      	adds	r3, r7, #4
 8007fb8:	3304      	adds	r3, #4
 8007fba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10a      	bne.n	8007fd8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	61fb      	str	r3, [r7, #28]
}
 8007fd4:	bf00      	nop
 8007fd6:	e7fe      	b.n	8007fd6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fde:	6850      	ldr	r0, [r2, #4]
 8007fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fe2:	6892      	ldr	r2, [r2, #8]
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f2c0 80aa 	blt.w	8008144 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff6:	695b      	ldr	r3, [r3, #20]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d004      	beq.n	8008006 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffe:	3304      	adds	r3, #4
 8008000:	4618      	mov	r0, r3
 8008002:	f7fe f93b 	bl	800627c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008006:	463b      	mov	r3, r7
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff ff6b 	bl	8007ee4 <prvSampleTimeNow>
 800800e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b09      	cmp	r3, #9
 8008014:	f200 8097 	bhi.w	8008146 <prvProcessReceivedCommands+0x19e>
 8008018:	a201      	add	r2, pc, #4	; (adr r2, 8008020 <prvProcessReceivedCommands+0x78>)
 800801a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801e:	bf00      	nop
 8008020:	08008049 	.word	0x08008049
 8008024:	08008049 	.word	0x08008049
 8008028:	08008049 	.word	0x08008049
 800802c:	080080bd 	.word	0x080080bd
 8008030:	080080d1 	.word	0x080080d1
 8008034:	0800811b 	.word	0x0800811b
 8008038:	08008049 	.word	0x08008049
 800803c:	08008049 	.word	0x08008049
 8008040:	080080bd 	.word	0x080080bd
 8008044:	080080d1 	.word	0x080080d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800804e:	f043 0301 	orr.w	r3, r3, #1
 8008052:	b2da      	uxtb	r2, r3
 8008054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	18d1      	adds	r1, r2, r3
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008068:	f7ff ff5c 	bl	8007f24 <prvInsertTimerInActiveList>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d069      	beq.n	8008146 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008078:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	2b00      	cmp	r3, #0
 8008086:	d05e      	beq.n	8008146 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	441a      	add	r2, r3
 8008090:	2300      	movs	r3, #0
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	2300      	movs	r3, #0
 8008096:	2100      	movs	r1, #0
 8008098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800809a:	f7ff fe05 	bl	8007ca8 <xTimerGenericCommand>
 800809e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d14f      	bne.n	8008146 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	61bb      	str	r3, [r7, #24]
}
 80080b8:	bf00      	nop
 80080ba:	e7fe      	b.n	80080ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080c2:	f023 0301 	bic.w	r3, r3, #1
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80080ce:	e03a      	b.n	8008146 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080d6:	f043 0301 	orr.w	r3, r3, #1
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10a      	bne.n	8008106 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	617b      	str	r3, [r7, #20]
}
 8008102:	bf00      	nop
 8008104:	e7fe      	b.n	8008104 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008108:	699a      	ldr	r2, [r3, #24]
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	18d1      	adds	r1, r2, r3
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008114:	f7ff ff06 	bl	8007f24 <prvInsertTimerInActiveList>
					break;
 8008118:	e015      	b.n	8008146 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d103      	bne.n	8008130 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800812a:	f000 fbe1 	bl	80088f0 <vPortFree>
 800812e:	e00a      	b.n	8008146 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008136:	f023 0301 	bic.w	r3, r3, #1
 800813a:	b2da      	uxtb	r2, r3
 800813c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008142:	e000      	b.n	8008146 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008144:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008146:	4b08      	ldr	r3, [pc, #32]	; (8008168 <prvProcessReceivedCommands+0x1c0>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	1d39      	adds	r1, r7, #4
 800814c:	2200      	movs	r2, #0
 800814e:	4618      	mov	r0, r3
 8008150:	f7fe fb96 	bl	8006880 <xQueueReceive>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	f47f af2a 	bne.w	8007fb0 <prvProcessReceivedCommands+0x8>
	}
}
 800815c:	bf00      	nop
 800815e:	bf00      	nop
 8008160:	3730      	adds	r7, #48	; 0x30
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20000c64 	.word	0x20000c64

0800816c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008172:	e048      	b.n	8008206 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008174:	4b2d      	ldr	r3, [pc, #180]	; (800822c <prvSwitchTimerLists+0xc0>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800817e:	4b2b      	ldr	r3, [pc, #172]	; (800822c <prvSwitchTimerLists+0xc0>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	3304      	adds	r3, #4
 800818c:	4618      	mov	r0, r3
 800818e:	f7fe f875 	bl	800627c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081a0:	f003 0304 	and.w	r3, r3, #4
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d02e      	beq.n	8008206 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	4413      	add	r3, r2
 80081b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d90e      	bls.n	80081d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081c6:	4b19      	ldr	r3, [pc, #100]	; (800822c <prvSwitchTimerLists+0xc0>)
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3304      	adds	r3, #4
 80081ce:	4619      	mov	r1, r3
 80081d0:	4610      	mov	r0, r2
 80081d2:	f7fe f81a 	bl	800620a <vListInsert>
 80081d6:	e016      	b.n	8008206 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081d8:	2300      	movs	r3, #0
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	2300      	movs	r3, #0
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	2100      	movs	r1, #0
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f7ff fd60 	bl	8007ca8 <xTimerGenericCommand>
 80081e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10a      	bne.n	8008206 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	603b      	str	r3, [r7, #0]
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008206:	4b09      	ldr	r3, [pc, #36]	; (800822c <prvSwitchTimerLists+0xc0>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1b1      	bne.n	8008174 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008210:	4b06      	ldr	r3, [pc, #24]	; (800822c <prvSwitchTimerLists+0xc0>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008216:	4b06      	ldr	r3, [pc, #24]	; (8008230 <prvSwitchTimerLists+0xc4>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a04      	ldr	r2, [pc, #16]	; (800822c <prvSwitchTimerLists+0xc0>)
 800821c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800821e:	4a04      	ldr	r2, [pc, #16]	; (8008230 <prvSwitchTimerLists+0xc4>)
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	6013      	str	r3, [r2, #0]
}
 8008224:	bf00      	nop
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20000c5c 	.word	0x20000c5c
 8008230:	20000c60 	.word	0x20000c60

08008234 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800823a:	f000 f96b 	bl	8008514 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800823e:	4b15      	ldr	r3, [pc, #84]	; (8008294 <prvCheckForValidListAndQueue+0x60>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d120      	bne.n	8008288 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008246:	4814      	ldr	r0, [pc, #80]	; (8008298 <prvCheckForValidListAndQueue+0x64>)
 8008248:	f7fd ff8e 	bl	8006168 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800824c:	4813      	ldr	r0, [pc, #76]	; (800829c <prvCheckForValidListAndQueue+0x68>)
 800824e:	f7fd ff8b 	bl	8006168 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008252:	4b13      	ldr	r3, [pc, #76]	; (80082a0 <prvCheckForValidListAndQueue+0x6c>)
 8008254:	4a10      	ldr	r2, [pc, #64]	; (8008298 <prvCheckForValidListAndQueue+0x64>)
 8008256:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008258:	4b12      	ldr	r3, [pc, #72]	; (80082a4 <prvCheckForValidListAndQueue+0x70>)
 800825a:	4a10      	ldr	r2, [pc, #64]	; (800829c <prvCheckForValidListAndQueue+0x68>)
 800825c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800825e:	2300      	movs	r3, #0
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	4b11      	ldr	r3, [pc, #68]	; (80082a8 <prvCheckForValidListAndQueue+0x74>)
 8008264:	4a11      	ldr	r2, [pc, #68]	; (80082ac <prvCheckForValidListAndQueue+0x78>)
 8008266:	2110      	movs	r1, #16
 8008268:	200a      	movs	r0, #10
 800826a:	f7fe f899 	bl	80063a0 <xQueueGenericCreateStatic>
 800826e:	4603      	mov	r3, r0
 8008270:	4a08      	ldr	r2, [pc, #32]	; (8008294 <prvCheckForValidListAndQueue+0x60>)
 8008272:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008274:	4b07      	ldr	r3, [pc, #28]	; (8008294 <prvCheckForValidListAndQueue+0x60>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d005      	beq.n	8008288 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800827c:	4b05      	ldr	r3, [pc, #20]	; (8008294 <prvCheckForValidListAndQueue+0x60>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	490b      	ldr	r1, [pc, #44]	; (80082b0 <prvCheckForValidListAndQueue+0x7c>)
 8008282:	4618      	mov	r0, r3
 8008284:	f7fe fd6c 	bl	8006d60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008288:	f000 f974 	bl	8008574 <vPortExitCritical>
}
 800828c:	bf00      	nop
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20000c64 	.word	0x20000c64
 8008298:	20000c34 	.word	0x20000c34
 800829c:	20000c48 	.word	0x20000c48
 80082a0:	20000c5c 	.word	0x20000c5c
 80082a4:	20000c60 	.word	0x20000c60
 80082a8:	20000d10 	.word	0x20000d10
 80082ac:	20000c70 	.word	0x20000c70
 80082b0:	08008cf8 	.word	0x08008cf8

080082b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	3b04      	subs	r3, #4
 80082c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80082cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3b04      	subs	r3, #4
 80082d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f023 0201 	bic.w	r2, r3, #1
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3b04      	subs	r3, #4
 80082e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082e4:	4a0c      	ldr	r2, [pc, #48]	; (8008318 <pxPortInitialiseStack+0x64>)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	3b14      	subs	r3, #20
 80082ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	3b04      	subs	r3, #4
 80082fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f06f 0202 	mvn.w	r2, #2
 8008302:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	3b20      	subs	r3, #32
 8008308:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800830a:	68fb      	ldr	r3, [r7, #12]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	0800831d 	.word	0x0800831d

0800831c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008326:	4b12      	ldr	r3, [pc, #72]	; (8008370 <prvTaskExitError+0x54>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832e:	d00a      	beq.n	8008346 <prvTaskExitError+0x2a>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	60fb      	str	r3, [r7, #12]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <prvTaskExitError+0x28>
	__asm volatile
 8008346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	60bb      	str	r3, [r7, #8]
}
 8008358:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800835a:	bf00      	nop
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0fc      	beq.n	800835c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008362:	bf00      	nop
 8008364:	bf00      	nop
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	20000014 	.word	0x20000014
	...

08008380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008380:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <pxCurrentTCBConst2>)
 8008382:	6819      	ldr	r1, [r3, #0]
 8008384:	6808      	ldr	r0, [r1, #0]
 8008386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838a:	f380 8809 	msr	PSP, r0
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f04f 0000 	mov.w	r0, #0
 8008396:	f380 8811 	msr	BASEPRI, r0
 800839a:	4770      	bx	lr
 800839c:	f3af 8000 	nop.w

080083a0 <pxCurrentTCBConst2>:
 80083a0:	20000734 	.word	0x20000734
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop

080083a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083a8:	4808      	ldr	r0, [pc, #32]	; (80083cc <prvPortStartFirstTask+0x24>)
 80083aa:	6800      	ldr	r0, [r0, #0]
 80083ac:	6800      	ldr	r0, [r0, #0]
 80083ae:	f380 8808 	msr	MSP, r0
 80083b2:	f04f 0000 	mov.w	r0, #0
 80083b6:	f380 8814 	msr	CONTROL, r0
 80083ba:	b662      	cpsie	i
 80083bc:	b661      	cpsie	f
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	df00      	svc	0
 80083c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083ca:	bf00      	nop
 80083cc:	e000ed08 	.word	0xe000ed08

080083d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80083d6:	4b46      	ldr	r3, [pc, #280]	; (80084f0 <xPortStartScheduler+0x120>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a46      	ldr	r2, [pc, #280]	; (80084f4 <xPortStartScheduler+0x124>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d10a      	bne.n	80083f6 <xPortStartScheduler+0x26>
	__asm volatile
 80083e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e4:	f383 8811 	msr	BASEPRI, r3
 80083e8:	f3bf 8f6f 	isb	sy
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	613b      	str	r3, [r7, #16]
}
 80083f2:	bf00      	nop
 80083f4:	e7fe      	b.n	80083f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80083f6:	4b3e      	ldr	r3, [pc, #248]	; (80084f0 <xPortStartScheduler+0x120>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a3f      	ldr	r2, [pc, #252]	; (80084f8 <xPortStartScheduler+0x128>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d10a      	bne.n	8008416 <xPortStartScheduler+0x46>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	60fb      	str	r3, [r7, #12]
}
 8008412:	bf00      	nop
 8008414:	e7fe      	b.n	8008414 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008416:	4b39      	ldr	r3, [pc, #228]	; (80084fc <xPortStartScheduler+0x12c>)
 8008418:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	b2db      	uxtb	r3, r3
 8008420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	22ff      	movs	r2, #255	; 0xff
 8008426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	b2db      	uxtb	r3, r3
 8008434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008438:	b2da      	uxtb	r2, r3
 800843a:	4b31      	ldr	r3, [pc, #196]	; (8008500 <xPortStartScheduler+0x130>)
 800843c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800843e:	4b31      	ldr	r3, [pc, #196]	; (8008504 <xPortStartScheduler+0x134>)
 8008440:	2207      	movs	r2, #7
 8008442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008444:	e009      	b.n	800845a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008446:	4b2f      	ldr	r3, [pc, #188]	; (8008504 <xPortStartScheduler+0x134>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3b01      	subs	r3, #1
 800844c:	4a2d      	ldr	r2, [pc, #180]	; (8008504 <xPortStartScheduler+0x134>)
 800844e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008450:	78fb      	ldrb	r3, [r7, #3]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	005b      	lsls	r3, r3, #1
 8008456:	b2db      	uxtb	r3, r3
 8008458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800845a:	78fb      	ldrb	r3, [r7, #3]
 800845c:	b2db      	uxtb	r3, r3
 800845e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008462:	2b80      	cmp	r3, #128	; 0x80
 8008464:	d0ef      	beq.n	8008446 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008466:	4b27      	ldr	r3, [pc, #156]	; (8008504 <xPortStartScheduler+0x134>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f1c3 0307 	rsb	r3, r3, #7
 800846e:	2b04      	cmp	r3, #4
 8008470:	d00a      	beq.n	8008488 <xPortStartScheduler+0xb8>
	__asm volatile
 8008472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	60bb      	str	r3, [r7, #8]
}
 8008484:	bf00      	nop
 8008486:	e7fe      	b.n	8008486 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008488:	4b1e      	ldr	r3, [pc, #120]	; (8008504 <xPortStartScheduler+0x134>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	021b      	lsls	r3, r3, #8
 800848e:	4a1d      	ldr	r2, [pc, #116]	; (8008504 <xPortStartScheduler+0x134>)
 8008490:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008492:	4b1c      	ldr	r3, [pc, #112]	; (8008504 <xPortStartScheduler+0x134>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800849a:	4a1a      	ldr	r2, [pc, #104]	; (8008504 <xPortStartScheduler+0x134>)
 800849c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084a6:	4b18      	ldr	r3, [pc, #96]	; (8008508 <xPortStartScheduler+0x138>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a17      	ldr	r2, [pc, #92]	; (8008508 <xPortStartScheduler+0x138>)
 80084ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084b2:	4b15      	ldr	r3, [pc, #84]	; (8008508 <xPortStartScheduler+0x138>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a14      	ldr	r2, [pc, #80]	; (8008508 <xPortStartScheduler+0x138>)
 80084b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80084bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084be:	f000 f8dd 	bl	800867c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084c2:	4b12      	ldr	r3, [pc, #72]	; (800850c <xPortStartScheduler+0x13c>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80084c8:	f000 f8fc 	bl	80086c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80084cc:	4b10      	ldr	r3, [pc, #64]	; (8008510 <xPortStartScheduler+0x140>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a0f      	ldr	r2, [pc, #60]	; (8008510 <xPortStartScheduler+0x140>)
 80084d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80084d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80084d8:	f7ff ff66 	bl	80083a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084dc:	f7ff f850 	bl	8007580 <vTaskSwitchContext>
	prvTaskExitError();
 80084e0:	f7ff ff1c 	bl	800831c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3718      	adds	r7, #24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	e000ed00 	.word	0xe000ed00
 80084f4:	410fc271 	.word	0x410fc271
 80084f8:	410fc270 	.word	0x410fc270
 80084fc:	e000e400 	.word	0xe000e400
 8008500:	20000d60 	.word	0x20000d60
 8008504:	20000d64 	.word	0x20000d64
 8008508:	e000ed20 	.word	0xe000ed20
 800850c:	20000014 	.word	0x20000014
 8008510:	e000ef34 	.word	0xe000ef34

08008514 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	607b      	str	r3, [r7, #4]
}
 800852c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800852e:	4b0f      	ldr	r3, [pc, #60]	; (800856c <vPortEnterCritical+0x58>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3301      	adds	r3, #1
 8008534:	4a0d      	ldr	r2, [pc, #52]	; (800856c <vPortEnterCritical+0x58>)
 8008536:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008538:	4b0c      	ldr	r3, [pc, #48]	; (800856c <vPortEnterCritical+0x58>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d10f      	bne.n	8008560 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008540:	4b0b      	ldr	r3, [pc, #44]	; (8008570 <vPortEnterCritical+0x5c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <vPortEnterCritical+0x4c>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	603b      	str	r3, [r7, #0]
}
 800855c:	bf00      	nop
 800855e:	e7fe      	b.n	800855e <vPortEnterCritical+0x4a>
	}
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	20000014 	.word	0x20000014
 8008570:	e000ed04 	.word	0xe000ed04

08008574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800857a:	4b12      	ldr	r3, [pc, #72]	; (80085c4 <vPortExitCritical+0x50>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10a      	bne.n	8008598 <vPortExitCritical+0x24>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	607b      	str	r3, [r7, #4]
}
 8008594:	bf00      	nop
 8008596:	e7fe      	b.n	8008596 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008598:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <vPortExitCritical+0x50>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	3b01      	subs	r3, #1
 800859e:	4a09      	ldr	r2, [pc, #36]	; (80085c4 <vPortExitCritical+0x50>)
 80085a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80085a2:	4b08      	ldr	r3, [pc, #32]	; (80085c4 <vPortExitCritical+0x50>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d105      	bne.n	80085b6 <vPortExitCritical+0x42>
 80085aa:	2300      	movs	r3, #0
 80085ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	f383 8811 	msr	BASEPRI, r3
}
 80085b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80085b6:	bf00      	nop
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	20000014 	.word	0x20000014
	...

080085d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085d0:	f3ef 8009 	mrs	r0, PSP
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	4b15      	ldr	r3, [pc, #84]	; (8008630 <pxCurrentTCBConst>)
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	f01e 0f10 	tst.w	lr, #16
 80085e0:	bf08      	it	eq
 80085e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80085e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ea:	6010      	str	r0, [r2, #0]
 80085ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80085f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80085f4:	f380 8811 	msr	BASEPRI, r0
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f7fe ffbe 	bl	8007580 <vTaskSwitchContext>
 8008604:	f04f 0000 	mov.w	r0, #0
 8008608:	f380 8811 	msr	BASEPRI, r0
 800860c:	bc09      	pop	{r0, r3}
 800860e:	6819      	ldr	r1, [r3, #0]
 8008610:	6808      	ldr	r0, [r1, #0]
 8008612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008616:	f01e 0f10 	tst.w	lr, #16
 800861a:	bf08      	it	eq
 800861c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008620:	f380 8809 	msr	PSP, r0
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	f3af 8000 	nop.w

08008630 <pxCurrentTCBConst>:
 8008630:	20000734 	.word	0x20000734
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008634:	bf00      	nop
 8008636:	bf00      	nop

08008638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	607b      	str	r3, [r7, #4]
}
 8008650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008652:	f7fe fedb 	bl	800740c <xTaskIncrementTick>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d003      	beq.n	8008664 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800865c:	4b06      	ldr	r3, [pc, #24]	; (8008678 <xPortSysTickHandler+0x40>)
 800865e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	2300      	movs	r3, #0
 8008666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	f383 8811 	msr	BASEPRI, r3
}
 800866e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	e000ed04 	.word	0xe000ed04

0800867c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800867c:	b480      	push	{r7}
 800867e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008680:	4b0b      	ldr	r3, [pc, #44]	; (80086b0 <vPortSetupTimerInterrupt+0x34>)
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008686:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <vPortSetupTimerInterrupt+0x38>)
 8008688:	2200      	movs	r2, #0
 800868a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800868c:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <vPortSetupTimerInterrupt+0x3c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a0a      	ldr	r2, [pc, #40]	; (80086bc <vPortSetupTimerInterrupt+0x40>)
 8008692:	fba2 2303 	umull	r2, r3, r2, r3
 8008696:	099b      	lsrs	r3, r3, #6
 8008698:	4a09      	ldr	r2, [pc, #36]	; (80086c0 <vPortSetupTimerInterrupt+0x44>)
 800869a:	3b01      	subs	r3, #1
 800869c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800869e:	4b04      	ldr	r3, [pc, #16]	; (80086b0 <vPortSetupTimerInterrupt+0x34>)
 80086a0:	2207      	movs	r2, #7
 80086a2:	601a      	str	r2, [r3, #0]
}
 80086a4:	bf00      	nop
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	e000e010 	.word	0xe000e010
 80086b4:	e000e018 	.word	0xe000e018
 80086b8:	20000008 	.word	0x20000008
 80086bc:	10624dd3 	.word	0x10624dd3
 80086c0:	e000e014 	.word	0xe000e014

080086c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80086c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80086d4 <vPortEnableVFP+0x10>
 80086c8:	6801      	ldr	r1, [r0, #0]
 80086ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ce:	6001      	str	r1, [r0, #0]
 80086d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80086d2:	bf00      	nop
 80086d4:	e000ed88 	.word	0xe000ed88

080086d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80086de:	f3ef 8305 	mrs	r3, IPSR
 80086e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2b0f      	cmp	r3, #15
 80086e8:	d914      	bls.n	8008714 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80086ea:	4a17      	ldr	r2, [pc, #92]	; (8008748 <vPortValidateInterruptPriority+0x70>)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4413      	add	r3, r2
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80086f4:	4b15      	ldr	r3, [pc, #84]	; (800874c <vPortValidateInterruptPriority+0x74>)
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	7afa      	ldrb	r2, [r7, #11]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d20a      	bcs.n	8008714 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	607b      	str	r3, [r7, #4]
}
 8008710:	bf00      	nop
 8008712:	e7fe      	b.n	8008712 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008714:	4b0e      	ldr	r3, [pc, #56]	; (8008750 <vPortValidateInterruptPriority+0x78>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800871c:	4b0d      	ldr	r3, [pc, #52]	; (8008754 <vPortValidateInterruptPriority+0x7c>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	429a      	cmp	r2, r3
 8008722:	d90a      	bls.n	800873a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	603b      	str	r3, [r7, #0]
}
 8008736:	bf00      	nop
 8008738:	e7fe      	b.n	8008738 <vPortValidateInterruptPriority+0x60>
	}
 800873a:	bf00      	nop
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	e000e3f0 	.word	0xe000e3f0
 800874c:	20000d60 	.word	0x20000d60
 8008750:	e000ed0c 	.word	0xe000ed0c
 8008754:	20000d64 	.word	0x20000d64

08008758 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08a      	sub	sp, #40	; 0x28
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008760:	2300      	movs	r3, #0
 8008762:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008764:	f7fe fd96 	bl	8007294 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008768:	4b5b      	ldr	r3, [pc, #364]	; (80088d8 <pvPortMalloc+0x180>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008770:	f000 f920 	bl	80089b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008774:	4b59      	ldr	r3, [pc, #356]	; (80088dc <pvPortMalloc+0x184>)
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4013      	ands	r3, r2
 800877c:	2b00      	cmp	r3, #0
 800877e:	f040 8093 	bne.w	80088a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d01d      	beq.n	80087c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008788:	2208      	movs	r2, #8
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4413      	add	r3, r2
 800878e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f003 0307 	and.w	r3, r3, #7
 8008796:	2b00      	cmp	r3, #0
 8008798:	d014      	beq.n	80087c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f023 0307 	bic.w	r3, r3, #7
 80087a0:	3308      	adds	r3, #8
 80087a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00a      	beq.n	80087c4 <pvPortMalloc+0x6c>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	617b      	str	r3, [r7, #20]
}
 80087c0:	bf00      	nop
 80087c2:	e7fe      	b.n	80087c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d06e      	beq.n	80088a8 <pvPortMalloc+0x150>
 80087ca:	4b45      	ldr	r3, [pc, #276]	; (80088e0 <pvPortMalloc+0x188>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d869      	bhi.n	80088a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80087d4:	4b43      	ldr	r3, [pc, #268]	; (80088e4 <pvPortMalloc+0x18c>)
 80087d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80087d8:	4b42      	ldr	r3, [pc, #264]	; (80088e4 <pvPortMalloc+0x18c>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087de:	e004      	b.n	80087ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d903      	bls.n	80087fc <pvPortMalloc+0xa4>
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1f1      	bne.n	80087e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087fc:	4b36      	ldr	r3, [pc, #216]	; (80088d8 <pvPortMalloc+0x180>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008802:	429a      	cmp	r2, r3
 8008804:	d050      	beq.n	80088a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008806:	6a3b      	ldr	r3, [r7, #32]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2208      	movs	r2, #8
 800880c:	4413      	add	r3, r2
 800880e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	1ad2      	subs	r2, r2, r3
 8008820:	2308      	movs	r3, #8
 8008822:	005b      	lsls	r3, r3, #1
 8008824:	429a      	cmp	r2, r3
 8008826:	d91f      	bls.n	8008868 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4413      	add	r3, r2
 800882e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	f003 0307 	and.w	r3, r3, #7
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00a      	beq.n	8008850 <pvPortMalloc+0xf8>
	__asm volatile
 800883a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	613b      	str	r3, [r7, #16]
}
 800884c:	bf00      	nop
 800884e:	e7fe      	b.n	800884e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	685a      	ldr	r2, [r3, #4]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	1ad2      	subs	r2, r2, r3
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008862:	69b8      	ldr	r0, [r7, #24]
 8008864:	f000 f908 	bl	8008a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008868:	4b1d      	ldr	r3, [pc, #116]	; (80088e0 <pvPortMalloc+0x188>)
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	4a1b      	ldr	r2, [pc, #108]	; (80088e0 <pvPortMalloc+0x188>)
 8008874:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008876:	4b1a      	ldr	r3, [pc, #104]	; (80088e0 <pvPortMalloc+0x188>)
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	4b1b      	ldr	r3, [pc, #108]	; (80088e8 <pvPortMalloc+0x190>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	429a      	cmp	r2, r3
 8008880:	d203      	bcs.n	800888a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008882:	4b17      	ldr	r3, [pc, #92]	; (80088e0 <pvPortMalloc+0x188>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a18      	ldr	r2, [pc, #96]	; (80088e8 <pvPortMalloc+0x190>)
 8008888:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	4b13      	ldr	r3, [pc, #76]	; (80088dc <pvPortMalloc+0x184>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	431a      	orrs	r2, r3
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	2200      	movs	r2, #0
 800889c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800889e:	4b13      	ldr	r3, [pc, #76]	; (80088ec <pvPortMalloc+0x194>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3301      	adds	r3, #1
 80088a4:	4a11      	ldr	r2, [pc, #68]	; (80088ec <pvPortMalloc+0x194>)
 80088a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80088a8:	f7fe fd02 	bl	80072b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	f003 0307 	and.w	r3, r3, #7
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <pvPortMalloc+0x174>
	__asm volatile
 80088b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	60fb      	str	r3, [r7, #12]
}
 80088c8:	bf00      	nop
 80088ca:	e7fe      	b.n	80088ca <pvPortMalloc+0x172>
	return pvReturn;
 80088cc:	69fb      	ldr	r3, [r7, #28]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3728      	adds	r7, #40	; 0x28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20003480 	.word	0x20003480
 80088dc:	20003494 	.word	0x20003494
 80088e0:	20003484 	.word	0x20003484
 80088e4:	20003478 	.word	0x20003478
 80088e8:	20003488 	.word	0x20003488
 80088ec:	2000348c 	.word	0x2000348c

080088f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d04d      	beq.n	800899e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008902:	2308      	movs	r3, #8
 8008904:	425b      	negs	r3, r3
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	4413      	add	r3, r2
 800890a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	4b24      	ldr	r3, [pc, #144]	; (80089a8 <vPortFree+0xb8>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4013      	ands	r3, r2
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10a      	bne.n	8008934 <vPortFree+0x44>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	60fb      	str	r3, [r7, #12]
}
 8008930:	bf00      	nop
 8008932:	e7fe      	b.n	8008932 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00a      	beq.n	8008952 <vPortFree+0x62>
	__asm volatile
 800893c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	60bb      	str	r3, [r7, #8]
}
 800894e:	bf00      	nop
 8008950:	e7fe      	b.n	8008950 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	685a      	ldr	r2, [r3, #4]
 8008956:	4b14      	ldr	r3, [pc, #80]	; (80089a8 <vPortFree+0xb8>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4013      	ands	r3, r2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d01e      	beq.n	800899e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d11a      	bne.n	800899e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	4b0e      	ldr	r3, [pc, #56]	; (80089a8 <vPortFree+0xb8>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	43db      	mvns	r3, r3
 8008972:	401a      	ands	r2, r3
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008978:	f7fe fc8c 	bl	8007294 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	4b0a      	ldr	r3, [pc, #40]	; (80089ac <vPortFree+0xbc>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4413      	add	r3, r2
 8008986:	4a09      	ldr	r2, [pc, #36]	; (80089ac <vPortFree+0xbc>)
 8008988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800898a:	6938      	ldr	r0, [r7, #16]
 800898c:	f000 f874 	bl	8008a78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008990:	4b07      	ldr	r3, [pc, #28]	; (80089b0 <vPortFree+0xc0>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3301      	adds	r3, #1
 8008996:	4a06      	ldr	r2, [pc, #24]	; (80089b0 <vPortFree+0xc0>)
 8008998:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800899a:	f7fe fc89 	bl	80072b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800899e:	bf00      	nop
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	20003494 	.word	0x20003494
 80089ac:	20003484 	.word	0x20003484
 80089b0:	20003490 	.word	0x20003490

080089b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80089ba:	f242 7310 	movw	r3, #10000	; 0x2710
 80089be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80089c0:	4b27      	ldr	r3, [pc, #156]	; (8008a60 <prvHeapInit+0xac>)
 80089c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f003 0307 	and.w	r3, r3, #7
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00c      	beq.n	80089e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3307      	adds	r3, #7
 80089d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f023 0307 	bic.w	r3, r3, #7
 80089da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	4a1f      	ldr	r2, [pc, #124]	; (8008a60 <prvHeapInit+0xac>)
 80089e4:	4413      	add	r3, r2
 80089e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089ec:	4a1d      	ldr	r2, [pc, #116]	; (8008a64 <prvHeapInit+0xb0>)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089f2:	4b1c      	ldr	r3, [pc, #112]	; (8008a64 <prvHeapInit+0xb0>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	4413      	add	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a00:	2208      	movs	r2, #8
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	1a9b      	subs	r3, r3, r2
 8008a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f023 0307 	bic.w	r3, r3, #7
 8008a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4a15      	ldr	r2, [pc, #84]	; (8008a68 <prvHeapInit+0xb4>)
 8008a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a16:	4b14      	ldr	r3, [pc, #80]	; (8008a68 <prvHeapInit+0xb4>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a1e:	4b12      	ldr	r3, [pc, #72]	; (8008a68 <prvHeapInit+0xb4>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2200      	movs	r2, #0
 8008a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	1ad2      	subs	r2, r2, r3
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a34:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <prvHeapInit+0xb4>)
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	4a0a      	ldr	r2, [pc, #40]	; (8008a6c <prvHeapInit+0xb8>)
 8008a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	4a09      	ldr	r2, [pc, #36]	; (8008a70 <prvHeapInit+0xbc>)
 8008a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a4c:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <prvHeapInit+0xc0>)
 8008a4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a52:	601a      	str	r2, [r3, #0]
}
 8008a54:	bf00      	nop
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	20000d68 	.word	0x20000d68
 8008a64:	20003478 	.word	0x20003478
 8008a68:	20003480 	.word	0x20003480
 8008a6c:	20003488 	.word	0x20003488
 8008a70:	20003484 	.word	0x20003484
 8008a74:	20003494 	.word	0x20003494

08008a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a80:	4b28      	ldr	r3, [pc, #160]	; (8008b24 <prvInsertBlockIntoFreeList+0xac>)
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	e002      	b.n	8008a8c <prvInsertBlockIntoFreeList+0x14>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d8f7      	bhi.n	8008a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d108      	bne.n	8008aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	685a      	ldr	r2, [r3, #4]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	441a      	add	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	441a      	add	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d118      	bne.n	8008b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	4b15      	ldr	r3, [pc, #84]	; (8008b28 <prvInsertBlockIntoFreeList+0xb0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d00d      	beq.n	8008af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	441a      	add	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	e008      	b.n	8008b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008af6:	4b0c      	ldr	r3, [pc, #48]	; (8008b28 <prvInsertBlockIntoFreeList+0xb0>)
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	e003      	b.n	8008b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d002      	beq.n	8008b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b16:	bf00      	nop
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	20003478 	.word	0x20003478
 8008b28:	20003480 	.word	0x20003480

08008b2c <__libc_init_array>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	4d0d      	ldr	r5, [pc, #52]	; (8008b64 <__libc_init_array+0x38>)
 8008b30:	4c0d      	ldr	r4, [pc, #52]	; (8008b68 <__libc_init_array+0x3c>)
 8008b32:	1b64      	subs	r4, r4, r5
 8008b34:	10a4      	asrs	r4, r4, #2
 8008b36:	2600      	movs	r6, #0
 8008b38:	42a6      	cmp	r6, r4
 8008b3a:	d109      	bne.n	8008b50 <__libc_init_array+0x24>
 8008b3c:	4d0b      	ldr	r5, [pc, #44]	; (8008b6c <__libc_init_array+0x40>)
 8008b3e:	4c0c      	ldr	r4, [pc, #48]	; (8008b70 <__libc_init_array+0x44>)
 8008b40:	f000 f82e 	bl	8008ba0 <_init>
 8008b44:	1b64      	subs	r4, r4, r5
 8008b46:	10a4      	asrs	r4, r4, #2
 8008b48:	2600      	movs	r6, #0
 8008b4a:	42a6      	cmp	r6, r4
 8008b4c:	d105      	bne.n	8008b5a <__libc_init_array+0x2e>
 8008b4e:	bd70      	pop	{r4, r5, r6, pc}
 8008b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b54:	4798      	blx	r3
 8008b56:	3601      	adds	r6, #1
 8008b58:	e7ee      	b.n	8008b38 <__libc_init_array+0xc>
 8008b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b5e:	4798      	blx	r3
 8008b60:	3601      	adds	r6, #1
 8008b62:	e7f2      	b.n	8008b4a <__libc_init_array+0x1e>
 8008b64:	08008de0 	.word	0x08008de0
 8008b68:	08008de0 	.word	0x08008de0
 8008b6c:	08008de0 	.word	0x08008de0
 8008b70:	08008de4 	.word	0x08008de4

08008b74 <memcpy>:
 8008b74:	440a      	add	r2, r1
 8008b76:	4291      	cmp	r1, r2
 8008b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b7c:	d100      	bne.n	8008b80 <memcpy+0xc>
 8008b7e:	4770      	bx	lr
 8008b80:	b510      	push	{r4, lr}
 8008b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b8a:	4291      	cmp	r1, r2
 8008b8c:	d1f9      	bne.n	8008b82 <memcpy+0xe>
 8008b8e:	bd10      	pop	{r4, pc}

08008b90 <memset>:
 8008b90:	4402      	add	r2, r0
 8008b92:	4603      	mov	r3, r0
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d100      	bne.n	8008b9a <memset+0xa>
 8008b98:	4770      	bx	lr
 8008b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b9e:	e7f9      	b.n	8008b94 <memset+0x4>

08008ba0 <_init>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	bf00      	nop
 8008ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba6:	bc08      	pop	{r3}
 8008ba8:	469e      	mov	lr, r3
 8008baa:	4770      	bx	lr

08008bac <_fini>:
 8008bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bae:	bf00      	nop
 8008bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb2:	bc08      	pop	{r3}
 8008bb4:	469e      	mov	lr, r3
 8008bb6:	4770      	bx	lr
