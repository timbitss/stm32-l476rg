
UART-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  08007458  08007458  00017458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a44  08007a44  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  08007a44  08007a44  00017a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a4c  08007a4c  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a4c  08007a4c  00017a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a50  08007a50  00017a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08007a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  200000c0  08007b14  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08007b14  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011187  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c5e  00000000  00000000  00031277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00033ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  00034bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a61a  00000000  00000000  00035778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef10  00000000  00000000  0005fd92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3198  00000000  00000000  0006eca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00161e3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d00  00000000  00000000  00161e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800743c 	.word	0x0800743c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	0800743c 	.word	0x0800743c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96e 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468c      	mov	ip, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8083 	bne.w	8000cf2 <__udivmoddi4+0x116>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4617      	mov	r7, r2
 8000bf0:	d947      	bls.n	8000c82 <__udivmoddi4+0xa6>
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	b142      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	f1c2 0020 	rsb	r0, r2, #32
 8000bfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000c00:	4091      	lsls	r1, r2
 8000c02:	4097      	lsls	r7, r2
 8000c04:	ea40 0c01 	orr.w	ip, r0, r1
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbbc f6f8 	udiv	r6, ip, r8
 8000c14:	fa1f fe87 	uxth.w	lr, r7
 8000c18:	fb08 c116 	mls	r1, r8, r6, ip
 8000c1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c20:	fb06 f10e 	mul.w	r1, r6, lr
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 8119 	bcs.w	8000e64 <__udivmoddi4+0x288>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8116 	bls.w	8000e64 <__udivmoddi4+0x288>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	443b      	add	r3, r7
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 8105 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f240 8102 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6c:	eba4 040e 	sub.w	r4, r4, lr
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	b902      	cbnz	r2, 8000c86 <__udivmoddi4+0xaa>
 8000c84:	deff      	udf	#255	; 0xff
 8000c86:	fab2 f282 	clz	r2, r2
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d150      	bne.n	8000d30 <__udivmoddi4+0x154>
 8000c8e:	1bcb      	subs	r3, r1, r7
 8000c90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c94:	fa1f f887 	uxth.w	r8, r7
 8000c98:	2601      	movs	r6, #1
 8000c9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9e:	0c21      	lsrs	r1, r4, #16
 8000ca0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cac:	428b      	cmp	r3, r1
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000cb0:	1879      	adds	r1, r7, r1
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0xe2>
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	f200 80e9 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1ac9      	subs	r1, r1, r3
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ccc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x10c>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x10a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80d9 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e7bf      	b.n	8000c72 <__udivmoddi4+0x96>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x12e>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80b1 	beq.w	8000e5e <__udivmoddi4+0x282>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x1cc>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0x140>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80b8 	bhi.w	8000e8c <__udivmoddi4+0x2b0>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	468c      	mov	ip, r1
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0a8      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000d2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2e:	e7a5      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f603 	lsr.w	r6, r0, r3
 8000d38:	4097      	lsls	r7, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d42:	40d9      	lsrs	r1, r3
 8000d44:	4330      	orrs	r0, r6
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d4c:	fa1f f887 	uxth.w	r8, r7
 8000d50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb06 f108 	mul.w	r1, r6, r8
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x19c>
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d6a:	f080 808d 	bcs.w	8000e88 <__udivmoddi4+0x2ac>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 808a 	bls.w	8000e88 <__udivmoddi4+0x2ac>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	443b      	add	r3, r7
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b281      	uxth	r1, r0
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d88:	fb00 f308 	mul.w	r3, r0, r8
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x1c4>
 8000d90:	1879      	adds	r1, r7, r1
 8000d92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d96:	d273      	bcs.n	8000e80 <__udivmoddi4+0x2a4>
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d971      	bls.n	8000e80 <__udivmoddi4+0x2a4>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4439      	add	r1, r7
 8000da0:	1acb      	subs	r3, r1, r3
 8000da2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da6:	e778      	b.n	8000c9a <__udivmoddi4+0xbe>
 8000da8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dac:	fa03 f406 	lsl.w	r4, r3, r6
 8000db0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db4:	431c      	orrs	r4, r3
 8000db6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc6:	431f      	orrs	r7, r3
 8000dc8:	0c3b      	lsrs	r3, r7, #16
 8000dca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dce:	fa1f f884 	uxth.w	r8, r4
 8000dd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dda:	fb09 fa08 	mul.w	sl, r9, r8
 8000dde:	458a      	cmp	sl, r1
 8000de0:	fa02 f206 	lsl.w	r2, r2, r6
 8000de4:	fa00 f306 	lsl.w	r3, r0, r6
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x220>
 8000dea:	1861      	adds	r1, r4, r1
 8000dec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df0:	d248      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000df2:	458a      	cmp	sl, r1
 8000df4:	d946      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4421      	add	r1, r4
 8000dfc:	eba1 010a 	sub.w	r1, r1, sl
 8000e00:	b2bf      	uxth	r7, r7
 8000e02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0e:	fb00 f808 	mul.w	r8, r0, r8
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x24a>
 8000e16:	19e7      	adds	r7, r4, r7
 8000e18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1c:	d22e      	bcs.n	8000e7c <__udivmoddi4+0x2a0>
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d92c      	bls.n	8000e7c <__udivmoddi4+0x2a0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4427      	add	r7, r4
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	eba7 0708 	sub.w	r7, r7, r8
 8000e2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e32:	454f      	cmp	r7, r9
 8000e34:	46c6      	mov	lr, r8
 8000e36:	4649      	mov	r1, r9
 8000e38:	d31a      	bcc.n	8000e70 <__udivmoddi4+0x294>
 8000e3a:	d017      	beq.n	8000e6c <__udivmoddi4+0x290>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x27a>
 8000e3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e42:	eb67 0701 	sbc.w	r7, r7, r1
 8000e46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e4a:	40f2      	lsrs	r2, r6
 8000e4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e50:	40f7      	lsrs	r7, r6
 8000e52:	e9c5 2700 	strd	r2, r7, [r5]
 8000e56:	2600      	movs	r6, #0
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	462e      	mov	r6, r5
 8000e60:	4628      	mov	r0, r5
 8000e62:	e70b      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e64:	4606      	mov	r6, r0
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fd      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e6c:	4543      	cmp	r3, r8
 8000e6e:	d2e5      	bcs.n	8000e3c <__udivmoddi4+0x260>
 8000e70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e74:	eb69 0104 	sbc.w	r1, r9, r4
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e7df      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	e7d2      	b.n	8000e26 <__udivmoddi4+0x24a>
 8000e80:	4660      	mov	r0, ip
 8000e82:	e78d      	b.n	8000da0 <__udivmoddi4+0x1c4>
 8000e84:	4681      	mov	r9, r0
 8000e86:	e7b9      	b.n	8000dfc <__udivmoddi4+0x220>
 8000e88:	4666      	mov	r6, ip
 8000e8a:	e775      	b.n	8000d78 <__udivmoddi4+0x19c>
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	e74a      	b.n	8000d26 <__udivmoddi4+0x14a>
 8000e90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e94:	4439      	add	r1, r7
 8000e96:	e713      	b.n	8000cc0 <__udivmoddi4+0xe4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	443c      	add	r4, r7
 8000e9c:	e724      	b.n	8000ce8 <__udivmoddi4+0x10c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <cmd_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t cmd_init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    memset(client_infos, 0, sizeof(client_infos));
 8000ea8:	2228      	movs	r2, #40	; 0x28
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <cmd_init+0x14>)
 8000eae:	f005 fad5 	bl	800645c <memset>
    return 0;
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200000dc 	.word	0x200000dc

08000ebc <cmd_register>:

mod_err_t cmd_register(const cmd_client_info *_client_info)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < CMD_MAX_CLIENTS; i++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e01d      	b.n	8000f06 <cmd_register+0x4a>
    {
        if (client_infos[i] == NULL || strcasecmp(client_infos[i]->client_name, _client_info->client_name) == 0)
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <cmd_register+0x5c>)
 8000ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00d      	beq.n	8000ef2 <cmd_register+0x36>
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <cmd_register+0x5c>)
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	f005 fb4e 	bl	8006588 <strcasecmp>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d106      	bne.n	8000f00 <cmd_register+0x44>
        {
            client_infos[i] = _client_info;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	4908      	ldr	r1, [pc, #32]	; (8000f18 <cmd_register+0x5c>)
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return MOD_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	e006      	b.n	8000f0e <cmd_register+0x52>
    for (uint8_t i = 0; i < CMD_MAX_CLIENTS; i++)
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	3301      	adds	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	2b09      	cmp	r3, #9
 8000f0a:	d9de      	bls.n	8000eca <cmd_register+0xe>
        }
    }
    return MOD_ERR_RESOURCE;
 8000f0c:	2302      	movs	r3, #2
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000dc 	.word	0x200000dc

08000f1c <cmd_execute>:

mod_err_t cmd_execute(char *cmd_line)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08e      	sub	sp, #56	; 0x38
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    uint32_t num_tokens = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
    const char *tokens[CMD_MAX_TOKENS] = {0}; // Store individual tokens as strings.
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	2228      	movs	r2, #40	; 0x28
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f005 fa93 	bl	800645c <memset>

    /* Tokenize command line */
    mod_err_t err = tokenize(cmd_line, tokens, &num_tokens);
 8000f36:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 f82f 	bl	8000fa4 <tokenize>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (err)
 8000f4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d002      	beq.n	8000f5a <cmd_execute+0x3e>
    {
        return err;
 8000f54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f58:	e01f      	b.n	8000f9a <cmd_execute+0x7e>
    }

    /* If there are no tokens, nothing to do. */
    if (num_tokens == 0)
 8000f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <cmd_execute+0x48>
    {
        return MOD_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	e01a      	b.n	8000f9a <cmd_execute+0x7e>
    }

    /* Handle help/? command. */
    err = help_handler(tokens);
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f87b 	bl	8001064 <help_handler>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(err != MOD_DID_NOTHING)
 8000f74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f78:	2b08      	cmp	r3, #8
 8000f7a:	d002      	beq.n	8000f82 <cmd_execute+0x66>
    {
        return err;
 8000f7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f80:	e00b      	b.n	8000f9a <cmd_execute+0x7e>
    }
   
    err = client_command_handler(tokens, num_tokens);
 8000f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f8ec 	bl	8001168 <client_command_handler>
 8000f90:	4603      	mov	r3, r0
 8000f92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    return err;
 8000f96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3738      	adds	r7, #56	; 0x38
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <tokenize>:
 * @return MOD_OK if successful, "MOD_ERR_" otherwise.
 * 
 * Tokens include name of client, command, and arguments passed.
 */
static mod_err_t tokenize(char *str_to_tokenize, const char **tokens, uint32_t *num_tokens)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
    char *ptr = str_to_tokenize;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	617b      	str	r3, [r7, #20]
    uint32_t token_count = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]

    /* Iterate through each token. */
    while (1)
    {
        /* Find start of token. */
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 8000fb8:	e002      	b.n	8000fc0 <tokenize+0x1c>
        {
            ptr++;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d009      	beq.n	8000fdc <tokenize+0x38>
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	4a23      	ldr	r2, [pc, #140]	; (800105c <tokenize+0xb8>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1ee      	bne.n	8000fba <tokenize+0x16>
        }

        if (*ptr == '\0') // Found end of line.
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d030      	beq.n	8001046 <tokenize+0xa2>
        {
            break;
        }
        else
        {
            if (token_count >= CMD_MAX_TOKENS)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	2b09      	cmp	r3, #9
 8000fe8:	d904      	bls.n	8000ff4 <tokenize+0x50>
            {
                printf("Too many tokens\r\n");
 8000fea:	481d      	ldr	r0, [pc, #116]	; (8001060 <tokenize+0xbc>)
 8000fec:	f005 fac4 	bl	8006578 <puts>
                return MOD_ERR_BAD_CMD;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e02f      	b.n	8001054 <tokenize+0xb0>
            }
            else
            {   
                /* Record pointer to start of token, then find end of token. */
                tokens[token_count] = ptr;
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	601a      	str	r2, [r3, #0]
                ptr++;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
                token_count++;
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	3301      	adds	r3, #1
 800100a:	613b      	str	r3, [r7, #16]
                while (*ptr != '\0' && !isspace((unsigned char)*ptr))
 800100c:	e002      	b.n	8001014 <tokenize+0x70>
                {
                    ptr++;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
                while (*ptr != '\0' && !isspace((unsigned char)*ptr))
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d009      	beq.n	8001030 <tokenize+0x8c>
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	4a0e      	ldr	r2, [pc, #56]	; (800105c <tokenize+0xb8>)
 8001024:	4413      	add	r3, r2
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0ee      	beq.n	800100e <tokenize+0x6a>
                }
                if (*ptr != '\0')
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d008      	beq.n	800104a <tokenize+0xa6>
                {
                    *ptr = '\0'; // Terminate end of token.
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
                    ptr++;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 8001044:	e7bc      	b.n	8000fc0 <tokenize+0x1c>
            break;
 8001046:	bf00      	nop
 8001048:	e000      	b.n	800104c <tokenize+0xa8>
                }
                else
                {
                    break; // Found end of line ('\0'), no more tokens.
 800104a:	bf00      	nop
                }
            }
        }
    }

    *num_tokens = token_count;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	601a      	str	r2, [r3, #0]
    return MOD_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	080078a8 	.word	0x080078a8
 8001060:	08007534 	.word	0x08007534

08001064 <help_handler>:
 *         otherwise a "MOD_ERR" value.
 * 
 * Iterates through each client infos 
 */
static mod_err_t help_handler(const char** tokens)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    if (strcasecmp("help", tokens[0]) == 0 || strcasecmp("?", tokens[0]) == 0)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	4834      	ldr	r0, [pc, #208]	; (8001144 <help_handler+0xe0>)
 8001074:	f005 fa88 	bl	8006588 <strcasecmp>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d008      	beq.n	8001090 <help_handler+0x2c>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4619      	mov	r1, r3
 8001084:	4830      	ldr	r0, [pc, #192]	; (8001148 <help_handler+0xe4>)
 8001086:	f005 fa7f 	bl	8006588 <strcasecmp>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d153      	bne.n	8001138 <help_handler+0xd4>
    {
        /* Iterate through commands of each client. */
        for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	75fb      	strb	r3, [r7, #23]
 8001094:	e045      	b.n	8001122 <help_handler+0xbe>
        {
            const cmd_client_info *ci = client_infos[i];
 8001096:	7dfb      	ldrb	r3, [r7, #23]
 8001098:	4a2c      	ldr	r2, [pc, #176]	; (800114c <help_handler+0xe8>)
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	613b      	str	r3, [r7, #16]

            if (ci->num_cmds == 0)
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d038      	beq.n	800111a <help_handler+0xb6>
            {
                continue;
            }

            printf("%s (", ci->client_name);
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4828      	ldr	r0, [pc, #160]	; (8001150 <help_handler+0xec>)
 80010b0:	f005 f9dc 	bl	800646c <iprintf>
            uint8_t i2;
            for (i2 = 0; i2 < ci->num_cmds; i2++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	75bb      	strb	r3, [r7, #22]
 80010b8:	e017      	b.n	80010ea <help_handler+0x86>
            {
                const cmd_cmd_info* cci = &(ci->cmds[i2]);
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	6899      	ldr	r1, [r3, #8]
 80010be:	7dba      	ldrb	r2, [r7, #22]
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	60fb      	str	r3, [r7, #12]
                printf("%s%s", i2 == 0 ? "" : ", ", cci->cmd_name);
 80010cc:	7dbb      	ldrb	r3, [r7, #22]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <help_handler+0x72>
 80010d2:	4920      	ldr	r1, [pc, #128]	; (8001154 <help_handler+0xf0>)
 80010d4:	e000      	b.n	80010d8 <help_handler+0x74>
 80010d6:	4920      	ldr	r1, [pc, #128]	; (8001158 <help_handler+0xf4>)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	481f      	ldr	r0, [pc, #124]	; (800115c <help_handler+0xf8>)
 80010e0:	f005 f9c4 	bl	800646c <iprintf>
            for (i2 = 0; i2 < ci->num_cmds; i2++)
 80010e4:	7dbb      	ldrb	r3, [r7, #22]
 80010e6:	3301      	adds	r3, #1
 80010e8:	75bb      	strb	r3, [r7, #22]
 80010ea:	7dba      	ldrb	r2, [r7, #22]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d3e2      	bcc.n	80010ba <help_handler+0x56>
            }

            /* If client provided pm info, also display pm command. */
            if (ci->num_u16_pms > 0)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00a      	beq.n	8001112 <help_handler+0xae>
            {
                printf("%s%s", i2 == 0 ? "" : ", ", "pm");
 80010fc:	7dbb      	ldrb	r3, [r7, #22]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <help_handler+0xa2>
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <help_handler+0xf0>)
 8001104:	e000      	b.n	8001108 <help_handler+0xa4>
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <help_handler+0xf4>)
 8001108:	4a15      	ldr	r2, [pc, #84]	; (8001160 <help_handler+0xfc>)
 800110a:	4619      	mov	r1, r3
 800110c:	4813      	ldr	r0, [pc, #76]	; (800115c <help_handler+0xf8>)
 800110e:	f005 f9ad 	bl	800646c <iprintf>
            }

            printf(")\r\n");
 8001112:	4814      	ldr	r0, [pc, #80]	; (8001164 <help_handler+0x100>)
 8001114:	f005 fa30 	bl	8006578 <puts>
 8001118:	e000      	b.n	800111c <help_handler+0xb8>
                continue;
 800111a:	bf00      	nop
        for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	3301      	adds	r3, #1
 8001120:	75fb      	strb	r3, [r7, #23]
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	4a09      	ldr	r2, [pc, #36]	; (800114c <help_handler+0xe8>)
 8001126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <help_handler+0xd0>
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	2b09      	cmp	r3, #9
 8001132:	d9b0      	bls.n	8001096 <help_handler+0x32>
        }

        return MOD_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	e000      	b.n	800113a <help_handler+0xd6>
    }

    return MOD_DID_NOTHING; // Not a top-level help command.
 8001138:	2308      	movs	r3, #8
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	08007548 	.word	0x08007548
 8001148:	08007550 	.word	0x08007550
 800114c:	200000dc 	.word	0x200000dc
 8001150:	08007554 	.word	0x08007554
 8001154:	0800755c 	.word	0x0800755c
 8001158:	08007560 	.word	0x08007560
 800115c:	08007564 	.word	0x08007564
 8001160:	0800756c 	.word	0x0800756c
 8001164:	08007570 	.word	0x08007570

08001168 <client_command_handler>:
 * @return MOD_OK if successful, 
 *         MOD_DID_NOTHING if not a client command, 
 *         otherwise a "MOD_ERR" value.
 */
static mod_err_t client_command_handler(const char** tokens, uint32_t num_tokens)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b087      	sub	sp, #28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	75fb      	strb	r3, [r7, #23]
 8001176:	e112      	b.n	800139e <client_command_handler+0x236>
    {
        const cmd_client_info* ci = client_infos[i];
 8001178:	7dfb      	ldrb	r3, [r7, #23]
 800117a:	4a93      	ldr	r2, [pc, #588]	; (80013c8 <client_command_handler+0x260>)
 800117c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001180:	613b      	str	r3, [r7, #16]

        /* Look for correct client first */
        if (strcasecmp(tokens[0], ci->client_name) != 0)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4619      	mov	r1, r3
 800118c:	4610      	mov	r0, r2
 800118e:	f005 f9fb 	bl	8006588 <strcasecmp>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <client_command_handler+0x38>
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001198:	7dfb      	ldrb	r3, [r7, #23]
 800119a:	3301      	adds	r3, #1
 800119c:	75fb      	strb	r3, [r7, #23]
 800119e:	e0fe      	b.n	800139e <client_command_handler+0x236>
        {
            continue;
        }

        /* If there is no command with client, assume they want help. */
        if (num_tokens == 1)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d103      	bne.n	80011ae <client_command_handler+0x46>
        {
            tokens[1] = "help";
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3304      	adds	r3, #4
 80011aa:	4a88      	ldr	r2, [pc, #544]	; (80013cc <client_command_handler+0x264>)
 80011ac:	601a      	str	r2, [r3, #0]
        }

        /* Handle help command directly. */
        if (strcasecmp(tokens[1], "help") == 0 || strcasecmp(tokens[1], "?") == 0)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3304      	adds	r3, #4
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4985      	ldr	r1, [pc, #532]	; (80013cc <client_command_handler+0x264>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f005 f9e6 	bl	8006588 <strcasecmp>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <client_command_handler+0x6e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3304      	adds	r3, #4
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4981      	ldr	r1, [pc, #516]	; (80013d0 <client_command_handler+0x268>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f005 f9dc 	bl	8006588 <strcasecmp>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d128      	bne.n	8001228 <client_command_handler+0xc0>
        {
        	/* Print out all commands associated with client */
            for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	75bb      	strb	r3, [r7, #22]
 80011da:	e014      	b.n	8001206 <client_command_handler+0x9e>
            {
                const cmd_cmd_info* cci = &(ci->cmds[i2]);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	6899      	ldr	r1, [r3, #8]
 80011e0:	7dba      	ldrb	r2, [r7, #22]
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	60bb      	str	r3, [r7, #8]
                printf("%s %s: %s\r\n", ci->client_name, cci->cmd_name, cci->help);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	6819      	ldr	r1, [r3, #0]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	4876      	ldr	r0, [pc, #472]	; (80013d4 <client_command_handler+0x26c>)
 80011fc:	f005 f936 	bl	800646c <iprintf>
            for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 8001200:	7dbb      	ldrb	r3, [r7, #22]
 8001202:	3301      	adds	r3, #1
 8001204:	75bb      	strb	r3, [r7, #22]
 8001206:	7dba      	ldrb	r2, [r7, #22]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	d3e5      	bcc.n	80011dc <client_command_handler+0x74>
            }
            /* If client provided pm info, print help for pm command also. */
            if (ci->num_u16_pms > 0)
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <client_command_handler+0xbc>
            {
                printf("%s pm: get or clear performance measurements, \
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	486e      	ldr	r0, [pc, #440]	; (80013d8 <client_command_handler+0x270>)
 8001220:	f005 f924 	bl	800646c <iprintf>
                        args: [clear] \r\n", ci->client_name);
            }

            return MOD_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	e0cb      	b.n	80013c0 <client_command_handler+0x258>
        }


        /* Handle pm command directly. */
        if (strcasecmp(tokens[1], "pm") == 0)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3304      	adds	r3, #4
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	496b      	ldr	r1, [pc, #428]	; (80013dc <client_command_handler+0x274>)
 8001230:	4618      	mov	r0, r3
 8001232:	f005 f9a9 	bl	8006588 <strcasecmp>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d150      	bne.n	80012de <client_command_handler+0x176>
        {
            if (ci->num_u16_pms > 0)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d04a      	beq.n	80012da <client_command_handler+0x172>
            {
                bool clear = (num_tokens >= 3 && strcasecmp(tokens[2], "clear") == 0);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d90b      	bls.n	8001262 <client_command_handler+0xfa>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3308      	adds	r3, #8
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4963      	ldr	r1, [pc, #396]	; (80013e0 <client_command_handler+0x278>)
 8001252:	4618      	mov	r0, r3
 8001254:	f005 f998 	bl	8006588 <strcasecmp>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <client_command_handler+0xfa>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <client_command_handler+0xfc>
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	73fb      	strb	r3, [r7, #15]
                if (clear)
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <client_command_handler+0x11a>
                {
                    printf("Clearing %s performance measurements\r\n", ci->client_name);
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	485a      	ldr	r0, [pc, #360]	; (80013e4 <client_command_handler+0x27c>)
 800127c:	f005 f8f6 	bl	800646c <iprintf>
 8001280:	e005      	b.n	800128e <client_command_handler+0x126>
                }
                else
                {
                    printf("%s pms:\r\n", ci->client_name);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4619      	mov	r1, r3
 8001288:	4857      	ldr	r0, [pc, #348]	; (80013e8 <client_command_handler+0x280>)
 800128a:	f005 f8ef 	bl	800646c <iprintf>
                }
                for (uint8_t i2 = 0; i2 < ci->num_u16_pms; i2++)
 800128e:	2300      	movs	r3, #0
 8001290:	757b      	strb	r3, [r7, #21]
 8001292:	e01d      	b.n	80012d0 <client_command_handler+0x168>
                {
                    if (clear)
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d007      	beq.n	80012aa <client_command_handler+0x142>
                    {
                        ci->u16_pms[i2] = 0;
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	691a      	ldr	r2, [r3, #16]
 800129e:	7d7b      	ldrb	r3, [r7, #21]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	2200      	movs	r2, #0
 80012a6:	801a      	strh	r2, [r3, #0]
 80012a8:	e00f      	b.n	80012ca <client_command_handler+0x162>
                    }
                    else
                    {
                        printf("%s: %d\r\n", ci->u16_pm_names[i2], ci->u16_pms[i2]);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	7d7b      	ldrb	r3, [r7, #21]
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	6819      	ldr	r1, [r3, #0]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	7d7b      	ldrb	r3, [r7, #21]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4849      	ldr	r0, [pc, #292]	; (80013ec <client_command_handler+0x284>)
 80012c6:	f005 f8d1 	bl	800646c <iprintf>
                for (uint8_t i2 = 0; i2 < ci->num_u16_pms; i2++)
 80012ca:	7d7b      	ldrb	r3, [r7, #21]
 80012cc:	3301      	adds	r3, #1
 80012ce:	757b      	strb	r3, [r7, #21]
 80012d0:	7d7a      	ldrb	r2, [r7, #21]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d3dc      	bcc.n	8001294 <client_command_handler+0x12c>
                    }
                }
            }

            return MOD_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e070      	b.n	80013c0 <client_command_handler+0x258>
        }


        /* Look for command within client. */
        for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 80012de:	2300      	movs	r3, #0
 80012e0:	753b      	strb	r3, [r7, #20]
 80012e2:	e04c      	b.n	800137e <client_command_handler+0x216>
        {
            if (strcasecmp(tokens[1], ci->cmds[i2].cmd_name) == 0)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3304      	adds	r3, #4
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	6899      	ldr	r1, [r3, #8]
 80012ee:	7d3a      	ldrb	r2, [r7, #20]
 80012f0:	4613      	mov	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f005 f943 	bl	8006588 <strcasecmp>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d137      	bne.n	8001378 <client_command_handler+0x210>
            {
                if(num_tokens == 3 && strcasecmp(tokens[2], "help"))
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d123      	bne.n	8001356 <client_command_handler+0x1ee>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3308      	adds	r3, #8
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	492d      	ldr	r1, [pc, #180]	; (80013cc <client_command_handler+0x264>)
 8001316:	4618      	mov	r0, r3
 8001318:	f005 f936 	bl	8006588 <strcasecmp>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d019      	beq.n	8001356 <client_command_handler+0x1ee>
                {
                    printf("%s %s: %s\r\n", ci->client_name, ci->cmds[i2].cmd_name, ci->cmds[i2].help);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	6899      	ldr	r1, [r3, #8]
 800132a:	7d3a      	ldrb	r2, [r7, #20]
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	681c      	ldr	r4, [r3, #0]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	6899      	ldr	r1, [r3, #8]
 800133c:	7d3a      	ldrb	r2, [r7, #20]
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	4622      	mov	r2, r4
 800134c:	4601      	mov	r1, r0
 800134e:	4821      	ldr	r0, [pc, #132]	; (80013d4 <client_command_handler+0x26c>)
 8001350:	f005 f88c 	bl	800646c <iprintf>
 8001354:	e00e      	b.n	8001374 <client_command_handler+0x20c>
                }
                else 
                {
                    ci->cmds[i2].cb(num_tokens - 2, tokens + 2); // Ignore client and command tokens.
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	6899      	ldr	r1, [r3, #8]
 800135a:	7d3a      	ldrb	r2, [r7, #20]
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	1e90      	subs	r0, r2, #2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	4611      	mov	r1, r2
 8001372:	4798      	blx	r3
                }
                return MOD_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	e023      	b.n	80013c0 <client_command_handler+0x258>
        for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 8001378:	7d3b      	ldrb	r3, [r7, #20]
 800137a:	3301      	adds	r3, #1
 800137c:	753b      	strb	r3, [r7, #20]
 800137e:	7d3a      	ldrb	r2, [r7, #20]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	d3ad      	bcc.n	80012e4 <client_command_handler+0x17c>
            }
        }

        printf("No such command (%s %s)\n", tokens[0], tokens[1]);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6819      	ldr	r1, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3304      	adds	r3, #4
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	4816      	ldr	r0, [pc, #88]	; (80013f0 <client_command_handler+0x288>)
 8001396:	f005 f869 	bl	800646c <iprintf>
        return MOD_ERR_BAD_CMD;
 800139a:	2303      	movs	r3, #3
 800139c:	e010      	b.n	80013c0 <client_command_handler+0x258>
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 800139e:	7dfb      	ldrb	r3, [r7, #23]
 80013a0:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <client_command_handler+0x260>)
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <client_command_handler+0x24a>
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	f67f aee3 	bls.w	8001178 <client_command_handler+0x10>
    }

    printf("No such command (%s)\r\n", tokens[0]);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4619      	mov	r1, r3
 80013b8:	480e      	ldr	r0, [pc, #56]	; (80013f4 <client_command_handler+0x28c>)
 80013ba:	f005 f857 	bl	800646c <iprintf>
    return MOD_ERR_BAD_CMD; // Could not find client.
 80013be:	2303      	movs	r3, #3
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	371c      	adds	r7, #28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	200000dc 	.word	0x200000dc
 80013cc:	08007548 	.word	0x08007548
 80013d0:	08007550 	.word	0x08007550
 80013d4:	08007574 	.word	0x08007574
 80013d8:	08007580 	.word	0x08007580
 80013dc:	0800756c 	.word	0x0800756c
 80013e0:	080075d8 	.word	0x080075d8
 80013e4:	080075e0 	.word	0x080075e0
 80013e8:	08007608 	.word	0x08007608
 80013ec:	08007614 	.word	0x08007614
 80013f0:	08007620 	.word	0x08007620
 80013f4:	0800763c 	.word	0x0800763c

080013f8 <console_init>:
 * @brief Initialize console module instance.
 *
 * @return MOD_OK for success.
 */
mod_err_t console_init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
    memset(&console, 0, sizeof(console));
 80013fc:	222c      	movs	r2, #44	; 0x2c
 80013fe:	2100      	movs	r1, #0
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <console_init+0x14>)
 8001402:	f005 f82b 	bl	800645c <memset>
    return MOD_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000104 	.word	0x20000104

08001410 <console_run>:


mod_err_t console_run(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
    char c;
    if (!console.first_run_done)
 8001416:	4b3f      	ldr	r3, [pc, #252]	; (8001514 <console_run+0x104>)
 8001418:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800141c:	f083 0301 	eor.w	r3, r3, #1
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d06a      	beq.n	80014fc <console_run+0xec>
    {
        console.first_run_done = true;
 8001426:	4b3b      	ldr	r3, [pc, #236]	; (8001514 <console_run+0x104>)
 8001428:	2201      	movs	r2, #1
 800142a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        printf(PROMPT);
 800142e:	483a      	ldr	r0, [pc, #232]	; (8001518 <console_run+0x108>)
 8001430:	f001 feee 	bl	8003210 <printf_>
    }

    /* Process all characters in UART's receive buffer. */
    while (uart_getc(&c))
 8001434:	e062      	b.n	80014fc <console_run+0xec>
    {
        /* Execute command once Enter key is pressed. */
        if (c == '\n' || c == '\r')
 8001436:	79bb      	ldrb	r3, [r7, #6]
 8001438:	2b0a      	cmp	r3, #10
 800143a:	d002      	beq.n	8001442 <console_run+0x32>
 800143c:	79bb      	ldrb	r3, [r7, #6]
 800143e:	2b0d      	cmp	r3, #13
 8001440:	d112      	bne.n	8001468 <console_run+0x58>
        {
            console.cmd_buf[console.num_cmd_buf_chars] = '\0'; // Signal end of command string.
 8001442:	4b34      	ldr	r3, [pc, #208]	; (8001514 <console_run+0x104>)
 8001444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001446:	461a      	mov	r2, r3
 8001448:	4b32      	ldr	r3, [pc, #200]	; (8001514 <console_run+0x104>)
 800144a:	2100      	movs	r1, #0
 800144c:	5499      	strb	r1, [r3, r2]
            printf("\r\n");
 800144e:	4833      	ldr	r0, [pc, #204]	; (800151c <console_run+0x10c>)
 8001450:	f001 fede 	bl	8003210 <printf_>
            cmd_execute(console.cmd_buf); // Execute command's callback function.
 8001454:	482f      	ldr	r0, [pc, #188]	; (8001514 <console_run+0x104>)
 8001456:	f7ff fd61 	bl	8000f1c <cmd_execute>
            console.num_cmd_buf_chars = 0;
 800145a:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <console_run+0x104>)
 800145c:	2200      	movs	r2, #0
 800145e:	851a      	strh	r2, [r3, #40]	; 0x28
            printf(PROMPT);
 8001460:	482d      	ldr	r0, [pc, #180]	; (8001518 <console_run+0x108>)
 8001462:	f001 fed5 	bl	8003210 <printf_>
            continue;
 8001466:	e049      	b.n	80014fc <console_run+0xec>
        }
        /* Delete a character when Backspace key is pressed. */
        if (c == '\b' || c == '\x7f')
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	2b08      	cmp	r3, #8
 800146c:	d002      	beq.n	8001474 <console_run+0x64>
 800146e:	79bb      	ldrb	r3, [r7, #6]
 8001470:	2b7f      	cmp	r3, #127	; 0x7f
 8001472:	d10d      	bne.n	8001490 <console_run+0x80>
        {
            if (console.num_cmd_buf_chars > 0)
 8001474:	4b27      	ldr	r3, [pc, #156]	; (8001514 <console_run+0x104>)
 8001476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001478:	2b00      	cmp	r3, #0
 800147a:	d03f      	beq.n	80014fc <console_run+0xec>
            {
                printf("\x7f");
 800147c:	4828      	ldr	r0, [pc, #160]	; (8001520 <console_run+0x110>)
 800147e:	f001 fec7 	bl	8003210 <printf_>
                console.num_cmd_buf_chars--; // "Overwrite" last character.
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <console_run+0x104>)
 8001484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001486:	3b01      	subs	r3, #1
 8001488:	b29a      	uxth	r2, r3
 800148a:	4b22      	ldr	r3, [pc, #136]	; (8001514 <console_run+0x104>)
 800148c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            continue;
 800148e:	e035      	b.n	80014fc <console_run+0xec>
        }
        /* Toggle logging on and off LOG_TOGGLE_CHAR key is pressed. */
        if (c == LOG_TOGGLE_CHAR)
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	2b09      	cmp	r3, #9
 8001494:	d111      	bne.n	80014ba <console_run+0xaa>
        {
            bool log_active = log_toggle();
 8001496:	f000 f85b 	bl	8001550 <log_toggle>
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
            printf("\r\n<Logging %s>\r\n", log_active ? "on" : "off");
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <console_run+0x98>
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <console_run+0x114>)
 80014a6:	e000      	b.n	80014aa <console_run+0x9a>
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <console_run+0x118>)
 80014aa:	4619      	mov	r1, r3
 80014ac:	481f      	ldr	r0, [pc, #124]	; (800152c <console_run+0x11c>)
 80014ae:	f001 feaf 	bl	8003210 <printf_>
            printf(PROMPT);
 80014b2:	4819      	ldr	r0, [pc, #100]	; (8001518 <console_run+0x108>)
 80014b4:	f001 feac 	bl	8003210 <printf_>
            continue;
 80014b8:	e020      	b.n	80014fc <console_run+0xec>
        }
        /* Echo the character back. */
        if (isprint(c))
 80014ba:	79bb      	ldrb	r3, [r7, #6]
 80014bc:	3301      	adds	r3, #1
 80014be:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <console_run+0x120>)
 80014c0:	4413      	add	r3, r2
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	f003 0397 	and.w	r3, r3, #151	; 0x97
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d017      	beq.n	80014fc <console_run+0xec>
        {
            if (console.num_cmd_buf_chars < (CONSOLE_CMD_BUF_SIZE - 1))
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <console_run+0x104>)
 80014ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d0:	2b26      	cmp	r3, #38	; 0x26
 80014d2:	d80f      	bhi.n	80014f4 <console_run+0xe4>
            {
                console.cmd_buf[console.num_cmd_buf_chars++] = c;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <console_run+0x104>)
 80014d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	b291      	uxth	r1, r2
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <console_run+0x104>)
 80014de:	8511      	strh	r1, [r2, #40]	; 0x28
 80014e0:	461a      	mov	r2, r3
 80014e2:	79b9      	ldrb	r1, [r7, #6]
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <console_run+0x104>)
 80014e6:	5499      	strb	r1, [r3, r2]
                printf("%c", c);
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	4619      	mov	r1, r3
 80014ec:	4811      	ldr	r0, [pc, #68]	; (8001534 <console_run+0x124>)
 80014ee:	f001 fe8f 	bl	8003210 <printf_>
 80014f2:	e002      	b.n	80014fa <console_run+0xea>
            }
            else
            {
                /* No space in buffer, so ring terminal bell. */
                printf("\a");
 80014f4:	4810      	ldr	r0, [pc, #64]	; (8001538 <console_run+0x128>)
 80014f6:	f001 fe8b 	bl	8003210 <printf_>
            }
            continue;
 80014fa:	bf00      	nop
    while (uart_getc(&c))
 80014fc:	1dbb      	adds	r3, r7, #6
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 f9a6 	bl	8003850 <uart_getc>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d195      	bne.n	8001436 <console_run+0x26>
        }
    }

    return MOD_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000104 	.word	0x20000104
 8001518:	08007654 	.word	0x08007654
 800151c:	08007658 	.word	0x08007658
 8001520:	0800765c 	.word	0x0800765c
 8001524:	08007660 	.word	0x08007660
 8001528:	08007664 	.word	0x08007664
 800152c:	08007668 	.word	0x08007668
 8001530:	080078a8 	.word	0x080078a8
 8001534:	0800767c 	.word	0x0800767c
 8001538:	08007680 	.word	0x08007680

0800153c <log_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t log_init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	return cmd_register(&log_client_info);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <log_init+0x10>)
 8001542:	f7ff fcbb 	bl	8000ebc <cmd_register>
 8001546:	4603      	mov	r3, r0
}
 8001548:	4618      	mov	r0, r3
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000030 	.word	0x20000030

08001550 <log_toggle>:

bool log_toggle(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
    _log_active = _log_active ? false : true;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <log_toggle+0x20>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	f083 0301 	eor.w	r3, r3, #1
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <log_toggle+0x20>)
 8001560:	701a      	strb	r2, [r3, #0]
    return _log_active;
 8001562:	4b03      	ldr	r3, [pc, #12]	; (8001570 <log_toggle+0x20>)
 8001564:	781b      	ldrb	r3, [r3, #0]
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	20000048 	.word	0x20000048

08001574 <log_level_str>:
 * @param level The log level as an integer.
 *
 * @return Log level as a string.
 */
static const char *log_level_str(int32_t level)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	return log_level_names[level];
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <log_level_str+0x1c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	20000000 	.word	0x20000000

08001594 <log_level_int>:
 * @param level_name The log level as a string.
 *
 * @return Log level as an int, or -1 on error.
 */
static int32_t log_level_int(const char *level_name)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    for (uint8_t level = 0; level < ARRAY_SIZE(log_level_names); level++)
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e00f      	b.n	80015c2 <log_level_int+0x2e>
    {
        if (strcasecmp(level_name, log_level_names[level]) == 0)
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <log_level_int+0x40>)
 80015a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015aa:	4619      	mov	r1, r3
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f004 ffeb 	bl	8006588 <strcasecmp>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <log_level_int+0x28>
        {
            return level;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	e007      	b.n	80015cc <log_level_int+0x38>
    for (uint8_t level = 0; level < ARRAY_SIZE(log_level_names); level++)
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	3301      	adds	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	d9ec      	bls.n	80015a2 <log_level_int+0xe>
        }
    }

    return -1; // Log level not found.
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000000 	.word	0x20000000

080015d8 <cmd_log_get>:
 * @param argv Argument values.
 *
 * @return 0 if successful, 1 otherwise.
 */
uint32_t cmd_log_get(uint32_t argc, const char **argv)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
	printf("Current log level: %s\r\n",  log_level_str(_global_log_level));
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <cmd_log_get+0x28>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ffc4 	bl	8001574 <log_level_str>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4619      	mov	r1, r3
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <cmd_log_get+0x2c>)
 80015f2:	f001 fe0d 	bl	8003210 <printf_>
	return 0;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000004c 	.word	0x2000004c
 8001604:	08007794 	.word	0x08007794

08001608 <cmd_log_set>:
 * @param argv Argument values.
 *
 * @return 0 if successful, 1 otherwise.
 */
uint32_t cmd_log_set(uint32_t argc, const char **argv)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	if(argc != 1)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d001      	beq.n	800161c <cmd_log_set+0x14>
	{
		return 1; // Should include only 1 argument.
 8001618:	2301      	movs	r3, #1
 800161a:	e019      	b.n	8001650 <cmd_log_set+0x48>
	}
	else
	{
		int32_t new_log_level = log_level_int(argv[0]);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ffb7 	bl	8001594 <log_level_int>
 8001626:	60f8      	str	r0, [r7, #12]
		if(new_log_level == -1)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162e:	d107      	bne.n	8001640 <cmd_log_set+0x38>
		{
			printf("Log level %s not recognized\r\n", argv[0]);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	4808      	ldr	r0, [pc, #32]	; (8001658 <cmd_log_set+0x50>)
 8001638:	f001 fdea 	bl	8003210 <printf_>
			return 1;
 800163c:	2301      	movs	r3, #1
 800163e:	e007      	b.n	8001650 <cmd_log_set+0x48>
		}
		else
		{
			_global_log_level = new_log_level;
 8001640:	4a06      	ldr	r2, [pc, #24]	; (800165c <cmd_log_set+0x54>)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6013      	str	r3, [r2, #0]
			printf("Global log level set to %s\r\n", new_log_level);
 8001646:	68f9      	ldr	r1, [r7, #12]
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <cmd_log_set+0x58>)
 800164a:	f001 fde1 	bl	8003210 <printf_>
			return 0;
 800164e:	2300      	movs	r3, #0
		}
	}
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	080077ac 	.word	0x080077ac
 800165c:	2000004c 	.word	0x2000004c
 8001660:	080077cc 	.word	0x080077cc

08001664 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f043 0201 	orr.w	r2, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	601a      	str	r2, [r3, #0]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	609a      	str	r2, [r3, #8]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80016ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016bc:	4907      	ldr	r1, [pc, #28]	; (80016dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80016c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4013      	ands	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40021000 	.word	0x40021000

080016e0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <LL_APB1_GRP1_EnableClock+0x2c>)
 80016ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016ec:	4907      	ldr	r1, [pc, #28]	; (800170c <LL_APB1_GRP1_EnableClock+0x2c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <LL_APB1_GRP1_EnableClock+0x2c>)
 80016f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4013      	ands	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016fe:	68fb      	ldr	r3, [r7, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40021000 	.word	0x40021000

08001710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001716:	f002 fa15 	bl	8003b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800171a:	f000 f821 	bl	8001760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800171e:	f000 f8e5 	bl	80018ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001722:	f000 f893 	bl	800184c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_config_t uart_cfg = {.uart_reg_base = USART2, .irq_num = USART2_IRQn};
 8001726:	4a0d      	ldr	r2, [pc, #52]	; (800175c <main+0x4c>)
 8001728:	463b      	mov	r3, r7
 800172a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800172e:	e883 0003 	stmia.w	r3, {r0, r1}
  uart_init(&uart_cfg);
 8001732:	463b      	mov	r3, r7
 8001734:	4618      	mov	r0, r3
 8001736:	f001 ffd1 	bl	80036dc <uart_init>
  console_init();
 800173a:	f7ff fe5d 	bl	80013f8 <console_init>
  cmd_init();
 800173e:	f7ff fbb1 	bl	8000ea4 <cmd_init>
  log_init();
 8001742:	f7ff fefb 	bl	800153c <log_init>
  uart_start();
 8001746:	f001 ffff 	bl	8003748 <uart_start>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	2120      	movs	r1, #32
 800174e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001752:	f002 fd03 	bl	800415c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  console_run();
 8001756:	f7ff fe5b 	bl	8001410 <console_run>
 800175a:	e7fc      	b.n	8001756 <main+0x46>
 800175c:	080077ec 	.word	0x080077ec

08001760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b0b8      	sub	sp, #224	; 0xe0
 8001764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001766:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800176a:	2244      	movs	r2, #68	; 0x44
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f004 fe74 	bl	800645c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001774:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001784:	463b      	mov	r3, r7
 8001786:	2288      	movs	r2, #136	; 0x88
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f004 fe66 	bl	800645c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001790:	2302      	movs	r3, #2
 8001792:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800179e:	2310      	movs	r3, #16
 80017a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a4:	2302      	movs	r3, #2
 80017a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017aa:	2302      	movs	r3, #2
 80017ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017b0:	2301      	movs	r3, #1
 80017b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80017b6:	230a      	movs	r3, #10
 80017b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017bc:	2307      	movs	r3, #7
 80017be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017c2:	2302      	movs	r3, #2
 80017c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017c8:	2302      	movs	r3, #2
 80017ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 fd3e 	bl	8004254 <HAL_RCC_OscConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80017de:	f000 f8ed 	bl	80019bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e2:	230f      	movs	r3, #15
 80017e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e8:	2303      	movs	r3, #3
 80017ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001800:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001804:	2104      	movs	r1, #4
 8001806:	4618      	mov	r0, r3
 8001808:	f003 f90a 	bl	8004a20 <HAL_RCC_ClockConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001812:	f000 f8d3 	bl	80019bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001816:	2302      	movs	r3, #2
 8001818:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800181a:	2300      	movs	r3, #0
 800181c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181e:	463b      	mov	r3, r7
 8001820:	4618      	mov	r0, r3
 8001822:	f003 facb 	bl	8004dbc <HAL_RCCEx_PeriphCLKConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800182c:	f000 f8c6 	bl	80019bc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001830:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001834:	f002 fcb8 	bl	80041a8 <HAL_PWREx_ControlVoltageScaling>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800183e:	f000 f8bd 	bl	80019bc <Error_Handler>
  }
}
 8001842:	bf00      	nop
 8001844:	37e0      	adds	r7, #224	; 0xe0
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08e      	sub	sp, #56	; 0x38
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]
 8001862:	615a      	str	r2, [r3, #20]
 8001864:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001876:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800187a:	f7ff ff31 	bl	80016e0 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff ff16 	bl	80016b0 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001884:	230c      	movs	r3, #12
 8001886:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001888:	2302      	movs	r3, #2
 800188a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001898:	2307      	movs	r3, #7
 800189a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	4619      	mov	r1, r3
 80018a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a4:	f004 f891 	bl	80059ca <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80018a8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80018ac:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80018ba:	230c      	movs	r3, #12
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80018be:	2300      	movs	r3, #0
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80018c2:	2300      	movs	r3, #0
 80018c4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	4619      	mov	r1, r3
 80018cc:	4806      	ldr	r0, [pc, #24]	; (80018e8 <MX_USART2_UART_Init+0x9c>)
 80018ce:	f004 fd1f 	bl	8006310 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_USART2_UART_Init+0x9c>)
 80018d4:	f7ff fed6 	bl	8001684 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80018d8:	4803      	ldr	r0, [pc, #12]	; (80018e8 <MX_USART2_UART_Init+0x9c>)
 80018da:	f7ff fec3 	bl	8001664 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	3738      	adds	r7, #56	; 0x38
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40004400 	.word	0x40004400

080018ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001902:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <MX_GPIO_Init+0xc4>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	4a2a      	ldr	r2, [pc, #168]	; (80019b0 <MX_GPIO_Init+0xc4>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190e:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <MX_GPIO_Init+0xc4>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800191a:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <MX_GPIO_Init+0xc4>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	4a24      	ldr	r2, [pc, #144]	; (80019b0 <MX_GPIO_Init+0xc4>)
 8001920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001926:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <MX_GPIO_Init+0xc4>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <MX_GPIO_Init+0xc4>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <MX_GPIO_Init+0xc4>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <MX_GPIO_Init+0xc4>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <MX_GPIO_Init+0xc4>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <MX_GPIO_Init+0xc4>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <MX_GPIO_Init+0xc4>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2120      	movs	r1, #32
 8001966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196a:	f002 fbf7 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800196e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_GPIO_Init+0xc8>)
 8001976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	480d      	ldr	r0, [pc, #52]	; (80019b8 <MX_GPIO_Init+0xcc>)
 8001984:	f002 fa40 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001988:	2320      	movs	r3, #32
 800198a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198c:	2301      	movs	r3, #1
 800198e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a2:	f002 fa31 	bl	8003e08 <HAL_GPIO_Init>

}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	; 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	10210000 	.word	0x10210000
 80019b8:	48000800 	.word	0x48000800

080019bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c0:	b672      	cpsid	i
}
 80019c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <Error_Handler+0x8>

080019c6 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b085      	sub	sp, #20
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	4603      	mov	r3, r0
 80019d4:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	4603      	mov	r3, r0
 80019f0:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <_out_char+0x1e>
    uart_putc(character);
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f001 fed2 	bl	80037a4 <uart_putc>
  }
}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	e002      	b.n	8001a1e <_strnlen_s+0x16>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <_strnlen_s+0x28>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	603a      	str	r2, [r7, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f3      	bne.n	8001a18 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	1ad3      	subs	r3, r2, r3
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	2b2f      	cmp	r3, #47	; 0x2f
 8001a50:	d904      	bls.n	8001a5c <_is_digit+0x1a>
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	2b39      	cmp	r3, #57	; 0x39
 8001a56:	d801      	bhi.n	8001a5c <_is_digit+0x1a>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <_is_digit+0x1c>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	b2db      	uxtb	r3, r3
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001a7c:	e00e      	b.n	8001a9c <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4618      	mov	r0, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	1c59      	adds	r1, r3, #1
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6011      	str	r1, [r2, #0]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	4403      	add	r3, r0
 8001a98:	3b30      	subs	r3, #48	; 0x30
 8001a9a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ffcd 	bl	8001a42 <_is_digit>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1e7      	bne.n	8001a7e <_atoi+0xe>
  }
  return i;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d125      	bne.n	8001b20 <_out_rev+0x68>
 8001ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d120      	bne.n	8001b20 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e00a      	b.n	8001afa <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	1c53      	adds	r3, r2, #1
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	68fc      	ldr	r4, [r7, #12]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	2020      	movs	r0, #32
 8001af2:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3301      	adds	r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d3f0      	bcc.n	8001ae4 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8001b02:	e00d      	b.n	8001b20 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8001b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b06:	3b01      	subs	r3, #1
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0e:	4413      	add	r3, r2
 8001b10:	7818      	ldrb	r0, [r3, #0]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	1c53      	adds	r3, r2, #1
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	68fc      	ldr	r4, [r7, #12]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	47a0      	blx	r4
  while (len) {
 8001b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1ee      	bne.n	8001b04 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00e      	beq.n	8001b4e <_out_rev+0x96>
    while (idx - start_idx < width) {
 8001b30:	e007      	b.n	8001b42 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	1c53      	adds	r3, r2, #1
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	68fc      	ldr	r4, [r7, #12]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	2020      	movs	r0, #32
 8001b40:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d8f1      	bhi.n	8001b32 <_out_rev+0x7a>
    }
  }

  return idx;
 8001b4e:	687b      	ldr	r3, [r7, #4]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	371c      	adds	r7, #28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd90      	pop	{r4, r7, pc}

08001b58 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af04      	add	r7, sp, #16
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d136      	bne.n	8001bde <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d018      	beq.n	8001ba8 <_ntoa_format+0x50>
 8001b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d013      	beq.n	8001ba8 <_ntoa_format+0x50>
 8001b80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d104      	bne.n	8001b92 <_ntoa_format+0x3a>
 8001b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00a      	beq.n	8001ba8 <_ntoa_format+0x50>
      width--;
 8001b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b94:	3b01      	subs	r3, #1
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001b98:	e006      	b.n	8001ba8 <_ntoa_format+0x50>
      buf[len++] = '0';
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	61fa      	str	r2, [r7, #28]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	2230      	movs	r2, #48	; 0x30
 8001ba6:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d20a      	bcs.n	8001bc6 <_ntoa_format+0x6e>
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	2b1f      	cmp	r3, #31
 8001bb4:	d9f1      	bls.n	8001b9a <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001bb6:	e006      	b.n	8001bc6 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	1c5a      	adds	r2, r3, #1
 8001bbc:	61fa      	str	r2, [r7, #28]
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	2230      	movs	r2, #48	; 0x30
 8001bc4:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <_ntoa_format+0x86>
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d202      	bcs.n	8001bde <_ntoa_format+0x86>
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	2b1f      	cmp	r3, #31
 8001bdc:	d9ec      	bls.n	8001bb8 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8001bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d058      	beq.n	8001c9a <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8001be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d116      	bne.n	8001c20 <_ntoa_format+0xc8>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d013      	beq.n	8001c20 <_ntoa_format+0xc8>
 8001bf8:	69fa      	ldr	r2, [r7, #28]
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d003      	beq.n	8001c08 <_ntoa_format+0xb0>
 8001c00:	69fa      	ldr	r2, [r7, #28]
 8001c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d10b      	bne.n	8001c20 <_ntoa_format+0xc8>
      len--;
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <_ntoa_format+0xc8>
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	2b10      	cmp	r3, #16
 8001c18:	d102      	bne.n	8001c20 <_ntoa_format+0xc8>
        len--;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	2b10      	cmp	r3, #16
 8001c24:	d10f      	bne.n	8001c46 <_ntoa_format+0xee>
 8001c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10a      	bne.n	8001c46 <_ntoa_format+0xee>
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	2b1f      	cmp	r3, #31
 8001c34:	d807      	bhi.n	8001c46 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	61fa      	str	r2, [r7, #28]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4413      	add	r3, r2
 8001c40:	2278      	movs	r2, #120	; 0x78
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	e01f      	b.n	8001c86 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	2b10      	cmp	r3, #16
 8001c4a:	d10f      	bne.n	8001c6c <_ntoa_format+0x114>
 8001c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00a      	beq.n	8001c6c <_ntoa_format+0x114>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	2b1f      	cmp	r3, #31
 8001c5a:	d807      	bhi.n	8001c6c <_ntoa_format+0x114>
      buf[len++] = 'X';
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	61fa      	str	r2, [r7, #28]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4413      	add	r3, r2
 8001c66:	2258      	movs	r2, #88	; 0x58
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	e00c      	b.n	8001c86 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d109      	bne.n	8001c86 <_ntoa_format+0x12e>
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	2b1f      	cmp	r3, #31
 8001c76:	d806      	bhi.n	8001c86 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	61fa      	str	r2, [r7, #28]
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4413      	add	r3, r2
 8001c82:	2262      	movs	r2, #98	; 0x62
 8001c84:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	2b1f      	cmp	r3, #31
 8001c8a:	d806      	bhi.n	8001c9a <_ntoa_format+0x142>
      buf[len++] = '0';
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	61fa      	str	r2, [r7, #28]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4413      	add	r3, r2
 8001c96:	2230      	movs	r2, #48	; 0x30
 8001c98:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	2b1f      	cmp	r3, #31
 8001c9e:	d824      	bhi.n	8001cea <_ntoa_format+0x192>
    if (negative) {
 8001ca0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <_ntoa_format+0x160>
      buf[len++] = '-';
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	61fa      	str	r2, [r7, #28]
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	222d      	movs	r2, #45	; 0x2d
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	e018      	b.n	8001cea <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8001cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	61fa      	str	r2, [r7, #28]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4413      	add	r3, r2
 8001ccc:	222b      	movs	r2, #43	; 0x2b
 8001cce:	701a      	strb	r2, [r3, #0]
 8001cd0:	e00b      	b.n	8001cea <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8001cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <_ntoa_format+0x192>
      buf[len++] = ' ';
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	61fa      	str	r2, [r7, #28]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cec:	9303      	str	r3, [sp, #12]
 8001cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf0:	9302      	str	r3, [sp, #8]
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	68b9      	ldr	r1, [r7, #8]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f7ff fed9 	bl	8001ab8 <_out_rev>
 8001d06:	4603      	mov	r3, r0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b096      	sub	sp, #88	; 0x58
 8001d14:	af08      	add	r7, sp, #32
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d103      	bne.n	8001d30 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8001d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2a:	f023 0310 	bic.w	r3, r3, #16
 8001d2e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <_ntoa_long+0x30>
 8001d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d033      	beq.n	8001da8 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8001d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d44:	fbb3 f2f2 	udiv	r2, r3, r2
 8001d48:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001d4a:	fb01 f202 	mul.w	r2, r1, r2
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001d54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d58:	2b09      	cmp	r3, #9
 8001d5a:	d804      	bhi.n	8001d66 <_ntoa_long+0x56>
 8001d5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d60:	3330      	adds	r3, #48	; 0x30
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	e00d      	b.n	8001d82 <_ntoa_long+0x72>
 8001d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <_ntoa_long+0x64>
 8001d70:	2241      	movs	r2, #65	; 0x41
 8001d72:	e000      	b.n	8001d76 <_ntoa_long+0x66>
 8001d74:	2261      	movs	r2, #97	; 0x61
 8001d76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	3b0a      	subs	r3, #10
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d84:	1c59      	adds	r1, r3, #1
 8001d86:	6379      	str	r1, [r7, #52]	; 0x34
 8001d88:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001d8c:	440b      	add	r3, r1
 8001d8e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001d92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <_ntoa_long+0x98>
 8001da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da4:	2b1f      	cmp	r3, #31
 8001da6:	d9cb      	bls.n	8001d40 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001daa:	9306      	str	r3, [sp, #24]
 8001dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dae:	9305      	str	r3, [sp, #20]
 8001db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db2:	9304      	str	r3, [sp, #16]
 8001db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001db6:	9303      	str	r3, [sp, #12]
 8001db8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001dbc:	9302      	str	r3, [sp, #8]
 8001dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	f107 0310 	add.w	r3, r7, #16
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f7ff fec2 	bl	8001b58 <_ntoa_format>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3738      	adds	r7, #56	; 0x38
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b096      	sub	sp, #88	; 0x58
 8001de2:	af08      	add	r7, sp, #32
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001df0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001df4:	4313      	orrs	r3, r2
 8001df6:	d103      	bne.n	8001e00 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8001df8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dfa:	f023 0310 	bic.w	r3, r3, #16
 8001dfe:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <_ntoa_long_long+0x34>
 8001e0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	d038      	beq.n	8001e84 <_ntoa_long_long+0xa6>
    do {
      const char digit = (char)(value % base);
 8001e12:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001e16:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e1a:	f7fe fec7 	bl	8000bac <__aeabi_uldivmod>
 8001e1e:	4613      	mov	r3, r2
 8001e20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001e24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e28:	2b09      	cmp	r3, #9
 8001e2a:	d804      	bhi.n	8001e36 <_ntoa_long_long+0x58>
 8001e2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e30:	3330      	adds	r3, #48	; 0x30
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	e00d      	b.n	8001e52 <_ntoa_long_long+0x74>
 8001e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <_ntoa_long_long+0x66>
 8001e40:	2241      	movs	r2, #65	; 0x41
 8001e42:	e000      	b.n	8001e46 <_ntoa_long_long+0x68>
 8001e44:	2261      	movs	r2, #97	; 0x61
 8001e46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e4a:	4413      	add	r3, r2
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	3b0a      	subs	r3, #10
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e54:	1c59      	adds	r1, r3, #1
 8001e56:	6379      	str	r1, [r7, #52]	; 0x34
 8001e58:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001e5c:	440b      	add	r3, r1
 8001e5e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001e62:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e66:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001e6a:	f7fe fe9f 	bl	8000bac <__aeabi_uldivmod>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001e76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	d002      	beq.n	8001e84 <_ntoa_long_long+0xa6>
 8001e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e80:	2b1f      	cmp	r3, #31
 8001e82:	d9c6      	bls.n	8001e12 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e88:	9206      	str	r2, [sp, #24]
 8001e8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e8c:	9205      	str	r2, [sp, #20]
 8001e8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e90:	9204      	str	r2, [sp, #16]
 8001e92:	9303      	str	r3, [sp, #12]
 8001e94:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e98:	9302      	str	r3, [sp, #8]
 8001e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f7ff fe54 	bl	8001b58 <_ntoa_format>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3738      	adds	r7, #56	; 0x38
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	0000      	movs	r0, r0
 8001ebc:	0000      	movs	r0, r0
	...

08001ec0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b09d      	sub	sp, #116	; 0x74
 8001ec4:	af04      	add	r7, sp, #16
 8001ec6:	6178      	str	r0, [r7, #20]
 8001ec8:	6139      	str	r1, [r7, #16]
 8001eca:	60fa      	str	r2, [r7, #12]
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8001ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ee6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001eea:	f7fe fde5 	bl	8000ab8 <__aeabi_dcmpeq>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10f      	bne.n	8001f14 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8001ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef6:	9303      	str	r3, [sp, #12]
 8001ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001efa:	9302      	str	r3, [sp, #8]
 8001efc:	2303      	movs	r3, #3
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	4ba9      	ldr	r3, [pc, #676]	; (80021a8 <_ftoa+0x2e8>)
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	6939      	ldr	r1, [r7, #16]
 8001f0a:	6978      	ldr	r0, [r7, #20]
 8001f0c:	f7ff fdd4 	bl	8001ab8 <_out_rev>
 8001f10:	4603      	mov	r3, r0
 8001f12:	e22b      	b.n	800236c <_ftoa+0x4ac>
  if (value < -DBL_MAX)
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295
 8001f18:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001f1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f20:	f7fe fdd4 	bl	8000acc <__aeabi_dcmplt>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00f      	beq.n	8001f4a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f2c:	9303      	str	r3, [sp, #12]
 8001f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f30:	9302      	str	r3, [sp, #8]
 8001f32:	2304      	movs	r3, #4
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	4b9d      	ldr	r3, [pc, #628]	; (80021ac <_ftoa+0x2ec>)
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	6939      	ldr	r1, [r7, #16]
 8001f40:	6978      	ldr	r0, [r7, #20]
 8001f42:	f7ff fdb9 	bl	8001ab8 <_out_rev>
 8001f46:	4603      	mov	r3, r0
 8001f48:	e210      	b.n	800236c <_ftoa+0x4ac>
  if (value > DBL_MAX)
 8001f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4e:	4b98      	ldr	r3, [pc, #608]	; (80021b0 <_ftoa+0x2f0>)
 8001f50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f54:	f7fe fdd8 	bl	8000b08 <__aeabi_dcmpgt>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d01d      	beq.n	8001f9a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001f5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <_ftoa+0xac>
 8001f68:	4b92      	ldr	r3, [pc, #584]	; (80021b4 <_ftoa+0x2f4>)
 8001f6a:	e000      	b.n	8001f6e <_ftoa+0xae>
 8001f6c:	4b92      	ldr	r3, [pc, #584]	; (80021b8 <_ftoa+0x2f8>)
 8001f6e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001f70:	f002 0204 	and.w	r2, r2, #4
 8001f74:	2a00      	cmp	r2, #0
 8001f76:	d001      	beq.n	8001f7c <_ftoa+0xbc>
 8001f78:	2204      	movs	r2, #4
 8001f7a:	e000      	b.n	8001f7e <_ftoa+0xbe>
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001f80:	9103      	str	r1, [sp, #12]
 8001f82:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001f84:	9102      	str	r1, [sp, #8]
 8001f86:	9201      	str	r2, [sp, #4]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	6939      	ldr	r1, [r7, #16]
 8001f90:	6978      	ldr	r0, [r7, #20]
 8001f92:	f7ff fd91 	bl	8001ab8 <_out_rev>
 8001f96:	4603      	mov	r3, r0
 8001f98:	e1e8      	b.n	800236c <_ftoa+0x4ac>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8001f9a:	a37f      	add	r3, pc, #508	; (adr r3, 8002198 <_ftoa+0x2d8>)
 8001f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fa4:	f7fe fdb0 	bl	8000b08 <__aeabi_dcmpgt>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d109      	bne.n	8001fc2 <_ftoa+0x102>
 8001fae:	a37c      	add	r3, pc, #496	; (adr r3, 80021a0 <_ftoa+0x2e0>)
 8001fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fb8:	f7fe fd88 	bl	8000acc <__aeabi_dcmplt>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00f      	beq.n	8001fe2 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fc4:	9302      	str	r3, [sp, #8]
 8001fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	ed97 0b00 	vldr	d0, [r7]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	6939      	ldr	r1, [r7, #16]
 8001fd8:	6978      	ldr	r0, [r7, #20]
 8001fda:	f000 f9d1 	bl	8002380 <_etoa>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	e1c4      	b.n	800236c <_ftoa+0x4ac>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ff4:	f7fe fd6a 	bl	8000acc <__aeabi_dcmplt>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00e      	beq.n	800201c <_ftoa+0x15c>
    negative = true;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8002004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002008:	f04f 0000 	mov.w	r0, #0
 800200c:	f04f 0100 	mov.w	r1, #0
 8002010:	f7fe f932 	bl	8000278 <__aeabi_dsub>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800201c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800201e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10e      	bne.n	8002044 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002026:	2306      	movs	r3, #6
 8002028:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800202a:	e00b      	b.n	8002044 <_ftoa+0x184>
    buf[len++] = '0';
 800202c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002032:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002036:	4413      	add	r3, r2
 8002038:	2230      	movs	r2, #48	; 0x30
 800203a:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800203e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002040:	3b01      	subs	r3, #1
 8002042:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002046:	2b1f      	cmp	r3, #31
 8002048:	d802      	bhi.n	8002050 <_ftoa+0x190>
 800204a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800204c:	2b09      	cmp	r3, #9
 800204e:	d8ed      	bhi.n	800202c <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002050:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002054:	f7fe fd62 	bl	8000b1c <__aeabi_d2iz>
 8002058:	4603      	mov	r3, r0
 800205a:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800205c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800205e:	f7fe fa59 	bl	8000514 <__aeabi_i2d>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	e9d7 0100 	ldrd	r0, r1, [r7]
 800206a:	f7fe f905 	bl	8000278 <__aeabi_dsub>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	4a51      	ldr	r2, [pc, #324]	; (80021bc <_ftoa+0x2fc>)
 8002078:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	f7fe fab1 	bl	80005e8 <__aeabi_dmul>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800208e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002092:	f7fe fd6b 	bl	8000b6c <__aeabi_d2uiz>
 8002096:	4603      	mov	r3, r0
 8002098:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800209a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800209c:	f7fe fa2a 	bl	80004f4 <__aeabi_ui2d>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80020a8:	f7fe f8e6 	bl	8000278 <__aeabi_dsub>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	4b41      	ldr	r3, [pc, #260]	; (80021c0 <_ftoa+0x300>)
 80020ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80020be:	f7fe fd23 	bl	8000b08 <__aeabi_dcmpgt>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d016      	beq.n	80020f6 <_ftoa+0x236>
    ++frac;
 80020c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ca:	3301      	adds	r3, #1
 80020cc:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80020ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80020d0:	f7fe fa10 	bl	80004f4 <__aeabi_ui2d>
 80020d4:	4a39      	ldr	r2, [pc, #228]	; (80021bc <_ftoa+0x2fc>)
 80020d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e0:	f7fe fd08 	bl	8000af4 <__aeabi_dcmpge>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d01a      	beq.n	8002120 <_ftoa+0x260>
      frac = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80020ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020f0:	3301      	adds	r3, #1
 80020f2:	657b      	str	r3, [r7, #84]	; 0x54
 80020f4:	e014      	b.n	8002120 <_ftoa+0x260>
    }
  }
  else if (diff < 0.5) {
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <_ftoa+0x300>)
 80020fc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002100:	f7fe fce4 	bl	8000acc <__aeabi_dcmplt>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10a      	bne.n	8002120 <_ftoa+0x260>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800210a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800210c:	2b00      	cmp	r3, #0
 800210e:	d004      	beq.n	800211a <_ftoa+0x25a>
 8002110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <_ftoa+0x260>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800211a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800211c:	3301      	adds	r3, #1
 800211e:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8002120:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002122:	2b00      	cmp	r3, #0
 8002124:	d134      	bne.n	8002190 <_ftoa+0x2d0>
    diff = value - (double)whole;
 8002126:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002128:	f7fe f9f4 	bl	8000514 <__aeabi_i2d>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002134:	f7fe f8a0 	bl	8000278 <__aeabi_dsub>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002140:	2301      	movs	r3, #1
 8002142:	461c      	mov	r4, r3
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <_ftoa+0x300>)
 800214a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800214e:	f7fe fcbd 	bl	8000acc <__aeabi_dcmplt>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <_ftoa+0x29c>
 8002158:	2300      	movs	r3, #0
 800215a:	461c      	mov	r4, r3
 800215c:	b2e3      	uxtb	r3, r4
 800215e:	f083 0301 	eor.w	r3, r3, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d109      	bne.n	800217c <_ftoa+0x2bc>
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <_ftoa+0x300>)
 800216e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002172:	f7fe fcc9 	bl	8000b08 <__aeabi_dcmpgt>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d067      	beq.n	800224c <_ftoa+0x38c>
 800217c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8085 	beq.w	8002292 <_ftoa+0x3d2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800218a:	3301      	adds	r3, #1
 800218c:	657b      	str	r3, [r7, #84]	; 0x54
 800218e:	e080      	b.n	8002292 <_ftoa+0x3d2>
    }
  }
  else {
    unsigned int count = prec;
 8002190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002192:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002194:	e037      	b.n	8002206 <_ftoa+0x346>
 8002196:	bf00      	nop
 8002198:	00000000 	.word	0x00000000
 800219c:	41cdcd65 	.word	0x41cdcd65
 80021a0:	00000000 	.word	0x00000000
 80021a4:	c1cdcd65 	.word	0xc1cdcd65
 80021a8:	080077f4 	.word	0x080077f4
 80021ac:	080077f8 	.word	0x080077f8
 80021b0:	7fefffff 	.word	0x7fefffff
 80021b4:	08007800 	.word	0x08007800
 80021b8:	08007808 	.word	0x08007808
 80021bc:	08007810 	.word	0x08007810
 80021c0:	3fe00000 	.word	0x3fe00000
      --count;
 80021c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021c6:	3b01      	subs	r3, #1
 80021c8:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80021ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80021cc:	4b69      	ldr	r3, [pc, #420]	; (8002374 <_ftoa+0x4b4>)
 80021ce:	fba3 2301 	umull	r2, r3, r3, r1
 80021d2:	08da      	lsrs	r2, r3, #3
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	1aca      	subs	r2, r1, r3
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021e2:	1c59      	adds	r1, r3, #1
 80021e4:	65f9      	str	r1, [r7, #92]	; 0x5c
 80021e6:	3230      	adds	r2, #48	; 0x30
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80021ee:	440b      	add	r3, r1
 80021f0:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80021f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021f6:	4a5f      	ldr	r2, [pc, #380]	; (8002374 <_ftoa+0x4b4>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	08db      	lsrs	r3, r3, #3
 80021fe:	653b      	str	r3, [r7, #80]	; 0x50
 8002200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <_ftoa+0x34e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002208:	2b1f      	cmp	r3, #31
 800220a:	d9db      	bls.n	80021c4 <_ftoa+0x304>
 800220c:	e00a      	b.n	8002224 <_ftoa+0x364>
        break;
 800220e:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002210:	e008      	b.n	8002224 <_ftoa+0x364>
      buf[len++] = '0';
 8002212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002218:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800221c:	4413      	add	r3, r2
 800221e:	2230      	movs	r2, #48	; 0x30
 8002220:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002226:	2b1f      	cmp	r3, #31
 8002228:	d804      	bhi.n	8002234 <_ftoa+0x374>
 800222a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800222c:	1e5a      	subs	r2, r3, #1
 800222e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1ee      	bne.n	8002212 <_ftoa+0x352>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002236:	2b1f      	cmp	r3, #31
 8002238:	d82b      	bhi.n	8002292 <_ftoa+0x3d2>
      // add decimal
      buf[len++] = '.';
 800223a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002240:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002244:	4413      	add	r3, r2
 8002246:	222e      	movs	r2, #46	; 0x2e
 8002248:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800224c:	e021      	b.n	8002292 <_ftoa+0x3d2>
    buf[len++] = (char)(48 + (whole % 10));
 800224e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002250:	4b49      	ldr	r3, [pc, #292]	; (8002378 <_ftoa+0x4b8>)
 8002252:	fb83 1302 	smull	r1, r3, r3, r2
 8002256:	1099      	asrs	r1, r3, #2
 8002258:	17d3      	asrs	r3, r2, #31
 800225a:	1ac9      	subs	r1, r1, r3
 800225c:	460b      	mov	r3, r1
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	1ad1      	subs	r1, r2, r3
 8002266:	b2ca      	uxtb	r2, r1
 8002268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800226a:	1c59      	adds	r1, r3, #1
 800226c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800226e:	3230      	adds	r2, #48	; 0x30
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002276:	440b      	add	r3, r1
 8002278:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800227c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800227e:	4a3e      	ldr	r2, [pc, #248]	; (8002378 <_ftoa+0x4b8>)
 8002280:	fb82 1203 	smull	r1, r2, r2, r3
 8002284:	1092      	asrs	r2, r2, #2
 8002286:	17db      	asrs	r3, r3, #31
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	657b      	str	r3, [r7, #84]	; 0x54
 800228c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <_ftoa+0x3da>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002294:	2b1f      	cmp	r3, #31
 8002296:	d9da      	bls.n	800224e <_ftoa+0x38e>
 8002298:	e000      	b.n	800229c <_ftoa+0x3dc>
      break;
 800229a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800229c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d124      	bne.n	80022f0 <_ftoa+0x430>
 80022a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01f      	beq.n	80022f0 <_ftoa+0x430>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80022b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d015      	beq.n	80022e2 <_ftoa+0x422>
 80022b6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d104      	bne.n	80022c8 <_ftoa+0x408>
 80022be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00c      	beq.n	80022e2 <_ftoa+0x422>
      width--;
 80022c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ca:	3b01      	subs	r3, #1
 80022cc:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80022ce:	e008      	b.n	80022e2 <_ftoa+0x422>
      buf[len++] = '0';
 80022d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80022d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022da:	4413      	add	r3, r2
 80022dc:	2230      	movs	r2, #48	; 0x30
 80022de:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80022e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80022e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d202      	bcs.n	80022f0 <_ftoa+0x430>
 80022ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ec:	2b1f      	cmp	r3, #31
 80022ee:	d9ef      	bls.n	80022d0 <_ftoa+0x410>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80022f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022f2:	2b1f      	cmp	r3, #31
 80022f4:	d82a      	bhi.n	800234c <_ftoa+0x48c>
    if (negative) {
 80022f6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <_ftoa+0x452>
      buf[len++] = '-';
 80022fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002304:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002308:	4413      	add	r3, r2
 800230a:	222d      	movs	r2, #45	; 0x2d
 800230c:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002310:	e01c      	b.n	800234c <_ftoa+0x48c>
    }
    else if (flags & FLAGS_PLUS) {
 8002312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d009      	beq.n	8002330 <_ftoa+0x470>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800231c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002322:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002326:	4413      	add	r3, r2
 8002328:	222b      	movs	r2, #43	; 0x2b
 800232a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800232e:	e00d      	b.n	800234c <_ftoa+0x48c>
    }
    else if (flags & FLAGS_SPACE) {
 8002330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d008      	beq.n	800234c <_ftoa+0x48c>
      buf[len++] = ' ';
 800233a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002340:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002344:	4413      	add	r3, r2
 8002346:	2220      	movs	r2, #32
 8002348:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800234c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800234e:	9303      	str	r3, [sp, #12]
 8002350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002352:	9302      	str	r3, [sp, #8]
 8002354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	f107 0318 	add.w	r3, r7, #24
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	6939      	ldr	r1, [r7, #16]
 8002364:	6978      	ldr	r0, [r7, #20]
 8002366:	f7ff fba7 	bl	8001ab8 <_out_rev>
 800236a:	4603      	mov	r3, r0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3764      	adds	r7, #100	; 0x64
 8002370:	46bd      	mov	sp, r7
 8002372:	bd90      	pop	{r4, r7, pc}
 8002374:	cccccccd 	.word	0xcccccccd
 8002378:	66666667 	.word	0x66666667
 800237c:	00000000 	.word	0x00000000

08002380 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002384:	b09d      	sub	sp, #116	; 0x74
 8002386:	af06      	add	r7, sp, #24
 8002388:	61f8      	str	r0, [r7, #28]
 800238a:	61b9      	str	r1, [r7, #24]
 800238c:	617a      	str	r2, [r7, #20]
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002398:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800239c:	f7fe fb8c 	bl	8000ab8 <__aeabi_dcmpeq>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d014      	beq.n	80023d0 <_etoa+0x50>
 80023a6:	f04f 32ff 	mov.w	r2, #4294967295
 80023aa:	4bc3      	ldr	r3, [pc, #780]	; (80026b8 <_etoa+0x338>)
 80023ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023b0:	f7fe fbaa 	bl	8000b08 <__aeabi_dcmpgt>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10a      	bne.n	80023d0 <_etoa+0x50>
 80023ba:	f04f 32ff 	mov.w	r2, #4294967295
 80023be:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80023c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023c6:	f7fe fb81 	bl	8000acc <__aeabi_dcmplt>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d012      	beq.n	80023f6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80023d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023d4:	9302      	str	r3, [sp, #8]
 80023d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	ed97 0b02 	vldr	d0, [r7, #8]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	69b9      	ldr	r1, [r7, #24]
 80023ec:	69f8      	ldr	r0, [r7, #28]
 80023ee:	f7ff fd67 	bl	8001ec0 <_ftoa>
 80023f2:	4603      	mov	r3, r0
 80023f4:	e245      	b.n	8002882 <_etoa+0x502>
  }

  // determine the sign
  const bool negative = value < 0;
 80023f6:	2301      	movs	r3, #1
 80023f8:	461e      	mov	r6, r3
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002406:	f7fe fb61 	bl	8000acc <__aeabi_dcmplt>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <_etoa+0x94>
 8002410:	2300      	movs	r3, #0
 8002412:	461e      	mov	r6, r3
 8002414:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8002418:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <_etoa+0xac>
    value = -value;
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800242a:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800242c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002438:	2306      	movs	r3, #6
 800243a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800243e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002442:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002446:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	0d0a      	lsrs	r2, r1, #20
 8002454:	2300      	movs	r3, #0
 8002456:	4613      	mov	r3, r2
 8002458:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800245c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002460:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002466:	f04f 30ff 	mov.w	r0, #4294967295
 800246a:	4994      	ldr	r1, [pc, #592]	; (80026bc <_etoa+0x33c>)
 800246c:	ea02 0400 	and.w	r4, r2, r0
 8002470:	ea03 0501 	and.w	r5, r3, r1
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	4b91      	ldr	r3, [pc, #580]	; (80026c0 <_etoa+0x340>)
 800247a:	ea44 0802 	orr.w	r8, r4, r2
 800247e:	ea45 0903 	orr.w	r9, r5, r3
 8002482:	e9c7 8908 	strd	r8, r9, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002486:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002488:	f7fe f844 	bl	8000514 <__aeabi_i2d>
 800248c:	a37e      	add	r3, pc, #504	; (adr r3, 8002688 <_etoa+0x308>)
 800248e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002492:	f7fe f8a9 	bl	80005e8 <__aeabi_dmul>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	a37c      	add	r3, pc, #496	; (adr r3, 8002690 <_etoa+0x310>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fd feea 	bl	800027c <__adddf3>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4614      	mov	r4, r2
 80024ae:	461d      	mov	r5, r3
 80024b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	4b82      	ldr	r3, [pc, #520]	; (80026c4 <_etoa+0x344>)
 80024ba:	f7fd fedd 	bl	8000278 <__aeabi_dsub>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	a374      	add	r3, pc, #464	; (adr r3, 8002698 <_etoa+0x318>)
 80024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024cc:	f7fe f88c 	bl	80005e8 <__aeabi_dmul>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4620      	mov	r0, r4
 80024d6:	4629      	mov	r1, r5
 80024d8:	f7fd fed0 	bl	800027c <__adddf3>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4610      	mov	r0, r2
 80024e2:	4619      	mov	r1, r3
 80024e4:	f7fe fb1a 	bl	8000b1c <__aeabi_d2iz>
 80024e8:	4603      	mov	r3, r0
 80024ea:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80024ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80024ee:	f7fe f811 	bl	8000514 <__aeabi_i2d>
 80024f2:	a36b      	add	r3, pc, #428	; (adr r3, 80026a0 <_etoa+0x320>)
 80024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f8:	f7fe f876 	bl	80005e8 <__aeabi_dmul>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	4b6f      	ldr	r3, [pc, #444]	; (80026c8 <_etoa+0x348>)
 800250a:	f7fd feb7 	bl	800027c <__adddf3>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	f7fe fb01 	bl	8000b1c <__aeabi_d2iz>
 800251a:	4603      	mov	r3, r0
 800251c:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800251e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002520:	f7fd fff8 	bl	8000514 <__aeabi_i2d>
 8002524:	a360      	add	r3, pc, #384	; (adr r3, 80026a8 <_etoa+0x328>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fe f85d 	bl	80005e8 <__aeabi_dmul>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4614      	mov	r4, r2
 8002534:	461d      	mov	r5, r3
 8002536:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002538:	f7fd ffec 	bl	8000514 <__aeabi_i2d>
 800253c:	a35c      	add	r3, pc, #368	; (adr r3, 80026b0 <_etoa+0x330>)
 800253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002542:	f7fe f851 	bl	80005e8 <__aeabi_dmul>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4620      	mov	r0, r4
 800254c:	4629      	mov	r1, r5
 800254e:	f7fd fe93 	bl	8000278 <__aeabi_dsub>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 800255a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800255e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002562:	f7fe f841 	bl	80005e8 <__aeabi_dmul>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800256e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002570:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002574:	4618      	mov	r0, r3
 8002576:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	0503      	lsls	r3, r0, #20
 8002584:	2200      	movs	r2, #0
 8002586:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800258a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800258e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	f7fd fe71 	bl	800027c <__adddf3>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4690      	mov	r8, r2
 80025a0:	4699      	mov	r9, r3
 80025a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025a6:	f04f 0000 	mov.w	r0, #0
 80025aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80025ae:	f7fd fe63 	bl	8000278 <__aeabi_dsub>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4692      	mov	sl, r2
 80025b8:	469b      	mov	fp, r3
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	4b43      	ldr	r3, [pc, #268]	; (80026cc <_etoa+0x34c>)
 80025c0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80025c4:	f7fe f93a 	bl	800083c <__aeabi_ddiv>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	4b3e      	ldr	r3, [pc, #248]	; (80026d0 <_etoa+0x350>)
 80025d6:	f7fd fe51 	bl	800027c <__adddf3>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80025e2:	f7fe f92b 	bl	800083c <__aeabi_ddiv>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <_etoa+0x354>)
 80025f4:	f7fd fe42 	bl	800027c <__adddf3>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002600:	f7fe f91c 	bl	800083c <__aeabi_ddiv>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4650      	mov	r0, sl
 800260a:	4659      	mov	r1, fp
 800260c:	f7fd fe36 	bl	800027c <__adddf3>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4640      	mov	r0, r8
 8002616:	4649      	mov	r1, r9
 8002618:	f7fe f910 	bl	800083c <__aeabi_ddiv>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4610      	mov	r0, r2
 8002622:	4619      	mov	r1, r3
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <_etoa+0x340>)
 800262a:	f7fd fe27 	bl	800027c <__adddf3>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4620      	mov	r0, r4
 8002634:	4629      	mov	r1, r5
 8002636:	f7fd ffd7 	bl	80005e8 <__aeabi_dmul>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8002642:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002646:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800264a:	f7fe fa3f 	bl	8000acc <__aeabi_dcmplt>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00d      	beq.n	8002670 <_etoa+0x2f0>
    expval--;
 8002654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002656:	3b01      	subs	r3, #1
 8002658:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 800265a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <_etoa+0x350>)
 8002664:	f7fe f8ea 	bl	800083c <__aeabi_ddiv>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002672:	2b63      	cmp	r3, #99	; 0x63
 8002674:	dc30      	bgt.n	80026d8 <_etoa+0x358>
 8002676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002678:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800267c:	db2c      	blt.n	80026d8 <_etoa+0x358>
 800267e:	2304      	movs	r3, #4
 8002680:	e02b      	b.n	80026da <_etoa+0x35a>
 8002682:	bf00      	nop
 8002684:	f3af 8000 	nop.w
 8002688:	509f79fb 	.word	0x509f79fb
 800268c:	3fd34413 	.word	0x3fd34413
 8002690:	8b60c8b3 	.word	0x8b60c8b3
 8002694:	3fc68a28 	.word	0x3fc68a28
 8002698:	636f4361 	.word	0x636f4361
 800269c:	3fd287a7 	.word	0x3fd287a7
 80026a0:	0979a371 	.word	0x0979a371
 80026a4:	400a934f 	.word	0x400a934f
 80026a8:	bbb55516 	.word	0xbbb55516
 80026ac:	40026bb1 	.word	0x40026bb1
 80026b0:	fefa39ef 	.word	0xfefa39ef
 80026b4:	3fe62e42 	.word	0x3fe62e42
 80026b8:	7fefffff 	.word	0x7fefffff
 80026bc:	000fffff 	.word	0x000fffff
 80026c0:	3ff00000 	.word	0x3ff00000
 80026c4:	3ff80000 	.word	0x3ff80000
 80026c8:	3fe00000 	.word	0x3fe00000
 80026cc:	402c0000 	.word	0x402c0000
 80026d0:	40240000 	.word	0x40240000
 80026d4:	40180000 	.word	0x40180000
 80026d8:	2305      	movs	r3, #5
 80026da:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80026dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d03d      	beq.n	8002764 <_etoa+0x3e4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80026e8:	a369      	add	r3, pc, #420	; (adr r3, 8002890 <_etoa+0x510>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026f2:	f7fe f9ff 	bl	8000af4 <__aeabi_dcmpge>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d024      	beq.n	8002746 <_etoa+0x3c6>
 80026fc:	a366      	add	r3, pc, #408	; (adr r3, 8002898 <_etoa+0x518>)
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002706:	f7fe f9e1 	bl	8000acc <__aeabi_dcmplt>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01a      	beq.n	8002746 <_etoa+0x3c6>
      if ((int)prec > expval) {
 8002710:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002714:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002716:	429a      	cmp	r2, r3
 8002718:	da07      	bge.n	800272a <_etoa+0x3aa>
        prec = (unsigned)((int)prec - expval - 1);
 800271a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800271e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002728:	e002      	b.n	8002730 <_etoa+0x3b0>
      }
      else {
        prec = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002730:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002734:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	657b      	str	r3, [r7, #84]	; 0x54
 8002744:	e00e      	b.n	8002764 <_etoa+0x3e4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002746:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <_etoa+0x3e4>
 800274e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002756:	2b00      	cmp	r3, #0
 8002758:	d004      	beq.n	8002764 <_etoa+0x3e4>
        --prec;
 800275a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800275e:	3b01      	subs	r3, #1
 8002760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002768:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 800276a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800276e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002770:	429a      	cmp	r2, r3
 8002772:	d904      	bls.n	800277e <_etoa+0x3fe>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002774:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800277c:	e001      	b.n	8002782 <_etoa+0x402>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002782:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d004      	beq.n	8002798 <_etoa+0x418>
 800278e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <_etoa+0x418>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8002798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <_etoa+0x432>
    value /= conv.F;
 800279e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027a6:	f7fe f849 	bl	800083c <__aeabi_ddiv>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80027b6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <_etoa+0x44c>
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	e003      	b.n	80027d4 <_etoa+0x454>
 80027cc:	ed97 7b02 	vldr	d7, [r7, #8]
 80027d0:	ed87 7b00 	vstr	d7, [r7]
 80027d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027dc:	9302      	str	r3, [sp, #8]
 80027de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027e0:	9301      	str	r3, [sp, #4]
 80027e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	ed97 0b00 	vldr	d0, [r7]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	69b9      	ldr	r1, [r7, #24]
 80027f2:	69f8      	ldr	r0, [r7, #28]
 80027f4:	f7ff fb64 	bl	8001ec0 <_ftoa>
 80027f8:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 80027fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d03f      	beq.n	8002880 <_etoa+0x500>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8002800:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <_etoa+0x490>
 800280c:	2045      	movs	r0, #69	; 0x45
 800280e:	e000      	b.n	8002812 <_etoa+0x492>
 8002810:	2065      	movs	r0, #101	; 0x65
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	1c53      	adds	r3, r2, #1
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	69fc      	ldr	r4, [r7, #28]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	69b9      	ldr	r1, [r7, #24]
 800281e:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8002820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002822:	2b00      	cmp	r3, #0
 8002824:	bfb8      	it	lt
 8002826:	425b      	neglt	r3, r3
 8002828:	4618      	mov	r0, r3
 800282a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282c:	0fdb      	lsrs	r3, r3, #31
 800282e:	b2db      	uxtb	r3, r3
 8002830:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002832:	3a01      	subs	r2, #1
 8002834:	2105      	movs	r1, #5
 8002836:	9105      	str	r1, [sp, #20]
 8002838:	9204      	str	r2, [sp, #16]
 800283a:	2200      	movs	r2, #0
 800283c:	9203      	str	r2, [sp, #12]
 800283e:	220a      	movs	r2, #10
 8002840:	9202      	str	r2, [sp, #8]
 8002842:	9301      	str	r3, [sp, #4]
 8002844:	9000      	str	r0, [sp, #0]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	69b9      	ldr	r1, [r7, #24]
 800284c:	69f8      	ldr	r0, [r7, #28]
 800284e:	f7ff fa5f 	bl	8001d10 <_ntoa_long>
 8002852:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002854:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00f      	beq.n	8002880 <_etoa+0x500>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8002860:	e007      	b.n	8002872 <_etoa+0x4f2>
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	1c53      	adds	r3, r2, #1
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	69fc      	ldr	r4, [r7, #28]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	69b9      	ldr	r1, [r7, #24]
 800286e:	2020      	movs	r0, #32
 8002870:	47a0      	blx	r4
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800287c:	429a      	cmp	r2, r3
 800287e:	d8f0      	bhi.n	8002862 <_etoa+0x4e2>
    }
  }
  return idx;
 8002880:	697b      	ldr	r3, [r7, #20]
}
 8002882:	4618      	mov	r0, r3
 8002884:	375c      	adds	r7, #92	; 0x5c
 8002886:	46bd      	mov	sp, r7
 8002888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800288c:	f3af 8000 	nop.w
 8002890:	eb1c432d 	.word	0xeb1c432d
 8002894:	3f1a36e2 	.word	0x3f1a36e2
 8002898:	00000000 	.word	0x00000000
 800289c:	412e8480 	.word	0x412e8480

080028a0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80028a0:	b5b0      	push	{r4, r5, r7, lr}
 80028a2:	b0a0      	sub	sp, #128	; 0x80
 80028a4:	af0a      	add	r7, sp, #40	; 0x28
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f040 8494 	bne.w	80031e2 <_vsnprintf+0x942>
    // use null output function
    out = _out_null;
 80028ba:	4ba0      	ldr	r3, [pc, #640]	; (8002b3c <_vsnprintf+0x29c>)
 80028bc:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 80028be:	f000 bc90 	b.w	80031e2 <_vsnprintf+0x942>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b25      	cmp	r3, #37	; 0x25
 80028c8:	d00d      	beq.n	80028e6 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	7818      	ldrb	r0, [r3, #0]
 80028ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028d0:	1c53      	adds	r3, r2, #1
 80028d2:	647b      	str	r3, [r7, #68]	; 0x44
 80028d4:	68fc      	ldr	r4, [r7, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	47a0      	blx	r4
      format++;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	3301      	adds	r3, #1
 80028e0:	603b      	str	r3, [r7, #0]
      continue;
 80028e2:	f000 bc7e 	b.w	80031e2 <_vsnprintf+0x942>
    }
    else {
      // yes, evaluate it
      format++;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	3301      	adds	r3, #1
 80028ea:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	3b20      	subs	r3, #32
 80028f6:	2b10      	cmp	r3, #16
 80028f8:	d856      	bhi.n	80029a8 <_vsnprintf+0x108>
 80028fa:	a201      	add	r2, pc, #4	; (adr r2, 8002900 <_vsnprintf+0x60>)
 80028fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002900:	08002981 	.word	0x08002981
 8002904:	080029a9 	.word	0x080029a9
 8002908:	080029a9 	.word	0x080029a9
 800290c:	08002995 	.word	0x08002995
 8002910:	080029a9 	.word	0x080029a9
 8002914:	080029a9 	.word	0x080029a9
 8002918:	080029a9 	.word	0x080029a9
 800291c:	080029a9 	.word	0x080029a9
 8002920:	080029a9 	.word	0x080029a9
 8002924:	080029a9 	.word	0x080029a9
 8002928:	080029a9 	.word	0x080029a9
 800292c:	0800296d 	.word	0x0800296d
 8002930:	080029a9 	.word	0x080029a9
 8002934:	08002959 	.word	0x08002959
 8002938:	080029a9 	.word	0x080029a9
 800293c:	080029a9 	.word	0x080029a9
 8002940:	08002945 	.word	0x08002945
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	657b      	str	r3, [r7, #84]	; 0x54
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	3301      	adds	r3, #1
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	2301      	movs	r3, #1
 8002954:	64bb      	str	r3, [r7, #72]	; 0x48
 8002956:	e02a      	b.n	80029ae <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295a:	f043 0302 	orr.w	r3, r3, #2
 800295e:	657b      	str	r3, [r7, #84]	; 0x54
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	3301      	adds	r3, #1
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	2301      	movs	r3, #1
 8002968:	64bb      	str	r3, [r7, #72]	; 0x48
 800296a:	e020      	b.n	80029ae <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800296c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	657b      	str	r3, [r7, #84]	; 0x54
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	3301      	adds	r3, #1
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	2301      	movs	r3, #1
 800297c:	64bb      	str	r3, [r7, #72]	; 0x48
 800297e:	e016      	b.n	80029ae <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002982:	f043 0308 	orr.w	r3, r3, #8
 8002986:	657b      	str	r3, [r7, #84]	; 0x54
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	3301      	adds	r3, #1
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	2301      	movs	r3, #1
 8002990:	64bb      	str	r3, [r7, #72]	; 0x48
 8002992:	e00c      	b.n	80029ae <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002996:	f043 0310 	orr.w	r3, r3, #16
 800299a:	657b      	str	r3, [r7, #84]	; 0x54
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	3301      	adds	r3, #1
 80029a0:	603b      	str	r3, [r7, #0]
 80029a2:	2301      	movs	r3, #1
 80029a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80029a6:	e002      	b.n	80029ae <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 80029a8:	2300      	movs	r3, #0
 80029aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80029ac:	bf00      	nop
      }
    } while (n);
 80029ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d19d      	bne.n	80028f0 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff f840 	bl	8001a42 <_is_digit>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <_vsnprintf+0x134>
      width = _atoi(&format);
 80029c8:	463b      	mov	r3, r7
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff f850 	bl	8001a70 <_atoi>
 80029d0:	6538      	str	r0, [r7, #80]	; 0x50
 80029d2:	e018      	b.n	8002a06 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b2a      	cmp	r3, #42	; 0x2a
 80029da:	d114      	bne.n	8002a06 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 80029dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029de:	1d1a      	adds	r2, r3, #4
 80029e0:	66ba      	str	r2, [r7, #104]	; 0x68
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 80029e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	da07      	bge.n	80029fc <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 80029ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ee:	f043 0302 	orr.w	r3, r3, #2
 80029f2:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 80029f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f6:	425b      	negs	r3, r3
 80029f8:	653b      	str	r3, [r7, #80]	; 0x50
 80029fa:	e001      	b.n	8002a00 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 80029fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fe:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	3301      	adds	r3, #1
 8002a04:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b2e      	cmp	r3, #46	; 0x2e
 8002a10:	d124      	bne.n	8002a5c <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 8002a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a18:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff f80c 	bl	8001a42 <_is_digit>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8002a30:	463b      	mov	r3, r7
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff f81c 	bl	8001a70 <_atoi>
 8002a38:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002a3a:	e00f      	b.n	8002a5c <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b2a      	cmp	r3, #42	; 0x2a
 8002a42:	d10b      	bne.n	8002a5c <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 8002a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a46:	1d1a      	adds	r2, r3, #4
 8002a48:	66ba      	str	r2, [r7, #104]	; 0x68
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a54:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	3b68      	subs	r3, #104	; 0x68
 8002a62:	2b12      	cmp	r3, #18
 8002a64:	d866      	bhi.n	8002b34 <_vsnprintf+0x294>
 8002a66:	a201      	add	r2, pc, #4	; (adr r2, 8002a6c <_vsnprintf+0x1cc>)
 8002a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6c:	08002adf 	.word	0x08002adf
 8002a70:	08002b35 	.word	0x08002b35
 8002a74:	08002b15 	.word	0x08002b15
 8002a78:	08002b35 	.word	0x08002b35
 8002a7c:	08002ab9 	.word	0x08002ab9
 8002a80:	08002b35 	.word	0x08002b35
 8002a84:	08002b35 	.word	0x08002b35
 8002a88:	08002b35 	.word	0x08002b35
 8002a8c:	08002b35 	.word	0x08002b35
 8002a90:	08002b35 	.word	0x08002b35
 8002a94:	08002b35 	.word	0x08002b35
 8002a98:	08002b35 	.word	0x08002b35
 8002a9c:	08002b05 	.word	0x08002b05
 8002aa0:	08002b35 	.word	0x08002b35
 8002aa4:	08002b35 	.word	0x08002b35
 8002aa8:	08002b35 	.word	0x08002b35
 8002aac:	08002b35 	.word	0x08002b35
 8002ab0:	08002b35 	.word	0x08002b35
 8002ab4:	08002b25 	.word	0x08002b25
      case 'l' :
        flags |= FLAGS_LONG;
 8002ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abe:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b6c      	cmp	r3, #108	; 0x6c
 8002acc:	d134      	bne.n	8002b38 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8002ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ad4:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	603b      	str	r3, [r7, #0]
        }
        break;
 8002adc:	e02c      	b.n	8002b38 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b68      	cmp	r3, #104	; 0x68
 8002af2:	d125      	bne.n	8002b40 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8002af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002afa:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	3301      	adds	r3, #1
 8002b00:	603b      	str	r3, [r7, #0]
        }
        break;
 8002b02:	e01d      	b.n	8002b40 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	603b      	str	r3, [r7, #0]
        break;
 8002b12:	e016      	b.n	8002b42 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b1a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	603b      	str	r3, [r7, #0]
        break;
 8002b22:	e00e      	b.n	8002b42 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	603b      	str	r3, [r7, #0]
        break;
 8002b32:	e006      	b.n	8002b42 <_vsnprintf+0x2a2>
      default :
        break;
 8002b34:	bf00      	nop
 8002b36:	e004      	b.n	8002b42 <_vsnprintf+0x2a2>
        break;
 8002b38:	bf00      	nop
 8002b3a:	e002      	b.n	8002b42 <_vsnprintf+0x2a2>
 8002b3c:	080019c7 	.word	0x080019c7
        break;
 8002b40:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	3b25      	subs	r3, #37	; 0x25
 8002b48:	2b53      	cmp	r3, #83	; 0x53
 8002b4a:	f200 833d 	bhi.w	80031c8 <_vsnprintf+0x928>
 8002b4e:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <_vsnprintf+0x2b4>)
 8002b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b54:	080031b1 	.word	0x080031b1
 8002b58:	080031c9 	.word	0x080031c9
 8002b5c:	080031c9 	.word	0x080031c9
 8002b60:	080031c9 	.word	0x080031c9
 8002b64:	080031c9 	.word	0x080031c9
 8002b68:	080031c9 	.word	0x080031c9
 8002b6c:	080031c9 	.word	0x080031c9
 8002b70:	080031c9 	.word	0x080031c9
 8002b74:	080031c9 	.word	0x080031c9
 8002b78:	080031c9 	.word	0x080031c9
 8002b7c:	080031c9 	.word	0x080031c9
 8002b80:	080031c9 	.word	0x080031c9
 8002b84:	080031c9 	.word	0x080031c9
 8002b88:	080031c9 	.word	0x080031c9
 8002b8c:	080031c9 	.word	0x080031c9
 8002b90:	080031c9 	.word	0x080031c9
 8002b94:	080031c9 	.word	0x080031c9
 8002b98:	080031c9 	.word	0x080031c9
 8002b9c:	080031c9 	.word	0x080031c9
 8002ba0:	080031c9 	.word	0x080031c9
 8002ba4:	080031c9 	.word	0x080031c9
 8002ba8:	080031c9 	.word	0x080031c9
 8002bac:	080031c9 	.word	0x080031c9
 8002bb0:	080031c9 	.word	0x080031c9
 8002bb4:	080031c9 	.word	0x080031c9
 8002bb8:	080031c9 	.word	0x080031c9
 8002bbc:	080031c9 	.word	0x080031c9
 8002bc0:	080031c9 	.word	0x080031c9
 8002bc4:	080031c9 	.word	0x080031c9
 8002bc8:	080031c9 	.word	0x080031c9
 8002bcc:	080031c9 	.word	0x080031c9
 8002bd0:	080031c9 	.word	0x080031c9
 8002bd4:	08002f7f 	.word	0x08002f7f
 8002bd8:	08002f33 	.word	0x08002f33
 8002bdc:	08002f7f 	.word	0x08002f7f
 8002be0:	080031c9 	.word	0x080031c9
 8002be4:	080031c9 	.word	0x080031c9
 8002be8:	080031c9 	.word	0x080031c9
 8002bec:	080031c9 	.word	0x080031c9
 8002bf0:	080031c9 	.word	0x080031c9
 8002bf4:	080031c9 	.word	0x080031c9
 8002bf8:	080031c9 	.word	0x080031c9
 8002bfc:	080031c9 	.word	0x080031c9
 8002c00:	080031c9 	.word	0x080031c9
 8002c04:	080031c9 	.word	0x080031c9
 8002c08:	080031c9 	.word	0x080031c9
 8002c0c:	080031c9 	.word	0x080031c9
 8002c10:	080031c9 	.word	0x080031c9
 8002c14:	080031c9 	.word	0x080031c9
 8002c18:	080031c9 	.word	0x080031c9
 8002c1c:	080031c9 	.word	0x080031c9
 8002c20:	08002ca5 	.word	0x08002ca5
 8002c24:	080031c9 	.word	0x080031c9
 8002c28:	080031c9 	.word	0x080031c9
 8002c2c:	080031c9 	.word	0x080031c9
 8002c30:	080031c9 	.word	0x080031c9
 8002c34:	080031c9 	.word	0x080031c9
 8002c38:	080031c9 	.word	0x080031c9
 8002c3c:	080031c9 	.word	0x080031c9
 8002c40:	080031c9 	.word	0x080031c9
 8002c44:	080031c9 	.word	0x080031c9
 8002c48:	08002ca5 	.word	0x08002ca5
 8002c4c:	08002feb 	.word	0x08002feb
 8002c50:	08002ca5 	.word	0x08002ca5
 8002c54:	08002f7f 	.word	0x08002f7f
 8002c58:	08002f33 	.word	0x08002f33
 8002c5c:	08002f7f 	.word	0x08002f7f
 8002c60:	080031c9 	.word	0x080031c9
 8002c64:	08002ca5 	.word	0x08002ca5
 8002c68:	080031c9 	.word	0x080031c9
 8002c6c:	080031c9 	.word	0x080031c9
 8002c70:	080031c9 	.word	0x080031c9
 8002c74:	080031c9 	.word	0x080031c9
 8002c78:	080031c9 	.word	0x080031c9
 8002c7c:	08002ca5 	.word	0x08002ca5
 8002c80:	08003123 	.word	0x08003123
 8002c84:	080031c9 	.word	0x080031c9
 8002c88:	080031c9 	.word	0x080031c9
 8002c8c:	0800305f 	.word	0x0800305f
 8002c90:	080031c9 	.word	0x080031c9
 8002c94:	08002ca5 	.word	0x08002ca5
 8002c98:	080031c9 	.word	0x080031c9
 8002c9c:	080031c9 	.word	0x080031c9
 8002ca0:	08002ca5 	.word	0x08002ca5
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b78      	cmp	r3, #120	; 0x78
 8002caa:	d003      	beq.n	8002cb4 <_vsnprintf+0x414>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b58      	cmp	r3, #88	; 0x58
 8002cb2:	d102      	bne.n	8002cba <_vsnprintf+0x41a>
          base = 16U;
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	643b      	str	r3, [r7, #64]	; 0x40
 8002cb8:	e013      	b.n	8002ce2 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b6f      	cmp	r3, #111	; 0x6f
 8002cc0:	d102      	bne.n	8002cc8 <_vsnprintf+0x428>
          base =  8U;
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8002cc6:	e00c      	b.n	8002ce2 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b62      	cmp	r3, #98	; 0x62
 8002cce:	d102      	bne.n	8002cd6 <_vsnprintf+0x436>
          base =  2U;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	643b      	str	r3, [r7, #64]	; 0x40
 8002cd4:	e005      	b.n	8002ce2 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8002cd6:	230a      	movs	r3, #10
 8002cd8:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cdc:	f023 0310 	bic.w	r3, r3, #16
 8002ce0:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b58      	cmp	r3, #88	; 0x58
 8002ce8:	d103      	bne.n	8002cf2 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8002cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cec:	f043 0320 	orr.w	r3, r3, #32
 8002cf0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b69      	cmp	r3, #105	; 0x69
 8002cf8:	d007      	beq.n	8002d0a <_vsnprintf+0x46a>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b64      	cmp	r3, #100	; 0x64
 8002d00:	d003      	beq.n	8002d0a <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d04:	f023 030c 	bic.w	r3, r3, #12
 8002d08:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8002d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d16:	f023 0301 	bic.w	r3, r3, #1
 8002d1a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b69      	cmp	r3, #105	; 0x69
 8002d22:	d004      	beq.n	8002d2e <_vsnprintf+0x48e>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b64      	cmp	r3, #100	; 0x64
 8002d2a:	f040 808e 	bne.w	8002e4a <_vsnprintf+0x5aa>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d02f      	beq.n	8002d98 <_vsnprintf+0x4f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8002d38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d3a:	3307      	adds	r3, #7
 8002d3c:	f023 0307 	bic.w	r3, r3, #7
 8002d40:	f103 0208 	add.w	r2, r3, #8
 8002d44:	66ba      	str	r2, [r7, #104]	; 0x68
 8002d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002d4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d52:	2a00      	cmp	r2, #0
 8002d54:	f173 0100 	sbcs.w	r1, r3, #0
 8002d58:	da02      	bge.n	8002d60 <_vsnprintf+0x4c0>
 8002d5a:	4252      	negs	r2, r2
 8002d5c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002d60:	4610      	mov	r0, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	0fdb      	lsrs	r3, r3, #31
 8002d68:	b2dc      	uxtb	r4, r3
 8002d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8002d74:	9508      	str	r5, [sp, #32]
 8002d76:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8002d78:	9507      	str	r5, [sp, #28]
 8002d7a:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8002d7c:	9506      	str	r5, [sp, #24]
 8002d7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002d82:	9402      	str	r4, [sp, #8]
 8002d84:	e9cd 0100 	strd	r0, r1, [sp]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7ff f825 	bl	8001dde <_ntoa_long_long>
 8002d94:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8002d96:	e0c8      	b.n	8002f2a <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01e      	beq.n	8002de0 <_vsnprintf+0x540>
            const long value = va_arg(va, long);
 8002da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002da4:	1d1a      	adds	r2, r3, #4
 8002da6:	66ba      	str	r2, [r7, #104]	; 0x68
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	bfb8      	it	lt
 8002db2:	425b      	neglt	r3, r3
 8002db4:	4619      	mov	r1, r3
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	0fdb      	lsrs	r3, r3, #31
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002dbe:	9205      	str	r2, [sp, #20]
 8002dc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002dc2:	9204      	str	r2, [sp, #16]
 8002dc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dc6:	9203      	str	r2, [sp, #12]
 8002dc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002dca:	9202      	str	r2, [sp, #8]
 8002dcc:	9301      	str	r3, [sp, #4]
 8002dce:	9100      	str	r1, [sp, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dd4:	68b9      	ldr	r1, [r7, #8]
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f7fe ff9a 	bl	8001d10 <_ntoa_long>
 8002ddc:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8002dde:	e0a4      	b.n	8002f2a <_vsnprintf+0x68a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <_vsnprintf+0x556>
 8002dea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dec:	1d1a      	adds	r2, r3, #4
 8002dee:	66ba      	str	r2, [r7, #104]	; 0x68
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	e00e      	b.n	8002e14 <_vsnprintf+0x574>
 8002df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <_vsnprintf+0x56c>
 8002e00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e02:	1d1a      	adds	r2, r3, #4
 8002e04:	66ba      	str	r2, [r7, #104]	; 0x68
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b21b      	sxth	r3, r3
 8002e0a:	e003      	b.n	8002e14 <_vsnprintf+0x574>
 8002e0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e0e:	1d1a      	adds	r2, r3, #4
 8002e10:	66ba      	str	r2, [r7, #104]	; 0x68
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bfb8      	it	lt
 8002e1c:	425b      	neglt	r3, r3
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	0fdb      	lsrs	r3, r3, #31
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e28:	9205      	str	r2, [sp, #20]
 8002e2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e2c:	9204      	str	r2, [sp, #16]
 8002e2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e30:	9203      	str	r2, [sp, #12]
 8002e32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e34:	9202      	str	r2, [sp, #8]
 8002e36:	9301      	str	r3, [sp, #4]
 8002e38:	9100      	str	r1, [sp, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7fe ff65 	bl	8001d10 <_ntoa_long>
 8002e46:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8002e48:	e06f      	b.n	8002f2a <_vsnprintf+0x68a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8002e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d020      	beq.n	8002e96 <_vsnprintf+0x5f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8002e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e56:	3307      	adds	r3, #7
 8002e58:	f023 0307 	bic.w	r3, r3, #7
 8002e5c:	f103 0208 	add.w	r2, r3, #8
 8002e60:	66ba      	str	r2, [r7, #104]	; 0x68
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e68:	4608      	mov	r0, r1
 8002e6a:	f04f 0100 	mov.w	r1, #0
 8002e6e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8002e70:	9408      	str	r4, [sp, #32]
 8002e72:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002e74:	9407      	str	r4, [sp, #28]
 8002e76:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002e78:	9406      	str	r4, [sp, #24]
 8002e7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e7e:	2100      	movs	r1, #0
 8002e80:	9102      	str	r1, [sp, #8]
 8002e82:	e9cd 2300 	strd	r2, r3, [sp]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f7fe ffa6 	bl	8001dde <_ntoa_long_long>
 8002e92:	6478      	str	r0, [r7, #68]	; 0x44
 8002e94:	e049      	b.n	8002f2a <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d016      	beq.n	8002ece <_vsnprintf+0x62e>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8002ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ea2:	1d1a      	adds	r2, r3, #4
 8002ea4:	66ba      	str	r2, [r7, #104]	; 0x68
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002eaa:	9205      	str	r2, [sp, #20]
 8002eac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002eae:	9204      	str	r2, [sp, #16]
 8002eb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eb2:	9203      	str	r2, [sp, #12]
 8002eb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002eb6:	9202      	str	r2, [sp, #8]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	9201      	str	r2, [sp, #4]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ec2:	68b9      	ldr	r1, [r7, #8]
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7fe ff23 	bl	8001d10 <_ntoa_long>
 8002eca:	6478      	str	r0, [r7, #68]	; 0x44
 8002ecc:	e02d      	b.n	8002f2a <_vsnprintf+0x68a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8002ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <_vsnprintf+0x644>
 8002ed8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eda:	1d1a      	adds	r2, r3, #4
 8002edc:	66ba      	str	r2, [r7, #104]	; 0x68
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e00e      	b.n	8002f02 <_vsnprintf+0x662>
 8002ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <_vsnprintf+0x65a>
 8002eee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ef0:	1d1a      	adds	r2, r3, #4
 8002ef2:	66ba      	str	r2, [r7, #104]	; 0x68
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	e003      	b.n	8002f02 <_vsnprintf+0x662>
 8002efa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002efc:	1d1a      	adds	r2, r3, #4
 8002efe:	66ba      	str	r2, [r7, #104]	; 0x68
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8002f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f06:	9305      	str	r3, [sp, #20]
 8002f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f0a:	9304      	str	r3, [sp, #16]
 8002f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f0e:	9303      	str	r3, [sp, #12]
 8002f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f12:	9302      	str	r3, [sp, #8]
 8002f14:	2300      	movs	r3, #0
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f7fe fef4 	bl	8001d10 <_ntoa_long>
 8002f28:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	603b      	str	r3, [r7, #0]
        break;
 8002f30:	e157      	b.n	80031e2 <_vsnprintf+0x942>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b46      	cmp	r3, #70	; 0x46
 8002f38:	d103      	bne.n	8002f42 <_vsnprintf+0x6a2>
 8002f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f3c:	f043 0320 	orr.w	r3, r3, #32
 8002f40:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f44:	3307      	adds	r3, #7
 8002f46:	f023 0307 	bic.w	r3, r3, #7
 8002f4a:	f103 0208 	add.w	r2, r3, #8
 8002f4e:	66ba      	str	r2, [r7, #104]	; 0x68
 8002f50:	ed93 7b00 	vldr	d7, [r3]
 8002f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f56:	9302      	str	r3, [sp, #8]
 8002f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	eeb0 0a47 	vmov.f32	s0, s14
 8002f64:	eef0 0a67 	vmov.f32	s1, s15
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f7fe ffa6 	bl	8001ec0 <_ftoa>
 8002f74:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	603b      	str	r3, [r7, #0]
        break;
 8002f7c:	e131      	b.n	80031e2 <_vsnprintf+0x942>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b67      	cmp	r3, #103	; 0x67
 8002f84:	d003      	beq.n	8002f8e <_vsnprintf+0x6ee>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b47      	cmp	r3, #71	; 0x47
 8002f8c:	d103      	bne.n	8002f96 <_vsnprintf+0x6f6>
 8002f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f94:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b45      	cmp	r3, #69	; 0x45
 8002f9c:	d003      	beq.n	8002fa6 <_vsnprintf+0x706>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b47      	cmp	r3, #71	; 0x47
 8002fa4:	d103      	bne.n	8002fae <_vsnprintf+0x70e>
 8002fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa8:	f043 0320 	orr.w	r3, r3, #32
 8002fac:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002fae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fb0:	3307      	adds	r3, #7
 8002fb2:	f023 0307 	bic.w	r3, r3, #7
 8002fb6:	f103 0208 	add.w	r2, r3, #8
 8002fba:	66ba      	str	r2, [r7, #104]	; 0x68
 8002fbc:	ed93 7b00 	vldr	d7, [r3]
 8002fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc2:	9302      	str	r3, [sp, #8]
 8002fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc6:	9301      	str	r3, [sp, #4]
 8002fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	eeb0 0a47 	vmov.f32	s0, s14
 8002fd0:	eef0 0a67 	vmov.f32	s1, s15
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f7ff f9d0 	bl	8002380 <_etoa>
 8002fe0:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	603b      	str	r3, [r7, #0]
        break;
 8002fe8:	e0fb      	b.n	80031e2 <_vsnprintf+0x942>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8002fea:	2301      	movs	r3, #1
 8002fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8002fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10e      	bne.n	8003016 <_vsnprintf+0x776>
          while (l++ < width) {
 8002ff8:	e007      	b.n	800300a <_vsnprintf+0x76a>
            out(' ', buffer, idx++, maxlen);
 8002ffa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ffc:	1c53      	adds	r3, r2, #1
 8002ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8003000:	68fc      	ldr	r4, [r7, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	2020      	movs	r0, #32
 8003008:	47a0      	blx	r4
          while (l++ < width) {
 800300a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003010:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003012:	429a      	cmp	r2, r3
 8003014:	d8f1      	bhi.n	8002ffa <_vsnprintf+0x75a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003018:	1d1a      	adds	r2, r3, #4
 800301a:	66ba      	str	r2, [r7, #104]	; 0x68
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	b2d8      	uxtb	r0, r3
 8003020:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003022:	1c53      	adds	r3, r2, #1
 8003024:	647b      	str	r3, [r7, #68]	; 0x44
 8003026:	68fc      	ldr	r4, [r7, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800302e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00e      	beq.n	8003056 <_vsnprintf+0x7b6>
          while (l++ < width) {
 8003038:	e007      	b.n	800304a <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 800303a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800303c:	1c53      	adds	r3, r2, #1
 800303e:	647b      	str	r3, [r7, #68]	; 0x44
 8003040:	68fc      	ldr	r4, [r7, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	2020      	movs	r0, #32
 8003048:	47a0      	blx	r4
          while (l++ < width) {
 800304a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003050:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003052:	429a      	cmp	r2, r3
 8003054:	d8f1      	bhi.n	800303a <_vsnprintf+0x79a>
          }
        }
        format++;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	603b      	str	r3, [r7, #0]
        break;
 800305c:	e0c1      	b.n	80031e2 <_vsnprintf+0x942>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800305e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003060:	1d1a      	adds	r2, r3, #4
 8003062:	66ba      	str	r2, [r7, #104]	; 0x68
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <_vsnprintf+0x7d2>
 800306e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003070:	e001      	b.n	8003076 <_vsnprintf+0x7d6>
 8003072:	f04f 33ff 	mov.w	r3, #4294967295
 8003076:	4619      	mov	r1, r3
 8003078:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800307a:	f7fe fcc5 	bl	8001a08 <_strnlen_s>
 800307e:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <_vsnprintf+0x7f6>
          l = (l < precision ? l : precision);
 800308a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800308c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308e:	4293      	cmp	r3, r2
 8003090:	bf28      	it	cs
 8003092:	4613      	movcs	r3, r2
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8003096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d11a      	bne.n	80030d6 <_vsnprintf+0x836>
          while (l++ < width) {
 80030a0:	e007      	b.n	80030b2 <_vsnprintf+0x812>
            out(' ', buffer, idx++, maxlen);
 80030a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030a4:	1c53      	adds	r3, r2, #1
 80030a6:	647b      	str	r3, [r7, #68]	; 0x44
 80030a8:	68fc      	ldr	r4, [r7, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	2020      	movs	r0, #32
 80030b0:	47a0      	blx	r4
          while (l++ < width) {
 80030b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	637a      	str	r2, [r7, #52]	; 0x34
 80030b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d8f1      	bhi.n	80030a2 <_vsnprintf+0x802>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80030be:	e00a      	b.n	80030d6 <_vsnprintf+0x836>
          out(*(p++), buffer, idx++, maxlen);
 80030c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80030c6:	7818      	ldrb	r0, [r3, #0]
 80030c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030ca:	1c53      	adds	r3, r2, #1
 80030cc:	647b      	str	r3, [r7, #68]	; 0x44
 80030ce:	68fc      	ldr	r4, [r7, #12]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80030d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <_vsnprintf+0x852>
 80030de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0eb      	beq.n	80030c0 <_vsnprintf+0x820>
 80030e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ea:	1e5a      	subs	r2, r3, #1
 80030ec:	64fa      	str	r2, [r7, #76]	; 0x4c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1e6      	bne.n	80030c0 <_vsnprintf+0x820>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80030f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00e      	beq.n	800311a <_vsnprintf+0x87a>
          while (l++ < width) {
 80030fc:	e007      	b.n	800310e <_vsnprintf+0x86e>
            out(' ', buffer, idx++, maxlen);
 80030fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003100:	1c53      	adds	r3, r2, #1
 8003102:	647b      	str	r3, [r7, #68]	; 0x44
 8003104:	68fc      	ldr	r4, [r7, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	2020      	movs	r0, #32
 800310c:	47a0      	blx	r4
          while (l++ < width) {
 800310e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	637a      	str	r2, [r7, #52]	; 0x34
 8003114:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003116:	429a      	cmp	r2, r3
 8003118:	d8f1      	bhi.n	80030fe <_vsnprintf+0x85e>
          }
        }
        format++;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	603b      	str	r3, [r7, #0]
        break;
 8003120:	e05f      	b.n	80031e2 <_vsnprintf+0x942>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003122:	2308      	movs	r3, #8
 8003124:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003128:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800312c:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800312e:	2300      	movs	r3, #0
 8003130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 8003134:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01e      	beq.n	800317a <_vsnprintf+0x8da>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800313c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800313e:	1d1a      	adds	r2, r3, #4
 8003140:	66ba      	str	r2, [r7, #104]	; 0x68
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800314c:	9108      	str	r1, [sp, #32]
 800314e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003150:	9107      	str	r1, [sp, #28]
 8003152:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003154:	9106      	str	r1, [sp, #24]
 8003156:	f04f 0010 	mov.w	r0, #16
 800315a:	f04f 0100 	mov.w	r1, #0
 800315e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003162:	2100      	movs	r1, #0
 8003164:	9102      	str	r1, [sp, #8]
 8003166:	e9cd 2300 	strd	r2, r3, [sp]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800316e:	68b9      	ldr	r1, [r7, #8]
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7fe fe34 	bl	8001dde <_ntoa_long_long>
 8003176:	6478      	str	r0, [r7, #68]	; 0x44
 8003178:	e016      	b.n	80031a8 <_vsnprintf+0x908>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800317a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800317c:	1d1a      	adds	r2, r3, #4
 800317e:	66ba      	str	r2, [r7, #104]	; 0x68
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003186:	9305      	str	r3, [sp, #20]
 8003188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800318a:	9304      	str	r3, [sp, #16]
 800318c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800318e:	9303      	str	r3, [sp, #12]
 8003190:	2310      	movs	r3, #16
 8003192:	9302      	str	r3, [sp, #8]
 8003194:	2300      	movs	r3, #0
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	9200      	str	r2, [sp, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f7fe fdb5 	bl	8001d10 <_ntoa_long>
 80031a6:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	3301      	adds	r3, #1
 80031ac:	603b      	str	r3, [r7, #0]
        break;
 80031ae:	e018      	b.n	80031e2 <_vsnprintf+0x942>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80031b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031b2:	1c53      	adds	r3, r2, #1
 80031b4:	647b      	str	r3, [r7, #68]	; 0x44
 80031b6:	68fc      	ldr	r4, [r7, #12]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	2025      	movs	r0, #37	; 0x25
 80031be:	47a0      	blx	r4
        format++;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	603b      	str	r3, [r7, #0]
        break;
 80031c6:	e00c      	b.n	80031e2 <_vsnprintf+0x942>

      default :
        out(*format, buffer, idx++, maxlen);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	7818      	ldrb	r0, [r3, #0]
 80031cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031ce:	1c53      	adds	r3, r2, #1
 80031d0:	647b      	str	r3, [r7, #68]	; 0x44
 80031d2:	68fc      	ldr	r4, [r7, #12]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	47a0      	blx	r4
        format++;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	3301      	adds	r3, #1
 80031de:	603b      	str	r3, [r7, #0]
        break;
 80031e0:	bf00      	nop
  while (*format)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f47f ab6b 	bne.w	80028c2 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80031ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d302      	bcc.n	80031fa <_vsnprintf+0x95a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	1e5a      	subs	r2, r3, #1
 80031f8:	e000      	b.n	80031fc <_vsnprintf+0x95c>
 80031fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031fc:	68fc      	ldr	r4, [r7, #12]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	2000      	movs	r0, #0
 8003204:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003208:	4618      	mov	r0, r3
 800320a:	3758      	adds	r7, #88	; 0x58
 800320c:	46bd      	mov	sp, r7
 800320e:	bdb0      	pop	{r4, r5, r7, pc}

08003210 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8003210:	b40f      	push	{r0, r1, r2, r3}
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8003218:	f107 031c 	add.w	r3, r7, #28
 800321c:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800321e:	1d39      	adds	r1, r7, #4
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f04f 32ff 	mov.w	r2, #4294967295
 800322a:	4806      	ldr	r0, [pc, #24]	; (8003244 <printf_+0x34>)
 800322c:	f7ff fb38 	bl	80028a0 <_vsnprintf>
 8003230:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003232:	68fb      	ldr	r3, [r7, #12]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800323e:	b004      	add	sp, #16
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	080019e3 	.word	0x080019e3

08003248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324e:	4b0f      	ldr	r3, [pc, #60]	; (800328c <HAL_MspInit+0x44>)
 8003250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003252:	4a0e      	ldr	r2, [pc, #56]	; (800328c <HAL_MspInit+0x44>)
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	6613      	str	r3, [r2, #96]	; 0x60
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_MspInit+0x44>)
 800325c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	607b      	str	r3, [r7, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_MspInit+0x44>)
 8003268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326a:	4a08      	ldr	r2, [pc, #32]	; (800328c <HAL_MspInit+0x44>)
 800326c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003270:	6593      	str	r3, [r2, #88]	; 0x58
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_MspInit+0x44>)
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000

08003290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003294:	e7fe      	b.n	8003294 <NMI_Handler+0x4>

08003296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800329a:	e7fe      	b.n	800329a <HardFault_Handler+0x4>

0800329c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032a0:	e7fe      	b.n	80032a0 <MemManage_Handler+0x4>

080032a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032a6:	e7fe      	b.n	80032a6 <BusFault_Handler+0x4>

080032a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032ac:	e7fe      	b.n	80032ac <UsageFault_Handler+0x4>

080032ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032ca:	b480      	push	{r7}
 80032cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032dc:	f000 fc8e 	bl	8003bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032e0:	bf00      	nop
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	e00a      	b.n	800330c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80032f6:	f3af 8000 	nop.w
 80032fa:	4601      	mov	r1, r0
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	60ba      	str	r2, [r7, #8]
 8003302:	b2ca      	uxtb	r2, r1
 8003304:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	3301      	adds	r3, #1
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	429a      	cmp	r2, r3
 8003312:	dbf0      	blt.n	80032f6 <_read+0x12>
	}

return len;
 8003314:	687b      	ldr	r3, [r7, #4]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	e009      	b.n	8003344 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	60ba      	str	r2, [r7, #8]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	3301      	adds	r3, #1
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	429a      	cmp	r2, r3
 800334a:	dbf1      	blt.n	8003330 <_write+0x12>
	}
	return len;
 800334c:	687b      	ldr	r3, [r7, #4]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <_close>:

int _close(int file)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
	return -1;
 800335e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003362:	4618      	mov	r0, r3
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800337e:	605a      	str	r2, [r3, #4]
	return 0;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <_isatty>:

int _isatty(int file)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
	return 1;
 8003396:	2301      	movs	r3, #1
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
	return 0;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033c8:	4a14      	ldr	r2, [pc, #80]	; (800341c <_sbrk+0x5c>)
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <_sbrk+0x60>)
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033d4:	4b13      	ldr	r3, [pc, #76]	; (8003424 <_sbrk+0x64>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d102      	bne.n	80033e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <_sbrk+0x64>)
 80033de:	4a12      	ldr	r2, [pc, #72]	; (8003428 <_sbrk+0x68>)
 80033e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <_sbrk+0x64>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d207      	bcs.n	8003400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033f0:	f003 f80a 	bl	8006408 <__errno>
 80033f4:	4603      	mov	r3, r0
 80033f6:	220c      	movs	r2, #12
 80033f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033fa:	f04f 33ff 	mov.w	r3, #4294967295
 80033fe:	e009      	b.n	8003414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003400:	4b08      	ldr	r3, [pc, #32]	; (8003424 <_sbrk+0x64>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003406:	4b07      	ldr	r3, [pc, #28]	; (8003424 <_sbrk+0x64>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4413      	add	r3, r2
 800340e:	4a05      	ldr	r2, [pc, #20]	; (8003424 <_sbrk+0x64>)
 8003410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003412:	68fb      	ldr	r3, [r7, #12]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20018000 	.word	0x20018000
 8003420:	00000400 	.word	0x00000400
 8003424:	20000130 	.word	0x20000130
 8003428:	200001d8 	.word	0x200001d8

0800342c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003430:	4b15      	ldr	r3, [pc, #84]	; (8003488 <SystemInit+0x5c>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003436:	4a14      	ldr	r2, [pc, #80]	; (8003488 <SystemInit+0x5c>)
 8003438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800343c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003440:	4b12      	ldr	r3, [pc, #72]	; (800348c <SystemInit+0x60>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a11      	ldr	r2, [pc, #68]	; (800348c <SystemInit+0x60>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <SystemInit+0x60>)
 800344e:	2200      	movs	r2, #0
 8003450:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003452:	4b0e      	ldr	r3, [pc, #56]	; (800348c <SystemInit+0x60>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a0d      	ldr	r2, [pc, #52]	; (800348c <SystemInit+0x60>)
 8003458:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800345c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003460:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <SystemInit+0x60>)
 8003464:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003468:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800346a:	4b08      	ldr	r3, [pc, #32]	; (800348c <SystemInit+0x60>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a07      	ldr	r2, [pc, #28]	; (800348c <SystemInit+0x60>)
 8003470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003474:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <SystemInit+0x60>)
 8003478:	2200      	movs	r2, #0
 800347a:	619a      	str	r2, [r3, #24]
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	e000ed00 	.word	0xe000ed00
 800348c:	40021000 	.word	0x40021000

08003490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	0a1b      	lsrs	r3, r3, #8
 800349a:	f003 0307 	and.w	r3, r3, #7
}
 800349e:	4618      	mov	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	db0b      	blt.n	80034d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	f003 021f 	and.w	r2, r3, #31
 80034c4:	4907      	ldr	r1, [pc, #28]	; (80034e4 <__NVIC_EnableIRQ+0x38>)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	2001      	movs	r0, #1
 80034ce:	fa00 f202 	lsl.w	r2, r0, r2
 80034d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	e000e100 	.word	0xe000e100

080034e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	6039      	str	r1, [r7, #0]
 80034f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	db0a      	blt.n	8003512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	490c      	ldr	r1, [pc, #48]	; (8003534 <__NVIC_SetPriority+0x4c>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	0112      	lsls	r2, r2, #4
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	440b      	add	r3, r1
 800350c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003510:	e00a      	b.n	8003528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	b2da      	uxtb	r2, r3
 8003516:	4908      	ldr	r1, [pc, #32]	; (8003538 <__NVIC_SetPriority+0x50>)
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	3b04      	subs	r3, #4
 8003520:	0112      	lsls	r2, r2, #4
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	440b      	add	r3, r1
 8003526:	761a      	strb	r2, [r3, #24]
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	e000e100 	.word	0xe000e100
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800353c:	b480      	push	{r7}
 800353e:	b089      	sub	sp, #36	; 0x24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f1c3 0307 	rsb	r3, r3, #7
 8003556:	2b04      	cmp	r3, #4
 8003558:	bf28      	it	cs
 800355a:	2304      	movcs	r3, #4
 800355c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3304      	adds	r3, #4
 8003562:	2b06      	cmp	r3, #6
 8003564:	d902      	bls.n	800356c <NVIC_EncodePriority+0x30>
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3b03      	subs	r3, #3
 800356a:	e000      	b.n	800356e <NVIC_EncodePriority+0x32>
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003570:	f04f 32ff 	mov.w	r2, #4294967295
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43da      	mvns	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	401a      	ands	r2, r3
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003584:	f04f 31ff 	mov.w	r1, #4294967295
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	43d9      	mvns	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003594:	4313      	orrs	r3, r2
         );
}
 8003596:	4618      	mov	r0, r3
 8003598:	3724      	adds	r7, #36	; 0x24
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <LL_USART_IsEnabled>:
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <LL_USART_IsEnabled+0x18>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <LL_USART_IsEnabled+0x1a>
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <LL_USART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	621a      	str	r2, [r3, #32]
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2204      	movs	r2, #4
 8003608:	621a      	str	r2, [r3, #32]
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2208      	movs	r2, #8
 8003622:	621a      	str	r2, [r3, #32]
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	601a      	str	r2, [r3, #0]
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	601a      	str	r2, [r3, #0]
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	601a      	str	r2, [r3, #0]
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a0:	2b80      	cmp	r3, #128	; 0x80
 80036a2:	d101      	bne.n	80036a8 <LL_USART_IsEnabledIT_TXE+0x18>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <LL_USART_IsEnabledIT_TXE+0x1a>
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <LL_USART_RequestRxDataFlush>:
  * @rmtoll RQR          RXFRQ         LL_USART_RequestRxDataFlush
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->RQR, (uint16_t)USART_RQR_RXFRQ);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8b1b      	ldrh	r3, [r3, #24]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	f043 0308 	orr.w	r3, r3, #8
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	831a      	strh	r2, [r3, #24]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <uart_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t uart_init(uart_config_t* uart_cfg)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
    if (uart_cfg->uart_reg_base == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <uart_init+0x14>
    {
        return MOD_ERR_ARG;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e025      	b.n	800373c <uart_init+0x60>
    }
    else if (!LL_USART_IsEnabled(uart_cfg->uart_reg_base))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff54 	bl	80035a2 <LL_USART_IsEnabled>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <uart_init+0x28>
    {
    	return MOD_ERR_PERIPH;
 8003700:	2307      	movs	r3, #7
 8003702:	e01b      	b.n	800373c <uart_init+0x60>
    }
    else
    {
		switch(uart_cfg->irq_num)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800370a:	2b27      	cmp	r3, #39	; 0x27
 800370c:	dc02      	bgt.n	8003714 <uart_init+0x38>
 800370e:	2b25      	cmp	r3, #37	; 0x25
 8003710:	da03      	bge.n	800371a <uart_init+0x3e>
 8003712:	e012      	b.n	800373a <uart_init+0x5e>
 8003714:	3b34      	subs	r3, #52	; 0x34
 8003716:	2b01      	cmp	r3, #1
 8003718:	d80f      	bhi.n	800373a <uart_init+0x5e>
			case USART1_IRQn:
			case USART2_IRQn:
			case USART3_IRQn:
			case UART4_IRQn:
			case UART5_IRQn:
				memset(&uart, 0, sizeof(uart));
 800371a:	227c      	movs	r2, #124	; 0x7c
 800371c:	2100      	movs	r1, #0
 800371e:	4809      	ldr	r0, [pc, #36]	; (8003744 <uart_init+0x68>)
 8003720:	f002 fe9c 	bl	800645c <memset>
				uart.irq_num = uart_cfg->irq_num;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <uart_init+0x68>)
 800372c:	711a      	strb	r2, [r3, #4]
				uart.uart_reg_base = uart_cfg->uart_reg_base;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a04      	ldr	r2, [pc, #16]	; (8003744 <uart_init+0x68>)
 8003734:	6013      	str	r3, [r2, #0]
				return MOD_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	e000      	b.n	800373c <uart_init+0x60>
			default:
				return MOD_ERR_ARG;
 800373a:	2301      	movs	r3, #1
		}
    }

}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000134 	.word	0x20000134

08003748 <uart_start>:

mod_err_t uart_start(void)
{
 8003748:	b598      	push	{r3, r4, r7, lr}
 800374a:	af00      	add	r7, sp, #0
    if (uart.uart_reg_base == NULL)
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <uart_start+0x58>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <uart_start+0x10>
    {
        return MOD_ERR_NOT_INIT;
 8003754:	2305      	movs	r3, #5
 8003756:	e020      	b.n	800379a <uart_start+0x52>
    }

    LL_USART_EnableIT_TXE(uart.uart_reg_base);  // Generate interrupt whenever TXE flag is set.
 8003758:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <uart_start+0x58>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff ff77 	bl	8003650 <LL_USART_EnableIT_TXE>
    LL_USART_EnableIT_RXNE(uart.uart_reg_base); // Generate interrupt whenever RXNE flag is set.
 8003762:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <uart_start+0x58>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff ff62 	bl	8003630 <LL_USART_EnableIT_RXNE>

    /* Set group and sub priority to highest priority (0). */
    __NVIC_SetPriority(uart.irq_num, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <uart_start+0x58>)
 800376e:	f993 4004 	ldrsb.w	r4, [r3, #4]
 8003772:	f7ff fe8d 	bl	8003490 <__NVIC_GetPriorityGrouping>
 8003776:	4603      	mov	r3, r0
 8003778:	2200      	movs	r2, #0
 800377a:	2100      	movs	r1, #0
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fedd 	bl	800353c <NVIC_EncodePriority>
 8003782:	4603      	mov	r3, r0
 8003784:	4619      	mov	r1, r3
 8003786:	4620      	mov	r0, r4
 8003788:	f7ff feae 	bl	80034e8 <__NVIC_SetPriority>

    /* Enable UARTx interrupt channel. */
    __NVIC_EnableIRQ(uart.irq_num);
 800378c:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <uart_start+0x58>)
 800378e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fe8a 	bl	80034ac <__NVIC_EnableIRQ>

    return MOD_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	bd98      	pop	{r3, r4, r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000134 	.word	0x20000134

080037a4 <uart_putc>:

mod_err_t uart_putc(char c)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]

    uint16_t next_put_idx = (uart.tx_buf_put_idx + 1) % UART_TX_BUF_SIZE;
 80037ae:	4b25      	ldr	r3, [pc, #148]	; (8003844 <uart_putc+0xa0>)
 80037b0:	899b      	ldrh	r3, [r3, #12]
 80037b2:	3301      	adds	r3, #1
 80037b4:	4a24      	ldr	r2, [pc, #144]	; (8003848 <uart_putc+0xa4>)
 80037b6:	fb82 1203 	smull	r1, r2, r2, r3
 80037ba:	1151      	asrs	r1, r2, #5
 80037bc:	17da      	asrs	r2, r3, #31
 80037be:	1a8a      	subs	r2, r1, r2
 80037c0:	2164      	movs	r1, #100	; 0x64
 80037c2:	fb01 f202 	mul.w	r2, r1, r2
 80037c6:	1a9a      	subs	r2, r3, r2
 80037c8:	4613      	mov	r3, r2
 80037ca:	81fb      	strh	r3, [r7, #14]

    /* Tx circular buffer is full. */
    if (next_put_idx == uart.tx_buf_get_idx) {
 80037cc:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <uart_putc+0xa0>)
 80037ce:	895b      	ldrh	r3, [r3, #10]
 80037d0:	89fa      	ldrh	r2, [r7, #14]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d111      	bne.n	80037fa <uart_putc+0x56>
        INC_SAT_U16(uart_pms[CNT_TX_BUF_OVERRUN]);
 80037d6:	4b1d      	ldr	r3, [pc, #116]	; (800384c <uart_putc+0xa8>)
 80037d8:	891a      	ldrh	r2, [r3, #8]
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <uart_putc+0xa8>)
 80037dc:	891b      	ldrh	r3, [r3, #8]
 80037de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80037e2:	428b      	cmp	r3, r1
 80037e4:	bf14      	ite	ne
 80037e6:	2301      	movne	r3, #1
 80037e8:	2300      	moveq	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	4b16      	ldr	r3, [pc, #88]	; (800384c <uart_putc+0xa8>)
 80037f4:	811a      	strh	r2, [r3, #8]
        return MOD_ERR_BUF_OVERRUN;
 80037f6:	2304      	movs	r3, #4
 80037f8:	e01f      	b.n	800383a <uart_putc+0x96>
    }

    /* Place char in buffer */
    uart.tx_buf[uart.tx_buf_put_idx] = c;
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <uart_putc+0xa0>)
 80037fc:	899b      	ldrh	r3, [r3, #12]
 80037fe:	461a      	mov	r2, r3
 8003800:	4b10      	ldr	r3, [pc, #64]	; (8003844 <uart_putc+0xa0>)
 8003802:	4413      	add	r3, r2
 8003804:	79fa      	ldrb	r2, [r7, #7]
 8003806:	739a      	strb	r2, [r3, #14]
    uart.tx_buf_put_idx = next_put_idx;
 8003808:	4a0e      	ldr	r2, [pc, #56]	; (8003844 <uart_putc+0xa0>)
 800380a:	89fb      	ldrh	r3, [r7, #14]
 800380c:	8193      	strh	r3, [r2, #12]

    // Ensure TXE interrupt is enabled.
    if (uart.uart_reg_base != NULL && !LL_USART_IsEnabledIT_TXE(uart.uart_reg_base)) {
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <uart_putc+0xa0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d010      	beq.n	8003838 <uart_putc+0x94>
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <uart_putc+0xa0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff ff38 	bl	8003690 <LL_USART_IsEnabledIT_TXE>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d108      	bne.n	8003838 <uart_putc+0x94>
  __ASM volatile ("cpsid i" : : : "memory");
 8003826:	b672      	cpsid	i
}
 8003828:	bf00      	nop
        __disable_irq();
        LL_USART_EnableIT_TXE(uart.uart_reg_base);
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <uart_putc+0xa0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff ff0e 	bl	8003650 <LL_USART_EnableIT_TXE>
  __ASM volatile ("cpsie i" : : : "memory");
 8003834:	b662      	cpsie	i
}
 8003836:	bf00      	nop
        __enable_irq();
    }

    return MOD_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000134 	.word	0x20000134
 8003848:	51eb851f 	.word	0x51eb851f
 800384c:	200001b0 	.word	0x200001b0

08003850 <uart_getc>:

uint8_t uart_getc(char* c)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
    /* Check if rx buffer is empty. */
    if (uart.rx_buf_get_idx == uart.rx_buf_put_idx)
 8003858:	4b14      	ldr	r3, [pc, #80]	; (80038ac <uart_getc+0x5c>)
 800385a:	88da      	ldrh	r2, [r3, #6]
 800385c:	4b13      	ldr	r3, [pc, #76]	; (80038ac <uart_getc+0x5c>)
 800385e:	891b      	ldrh	r3, [r3, #8]
 8003860:	429a      	cmp	r2, r3
 8003862:	d101      	bne.n	8003868 <uart_getc+0x18>
    {
        return 0;
 8003864:	2300      	movs	r3, #0
 8003866:	e01a      	b.n	800389e <uart_getc+0x4e>
    }
    else
    {
    	/* Get character and increment get index */
    	*c = uart.rx_buf[uart.rx_buf_get_idx];
 8003868:	4b10      	ldr	r3, [pc, #64]	; (80038ac <uart_getc+0x5c>)
 800386a:	88db      	ldrh	r3, [r3, #6]
 800386c:	461a      	mov	r2, r3
 800386e:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <uart_getc+0x5c>)
 8003870:	4413      	add	r3, r2
 8003872:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	701a      	strb	r2, [r3, #0]
    	uart.rx_buf_get_idx = (uart.rx_buf_get_idx + 1) % UART_RX_BUF_SIZE;
 800387a:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <uart_getc+0x5c>)
 800387c:	88db      	ldrh	r3, [r3, #6]
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <uart_getc+0x60>)
 8003882:	fb83 1302 	smull	r1, r3, r3, r2
 8003886:	1099      	asrs	r1, r3, #2
 8003888:	17d3      	asrs	r3, r2, #31
 800388a:	1ac9      	subs	r1, r1, r3
 800388c:	460b      	mov	r3, r1
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	1ad1      	subs	r1, r2, r3
 8003896:	b28a      	uxth	r2, r1
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <uart_getc+0x5c>)
 800389a:	80da      	strh	r2, [r3, #6]
    	return 1;
 800389c:	2301      	movs	r3, #1
    }
}
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000134 	.word	0x20000134
 80038b0:	66666667 	.word	0x66666667

080038b4 <USART1_IRQHandler>:
////////////////////////////////////////////////////////////////////////////////
// Interrupt handlers
////////////////////////////////////////////////////////////////////////////////

void USART1_IRQHandler(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
    UART_ISR();
 80038b8:	f000 f890 	bl	80039dc <UART_ISR>
}
 80038bc:	bf00      	nop
 80038be:	bd80      	pop	{r7, pc}

080038c0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
    UART_ISR();
 80038c4:	f000 f88a 	bl	80039dc <UART_ISR>
}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}

080038cc <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
    UART_ISR();
 80038d0:	f000 f884 	bl	80039dc <UART_ISR>
}
 80038d4:	bf00      	nop
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
    UART_ISR();
 80038dc:	f000 f87e 	bl	80039dc <UART_ISR>
}
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
    UART_ISR();
 80038e8:	f000 f878 	bl	80039dc <UART_ISR>
}
 80038ec:	bf00      	nop
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <read_rdr>:

/**
 * @brief Read character from receive data register (RDR) and place into receive buffer.
 */
static void read_rdr(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
    uint16_t next_rx_put_idx = (uart.rx_buf_put_idx + 1) % UART_RX_BUF_SIZE;
 80038f6:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <read_rdr+0x84>)
 80038f8:	891b      	ldrh	r3, [r3, #8]
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <read_rdr+0x88>)
 80038fe:	fb83 1302 	smull	r1, r3, r3, r2
 8003902:	1099      	asrs	r1, r3, #2
 8003904:	17d3      	asrs	r3, r2, #31
 8003906:	1ac9      	subs	r1, r1, r3
 8003908:	460b      	mov	r3, r1
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	1ad1      	subs	r1, r2, r3
 8003912:	460b      	mov	r3, r1
 8003914:	80fb      	strh	r3, [r7, #6]
   
    if (next_rx_put_idx == uart.rx_buf_get_idx)
 8003916:	4b17      	ldr	r3, [pc, #92]	; (8003974 <read_rdr+0x84>)
 8003918:	88db      	ldrh	r3, [r3, #6]
 800391a:	88fa      	ldrh	r2, [r7, #6]
 800391c:	429a      	cmp	r2, r3
 800391e:	d115      	bne.n	800394c <read_rdr+0x5c>
    {
        INC_SAT_U16(uart_pms[CNT_RX_BUF_OVERRUN]);
 8003920:	4b16      	ldr	r3, [pc, #88]	; (800397c <read_rdr+0x8c>)
 8003922:	895a      	ldrh	r2, [r3, #10]
 8003924:	4b15      	ldr	r3, [pc, #84]	; (800397c <read_rdr+0x8c>)
 8003926:	895b      	ldrh	r3, [r3, #10]
 8003928:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800392c:	428b      	cmp	r3, r1
 800392e:	bf14      	ite	ne
 8003930:	2301      	movne	r3, #1
 8003932:	2300      	moveq	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	b29b      	uxth	r3, r3
 8003938:	4413      	add	r3, r2
 800393a:	b29a      	uxth	r2, r3
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <read_rdr+0x8c>)
 800393e:	815a      	strh	r2, [r3, #10]
        LL_USART_RequestRxDataFlush(uart.uart_reg_base); // Drop character.
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <read_rdr+0x84>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff feb6 	bl	80036b6 <LL_USART_RequestRxDataFlush>
    else
    {
        uart.rx_buf[uart.rx_buf_put_idx] = uart.uart_reg_base->RDR & 0xFFU; // Clears RXNE flag.
        uart.rx_buf_put_idx = next_rx_put_idx;
    }
}
 800394a:	e00e      	b.n	800396a <read_rdr+0x7a>
        uart.rx_buf[uart.rx_buf_put_idx] = uart.uart_reg_base->RDR & 0xFFU; // Clears RXNE flag.
 800394c:	4b09      	ldr	r3, [pc, #36]	; (8003974 <read_rdr+0x84>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003952:	b29a      	uxth	r2, r3
 8003954:	4b07      	ldr	r3, [pc, #28]	; (8003974 <read_rdr+0x84>)
 8003956:	891b      	ldrh	r3, [r3, #8]
 8003958:	4619      	mov	r1, r3
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <read_rdr+0x84>)
 800395e:	440b      	add	r3, r1
 8003960:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
        uart.rx_buf_put_idx = next_rx_put_idx;
 8003964:	4a03      	ldr	r2, [pc, #12]	; (8003974 <read_rdr+0x84>)
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	8113      	strh	r3, [r2, #8]
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000134 	.word	0x20000134
 8003978:	66666667 	.word	0x66666667
 800397c:	200001b0 	.word	0x200001b0

08003980 <write_tdr>:

/**
 * @brief Write character from transmit buffer to transmit data register (TDR).
 */
static void write_tdr(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
	if (uart.tx_buf_get_idx == uart.tx_buf_put_idx)
 8003984:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <write_tdr+0x54>)
 8003986:	895a      	ldrh	r2, [r3, #10]
 8003988:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <write_tdr+0x54>)
 800398a:	899b      	ldrh	r3, [r3, #12]
 800398c:	429a      	cmp	r2, r3
 800398e:	d105      	bne.n	800399c <write_tdr+0x1c>
	{
		/* Nothing to transmit, disable TXE flag from generating an interrupt. */
		LL_USART_DisableIT_TXE(uart.uart_reg_base);
 8003990:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <write_tdr+0x54>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fe6b 	bl	8003670 <LL_USART_DisableIT_TXE>
	else
	{
		uart.uart_reg_base->TDR = uart.tx_buf[uart.tx_buf_get_idx]; // Clears TXE flag.
		uart.tx_buf_get_idx = (uart.tx_buf_get_idx + 1) % UART_TX_BUF_SIZE;
	}
}
 800399a:	e019      	b.n	80039d0 <write_tdr+0x50>
		uart.uart_reg_base->TDR = uart.tx_buf[uart.tx_buf_get_idx]; // Clears TXE flag.
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <write_tdr+0x54>)
 800399e:	895b      	ldrh	r3, [r3, #10]
 80039a0:	461a      	mov	r2, r3
 80039a2:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <write_tdr+0x54>)
 80039a4:	4413      	add	r3, r2
 80039a6:	7b9a      	ldrb	r2, [r3, #14]
 80039a8:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <write_tdr+0x54>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	b292      	uxth	r2, r2
 80039ae:	851a      	strh	r2, [r3, #40]	; 0x28
		uart.tx_buf_get_idx = (uart.tx_buf_get_idx + 1) % UART_TX_BUF_SIZE;
 80039b0:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <write_tdr+0x54>)
 80039b2:	895b      	ldrh	r3, [r3, #10]
 80039b4:	3301      	adds	r3, #1
 80039b6:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <write_tdr+0x58>)
 80039b8:	fb82 1203 	smull	r1, r2, r2, r3
 80039bc:	1151      	asrs	r1, r2, #5
 80039be:	17da      	asrs	r2, r3, #31
 80039c0:	1a8a      	subs	r2, r1, r2
 80039c2:	2164      	movs	r1, #100	; 0x64
 80039c4:	fb01 f202 	mul.w	r2, r1, r2
 80039c8:	1a9a      	subs	r2, r3, r2
 80039ca:	b292      	uxth	r2, r2
 80039cc:	4b01      	ldr	r3, [pc, #4]	; (80039d4 <write_tdr+0x54>)
 80039ce:	815a      	strh	r2, [r3, #10]
}
 80039d0:	bf00      	nop
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000134 	.word	0x20000134
 80039d8:	51eb851f 	.word	0x51eb851f

080039dc <UART_ISR>:


static void UART_ISR(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
    /* Read interrupt status register. */
    uint32_t status_reg = uart.uart_reg_base->ISR;
 80039e2:	4b41      	ldr	r3, [pc, #260]	; (8003ae8 <UART_ISR+0x10c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	607b      	str	r3, [r7, #4]

    /* Service interrupt flags. */
    if (status_reg & USART_ISR_RXNE_Msk)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <UART_ISR+0x1c>
    {
        read_rdr();
 80039f4:	f7ff ff7c 	bl	80038f0 <read_rdr>
    }
    if (status_reg & USART_ISR_TXE_Msk)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <UART_ISR+0x2a>
    {
    	write_tdr();
 8003a02:	f7ff ffbd 	bl	8003980 <write_tdr>
    }

    /* Check error flags. */
    if (status_reg & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE | USART_ISR_PE))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d067      	beq.n	8003ae0 <UART_ISR+0x104>
    {
          if (status_reg & LL_USART_ISR_ORE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d014      	beq.n	8003a44 <UART_ISR+0x68>
          {   // An overrun error occurs if a character is received and RXNE has not been reset.
        	  // The RDR register content is not lost but the shift register is overwritten by incoming data.
              INC_SAT_U16(uart_pms[CNT_RX_UART_ORE]);
 8003a1a:	4b34      	ldr	r3, [pc, #208]	; (8003aec <UART_ISR+0x110>)
 8003a1c:	881a      	ldrh	r2, [r3, #0]
 8003a1e:	4b33      	ldr	r3, [pc, #204]	; (8003aec <UART_ISR+0x110>)
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a26:	428b      	cmp	r3, r1
 8003a28:	bf14      	ite	ne
 8003a2a:	2301      	movne	r3, #1
 8003a2c:	2300      	moveq	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	4413      	add	r3, r2
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <UART_ISR+0x110>)
 8003a38:	801a      	strh	r2, [r3, #0]
              LL_USART_ClearFlag_ORE(uart.uart_reg_base);
 8003a3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ae8 <UART_ISR+0x10c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff fde9 	bl	8003616 <LL_USART_ClearFlag_ORE>
          }
          if (status_reg & LL_USART_ISR_NE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d014      	beq.n	8003a78 <UART_ISR+0x9c>
          {
              INC_SAT_U16(uart_pms[CNT_RX_UART_NE]);
 8003a4e:	4b27      	ldr	r3, [pc, #156]	; (8003aec <UART_ISR+0x110>)
 8003a50:	885a      	ldrh	r2, [r3, #2]
 8003a52:	4b26      	ldr	r3, [pc, #152]	; (8003aec <UART_ISR+0x110>)
 8003a54:	885b      	ldrh	r3, [r3, #2]
 8003a56:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a5a:	428b      	cmp	r3, r1
 8003a5c:	bf14      	ite	ne
 8003a5e:	2301      	movne	r3, #1
 8003a60:	2300      	moveq	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <UART_ISR+0x110>)
 8003a6c:	805a      	strh	r2, [r3, #2]
              LL_USART_ClearFlag_NE(uart.uart_reg_base);
 8003a6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ae8 <UART_ISR+0x10c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fdc2 	bl	80035fc <LL_USART_ClearFlag_NE>
          }
          if (status_reg & LL_USART_ISR_FE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d014      	beq.n	8003aac <UART_ISR+0xd0>
          {
              INC_SAT_U16(uart_pms[CNT_RX_UART_FE]);
 8003a82:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <UART_ISR+0x110>)
 8003a84:	889a      	ldrh	r2, [r3, #4]
 8003a86:	4b19      	ldr	r3, [pc, #100]	; (8003aec <UART_ISR+0x110>)
 8003a88:	889b      	ldrh	r3, [r3, #4]
 8003a8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a8e:	428b      	cmp	r3, r1
 8003a90:	bf14      	ite	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	2300      	moveq	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	4b13      	ldr	r3, [pc, #76]	; (8003aec <UART_ISR+0x110>)
 8003aa0:	809a      	strh	r2, [r3, #4]
              LL_USART_ClearFlag_FE(uart.uart_reg_base);
 8003aa2:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <UART_ISR+0x10c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff fd9b 	bl	80035e2 <LL_USART_ClearFlag_FE>
          }
          if (status_reg & LL_USART_ISR_PE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d014      	beq.n	8003ae0 <UART_ISR+0x104>
          {
              INC_SAT_U16(uart_pms[CNT_RX_UART_PE]);
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <UART_ISR+0x110>)
 8003ab8:	88da      	ldrh	r2, [r3, #6]
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <UART_ISR+0x110>)
 8003abc:	88db      	ldrh	r3, [r3, #6]
 8003abe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ac2:	428b      	cmp	r3, r1
 8003ac4:	bf14      	ite	ne
 8003ac6:	2301      	movne	r3, #1
 8003ac8:	2300      	moveq	r3, #0
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	4413      	add	r3, r2
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <UART_ISR+0x110>)
 8003ad4:	80da      	strh	r2, [r3, #6]
              LL_USART_ClearFlag_PE(uart.uart_reg_base);
 8003ad6:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <UART_ISR+0x10c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff fd74 	bl	80035c8 <LL_USART_ClearFlag_PE>
          }
    }

}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000134 	.word	0x20000134
 8003aec:	200001b0 	.word	0x200001b0

08003af0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003af4:	f7ff fc9a 	bl	800342c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003af8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003afa:	e003      	b.n	8003b04 <LoopCopyDataInit>

08003afc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003afe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003b00:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003b02:	3104      	adds	r1, #4

08003b04 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003b04:	480a      	ldr	r0, [pc, #40]	; (8003b30 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003b08:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003b0a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003b0c:	d3f6      	bcc.n	8003afc <CopyDataInit>
	ldr	r2, =_sbss
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003b10:	e002      	b.n	8003b18 <LoopFillZerobss>

08003b12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003b12:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003b14:	f842 3b04 	str.w	r3, [r2], #4

08003b18 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003b18:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <LoopForever+0x16>)
	cmp	r2, r3
 8003b1a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003b1c:	d3f9      	bcc.n	8003b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b1e:	f002 fc79 	bl	8006414 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b22:	f7fd fdf5 	bl	8001710 <main>

08003b26 <LoopForever>:

LoopForever:
    b LoopForever
 8003b26:	e7fe      	b.n	8003b26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003b28:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003b2c:	08007a54 	.word	0x08007a54
	ldr	r0, =_sdata
 8003b30:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003b34:	200000c0 	.word	0x200000c0
	ldr	r2, =_sbss
 8003b38:	200000c0 	.word	0x200000c0
	ldr	r3, = _ebss
 8003b3c:	200001d8 	.word	0x200001d8

08003b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b40:	e7fe      	b.n	8003b40 <ADC1_2_IRQHandler>
	...

08003b44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <HAL_Init+0x3c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a0b      	ldr	r2, [pc, #44]	; (8003b80 <HAL_Init+0x3c>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b58:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b5a:	2003      	movs	r0, #3
 8003b5c:	f000 f920 	bl	8003da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b60:	2000      	movs	r0, #0
 8003b62:	f000 f80f 	bl	8003b84 <HAL_InitTick>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	71fb      	strb	r3, [r7, #7]
 8003b70:	e001      	b.n	8003b76 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b72:	f7ff fb69 	bl	8003248 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b76:	79fb      	ldrb	r3, [r7, #7]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40022000 	.word	0x40022000

08003b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003b90:	4b17      	ldr	r3, [pc, #92]	; (8003bf0 <HAL_InitTick+0x6c>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d023      	beq.n	8003be0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b98:	4b16      	ldr	r3, [pc, #88]	; (8003bf4 <HAL_InitTick+0x70>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <HAL_InitTick+0x6c>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f91d 	bl	8003dee <HAL_SYSTICK_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10f      	bne.n	8003bda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b0f      	cmp	r3, #15
 8003bbe:	d809      	bhi.n	8003bd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc8:	f000 f8f5 	bl	8003db6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bcc:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <HAL_InitTick+0x74>)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e007      	b.n	8003be4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
 8003bd8:	e004      	b.n	8003be4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
 8003bde:	e001      	b.n	8003be4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000058 	.word	0x20000058
 8003bf4:	20000050 	.word	0x20000050
 8003bf8:	20000054 	.word	0x20000054

08003bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c00:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_IncTick+0x20>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_IncTick+0x24>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	4a04      	ldr	r2, [pc, #16]	; (8003c20 <HAL_IncTick+0x24>)
 8003c0e:	6013      	str	r3, [r2, #0]
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000058 	.word	0x20000058
 8003c20:	200001c4 	.word	0x200001c4

08003c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return uwTick;
 8003c28:	4b03      	ldr	r3, [pc, #12]	; (8003c38 <HAL_GetTick+0x14>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	200001c4 	.word	0x200001c4

08003c3c <__NVIC_SetPriorityGrouping>:
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <__NVIC_SetPriorityGrouping+0x44>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c58:	4013      	ands	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c6e:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <__NVIC_SetPriorityGrouping+0x44>)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	60d3      	str	r3, [r2, #12]
}
 8003c74:	bf00      	nop
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <__NVIC_GetPriorityGrouping>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <__NVIC_GetPriorityGrouping+0x18>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	0a1b      	lsrs	r3, r3, #8
 8003c8e:	f003 0307 	and.w	r3, r3, #7
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	e000ed00 	.word	0xe000ed00

08003ca0 <__NVIC_SetPriority>:
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	6039      	str	r1, [r7, #0]
 8003caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	db0a      	blt.n	8003cca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	490c      	ldr	r1, [pc, #48]	; (8003cec <__NVIC_SetPriority+0x4c>)
 8003cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbe:	0112      	lsls	r2, r2, #4
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003cc8:	e00a      	b.n	8003ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	4908      	ldr	r1, [pc, #32]	; (8003cf0 <__NVIC_SetPriority+0x50>)
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	3b04      	subs	r3, #4
 8003cd8:	0112      	lsls	r2, r2, #4
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	440b      	add	r3, r1
 8003cde:	761a      	strb	r2, [r3, #24]
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	e000e100 	.word	0xe000e100
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <NVIC_EncodePriority>:
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b089      	sub	sp, #36	; 0x24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f1c3 0307 	rsb	r3, r3, #7
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	bf28      	it	cs
 8003d12:	2304      	movcs	r3, #4
 8003d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	2b06      	cmp	r3, #6
 8003d1c:	d902      	bls.n	8003d24 <NVIC_EncodePriority+0x30>
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	3b03      	subs	r3, #3
 8003d22:	e000      	b.n	8003d26 <NVIC_EncodePriority+0x32>
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d28:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43da      	mvns	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	401a      	ands	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	fa01 f303 	lsl.w	r3, r1, r3
 8003d46:	43d9      	mvns	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d4c:	4313      	orrs	r3, r2
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3724      	adds	r7, #36	; 0x24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d6c:	d301      	bcc.n	8003d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e00f      	b.n	8003d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d72:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <SysTick_Config+0x40>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d7a:	210f      	movs	r1, #15
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	f7ff ff8e 	bl	8003ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <SysTick_Config+0x40>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d8a:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <SysTick_Config+0x40>)
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	e000e010 	.word	0xe000e010

08003da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff47 	bl	8003c3c <__NVIC_SetPriorityGrouping>
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b086      	sub	sp, #24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003dc8:	f7ff ff5c 	bl	8003c84 <__NVIC_GetPriorityGrouping>
 8003dcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	6978      	ldr	r0, [r7, #20]
 8003dd4:	f7ff ff8e 	bl	8003cf4 <NVIC_EncodePriority>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff5d 	bl	8003ca0 <__NVIC_SetPriority>
}
 8003de6:	bf00      	nop
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ffb0 	bl	8003d5c <SysTick_Config>
 8003dfc:	4603      	mov	r3, r0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e16:	e17f      	b.n	8004118 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	fa01 f303 	lsl.w	r3, r1, r3
 8003e24:	4013      	ands	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 8171 	beq.w	8004112 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d00b      	beq.n	8003e50 <HAL_GPIO_Init+0x48>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d007      	beq.n	8003e50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e44:	2b11      	cmp	r3, #17
 8003e46:	d003      	beq.n	8003e50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b12      	cmp	r3, #18
 8003e4e:	d130      	bne.n	8003eb2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e86:	2201      	movs	r2, #1
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4013      	ands	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	f003 0201 	and.w	r2, r3, #1
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d118      	bne.n	8003ef0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	08db      	lsrs	r3, r3, #3
 8003eda:	f003 0201 	and.w	r2, r3, #1
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	2203      	movs	r2, #3
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4013      	ands	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d003      	beq.n	8003f30 <HAL_GPIO_Init+0x128>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b12      	cmp	r3, #18
 8003f2e:	d123      	bne.n	8003f78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	08da      	lsrs	r2, r3, #3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3208      	adds	r2, #8
 8003f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	220f      	movs	r2, #15
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4013      	ands	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	08da      	lsrs	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3208      	adds	r2, #8
 8003f72:	6939      	ldr	r1, [r7, #16]
 8003f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	2203      	movs	r2, #3
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0203 	and.w	r2, r3, #3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80ac 	beq.w	8004112 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fba:	4b5f      	ldr	r3, [pc, #380]	; (8004138 <HAL_GPIO_Init+0x330>)
 8003fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fbe:	4a5e      	ldr	r2, [pc, #376]	; (8004138 <HAL_GPIO_Init+0x330>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	6613      	str	r3, [r2, #96]	; 0x60
 8003fc6:	4b5c      	ldr	r3, [pc, #368]	; (8004138 <HAL_GPIO_Init+0x330>)
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	60bb      	str	r3, [r7, #8]
 8003fd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fd2:	4a5a      	ldr	r2, [pc, #360]	; (800413c <HAL_GPIO_Init+0x334>)
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	089b      	lsrs	r3, r3, #2
 8003fd8:	3302      	adds	r3, #2
 8003fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	220f      	movs	r2, #15
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ffc:	d025      	beq.n	800404a <HAL_GPIO_Init+0x242>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a4f      	ldr	r2, [pc, #316]	; (8004140 <HAL_GPIO_Init+0x338>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01f      	beq.n	8004046 <HAL_GPIO_Init+0x23e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a4e      	ldr	r2, [pc, #312]	; (8004144 <HAL_GPIO_Init+0x33c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d019      	beq.n	8004042 <HAL_GPIO_Init+0x23a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a4d      	ldr	r2, [pc, #308]	; (8004148 <HAL_GPIO_Init+0x340>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <HAL_GPIO_Init+0x236>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a4c      	ldr	r2, [pc, #304]	; (800414c <HAL_GPIO_Init+0x344>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00d      	beq.n	800403a <HAL_GPIO_Init+0x232>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a4b      	ldr	r2, [pc, #300]	; (8004150 <HAL_GPIO_Init+0x348>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d007      	beq.n	8004036 <HAL_GPIO_Init+0x22e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a4a      	ldr	r2, [pc, #296]	; (8004154 <HAL_GPIO_Init+0x34c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d101      	bne.n	8004032 <HAL_GPIO_Init+0x22a>
 800402e:	2306      	movs	r3, #6
 8004030:	e00c      	b.n	800404c <HAL_GPIO_Init+0x244>
 8004032:	2307      	movs	r3, #7
 8004034:	e00a      	b.n	800404c <HAL_GPIO_Init+0x244>
 8004036:	2305      	movs	r3, #5
 8004038:	e008      	b.n	800404c <HAL_GPIO_Init+0x244>
 800403a:	2304      	movs	r3, #4
 800403c:	e006      	b.n	800404c <HAL_GPIO_Init+0x244>
 800403e:	2303      	movs	r3, #3
 8004040:	e004      	b.n	800404c <HAL_GPIO_Init+0x244>
 8004042:	2302      	movs	r3, #2
 8004044:	e002      	b.n	800404c <HAL_GPIO_Init+0x244>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_GPIO_Init+0x244>
 800404a:	2300      	movs	r3, #0
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	f002 0203 	and.w	r2, r2, #3
 8004052:	0092      	lsls	r2, r2, #2
 8004054:	4093      	lsls	r3, r2
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800405c:	4937      	ldr	r1, [pc, #220]	; (800413c <HAL_GPIO_Init+0x334>)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	089b      	lsrs	r3, r3, #2
 8004062:	3302      	adds	r3, #2
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800406a:	4b3b      	ldr	r3, [pc, #236]	; (8004158 <HAL_GPIO_Init+0x350>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	43db      	mvns	r3, r3
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4013      	ands	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800408e:	4a32      	ldr	r2, [pc, #200]	; (8004158 <HAL_GPIO_Init+0x350>)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004094:	4b30      	ldr	r3, [pc, #192]	; (8004158 <HAL_GPIO_Init+0x350>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	43db      	mvns	r3, r3
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4013      	ands	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040b8:	4a27      	ldr	r2, [pc, #156]	; (8004158 <HAL_GPIO_Init+0x350>)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040be:	4b26      	ldr	r3, [pc, #152]	; (8004158 <HAL_GPIO_Init+0x350>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	43db      	mvns	r3, r3
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4013      	ands	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040e2:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <HAL_GPIO_Init+0x350>)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040e8:	4b1b      	ldr	r3, [pc, #108]	; (8004158 <HAL_GPIO_Init+0x350>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	43db      	mvns	r3, r3
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800410c:	4a12      	ldr	r2, [pc, #72]	; (8004158 <HAL_GPIO_Init+0x350>)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3301      	adds	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	fa22 f303 	lsr.w	r3, r2, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	f47f ae78 	bne.w	8003e18 <HAL_GPIO_Init+0x10>
  }
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	371c      	adds	r7, #28
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000
 800413c:	40010000 	.word	0x40010000
 8004140:	48000400 	.word	0x48000400
 8004144:	48000800 	.word	0x48000800
 8004148:	48000c00 	.word	0x48000c00
 800414c:	48001000 	.word	0x48001000
 8004150:	48001400 	.word	0x48001400
 8004154:	48001800 	.word	0x48001800
 8004158:	40010400 	.word	0x40010400

0800415c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	807b      	strh	r3, [r7, #2]
 8004168:	4613      	mov	r3, r2
 800416a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800416c:	787b      	ldrb	r3, [r7, #1]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004172:	887a      	ldrh	r2, [r7, #2]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004178:	e002      	b.n	8004180 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800417a:	887a      	ldrh	r2, [r7, #2]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004190:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004198:	4618      	mov	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40007000 	.word	0x40007000

080041a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b6:	d130      	bne.n	800421a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041b8:	4b23      	ldr	r3, [pc, #140]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c4:	d038      	beq.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041c6:	4b20      	ldr	r3, [pc, #128]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041ce:	4a1e      	ldr	r2, [pc, #120]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041d6:	4b1d      	ldr	r3, [pc, #116]	; (800424c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2232      	movs	r2, #50	; 0x32
 80041dc:	fb02 f303 	mul.w	r3, r2, r3
 80041e0:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	0c9b      	lsrs	r3, r3, #18
 80041e8:	3301      	adds	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ec:	e002      	b.n	80041f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041f4:	4b14      	ldr	r3, [pc, #80]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004200:	d102      	bne.n	8004208 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f2      	bne.n	80041ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004208:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004214:	d110      	bne.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e00f      	b.n	800423a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800421a:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004226:	d007      	beq.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004228:	4b07      	ldr	r3, [pc, #28]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004230:	4a05      	ldr	r2, [pc, #20]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004236:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40007000 	.word	0x40007000
 800424c:	20000050 	.word	0x20000050
 8004250:	431bde83 	.word	0x431bde83

08004254 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e3d4      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004266:	4ba1      	ldr	r3, [pc, #644]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004270:	4b9e      	ldr	r3, [pc, #632]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80e4 	beq.w	8004450 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <HAL_RCC_OscConfig+0x4a>
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2b0c      	cmp	r3, #12
 8004292:	f040 808b 	bne.w	80043ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b01      	cmp	r3, #1
 800429a:	f040 8087 	bne.w	80043ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800429e:	4b93      	ldr	r3, [pc, #588]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_RCC_OscConfig+0x62>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e3ac      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1a      	ldr	r2, [r3, #32]
 80042ba:	4b8c      	ldr	r3, [pc, #560]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d004      	beq.n	80042d0 <HAL_RCC_OscConfig+0x7c>
 80042c6:	4b89      	ldr	r3, [pc, #548]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ce:	e005      	b.n	80042dc <HAL_RCC_OscConfig+0x88>
 80042d0:	4b86      	ldr	r3, [pc, #536]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d6:	091b      	lsrs	r3, r3, #4
 80042d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042dc:	4293      	cmp	r3, r2
 80042de:	d223      	bcs.n	8004328 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fd09 	bl	8004cfc <RCC_SetFlashLatencyFromMSIRange>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e38d      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042f4:	4b7d      	ldr	r3, [pc, #500]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a7c      	ldr	r2, [pc, #496]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80042fa:	f043 0308 	orr.w	r3, r3, #8
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b7a      	ldr	r3, [pc, #488]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	4977      	ldr	r1, [pc, #476]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004312:	4b76      	ldr	r3, [pc, #472]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	4972      	ldr	r1, [pc, #456]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004322:	4313      	orrs	r3, r2
 8004324:	604b      	str	r3, [r1, #4]
 8004326:	e025      	b.n	8004374 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004328:	4b70      	ldr	r3, [pc, #448]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a6f      	ldr	r2, [pc, #444]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 800432e:	f043 0308 	orr.w	r3, r3, #8
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4b6d      	ldr	r3, [pc, #436]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	496a      	ldr	r1, [pc, #424]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004346:	4b69      	ldr	r3, [pc, #420]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	4965      	ldr	r1, [pc, #404]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d109      	bne.n	8004374 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fcc9 	bl	8004cfc <RCC_SetFlashLatencyFromMSIRange>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e34d      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004374:	f000 fc36 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8004378:	4602      	mov	r2, r0
 800437a:	4b5c      	ldr	r3, [pc, #368]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	091b      	lsrs	r3, r3, #4
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	495a      	ldr	r1, [pc, #360]	; (80044f0 <HAL_RCC_OscConfig+0x29c>)
 8004386:	5ccb      	ldrb	r3, [r1, r3]
 8004388:	f003 031f 	and.w	r3, r3, #31
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
 8004390:	4a58      	ldr	r2, [pc, #352]	; (80044f4 <HAL_RCC_OscConfig+0x2a0>)
 8004392:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004394:	4b58      	ldr	r3, [pc, #352]	; (80044f8 <HAL_RCC_OscConfig+0x2a4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fbf3 	bl	8003b84 <HAL_InitTick>
 800439e:	4603      	mov	r3, r0
 80043a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d052      	beq.n	800444e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	e331      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d032      	beq.n	800441a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043b4:	4b4d      	ldr	r3, [pc, #308]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a4c      	ldr	r2, [pc, #304]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043c0:	f7ff fc30 	bl	8003c24 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043c8:	f7ff fc2c 	bl	8003c24 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e31a      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043da:	4b44      	ldr	r3, [pc, #272]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043e6:	4b41      	ldr	r3, [pc, #260]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a40      	ldr	r2, [pc, #256]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80043ec:	f043 0308 	orr.w	r3, r3, #8
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	4b3e      	ldr	r3, [pc, #248]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	493b      	ldr	r1, [pc, #236]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004400:	4313      	orrs	r3, r2
 8004402:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004404:	4b39      	ldr	r3, [pc, #228]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	4936      	ldr	r1, [pc, #216]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004414:	4313      	orrs	r3, r2
 8004416:	604b      	str	r3, [r1, #4]
 8004418:	e01a      	b.n	8004450 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800441a:	4b34      	ldr	r3, [pc, #208]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a33      	ldr	r2, [pc, #204]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004420:	f023 0301 	bic.w	r3, r3, #1
 8004424:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004426:	f7ff fbfd 	bl	8003c24 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800442e:	f7ff fbf9 	bl	8003c24 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e2e7      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004440:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f0      	bne.n	800442e <HAL_RCC_OscConfig+0x1da>
 800444c:	e000      	b.n	8004450 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800444e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d074      	beq.n	8004546 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2b08      	cmp	r3, #8
 8004460:	d005      	beq.n	800446e <HAL_RCC_OscConfig+0x21a>
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b0c      	cmp	r3, #12
 8004466:	d10e      	bne.n	8004486 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d10b      	bne.n	8004486 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446e:	4b1f      	ldr	r3, [pc, #124]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d064      	beq.n	8004544 <HAL_RCC_OscConfig+0x2f0>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d160      	bne.n	8004544 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e2c4      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448e:	d106      	bne.n	800449e <HAL_RCC_OscConfig+0x24a>
 8004490:	4b16      	ldr	r3, [pc, #88]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a15      	ldr	r2, [pc, #84]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 8004496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	e01d      	b.n	80044da <HAL_RCC_OscConfig+0x286>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a6:	d10c      	bne.n	80044c2 <HAL_RCC_OscConfig+0x26e>
 80044a8:	4b10      	ldr	r3, [pc, #64]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a0f      	ldr	r2, [pc, #60]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80044ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a0c      	ldr	r2, [pc, #48]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80044ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	e00b      	b.n	80044da <HAL_RCC_OscConfig+0x286>
 80044c2:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a09      	ldr	r2, [pc, #36]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80044c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	4b07      	ldr	r3, [pc, #28]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a06      	ldr	r2, [pc, #24]	; (80044ec <HAL_RCC_OscConfig+0x298>)
 80044d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d01c      	beq.n	800451c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e2:	f7ff fb9f 	bl	8003c24 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e8:	e011      	b.n	800450e <HAL_RCC_OscConfig+0x2ba>
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
 80044f0:	08007860 	.word	0x08007860
 80044f4:	20000050 	.word	0x20000050
 80044f8:	20000054 	.word	0x20000054
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fc:	f7ff fb92 	bl	8003c24 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e280      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800450e:	4baf      	ldr	r3, [pc, #700]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x2a8>
 800451a:	e014      	b.n	8004546 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7ff fb82 	bl	8003c24 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004524:	f7ff fb7e 	bl	8003c24 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	; 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e26c      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004536:	4ba5      	ldr	r3, [pc, #660]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x2d0>
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d060      	beq.n	8004614 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b04      	cmp	r3, #4
 8004556:	d005      	beq.n	8004564 <HAL_RCC_OscConfig+0x310>
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b0c      	cmp	r3, #12
 800455c:	d119      	bne.n	8004592 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d116      	bne.n	8004592 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004564:	4b99      	ldr	r3, [pc, #612]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_OscConfig+0x328>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e249      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457c:	4b93      	ldr	r3, [pc, #588]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	4990      	ldr	r1, [pc, #576]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800458c:	4313      	orrs	r3, r2
 800458e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004590:	e040      	b.n	8004614 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d023      	beq.n	80045e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459a:	4b8c      	ldr	r3, [pc, #560]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a8b      	ldr	r2, [pc, #556]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7ff fb3d 	bl	8003c24 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ae:	f7ff fb39 	bl	8003c24 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e227      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c0:	4b82      	ldr	r3, [pc, #520]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045cc:	4b7f      	ldr	r3, [pc, #508]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	061b      	lsls	r3, r3, #24
 80045da:	497c      	ldr	r1, [pc, #496]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
 80045e0:	e018      	b.n	8004614 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e2:	4b7a      	ldr	r3, [pc, #488]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a79      	ldr	r2, [pc, #484]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80045e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ee:	f7ff fb19 	bl	8003c24 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f6:	f7ff fb15 	bl	8003c24 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e203      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004608:	4b70      	ldr	r3, [pc, #448]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d03c      	beq.n	800469a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01c      	beq.n	8004662 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004628:	4b68      	ldr	r3, [pc, #416]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800462a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800462e:	4a67      	ldr	r2, [pc, #412]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004638:	f7ff faf4 	bl	8003c24 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004640:	f7ff faf0 	bl	8003c24 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e1de      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004652:	4b5e      	ldr	r3, [pc, #376]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0ef      	beq.n	8004640 <HAL_RCC_OscConfig+0x3ec>
 8004660:	e01b      	b.n	800469a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004662:	4b5a      	ldr	r3, [pc, #360]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004668:	4a58      	ldr	r2, [pc, #352]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004672:	f7ff fad7 	bl	8003c24 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800467a:	f7ff fad3 	bl	8003c24 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e1c1      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800468c:	4b4f      	ldr	r3, [pc, #316]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800468e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1ef      	bne.n	800467a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80a6 	beq.w	80047f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a8:	2300      	movs	r3, #0
 80046aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046ac:	4b47      	ldr	r3, [pc, #284]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10d      	bne.n	80046d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b8:	4b44      	ldr	r3, [pc, #272]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046bc:	4a43      	ldr	r2, [pc, #268]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80046be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c2:	6593      	str	r3, [r2, #88]	; 0x58
 80046c4:	4b41      	ldr	r3, [pc, #260]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d0:	2301      	movs	r3, #1
 80046d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d4:	4b3e      	ldr	r3, [pc, #248]	; (80047d0 <HAL_RCC_OscConfig+0x57c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d118      	bne.n	8004712 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e0:	4b3b      	ldr	r3, [pc, #236]	; (80047d0 <HAL_RCC_OscConfig+0x57c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a3a      	ldr	r2, [pc, #232]	; (80047d0 <HAL_RCC_OscConfig+0x57c>)
 80046e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ec:	f7ff fa9a 	bl	8003c24 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f4:	f7ff fa96 	bl	8003c24 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e184      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004706:	4b32      	ldr	r3, [pc, #200]	; (80047d0 <HAL_RCC_OscConfig+0x57c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d108      	bne.n	800472c <HAL_RCC_OscConfig+0x4d8>
 800471a:	4b2c      	ldr	r3, [pc, #176]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004720:	4a2a      	ldr	r2, [pc, #168]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004722:	f043 0301 	orr.w	r3, r3, #1
 8004726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800472a:	e024      	b.n	8004776 <HAL_RCC_OscConfig+0x522>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b05      	cmp	r3, #5
 8004732:	d110      	bne.n	8004756 <HAL_RCC_OscConfig+0x502>
 8004734:	4b25      	ldr	r3, [pc, #148]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473a:	4a24      	ldr	r2, [pc, #144]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800473c:	f043 0304 	orr.w	r3, r3, #4
 8004740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004744:	4b21      	ldr	r3, [pc, #132]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474a:	4a20      	ldr	r2, [pc, #128]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004754:	e00f      	b.n	8004776 <HAL_RCC_OscConfig+0x522>
 8004756:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800475e:	f023 0301 	bic.w	r3, r3, #1
 8004762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004766:	4b19      	ldr	r3, [pc, #100]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	4a17      	ldr	r2, [pc, #92]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800476e:	f023 0304 	bic.w	r3, r3, #4
 8004772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d016      	beq.n	80047ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477e:	f7ff fa51 	bl	8003c24 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004784:	e00a      	b.n	800479c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004786:	f7ff fa4d 	bl	8003c24 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f241 3288 	movw	r2, #5000	; 0x1388
 8004794:	4293      	cmp	r3, r2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e139      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <HAL_RCC_OscConfig+0x578>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0ed      	beq.n	8004786 <HAL_RCC_OscConfig+0x532>
 80047aa:	e01a      	b.n	80047e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ac:	f7ff fa3a 	bl	8003c24 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047b2:	e00f      	b.n	80047d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b4:	f7ff fa36 	bl	8003c24 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d906      	bls.n	80047d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e122      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
 80047ca:	bf00      	nop
 80047cc:	40021000 	.word	0x40021000
 80047d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d4:	4b90      	ldr	r3, [pc, #576]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e8      	bne.n	80047b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047e2:	7ffb      	ldrb	r3, [r7, #31]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d105      	bne.n	80047f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e8:	4b8b      	ldr	r3, [pc, #556]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 80047ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ec:	4a8a      	ldr	r2, [pc, #552]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 80047ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8108 	beq.w	8004a0e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	2b02      	cmp	r3, #2
 8004804:	f040 80d0 	bne.w	80049a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004808:	4b83      	ldr	r3, [pc, #524]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f003 0203 	and.w	r2, r3, #3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	429a      	cmp	r2, r3
 800481a:	d130      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	3b01      	subs	r3, #1
 8004828:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d127      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004838:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d11f      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004848:	2a07      	cmp	r2, #7
 800484a:	bf14      	ite	ne
 800484c:	2201      	movne	r2, #1
 800484e:	2200      	moveq	r2, #0
 8004850:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004852:	4293      	cmp	r3, r2
 8004854:	d113      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004860:	085b      	lsrs	r3, r3, #1
 8004862:	3b01      	subs	r3, #1
 8004864:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004866:	429a      	cmp	r2, r3
 8004868:	d109      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	085b      	lsrs	r3, r3, #1
 8004876:	3b01      	subs	r3, #1
 8004878:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d06e      	beq.n	800495c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b0c      	cmp	r3, #12
 8004882:	d069      	beq.n	8004958 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004884:	4b64      	ldr	r3, [pc, #400]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d105      	bne.n	800489c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004890:	4b61      	ldr	r3, [pc, #388]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0b7      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048a0:	4b5d      	ldr	r3, [pc, #372]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a5c      	ldr	r2, [pc, #368]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 80048a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048ac:	f7ff f9ba 	bl	8003c24 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b4:	f7ff f9b6 	bl	8003c24 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e0a4      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c6:	4b54      	ldr	r3, [pc, #336]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048d2:	4b51      	ldr	r3, [pc, #324]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	4b51      	ldr	r3, [pc, #324]	; (8004a1c <HAL_RCC_OscConfig+0x7c8>)
 80048d8:	4013      	ands	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048e2:	3a01      	subs	r2, #1
 80048e4:	0112      	lsls	r2, r2, #4
 80048e6:	4311      	orrs	r1, r2
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048ec:	0212      	lsls	r2, r2, #8
 80048ee:	4311      	orrs	r1, r2
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048f4:	0852      	lsrs	r2, r2, #1
 80048f6:	3a01      	subs	r2, #1
 80048f8:	0552      	lsls	r2, r2, #21
 80048fa:	4311      	orrs	r1, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004900:	0852      	lsrs	r2, r2, #1
 8004902:	3a01      	subs	r2, #1
 8004904:	0652      	lsls	r2, r2, #25
 8004906:	4311      	orrs	r1, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800490c:	0912      	lsrs	r2, r2, #4
 800490e:	0452      	lsls	r2, r2, #17
 8004910:	430a      	orrs	r2, r1
 8004912:	4941      	ldr	r1, [pc, #260]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 8004914:	4313      	orrs	r3, r2
 8004916:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004918:	4b3f      	ldr	r3, [pc, #252]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a3e      	ldr	r2, [pc, #248]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 800491e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004922:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004924:	4b3c      	ldr	r3, [pc, #240]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4a3b      	ldr	r2, [pc, #236]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 800492a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800492e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004930:	f7ff f978 	bl	8003c24 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004938:	f7ff f974 	bl	8003c24 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e062      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494a:	4b33      	ldr	r3, [pc, #204]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004956:	e05a      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e059      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800495c:	4b2e      	ldr	r3, [pc, #184]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d152      	bne.n	8004a0e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004968:	4b2b      	ldr	r3, [pc, #172]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2a      	ldr	r2, [pc, #168]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 800496e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004972:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004974:	4b28      	ldr	r3, [pc, #160]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4a27      	ldr	r2, [pc, #156]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 800497a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800497e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004980:	f7ff f950 	bl	8003c24 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004988:	f7ff f94c 	bl	8003c24 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e03a      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800499a:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x734>
 80049a6:	e032      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b0c      	cmp	r3, #12
 80049ac:	d02d      	beq.n	8004a0a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ae:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 80049b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80049ba:	4b17      	ldr	r3, [pc, #92]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d105      	bne.n	80049d2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80049c6:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	4a13      	ldr	r2, [pc, #76]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 80049cc:	f023 0303 	bic.w	r3, r3, #3
 80049d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049d2:	4b11      	ldr	r3, [pc, #68]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	4a10      	ldr	r2, [pc, #64]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 80049d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80049dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e2:	f7ff f91f 	bl	8003c24 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ea:	f7ff f91b 	bl	8003c24 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e009      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049fc:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <HAL_RCC_OscConfig+0x7c4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f0      	bne.n	80049ea <HAL_RCC_OscConfig+0x796>
 8004a08:	e001      	b.n	8004a0e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3720      	adds	r7, #32
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	f99d808c 	.word	0xf99d808c

08004a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0c8      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a34:	4b66      	ldr	r3, [pc, #408]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d910      	bls.n	8004a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	4b63      	ldr	r3, [pc, #396]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 0207 	bic.w	r2, r3, #7
 8004a4a:	4961      	ldr	r1, [pc, #388]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b5f      	ldr	r3, [pc, #380]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0b0      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d04c      	beq.n	8004b0a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d107      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a78:	4b56      	ldr	r3, [pc, #344]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d121      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e09e      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d107      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a90:	4b50      	ldr	r3, [pc, #320]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d115      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e092      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d107      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aa8:	4b4a      	ldr	r3, [pc, #296]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d109      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e086      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab8:	4b46      	ldr	r3, [pc, #280]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e07e      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ac8:	4b42      	ldr	r3, [pc, #264]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f023 0203 	bic.w	r2, r3, #3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	493f      	ldr	r1, [pc, #252]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ada:	f7ff f8a3 	bl	8003c24 <HAL_GetTick>
 8004ade:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae0:	e00a      	b.n	8004af8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae2:	f7ff f89f 	bl	8003c24 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e066      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af8:	4b36      	ldr	r3, [pc, #216]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 020c 	and.w	r2, r3, #12
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d1eb      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d008      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b16:	4b2f      	ldr	r3, [pc, #188]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	492c      	ldr	r1, [pc, #176]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b28:	4b29      	ldr	r3, [pc, #164]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d210      	bcs.n	8004b58 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b26      	ldr	r3, [pc, #152]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 0207 	bic.w	r2, r3, #7
 8004b3e:	4924      	ldr	r1, [pc, #144]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e036      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b64:	4b1b      	ldr	r3, [pc, #108]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4918      	ldr	r1, [pc, #96]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b82:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	4910      	ldr	r1, [pc, #64]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b96:	f000 f825 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	4b0d      	ldr	r3, [pc, #52]	; (8004bd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	490c      	ldr	r1, [pc, #48]	; (8004bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba8:	5ccb      	ldrb	r3, [r1, r3]
 8004baa:	f003 031f 	and.w	r3, r3, #31
 8004bae:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb2:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe ffe2 	bl	8003b84 <HAL_InitTick>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	72fb      	strb	r3, [r7, #11]

  return status;
 8004bc4:	7afb      	ldrb	r3, [r7, #11]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40022000 	.word	0x40022000
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	08007860 	.word	0x08007860
 8004bdc:	20000050 	.word	0x20000050
 8004be0:	20000054 	.word	0x20000054

08004be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b089      	sub	sp, #36	; 0x24
 8004be8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bf2:	4b3e      	ldr	r3, [pc, #248]	; (8004cec <HAL_RCC_GetSysClockFreq+0x108>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
 8004bfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bfc:	4b3b      	ldr	r3, [pc, #236]	; (8004cec <HAL_RCC_GetSysClockFreq+0x108>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0x34>
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b0c      	cmp	r3, #12
 8004c10:	d121      	bne.n	8004c56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d11e      	bne.n	8004c56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c18:	4b34      	ldr	r3, [pc, #208]	; (8004cec <HAL_RCC_GetSysClockFreq+0x108>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d107      	bne.n	8004c34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c24:	4b31      	ldr	r3, [pc, #196]	; (8004cec <HAL_RCC_GetSysClockFreq+0x108>)
 8004c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	e005      	b.n	8004c40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c34:	4b2d      	ldr	r3, [pc, #180]	; (8004cec <HAL_RCC_GetSysClockFreq+0x108>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	091b      	lsrs	r3, r3, #4
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c40:	4a2b      	ldr	r2, [pc, #172]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10d      	bne.n	8004c6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c54:	e00a      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d102      	bne.n	8004c62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c5c:	4b25      	ldr	r3, [pc, #148]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e004      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d101      	bne.n	8004c6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c68:	4b23      	ldr	r3, [pc, #140]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2b0c      	cmp	r3, #12
 8004c70:	d134      	bne.n	8004cdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c72:	4b1e      	ldr	r3, [pc, #120]	; (8004cec <HAL_RCC_GetSysClockFreq+0x108>)
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d003      	beq.n	8004c8a <HAL_RCC_GetSysClockFreq+0xa6>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d003      	beq.n	8004c90 <HAL_RCC_GetSysClockFreq+0xac>
 8004c88:	e005      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c8a:	4b1a      	ldr	r3, [pc, #104]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c8c:	617b      	str	r3, [r7, #20]
      break;
 8004c8e:	e005      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c90:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c92:	617b      	str	r3, [r7, #20]
      break;
 8004c94:	e002      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	617b      	str	r3, [r7, #20]
      break;
 8004c9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c9c:	4b13      	ldr	r3, [pc, #76]	; (8004cec <HAL_RCC_GetSysClockFreq+0x108>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	091b      	lsrs	r3, r3, #4
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004caa:	4b10      	ldr	r3, [pc, #64]	; (8004cec <HAL_RCC_GetSysClockFreq+0x108>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	0a1b      	lsrs	r3, r3, #8
 8004cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	fb02 f203 	mul.w	r2, r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cc2:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	0e5b      	lsrs	r3, r3, #25
 8004cc8:	f003 0303 	and.w	r3, r3, #3
 8004ccc:	3301      	adds	r3, #1
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cdc:	69bb      	ldr	r3, [r7, #24]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3724      	adds	r7, #36	; 0x24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	08007878 	.word	0x08007878
 8004cf4:	00f42400 	.word	0x00f42400
 8004cf8:	007a1200 	.word	0x007a1200

08004cfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d04:	2300      	movs	r3, #0
 8004d06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d08:	4b2a      	ldr	r3, [pc, #168]	; (8004db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d14:	f7ff fa3a 	bl	800418c <HAL_PWREx_GetVoltageRange>
 8004d18:	6178      	str	r0, [r7, #20]
 8004d1a:	e014      	b.n	8004d46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d1c:	4b25      	ldr	r3, [pc, #148]	; (8004db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d20:	4a24      	ldr	r2, [pc, #144]	; (8004db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d26:	6593      	str	r3, [r2, #88]	; 0x58
 8004d28:	4b22      	ldr	r3, [pc, #136]	; (8004db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d34:	f7ff fa2a 	bl	800418c <HAL_PWREx_GetVoltageRange>
 8004d38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d3a:	4b1e      	ldr	r3, [pc, #120]	; (8004db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3e:	4a1d      	ldr	r2, [pc, #116]	; (8004db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d4c:	d10b      	bne.n	8004d66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b80      	cmp	r3, #128	; 0x80
 8004d52:	d919      	bls.n	8004d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2ba0      	cmp	r3, #160	; 0xa0
 8004d58:	d902      	bls.n	8004d60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	e013      	b.n	8004d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d60:	2301      	movs	r3, #1
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	e010      	b.n	8004d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b80      	cmp	r3, #128	; 0x80
 8004d6a:	d902      	bls.n	8004d72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	613b      	str	r3, [r7, #16]
 8004d70:	e00a      	b.n	8004d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b80      	cmp	r3, #128	; 0x80
 8004d76:	d102      	bne.n	8004d7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d78:	2302      	movs	r3, #2
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	e004      	b.n	8004d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b70      	cmp	r3, #112	; 0x70
 8004d82:	d101      	bne.n	8004d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d84:	2301      	movs	r3, #1
 8004d86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d88:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f023 0207 	bic.w	r2, r3, #7
 8004d90:	4909      	ldr	r1, [pc, #36]	; (8004db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d98:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d001      	beq.n	8004daa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40022000 	.word	0x40022000

08004dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dc8:	2300      	movs	r3, #0
 8004dca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d041      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ddc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004de0:	d02a      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004de2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004de6:	d824      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004de8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dec:	d008      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004dee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004df2:	d81e      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dfc:	d010      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004dfe:	e018      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e00:	4b86      	ldr	r3, [pc, #536]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	4a85      	ldr	r2, [pc, #532]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e0c:	e015      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3304      	adds	r3, #4
 8004e12:	2100      	movs	r1, #0
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fabb 	bl	8005390 <RCCEx_PLLSAI1_Config>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e1e:	e00c      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3320      	adds	r3, #32
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fba6 	bl	8005578 <RCCEx_PLLSAI2_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e30:	e003      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	74fb      	strb	r3, [r7, #19]
      break;
 8004e36:	e000      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e3a:	7cfb      	ldrb	r3, [r7, #19]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10b      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e40:	4b76      	ldr	r3, [pc, #472]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e4e:	4973      	ldr	r1, [pc, #460]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e56:	e001      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e58:	7cfb      	ldrb	r3, [r7, #19]
 8004e5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d041      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e70:	d02a      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004e72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e76:	d824      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e7c:	d008      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e82:	d81e      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e8c:	d010      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e8e:	e018      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e90:	4b62      	ldr	r3, [pc, #392]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4a61      	ldr	r2, [pc, #388]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e9c:	e015      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fa73 	bl	8005390 <RCCEx_PLLSAI1_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004eae:	e00c      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3320      	adds	r3, #32
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fb5e 	bl	8005578 <RCCEx_PLLSAI2_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ec0:	e003      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	74fb      	strb	r3, [r7, #19]
      break;
 8004ec6:	e000      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eca:	7cfb      	ldrb	r3, [r7, #19]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10b      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ed0:	4b52      	ldr	r3, [pc, #328]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ede:	494f      	ldr	r1, [pc, #316]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ee6:	e001      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee8:	7cfb      	ldrb	r3, [r7, #19]
 8004eea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 80a0 	beq.w	800503a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004efa:	2300      	movs	r3, #0
 8004efc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004efe:	4b47      	ldr	r3, [pc, #284]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00d      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f14:	4b41      	ldr	r3, [pc, #260]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f18:	4a40      	ldr	r2, [pc, #256]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f20:	4b3e      	ldr	r3, [pc, #248]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f28:	60bb      	str	r3, [r7, #8]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f30:	4b3b      	ldr	r3, [pc, #236]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a3a      	ldr	r2, [pc, #232]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f3c:	f7fe fe72 	bl	8003c24 <HAL_GetTick>
 8004f40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f42:	e009      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f44:	f7fe fe6e 	bl	8003c24 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d902      	bls.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	74fb      	strb	r3, [r7, #19]
        break;
 8004f56:	e005      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f58:	4b31      	ldr	r3, [pc, #196]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0ef      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004f64:	7cfb      	ldrb	r3, [r7, #19]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d15c      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f6a:	4b2c      	ldr	r3, [pc, #176]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01f      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d019      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f88:	4b24      	ldr	r3, [pc, #144]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f94:	4b21      	ldr	r3, [pc, #132]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9a:	4a20      	ldr	r2, [pc, #128]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fa4:	4b1d      	ldr	r3, [pc, #116]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	4a1c      	ldr	r2, [pc, #112]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fb4:	4a19      	ldr	r2, [pc, #100]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d016      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc6:	f7fe fe2d 	bl	8003c24 <HAL_GetTick>
 8004fca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fcc:	e00b      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fce:	f7fe fe29 	bl	8003c24 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d902      	bls.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	74fb      	strb	r3, [r7, #19]
            break;
 8004fe4:	e006      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fe6:	4b0d      	ldr	r3, [pc, #52]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0ec      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004ff4:	7cfb      	ldrb	r3, [r7, #19]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10c      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ffa:	4b08      	ldr	r3, [pc, #32]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500a:	4904      	ldr	r1, [pc, #16]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005012:	e009      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005014:	7cfb      	ldrb	r3, [r7, #19]
 8005016:	74bb      	strb	r3, [r7, #18]
 8005018:	e006      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800501a:	bf00      	nop
 800501c:	40021000 	.word	0x40021000
 8005020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005024:	7cfb      	ldrb	r3, [r7, #19]
 8005026:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005028:	7c7b      	ldrb	r3, [r7, #17]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d105      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800502e:	4b9e      	ldr	r3, [pc, #632]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005032:	4a9d      	ldr	r2, [pc, #628]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005038:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005046:	4b98      	ldr	r3, [pc, #608]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504c:	f023 0203 	bic.w	r2, r3, #3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	4994      	ldr	r1, [pc, #592]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005068:	4b8f      	ldr	r3, [pc, #572]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	f023 020c 	bic.w	r2, r3, #12
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005076:	498c      	ldr	r1, [pc, #560]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800508a:	4b87      	ldr	r3, [pc, #540]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005090:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	4983      	ldr	r1, [pc, #524]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050ac:	4b7e      	ldr	r3, [pc, #504]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ba:	497b      	ldr	r1, [pc, #492]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0310 	and.w	r3, r3, #16
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050ce:	4b76      	ldr	r3, [pc, #472]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050dc:	4972      	ldr	r1, [pc, #456]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050f0:	4b6d      	ldr	r3, [pc, #436]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fe:	496a      	ldr	r1, [pc, #424]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005112:	4b65      	ldr	r3, [pc, #404]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005118:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005120:	4961      	ldr	r1, [pc, #388]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005134:	4b5c      	ldr	r3, [pc, #368]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005142:	4959      	ldr	r1, [pc, #356]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005156:	4b54      	ldr	r3, [pc, #336]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005164:	4950      	ldr	r1, [pc, #320]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00a      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005178:	4b4b      	ldr	r3, [pc, #300]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005186:	4948      	ldr	r1, [pc, #288]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800519a:	4b43      	ldr	r3, [pc, #268]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a8:	493f      	ldr	r1, [pc, #252]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d028      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051bc:	4b3a      	ldr	r3, [pc, #232]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ca:	4937      	ldr	r1, [pc, #220]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051da:	d106      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051dc:	4b32      	ldr	r3, [pc, #200]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4a31      	ldr	r2, [pc, #196]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051e6:	60d3      	str	r3, [r2, #12]
 80051e8:	e011      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051f2:	d10c      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3304      	adds	r3, #4
 80051f8:	2101      	movs	r1, #1
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f8c8 	bl	8005390 <RCCEx_PLLSAI1_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005204:	7cfb      	ldrb	r3, [r7, #19]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800520a:	7cfb      	ldrb	r3, [r7, #19]
 800520c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d028      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800521a:	4b23      	ldr	r3, [pc, #140]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005220:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005228:	491f      	ldr	r1, [pc, #124]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005238:	d106      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800523a:	4b1b      	ldr	r3, [pc, #108]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	4a1a      	ldr	r2, [pc, #104]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005244:	60d3      	str	r3, [r2, #12]
 8005246:	e011      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005250:	d10c      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3304      	adds	r3, #4
 8005256:	2101      	movs	r1, #1
 8005258:	4618      	mov	r0, r3
 800525a:	f000 f899 	bl	8005390 <RCCEx_PLLSAI1_Config>
 800525e:	4603      	mov	r3, r0
 8005260:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005262:	7cfb      	ldrb	r3, [r7, #19]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005268:	7cfb      	ldrb	r3, [r7, #19]
 800526a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d02b      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005278:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005286:	4908      	ldr	r1, [pc, #32]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005292:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005296:	d109      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005298:	4b03      	ldr	r3, [pc, #12]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	4a02      	ldr	r2, [pc, #8]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052a2:	60d3      	str	r3, [r2, #12]
 80052a4:	e014      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80052a6:	bf00      	nop
 80052a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3304      	adds	r3, #4
 80052ba:	2101      	movs	r1, #1
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 f867 	bl	8005390 <RCCEx_PLLSAI1_Config>
 80052c2:	4603      	mov	r3, r0
 80052c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052c6:	7cfb      	ldrb	r3, [r7, #19]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80052cc:	7cfb      	ldrb	r3, [r7, #19]
 80052ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d02f      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052dc:	4b2b      	ldr	r3, [pc, #172]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ea:	4928      	ldr	r1, [pc, #160]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052fa:	d10d      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	2102      	movs	r1, #2
 8005302:	4618      	mov	r0, r3
 8005304:	f000 f844 	bl	8005390 <RCCEx_PLLSAI1_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800530c:	7cfb      	ldrb	r3, [r7, #19]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d014      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005312:	7cfb      	ldrb	r3, [r7, #19]
 8005314:	74bb      	strb	r3, [r7, #18]
 8005316:	e011      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800531c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005320:	d10c      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	3320      	adds	r3, #32
 8005326:	2102      	movs	r1, #2
 8005328:	4618      	mov	r0, r3
 800532a:	f000 f925 	bl	8005578 <RCCEx_PLLSAI2_Config>
 800532e:	4603      	mov	r3, r0
 8005330:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005332:	7cfb      	ldrb	r3, [r7, #19]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005338:	7cfb      	ldrb	r3, [r7, #19]
 800533a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005348:	4b10      	ldr	r3, [pc, #64]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005356:	490d      	ldr	r1, [pc, #52]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005358:	4313      	orrs	r3, r2
 800535a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00b      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800536a:	4b08      	ldr	r3, [pc, #32]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800536c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005370:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537a:	4904      	ldr	r1, [pc, #16]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005382:	7cbb      	ldrb	r3, [r7, #18]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40021000 	.word	0x40021000

08005390 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800539e:	4b75      	ldr	r3, [pc, #468]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d018      	beq.n	80053dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053aa:	4b72      	ldr	r3, [pc, #456]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f003 0203 	and.w	r2, r3, #3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d10d      	bne.n	80053d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
       ||
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d009      	beq.n	80053d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80053c2:	4b6c      	ldr	r3, [pc, #432]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	091b      	lsrs	r3, r3, #4
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
       ||
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d047      	beq.n	8005466 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	73fb      	strb	r3, [r7, #15]
 80053da:	e044      	b.n	8005466 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d018      	beq.n	8005416 <RCCEx_PLLSAI1_Config+0x86>
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d825      	bhi.n	8005434 <RCCEx_PLLSAI1_Config+0xa4>
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d002      	beq.n	80053f2 <RCCEx_PLLSAI1_Config+0x62>
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d009      	beq.n	8005404 <RCCEx_PLLSAI1_Config+0x74>
 80053f0:	e020      	b.n	8005434 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053f2:	4b60      	ldr	r3, [pc, #384]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d11d      	bne.n	800543a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005402:	e01a      	b.n	800543a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005404:	4b5b      	ldr	r3, [pc, #364]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800540c:	2b00      	cmp	r3, #0
 800540e:	d116      	bne.n	800543e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005414:	e013      	b.n	800543e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005416:	4b57      	ldr	r3, [pc, #348]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10f      	bne.n	8005442 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005422:	4b54      	ldr	r3, [pc, #336]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005432:	e006      	b.n	8005442 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	73fb      	strb	r3, [r7, #15]
      break;
 8005438:	e004      	b.n	8005444 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800543a:	bf00      	nop
 800543c:	e002      	b.n	8005444 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800543e:	bf00      	nop
 8005440:	e000      	b.n	8005444 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005442:	bf00      	nop
    }

    if(status == HAL_OK)
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10d      	bne.n	8005466 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800544a:	4b4a      	ldr	r3, [pc, #296]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6819      	ldr	r1, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	3b01      	subs	r3, #1
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	430b      	orrs	r3, r1
 8005460:	4944      	ldr	r1, [pc, #272]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005462:	4313      	orrs	r3, r2
 8005464:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d17d      	bne.n	8005568 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800546c:	4b41      	ldr	r3, [pc, #260]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a40      	ldr	r2, [pc, #256]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005472:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005476:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005478:	f7fe fbd4 	bl	8003c24 <HAL_GetTick>
 800547c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800547e:	e009      	b.n	8005494 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005480:	f7fe fbd0 	bl	8003c24 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d902      	bls.n	8005494 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	73fb      	strb	r3, [r7, #15]
        break;
 8005492:	e005      	b.n	80054a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005494:	4b37      	ldr	r3, [pc, #220]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1ef      	bne.n	8005480 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d160      	bne.n	8005568 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d111      	bne.n	80054d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054ac:	4b31      	ldr	r3, [pc, #196]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80054b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6892      	ldr	r2, [r2, #8]
 80054bc:	0211      	lsls	r1, r2, #8
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	68d2      	ldr	r2, [r2, #12]
 80054c2:	0912      	lsrs	r2, r2, #4
 80054c4:	0452      	lsls	r2, r2, #17
 80054c6:	430a      	orrs	r2, r1
 80054c8:	492a      	ldr	r1, [pc, #168]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	610b      	str	r3, [r1, #16]
 80054ce:	e027      	b.n	8005520 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d112      	bne.n	80054fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054d6:	4b27      	ldr	r3, [pc, #156]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80054de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6892      	ldr	r2, [r2, #8]
 80054e6:	0211      	lsls	r1, r2, #8
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6912      	ldr	r2, [r2, #16]
 80054ec:	0852      	lsrs	r2, r2, #1
 80054ee:	3a01      	subs	r2, #1
 80054f0:	0552      	lsls	r2, r2, #21
 80054f2:	430a      	orrs	r2, r1
 80054f4:	491f      	ldr	r1, [pc, #124]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	610b      	str	r3, [r1, #16]
 80054fa:	e011      	b.n	8005520 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054fc:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005504:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6892      	ldr	r2, [r2, #8]
 800550c:	0211      	lsls	r1, r2, #8
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6952      	ldr	r2, [r2, #20]
 8005512:	0852      	lsrs	r2, r2, #1
 8005514:	3a01      	subs	r2, #1
 8005516:	0652      	lsls	r2, r2, #25
 8005518:	430a      	orrs	r2, r1
 800551a:	4916      	ldr	r1, [pc, #88]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800551c:	4313      	orrs	r3, r2
 800551e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005520:	4b14      	ldr	r3, [pc, #80]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a13      	ldr	r2, [pc, #76]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005526:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800552a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552c:	f7fe fb7a 	bl	8003c24 <HAL_GetTick>
 8005530:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005532:	e009      	b.n	8005548 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005534:	f7fe fb76 	bl	8003c24 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d902      	bls.n	8005548 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	73fb      	strb	r3, [r7, #15]
          break;
 8005546:	e005      	b.n	8005554 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005548:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0ef      	beq.n	8005534 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800555a:	4b06      	ldr	r3, [pc, #24]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	4904      	ldr	r1, [pc, #16]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005564:	4313      	orrs	r3, r2
 8005566:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	40021000 	.word	0x40021000

08005578 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005586:	4b6a      	ldr	r3, [pc, #424]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d018      	beq.n	80055c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005592:	4b67      	ldr	r3, [pc, #412]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f003 0203 	and.w	r2, r3, #3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d10d      	bne.n	80055be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
       ||
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d009      	beq.n	80055be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80055aa:	4b61      	ldr	r3, [pc, #388]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	091b      	lsrs	r3, r3, #4
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
       ||
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d047      	beq.n	800564e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	73fb      	strb	r3, [r7, #15]
 80055c2:	e044      	b.n	800564e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d018      	beq.n	80055fe <RCCEx_PLLSAI2_Config+0x86>
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d825      	bhi.n	800561c <RCCEx_PLLSAI2_Config+0xa4>
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d002      	beq.n	80055da <RCCEx_PLLSAI2_Config+0x62>
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d009      	beq.n	80055ec <RCCEx_PLLSAI2_Config+0x74>
 80055d8:	e020      	b.n	800561c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055da:	4b55      	ldr	r3, [pc, #340]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d11d      	bne.n	8005622 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055ea:	e01a      	b.n	8005622 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055ec:	4b50      	ldr	r3, [pc, #320]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d116      	bne.n	8005626 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055fc:	e013      	b.n	8005626 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055fe:	4b4c      	ldr	r3, [pc, #304]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10f      	bne.n	800562a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800560a:	4b49      	ldr	r3, [pc, #292]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d109      	bne.n	800562a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800561a:	e006      	b.n	800562a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
      break;
 8005620:	e004      	b.n	800562c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005622:	bf00      	nop
 8005624:	e002      	b.n	800562c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005626:	bf00      	nop
 8005628:	e000      	b.n	800562c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800562a:	bf00      	nop
    }

    if(status == HAL_OK)
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10d      	bne.n	800564e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005632:	4b3f      	ldr	r3, [pc, #252]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6819      	ldr	r1, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	3b01      	subs	r3, #1
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	430b      	orrs	r3, r1
 8005648:	4939      	ldr	r1, [pc, #228]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 800564a:	4313      	orrs	r3, r2
 800564c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800564e:	7bfb      	ldrb	r3, [r7, #15]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d167      	bne.n	8005724 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005654:	4b36      	ldr	r3, [pc, #216]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a35      	ldr	r2, [pc, #212]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 800565a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800565e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005660:	f7fe fae0 	bl	8003c24 <HAL_GetTick>
 8005664:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005666:	e009      	b.n	800567c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005668:	f7fe fadc 	bl	8003c24 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d902      	bls.n	800567c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	73fb      	strb	r3, [r7, #15]
        break;
 800567a:	e005      	b.n	8005688 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800567c:	4b2c      	ldr	r3, [pc, #176]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1ef      	bne.n	8005668 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d14a      	bne.n	8005724 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d111      	bne.n	80056b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005694:	4b26      	ldr	r3, [pc, #152]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800569c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6892      	ldr	r2, [r2, #8]
 80056a4:	0211      	lsls	r1, r2, #8
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	68d2      	ldr	r2, [r2, #12]
 80056aa:	0912      	lsrs	r2, r2, #4
 80056ac:	0452      	lsls	r2, r2, #17
 80056ae:	430a      	orrs	r2, r1
 80056b0:	491f      	ldr	r1, [pc, #124]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	614b      	str	r3, [r1, #20]
 80056b6:	e011      	b.n	80056dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056b8:	4b1d      	ldr	r3, [pc, #116]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80056c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6892      	ldr	r2, [r2, #8]
 80056c8:	0211      	lsls	r1, r2, #8
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6912      	ldr	r2, [r2, #16]
 80056ce:	0852      	lsrs	r2, r2, #1
 80056d0:	3a01      	subs	r2, #1
 80056d2:	0652      	lsls	r2, r2, #25
 80056d4:	430a      	orrs	r2, r1
 80056d6:	4916      	ldr	r1, [pc, #88]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80056dc:	4b14      	ldr	r3, [pc, #80]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a13      	ldr	r2, [pc, #76]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e8:	f7fe fa9c 	bl	8003c24 <HAL_GetTick>
 80056ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056ee:	e009      	b.n	8005704 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056f0:	f7fe fa98 	bl	8003c24 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d902      	bls.n	8005704 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	73fb      	strb	r3, [r7, #15]
          break;
 8005702:	e005      	b.n	8005710 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005704:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0ef      	beq.n	80056f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005716:	4b06      	ldr	r3, [pc, #24]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005718:	695a      	ldr	r2, [r3, #20]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	4904      	ldr	r1, [pc, #16]	; (8005730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005720:	4313      	orrs	r3, r2
 8005722:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005724:	7bfb      	ldrb	r3, [r7, #15]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40021000 	.word	0x40021000

08005734 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005734:	b480      	push	{r7}
 8005736:	b08b      	sub	sp, #44	; 0x2c
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	fa93 f3a3 	rbit	r3, r3
 800574e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800575a:	2320      	movs	r3, #32
 800575c:	e003      	b.n	8005766 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	fab3 f383 	clz	r3, r3
 8005764:	b2db      	uxtb	r3, r3
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	2103      	movs	r1, #3
 800576a:	fa01 f303 	lsl.w	r3, r1, r3
 800576e:	43db      	mvns	r3, r3
 8005770:	401a      	ands	r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	fa93 f3a3 	rbit	r3, r3
 800577c:	61fb      	str	r3, [r7, #28]
  return result;
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005788:	2320      	movs	r3, #32
 800578a:	e003      	b.n	8005794 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	fab3 f383 	clz	r3, r3
 8005792:	b2db      	uxtb	r3, r3
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	fa01 f303 	lsl.w	r3, r1, r3
 800579c:	431a      	orrs	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	601a      	str	r2, [r3, #0]
}
 80057a2:	bf00      	nop
 80057a4:	372c      	adds	r7, #44	; 0x2c
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	43db      	mvns	r3, r3
 80057c2:	401a      	ands	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	fb01 f303 	mul.w	r3, r1, r3
 80057cc:	431a      	orrs	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	605a      	str	r2, [r3, #4]
}
 80057d2:	bf00      	nop
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80057de:	b480      	push	{r7}
 80057e0:	b08b      	sub	sp, #44	; 0x2c
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	fa93 f3a3 	rbit	r3, r3
 80057f8:	613b      	str	r3, [r7, #16]
  return result;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005804:	2320      	movs	r3, #32
 8005806:	e003      	b.n	8005810 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	fab3 f383 	clz	r3, r3
 800580e:	b2db      	uxtb	r3, r3
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	2103      	movs	r1, #3
 8005814:	fa01 f303 	lsl.w	r3, r1, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	401a      	ands	r2, r3
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	fa93 f3a3 	rbit	r3, r3
 8005826:	61fb      	str	r3, [r7, #28]
  return result;
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005832:	2320      	movs	r3, #32
 8005834:	e003      	b.n	800583e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	fab3 f383 	clz	r3, r3
 800583c:	b2db      	uxtb	r3, r3
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	fa01 f303 	lsl.w	r3, r1, r3
 8005846:	431a      	orrs	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800584c:	bf00      	nop
 800584e:	372c      	adds	r7, #44	; 0x2c
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005858:	b480      	push	{r7}
 800585a:	b08b      	sub	sp, #44	; 0x2c
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	fa93 f3a3 	rbit	r3, r3
 8005872:	613b      	str	r3, [r7, #16]
  return result;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800587e:	2320      	movs	r3, #32
 8005880:	e003      	b.n	800588a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	fab3 f383 	clz	r3, r3
 8005888:	b2db      	uxtb	r3, r3
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	2103      	movs	r1, #3
 800588e:	fa01 f303 	lsl.w	r3, r1, r3
 8005892:	43db      	mvns	r3, r3
 8005894:	401a      	ands	r2, r3
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	fa93 f3a3 	rbit	r3, r3
 80058a0:	61fb      	str	r3, [r7, #28]
  return result;
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80058ac:	2320      	movs	r3, #32
 80058ae:	e003      	b.n	80058b8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	fab3 f383 	clz	r3, r3
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	fa01 f303 	lsl.w	r3, r1, r3
 80058c0:	431a      	orrs	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	60da      	str	r2, [r3, #12]
}
 80058c6:	bf00      	nop
 80058c8:	372c      	adds	r7, #44	; 0x2c
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b08b      	sub	sp, #44	; 0x2c
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a1a      	ldr	r2, [r3, #32]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	fa93 f3a3 	rbit	r3, r3
 80058ec:	613b      	str	r3, [r7, #16]
  return result;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80058f8:	2320      	movs	r3, #32
 80058fa:	e003      	b.n	8005904 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	fab3 f383 	clz	r3, r3
 8005902:	b2db      	uxtb	r3, r3
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	210f      	movs	r1, #15
 8005908:	fa01 f303 	lsl.w	r3, r1, r3
 800590c:	43db      	mvns	r3, r3
 800590e:	401a      	ands	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	fa93 f3a3 	rbit	r3, r3
 800591a:	61fb      	str	r3, [r7, #28]
  return result;
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005926:	2320      	movs	r3, #32
 8005928:	e003      	b.n	8005932 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	fab3 f383 	clz	r3, r3
 8005930:	b2db      	uxtb	r3, r3
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	fa01 f303 	lsl.w	r3, r1, r3
 800593a:	431a      	orrs	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005940:	bf00      	nop
 8005942:	372c      	adds	r7, #44	; 0x2c
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800594c:	b480      	push	{r7}
 800594e:	b08b      	sub	sp, #44	; 0x2c
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	0a1b      	lsrs	r3, r3, #8
 8005960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	fa93 f3a3 	rbit	r3, r3
 8005968:	613b      	str	r3, [r7, #16]
  return result;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005974:	2320      	movs	r3, #32
 8005976:	e003      	b.n	8005980 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	fab3 f383 	clz	r3, r3
 800597e:	b2db      	uxtb	r3, r3
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	210f      	movs	r1, #15
 8005984:	fa01 f303 	lsl.w	r3, r1, r3
 8005988:	43db      	mvns	r3, r3
 800598a:	401a      	ands	r2, r3
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	0a1b      	lsrs	r3, r3, #8
 8005990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	fa93 f3a3 	rbit	r3, r3
 8005998:	61fb      	str	r3, [r7, #28]
  return result;
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80059a4:	2320      	movs	r3, #32
 80059a6:	e003      	b.n	80059b0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	fab3 f383 	clz	r3, r3
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	fa01 f303 	lsl.w	r3, r1, r3
 80059b8:	431a      	orrs	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80059be:	bf00      	nop
 80059c0:	372c      	adds	r7, #44	; 0x2c
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b088      	sub	sp, #32
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	fa93 f3a3 	rbit	r3, r3
 80059e0:	60fb      	str	r3, [r7, #12]
  return result;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <LL_GPIO_Init+0x26>
    return 32U;
 80059ec:	2320      	movs	r3, #32
 80059ee:	e003      	b.n	80059f8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	fab3 f383 	clz	r3, r3
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80059fa:	e048      	b.n	8005a8e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	2101      	movs	r1, #1
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	fa01 f303 	lsl.w	r3, r1, r3
 8005a08:	4013      	ands	r3, r2
 8005a0a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d03a      	beq.n	8005a88 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d003      	beq.n	8005a22 <LL_GPIO_Init+0x58>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d10e      	bne.n	8005a40 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	461a      	mov	r2, r3
 8005a28:	69b9      	ldr	r1, [r7, #24]
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff fed7 	bl	80057de <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	6819      	ldr	r1, [r3, #0]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7ff feb7 	bl	80057ae <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	461a      	mov	r2, r3
 8005a46:	69b9      	ldr	r1, [r7, #24]
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff ff05 	bl	8005858 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d111      	bne.n	8005a7a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	2bff      	cmp	r3, #255	; 0xff
 8005a5a:	d807      	bhi.n	8005a6c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	461a      	mov	r2, r3
 8005a62:	69b9      	ldr	r1, [r7, #24]
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff ff34 	bl	80058d2 <LL_GPIO_SetAFPin_0_7>
 8005a6a:	e006      	b.n	8005a7a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	461a      	mov	r2, r3
 8005a72:	69b9      	ldr	r1, [r7, #24]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff ff69 	bl	800594c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	69b9      	ldr	r1, [r7, #24]
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff fe56 	bl	8005734 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	fa22 f303 	lsr.w	r3, r2, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1af      	bne.n	80059fc <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3720      	adds	r7, #32
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005aac:	4b07      	ldr	r3, [pc, #28]	; (8005acc <LL_RCC_HSI_IsReady+0x24>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab8:	d101      	bne.n	8005abe <LL_RCC_HSI_IsReady+0x16>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <LL_RCC_HSI_IsReady+0x18>
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40021000 	.word	0x40021000

08005ad0 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8005ad4:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <LL_RCC_LSE_IsReady+0x24>)
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d101      	bne.n	8005ae6 <LL_RCC_LSE_IsReady+0x16>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <LL_RCC_LSE_IsReady+0x18>
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40021000 	.word	0x40021000

08005af8 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8005afc:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d101      	bne.n	8005b0c <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	40021000 	.word	0x40021000

08005b1c <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005b20:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <LL_RCC_MSI_GetRange+0x18>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40021000 	.word	0x40021000

08005b38 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005b3c:	4b04      	ldr	r3, [pc, #16]	; (8005b50 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8005b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b42:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	40021000 	.word	0x40021000

08005b54 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005b58:	4b04      	ldr	r3, [pc, #16]	; (8005b6c <LL_RCC_GetSysClkSource+0x18>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 030c 	and.w	r3, r3, #12
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	40021000 	.word	0x40021000

08005b70 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005b74:	4b04      	ldr	r3, [pc, #16]	; (8005b88 <LL_RCC_GetAHBPrescaler+0x18>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40021000 	.word	0x40021000

08005b8c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005b90:	4b04      	ldr	r3, [pc, #16]	; (8005ba4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40021000 	.word	0x40021000

08005ba8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005bac:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	40021000 	.word	0x40021000

08005bc4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8005bcc:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <LL_RCC_GetUSARTClockSource+0x24>)
 8005bce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	401a      	ands	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	041b      	lsls	r3, r3, #16
 8005bda:	4313      	orrs	r3, r2
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	40021000 	.word	0x40021000

08005bec <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8005bf4:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <LL_RCC_GetUARTClockSource+0x24>)
 8005bf6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	401a      	ands	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	041b      	lsls	r3, r3, #16
 8005c02:	4313      	orrs	r3, r2
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	40021000 	.word	0x40021000

08005c14 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005c18:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <LL_RCC_PLL_GetMainSource+0x18>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f003 0303 	and.w	r3, r3, #3
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40021000 	.word	0x40021000

08005c30 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005c34:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <LL_RCC_PLL_GetN+0x18>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	0a1b      	lsrs	r3, r3, #8
 8005c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	40021000 	.word	0x40021000

08005c4c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005c50:	4b04      	ldr	r3, [pc, #16]	; (8005c64 <LL_RCC_PLL_GetR+0x18>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	40021000 	.word	0x40021000

08005c68 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005c6c:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <LL_RCC_PLL_GetDivider+0x18>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40021000 	.word	0x40021000

08005c84 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d137      	bne.n	8005d06 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff ff94 	bl	8005bc4 <LL_RCC_GetUSARTClockSource>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	f200 80b3 	bhi.w	8005e0e <LL_RCC_GetUSARTClockFreq+0x18a>
 8005ca8:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8005caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cae:	bf00      	nop
 8005cb0:	08005cef 	.word	0x08005cef
 8005cb4:	08005cc1 	.word	0x08005cc1
 8005cb8:	08005cc9 	.word	0x08005cc9
 8005cbc:	08005cdb 	.word	0x08005cdb
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005cc0:	f000 f95c 	bl	8005f7c <RCC_GetSystemClockFreq>
 8005cc4:	60f8      	str	r0, [r7, #12]
        break;
 8005cc6:	e0b5      	b.n	8005e34 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005cc8:	f7ff feee 	bl	8005aa8 <LL_RCC_HSI_IsReady>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 809f 	beq.w	8005e12 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8005cd4:	4b5a      	ldr	r3, [pc, #360]	; (8005e40 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005cd6:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005cd8:	e09b      	b.n	8005e12 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005cda:	f7ff fef9 	bl	8005ad0 <LL_RCC_LSE_IsReady>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8098 	beq.w	8005e16 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8005ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cea:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005cec:	e093      	b.n	8005e16 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005cee:	f000 f945 	bl	8005f7c <RCC_GetSystemClockFreq>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 f9d1 	bl	800609c <RCC_GetHCLKClockFreq>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 f9f7 	bl	80060f0 <RCC_GetPCLK2ClockFreq>
 8005d02:	60f8      	str	r0, [r7, #12]
        break;
 8005d04:	e096      	b.n	8005e34 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b0c      	cmp	r3, #12
 8005d0a:	d146      	bne.n	8005d9a <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff ff59 	bl	8005bc4 <LL_RCC_GetUSARTClockSource>
 8005d12:	4603      	mov	r3, r0
 8005d14:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005d18:	2b0c      	cmp	r3, #12
 8005d1a:	d87e      	bhi.n	8005e1a <LL_RCC_GetUSARTClockFreq+0x196>
 8005d1c:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8005d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d22:	bf00      	nop
 8005d24:	08005d83 	.word	0x08005d83
 8005d28:	08005e1b 	.word	0x08005e1b
 8005d2c:	08005e1b 	.word	0x08005e1b
 8005d30:	08005e1b 	.word	0x08005e1b
 8005d34:	08005d59 	.word	0x08005d59
 8005d38:	08005e1b 	.word	0x08005e1b
 8005d3c:	08005e1b 	.word	0x08005e1b
 8005d40:	08005e1b 	.word	0x08005e1b
 8005d44:	08005d61 	.word	0x08005d61
 8005d48:	08005e1b 	.word	0x08005e1b
 8005d4c:	08005e1b 	.word	0x08005e1b
 8005d50:	08005e1b 	.word	0x08005e1b
 8005d54:	08005d71 	.word	0x08005d71
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005d58:	f000 f910 	bl	8005f7c <RCC_GetSystemClockFreq>
 8005d5c:	60f8      	str	r0, [r7, #12]
        break;
 8005d5e:	e069      	b.n	8005e34 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005d60:	f7ff fea2 	bl	8005aa8 <LL_RCC_HSI_IsReady>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d059      	beq.n	8005e1e <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8005d6a:	4b35      	ldr	r3, [pc, #212]	; (8005e40 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005d6c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005d6e:	e056      	b.n	8005e1e <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005d70:	f7ff feae 	bl	8005ad0 <LL_RCC_LSE_IsReady>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d053      	beq.n	8005e22 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8005d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d7e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005d80:	e04f      	b.n	8005e22 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005d82:	f000 f8fb 	bl	8005f7c <RCC_GetSystemClockFreq>
 8005d86:	4603      	mov	r3, r0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 f987 	bl	800609c <RCC_GetHCLKClockFreq>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 f999 	bl	80060c8 <RCC_GetPCLK1ClockFreq>
 8005d96:	60f8      	str	r0, [r7, #12]
        break;
 8005d98:	e04c      	b.n	8005e34 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b30      	cmp	r3, #48	; 0x30
 8005d9e:	d142      	bne.n	8005e26 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff ff0f 	bl	8005bc4 <LL_RCC_GetUSARTClockSource>
 8005da6:	4603      	mov	r3, r0
 8005da8:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005dac:	d01a      	beq.n	8005de4 <LL_RCC_GetUSARTClockFreq+0x160>
 8005dae:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005db2:	d83a      	bhi.n	8005e2a <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005db4:	4a23      	ldr	r2, [pc, #140]	; (8005e44 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00c      	beq.n	8005dd4 <LL_RCC_GetUSARTClockFreq+0x150>
 8005dba:	4a22      	ldr	r2, [pc, #136]	; (8005e44 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d834      	bhi.n	8005e2a <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005dc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dc4:	d017      	beq.n	8005df6 <LL_RCC_GetUSARTClockFreq+0x172>
 8005dc6:	4a20      	ldr	r2, [pc, #128]	; (8005e48 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d12e      	bne.n	8005e2a <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8005dcc:	f000 f8d6 	bl	8005f7c <RCC_GetSystemClockFreq>
 8005dd0:	60f8      	str	r0, [r7, #12]
          break;
 8005dd2:	e02f      	b.n	8005e34 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8005dd4:	f7ff fe68 	bl	8005aa8 <LL_RCC_HSI_IsReady>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d027      	beq.n	8005e2e <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8005dde:	4b18      	ldr	r3, [pc, #96]	; (8005e40 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005de0:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005de2:	e024      	b.n	8005e2e <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8005de4:	f7ff fe74 	bl	8005ad0 <LL_RCC_LSE_IsReady>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d021      	beq.n	8005e32 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8005dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005df2:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005df4:	e01d      	b.n	8005e32 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005df6:	f000 f8c1 	bl	8005f7c <RCC_GetSystemClockFreq>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 f94d 	bl	800609c <RCC_GetHCLKClockFreq>
 8005e02:	4603      	mov	r3, r0
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 f95f 	bl	80060c8 <RCC_GetPCLK1ClockFreq>
 8005e0a:	60f8      	str	r0, [r7, #12]
          break;
 8005e0c:	e012      	b.n	8005e34 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005e0e:	bf00      	nop
 8005e10:	e010      	b.n	8005e34 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005e12:	bf00      	nop
 8005e14:	e00e      	b.n	8005e34 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005e16:	bf00      	nop
 8005e18:	e00c      	b.n	8005e34 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005e1a:	bf00      	nop
 8005e1c:	e00a      	b.n	8005e34 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005e1e:	bf00      	nop
 8005e20:	e008      	b.n	8005e34 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005e22:	bf00      	nop
 8005e24:	e006      	b.n	8005e34 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8005e26:	bf00      	nop
 8005e28:	e004      	b.n	8005e34 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8005e2a:	bf00      	nop
 8005e2c:	e002      	b.n	8005e34 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8005e2e:	bf00      	nop
 8005e30:	e000      	b.n	8005e34 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8005e32:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8005e34:	68fb      	ldr	r3, [r7, #12]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	00f42400 	.word	0x00f42400
 8005e44:	00300020 	.word	0x00300020
 8005e48:	00300010 	.word	0x00300010

08005e4c <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e5c:	d136      	bne.n	8005ecc <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff fec4 	bl	8005bec <LL_RCC_GetUARTClockSource>
 8005e64:	4603      	mov	r3, r0
 8005e66:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005e6a:	d01a      	beq.n	8005ea2 <LL_RCC_GetUARTClockFreq+0x56>
 8005e6c:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005e70:	d82e      	bhi.n	8005ed0 <LL_RCC_GetUARTClockFreq+0x84>
 8005e72:	4a3d      	ldr	r2, [pc, #244]	; (8005f68 <LL_RCC_GetUARTClockFreq+0x11c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00c      	beq.n	8005e92 <LL_RCC_GetUARTClockFreq+0x46>
 8005e78:	4a3b      	ldr	r2, [pc, #236]	; (8005f68 <LL_RCC_GetUARTClockFreq+0x11c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d828      	bhi.n	8005ed0 <LL_RCC_GetUARTClockFreq+0x84>
 8005e7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e82:	d017      	beq.n	8005eb4 <LL_RCC_GetUARTClockFreq+0x68>
 8005e84:	4a39      	ldr	r2, [pc, #228]	; (8005f6c <LL_RCC_GetUARTClockFreq+0x120>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d122      	bne.n	8005ed0 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005e8a:	f000 f877 	bl	8005f7c <RCC_GetSystemClockFreq>
 8005e8e:	60f8      	str	r0, [r7, #12]
        break;
 8005e90:	e023      	b.n	8005eda <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005e92:	f7ff fe09 	bl	8005aa8 <LL_RCC_HSI_IsReady>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01b      	beq.n	8005ed4 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8005e9c:	4b34      	ldr	r3, [pc, #208]	; (8005f70 <LL_RCC_GetUARTClockFreq+0x124>)
 8005e9e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005ea0:	e018      	b.n	8005ed4 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005ea2:	f7ff fe15 	bl	8005ad0 <LL_RCC_LSE_IsReady>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d015      	beq.n	8005ed8 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8005eac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb0:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005eb2:	e011      	b.n	8005ed8 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005eb4:	f000 f862 	bl	8005f7c <RCC_GetSystemClockFreq>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 f8ee 	bl	800609c <RCC_GetHCLKClockFreq>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 f900 	bl	80060c8 <RCC_GetPCLK1ClockFreq>
 8005ec8:	60f8      	str	r0, [r7, #12]
        break;
 8005eca:	e006      	b.n	8005eda <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8005ecc:	bf00      	nop
 8005ece:	e004      	b.n	8005eda <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005ed0:	bf00      	nop
 8005ed2:	e002      	b.n	8005eda <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005ed4:	bf00      	nop
 8005ed6:	e000      	b.n	8005eda <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005ed8:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ee0:	d136      	bne.n	8005f50 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff fe82 	bl	8005bec <LL_RCC_GetUARTClockSource>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8005eee:	d01a      	beq.n	8005f26 <LL_RCC_GetUARTClockFreq+0xda>
 8005ef0:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8005ef4:	d82e      	bhi.n	8005f54 <LL_RCC_GetUARTClockFreq+0x108>
 8005ef6:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <LL_RCC_GetUARTClockFreq+0x128>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00c      	beq.n	8005f16 <LL_RCC_GetUARTClockFreq+0xca>
 8005efc:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <LL_RCC_GetUARTClockFreq+0x128>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d828      	bhi.n	8005f54 <LL_RCC_GetUARTClockFreq+0x108>
 8005f02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f06:	d017      	beq.n	8005f38 <LL_RCC_GetUARTClockFreq+0xec>
 8005f08:	4a1b      	ldr	r2, [pc, #108]	; (8005f78 <LL_RCC_GetUARTClockFreq+0x12c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d122      	bne.n	8005f54 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005f0e:	f000 f835 	bl	8005f7c <RCC_GetSystemClockFreq>
 8005f12:	60f8      	str	r0, [r7, #12]
        break;
 8005f14:	e023      	b.n	8005f5e <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005f16:	f7ff fdc7 	bl	8005aa8 <LL_RCC_HSI_IsReady>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01b      	beq.n	8005f58 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8005f20:	4b13      	ldr	r3, [pc, #76]	; (8005f70 <LL_RCC_GetUARTClockFreq+0x124>)
 8005f22:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005f24:	e018      	b.n	8005f58 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005f26:	f7ff fdd3 	bl	8005ad0 <LL_RCC_LSE_IsReady>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d015      	beq.n	8005f5c <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8005f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f34:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005f36:	e011      	b.n	8005f5c <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005f38:	f000 f820 	bl	8005f7c <RCC_GetSystemClockFreq>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 f8ac 	bl	800609c <RCC_GetHCLKClockFreq>
 8005f44:	4603      	mov	r3, r0
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 f8be 	bl	80060c8 <RCC_GetPCLK1ClockFreq>
 8005f4c:	60f8      	str	r0, [r7, #12]
        break;
 8005f4e:	e006      	b.n	8005f5e <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8005f50:	bf00      	nop
 8005f52:	e004      	b.n	8005f5e <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8005f54:	bf00      	nop
 8005f56:	e002      	b.n	8005f5e <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8005f58:	bf00      	nop
 8005f5a:	e000      	b.n	8005f5e <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8005f5c:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	00c00080 	.word	0x00c00080
 8005f6c:	00c00040 	.word	0x00c00040
 8005f70:	00f42400 	.word	0x00f42400
 8005f74:	03000200 	.word	0x03000200
 8005f78:	03000100 	.word	0x03000100

08005f7c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005f82:	f7ff fde7 	bl	8005b54 <LL_RCC_GetSysClkSource>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b0c      	cmp	r3, #12
 8005f8a:	d851      	bhi.n	8006030 <RCC_GetSystemClockFreq+0xb4>
 8005f8c:	a201      	add	r2, pc, #4	; (adr r2, 8005f94 <RCC_GetSystemClockFreq+0x18>)
 8005f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f92:	bf00      	nop
 8005f94:	08005fc9 	.word	0x08005fc9
 8005f98:	08006031 	.word	0x08006031
 8005f9c:	08006031 	.word	0x08006031
 8005fa0:	08006031 	.word	0x08006031
 8005fa4:	0800601d 	.word	0x0800601d
 8005fa8:	08006031 	.word	0x08006031
 8005fac:	08006031 	.word	0x08006031
 8005fb0:	08006031 	.word	0x08006031
 8005fb4:	08006023 	.word	0x08006023
 8005fb8:	08006031 	.word	0x08006031
 8005fbc:	08006031 	.word	0x08006031
 8005fc0:	08006031 	.word	0x08006031
 8005fc4:	08006029 	.word	0x08006029
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005fc8:	f7ff fd96 	bl	8005af8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d111      	bne.n	8005ff6 <RCC_GetSystemClockFreq+0x7a>
 8005fd2:	f7ff fd91 	bl	8005af8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d004      	beq.n	8005fe6 <RCC_GetSystemClockFreq+0x6a>
 8005fdc:	f7ff fd9e 	bl	8005b1c <LL_RCC_MSI_GetRange>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	0a1b      	lsrs	r3, r3, #8
 8005fe4:	e003      	b.n	8005fee <RCC_GetSystemClockFreq+0x72>
 8005fe6:	f7ff fda7 	bl	8005b38 <LL_RCC_MSI_GetRangeAfterStandby>
 8005fea:	4603      	mov	r3, r0
 8005fec:	0a1b      	lsrs	r3, r3, #8
 8005fee:	4a28      	ldr	r2, [pc, #160]	; (8006090 <RCC_GetSystemClockFreq+0x114>)
 8005ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff4:	e010      	b.n	8006018 <RCC_GetSystemClockFreq+0x9c>
 8005ff6:	f7ff fd7f 	bl	8005af8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <RCC_GetSystemClockFreq+0x8e>
 8006000:	f7ff fd8c 	bl	8005b1c <LL_RCC_MSI_GetRange>
 8006004:	4603      	mov	r3, r0
 8006006:	091b      	lsrs	r3, r3, #4
 8006008:	e003      	b.n	8006012 <RCC_GetSystemClockFreq+0x96>
 800600a:	f7ff fd95 	bl	8005b38 <LL_RCC_MSI_GetRangeAfterStandby>
 800600e:	4603      	mov	r3, r0
 8006010:	091b      	lsrs	r3, r3, #4
 8006012:	4a1f      	ldr	r2, [pc, #124]	; (8006090 <RCC_GetSystemClockFreq+0x114>)
 8006014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006018:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800601a:	e033      	b.n	8006084 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800601c:	4b1d      	ldr	r3, [pc, #116]	; (8006094 <RCC_GetSystemClockFreq+0x118>)
 800601e:	607b      	str	r3, [r7, #4]
      break;
 8006020:	e030      	b.n	8006084 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006022:	4b1d      	ldr	r3, [pc, #116]	; (8006098 <RCC_GetSystemClockFreq+0x11c>)
 8006024:	607b      	str	r3, [r7, #4]
      break;
 8006026:	e02d      	b.n	8006084 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006028:	f000 f876 	bl	8006118 <RCC_PLL_GetFreqDomain_SYS>
 800602c:	6078      	str	r0, [r7, #4]
      break;
 800602e:	e029      	b.n	8006084 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006030:	f7ff fd62 	bl	8005af8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d111      	bne.n	800605e <RCC_GetSystemClockFreq+0xe2>
 800603a:	f7ff fd5d 	bl	8005af8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d004      	beq.n	800604e <RCC_GetSystemClockFreq+0xd2>
 8006044:	f7ff fd6a 	bl	8005b1c <LL_RCC_MSI_GetRange>
 8006048:	4603      	mov	r3, r0
 800604a:	0a1b      	lsrs	r3, r3, #8
 800604c:	e003      	b.n	8006056 <RCC_GetSystemClockFreq+0xda>
 800604e:	f7ff fd73 	bl	8005b38 <LL_RCC_MSI_GetRangeAfterStandby>
 8006052:	4603      	mov	r3, r0
 8006054:	0a1b      	lsrs	r3, r3, #8
 8006056:	4a0e      	ldr	r2, [pc, #56]	; (8006090 <RCC_GetSystemClockFreq+0x114>)
 8006058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800605c:	e010      	b.n	8006080 <RCC_GetSystemClockFreq+0x104>
 800605e:	f7ff fd4b 	bl	8005af8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d004      	beq.n	8006072 <RCC_GetSystemClockFreq+0xf6>
 8006068:	f7ff fd58 	bl	8005b1c <LL_RCC_MSI_GetRange>
 800606c:	4603      	mov	r3, r0
 800606e:	091b      	lsrs	r3, r3, #4
 8006070:	e003      	b.n	800607a <RCC_GetSystemClockFreq+0xfe>
 8006072:	f7ff fd61 	bl	8005b38 <LL_RCC_MSI_GetRangeAfterStandby>
 8006076:	4603      	mov	r3, r0
 8006078:	091b      	lsrs	r3, r3, #4
 800607a:	4a05      	ldr	r2, [pc, #20]	; (8006090 <RCC_GetSystemClockFreq+0x114>)
 800607c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006080:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006082:	bf00      	nop
  }

  return frequency;
 8006084:	687b      	ldr	r3, [r7, #4]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	08007878 	.word	0x08007878
 8006094:	00f42400 	.word	0x00f42400
 8006098:	007a1200 	.word	0x007a1200

0800609c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80060a4:	f7ff fd64 	bl	8005b70 <LL_RCC_GetAHBPrescaler>
 80060a8:	4603      	mov	r3, r0
 80060aa:	091b      	lsrs	r3, r3, #4
 80060ac:	f003 030f 	and.w	r3, r3, #15
 80060b0:	4a04      	ldr	r2, [pc, #16]	; (80060c4 <RCC_GetHCLKClockFreq+0x28>)
 80060b2:	5cd3      	ldrb	r3, [r2, r3]
 80060b4:	461a      	mov	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	40d3      	lsrs	r3, r2
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	08007860 	.word	0x08007860

080060c8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80060d0:	f7ff fd5c 	bl	8005b8c <LL_RCC_GetAPB1Prescaler>
 80060d4:	4603      	mov	r3, r0
 80060d6:	0a1b      	lsrs	r3, r3, #8
 80060d8:	4a04      	ldr	r2, [pc, #16]	; (80060ec <RCC_GetPCLK1ClockFreq+0x24>)
 80060da:	5cd3      	ldrb	r3, [r2, r3]
 80060dc:	461a      	mov	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	40d3      	lsrs	r3, r2
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	08007870 	.word	0x08007870

080060f0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80060f8:	f7ff fd56 	bl	8005ba8 <LL_RCC_GetAPB2Prescaler>
 80060fc:	4603      	mov	r3, r0
 80060fe:	0adb      	lsrs	r3, r3, #11
 8006100:	4a04      	ldr	r2, [pc, #16]	; (8006114 <RCC_GetPCLK2ClockFreq+0x24>)
 8006102:	5cd3      	ldrb	r3, [r2, r3]
 8006104:	461a      	mov	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	40d3      	lsrs	r3, r2
}
 800610a:	4618      	mov	r0, r3
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	08007870 	.word	0x08007870

08006118 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006118:	b590      	push	{r4, r7, lr}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800611e:	f7ff fd79 	bl	8005c14 <LL_RCC_PLL_GetMainSource>
 8006122:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2b03      	cmp	r3, #3
 8006128:	d036      	beq.n	8006198 <RCC_PLL_GetFreqDomain_SYS+0x80>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b03      	cmp	r3, #3
 800612e:	d836      	bhi.n	800619e <RCC_PLL_GetFreqDomain_SYS+0x86>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d003      	beq.n	800613e <RCC_PLL_GetFreqDomain_SYS+0x26>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d02a      	beq.n	8006192 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 800613c:	e02f      	b.n	800619e <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800613e:	f7ff fcdb 	bl	8005af8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d111      	bne.n	800616c <RCC_PLL_GetFreqDomain_SYS+0x54>
 8006148:	f7ff fcd6 	bl	8005af8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d004      	beq.n	800615c <RCC_PLL_GetFreqDomain_SYS+0x44>
 8006152:	f7ff fce3 	bl	8005b1c <LL_RCC_MSI_GetRange>
 8006156:	4603      	mov	r3, r0
 8006158:	0a1b      	lsrs	r3, r3, #8
 800615a:	e003      	b.n	8006164 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 800615c:	f7ff fcec 	bl	8005b38 <LL_RCC_MSI_GetRangeAfterStandby>
 8006160:	4603      	mov	r3, r0
 8006162:	0a1b      	lsrs	r3, r3, #8
 8006164:	4a2f      	ldr	r2, [pc, #188]	; (8006224 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800616a:	e010      	b.n	800618e <RCC_PLL_GetFreqDomain_SYS+0x76>
 800616c:	f7ff fcc4 	bl	8005af8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d004      	beq.n	8006180 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8006176:	f7ff fcd1 	bl	8005b1c <LL_RCC_MSI_GetRange>
 800617a:	4603      	mov	r3, r0
 800617c:	091b      	lsrs	r3, r3, #4
 800617e:	e003      	b.n	8006188 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8006180:	f7ff fcda 	bl	8005b38 <LL_RCC_MSI_GetRangeAfterStandby>
 8006184:	4603      	mov	r3, r0
 8006186:	091b      	lsrs	r3, r3, #4
 8006188:	4a26      	ldr	r2, [pc, #152]	; (8006224 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800618a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800618e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006190:	e02f      	b.n	80061f2 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006192:	4b25      	ldr	r3, [pc, #148]	; (8006228 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8006194:	607b      	str	r3, [r7, #4]
      break;
 8006196:	e02c      	b.n	80061f2 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006198:	4b24      	ldr	r3, [pc, #144]	; (800622c <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800619a:	607b      	str	r3, [r7, #4]
      break;
 800619c:	e029      	b.n	80061f2 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800619e:	f7ff fcab 	bl	8005af8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d111      	bne.n	80061cc <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80061a8:	f7ff fca6 	bl	8005af8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d004      	beq.n	80061bc <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80061b2:	f7ff fcb3 	bl	8005b1c <LL_RCC_MSI_GetRange>
 80061b6:	4603      	mov	r3, r0
 80061b8:	0a1b      	lsrs	r3, r3, #8
 80061ba:	e003      	b.n	80061c4 <RCC_PLL_GetFreqDomain_SYS+0xac>
 80061bc:	f7ff fcbc 	bl	8005b38 <LL_RCC_MSI_GetRangeAfterStandby>
 80061c0:	4603      	mov	r3, r0
 80061c2:	0a1b      	lsrs	r3, r3, #8
 80061c4:	4a17      	ldr	r2, [pc, #92]	; (8006224 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80061c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ca:	e010      	b.n	80061ee <RCC_PLL_GetFreqDomain_SYS+0xd6>
 80061cc:	f7ff fc94 	bl	8005af8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d004      	beq.n	80061e0 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 80061d6:	f7ff fca1 	bl	8005b1c <LL_RCC_MSI_GetRange>
 80061da:	4603      	mov	r3, r0
 80061dc:	091b      	lsrs	r3, r3, #4
 80061de:	e003      	b.n	80061e8 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 80061e0:	f7ff fcaa 	bl	8005b38 <LL_RCC_MSI_GetRangeAfterStandby>
 80061e4:	4603      	mov	r3, r0
 80061e6:	091b      	lsrs	r3, r3, #4
 80061e8:	4a0e      	ldr	r2, [pc, #56]	; (8006224 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80061ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ee:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80061f0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80061f2:	f7ff fd39 	bl	8005c68 <LL_RCC_PLL_GetDivider>
 80061f6:	4603      	mov	r3, r0
 80061f8:	091b      	lsrs	r3, r3, #4
 80061fa:	3301      	adds	r3, #1
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	fbb2 f4f3 	udiv	r4, r2, r3
 8006202:	f7ff fd15 	bl	8005c30 <LL_RCC_PLL_GetN>
 8006206:	4603      	mov	r3, r0
 8006208:	fb03 f404 	mul.w	r4, r3, r4
 800620c:	f7ff fd1e 	bl	8005c4c <LL_RCC_PLL_GetR>
 8006210:	4603      	mov	r3, r0
 8006212:	0e5b      	lsrs	r3, r3, #25
 8006214:	3301      	adds	r3, #1
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	bd90      	pop	{r4, r7, pc}
 8006224:	08007878 	.word	0x08007878
 8006228:	00f42400 	.word	0x00f42400
 800622c:	007a1200 	.word	0x007a1200

08006230 <LL_USART_IsEnabled>:
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <LL_USART_IsEnabled+0x18>
 8006244:	2301      	movs	r3, #1
 8006246:	e000      	b.n	800624a <LL_USART_IsEnabled+0x1a>
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <LL_USART_SetStopBitsLength>:
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	605a      	str	r2, [r3, #4]
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <LL_USART_SetHWFlowCtrl>:
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	609a      	str	r2, [r3, #8]
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <LL_USART_SetBaudRate>:
{
 80062a2:	b480      	push	{r7}
 80062a4:	b087      	sub	sp, #28
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
 80062ae:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b6:	d11a      	bne.n	80062ee <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	005a      	lsls	r2, r3, #1
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	085b      	lsrs	r3, r3, #1
 80062c0:	441a      	add	r2, r3
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80062d2:	4013      	ands	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	085b      	lsrs	r3, r3, #1
 80062da:	b29b      	uxth	r3, r3
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	60da      	str	r2, [r3, #12]
}
 80062ec:	e00a      	b.n	8006304 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	085a      	lsrs	r2, r3, #1
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	441a      	add	r2, r3
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	60da      	str	r2, [r3, #12]
}
 8006304:	bf00      	nop
 8006306:	371c      	adds	r7, #28
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800631e:	2300      	movs	r3, #0
 8006320:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff ff84 	bl	8006230 <LL_USART_IsEnabled>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d15b      	bne.n	80063e6 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b2f      	ldr	r3, [pc, #188]	; (80063f0 <LL_USART_Init+0xe0>)
 8006334:	4013      	ands	r3, r2
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	6851      	ldr	r1, [r2, #4]
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	68d2      	ldr	r2, [r2, #12]
 800633e:	4311      	orrs	r1, r2
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	6912      	ldr	r2, [r2, #16]
 8006344:	4311      	orrs	r1, r2
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	6992      	ldr	r2, [r2, #24]
 800634a:	430a      	orrs	r2, r1
 800634c:	431a      	orrs	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff ff7c 	bl	8006256 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff ff89 	bl	800627c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a21      	ldr	r2, [pc, #132]	; (80063f4 <LL_USART_Init+0xe4>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d104      	bne.n	800637c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8006372:	2003      	movs	r0, #3
 8006374:	f7ff fc86 	bl	8005c84 <LL_RCC_GetUSARTClockFreq>
 8006378:	60b8      	str	r0, [r7, #8]
 800637a:	e023      	b.n	80063c4 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a1e      	ldr	r2, [pc, #120]	; (80063f8 <LL_USART_Init+0xe8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d104      	bne.n	800638e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8006384:	200c      	movs	r0, #12
 8006386:	f7ff fc7d 	bl	8005c84 <LL_RCC_GetUSARTClockFreq>
 800638a:	60b8      	str	r0, [r7, #8]
 800638c:	e01a      	b.n	80063c4 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a1a      	ldr	r2, [pc, #104]	; (80063fc <LL_USART_Init+0xec>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d104      	bne.n	80063a0 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8006396:	2030      	movs	r0, #48	; 0x30
 8006398:	f7ff fc74 	bl	8005c84 <LL_RCC_GetUSARTClockFreq>
 800639c:	60b8      	str	r0, [r7, #8]
 800639e:	e011      	b.n	80063c4 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a17      	ldr	r2, [pc, #92]	; (8006400 <LL_USART_Init+0xf0>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d104      	bne.n	80063b2 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80063a8:	20c0      	movs	r0, #192	; 0xc0
 80063aa:	f7ff fd4f 	bl	8005e4c <LL_RCC_GetUARTClockFreq>
 80063ae:	60b8      	str	r0, [r7, #8]
 80063b0:	e008      	b.n	80063c4 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a13      	ldr	r2, [pc, #76]	; (8006404 <LL_USART_Init+0xf4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d104      	bne.n	80063c4 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80063ba:	f44f 7040 	mov.w	r0, #768	; 0x300
 80063be:	f7ff fd45 	bl	8005e4c <LL_RCC_GetUARTClockFreq>
 80063c2:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00d      	beq.n	80063e6 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d009      	beq.n	80063e6 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 80063d2:	2300      	movs	r3, #0
 80063d4:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68b9      	ldr	r1, [r7, #8]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff ff5e 	bl	80062a2 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	efff69f3 	.word	0xefff69f3
 80063f4:	40013800 	.word	0x40013800
 80063f8:	40004400 	.word	0x40004400
 80063fc:	40004800 	.word	0x40004800
 8006400:	40004c00 	.word	0x40004c00
 8006404:	40005000 	.word	0x40005000

08006408 <__errno>:
 8006408:	4b01      	ldr	r3, [pc, #4]	; (8006410 <__errno+0x8>)
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	2000005c 	.word	0x2000005c

08006414 <__libc_init_array>:
 8006414:	b570      	push	{r4, r5, r6, lr}
 8006416:	4d0d      	ldr	r5, [pc, #52]	; (800644c <__libc_init_array+0x38>)
 8006418:	4c0d      	ldr	r4, [pc, #52]	; (8006450 <__libc_init_array+0x3c>)
 800641a:	1b64      	subs	r4, r4, r5
 800641c:	10a4      	asrs	r4, r4, #2
 800641e:	2600      	movs	r6, #0
 8006420:	42a6      	cmp	r6, r4
 8006422:	d109      	bne.n	8006438 <__libc_init_array+0x24>
 8006424:	4d0b      	ldr	r5, [pc, #44]	; (8006454 <__libc_init_array+0x40>)
 8006426:	4c0c      	ldr	r4, [pc, #48]	; (8006458 <__libc_init_array+0x44>)
 8006428:	f001 f808 	bl	800743c <_init>
 800642c:	1b64      	subs	r4, r4, r5
 800642e:	10a4      	asrs	r4, r4, #2
 8006430:	2600      	movs	r6, #0
 8006432:	42a6      	cmp	r6, r4
 8006434:	d105      	bne.n	8006442 <__libc_init_array+0x2e>
 8006436:	bd70      	pop	{r4, r5, r6, pc}
 8006438:	f855 3b04 	ldr.w	r3, [r5], #4
 800643c:	4798      	blx	r3
 800643e:	3601      	adds	r6, #1
 8006440:	e7ee      	b.n	8006420 <__libc_init_array+0xc>
 8006442:	f855 3b04 	ldr.w	r3, [r5], #4
 8006446:	4798      	blx	r3
 8006448:	3601      	adds	r6, #1
 800644a:	e7f2      	b.n	8006432 <__libc_init_array+0x1e>
 800644c:	08007a4c 	.word	0x08007a4c
 8006450:	08007a4c 	.word	0x08007a4c
 8006454:	08007a4c 	.word	0x08007a4c
 8006458:	08007a50 	.word	0x08007a50

0800645c <memset>:
 800645c:	4402      	add	r2, r0
 800645e:	4603      	mov	r3, r0
 8006460:	4293      	cmp	r3, r2
 8006462:	d100      	bne.n	8006466 <memset+0xa>
 8006464:	4770      	bx	lr
 8006466:	f803 1b01 	strb.w	r1, [r3], #1
 800646a:	e7f9      	b.n	8006460 <memset+0x4>

0800646c <iprintf>:
 800646c:	b40f      	push	{r0, r1, r2, r3}
 800646e:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <iprintf+0x2c>)
 8006470:	b513      	push	{r0, r1, r4, lr}
 8006472:	681c      	ldr	r4, [r3, #0]
 8006474:	b124      	cbz	r4, 8006480 <iprintf+0x14>
 8006476:	69a3      	ldr	r3, [r4, #24]
 8006478:	b913      	cbnz	r3, 8006480 <iprintf+0x14>
 800647a:	4620      	mov	r0, r4
 800647c:	f000 fa7a 	bl	8006974 <__sinit>
 8006480:	ab05      	add	r3, sp, #20
 8006482:	9a04      	ldr	r2, [sp, #16]
 8006484:	68a1      	ldr	r1, [r4, #8]
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	4620      	mov	r0, r4
 800648a:	f000 fc4b 	bl	8006d24 <_vfiprintf_r>
 800648e:	b002      	add	sp, #8
 8006490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006494:	b004      	add	sp, #16
 8006496:	4770      	bx	lr
 8006498:	2000005c 	.word	0x2000005c

0800649c <_puts_r>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	460e      	mov	r6, r1
 80064a0:	4605      	mov	r5, r0
 80064a2:	b118      	cbz	r0, 80064ac <_puts_r+0x10>
 80064a4:	6983      	ldr	r3, [r0, #24]
 80064a6:	b90b      	cbnz	r3, 80064ac <_puts_r+0x10>
 80064a8:	f000 fa64 	bl	8006974 <__sinit>
 80064ac:	69ab      	ldr	r3, [r5, #24]
 80064ae:	68ac      	ldr	r4, [r5, #8]
 80064b0:	b913      	cbnz	r3, 80064b8 <_puts_r+0x1c>
 80064b2:	4628      	mov	r0, r5
 80064b4:	f000 fa5e 	bl	8006974 <__sinit>
 80064b8:	4b2c      	ldr	r3, [pc, #176]	; (800656c <_puts_r+0xd0>)
 80064ba:	429c      	cmp	r4, r3
 80064bc:	d120      	bne.n	8006500 <_puts_r+0x64>
 80064be:	686c      	ldr	r4, [r5, #4]
 80064c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064c2:	07db      	lsls	r3, r3, #31
 80064c4:	d405      	bmi.n	80064d2 <_puts_r+0x36>
 80064c6:	89a3      	ldrh	r3, [r4, #12]
 80064c8:	0598      	lsls	r0, r3, #22
 80064ca:	d402      	bmi.n	80064d2 <_puts_r+0x36>
 80064cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ce:	f000 faef 	bl	8006ab0 <__retarget_lock_acquire_recursive>
 80064d2:	89a3      	ldrh	r3, [r4, #12]
 80064d4:	0719      	lsls	r1, r3, #28
 80064d6:	d51d      	bpl.n	8006514 <_puts_r+0x78>
 80064d8:	6923      	ldr	r3, [r4, #16]
 80064da:	b1db      	cbz	r3, 8006514 <_puts_r+0x78>
 80064dc:	3e01      	subs	r6, #1
 80064de:	68a3      	ldr	r3, [r4, #8]
 80064e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80064e4:	3b01      	subs	r3, #1
 80064e6:	60a3      	str	r3, [r4, #8]
 80064e8:	bb39      	cbnz	r1, 800653a <_puts_r+0x9e>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	da38      	bge.n	8006560 <_puts_r+0xc4>
 80064ee:	4622      	mov	r2, r4
 80064f0:	210a      	movs	r1, #10
 80064f2:	4628      	mov	r0, r5
 80064f4:	f000 f864 	bl	80065c0 <__swbuf_r>
 80064f8:	3001      	adds	r0, #1
 80064fa:	d011      	beq.n	8006520 <_puts_r+0x84>
 80064fc:	250a      	movs	r5, #10
 80064fe:	e011      	b.n	8006524 <_puts_r+0x88>
 8006500:	4b1b      	ldr	r3, [pc, #108]	; (8006570 <_puts_r+0xd4>)
 8006502:	429c      	cmp	r4, r3
 8006504:	d101      	bne.n	800650a <_puts_r+0x6e>
 8006506:	68ac      	ldr	r4, [r5, #8]
 8006508:	e7da      	b.n	80064c0 <_puts_r+0x24>
 800650a:	4b1a      	ldr	r3, [pc, #104]	; (8006574 <_puts_r+0xd8>)
 800650c:	429c      	cmp	r4, r3
 800650e:	bf08      	it	eq
 8006510:	68ec      	ldreq	r4, [r5, #12]
 8006512:	e7d5      	b.n	80064c0 <_puts_r+0x24>
 8006514:	4621      	mov	r1, r4
 8006516:	4628      	mov	r0, r5
 8006518:	f000 f8a4 	bl	8006664 <__swsetup_r>
 800651c:	2800      	cmp	r0, #0
 800651e:	d0dd      	beq.n	80064dc <_puts_r+0x40>
 8006520:	f04f 35ff 	mov.w	r5, #4294967295
 8006524:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006526:	07da      	lsls	r2, r3, #31
 8006528:	d405      	bmi.n	8006536 <_puts_r+0x9a>
 800652a:	89a3      	ldrh	r3, [r4, #12]
 800652c:	059b      	lsls	r3, r3, #22
 800652e:	d402      	bmi.n	8006536 <_puts_r+0x9a>
 8006530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006532:	f000 fabe 	bl	8006ab2 <__retarget_lock_release_recursive>
 8006536:	4628      	mov	r0, r5
 8006538:	bd70      	pop	{r4, r5, r6, pc}
 800653a:	2b00      	cmp	r3, #0
 800653c:	da04      	bge.n	8006548 <_puts_r+0xac>
 800653e:	69a2      	ldr	r2, [r4, #24]
 8006540:	429a      	cmp	r2, r3
 8006542:	dc06      	bgt.n	8006552 <_puts_r+0xb6>
 8006544:	290a      	cmp	r1, #10
 8006546:	d004      	beq.n	8006552 <_puts_r+0xb6>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	6022      	str	r2, [r4, #0]
 800654e:	7019      	strb	r1, [r3, #0]
 8006550:	e7c5      	b.n	80064de <_puts_r+0x42>
 8006552:	4622      	mov	r2, r4
 8006554:	4628      	mov	r0, r5
 8006556:	f000 f833 	bl	80065c0 <__swbuf_r>
 800655a:	3001      	adds	r0, #1
 800655c:	d1bf      	bne.n	80064de <_puts_r+0x42>
 800655e:	e7df      	b.n	8006520 <_puts_r+0x84>
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	250a      	movs	r5, #10
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	6022      	str	r2, [r4, #0]
 8006568:	701d      	strb	r5, [r3, #0]
 800656a:	e7db      	b.n	8006524 <_puts_r+0x88>
 800656c:	080079d0 	.word	0x080079d0
 8006570:	080079f0 	.word	0x080079f0
 8006574:	080079b0 	.word	0x080079b0

08006578 <puts>:
 8006578:	4b02      	ldr	r3, [pc, #8]	; (8006584 <puts+0xc>)
 800657a:	4601      	mov	r1, r0
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	f7ff bf8d 	b.w	800649c <_puts_r>
 8006582:	bf00      	nop
 8006584:	2000005c 	.word	0x2000005c

08006588 <strcasecmp>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4d0c      	ldr	r5, [pc, #48]	; (80065bc <strcasecmp+0x34>)
 800658c:	4604      	mov	r4, r0
 800658e:	462e      	mov	r6, r5
 8006590:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006594:	5d5a      	ldrb	r2, [r3, r5]
 8006596:	f002 0203 	and.w	r2, r2, #3
 800659a:	2a01      	cmp	r2, #1
 800659c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065a0:	5cb0      	ldrb	r0, [r6, r2]
 80065a2:	f000 0003 	and.w	r0, r0, #3
 80065a6:	bf08      	it	eq
 80065a8:	3320      	addeq	r3, #32
 80065aa:	2801      	cmp	r0, #1
 80065ac:	bf08      	it	eq
 80065ae:	3220      	addeq	r2, #32
 80065b0:	1a98      	subs	r0, r3, r2
 80065b2:	d101      	bne.n	80065b8 <strcasecmp+0x30>
 80065b4:	2a00      	cmp	r2, #0
 80065b6:	d1eb      	bne.n	8006590 <strcasecmp+0x8>
 80065b8:	bd70      	pop	{r4, r5, r6, pc}
 80065ba:	bf00      	nop
 80065bc:	080078a9 	.word	0x080078a9

080065c0 <__swbuf_r>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	460e      	mov	r6, r1
 80065c4:	4614      	mov	r4, r2
 80065c6:	4605      	mov	r5, r0
 80065c8:	b118      	cbz	r0, 80065d2 <__swbuf_r+0x12>
 80065ca:	6983      	ldr	r3, [r0, #24]
 80065cc:	b90b      	cbnz	r3, 80065d2 <__swbuf_r+0x12>
 80065ce:	f000 f9d1 	bl	8006974 <__sinit>
 80065d2:	4b21      	ldr	r3, [pc, #132]	; (8006658 <__swbuf_r+0x98>)
 80065d4:	429c      	cmp	r4, r3
 80065d6:	d12b      	bne.n	8006630 <__swbuf_r+0x70>
 80065d8:	686c      	ldr	r4, [r5, #4]
 80065da:	69a3      	ldr	r3, [r4, #24]
 80065dc:	60a3      	str	r3, [r4, #8]
 80065de:	89a3      	ldrh	r3, [r4, #12]
 80065e0:	071a      	lsls	r2, r3, #28
 80065e2:	d52f      	bpl.n	8006644 <__swbuf_r+0x84>
 80065e4:	6923      	ldr	r3, [r4, #16]
 80065e6:	b36b      	cbz	r3, 8006644 <__swbuf_r+0x84>
 80065e8:	6923      	ldr	r3, [r4, #16]
 80065ea:	6820      	ldr	r0, [r4, #0]
 80065ec:	1ac0      	subs	r0, r0, r3
 80065ee:	6963      	ldr	r3, [r4, #20]
 80065f0:	b2f6      	uxtb	r6, r6
 80065f2:	4283      	cmp	r3, r0
 80065f4:	4637      	mov	r7, r6
 80065f6:	dc04      	bgt.n	8006602 <__swbuf_r+0x42>
 80065f8:	4621      	mov	r1, r4
 80065fa:	4628      	mov	r0, r5
 80065fc:	f000 f926 	bl	800684c <_fflush_r>
 8006600:	bb30      	cbnz	r0, 8006650 <__swbuf_r+0x90>
 8006602:	68a3      	ldr	r3, [r4, #8]
 8006604:	3b01      	subs	r3, #1
 8006606:	60a3      	str	r3, [r4, #8]
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	6022      	str	r2, [r4, #0]
 800660e:	701e      	strb	r6, [r3, #0]
 8006610:	6963      	ldr	r3, [r4, #20]
 8006612:	3001      	adds	r0, #1
 8006614:	4283      	cmp	r3, r0
 8006616:	d004      	beq.n	8006622 <__swbuf_r+0x62>
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	07db      	lsls	r3, r3, #31
 800661c:	d506      	bpl.n	800662c <__swbuf_r+0x6c>
 800661e:	2e0a      	cmp	r6, #10
 8006620:	d104      	bne.n	800662c <__swbuf_r+0x6c>
 8006622:	4621      	mov	r1, r4
 8006624:	4628      	mov	r0, r5
 8006626:	f000 f911 	bl	800684c <_fflush_r>
 800662a:	b988      	cbnz	r0, 8006650 <__swbuf_r+0x90>
 800662c:	4638      	mov	r0, r7
 800662e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006630:	4b0a      	ldr	r3, [pc, #40]	; (800665c <__swbuf_r+0x9c>)
 8006632:	429c      	cmp	r4, r3
 8006634:	d101      	bne.n	800663a <__swbuf_r+0x7a>
 8006636:	68ac      	ldr	r4, [r5, #8]
 8006638:	e7cf      	b.n	80065da <__swbuf_r+0x1a>
 800663a:	4b09      	ldr	r3, [pc, #36]	; (8006660 <__swbuf_r+0xa0>)
 800663c:	429c      	cmp	r4, r3
 800663e:	bf08      	it	eq
 8006640:	68ec      	ldreq	r4, [r5, #12]
 8006642:	e7ca      	b.n	80065da <__swbuf_r+0x1a>
 8006644:	4621      	mov	r1, r4
 8006646:	4628      	mov	r0, r5
 8006648:	f000 f80c 	bl	8006664 <__swsetup_r>
 800664c:	2800      	cmp	r0, #0
 800664e:	d0cb      	beq.n	80065e8 <__swbuf_r+0x28>
 8006650:	f04f 37ff 	mov.w	r7, #4294967295
 8006654:	e7ea      	b.n	800662c <__swbuf_r+0x6c>
 8006656:	bf00      	nop
 8006658:	080079d0 	.word	0x080079d0
 800665c:	080079f0 	.word	0x080079f0
 8006660:	080079b0 	.word	0x080079b0

08006664 <__swsetup_r>:
 8006664:	4b32      	ldr	r3, [pc, #200]	; (8006730 <__swsetup_r+0xcc>)
 8006666:	b570      	push	{r4, r5, r6, lr}
 8006668:	681d      	ldr	r5, [r3, #0]
 800666a:	4606      	mov	r6, r0
 800666c:	460c      	mov	r4, r1
 800666e:	b125      	cbz	r5, 800667a <__swsetup_r+0x16>
 8006670:	69ab      	ldr	r3, [r5, #24]
 8006672:	b913      	cbnz	r3, 800667a <__swsetup_r+0x16>
 8006674:	4628      	mov	r0, r5
 8006676:	f000 f97d 	bl	8006974 <__sinit>
 800667a:	4b2e      	ldr	r3, [pc, #184]	; (8006734 <__swsetup_r+0xd0>)
 800667c:	429c      	cmp	r4, r3
 800667e:	d10f      	bne.n	80066a0 <__swsetup_r+0x3c>
 8006680:	686c      	ldr	r4, [r5, #4]
 8006682:	89a3      	ldrh	r3, [r4, #12]
 8006684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006688:	0719      	lsls	r1, r3, #28
 800668a:	d42c      	bmi.n	80066e6 <__swsetup_r+0x82>
 800668c:	06dd      	lsls	r5, r3, #27
 800668e:	d411      	bmi.n	80066b4 <__swsetup_r+0x50>
 8006690:	2309      	movs	r3, #9
 8006692:	6033      	str	r3, [r6, #0]
 8006694:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006698:	81a3      	strh	r3, [r4, #12]
 800669a:	f04f 30ff 	mov.w	r0, #4294967295
 800669e:	e03e      	b.n	800671e <__swsetup_r+0xba>
 80066a0:	4b25      	ldr	r3, [pc, #148]	; (8006738 <__swsetup_r+0xd4>)
 80066a2:	429c      	cmp	r4, r3
 80066a4:	d101      	bne.n	80066aa <__swsetup_r+0x46>
 80066a6:	68ac      	ldr	r4, [r5, #8]
 80066a8:	e7eb      	b.n	8006682 <__swsetup_r+0x1e>
 80066aa:	4b24      	ldr	r3, [pc, #144]	; (800673c <__swsetup_r+0xd8>)
 80066ac:	429c      	cmp	r4, r3
 80066ae:	bf08      	it	eq
 80066b0:	68ec      	ldreq	r4, [r5, #12]
 80066b2:	e7e6      	b.n	8006682 <__swsetup_r+0x1e>
 80066b4:	0758      	lsls	r0, r3, #29
 80066b6:	d512      	bpl.n	80066de <__swsetup_r+0x7a>
 80066b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066ba:	b141      	cbz	r1, 80066ce <__swsetup_r+0x6a>
 80066bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066c0:	4299      	cmp	r1, r3
 80066c2:	d002      	beq.n	80066ca <__swsetup_r+0x66>
 80066c4:	4630      	mov	r0, r6
 80066c6:	f000 fa59 	bl	8006b7c <_free_r>
 80066ca:	2300      	movs	r3, #0
 80066cc:	6363      	str	r3, [r4, #52]	; 0x34
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066d4:	81a3      	strh	r3, [r4, #12]
 80066d6:	2300      	movs	r3, #0
 80066d8:	6063      	str	r3, [r4, #4]
 80066da:	6923      	ldr	r3, [r4, #16]
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	89a3      	ldrh	r3, [r4, #12]
 80066e0:	f043 0308 	orr.w	r3, r3, #8
 80066e4:	81a3      	strh	r3, [r4, #12]
 80066e6:	6923      	ldr	r3, [r4, #16]
 80066e8:	b94b      	cbnz	r3, 80066fe <__swsetup_r+0x9a>
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066f4:	d003      	beq.n	80066fe <__swsetup_r+0x9a>
 80066f6:	4621      	mov	r1, r4
 80066f8:	4630      	mov	r0, r6
 80066fa:	f000 f9ff 	bl	8006afc <__smakebuf_r>
 80066fe:	89a0      	ldrh	r0, [r4, #12]
 8006700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006704:	f010 0301 	ands.w	r3, r0, #1
 8006708:	d00a      	beq.n	8006720 <__swsetup_r+0xbc>
 800670a:	2300      	movs	r3, #0
 800670c:	60a3      	str	r3, [r4, #8]
 800670e:	6963      	ldr	r3, [r4, #20]
 8006710:	425b      	negs	r3, r3
 8006712:	61a3      	str	r3, [r4, #24]
 8006714:	6923      	ldr	r3, [r4, #16]
 8006716:	b943      	cbnz	r3, 800672a <__swsetup_r+0xc6>
 8006718:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800671c:	d1ba      	bne.n	8006694 <__swsetup_r+0x30>
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	0781      	lsls	r1, r0, #30
 8006722:	bf58      	it	pl
 8006724:	6963      	ldrpl	r3, [r4, #20]
 8006726:	60a3      	str	r3, [r4, #8]
 8006728:	e7f4      	b.n	8006714 <__swsetup_r+0xb0>
 800672a:	2000      	movs	r0, #0
 800672c:	e7f7      	b.n	800671e <__swsetup_r+0xba>
 800672e:	bf00      	nop
 8006730:	2000005c 	.word	0x2000005c
 8006734:	080079d0 	.word	0x080079d0
 8006738:	080079f0 	.word	0x080079f0
 800673c:	080079b0 	.word	0x080079b0

08006740 <__sflush_r>:
 8006740:	898a      	ldrh	r2, [r1, #12]
 8006742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006746:	4605      	mov	r5, r0
 8006748:	0710      	lsls	r0, r2, #28
 800674a:	460c      	mov	r4, r1
 800674c:	d458      	bmi.n	8006800 <__sflush_r+0xc0>
 800674e:	684b      	ldr	r3, [r1, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	dc05      	bgt.n	8006760 <__sflush_r+0x20>
 8006754:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006756:	2b00      	cmp	r3, #0
 8006758:	dc02      	bgt.n	8006760 <__sflush_r+0x20>
 800675a:	2000      	movs	r0, #0
 800675c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006762:	2e00      	cmp	r6, #0
 8006764:	d0f9      	beq.n	800675a <__sflush_r+0x1a>
 8006766:	2300      	movs	r3, #0
 8006768:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800676c:	682f      	ldr	r7, [r5, #0]
 800676e:	602b      	str	r3, [r5, #0]
 8006770:	d032      	beq.n	80067d8 <__sflush_r+0x98>
 8006772:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	075a      	lsls	r2, r3, #29
 8006778:	d505      	bpl.n	8006786 <__sflush_r+0x46>
 800677a:	6863      	ldr	r3, [r4, #4]
 800677c:	1ac0      	subs	r0, r0, r3
 800677e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006780:	b10b      	cbz	r3, 8006786 <__sflush_r+0x46>
 8006782:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006784:	1ac0      	subs	r0, r0, r3
 8006786:	2300      	movs	r3, #0
 8006788:	4602      	mov	r2, r0
 800678a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800678c:	6a21      	ldr	r1, [r4, #32]
 800678e:	4628      	mov	r0, r5
 8006790:	47b0      	blx	r6
 8006792:	1c43      	adds	r3, r0, #1
 8006794:	89a3      	ldrh	r3, [r4, #12]
 8006796:	d106      	bne.n	80067a6 <__sflush_r+0x66>
 8006798:	6829      	ldr	r1, [r5, #0]
 800679a:	291d      	cmp	r1, #29
 800679c:	d82c      	bhi.n	80067f8 <__sflush_r+0xb8>
 800679e:	4a2a      	ldr	r2, [pc, #168]	; (8006848 <__sflush_r+0x108>)
 80067a0:	40ca      	lsrs	r2, r1
 80067a2:	07d6      	lsls	r6, r2, #31
 80067a4:	d528      	bpl.n	80067f8 <__sflush_r+0xb8>
 80067a6:	2200      	movs	r2, #0
 80067a8:	6062      	str	r2, [r4, #4]
 80067aa:	04d9      	lsls	r1, r3, #19
 80067ac:	6922      	ldr	r2, [r4, #16]
 80067ae:	6022      	str	r2, [r4, #0]
 80067b0:	d504      	bpl.n	80067bc <__sflush_r+0x7c>
 80067b2:	1c42      	adds	r2, r0, #1
 80067b4:	d101      	bne.n	80067ba <__sflush_r+0x7a>
 80067b6:	682b      	ldr	r3, [r5, #0]
 80067b8:	b903      	cbnz	r3, 80067bc <__sflush_r+0x7c>
 80067ba:	6560      	str	r0, [r4, #84]	; 0x54
 80067bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067be:	602f      	str	r7, [r5, #0]
 80067c0:	2900      	cmp	r1, #0
 80067c2:	d0ca      	beq.n	800675a <__sflush_r+0x1a>
 80067c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067c8:	4299      	cmp	r1, r3
 80067ca:	d002      	beq.n	80067d2 <__sflush_r+0x92>
 80067cc:	4628      	mov	r0, r5
 80067ce:	f000 f9d5 	bl	8006b7c <_free_r>
 80067d2:	2000      	movs	r0, #0
 80067d4:	6360      	str	r0, [r4, #52]	; 0x34
 80067d6:	e7c1      	b.n	800675c <__sflush_r+0x1c>
 80067d8:	6a21      	ldr	r1, [r4, #32]
 80067da:	2301      	movs	r3, #1
 80067dc:	4628      	mov	r0, r5
 80067de:	47b0      	blx	r6
 80067e0:	1c41      	adds	r1, r0, #1
 80067e2:	d1c7      	bne.n	8006774 <__sflush_r+0x34>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0c4      	beq.n	8006774 <__sflush_r+0x34>
 80067ea:	2b1d      	cmp	r3, #29
 80067ec:	d001      	beq.n	80067f2 <__sflush_r+0xb2>
 80067ee:	2b16      	cmp	r3, #22
 80067f0:	d101      	bne.n	80067f6 <__sflush_r+0xb6>
 80067f2:	602f      	str	r7, [r5, #0]
 80067f4:	e7b1      	b.n	800675a <__sflush_r+0x1a>
 80067f6:	89a3      	ldrh	r3, [r4, #12]
 80067f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067fc:	81a3      	strh	r3, [r4, #12]
 80067fe:	e7ad      	b.n	800675c <__sflush_r+0x1c>
 8006800:	690f      	ldr	r7, [r1, #16]
 8006802:	2f00      	cmp	r7, #0
 8006804:	d0a9      	beq.n	800675a <__sflush_r+0x1a>
 8006806:	0793      	lsls	r3, r2, #30
 8006808:	680e      	ldr	r6, [r1, #0]
 800680a:	bf08      	it	eq
 800680c:	694b      	ldreq	r3, [r1, #20]
 800680e:	600f      	str	r7, [r1, #0]
 8006810:	bf18      	it	ne
 8006812:	2300      	movne	r3, #0
 8006814:	eba6 0807 	sub.w	r8, r6, r7
 8006818:	608b      	str	r3, [r1, #8]
 800681a:	f1b8 0f00 	cmp.w	r8, #0
 800681e:	dd9c      	ble.n	800675a <__sflush_r+0x1a>
 8006820:	6a21      	ldr	r1, [r4, #32]
 8006822:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006824:	4643      	mov	r3, r8
 8006826:	463a      	mov	r2, r7
 8006828:	4628      	mov	r0, r5
 800682a:	47b0      	blx	r6
 800682c:	2800      	cmp	r0, #0
 800682e:	dc06      	bgt.n	800683e <__sflush_r+0xfe>
 8006830:	89a3      	ldrh	r3, [r4, #12]
 8006832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006836:	81a3      	strh	r3, [r4, #12]
 8006838:	f04f 30ff 	mov.w	r0, #4294967295
 800683c:	e78e      	b.n	800675c <__sflush_r+0x1c>
 800683e:	4407      	add	r7, r0
 8006840:	eba8 0800 	sub.w	r8, r8, r0
 8006844:	e7e9      	b.n	800681a <__sflush_r+0xda>
 8006846:	bf00      	nop
 8006848:	20400001 	.word	0x20400001

0800684c <_fflush_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	690b      	ldr	r3, [r1, #16]
 8006850:	4605      	mov	r5, r0
 8006852:	460c      	mov	r4, r1
 8006854:	b913      	cbnz	r3, 800685c <_fflush_r+0x10>
 8006856:	2500      	movs	r5, #0
 8006858:	4628      	mov	r0, r5
 800685a:	bd38      	pop	{r3, r4, r5, pc}
 800685c:	b118      	cbz	r0, 8006866 <_fflush_r+0x1a>
 800685e:	6983      	ldr	r3, [r0, #24]
 8006860:	b90b      	cbnz	r3, 8006866 <_fflush_r+0x1a>
 8006862:	f000 f887 	bl	8006974 <__sinit>
 8006866:	4b14      	ldr	r3, [pc, #80]	; (80068b8 <_fflush_r+0x6c>)
 8006868:	429c      	cmp	r4, r3
 800686a:	d11b      	bne.n	80068a4 <_fflush_r+0x58>
 800686c:	686c      	ldr	r4, [r5, #4]
 800686e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0ef      	beq.n	8006856 <_fflush_r+0xa>
 8006876:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006878:	07d0      	lsls	r0, r2, #31
 800687a:	d404      	bmi.n	8006886 <_fflush_r+0x3a>
 800687c:	0599      	lsls	r1, r3, #22
 800687e:	d402      	bmi.n	8006886 <_fflush_r+0x3a>
 8006880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006882:	f000 f915 	bl	8006ab0 <__retarget_lock_acquire_recursive>
 8006886:	4628      	mov	r0, r5
 8006888:	4621      	mov	r1, r4
 800688a:	f7ff ff59 	bl	8006740 <__sflush_r>
 800688e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006890:	07da      	lsls	r2, r3, #31
 8006892:	4605      	mov	r5, r0
 8006894:	d4e0      	bmi.n	8006858 <_fflush_r+0xc>
 8006896:	89a3      	ldrh	r3, [r4, #12]
 8006898:	059b      	lsls	r3, r3, #22
 800689a:	d4dd      	bmi.n	8006858 <_fflush_r+0xc>
 800689c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800689e:	f000 f908 	bl	8006ab2 <__retarget_lock_release_recursive>
 80068a2:	e7d9      	b.n	8006858 <_fflush_r+0xc>
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <_fflush_r+0x70>)
 80068a6:	429c      	cmp	r4, r3
 80068a8:	d101      	bne.n	80068ae <_fflush_r+0x62>
 80068aa:	68ac      	ldr	r4, [r5, #8]
 80068ac:	e7df      	b.n	800686e <_fflush_r+0x22>
 80068ae:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <_fflush_r+0x74>)
 80068b0:	429c      	cmp	r4, r3
 80068b2:	bf08      	it	eq
 80068b4:	68ec      	ldreq	r4, [r5, #12]
 80068b6:	e7da      	b.n	800686e <_fflush_r+0x22>
 80068b8:	080079d0 	.word	0x080079d0
 80068bc:	080079f0 	.word	0x080079f0
 80068c0:	080079b0 	.word	0x080079b0

080068c4 <std>:
 80068c4:	2300      	movs	r3, #0
 80068c6:	b510      	push	{r4, lr}
 80068c8:	4604      	mov	r4, r0
 80068ca:	e9c0 3300 	strd	r3, r3, [r0]
 80068ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068d2:	6083      	str	r3, [r0, #8]
 80068d4:	8181      	strh	r1, [r0, #12]
 80068d6:	6643      	str	r3, [r0, #100]	; 0x64
 80068d8:	81c2      	strh	r2, [r0, #14]
 80068da:	6183      	str	r3, [r0, #24]
 80068dc:	4619      	mov	r1, r3
 80068de:	2208      	movs	r2, #8
 80068e0:	305c      	adds	r0, #92	; 0x5c
 80068e2:	f7ff fdbb 	bl	800645c <memset>
 80068e6:	4b05      	ldr	r3, [pc, #20]	; (80068fc <std+0x38>)
 80068e8:	6263      	str	r3, [r4, #36]	; 0x24
 80068ea:	4b05      	ldr	r3, [pc, #20]	; (8006900 <std+0x3c>)
 80068ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80068ee:	4b05      	ldr	r3, [pc, #20]	; (8006904 <std+0x40>)
 80068f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068f2:	4b05      	ldr	r3, [pc, #20]	; (8006908 <std+0x44>)
 80068f4:	6224      	str	r4, [r4, #32]
 80068f6:	6323      	str	r3, [r4, #48]	; 0x30
 80068f8:	bd10      	pop	{r4, pc}
 80068fa:	bf00      	nop
 80068fc:	080072cd 	.word	0x080072cd
 8006900:	080072ef 	.word	0x080072ef
 8006904:	08007327 	.word	0x08007327
 8006908:	0800734b 	.word	0x0800734b

0800690c <_cleanup_r>:
 800690c:	4901      	ldr	r1, [pc, #4]	; (8006914 <_cleanup_r+0x8>)
 800690e:	f000 b8af 	b.w	8006a70 <_fwalk_reent>
 8006912:	bf00      	nop
 8006914:	0800684d 	.word	0x0800684d

08006918 <__sfmoreglue>:
 8006918:	b570      	push	{r4, r5, r6, lr}
 800691a:	1e4a      	subs	r2, r1, #1
 800691c:	2568      	movs	r5, #104	; 0x68
 800691e:	4355      	muls	r5, r2
 8006920:	460e      	mov	r6, r1
 8006922:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006926:	f000 f979 	bl	8006c1c <_malloc_r>
 800692a:	4604      	mov	r4, r0
 800692c:	b140      	cbz	r0, 8006940 <__sfmoreglue+0x28>
 800692e:	2100      	movs	r1, #0
 8006930:	e9c0 1600 	strd	r1, r6, [r0]
 8006934:	300c      	adds	r0, #12
 8006936:	60a0      	str	r0, [r4, #8]
 8006938:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800693c:	f7ff fd8e 	bl	800645c <memset>
 8006940:	4620      	mov	r0, r4
 8006942:	bd70      	pop	{r4, r5, r6, pc}

08006944 <__sfp_lock_acquire>:
 8006944:	4801      	ldr	r0, [pc, #4]	; (800694c <__sfp_lock_acquire+0x8>)
 8006946:	f000 b8b3 	b.w	8006ab0 <__retarget_lock_acquire_recursive>
 800694a:	bf00      	nop
 800694c:	200001d0 	.word	0x200001d0

08006950 <__sfp_lock_release>:
 8006950:	4801      	ldr	r0, [pc, #4]	; (8006958 <__sfp_lock_release+0x8>)
 8006952:	f000 b8ae 	b.w	8006ab2 <__retarget_lock_release_recursive>
 8006956:	bf00      	nop
 8006958:	200001d0 	.word	0x200001d0

0800695c <__sinit_lock_acquire>:
 800695c:	4801      	ldr	r0, [pc, #4]	; (8006964 <__sinit_lock_acquire+0x8>)
 800695e:	f000 b8a7 	b.w	8006ab0 <__retarget_lock_acquire_recursive>
 8006962:	bf00      	nop
 8006964:	200001cb 	.word	0x200001cb

08006968 <__sinit_lock_release>:
 8006968:	4801      	ldr	r0, [pc, #4]	; (8006970 <__sinit_lock_release+0x8>)
 800696a:	f000 b8a2 	b.w	8006ab2 <__retarget_lock_release_recursive>
 800696e:	bf00      	nop
 8006970:	200001cb 	.word	0x200001cb

08006974 <__sinit>:
 8006974:	b510      	push	{r4, lr}
 8006976:	4604      	mov	r4, r0
 8006978:	f7ff fff0 	bl	800695c <__sinit_lock_acquire>
 800697c:	69a3      	ldr	r3, [r4, #24]
 800697e:	b11b      	cbz	r3, 8006988 <__sinit+0x14>
 8006980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006984:	f7ff bff0 	b.w	8006968 <__sinit_lock_release>
 8006988:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800698c:	6523      	str	r3, [r4, #80]	; 0x50
 800698e:	4b13      	ldr	r3, [pc, #76]	; (80069dc <__sinit+0x68>)
 8006990:	4a13      	ldr	r2, [pc, #76]	; (80069e0 <__sinit+0x6c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	62a2      	str	r2, [r4, #40]	; 0x28
 8006996:	42a3      	cmp	r3, r4
 8006998:	bf04      	itt	eq
 800699a:	2301      	moveq	r3, #1
 800699c:	61a3      	streq	r3, [r4, #24]
 800699e:	4620      	mov	r0, r4
 80069a0:	f000 f820 	bl	80069e4 <__sfp>
 80069a4:	6060      	str	r0, [r4, #4]
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 f81c 	bl	80069e4 <__sfp>
 80069ac:	60a0      	str	r0, [r4, #8]
 80069ae:	4620      	mov	r0, r4
 80069b0:	f000 f818 	bl	80069e4 <__sfp>
 80069b4:	2200      	movs	r2, #0
 80069b6:	60e0      	str	r0, [r4, #12]
 80069b8:	2104      	movs	r1, #4
 80069ba:	6860      	ldr	r0, [r4, #4]
 80069bc:	f7ff ff82 	bl	80068c4 <std>
 80069c0:	68a0      	ldr	r0, [r4, #8]
 80069c2:	2201      	movs	r2, #1
 80069c4:	2109      	movs	r1, #9
 80069c6:	f7ff ff7d 	bl	80068c4 <std>
 80069ca:	68e0      	ldr	r0, [r4, #12]
 80069cc:	2202      	movs	r2, #2
 80069ce:	2112      	movs	r1, #18
 80069d0:	f7ff ff78 	bl	80068c4 <std>
 80069d4:	2301      	movs	r3, #1
 80069d6:	61a3      	str	r3, [r4, #24]
 80069d8:	e7d2      	b.n	8006980 <__sinit+0xc>
 80069da:	bf00      	nop
 80069dc:	080079ac 	.word	0x080079ac
 80069e0:	0800690d 	.word	0x0800690d

080069e4 <__sfp>:
 80069e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e6:	4607      	mov	r7, r0
 80069e8:	f7ff ffac 	bl	8006944 <__sfp_lock_acquire>
 80069ec:	4b1e      	ldr	r3, [pc, #120]	; (8006a68 <__sfp+0x84>)
 80069ee:	681e      	ldr	r6, [r3, #0]
 80069f0:	69b3      	ldr	r3, [r6, #24]
 80069f2:	b913      	cbnz	r3, 80069fa <__sfp+0x16>
 80069f4:	4630      	mov	r0, r6
 80069f6:	f7ff ffbd 	bl	8006974 <__sinit>
 80069fa:	3648      	adds	r6, #72	; 0x48
 80069fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	d503      	bpl.n	8006a0c <__sfp+0x28>
 8006a04:	6833      	ldr	r3, [r6, #0]
 8006a06:	b30b      	cbz	r3, 8006a4c <__sfp+0x68>
 8006a08:	6836      	ldr	r6, [r6, #0]
 8006a0a:	e7f7      	b.n	80069fc <__sfp+0x18>
 8006a0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a10:	b9d5      	cbnz	r5, 8006a48 <__sfp+0x64>
 8006a12:	4b16      	ldr	r3, [pc, #88]	; (8006a6c <__sfp+0x88>)
 8006a14:	60e3      	str	r3, [r4, #12]
 8006a16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a1a:	6665      	str	r5, [r4, #100]	; 0x64
 8006a1c:	f000 f847 	bl	8006aae <__retarget_lock_init_recursive>
 8006a20:	f7ff ff96 	bl	8006950 <__sfp_lock_release>
 8006a24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a2c:	6025      	str	r5, [r4, #0]
 8006a2e:	61a5      	str	r5, [r4, #24]
 8006a30:	2208      	movs	r2, #8
 8006a32:	4629      	mov	r1, r5
 8006a34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a38:	f7ff fd10 	bl	800645c <memset>
 8006a3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a44:	4620      	mov	r0, r4
 8006a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a48:	3468      	adds	r4, #104	; 0x68
 8006a4a:	e7d9      	b.n	8006a00 <__sfp+0x1c>
 8006a4c:	2104      	movs	r1, #4
 8006a4e:	4638      	mov	r0, r7
 8006a50:	f7ff ff62 	bl	8006918 <__sfmoreglue>
 8006a54:	4604      	mov	r4, r0
 8006a56:	6030      	str	r0, [r6, #0]
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	d1d5      	bne.n	8006a08 <__sfp+0x24>
 8006a5c:	f7ff ff78 	bl	8006950 <__sfp_lock_release>
 8006a60:	230c      	movs	r3, #12
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	e7ee      	b.n	8006a44 <__sfp+0x60>
 8006a66:	bf00      	nop
 8006a68:	080079ac 	.word	0x080079ac
 8006a6c:	ffff0001 	.word	0xffff0001

08006a70 <_fwalk_reent>:
 8006a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a74:	4606      	mov	r6, r0
 8006a76:	4688      	mov	r8, r1
 8006a78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a7c:	2700      	movs	r7, #0
 8006a7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a82:	f1b9 0901 	subs.w	r9, r9, #1
 8006a86:	d505      	bpl.n	8006a94 <_fwalk_reent+0x24>
 8006a88:	6824      	ldr	r4, [r4, #0]
 8006a8a:	2c00      	cmp	r4, #0
 8006a8c:	d1f7      	bne.n	8006a7e <_fwalk_reent+0xe>
 8006a8e:	4638      	mov	r0, r7
 8006a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a94:	89ab      	ldrh	r3, [r5, #12]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d907      	bls.n	8006aaa <_fwalk_reent+0x3a>
 8006a9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	d003      	beq.n	8006aaa <_fwalk_reent+0x3a>
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	47c0      	blx	r8
 8006aa8:	4307      	orrs	r7, r0
 8006aaa:	3568      	adds	r5, #104	; 0x68
 8006aac:	e7e9      	b.n	8006a82 <_fwalk_reent+0x12>

08006aae <__retarget_lock_init_recursive>:
 8006aae:	4770      	bx	lr

08006ab0 <__retarget_lock_acquire_recursive>:
 8006ab0:	4770      	bx	lr

08006ab2 <__retarget_lock_release_recursive>:
 8006ab2:	4770      	bx	lr

08006ab4 <__swhatbuf_r>:
 8006ab4:	b570      	push	{r4, r5, r6, lr}
 8006ab6:	460e      	mov	r6, r1
 8006ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006abc:	2900      	cmp	r1, #0
 8006abe:	b096      	sub	sp, #88	; 0x58
 8006ac0:	4614      	mov	r4, r2
 8006ac2:	461d      	mov	r5, r3
 8006ac4:	da07      	bge.n	8006ad6 <__swhatbuf_r+0x22>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	602b      	str	r3, [r5, #0]
 8006aca:	89b3      	ldrh	r3, [r6, #12]
 8006acc:	061a      	lsls	r2, r3, #24
 8006ace:	d410      	bmi.n	8006af2 <__swhatbuf_r+0x3e>
 8006ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ad4:	e00e      	b.n	8006af4 <__swhatbuf_r+0x40>
 8006ad6:	466a      	mov	r2, sp
 8006ad8:	f000 fc5e 	bl	8007398 <_fstat_r>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	dbf2      	blt.n	8006ac6 <__swhatbuf_r+0x12>
 8006ae0:	9a01      	ldr	r2, [sp, #4]
 8006ae2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ae6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006aea:	425a      	negs	r2, r3
 8006aec:	415a      	adcs	r2, r3
 8006aee:	602a      	str	r2, [r5, #0]
 8006af0:	e7ee      	b.n	8006ad0 <__swhatbuf_r+0x1c>
 8006af2:	2340      	movs	r3, #64	; 0x40
 8006af4:	2000      	movs	r0, #0
 8006af6:	6023      	str	r3, [r4, #0]
 8006af8:	b016      	add	sp, #88	; 0x58
 8006afa:	bd70      	pop	{r4, r5, r6, pc}

08006afc <__smakebuf_r>:
 8006afc:	898b      	ldrh	r3, [r1, #12]
 8006afe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b00:	079d      	lsls	r5, r3, #30
 8006b02:	4606      	mov	r6, r0
 8006b04:	460c      	mov	r4, r1
 8006b06:	d507      	bpl.n	8006b18 <__smakebuf_r+0x1c>
 8006b08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b0c:	6023      	str	r3, [r4, #0]
 8006b0e:	6123      	str	r3, [r4, #16]
 8006b10:	2301      	movs	r3, #1
 8006b12:	6163      	str	r3, [r4, #20]
 8006b14:	b002      	add	sp, #8
 8006b16:	bd70      	pop	{r4, r5, r6, pc}
 8006b18:	ab01      	add	r3, sp, #4
 8006b1a:	466a      	mov	r2, sp
 8006b1c:	f7ff ffca 	bl	8006ab4 <__swhatbuf_r>
 8006b20:	9900      	ldr	r1, [sp, #0]
 8006b22:	4605      	mov	r5, r0
 8006b24:	4630      	mov	r0, r6
 8006b26:	f000 f879 	bl	8006c1c <_malloc_r>
 8006b2a:	b948      	cbnz	r0, 8006b40 <__smakebuf_r+0x44>
 8006b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b30:	059a      	lsls	r2, r3, #22
 8006b32:	d4ef      	bmi.n	8006b14 <__smakebuf_r+0x18>
 8006b34:	f023 0303 	bic.w	r3, r3, #3
 8006b38:	f043 0302 	orr.w	r3, r3, #2
 8006b3c:	81a3      	strh	r3, [r4, #12]
 8006b3e:	e7e3      	b.n	8006b08 <__smakebuf_r+0xc>
 8006b40:	4b0d      	ldr	r3, [pc, #52]	; (8006b78 <__smakebuf_r+0x7c>)
 8006b42:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	6020      	str	r0, [r4, #0]
 8006b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4c:	81a3      	strh	r3, [r4, #12]
 8006b4e:	9b00      	ldr	r3, [sp, #0]
 8006b50:	6163      	str	r3, [r4, #20]
 8006b52:	9b01      	ldr	r3, [sp, #4]
 8006b54:	6120      	str	r0, [r4, #16]
 8006b56:	b15b      	cbz	r3, 8006b70 <__smakebuf_r+0x74>
 8006b58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	f000 fc2d 	bl	80073bc <_isatty_r>
 8006b62:	b128      	cbz	r0, 8006b70 <__smakebuf_r+0x74>
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	f023 0303 	bic.w	r3, r3, #3
 8006b6a:	f043 0301 	orr.w	r3, r3, #1
 8006b6e:	81a3      	strh	r3, [r4, #12]
 8006b70:	89a0      	ldrh	r0, [r4, #12]
 8006b72:	4305      	orrs	r5, r0
 8006b74:	81a5      	strh	r5, [r4, #12]
 8006b76:	e7cd      	b.n	8006b14 <__smakebuf_r+0x18>
 8006b78:	0800690d 	.word	0x0800690d

08006b7c <_free_r>:
 8006b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b7e:	2900      	cmp	r1, #0
 8006b80:	d048      	beq.n	8006c14 <_free_r+0x98>
 8006b82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b86:	9001      	str	r0, [sp, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b8e:	bfb8      	it	lt
 8006b90:	18e4      	addlt	r4, r4, r3
 8006b92:	f000 fc35 	bl	8007400 <__malloc_lock>
 8006b96:	4a20      	ldr	r2, [pc, #128]	; (8006c18 <_free_r+0x9c>)
 8006b98:	9801      	ldr	r0, [sp, #4]
 8006b9a:	6813      	ldr	r3, [r2, #0]
 8006b9c:	4615      	mov	r5, r2
 8006b9e:	b933      	cbnz	r3, 8006bae <_free_r+0x32>
 8006ba0:	6063      	str	r3, [r4, #4]
 8006ba2:	6014      	str	r4, [r2, #0]
 8006ba4:	b003      	add	sp, #12
 8006ba6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006baa:	f000 bc2f 	b.w	800740c <__malloc_unlock>
 8006bae:	42a3      	cmp	r3, r4
 8006bb0:	d90b      	bls.n	8006bca <_free_r+0x4e>
 8006bb2:	6821      	ldr	r1, [r4, #0]
 8006bb4:	1862      	adds	r2, r4, r1
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	bf04      	itt	eq
 8006bba:	681a      	ldreq	r2, [r3, #0]
 8006bbc:	685b      	ldreq	r3, [r3, #4]
 8006bbe:	6063      	str	r3, [r4, #4]
 8006bc0:	bf04      	itt	eq
 8006bc2:	1852      	addeq	r2, r2, r1
 8006bc4:	6022      	streq	r2, [r4, #0]
 8006bc6:	602c      	str	r4, [r5, #0]
 8006bc8:	e7ec      	b.n	8006ba4 <_free_r+0x28>
 8006bca:	461a      	mov	r2, r3
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	b10b      	cbz	r3, 8006bd4 <_free_r+0x58>
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	d9fa      	bls.n	8006bca <_free_r+0x4e>
 8006bd4:	6811      	ldr	r1, [r2, #0]
 8006bd6:	1855      	adds	r5, r2, r1
 8006bd8:	42a5      	cmp	r5, r4
 8006bda:	d10b      	bne.n	8006bf4 <_free_r+0x78>
 8006bdc:	6824      	ldr	r4, [r4, #0]
 8006bde:	4421      	add	r1, r4
 8006be0:	1854      	adds	r4, r2, r1
 8006be2:	42a3      	cmp	r3, r4
 8006be4:	6011      	str	r1, [r2, #0]
 8006be6:	d1dd      	bne.n	8006ba4 <_free_r+0x28>
 8006be8:	681c      	ldr	r4, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	6053      	str	r3, [r2, #4]
 8006bee:	4421      	add	r1, r4
 8006bf0:	6011      	str	r1, [r2, #0]
 8006bf2:	e7d7      	b.n	8006ba4 <_free_r+0x28>
 8006bf4:	d902      	bls.n	8006bfc <_free_r+0x80>
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	6003      	str	r3, [r0, #0]
 8006bfa:	e7d3      	b.n	8006ba4 <_free_r+0x28>
 8006bfc:	6825      	ldr	r5, [r4, #0]
 8006bfe:	1961      	adds	r1, r4, r5
 8006c00:	428b      	cmp	r3, r1
 8006c02:	bf04      	itt	eq
 8006c04:	6819      	ldreq	r1, [r3, #0]
 8006c06:	685b      	ldreq	r3, [r3, #4]
 8006c08:	6063      	str	r3, [r4, #4]
 8006c0a:	bf04      	itt	eq
 8006c0c:	1949      	addeq	r1, r1, r5
 8006c0e:	6021      	streq	r1, [r4, #0]
 8006c10:	6054      	str	r4, [r2, #4]
 8006c12:	e7c7      	b.n	8006ba4 <_free_r+0x28>
 8006c14:	b003      	add	sp, #12
 8006c16:	bd30      	pop	{r4, r5, pc}
 8006c18:	200001bc 	.word	0x200001bc

08006c1c <_malloc_r>:
 8006c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1e:	1ccd      	adds	r5, r1, #3
 8006c20:	f025 0503 	bic.w	r5, r5, #3
 8006c24:	3508      	adds	r5, #8
 8006c26:	2d0c      	cmp	r5, #12
 8006c28:	bf38      	it	cc
 8006c2a:	250c      	movcc	r5, #12
 8006c2c:	2d00      	cmp	r5, #0
 8006c2e:	4606      	mov	r6, r0
 8006c30:	db01      	blt.n	8006c36 <_malloc_r+0x1a>
 8006c32:	42a9      	cmp	r1, r5
 8006c34:	d903      	bls.n	8006c3e <_malloc_r+0x22>
 8006c36:	230c      	movs	r3, #12
 8006c38:	6033      	str	r3, [r6, #0]
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c3e:	f000 fbdf 	bl	8007400 <__malloc_lock>
 8006c42:	4921      	ldr	r1, [pc, #132]	; (8006cc8 <_malloc_r+0xac>)
 8006c44:	680a      	ldr	r2, [r1, #0]
 8006c46:	4614      	mov	r4, r2
 8006c48:	b99c      	cbnz	r4, 8006c72 <_malloc_r+0x56>
 8006c4a:	4f20      	ldr	r7, [pc, #128]	; (8006ccc <_malloc_r+0xb0>)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	b923      	cbnz	r3, 8006c5a <_malloc_r+0x3e>
 8006c50:	4621      	mov	r1, r4
 8006c52:	4630      	mov	r0, r6
 8006c54:	f000 fb2a 	bl	80072ac <_sbrk_r>
 8006c58:	6038      	str	r0, [r7, #0]
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f000 fb25 	bl	80072ac <_sbrk_r>
 8006c62:	1c43      	adds	r3, r0, #1
 8006c64:	d123      	bne.n	8006cae <_malloc_r+0x92>
 8006c66:	230c      	movs	r3, #12
 8006c68:	6033      	str	r3, [r6, #0]
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f000 fbce 	bl	800740c <__malloc_unlock>
 8006c70:	e7e3      	b.n	8006c3a <_malloc_r+0x1e>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	1b5b      	subs	r3, r3, r5
 8006c76:	d417      	bmi.n	8006ca8 <_malloc_r+0x8c>
 8006c78:	2b0b      	cmp	r3, #11
 8006c7a:	d903      	bls.n	8006c84 <_malloc_r+0x68>
 8006c7c:	6023      	str	r3, [r4, #0]
 8006c7e:	441c      	add	r4, r3
 8006c80:	6025      	str	r5, [r4, #0]
 8006c82:	e004      	b.n	8006c8e <_malloc_r+0x72>
 8006c84:	6863      	ldr	r3, [r4, #4]
 8006c86:	42a2      	cmp	r2, r4
 8006c88:	bf0c      	ite	eq
 8006c8a:	600b      	streq	r3, [r1, #0]
 8006c8c:	6053      	strne	r3, [r2, #4]
 8006c8e:	4630      	mov	r0, r6
 8006c90:	f000 fbbc 	bl	800740c <__malloc_unlock>
 8006c94:	f104 000b 	add.w	r0, r4, #11
 8006c98:	1d23      	adds	r3, r4, #4
 8006c9a:	f020 0007 	bic.w	r0, r0, #7
 8006c9e:	1ac2      	subs	r2, r0, r3
 8006ca0:	d0cc      	beq.n	8006c3c <_malloc_r+0x20>
 8006ca2:	1a1b      	subs	r3, r3, r0
 8006ca4:	50a3      	str	r3, [r4, r2]
 8006ca6:	e7c9      	b.n	8006c3c <_malloc_r+0x20>
 8006ca8:	4622      	mov	r2, r4
 8006caa:	6864      	ldr	r4, [r4, #4]
 8006cac:	e7cc      	b.n	8006c48 <_malloc_r+0x2c>
 8006cae:	1cc4      	adds	r4, r0, #3
 8006cb0:	f024 0403 	bic.w	r4, r4, #3
 8006cb4:	42a0      	cmp	r0, r4
 8006cb6:	d0e3      	beq.n	8006c80 <_malloc_r+0x64>
 8006cb8:	1a21      	subs	r1, r4, r0
 8006cba:	4630      	mov	r0, r6
 8006cbc:	f000 faf6 	bl	80072ac <_sbrk_r>
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d1dd      	bne.n	8006c80 <_malloc_r+0x64>
 8006cc4:	e7cf      	b.n	8006c66 <_malloc_r+0x4a>
 8006cc6:	bf00      	nop
 8006cc8:	200001bc 	.word	0x200001bc
 8006ccc:	200001c0 	.word	0x200001c0

08006cd0 <__sfputc_r>:
 8006cd0:	6893      	ldr	r3, [r2, #8]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	b410      	push	{r4}
 8006cd8:	6093      	str	r3, [r2, #8]
 8006cda:	da08      	bge.n	8006cee <__sfputc_r+0x1e>
 8006cdc:	6994      	ldr	r4, [r2, #24]
 8006cde:	42a3      	cmp	r3, r4
 8006ce0:	db01      	blt.n	8006ce6 <__sfputc_r+0x16>
 8006ce2:	290a      	cmp	r1, #10
 8006ce4:	d103      	bne.n	8006cee <__sfputc_r+0x1e>
 8006ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cea:	f7ff bc69 	b.w	80065c0 <__swbuf_r>
 8006cee:	6813      	ldr	r3, [r2, #0]
 8006cf0:	1c58      	adds	r0, r3, #1
 8006cf2:	6010      	str	r0, [r2, #0]
 8006cf4:	7019      	strb	r1, [r3, #0]
 8006cf6:	4608      	mov	r0, r1
 8006cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <__sfputs_r>:
 8006cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d00:	4606      	mov	r6, r0
 8006d02:	460f      	mov	r7, r1
 8006d04:	4614      	mov	r4, r2
 8006d06:	18d5      	adds	r5, r2, r3
 8006d08:	42ac      	cmp	r4, r5
 8006d0a:	d101      	bne.n	8006d10 <__sfputs_r+0x12>
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	e007      	b.n	8006d20 <__sfputs_r+0x22>
 8006d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d14:	463a      	mov	r2, r7
 8006d16:	4630      	mov	r0, r6
 8006d18:	f7ff ffda 	bl	8006cd0 <__sfputc_r>
 8006d1c:	1c43      	adds	r3, r0, #1
 8006d1e:	d1f3      	bne.n	8006d08 <__sfputs_r+0xa>
 8006d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d24 <_vfiprintf_r>:
 8006d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d28:	460d      	mov	r5, r1
 8006d2a:	b09d      	sub	sp, #116	; 0x74
 8006d2c:	4614      	mov	r4, r2
 8006d2e:	4698      	mov	r8, r3
 8006d30:	4606      	mov	r6, r0
 8006d32:	b118      	cbz	r0, 8006d3c <_vfiprintf_r+0x18>
 8006d34:	6983      	ldr	r3, [r0, #24]
 8006d36:	b90b      	cbnz	r3, 8006d3c <_vfiprintf_r+0x18>
 8006d38:	f7ff fe1c 	bl	8006974 <__sinit>
 8006d3c:	4b89      	ldr	r3, [pc, #548]	; (8006f64 <_vfiprintf_r+0x240>)
 8006d3e:	429d      	cmp	r5, r3
 8006d40:	d11b      	bne.n	8006d7a <_vfiprintf_r+0x56>
 8006d42:	6875      	ldr	r5, [r6, #4]
 8006d44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d46:	07d9      	lsls	r1, r3, #31
 8006d48:	d405      	bmi.n	8006d56 <_vfiprintf_r+0x32>
 8006d4a:	89ab      	ldrh	r3, [r5, #12]
 8006d4c:	059a      	lsls	r2, r3, #22
 8006d4e:	d402      	bmi.n	8006d56 <_vfiprintf_r+0x32>
 8006d50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d52:	f7ff fead 	bl	8006ab0 <__retarget_lock_acquire_recursive>
 8006d56:	89ab      	ldrh	r3, [r5, #12]
 8006d58:	071b      	lsls	r3, r3, #28
 8006d5a:	d501      	bpl.n	8006d60 <_vfiprintf_r+0x3c>
 8006d5c:	692b      	ldr	r3, [r5, #16]
 8006d5e:	b9eb      	cbnz	r3, 8006d9c <_vfiprintf_r+0x78>
 8006d60:	4629      	mov	r1, r5
 8006d62:	4630      	mov	r0, r6
 8006d64:	f7ff fc7e 	bl	8006664 <__swsetup_r>
 8006d68:	b1c0      	cbz	r0, 8006d9c <_vfiprintf_r+0x78>
 8006d6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d6c:	07dc      	lsls	r4, r3, #31
 8006d6e:	d50e      	bpl.n	8006d8e <_vfiprintf_r+0x6a>
 8006d70:	f04f 30ff 	mov.w	r0, #4294967295
 8006d74:	b01d      	add	sp, #116	; 0x74
 8006d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7a:	4b7b      	ldr	r3, [pc, #492]	; (8006f68 <_vfiprintf_r+0x244>)
 8006d7c:	429d      	cmp	r5, r3
 8006d7e:	d101      	bne.n	8006d84 <_vfiprintf_r+0x60>
 8006d80:	68b5      	ldr	r5, [r6, #8]
 8006d82:	e7df      	b.n	8006d44 <_vfiprintf_r+0x20>
 8006d84:	4b79      	ldr	r3, [pc, #484]	; (8006f6c <_vfiprintf_r+0x248>)
 8006d86:	429d      	cmp	r5, r3
 8006d88:	bf08      	it	eq
 8006d8a:	68f5      	ldreq	r5, [r6, #12]
 8006d8c:	e7da      	b.n	8006d44 <_vfiprintf_r+0x20>
 8006d8e:	89ab      	ldrh	r3, [r5, #12]
 8006d90:	0598      	lsls	r0, r3, #22
 8006d92:	d4ed      	bmi.n	8006d70 <_vfiprintf_r+0x4c>
 8006d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d96:	f7ff fe8c 	bl	8006ab2 <__retarget_lock_release_recursive>
 8006d9a:	e7e9      	b.n	8006d70 <_vfiprintf_r+0x4c>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006da0:	2320      	movs	r3, #32
 8006da2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006da6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006daa:	2330      	movs	r3, #48	; 0x30
 8006dac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f70 <_vfiprintf_r+0x24c>
 8006db0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006db4:	f04f 0901 	mov.w	r9, #1
 8006db8:	4623      	mov	r3, r4
 8006dba:	469a      	mov	sl, r3
 8006dbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dc0:	b10a      	cbz	r2, 8006dc6 <_vfiprintf_r+0xa2>
 8006dc2:	2a25      	cmp	r2, #37	; 0x25
 8006dc4:	d1f9      	bne.n	8006dba <_vfiprintf_r+0x96>
 8006dc6:	ebba 0b04 	subs.w	fp, sl, r4
 8006dca:	d00b      	beq.n	8006de4 <_vfiprintf_r+0xc0>
 8006dcc:	465b      	mov	r3, fp
 8006dce:	4622      	mov	r2, r4
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f7ff ff93 	bl	8006cfe <__sfputs_r>
 8006dd8:	3001      	adds	r0, #1
 8006dda:	f000 80aa 	beq.w	8006f32 <_vfiprintf_r+0x20e>
 8006dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006de0:	445a      	add	r2, fp
 8006de2:	9209      	str	r2, [sp, #36]	; 0x24
 8006de4:	f89a 3000 	ldrb.w	r3, [sl]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 80a2 	beq.w	8006f32 <_vfiprintf_r+0x20e>
 8006dee:	2300      	movs	r3, #0
 8006df0:	f04f 32ff 	mov.w	r2, #4294967295
 8006df4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006df8:	f10a 0a01 	add.w	sl, sl, #1
 8006dfc:	9304      	str	r3, [sp, #16]
 8006dfe:	9307      	str	r3, [sp, #28]
 8006e00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e04:	931a      	str	r3, [sp, #104]	; 0x68
 8006e06:	4654      	mov	r4, sl
 8006e08:	2205      	movs	r2, #5
 8006e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e0e:	4858      	ldr	r0, [pc, #352]	; (8006f70 <_vfiprintf_r+0x24c>)
 8006e10:	f7f9 f9de 	bl	80001d0 <memchr>
 8006e14:	9a04      	ldr	r2, [sp, #16]
 8006e16:	b9d8      	cbnz	r0, 8006e50 <_vfiprintf_r+0x12c>
 8006e18:	06d1      	lsls	r1, r2, #27
 8006e1a:	bf44      	itt	mi
 8006e1c:	2320      	movmi	r3, #32
 8006e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e22:	0713      	lsls	r3, r2, #28
 8006e24:	bf44      	itt	mi
 8006e26:	232b      	movmi	r3, #43	; 0x2b
 8006e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e30:	2b2a      	cmp	r3, #42	; 0x2a
 8006e32:	d015      	beq.n	8006e60 <_vfiprintf_r+0x13c>
 8006e34:	9a07      	ldr	r2, [sp, #28]
 8006e36:	4654      	mov	r4, sl
 8006e38:	2000      	movs	r0, #0
 8006e3a:	f04f 0c0a 	mov.w	ip, #10
 8006e3e:	4621      	mov	r1, r4
 8006e40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e44:	3b30      	subs	r3, #48	; 0x30
 8006e46:	2b09      	cmp	r3, #9
 8006e48:	d94e      	bls.n	8006ee8 <_vfiprintf_r+0x1c4>
 8006e4a:	b1b0      	cbz	r0, 8006e7a <_vfiprintf_r+0x156>
 8006e4c:	9207      	str	r2, [sp, #28]
 8006e4e:	e014      	b.n	8006e7a <_vfiprintf_r+0x156>
 8006e50:	eba0 0308 	sub.w	r3, r0, r8
 8006e54:	fa09 f303 	lsl.w	r3, r9, r3
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	9304      	str	r3, [sp, #16]
 8006e5c:	46a2      	mov	sl, r4
 8006e5e:	e7d2      	b.n	8006e06 <_vfiprintf_r+0xe2>
 8006e60:	9b03      	ldr	r3, [sp, #12]
 8006e62:	1d19      	adds	r1, r3, #4
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	9103      	str	r1, [sp, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	bfbb      	ittet	lt
 8006e6c:	425b      	neglt	r3, r3
 8006e6e:	f042 0202 	orrlt.w	r2, r2, #2
 8006e72:	9307      	strge	r3, [sp, #28]
 8006e74:	9307      	strlt	r3, [sp, #28]
 8006e76:	bfb8      	it	lt
 8006e78:	9204      	strlt	r2, [sp, #16]
 8006e7a:	7823      	ldrb	r3, [r4, #0]
 8006e7c:	2b2e      	cmp	r3, #46	; 0x2e
 8006e7e:	d10c      	bne.n	8006e9a <_vfiprintf_r+0x176>
 8006e80:	7863      	ldrb	r3, [r4, #1]
 8006e82:	2b2a      	cmp	r3, #42	; 0x2a
 8006e84:	d135      	bne.n	8006ef2 <_vfiprintf_r+0x1ce>
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	1d1a      	adds	r2, r3, #4
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	9203      	str	r2, [sp, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	bfb8      	it	lt
 8006e92:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e96:	3402      	adds	r4, #2
 8006e98:	9305      	str	r3, [sp, #20]
 8006e9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f80 <_vfiprintf_r+0x25c>
 8006e9e:	7821      	ldrb	r1, [r4, #0]
 8006ea0:	2203      	movs	r2, #3
 8006ea2:	4650      	mov	r0, sl
 8006ea4:	f7f9 f994 	bl	80001d0 <memchr>
 8006ea8:	b140      	cbz	r0, 8006ebc <_vfiprintf_r+0x198>
 8006eaa:	2340      	movs	r3, #64	; 0x40
 8006eac:	eba0 000a 	sub.w	r0, r0, sl
 8006eb0:	fa03 f000 	lsl.w	r0, r3, r0
 8006eb4:	9b04      	ldr	r3, [sp, #16]
 8006eb6:	4303      	orrs	r3, r0
 8006eb8:	3401      	adds	r4, #1
 8006eba:	9304      	str	r3, [sp, #16]
 8006ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec0:	482c      	ldr	r0, [pc, #176]	; (8006f74 <_vfiprintf_r+0x250>)
 8006ec2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ec6:	2206      	movs	r2, #6
 8006ec8:	f7f9 f982 	bl	80001d0 <memchr>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d03f      	beq.n	8006f50 <_vfiprintf_r+0x22c>
 8006ed0:	4b29      	ldr	r3, [pc, #164]	; (8006f78 <_vfiprintf_r+0x254>)
 8006ed2:	bb1b      	cbnz	r3, 8006f1c <_vfiprintf_r+0x1f8>
 8006ed4:	9b03      	ldr	r3, [sp, #12]
 8006ed6:	3307      	adds	r3, #7
 8006ed8:	f023 0307 	bic.w	r3, r3, #7
 8006edc:	3308      	adds	r3, #8
 8006ede:	9303      	str	r3, [sp, #12]
 8006ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ee2:	443b      	add	r3, r7
 8006ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ee6:	e767      	b.n	8006db8 <_vfiprintf_r+0x94>
 8006ee8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eec:	460c      	mov	r4, r1
 8006eee:	2001      	movs	r0, #1
 8006ef0:	e7a5      	b.n	8006e3e <_vfiprintf_r+0x11a>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	3401      	adds	r4, #1
 8006ef6:	9305      	str	r3, [sp, #20]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	f04f 0c0a 	mov.w	ip, #10
 8006efe:	4620      	mov	r0, r4
 8006f00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f04:	3a30      	subs	r2, #48	; 0x30
 8006f06:	2a09      	cmp	r2, #9
 8006f08:	d903      	bls.n	8006f12 <_vfiprintf_r+0x1ee>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0c5      	beq.n	8006e9a <_vfiprintf_r+0x176>
 8006f0e:	9105      	str	r1, [sp, #20]
 8006f10:	e7c3      	b.n	8006e9a <_vfiprintf_r+0x176>
 8006f12:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f16:	4604      	mov	r4, r0
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e7f0      	b.n	8006efe <_vfiprintf_r+0x1da>
 8006f1c:	ab03      	add	r3, sp, #12
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	462a      	mov	r2, r5
 8006f22:	4b16      	ldr	r3, [pc, #88]	; (8006f7c <_vfiprintf_r+0x258>)
 8006f24:	a904      	add	r1, sp, #16
 8006f26:	4630      	mov	r0, r6
 8006f28:	f3af 8000 	nop.w
 8006f2c:	4607      	mov	r7, r0
 8006f2e:	1c78      	adds	r0, r7, #1
 8006f30:	d1d6      	bne.n	8006ee0 <_vfiprintf_r+0x1bc>
 8006f32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f34:	07d9      	lsls	r1, r3, #31
 8006f36:	d405      	bmi.n	8006f44 <_vfiprintf_r+0x220>
 8006f38:	89ab      	ldrh	r3, [r5, #12]
 8006f3a:	059a      	lsls	r2, r3, #22
 8006f3c:	d402      	bmi.n	8006f44 <_vfiprintf_r+0x220>
 8006f3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f40:	f7ff fdb7 	bl	8006ab2 <__retarget_lock_release_recursive>
 8006f44:	89ab      	ldrh	r3, [r5, #12]
 8006f46:	065b      	lsls	r3, r3, #25
 8006f48:	f53f af12 	bmi.w	8006d70 <_vfiprintf_r+0x4c>
 8006f4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f4e:	e711      	b.n	8006d74 <_vfiprintf_r+0x50>
 8006f50:	ab03      	add	r3, sp, #12
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	462a      	mov	r2, r5
 8006f56:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <_vfiprintf_r+0x258>)
 8006f58:	a904      	add	r1, sp, #16
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f000 f880 	bl	8007060 <_printf_i>
 8006f60:	e7e4      	b.n	8006f2c <_vfiprintf_r+0x208>
 8006f62:	bf00      	nop
 8006f64:	080079d0 	.word	0x080079d0
 8006f68:	080079f0 	.word	0x080079f0
 8006f6c:	080079b0 	.word	0x080079b0
 8006f70:	08007a10 	.word	0x08007a10
 8006f74:	08007a1a 	.word	0x08007a1a
 8006f78:	00000000 	.word	0x00000000
 8006f7c:	08006cff 	.word	0x08006cff
 8006f80:	08007a16 	.word	0x08007a16

08006f84 <_printf_common>:
 8006f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f88:	4616      	mov	r6, r2
 8006f8a:	4699      	mov	r9, r3
 8006f8c:	688a      	ldr	r2, [r1, #8]
 8006f8e:	690b      	ldr	r3, [r1, #16]
 8006f90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f94:	4293      	cmp	r3, r2
 8006f96:	bfb8      	it	lt
 8006f98:	4613      	movlt	r3, r2
 8006f9a:	6033      	str	r3, [r6, #0]
 8006f9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	b10a      	cbz	r2, 8006faa <_printf_common+0x26>
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	6033      	str	r3, [r6, #0]
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	0699      	lsls	r1, r3, #26
 8006fae:	bf42      	ittt	mi
 8006fb0:	6833      	ldrmi	r3, [r6, #0]
 8006fb2:	3302      	addmi	r3, #2
 8006fb4:	6033      	strmi	r3, [r6, #0]
 8006fb6:	6825      	ldr	r5, [r4, #0]
 8006fb8:	f015 0506 	ands.w	r5, r5, #6
 8006fbc:	d106      	bne.n	8006fcc <_printf_common+0x48>
 8006fbe:	f104 0a19 	add.w	sl, r4, #25
 8006fc2:	68e3      	ldr	r3, [r4, #12]
 8006fc4:	6832      	ldr	r2, [r6, #0]
 8006fc6:	1a9b      	subs	r3, r3, r2
 8006fc8:	42ab      	cmp	r3, r5
 8006fca:	dc26      	bgt.n	800701a <_printf_common+0x96>
 8006fcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fd0:	1e13      	subs	r3, r2, #0
 8006fd2:	6822      	ldr	r2, [r4, #0]
 8006fd4:	bf18      	it	ne
 8006fd6:	2301      	movne	r3, #1
 8006fd8:	0692      	lsls	r2, r2, #26
 8006fda:	d42b      	bmi.n	8007034 <_printf_common+0xb0>
 8006fdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	4638      	mov	r0, r7
 8006fe4:	47c0      	blx	r8
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	d01e      	beq.n	8007028 <_printf_common+0xa4>
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	68e5      	ldr	r5, [r4, #12]
 8006fee:	6832      	ldr	r2, [r6, #0]
 8006ff0:	f003 0306 	and.w	r3, r3, #6
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	bf08      	it	eq
 8006ff8:	1aad      	subeq	r5, r5, r2
 8006ffa:	68a3      	ldr	r3, [r4, #8]
 8006ffc:	6922      	ldr	r2, [r4, #16]
 8006ffe:	bf0c      	ite	eq
 8007000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007004:	2500      	movne	r5, #0
 8007006:	4293      	cmp	r3, r2
 8007008:	bfc4      	itt	gt
 800700a:	1a9b      	subgt	r3, r3, r2
 800700c:	18ed      	addgt	r5, r5, r3
 800700e:	2600      	movs	r6, #0
 8007010:	341a      	adds	r4, #26
 8007012:	42b5      	cmp	r5, r6
 8007014:	d11a      	bne.n	800704c <_printf_common+0xc8>
 8007016:	2000      	movs	r0, #0
 8007018:	e008      	b.n	800702c <_printf_common+0xa8>
 800701a:	2301      	movs	r3, #1
 800701c:	4652      	mov	r2, sl
 800701e:	4649      	mov	r1, r9
 8007020:	4638      	mov	r0, r7
 8007022:	47c0      	blx	r8
 8007024:	3001      	adds	r0, #1
 8007026:	d103      	bne.n	8007030 <_printf_common+0xac>
 8007028:	f04f 30ff 	mov.w	r0, #4294967295
 800702c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007030:	3501      	adds	r5, #1
 8007032:	e7c6      	b.n	8006fc2 <_printf_common+0x3e>
 8007034:	18e1      	adds	r1, r4, r3
 8007036:	1c5a      	adds	r2, r3, #1
 8007038:	2030      	movs	r0, #48	; 0x30
 800703a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800703e:	4422      	add	r2, r4
 8007040:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007044:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007048:	3302      	adds	r3, #2
 800704a:	e7c7      	b.n	8006fdc <_printf_common+0x58>
 800704c:	2301      	movs	r3, #1
 800704e:	4622      	mov	r2, r4
 8007050:	4649      	mov	r1, r9
 8007052:	4638      	mov	r0, r7
 8007054:	47c0      	blx	r8
 8007056:	3001      	adds	r0, #1
 8007058:	d0e6      	beq.n	8007028 <_printf_common+0xa4>
 800705a:	3601      	adds	r6, #1
 800705c:	e7d9      	b.n	8007012 <_printf_common+0x8e>
	...

08007060 <_printf_i>:
 8007060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007064:	460c      	mov	r4, r1
 8007066:	4691      	mov	r9, r2
 8007068:	7e27      	ldrb	r7, [r4, #24]
 800706a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800706c:	2f78      	cmp	r7, #120	; 0x78
 800706e:	4680      	mov	r8, r0
 8007070:	469a      	mov	sl, r3
 8007072:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007076:	d807      	bhi.n	8007088 <_printf_i+0x28>
 8007078:	2f62      	cmp	r7, #98	; 0x62
 800707a:	d80a      	bhi.n	8007092 <_printf_i+0x32>
 800707c:	2f00      	cmp	r7, #0
 800707e:	f000 80d8 	beq.w	8007232 <_printf_i+0x1d2>
 8007082:	2f58      	cmp	r7, #88	; 0x58
 8007084:	f000 80a3 	beq.w	80071ce <_printf_i+0x16e>
 8007088:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800708c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007090:	e03a      	b.n	8007108 <_printf_i+0xa8>
 8007092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007096:	2b15      	cmp	r3, #21
 8007098:	d8f6      	bhi.n	8007088 <_printf_i+0x28>
 800709a:	a001      	add	r0, pc, #4	; (adr r0, 80070a0 <_printf_i+0x40>)
 800709c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80070a0:	080070f9 	.word	0x080070f9
 80070a4:	0800710d 	.word	0x0800710d
 80070a8:	08007089 	.word	0x08007089
 80070ac:	08007089 	.word	0x08007089
 80070b0:	08007089 	.word	0x08007089
 80070b4:	08007089 	.word	0x08007089
 80070b8:	0800710d 	.word	0x0800710d
 80070bc:	08007089 	.word	0x08007089
 80070c0:	08007089 	.word	0x08007089
 80070c4:	08007089 	.word	0x08007089
 80070c8:	08007089 	.word	0x08007089
 80070cc:	08007219 	.word	0x08007219
 80070d0:	0800713d 	.word	0x0800713d
 80070d4:	080071fb 	.word	0x080071fb
 80070d8:	08007089 	.word	0x08007089
 80070dc:	08007089 	.word	0x08007089
 80070e0:	0800723b 	.word	0x0800723b
 80070e4:	08007089 	.word	0x08007089
 80070e8:	0800713d 	.word	0x0800713d
 80070ec:	08007089 	.word	0x08007089
 80070f0:	08007089 	.word	0x08007089
 80070f4:	08007203 	.word	0x08007203
 80070f8:	680b      	ldr	r3, [r1, #0]
 80070fa:	1d1a      	adds	r2, r3, #4
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	600a      	str	r2, [r1, #0]
 8007100:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007108:	2301      	movs	r3, #1
 800710a:	e0a3      	b.n	8007254 <_printf_i+0x1f4>
 800710c:	6825      	ldr	r5, [r4, #0]
 800710e:	6808      	ldr	r0, [r1, #0]
 8007110:	062e      	lsls	r6, r5, #24
 8007112:	f100 0304 	add.w	r3, r0, #4
 8007116:	d50a      	bpl.n	800712e <_printf_i+0xce>
 8007118:	6805      	ldr	r5, [r0, #0]
 800711a:	600b      	str	r3, [r1, #0]
 800711c:	2d00      	cmp	r5, #0
 800711e:	da03      	bge.n	8007128 <_printf_i+0xc8>
 8007120:	232d      	movs	r3, #45	; 0x2d
 8007122:	426d      	negs	r5, r5
 8007124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007128:	485e      	ldr	r0, [pc, #376]	; (80072a4 <_printf_i+0x244>)
 800712a:	230a      	movs	r3, #10
 800712c:	e019      	b.n	8007162 <_printf_i+0x102>
 800712e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007132:	6805      	ldr	r5, [r0, #0]
 8007134:	600b      	str	r3, [r1, #0]
 8007136:	bf18      	it	ne
 8007138:	b22d      	sxthne	r5, r5
 800713a:	e7ef      	b.n	800711c <_printf_i+0xbc>
 800713c:	680b      	ldr	r3, [r1, #0]
 800713e:	6825      	ldr	r5, [r4, #0]
 8007140:	1d18      	adds	r0, r3, #4
 8007142:	6008      	str	r0, [r1, #0]
 8007144:	0628      	lsls	r0, r5, #24
 8007146:	d501      	bpl.n	800714c <_printf_i+0xec>
 8007148:	681d      	ldr	r5, [r3, #0]
 800714a:	e002      	b.n	8007152 <_printf_i+0xf2>
 800714c:	0669      	lsls	r1, r5, #25
 800714e:	d5fb      	bpl.n	8007148 <_printf_i+0xe8>
 8007150:	881d      	ldrh	r5, [r3, #0]
 8007152:	4854      	ldr	r0, [pc, #336]	; (80072a4 <_printf_i+0x244>)
 8007154:	2f6f      	cmp	r7, #111	; 0x6f
 8007156:	bf0c      	ite	eq
 8007158:	2308      	moveq	r3, #8
 800715a:	230a      	movne	r3, #10
 800715c:	2100      	movs	r1, #0
 800715e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007162:	6866      	ldr	r6, [r4, #4]
 8007164:	60a6      	str	r6, [r4, #8]
 8007166:	2e00      	cmp	r6, #0
 8007168:	bfa2      	ittt	ge
 800716a:	6821      	ldrge	r1, [r4, #0]
 800716c:	f021 0104 	bicge.w	r1, r1, #4
 8007170:	6021      	strge	r1, [r4, #0]
 8007172:	b90d      	cbnz	r5, 8007178 <_printf_i+0x118>
 8007174:	2e00      	cmp	r6, #0
 8007176:	d04d      	beq.n	8007214 <_printf_i+0x1b4>
 8007178:	4616      	mov	r6, r2
 800717a:	fbb5 f1f3 	udiv	r1, r5, r3
 800717e:	fb03 5711 	mls	r7, r3, r1, r5
 8007182:	5dc7      	ldrb	r7, [r0, r7]
 8007184:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007188:	462f      	mov	r7, r5
 800718a:	42bb      	cmp	r3, r7
 800718c:	460d      	mov	r5, r1
 800718e:	d9f4      	bls.n	800717a <_printf_i+0x11a>
 8007190:	2b08      	cmp	r3, #8
 8007192:	d10b      	bne.n	80071ac <_printf_i+0x14c>
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	07df      	lsls	r7, r3, #31
 8007198:	d508      	bpl.n	80071ac <_printf_i+0x14c>
 800719a:	6923      	ldr	r3, [r4, #16]
 800719c:	6861      	ldr	r1, [r4, #4]
 800719e:	4299      	cmp	r1, r3
 80071a0:	bfde      	ittt	le
 80071a2:	2330      	movle	r3, #48	; 0x30
 80071a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071ac:	1b92      	subs	r2, r2, r6
 80071ae:	6122      	str	r2, [r4, #16]
 80071b0:	f8cd a000 	str.w	sl, [sp]
 80071b4:	464b      	mov	r3, r9
 80071b6:	aa03      	add	r2, sp, #12
 80071b8:	4621      	mov	r1, r4
 80071ba:	4640      	mov	r0, r8
 80071bc:	f7ff fee2 	bl	8006f84 <_printf_common>
 80071c0:	3001      	adds	r0, #1
 80071c2:	d14c      	bne.n	800725e <_printf_i+0x1fe>
 80071c4:	f04f 30ff 	mov.w	r0, #4294967295
 80071c8:	b004      	add	sp, #16
 80071ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ce:	4835      	ldr	r0, [pc, #212]	; (80072a4 <_printf_i+0x244>)
 80071d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	680e      	ldr	r6, [r1, #0]
 80071d8:	061f      	lsls	r7, r3, #24
 80071da:	f856 5b04 	ldr.w	r5, [r6], #4
 80071de:	600e      	str	r6, [r1, #0]
 80071e0:	d514      	bpl.n	800720c <_printf_i+0x1ac>
 80071e2:	07d9      	lsls	r1, r3, #31
 80071e4:	bf44      	itt	mi
 80071e6:	f043 0320 	orrmi.w	r3, r3, #32
 80071ea:	6023      	strmi	r3, [r4, #0]
 80071ec:	b91d      	cbnz	r5, 80071f6 <_printf_i+0x196>
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	f023 0320 	bic.w	r3, r3, #32
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	2310      	movs	r3, #16
 80071f8:	e7b0      	b.n	800715c <_printf_i+0xfc>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	f043 0320 	orr.w	r3, r3, #32
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	2378      	movs	r3, #120	; 0x78
 8007204:	4828      	ldr	r0, [pc, #160]	; (80072a8 <_printf_i+0x248>)
 8007206:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800720a:	e7e3      	b.n	80071d4 <_printf_i+0x174>
 800720c:	065e      	lsls	r6, r3, #25
 800720e:	bf48      	it	mi
 8007210:	b2ad      	uxthmi	r5, r5
 8007212:	e7e6      	b.n	80071e2 <_printf_i+0x182>
 8007214:	4616      	mov	r6, r2
 8007216:	e7bb      	b.n	8007190 <_printf_i+0x130>
 8007218:	680b      	ldr	r3, [r1, #0]
 800721a:	6826      	ldr	r6, [r4, #0]
 800721c:	6960      	ldr	r0, [r4, #20]
 800721e:	1d1d      	adds	r5, r3, #4
 8007220:	600d      	str	r5, [r1, #0]
 8007222:	0635      	lsls	r5, r6, #24
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	d501      	bpl.n	800722c <_printf_i+0x1cc>
 8007228:	6018      	str	r0, [r3, #0]
 800722a:	e002      	b.n	8007232 <_printf_i+0x1d2>
 800722c:	0671      	lsls	r1, r6, #25
 800722e:	d5fb      	bpl.n	8007228 <_printf_i+0x1c8>
 8007230:	8018      	strh	r0, [r3, #0]
 8007232:	2300      	movs	r3, #0
 8007234:	6123      	str	r3, [r4, #16]
 8007236:	4616      	mov	r6, r2
 8007238:	e7ba      	b.n	80071b0 <_printf_i+0x150>
 800723a:	680b      	ldr	r3, [r1, #0]
 800723c:	1d1a      	adds	r2, r3, #4
 800723e:	600a      	str	r2, [r1, #0]
 8007240:	681e      	ldr	r6, [r3, #0]
 8007242:	6862      	ldr	r2, [r4, #4]
 8007244:	2100      	movs	r1, #0
 8007246:	4630      	mov	r0, r6
 8007248:	f7f8 ffc2 	bl	80001d0 <memchr>
 800724c:	b108      	cbz	r0, 8007252 <_printf_i+0x1f2>
 800724e:	1b80      	subs	r0, r0, r6
 8007250:	6060      	str	r0, [r4, #4]
 8007252:	6863      	ldr	r3, [r4, #4]
 8007254:	6123      	str	r3, [r4, #16]
 8007256:	2300      	movs	r3, #0
 8007258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800725c:	e7a8      	b.n	80071b0 <_printf_i+0x150>
 800725e:	6923      	ldr	r3, [r4, #16]
 8007260:	4632      	mov	r2, r6
 8007262:	4649      	mov	r1, r9
 8007264:	4640      	mov	r0, r8
 8007266:	47d0      	blx	sl
 8007268:	3001      	adds	r0, #1
 800726a:	d0ab      	beq.n	80071c4 <_printf_i+0x164>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	079b      	lsls	r3, r3, #30
 8007270:	d413      	bmi.n	800729a <_printf_i+0x23a>
 8007272:	68e0      	ldr	r0, [r4, #12]
 8007274:	9b03      	ldr	r3, [sp, #12]
 8007276:	4298      	cmp	r0, r3
 8007278:	bfb8      	it	lt
 800727a:	4618      	movlt	r0, r3
 800727c:	e7a4      	b.n	80071c8 <_printf_i+0x168>
 800727e:	2301      	movs	r3, #1
 8007280:	4632      	mov	r2, r6
 8007282:	4649      	mov	r1, r9
 8007284:	4640      	mov	r0, r8
 8007286:	47d0      	blx	sl
 8007288:	3001      	adds	r0, #1
 800728a:	d09b      	beq.n	80071c4 <_printf_i+0x164>
 800728c:	3501      	adds	r5, #1
 800728e:	68e3      	ldr	r3, [r4, #12]
 8007290:	9903      	ldr	r1, [sp, #12]
 8007292:	1a5b      	subs	r3, r3, r1
 8007294:	42ab      	cmp	r3, r5
 8007296:	dcf2      	bgt.n	800727e <_printf_i+0x21e>
 8007298:	e7eb      	b.n	8007272 <_printf_i+0x212>
 800729a:	2500      	movs	r5, #0
 800729c:	f104 0619 	add.w	r6, r4, #25
 80072a0:	e7f5      	b.n	800728e <_printf_i+0x22e>
 80072a2:	bf00      	nop
 80072a4:	08007a21 	.word	0x08007a21
 80072a8:	08007a32 	.word	0x08007a32

080072ac <_sbrk_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	4d06      	ldr	r5, [pc, #24]	; (80072c8 <_sbrk_r+0x1c>)
 80072b0:	2300      	movs	r3, #0
 80072b2:	4604      	mov	r4, r0
 80072b4:	4608      	mov	r0, r1
 80072b6:	602b      	str	r3, [r5, #0]
 80072b8:	f7fc f882 	bl	80033c0 <_sbrk>
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	d102      	bne.n	80072c6 <_sbrk_r+0x1a>
 80072c0:	682b      	ldr	r3, [r5, #0]
 80072c2:	b103      	cbz	r3, 80072c6 <_sbrk_r+0x1a>
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	bd38      	pop	{r3, r4, r5, pc}
 80072c8:	200001d4 	.word	0x200001d4

080072cc <__sread>:
 80072cc:	b510      	push	{r4, lr}
 80072ce:	460c      	mov	r4, r1
 80072d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d4:	f000 f8a0 	bl	8007418 <_read_r>
 80072d8:	2800      	cmp	r0, #0
 80072da:	bfab      	itete	ge
 80072dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072de:	89a3      	ldrhlt	r3, [r4, #12]
 80072e0:	181b      	addge	r3, r3, r0
 80072e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072e6:	bfac      	ite	ge
 80072e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80072ea:	81a3      	strhlt	r3, [r4, #12]
 80072ec:	bd10      	pop	{r4, pc}

080072ee <__swrite>:
 80072ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f2:	461f      	mov	r7, r3
 80072f4:	898b      	ldrh	r3, [r1, #12]
 80072f6:	05db      	lsls	r3, r3, #23
 80072f8:	4605      	mov	r5, r0
 80072fa:	460c      	mov	r4, r1
 80072fc:	4616      	mov	r6, r2
 80072fe:	d505      	bpl.n	800730c <__swrite+0x1e>
 8007300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007304:	2302      	movs	r3, #2
 8007306:	2200      	movs	r2, #0
 8007308:	f000 f868 	bl	80073dc <_lseek_r>
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007316:	81a3      	strh	r3, [r4, #12]
 8007318:	4632      	mov	r2, r6
 800731a:	463b      	mov	r3, r7
 800731c:	4628      	mov	r0, r5
 800731e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007322:	f000 b817 	b.w	8007354 <_write_r>

08007326 <__sseek>:
 8007326:	b510      	push	{r4, lr}
 8007328:	460c      	mov	r4, r1
 800732a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800732e:	f000 f855 	bl	80073dc <_lseek_r>
 8007332:	1c43      	adds	r3, r0, #1
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	bf15      	itete	ne
 8007338:	6560      	strne	r0, [r4, #84]	; 0x54
 800733a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800733e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007342:	81a3      	strheq	r3, [r4, #12]
 8007344:	bf18      	it	ne
 8007346:	81a3      	strhne	r3, [r4, #12]
 8007348:	bd10      	pop	{r4, pc}

0800734a <__sclose>:
 800734a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734e:	f000 b813 	b.w	8007378 <_close_r>
	...

08007354 <_write_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	4d07      	ldr	r5, [pc, #28]	; (8007374 <_write_r+0x20>)
 8007358:	4604      	mov	r4, r0
 800735a:	4608      	mov	r0, r1
 800735c:	4611      	mov	r1, r2
 800735e:	2200      	movs	r2, #0
 8007360:	602a      	str	r2, [r5, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	f7fb ffdb 	bl	800331e <_write>
 8007368:	1c43      	adds	r3, r0, #1
 800736a:	d102      	bne.n	8007372 <_write_r+0x1e>
 800736c:	682b      	ldr	r3, [r5, #0]
 800736e:	b103      	cbz	r3, 8007372 <_write_r+0x1e>
 8007370:	6023      	str	r3, [r4, #0]
 8007372:	bd38      	pop	{r3, r4, r5, pc}
 8007374:	200001d4 	.word	0x200001d4

08007378 <_close_r>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	4d06      	ldr	r5, [pc, #24]	; (8007394 <_close_r+0x1c>)
 800737c:	2300      	movs	r3, #0
 800737e:	4604      	mov	r4, r0
 8007380:	4608      	mov	r0, r1
 8007382:	602b      	str	r3, [r5, #0]
 8007384:	f7fb ffe7 	bl	8003356 <_close>
 8007388:	1c43      	adds	r3, r0, #1
 800738a:	d102      	bne.n	8007392 <_close_r+0x1a>
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	b103      	cbz	r3, 8007392 <_close_r+0x1a>
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	bd38      	pop	{r3, r4, r5, pc}
 8007394:	200001d4 	.word	0x200001d4

08007398 <_fstat_r>:
 8007398:	b538      	push	{r3, r4, r5, lr}
 800739a:	4d07      	ldr	r5, [pc, #28]	; (80073b8 <_fstat_r+0x20>)
 800739c:	2300      	movs	r3, #0
 800739e:	4604      	mov	r4, r0
 80073a0:	4608      	mov	r0, r1
 80073a2:	4611      	mov	r1, r2
 80073a4:	602b      	str	r3, [r5, #0]
 80073a6:	f7fb ffe2 	bl	800336e <_fstat>
 80073aa:	1c43      	adds	r3, r0, #1
 80073ac:	d102      	bne.n	80073b4 <_fstat_r+0x1c>
 80073ae:	682b      	ldr	r3, [r5, #0]
 80073b0:	b103      	cbz	r3, 80073b4 <_fstat_r+0x1c>
 80073b2:	6023      	str	r3, [r4, #0]
 80073b4:	bd38      	pop	{r3, r4, r5, pc}
 80073b6:	bf00      	nop
 80073b8:	200001d4 	.word	0x200001d4

080073bc <_isatty_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4d06      	ldr	r5, [pc, #24]	; (80073d8 <_isatty_r+0x1c>)
 80073c0:	2300      	movs	r3, #0
 80073c2:	4604      	mov	r4, r0
 80073c4:	4608      	mov	r0, r1
 80073c6:	602b      	str	r3, [r5, #0]
 80073c8:	f7fb ffe1 	bl	800338e <_isatty>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d102      	bne.n	80073d6 <_isatty_r+0x1a>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	b103      	cbz	r3, 80073d6 <_isatty_r+0x1a>
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	200001d4 	.word	0x200001d4

080073dc <_lseek_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	4d07      	ldr	r5, [pc, #28]	; (80073fc <_lseek_r+0x20>)
 80073e0:	4604      	mov	r4, r0
 80073e2:	4608      	mov	r0, r1
 80073e4:	4611      	mov	r1, r2
 80073e6:	2200      	movs	r2, #0
 80073e8:	602a      	str	r2, [r5, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	f7fb ffda 	bl	80033a4 <_lseek>
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	d102      	bne.n	80073fa <_lseek_r+0x1e>
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	b103      	cbz	r3, 80073fa <_lseek_r+0x1e>
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	bd38      	pop	{r3, r4, r5, pc}
 80073fc:	200001d4 	.word	0x200001d4

08007400 <__malloc_lock>:
 8007400:	4801      	ldr	r0, [pc, #4]	; (8007408 <__malloc_lock+0x8>)
 8007402:	f7ff bb55 	b.w	8006ab0 <__retarget_lock_acquire_recursive>
 8007406:	bf00      	nop
 8007408:	200001cc 	.word	0x200001cc

0800740c <__malloc_unlock>:
 800740c:	4801      	ldr	r0, [pc, #4]	; (8007414 <__malloc_unlock+0x8>)
 800740e:	f7ff bb50 	b.w	8006ab2 <__retarget_lock_release_recursive>
 8007412:	bf00      	nop
 8007414:	200001cc 	.word	0x200001cc

08007418 <_read_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4d07      	ldr	r5, [pc, #28]	; (8007438 <_read_r+0x20>)
 800741c:	4604      	mov	r4, r0
 800741e:	4608      	mov	r0, r1
 8007420:	4611      	mov	r1, r2
 8007422:	2200      	movs	r2, #0
 8007424:	602a      	str	r2, [r5, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	f7fb ff5c 	bl	80032e4 <_read>
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d102      	bne.n	8007436 <_read_r+0x1e>
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	b103      	cbz	r3, 8007436 <_read_r+0x1e>
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	bd38      	pop	{r3, r4, r5, pc}
 8007438:	200001d4 	.word	0x200001d4

0800743c <_init>:
 800743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743e:	bf00      	nop
 8007440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007442:	bc08      	pop	{r3}
 8007444:	469e      	mov	lr, r3
 8007446:	4770      	bx	lr

08007448 <_fini>:
 8007448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744a:	bf00      	nop
 800744c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744e:	bc08      	pop	{r3}
 8007450:	469e      	mov	lr, r3
 8007452:	4770      	bx	lr
