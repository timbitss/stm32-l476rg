
UART-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e104  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014e0  0800e298  0800e298  0001e298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f778  0800f778  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f778  0800f778  0001f778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f780  0800f780  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f780  0800f780  0001f780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f784  0800f784  0001f784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800f788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f28  200001e8  0800f970  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005110  0800f970  00025110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b06f  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005583  00000000  00000000  0004b287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e18  00000000  00000000  00050810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c50  00000000  00000000  00052628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cfae  00000000  00000000  00054278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021e66  00000000  00000000  00081226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010df3a  00000000  00000000  000a308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b0fc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082bc  00000000  00000000  001b101c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e27c 	.word	0x0800e27c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800e27c 	.word	0x0800e27c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_drsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e8:	e002      	b.n	80001f0 <__adddf3>
 80001ea:	bf00      	nop

080001ec <__aeabi_dsub>:
 80001ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f0 <__adddf3>:
 80001f0:	b530      	push	{r4, r5, lr}
 80001f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fa:	ea94 0f05 	teq	r4, r5
 80001fe:	bf08      	it	eq
 8000200:	ea90 0f02 	teqeq	r0, r2
 8000204:	bf1f      	itttt	ne
 8000206:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000216:	f000 80e2 	beq.w	80003de <__adddf3+0x1ee>
 800021a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000222:	bfb8      	it	lt
 8000224:	426d      	neglt	r5, r5
 8000226:	dd0c      	ble.n	8000242 <__adddf3+0x52>
 8000228:	442c      	add	r4, r5
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	ea82 0000 	eor.w	r0, r2, r0
 8000236:	ea83 0101 	eor.w	r1, r3, r1
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	2d36      	cmp	r5, #54	; 0x36
 8000244:	bf88      	it	hi
 8000246:	bd30      	pophi	{r4, r5, pc}
 8000248:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800024c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000250:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x70>
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000264:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x84>
 800026e:	4252      	negs	r2, r2
 8000270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000274:	ea94 0f05 	teq	r4, r5
 8000278:	f000 80a7 	beq.w	80003ca <__adddf3+0x1da>
 800027c:	f1a4 0401 	sub.w	r4, r4, #1
 8000280:	f1d5 0e20 	rsbs	lr, r5, #32
 8000284:	db0d      	blt.n	80002a2 <__adddf3+0xb2>
 8000286:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028a:	fa22 f205 	lsr.w	r2, r2, r5
 800028e:	1880      	adds	r0, r0, r2
 8000290:	f141 0100 	adc.w	r1, r1, #0
 8000294:	fa03 f20e 	lsl.w	r2, r3, lr
 8000298:	1880      	adds	r0, r0, r2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	4159      	adcs	r1, r3
 80002a0:	e00e      	b.n	80002c0 <__adddf3+0xd0>
 80002a2:	f1a5 0520 	sub.w	r5, r5, #32
 80002a6:	f10e 0e20 	add.w	lr, lr, #32
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b0:	bf28      	it	cs
 80002b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	18c0      	adds	r0, r0, r3
 80002bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c4:	d507      	bpl.n	80002d6 <__adddf3+0xe6>
 80002c6:	f04f 0e00 	mov.w	lr, #0
 80002ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002da:	d31b      	bcc.n	8000314 <__adddf3+0x124>
 80002dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e0:	d30c      	bcc.n	80002fc <__adddf3+0x10c>
 80002e2:	0849      	lsrs	r1, r1, #1
 80002e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ec:	f104 0401 	add.w	r4, r4, #1
 80002f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f8:	f080 809a 	bcs.w	8000430 <__adddf3+0x240>
 80002fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000300:	bf08      	it	eq
 8000302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000306:	f150 0000 	adcs.w	r0, r0, #0
 800030a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030e:	ea41 0105 	orr.w	r1, r1, r5
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000318:	4140      	adcs	r0, r0
 800031a:	eb41 0101 	adc.w	r1, r1, r1
 800031e:	3c01      	subs	r4, #1
 8000320:	bf28      	it	cs
 8000322:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000326:	d2e9      	bcs.n	80002fc <__adddf3+0x10c>
 8000328:	f091 0f00 	teq	r1, #0
 800032c:	bf04      	itt	eq
 800032e:	4601      	moveq	r1, r0
 8000330:	2000      	moveq	r0, #0
 8000332:	fab1 f381 	clz	r3, r1
 8000336:	bf08      	it	eq
 8000338:	3320      	addeq	r3, #32
 800033a:	f1a3 030b 	sub.w	r3, r3, #11
 800033e:	f1b3 0220 	subs.w	r2, r3, #32
 8000342:	da0c      	bge.n	800035e <__adddf3+0x16e>
 8000344:	320c      	adds	r2, #12
 8000346:	dd08      	ble.n	800035a <__adddf3+0x16a>
 8000348:	f102 0c14 	add.w	ip, r2, #20
 800034c:	f1c2 020c 	rsb	r2, r2, #12
 8000350:	fa01 f00c 	lsl.w	r0, r1, ip
 8000354:	fa21 f102 	lsr.w	r1, r1, r2
 8000358:	e00c      	b.n	8000374 <__adddf3+0x184>
 800035a:	f102 0214 	add.w	r2, r2, #20
 800035e:	bfd8      	it	le
 8000360:	f1c2 0c20 	rsble	ip, r2, #32
 8000364:	fa01 f102 	lsl.w	r1, r1, r2
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	bfdc      	itt	le
 800036e:	ea41 010c 	orrle.w	r1, r1, ip
 8000372:	4090      	lslle	r0, r2
 8000374:	1ae4      	subs	r4, r4, r3
 8000376:	bfa2      	ittt	ge
 8000378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800037c:	4329      	orrge	r1, r5
 800037e:	bd30      	popge	{r4, r5, pc}
 8000380:	ea6f 0404 	mvn.w	r4, r4
 8000384:	3c1f      	subs	r4, #31
 8000386:	da1c      	bge.n	80003c2 <__adddf3+0x1d2>
 8000388:	340c      	adds	r4, #12
 800038a:	dc0e      	bgt.n	80003aa <__adddf3+0x1ba>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0220 	rsb	r2, r4, #32
 8000394:	fa20 f004 	lsr.w	r0, r0, r4
 8000398:	fa01 f302 	lsl.w	r3, r1, r2
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	fa21 f304 	lsr.w	r3, r1, r4
 80003a4:	ea45 0103 	orr.w	r1, r5, r3
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f1c4 040c 	rsb	r4, r4, #12
 80003ae:	f1c4 0220 	rsb	r2, r4, #32
 80003b2:	fa20 f002 	lsr.w	r0, r0, r2
 80003b6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ba:	ea40 0003 	orr.w	r0, r0, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	fa21 f004 	lsr.w	r0, r1, r4
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f094 0f00 	teq	r4, #0
 80003ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d2:	bf06      	itte	eq
 80003d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d8:	3401      	addeq	r4, #1
 80003da:	3d01      	subne	r5, #1
 80003dc:	e74e      	b.n	800027c <__adddf3+0x8c>
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf18      	it	ne
 80003e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e8:	d029      	beq.n	800043e <__adddf3+0x24e>
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	d005      	beq.n	8000402 <__adddf3+0x212>
 80003f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fa:	bf04      	itt	eq
 80003fc:	4619      	moveq	r1, r3
 80003fe:	4610      	moveq	r0, r2
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	ea91 0f03 	teq	r1, r3
 8000406:	bf1e      	ittt	ne
 8000408:	2100      	movne	r1, #0
 800040a:	2000      	movne	r0, #0
 800040c:	bd30      	popne	{r4, r5, pc}
 800040e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000412:	d105      	bne.n	8000420 <__adddf3+0x230>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	4149      	adcs	r1, r1
 8000418:	bf28      	it	cs
 800041a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000424:	bf3c      	itt	cc
 8000426:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042a:	bd30      	popcc	{r4, r5, pc}
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000430:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000434:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf1a      	itte	ne
 8000444:	4619      	movne	r1, r3
 8000446:	4610      	movne	r0, r2
 8000448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800044c:	bf1c      	itt	ne
 800044e:	460b      	movne	r3, r1
 8000450:	4602      	movne	r2, r0
 8000452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000456:	bf06      	itte	eq
 8000458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800045c:	ea91 0f03 	teqeq	r1, r3
 8000460:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	bf00      	nop

08000468 <__aeabi_ui2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047c:	f04f 0500 	mov.w	r5, #0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e750      	b.n	8000328 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_i2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a0:	bf48      	it	mi
 80004a2:	4240      	negmi	r0, r0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e73e      	b.n	8000328 <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_f2d>:
 80004ac:	0042      	lsls	r2, r0, #1
 80004ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ba:	bf1f      	itttt	ne
 80004bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c8:	4770      	bxne	lr
 80004ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ce:	bf08      	it	eq
 80004d0:	4770      	bxeq	lr
 80004d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d6:	bf04      	itt	eq
 80004d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e71c      	b.n	8000328 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aed8 	beq.w	80002d6 <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6bd      	b.n	80002d6 <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__gedf2>:
 8000980:	f04f 3cff 	mov.w	ip, #4294967295
 8000984:	e006      	b.n	8000994 <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__ledf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	e002      	b.n	8000994 <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__cmpdf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009aa:	d01b      	beq.n	80009e4 <__cmpdf2+0x54>
 80009ac:	b001      	add	sp, #4
 80009ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b2:	bf0c      	ite	eq
 80009b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b8:	ea91 0f03 	teqne	r1, r3
 80009bc:	bf02      	ittt	eq
 80009be:	ea90 0f02 	teqeq	r0, r2
 80009c2:	2000      	moveq	r0, #0
 80009c4:	4770      	bxeq	lr
 80009c6:	f110 0f00 	cmn.w	r0, #0
 80009ca:	ea91 0f03 	teq	r1, r3
 80009ce:	bf58      	it	pl
 80009d0:	4299      	cmppl	r1, r3
 80009d2:	bf08      	it	eq
 80009d4:	4290      	cmpeq	r0, r2
 80009d6:	bf2c      	ite	cs
 80009d8:	17d8      	asrcs	r0, r3, #31
 80009da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009de:	f040 0001 	orr.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	d102      	bne.n	80009f4 <__cmpdf2+0x64>
 80009ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f2:	d107      	bne.n	8000a04 <__cmpdf2+0x74>
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d1d6      	bne.n	80009ac <__cmpdf2+0x1c>
 80009fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a02:	d0d3      	beq.n	80009ac <__cmpdf2+0x1c>
 8000a04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_cdrcmple>:
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4662      	mov	r2, ip
 8000a12:	468c      	mov	ip, r1
 8000a14:	4619      	mov	r1, r3
 8000a16:	4663      	mov	r3, ip
 8000a18:	e000      	b.n	8000a1c <__aeabi_cdcmpeq>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdcmpeq>:
 8000a1c:	b501      	push	{r0, lr}
 8000a1e:	f7ff ffb7 	bl	8000990 <__cmpdf2>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	bf48      	it	mi
 8000a26:	f110 0f00 	cmnmi.w	r0, #0
 8000a2a:	bd01      	pop	{r0, pc}

08000a2c <__aeabi_dcmpeq>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff fff4 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a34:	bf0c      	ite	eq
 8000a36:	2001      	moveq	r0, #1
 8000a38:	2000      	movne	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmplt>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffea 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a48:	bf34      	ite	cc
 8000a4a:	2001      	movcc	r0, #1
 8000a4c:	2000      	movcs	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmple>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffe0 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpge>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffce 	bl	8000a0c <__aeabi_cdrcmple>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpgt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffc4 	bl	8000a0c <__aeabi_cdrcmple>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_d2iz>:
 8000a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a98:	d215      	bcs.n	8000ac6 <__aeabi_d2iz+0x36>
 8000a9a:	d511      	bpl.n	8000ac0 <__aeabi_d2iz+0x30>
 8000a9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa4:	d912      	bls.n	8000acc <__aeabi_d2iz+0x3c>
 8000aa6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aba:	bf18      	it	ne
 8000abc:	4240      	negne	r0, r0
 8000abe:	4770      	bx	lr
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aca:	d105      	bne.n	8000ad8 <__aeabi_d2iz+0x48>
 8000acc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	bf08      	it	eq
 8000ad2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_d2uiz>:
 8000ae0:	004a      	lsls	r2, r1, #1
 8000ae2:	d211      	bcs.n	8000b08 <__aeabi_d2uiz+0x28>
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d211      	bcs.n	8000b0e <__aeabi_d2uiz+0x2e>
 8000aea:	d50d      	bpl.n	8000b08 <__aeabi_d2uiz+0x28>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d40e      	bmi.n	8000b14 <__aeabi_d2uiz+0x34>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_d2uiz+0x3a>
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2f>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b28:	bf24      	itt	cs
 8000b2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b32:	d90d      	bls.n	8000b50 <__aeabi_d2f+0x30>
 8000b34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b48:	bf08      	it	eq
 8000b4a:	f020 0001 	biceq.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b54:	d121      	bne.n	8000b9a <__aeabi_d2f+0x7a>
 8000b56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5a:	bfbc      	itt	lt
 8000b5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	4770      	bxlt	lr
 8000b62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6a:	f1c2 0218 	rsb	r2, r2, #24
 8000b6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b76:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	f040 0001 	orrne.w	r0, r0, #1
 8000b80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b8c:	ea40 000c 	orr.w	r0, r0, ip
 8000b90:	fa23 f302 	lsr.w	r3, r3, r2
 8000b94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b98:	e7cc      	b.n	8000b34 <__aeabi_d2f+0x14>
 8000b9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9e:	d107      	bne.n	8000bb0 <__aeabi_d2f+0x90>
 8000ba0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba4:	bf1e      	ittt	ne
 8000ba6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000baa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bae:	4770      	bxne	lr
 8000bb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd4:	f000 b96e 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf4:	9d08      	ldr	r5, [sp, #32]
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	468c      	mov	ip, r1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f040 8083 	bne.w	8000d06 <__udivmoddi4+0x116>
 8000c00:	428a      	cmp	r2, r1
 8000c02:	4617      	mov	r7, r2
 8000c04:	d947      	bls.n	8000c96 <__udivmoddi4+0xa6>
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	b142      	cbz	r2, 8000c1e <__udivmoddi4+0x2e>
 8000c0c:	f1c2 0020 	rsb	r0, r2, #32
 8000c10:	fa24 f000 	lsr.w	r0, r4, r0
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4097      	lsls	r7, r2
 8000c18:	ea40 0c01 	orr.w	ip, r0, r1
 8000c1c:	4094      	lsls	r4, r2
 8000c1e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c22:	0c23      	lsrs	r3, r4, #16
 8000c24:	fbbc f6f8 	udiv	r6, ip, r8
 8000c28:	fa1f fe87 	uxth.w	lr, r7
 8000c2c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c34:	fb06 f10e 	mul.w	r1, r6, lr
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	d909      	bls.n	8000c50 <__udivmoddi4+0x60>
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c42:	f080 8119 	bcs.w	8000e78 <__udivmoddi4+0x288>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 8116 	bls.w	8000e78 <__udivmoddi4+0x288>
 8000c4c:	3e02      	subs	r6, #2
 8000c4e:	443b      	add	r3, r7
 8000c50:	1a5b      	subs	r3, r3, r1
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c58:	fb08 3310 	mls	r3, r8, r0, r3
 8000c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c64:	45a6      	cmp	lr, r4
 8000c66:	d909      	bls.n	8000c7c <__udivmoddi4+0x8c>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	f080 8105 	bcs.w	8000e7c <__udivmoddi4+0x28c>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f240 8102 	bls.w	8000e7c <__udivmoddi4+0x28c>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	443c      	add	r4, r7
 8000c7c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c80:	eba4 040e 	sub.w	r4, r4, lr
 8000c84:	2600      	movs	r6, #0
 8000c86:	b11d      	cbz	r5, 8000c90 <__udivmoddi4+0xa0>
 8000c88:	40d4      	lsrs	r4, r2
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	b902      	cbnz	r2, 8000c9a <__udivmoddi4+0xaa>
 8000c98:	deff      	udf	#255	; 0xff
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d150      	bne.n	8000d44 <__udivmoddi4+0x154>
 8000ca2:	1bcb      	subs	r3, r1, r7
 8000ca4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca8:	fa1f f887 	uxth.w	r8, r7
 8000cac:	2601      	movs	r6, #1
 8000cae:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cb2:	0c21      	lsrs	r1, r4, #16
 8000cb4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbc:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0xe4>
 8000cc4:	1879      	adds	r1, r7, r1
 8000cc6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0xe2>
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	f200 80e9 	bhi.w	8000ea4 <__udivmoddi4+0x2b4>
 8000cd2:	4684      	mov	ip, r0
 8000cd4:	1ac9      	subs	r1, r1, r3
 8000cd6:	b2a3      	uxth	r3, r4
 8000cd8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cdc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ce4:	fb08 f800 	mul.w	r8, r8, r0
 8000ce8:	45a0      	cmp	r8, r4
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x10c>
 8000cec:	193c      	adds	r4, r7, r4
 8000cee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x10a>
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	f200 80d9 	bhi.w	8000eac <__udivmoddi4+0x2bc>
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	eba4 0408 	sub.w	r4, r4, r8
 8000d00:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d04:	e7bf      	b.n	8000c86 <__udivmoddi4+0x96>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d909      	bls.n	8000d1e <__udivmoddi4+0x12e>
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	f000 80b1 	beq.w	8000e72 <__udivmoddi4+0x282>
 8000d10:	2600      	movs	r6, #0
 8000d12:	e9c5 0100 	strd	r0, r1, [r5]
 8000d16:	4630      	mov	r0, r6
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	fab3 f683 	clz	r6, r3
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d14a      	bne.n	8000dbc <__udivmoddi4+0x1cc>
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d302      	bcc.n	8000d30 <__udivmoddi4+0x140>
 8000d2a:	4282      	cmp	r2, r0
 8000d2c:	f200 80b8 	bhi.w	8000ea0 <__udivmoddi4+0x2b0>
 8000d30:	1a84      	subs	r4, r0, r2
 8000d32:	eb61 0103 	sbc.w	r1, r1, r3
 8000d36:	2001      	movs	r0, #1
 8000d38:	468c      	mov	ip, r1
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	d0a8      	beq.n	8000c90 <__udivmoddi4+0xa0>
 8000d3e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0xa0>
 8000d44:	f1c2 0320 	rsb	r3, r2, #32
 8000d48:	fa20 f603 	lsr.w	r6, r0, r3
 8000d4c:	4097      	lsls	r7, r2
 8000d4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d52:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d56:	40d9      	lsrs	r1, r3
 8000d58:	4330      	orrs	r0, r6
 8000d5a:	0c03      	lsrs	r3, r0, #16
 8000d5c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6c:	fb06 f108 	mul.w	r1, r6, r8
 8000d70:	4299      	cmp	r1, r3
 8000d72:	fa04 f402 	lsl.w	r4, r4, r2
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x19c>
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d7e:	f080 808d 	bcs.w	8000e9c <__udivmoddi4+0x2ac>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 808a 	bls.w	8000e9c <__udivmoddi4+0x2ac>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	443b      	add	r3, r7
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b281      	uxth	r1, r0
 8000d90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9c:	fb00 f308 	mul.w	r3, r0, r8
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x1c4>
 8000da4:	1879      	adds	r1, r7, r1
 8000da6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000daa:	d273      	bcs.n	8000e94 <__udivmoddi4+0x2a4>
 8000dac:	428b      	cmp	r3, r1
 8000dae:	d971      	bls.n	8000e94 <__udivmoddi4+0x2a4>
 8000db0:	3802      	subs	r0, #2
 8000db2:	4439      	add	r1, r7
 8000db4:	1acb      	subs	r3, r1, r3
 8000db6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dba:	e778      	b.n	8000cae <__udivmoddi4+0xbe>
 8000dbc:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc0:	fa03 f406 	lsl.w	r4, r3, r6
 8000dc4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc8:	431c      	orrs	r4, r3
 8000dca:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dce:	fa01 f306 	lsl.w	r3, r1, r6
 8000dd2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dd6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dda:	431f      	orrs	r7, r3
 8000ddc:	0c3b      	lsrs	r3, r7, #16
 8000dde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000de2:	fa1f f884 	uxth.w	r8, r4
 8000de6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dee:	fb09 fa08 	mul.w	sl, r9, r8
 8000df2:	458a      	cmp	sl, r1
 8000df4:	fa02 f206 	lsl.w	r2, r2, r6
 8000df8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x220>
 8000dfe:	1861      	adds	r1, r4, r1
 8000e00:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e04:	d248      	bcs.n	8000e98 <__udivmoddi4+0x2a8>
 8000e06:	458a      	cmp	sl, r1
 8000e08:	d946      	bls.n	8000e98 <__udivmoddi4+0x2a8>
 8000e0a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e0e:	4421      	add	r1, r4
 8000e10:	eba1 010a 	sub.w	r1, r1, sl
 8000e14:	b2bf      	uxth	r7, r7
 8000e16:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e1a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e1e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e22:	fb00 f808 	mul.w	r8, r0, r8
 8000e26:	45b8      	cmp	r8, r7
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x24a>
 8000e2a:	19e7      	adds	r7, r4, r7
 8000e2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e30:	d22e      	bcs.n	8000e90 <__udivmoddi4+0x2a0>
 8000e32:	45b8      	cmp	r8, r7
 8000e34:	d92c      	bls.n	8000e90 <__udivmoddi4+0x2a0>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4427      	add	r7, r4
 8000e3a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e3e:	eba7 0708 	sub.w	r7, r7, r8
 8000e42:	fba0 8902 	umull	r8, r9, r0, r2
 8000e46:	454f      	cmp	r7, r9
 8000e48:	46c6      	mov	lr, r8
 8000e4a:	4649      	mov	r1, r9
 8000e4c:	d31a      	bcc.n	8000e84 <__udivmoddi4+0x294>
 8000e4e:	d017      	beq.n	8000e80 <__udivmoddi4+0x290>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x27a>
 8000e52:	ebb3 020e 	subs.w	r2, r3, lr
 8000e56:	eb67 0701 	sbc.w	r7, r7, r1
 8000e5a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e5e:	40f2      	lsrs	r2, r6
 8000e60:	ea4c 0202 	orr.w	r2, ip, r2
 8000e64:	40f7      	lsrs	r7, r6
 8000e66:	e9c5 2700 	strd	r2, r7, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	462e      	mov	r6, r5
 8000e74:	4628      	mov	r0, r5
 8000e76:	e70b      	b.n	8000c90 <__udivmoddi4+0xa0>
 8000e78:	4606      	mov	r6, r0
 8000e7a:	e6e9      	b.n	8000c50 <__udivmoddi4+0x60>
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	e6fd      	b.n	8000c7c <__udivmoddi4+0x8c>
 8000e80:	4543      	cmp	r3, r8
 8000e82:	d2e5      	bcs.n	8000e50 <__udivmoddi4+0x260>
 8000e84:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e88:	eb69 0104 	sbc.w	r1, r9, r4
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	e7df      	b.n	8000e50 <__udivmoddi4+0x260>
 8000e90:	4608      	mov	r0, r1
 8000e92:	e7d2      	b.n	8000e3a <__udivmoddi4+0x24a>
 8000e94:	4660      	mov	r0, ip
 8000e96:	e78d      	b.n	8000db4 <__udivmoddi4+0x1c4>
 8000e98:	4681      	mov	r9, r0
 8000e9a:	e7b9      	b.n	8000e10 <__udivmoddi4+0x220>
 8000e9c:	4666      	mov	r6, ip
 8000e9e:	e775      	b.n	8000d8c <__udivmoddi4+0x19c>
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e74a      	b.n	8000d3a <__udivmoddi4+0x14a>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	4439      	add	r1, r7
 8000eaa:	e713      	b.n	8000cd4 <__udivmoddi4+0xe4>
 8000eac:	3802      	subs	r0, #2
 8000eae:	443c      	add	r4, r7
 8000eb0:	e724      	b.n	8000cfc <__udivmoddi4+0x10c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <MAX31855K_Init>:

/* Unique module tag for logging information */
static const char* TAG = "MAX";

void MAX31855K_Init(MAX31855K_cfg_t const * const max_cfg)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    max.spi_handle = max_cfg->hspi;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <MAX31855K_Init+0x48>)
 8000ec6:	6013      	str	r3, [r2, #0]
    max.cs_port = max_cfg->max_cs_port;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <MAX31855K_Init+0x48>)
 8000ece:	6053      	str	r3, [r2, #4]
    max.cs_pin = max_cfg->max_cs_pin;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	891a      	ldrh	r2, [r3, #8]
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <MAX31855K_Init+0x48>)
 8000ed6:	811a      	strh	r2, [r3, #8]
    memset(max.tx_buf, 0, sizeof(max.tx_buf));
 8000ed8:	2204      	movs	r2, #4
 8000eda:	2100      	movs	r1, #0
 8000edc:	4809      	ldr	r0, [pc, #36]	; (8000f04 <MAX31855K_Init+0x4c>)
 8000ede:	f00d f8cd 	bl	800e07c <memset>
    memset(max.rx_buf, 0, sizeof(max.rx_buf));
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4808      	ldr	r0, [pc, #32]	; (8000f08 <MAX31855K_Init+0x50>)
 8000ee8:	f00d f8c8 	bl	800e07c <memset>
    max.data32 = 0;
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <MAX31855K_Init+0x48>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
    max.err = MAX_OK;
 8000ef2:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <MAX31855K_Init+0x48>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000204 	.word	0x20000204
 8000f04:	2000020e 	.word	0x2000020e
 8000f08:	20000212 	.word	0x20000212

08000f0c <MAX31855K_RxBlocking>:

MAX31855K_err_t MAX31855K_RxBlocking()
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
    /* Acquire data from MAX31855K */
    HAL_GPIO_WritePin(max.cs_port, max.cs_pin, GPIO_PIN_RESET); // Assert CS line to start transaction.
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	4a16      	ldr	r2, [pc, #88]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f16:	8911      	ldrh	r1, [r2, #8]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f005 fcb0 	bl	8006880 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(max.spi_handle,                              // Sample 4 bytes off MISO line.
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	2204      	movs	r2, #4
 8000f2a:	4912      	ldr	r1, [pc, #72]	; (8000f74 <MAX31855K_RxBlocking+0x68>)
 8000f2c:	f007 f88b 	bl	8008046 <HAL_SPI_Receive>
                    max.rx_buf,
                    sizeof(max.rx_buf),
                    HAL_MAX_DELAY);
    HAL_GPIO_WritePin(max.cs_port, max.cs_pin, GPIO_PIN_SET); // Deassert CS line to end transaction.
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f36:	8911      	ldrh	r1, [r2, #8]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f005 fca0 	bl	8006880 <HAL_GPIO_WritePin>
    max.data32 = max.rx_buf[0] << 24 | (max.rx_buf[1] << 16) | (max.rx_buf[2] << 8) | max.rx_buf[3];
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f42:	7b9b      	ldrb	r3, [r3, #14]
 8000f44:	061a      	lsls	r2, r3, #24
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f48:	7bdb      	ldrb	r3, [r3, #15]
 8000f4a:	041b      	lsls	r3, r3, #16
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f50:	7c1b      	ldrb	r3, [r3, #16]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	4313      	orrs	r3, r2
 8000f56:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f58:	7c52      	ldrb	r2, [r2, #17]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f60:	615a      	str	r2, [r3, #20]

    /* Check for faults. */
    MAX31855K_error_check();
 8000f62:	f000 f83d 	bl	8000fe0 <MAX31855K_error_check>

    return max.err;
 8000f66:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <MAX31855K_RxBlocking+0x64>)
 8000f68:	7e1b      	ldrb	r3, [r3, #24]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000204 	.word	0x20000204
 8000f74:	20000212 	.word	0x20000212

08000f78 <MAX31855K_Get_HJ>:
    max.data32 = max.rx_buf[0] << 24 | (max.rx_buf[1] << 16) | (max.rx_buf[2] << 8) | max.rx_buf[3];
    MAX31855K_error_check();
}

float MAX31855K_Get_HJ()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
    /* Extract HJ temperature. */
    uint32_t data = max.data32;    // Capture latest data reading.
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MAX31855K_Get_HJ+0x60>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	603b      	str	r3, [r7, #0]
    int16_t val = 0;                // Value prior to temperature conversion.
 8000f84:	2300      	movs	r3, #0
 8000f86:	80fb      	strh	r3, [r7, #6]
    if (data & ((uint32_t)1 << 31)) // Perform sign-extension.
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	da09      	bge.n	8000fa2 <MAX31855K_Get_HJ+0x2a>
    {
        val = 0xC000 | ((data >> 18) & 0x3FFF);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	0c9b      	lsrs	r3, r3, #18
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8000f98:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	80fb      	strh	r3, [r7, #6]
 8000fa0:	e002      	b.n	8000fa8 <MAX31855K_Get_HJ+0x30>
    }
    else
    {
        val = data >> 18;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	0c9b      	lsrs	r3, r3, #18
 8000fa6:	80fb      	strh	r3, [r7, #6]
    }
    return val * HJ_RES;
 8000fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fa6b 	bl	8000488 <__aeabi_i2d>
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MAX31855K_Get_HJ+0x64>)
 8000fb8:	f7ff fad0 	bl	800055c <__aeabi_dmul>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f7ff fdac 	bl	8000b20 <__aeabi_d2f>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	ee07 3a90 	vmov	s15, r3
}
 8000fce:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000204 	.word	0x20000204
 8000fdc:	3fd00000 	.word	0x3fd00000

08000fe0 <MAX31855K_error_check>:
    return val * CJ_RES;
}


static void MAX31855K_error_check()
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af02      	add	r7, sp, #8
    if (max.data32 == 0)
 8000fe6:	4b61      	ldr	r3, [pc, #388]	; (800116c <MAX31855K_error_check+0x18c>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d103      	bne.n	8000ff6 <MAX31855K_error_check+0x16>
    {
        max.err = MAX_ZEROS;
 8000fee:	4b5f      	ldr	r3, [pc, #380]	; (800116c <MAX31855K_error_check+0x18c>)
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	761a      	strb	r2, [r3, #24]
    }
    else
    {
        max.err = MAX_OK;
    }
}
 8000ff4:	e0b6      	b.n	8001164 <MAX31855K_error_check+0x184>
    else if (max.data32 & ((uint32_t)1 << 16))
 8000ff6:	4b5d      	ldr	r3, [pc, #372]	; (800116c <MAX31855K_error_check+0x18c>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 80a7 	beq.w	8001152 <MAX31855K_error_check+0x172>
        uint8_t fault = max.data32 & 0x7;
 8001004:	4b59      	ldr	r3, [pc, #356]	; (800116c <MAX31855K_error_check+0x18c>)
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	75fb      	strb	r3, [r7, #23]
        switch (fault)
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	2b04      	cmp	r3, #4
 8001014:	d007      	beq.n	8001026 <MAX31855K_error_check+0x46>
 8001016:	2b04      	cmp	r3, #4
 8001018:	f300 8082 	bgt.w	8001120 <MAX31855K_error_check+0x140>
 800101c:	2b01      	cmp	r3, #1
 800101e:	d056      	beq.n	80010ce <MAX31855K_error_check+0xee>
 8001020:	2b02      	cmp	r3, #2
 8001022:	d02b      	beq.n	800107c <MAX31855K_error_check+0x9c>
 8001024:	e07c      	b.n	8001120 <MAX31855K_error_check+0x140>
            max.err = MAX_SHORT_VCC;
 8001026:	4b51      	ldr	r3, [pc, #324]	; (800116c <MAX31855K_error_check+0x18c>)
 8001028:	2201      	movs	r2, #1
 800102a:	761a      	strb	r2, [r3, #24]
            LOGE(TAG, "Thermocouple shorted to VCC.");
 800102c:	4b50      	ldr	r3, [pc, #320]	; (8001170 <MAX31855K_error_check+0x190>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 8092 	beq.w	800115a <MAX31855K_error_check+0x17a>
 8001036:	4b4f      	ldr	r3, [pc, #316]	; (8001174 <MAX31855K_error_check+0x194>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f340 808d 	ble.w	800115a <MAX31855K_error_check+0x17a>
 8001040:	f005 f986 	bl	8006350 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]
 8001046:	4b4c      	ldr	r3, [pc, #304]	; (8001178 <MAX31855K_error_check+0x198>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4a4b      	ldr	r2, [pc, #300]	; (800117c <MAX31855K_error_check+0x19c>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	0999      	lsrs	r1, r3, #6
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4b49      	ldr	r3, [pc, #292]	; (800117c <MAX31855K_error_check+0x19c>)
 8001058:	fba3 4302 	umull	r4, r3, r3, r2
 800105c:	099b      	lsrs	r3, r3, #6
 800105e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001062:	fb04 f303 	mul.w	r3, r4, r3
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	4a43      	ldr	r2, [pc, #268]	; (8001178 <MAX31855K_error_check+0x198>)
 800106a:	6812      	ldr	r2, [r2, #0]
 800106c:	9201      	str	r2, [sp, #4]
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	460b      	mov	r3, r1
 8001072:	4a43      	ldr	r2, [pc, #268]	; (8001180 <MAX31855K_error_check+0x1a0>)
 8001074:	2101      	movs	r1, #1
 8001076:	f001 f903 	bl	8002280 <log_printf>
            break;
 800107a:	e06e      	b.n	800115a <MAX31855K_error_check+0x17a>
            max.err = MAX_SHORT_GND;
 800107c:	4b3b      	ldr	r3, [pc, #236]	; (800116c <MAX31855K_error_check+0x18c>)
 800107e:	2202      	movs	r2, #2
 8001080:	761a      	strb	r2, [r3, #24]
            LOGE(TAG, "Thermocouple shorted to GND.");
 8001082:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <MAX31855K_error_check+0x190>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d069      	beq.n	800115e <MAX31855K_error_check+0x17e>
 800108a:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <MAX31855K_error_check+0x194>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	dd65      	ble.n	800115e <MAX31855K_error_check+0x17e>
 8001092:	f005 f95d 	bl	8006350 <HAL_GetTick>
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	4b37      	ldr	r3, [pc, #220]	; (8001178 <MAX31855K_error_check+0x198>)
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4a37      	ldr	r2, [pc, #220]	; (800117c <MAX31855K_error_check+0x19c>)
 80010a0:	fba2 2303 	umull	r2, r3, r2, r3
 80010a4:	0999      	lsrs	r1, r3, #6
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	4b34      	ldr	r3, [pc, #208]	; (800117c <MAX31855K_error_check+0x19c>)
 80010aa:	fba3 4302 	umull	r4, r3, r3, r2
 80010ae:	099b      	lsrs	r3, r3, #6
 80010b0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80010b4:	fb04 f303 	mul.w	r3, r4, r3
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <MAX31855K_error_check+0x198>)
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	9201      	str	r2, [sp, #4]
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	460b      	mov	r3, r1
 80010c4:	4a2f      	ldr	r2, [pc, #188]	; (8001184 <MAX31855K_error_check+0x1a4>)
 80010c6:	2101      	movs	r1, #1
 80010c8:	f001 f8da 	bl	8002280 <log_printf>
            break;
 80010cc:	e047      	b.n	800115e <MAX31855K_error_check+0x17e>
            max.err = MAX_OPEN;
 80010ce:	4b27      	ldr	r3, [pc, #156]	; (800116c <MAX31855K_error_check+0x18c>)
 80010d0:	2203      	movs	r2, #3
 80010d2:	761a      	strb	r2, [r3, #24]
            LOGE(TAG, "Thermocouple open.");
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <MAX31855K_error_check+0x190>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d042      	beq.n	8001162 <MAX31855K_error_check+0x182>
 80010dc:	4b25      	ldr	r3, [pc, #148]	; (8001174 <MAX31855K_error_check+0x194>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	dd3e      	ble.n	8001162 <MAX31855K_error_check+0x182>
 80010e4:	f005 f934 	bl	8006350 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
 80010ea:	4b23      	ldr	r3, [pc, #140]	; (8001178 <MAX31855K_error_check+0x198>)
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	4a22      	ldr	r2, [pc, #136]	; (800117c <MAX31855K_error_check+0x19c>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	0999      	lsrs	r1, r3, #6
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <MAX31855K_error_check+0x19c>)
 80010fc:	fba3 4302 	umull	r4, r3, r3, r2
 8001100:	099b      	lsrs	r3, r3, #6
 8001102:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001106:	fb04 f303 	mul.w	r3, r4, r3
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <MAX31855K_error_check+0x198>)
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	9201      	str	r2, [sp, #4]
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	460b      	mov	r3, r1
 8001116:	4a1c      	ldr	r2, [pc, #112]	; (8001188 <MAX31855K_error_check+0x1a8>)
 8001118:	2101      	movs	r1, #1
 800111a:	f001 f8b1 	bl	8002280 <log_printf>
            break;
 800111e:	e020      	b.n	8001162 <MAX31855K_error_check+0x182>
        	ASSERT(0); // Should never reach this point.
 8001120:	f005 f916 	bl	8006350 <HAL_GetTick>
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <MAX31855K_error_check+0x19c>)
 800112a:	fba2 2303 	umull	r2, r3, r2, r3
 800112e:	0999      	lsrs	r1, r3, #6
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <MAX31855K_error_check+0x19c>)
 8001134:	fba2 0203 	umull	r0, r2, r2, r3
 8001138:	0992      	lsrs	r2, r2, #6
 800113a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800113e:	fb00 f202 	mul.w	r2, r0, r2
 8001142:	1a9a      	subs	r2, r3, r2
 8001144:	23a2      	movs	r3, #162	; 0xa2
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <MAX31855K_error_check+0x1ac>)
 800114a:	4811      	ldr	r0, [pc, #68]	; (8001190 <MAX31855K_error_check+0x1b0>)
 800114c:	f003 fc0c 	bl	8004968 <printf_>
 8001150:	e7fe      	b.n	8001150 <MAX31855K_error_check+0x170>
        max.err = MAX_OK;
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <MAX31855K_error_check+0x18c>)
 8001154:	2200      	movs	r2, #0
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	e004      	b.n	8001164 <MAX31855K_error_check+0x184>
            break;
 800115a:	bf00      	nop
 800115c:	e002      	b.n	8001164 <MAX31855K_error_check+0x184>
            break;
 800115e:	bf00      	nop
 8001160:	e000      	b.n	8001164 <MAX31855K_error_check+0x184>
            break;
 8001162:	bf00      	nop
}
 8001164:	bf00      	nop
 8001166:	371c      	adds	r7, #28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd90      	pop	{r4, r7, pc}
 800116c:	20000204 	.word	0x20000204
 8001170:	20000064 	.word	0x20000064
 8001174:	20000068 	.word	0x20000068
 8001178:	20000000 	.word	0x20000000
 800117c:	10624dd3 	.word	0x10624dd3
 8001180:	0800e29c 	.word	0x0800e29c
 8001184:	0800e2d8 	.word	0x0800e2d8
 8001188:	0800e314 	.word	0x0800e314
 800118c:	0800e344 	.word	0x0800e344
 8001190:	0800e35c 	.word	0x0800e35c

08001194 <Active_ctor>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t Active_ctor(Active *const ao, EventHandler evt_handler)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
    if (evt_handler == NULL || ao == NULL)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <Active_ctor+0x16>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <Active_ctor+0x1a>
    {
        return MOD_ERR_ARG;
 80011aa:	2302      	movs	r3, #2
 80011ac:	e003      	b.n	80011b6 <Active_ctor+0x22>
    }

    ao->evt_handler = evt_handler;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	609a      	str	r2, [r3, #8]
    return MOD_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <Active_start>:

mod_err_t Active_start(Active *const ao,
                       const osThreadAttr_t *const thread_attr,
                       uint32_t msg_count,
                       const osMessageQueueAttr_t *const queue_attr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
    ao->thread_id = osThreadNew(Active_event_loop, (void *)ao, thread_attr);
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	68f9      	ldr	r1, [r7, #12]
 80011d6:	481a      	ldr	r0, [pc, #104]	; (8001240 <Active_start+0x7c>)
 80011d8:	f009 fe3a 	bl	800ae50 <osThreadNew>
 80011dc:	4602      	mov	r2, r0
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	601a      	str	r2, [r3, #0]
    ao->queue_id = osMessageQueueNew(msg_count, sizeof(Event *), queue_attr);
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	2104      	movs	r1, #4
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f009 ffd5 	bl	800b196 <osMessageQueueNew>
 80011ec:	4602      	mov	r2, r0
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	605a      	str	r2, [r3, #4]

    ASSERT(ao->thread_id != NULL && ao->queue_id != NULL);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <Active_start+0x3e>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d118      	bne.n	8001234 <Active_start+0x70>
 8001202:	f005 f8a5 	bl	8006350 <HAL_GetTick>
 8001206:	6178      	str	r0, [r7, #20]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <Active_start+0x80>)
 800120c:	fba2 2303 	umull	r2, r3, r2, r3
 8001210:	0999      	lsrs	r1, r3, #6
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <Active_start+0x80>)
 8001216:	fba2 0203 	umull	r0, r2, r2, r3
 800121a:	0992      	lsrs	r2, r2, #6
 800121c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001220:	fb00 f202 	mul.w	r2, r0, r2
 8001224:	1a9a      	subs	r2, r3, r2
 8001226:	2341      	movs	r3, #65	; 0x41
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <Active_start+0x84>)
 800122c:	4807      	ldr	r0, [pc, #28]	; (800124c <Active_start+0x88>)
 800122e:	f003 fb9b 	bl	8004968 <printf_>
 8001232:	e7fe      	b.n	8001232 <Active_start+0x6e>

    return MOD_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	080014fd 	.word	0x080014fd
 8001244:	10624dd3 	.word	0x10624dd3
 8001248:	0800e39c 	.word	0x0800e39c
 800124c:	0800e3b4 	.word	0x0800e3b4

08001250 <Active_post>:

mod_err_t Active_post(Active *const ao, Event const *const evt)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
    /* Put pointer to event object */
    osStatus_t err = osMessageQueuePut(ao->queue_id, &evt, 0U, 0U);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6858      	ldr	r0, [r3, #4]
 800125e:	4639      	mov	r1, r7
 8001260:	2300      	movs	r3, #0
 8001262:	2200      	movs	r2, #0
 8001264:	f00a f80a 	bl	800b27c <osMessageQueuePut>
 8001268:	60f8      	str	r0, [r7, #12]
    if (err != osOK)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <Active_post+0x24>
    {
        return MOD_ERR_TIMEOUT;
 8001270:	2309      	movs	r3, #9
 8001272:	e000      	b.n	8001276 <Active_post+0x26>
    }

    return MOD_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <TimeEvent_ctor>:

void TimeEvent_ctor(TimeEvent *const time_evt, Signal sig, Active *ao)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af02      	add	r7, sp, #8
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
    /* No critical section because it is presumed that all Time_Events
     * are created *before* multitasking has started. */
    time_evt->base.sig = sig;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	601a      	str	r2, [r3, #0]
    time_evt->ao = ao;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	605a      	str	r2, [r3, #4]
    time_evt->timeout = 0U;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
    time_evt->reload = 0U;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]

    /* Register TimeEvent instance. */
    ASSERT(num_time_events < ARRAY_SIZE(time_events));
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <TimeEvent_ctor+0x7c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b09      	cmp	r3, #9
 80012aa:	d918      	bls.n	80012de <TimeEvent_ctor+0x5e>
 80012ac:	f005 f850 	bl	8006350 <HAL_GetTick>
 80012b0:	6178      	str	r0, [r7, #20]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <TimeEvent_ctor+0x80>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0999      	lsrs	r1, r3, #6
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	4a10      	ldr	r2, [pc, #64]	; (8001300 <TimeEvent_ctor+0x80>)
 80012c0:	fba2 0203 	umull	r0, r2, r2, r3
 80012c4:	0992      	lsrs	r2, r2, #6
 80012c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ca:	fb00 f202 	mul.w	r2, r0, r2
 80012ce:	1a9a      	subs	r2, r3, r2
 80012d0:	235c      	movs	r3, #92	; 0x5c
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <TimeEvent_ctor+0x84>)
 80012d6:	480c      	ldr	r0, [pc, #48]	; (8001308 <TimeEvent_ctor+0x88>)
 80012d8:	f003 fb46 	bl	8004968 <printf_>
 80012dc:	e7fe      	b.n	80012dc <TimeEvent_ctor+0x5c>
    time_events[num_time_events++] = time_evt;
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <TimeEvent_ctor+0x7c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	b2d1      	uxtb	r1, r2
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <TimeEvent_ctor+0x7c>)
 80012e8:	7011      	strb	r1, [r2, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <TimeEvent_ctor+0x8c>)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80012f4:	bf00      	nop
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000248 	.word	0x20000248
 8001300:	10624dd3 	.word	0x10624dd3
 8001304:	0800e39c 	.word	0x0800e39c
 8001308:	0800e3b4 	.word	0x0800e3b4
 800130c:	20000220 	.word	0x20000220

08001310 <TimeEvent_arm>:

void TimeEvent_arm(TimeEvent *const time_evt, uint32_t timeout, uint32_t reload)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b08d      	sub	sp, #52	; 0x34
 8001314:	af02      	add	r7, sp, #8
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
	LOGI(TAG, "Arming time event.");
 800131c:	4b51      	ldr	r3, [pc, #324]	; (8001464 <TimeEvent_arm+0x154>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d01c      	beq.n	800135e <TimeEvent_arm+0x4e>
 8001324:	f005 f814 	bl	8006350 <HAL_GetTick>
 8001328:	6278      	str	r0, [r7, #36]	; 0x24
 800132a:	4b4f      	ldr	r3, [pc, #316]	; (8001468 <TimeEvent_arm+0x158>)
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	4a4e      	ldr	r2, [pc, #312]	; (800146c <TimeEvent_arm+0x15c>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	0999      	lsrs	r1, r3, #6
 8001338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800133a:	4b4c      	ldr	r3, [pc, #304]	; (800146c <TimeEvent_arm+0x15c>)
 800133c:	fba3 4302 	umull	r4, r3, r3, r2
 8001340:	099b      	lsrs	r3, r3, #6
 8001342:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001346:	fb04 f303 	mul.w	r3, r4, r3
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	4a46      	ldr	r2, [pc, #280]	; (8001468 <TimeEvent_arm+0x158>)
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	9201      	str	r2, [sp, #4]
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	460b      	mov	r3, r1
 8001356:	4a46      	ldr	r2, [pc, #280]	; (8001470 <TimeEvent_arm+0x160>)
 8001358:	2103      	movs	r1, #3
 800135a:	f000 ff91 	bl	8002280 <log_printf>
    osKernelLock(); // Data shared between threads and timer ISR
 800135e:	f009 fd1f 	bl	800ada0 <osKernelLock>
    time_evt->timeout = timeout;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	609a      	str	r2, [r3, #8]
    time_evt->reload = reload;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	60da      	str	r2, [r3, #12]
    osKernelUnlock();
 800136e:	f009 fd3d 	bl	800adec <osKernelUnlock>

    /* Start 1 ms timer if first arming of timer. */
    if(first_arm == false)
 8001372:	4b40      	ldr	r3, [pc, #256]	; (8001474 <TimeEvent_arm+0x164>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	f083 0301 	eor.w	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d06c      	beq.n	800145a <TimeEvent_arm+0x14a>
    {
	    ms_timer_inst = osTimerNew(TimeEvent_tick, osTimerPeriodic, NULL, NULL);
 8001380:	2300      	movs	r3, #0
 8001382:	2200      	movs	r2, #0
 8001384:	2101      	movs	r1, #1
 8001386:	483c      	ldr	r0, [pc, #240]	; (8001478 <TimeEvent_arm+0x168>)
 8001388:	f009 fe24 	bl	800afd4 <osTimerNew>
 800138c:	4603      	mov	r3, r0
 800138e:	4a3b      	ldr	r2, [pc, #236]	; (800147c <TimeEvent_arm+0x16c>)
 8001390:	6013      	str	r3, [r2, #0]
		ASSERT(ms_timer_inst != NULL);
 8001392:	4b3a      	ldr	r3, [pc, #232]	; (800147c <TimeEvent_arm+0x16c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d118      	bne.n	80013cc <TimeEvent_arm+0xbc>
 800139a:	f004 ffd9 	bl	8006350 <HAL_GetTick>
 800139e:	6178      	str	r0, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	4a32      	ldr	r2, [pc, #200]	; (800146c <TimeEvent_arm+0x15c>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	0999      	lsrs	r1, r3, #6
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	4a2f      	ldr	r2, [pc, #188]	; (800146c <TimeEvent_arm+0x15c>)
 80013ae:	fba2 0203 	umull	r0, r2, r2, r3
 80013b2:	0992      	lsrs	r2, r2, #6
 80013b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b8:	fb00 f202 	mul.w	r2, r0, r2
 80013bc:	1a9a      	subs	r2, r3, r2
 80013be:	236c      	movs	r3, #108	; 0x6c
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <TimeEvent_arm+0x170>)
 80013c4:	482f      	ldr	r0, [pc, #188]	; (8001484 <TimeEvent_arm+0x174>)
 80013c6:	f003 facf 	bl	8004968 <printf_>
 80013ca:	e7fe      	b.n	80013ca <TimeEvent_arm+0xba>
		LOGI(TAG, "Starting 1 ms periodic timer.");
 80013cc:	4b25      	ldr	r3, [pc, #148]	; (8001464 <TimeEvent_arm+0x154>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d01c      	beq.n	800140e <TimeEvent_arm+0xfe>
 80013d4:	f004 ffbc 	bl	8006350 <HAL_GetTick>
 80013d8:	6238      	str	r0, [r7, #32]
 80013da:	4b23      	ldr	r3, [pc, #140]	; (8001468 <TimeEvent_arm+0x158>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	4a22      	ldr	r2, [pc, #136]	; (800146c <TimeEvent_arm+0x15c>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	0999      	lsrs	r1, r3, #6
 80013e8:	6a3a      	ldr	r2, [r7, #32]
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <TimeEvent_arm+0x15c>)
 80013ec:	fba3 4302 	umull	r4, r3, r3, r2
 80013f0:	099b      	lsrs	r3, r3, #6
 80013f2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80013f6:	fb04 f303 	mul.w	r3, r4, r3
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	4a1a      	ldr	r2, [pc, #104]	; (8001468 <TimeEvent_arm+0x158>)
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	9201      	str	r2, [sp, #4]
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	460b      	mov	r3, r1
 8001406:	4a20      	ldr	r2, [pc, #128]	; (8001488 <TimeEvent_arm+0x178>)
 8001408:	2103      	movs	r1, #3
 800140a:	f000 ff39 	bl	8002280 <log_printf>
		osStatus_t err = osTimerStart(ms_timer_inst, 20);
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <TimeEvent_arm+0x16c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2114      	movs	r1, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f009 fe59 	bl	800b0cc <osTimerStart>
 800141a:	61f8      	str	r0, [r7, #28]
		ASSERT(err == osOK);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d018      	beq.n	8001454 <TimeEvent_arm+0x144>
 8001422:	f004 ff95 	bl	8006350 <HAL_GetTick>
 8001426:	61b8      	str	r0, [r7, #24]
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	4a10      	ldr	r2, [pc, #64]	; (800146c <TimeEvent_arm+0x15c>)
 800142c:	fba2 2303 	umull	r2, r3, r2, r3
 8001430:	0999      	lsrs	r1, r3, #6
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <TimeEvent_arm+0x15c>)
 8001436:	fba2 0203 	umull	r0, r2, r2, r3
 800143a:	0992      	lsrs	r2, r2, #6
 800143c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001440:	fb00 f202 	mul.w	r2, r0, r2
 8001444:	1a9a      	subs	r2, r3, r2
 8001446:	236f      	movs	r3, #111	; 0x6f
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <TimeEvent_arm+0x170>)
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <TimeEvent_arm+0x174>)
 800144e:	f003 fa8b 	bl	8004968 <printf_>
 8001452:	e7fe      	b.n	8001452 <TimeEvent_arm+0x142>
		first_arm = true;
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <TimeEvent_arm+0x164>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
    }
}
 800145a:	bf00      	nop
 800145c:	372c      	adds	r7, #44	; 0x2c
 800145e:	46bd      	mov	sp, r7
 8001460:	bd90      	pop	{r4, r7, pc}
 8001462:	bf00      	nop
 8001464:	20000064 	.word	0x20000064
 8001468:	20000004 	.word	0x20000004
 800146c:	10624dd3 	.word	0x10624dd3
 8001470:	0800e3ec 	.word	0x0800e3ec
 8001474:	20000249 	.word	0x20000249
 8001478:	080015e5 	.word	0x080015e5
 800147c:	20004fb4 	.word	0x20004fb4
 8001480:	0800e39c 	.word	0x0800e39c
 8001484:	0800e3b4 	.word	0x0800e3b4
 8001488:	0800e41c 	.word	0x0800e41c

0800148c <TimeEvent_disarm>:

void TimeEvent_disarm(TimeEvent *const time_evt)
{
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b087      	sub	sp, #28
 8001490:	af02      	add	r7, sp, #8
 8001492:	6078      	str	r0, [r7, #4]
	LOGI(TAG, "Disarming time event.");
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <TimeEvent_disarm+0x60>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d01c      	beq.n	80014d6 <TimeEvent_disarm+0x4a>
 800149c:	f004 ff58 	bl	8006350 <HAL_GetTick>
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <TimeEvent_disarm+0x64>)
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <TimeEvent_disarm+0x68>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	0999      	lsrs	r1, r3, #6
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <TimeEvent_disarm+0x68>)
 80014b4:	fba3 4302 	umull	r4, r3, r3, r2
 80014b8:	099b      	lsrs	r3, r3, #6
 80014ba:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80014be:	fb04 f303 	mul.w	r3, r4, r3
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <TimeEvent_disarm+0x64>)
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	9201      	str	r2, [sp, #4]
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	460b      	mov	r3, r1
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <TimeEvent_disarm+0x6c>)
 80014d0:	2103      	movs	r1, #3
 80014d2:	f000 fed5 	bl	8002280 <log_printf>
    osKernelLock(); // Data shared between threads and timer ISR.
 80014d6:	f009 fc63 	bl	800ada0 <osKernelLock>
    time_evt->timeout = 0U;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
    osKernelUnlock();
 80014e0:	f009 fc84 	bl	800adec <osKernelUnlock>
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd90      	pop	{r4, r7, pc}
 80014ec:	20000064 	.word	0x20000064
 80014f0:	20000004 	.word	0x20000004
 80014f4:	10624dd3 	.word	0x10624dd3
 80014f8:	0800e458 	.word	0x0800e458

080014fc <Active_event_loop>:
 *
 * @param argument Starting argument passed to function.
 *                 In this case, an Active *.
 */
static void Active_event_loop(void *argument)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b08b      	sub	sp, #44	; 0x2c
 8001500:	af02      	add	r7, sp, #8
 8001502:	6078      	str	r0, [r7, #4]
    Active *ao = (Active *)argument;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	61fb      	str	r3, [r7, #28]

    /* Initialize the AO */
    static const Event initEvt = {.sig = INIT_SIG};
    ao->evt_handler(ao, &initEvt);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	492e      	ldr	r1, [pc, #184]	; (80015c8 <Active_event_loop+0xcc>)
 800150e:	69f8      	ldr	r0, [r7, #28]
 8001510:	4798      	blx	r3
    /* Event loop */
    while (1)
    {
        /* Get pointer to event object. */
        Event *evt;
        osStatus_t err = osMessageQueueGet(ao->queue_id, &evt, NULL, osWaitForever);
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	6858      	ldr	r0, [r3, #4]
 8001516:	f107 010c 	add.w	r1, r7, #12
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	2200      	movs	r2, #0
 8001520:	f009 ff0c 	bl	800b33c <osMessageQueueGet>
 8001524:	61b8      	str	r0, [r7, #24]
        LOGI(TAG, "Event received.");
 8001526:	4b29      	ldr	r3, [pc, #164]	; (80015cc <Active_event_loop+0xd0>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d01c      	beq.n	8001568 <Active_event_loop+0x6c>
 800152e:	f004 ff0f 	bl	8006350 <HAL_GetTick>
 8001532:	6178      	str	r0, [r7, #20]
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <Active_event_loop+0xd4>)
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	4a26      	ldr	r2, [pc, #152]	; (80015d4 <Active_event_loop+0xd8>)
 800153c:	fba2 2303 	umull	r2, r3, r2, r3
 8001540:	0999      	lsrs	r1, r3, #6
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <Active_event_loop+0xd8>)
 8001546:	fba3 4302 	umull	r4, r3, r3, r2
 800154a:	099b      	lsrs	r3, r3, #6
 800154c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001550:	fb04 f303 	mul.w	r3, r4, r3
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <Active_event_loop+0xd4>)
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	9201      	str	r2, [sp, #4]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	460b      	mov	r3, r1
 8001560:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <Active_event_loop+0xdc>)
 8001562:	2103      	movs	r1, #3
 8001564:	f000 fe8c 	bl	8002280 <log_printf>
        if (err != osOK)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d024      	beq.n	80015b8 <Active_event_loop+0xbc>
        {
            LOGE(TAG, "Message queue error.");
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <Active_event_loop+0xd0>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d020      	beq.n	80015b8 <Active_event_loop+0xbc>
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <Active_event_loop+0xe0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	dd1c      	ble.n	80015b8 <Active_event_loop+0xbc>
 800157e:	f004 fee7 	bl	8006350 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <Active_event_loop+0xd4>)
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <Active_event_loop+0xd8>)
 800158c:	fba2 2303 	umull	r2, r3, r2, r3
 8001590:	0999      	lsrs	r1, r3, #6
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <Active_event_loop+0xd8>)
 8001596:	fba3 4302 	umull	r4, r3, r3, r2
 800159a:	099b      	lsrs	r3, r3, #6
 800159c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80015a0:	fb04 f303 	mul.w	r3, r4, r3
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <Active_event_loop+0xd4>)
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	9201      	str	r2, [sp, #4]
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	460b      	mov	r3, r1
 80015b0:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <Active_event_loop+0xe4>)
 80015b2:	2101      	movs	r1, #1
 80015b4:	f000 fe64 	bl	8002280 <log_printf>
        }

        /* Dispatch to event handler and run to completion. */
        ao->evt_handler(ao, evt);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	4611      	mov	r1, r2
 80015c0:	69f8      	ldr	r0, [r7, #28]
 80015c2:	4798      	blx	r3
    {
 80015c4:	e7a5      	b.n	8001512 <Active_event_loop+0x16>
 80015c6:	bf00      	nop
 80015c8:	0800f478 	.word	0x0800f478
 80015cc:	20000064 	.word	0x20000064
 80015d0:	20000004 	.word	0x20000004
 80015d4:	10624dd3 	.word	0x10624dd3
 80015d8:	0800e48c 	.word	0x0800e48c
 80015dc:	20000068 	.word	0x20000068
 80015e0:	0800e4b8 	.word	0x0800e4b8

080015e4 <TimeEvent_tick>:
 *
 * @note This function should be called from within a 1 ms timer ISR
 *       or using a 1 ms OS-specific software timer.
 */
static void TimeEvent_tick(void *argument)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0U; i < num_time_events; ++i)
 80015ec:	2300      	movs	r3, #0
 80015ee:	75fb      	strb	r3, [r7, #23]
 80015f0:	e03b      	b.n	800166a <TimeEvent_tick+0x86>
    {
        TimeEvent *const t = time_events[i];
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	4a22      	ldr	r2, [pc, #136]	; (8001680 <TimeEvent_tick+0x9c>)
 80015f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fa:	613b      	str	r3, [r7, #16]
        ASSERT(t);
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d118      	bne.n	8001634 <TimeEvent_tick+0x50>
 8001602:	f004 fea5 	bl	8006350 <HAL_GetTick>
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4a1e      	ldr	r2, [pc, #120]	; (8001684 <TimeEvent_tick+0xa0>)
 800160c:	fba2 2303 	umull	r2, r3, r2, r3
 8001610:	0999      	lsrs	r1, r3, #6
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <TimeEvent_tick+0xa0>)
 8001616:	fba2 0203 	umull	r0, r2, r2, r3
 800161a:	0992      	lsrs	r2, r2, #6
 800161c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001620:	fb00 f202 	mul.w	r2, r0, r2
 8001624:	1a9a      	subs	r2, r3, r2
 8001626:	23af      	movs	r3, #175	; 0xaf
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <TimeEvent_tick+0xa4>)
 800162c:	4817      	ldr	r0, [pc, #92]	; (800168c <TimeEvent_tick+0xa8>)
 800162e:	f003 f99b 	bl	8004968 <printf_>
 8001632:	e7fe      	b.n	8001632 <TimeEvent_tick+0x4e>
        
        if (t->timeout > 0U)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d013      	beq.n	8001664 <TimeEvent_tick+0x80>
        { 
            t->timeout = t->timeout - 1; // Down-counting timer.
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	1e5a      	subs	r2, r3, #1
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	609a      	str	r2, [r3, #8]
            if (t->timeout == 0U)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10a      	bne.n	8001664 <TimeEvent_tick+0x80>
            {   
                Active_post(t->ao, &(t->base));
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fdfa 	bl	8001250 <Active_post>
                t->timeout = t->reload;
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0U; i < num_time_events; ++i)
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	3301      	adds	r3, #1
 8001668:	75fb      	strb	r3, [r7, #23]
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <TimeEvent_tick+0xac>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	7dfa      	ldrb	r2, [r7, #23]
 8001670:	429a      	cmp	r2, r3
 8001672:	d3be      	bcc.n	80015f2 <TimeEvent_tick+0xe>
            }
        }
    }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000220 	.word	0x20000220
 8001684:	10624dd3 	.word	0x10624dd3
 8001688:	0800e39c 	.word	0x0800e39c
 800168c:	0800e3b4 	.word	0x0800e3b4
 8001690:	20000248 	.word	0x20000248

08001694 <cmd_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t cmd_init(void)
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b085      	sub	sp, #20
 8001698:	af02      	add	r7, sp, #8
    Active_ctor((Active *)&cmd_ao, (EventHandler)&Cmd_Event_Handler); // Call base active object constructor.
 800169a:	4919      	ldr	r1, [pc, #100]	; (8001700 <cmd_init+0x6c>)
 800169c:	4819      	ldr	r0, [pc, #100]	; (8001704 <cmd_init+0x70>)
 800169e:	f7ff fd79 	bl	8001194 <Active_ctor>
    cmd_base = &(cmd_ao.base);
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <cmd_init+0x74>)
 80016a4:	4a17      	ldr	r2, [pc, #92]	; (8001704 <cmd_init+0x70>)
 80016a6:	601a      	str	r2, [r3, #0]
    memset(cmd_ao.cmd_buf, 0, CONSOLE_CMD_BUF_SIZE); // Initialize private variables.
 80016a8:	2228      	movs	r2, #40	; 0x28
 80016aa:	2100      	movs	r1, #0
 80016ac:	4817      	ldr	r0, [pc, #92]	; (800170c <cmd_init+0x78>)
 80016ae:	f00c fce5 	bl	800e07c <memset>
    LOGI(TAG, "Initialized command.");
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <cmd_init+0x7c>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d01c      	beq.n	80016f4 <cmd_init+0x60>
 80016ba:	f004 fe49 	bl	8006350 <HAL_GetTick>
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <cmd_init+0x80>)
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a14      	ldr	r2, [pc, #80]	; (8001718 <cmd_init+0x84>)
 80016c8:	fba2 2303 	umull	r2, r3, r2, r3
 80016cc:	0999      	lsrs	r1, r3, #6
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <cmd_init+0x84>)
 80016d2:	fba3 4302 	umull	r4, r3, r3, r2
 80016d6:	099b      	lsrs	r3, r3, #6
 80016d8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80016dc:	fb04 f303 	mul.w	r3, r4, r3
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	4a0c      	ldr	r2, [pc, #48]	; (8001714 <cmd_init+0x80>)
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	9201      	str	r2, [sp, #4]
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	460b      	mov	r3, r1
 80016ec:	4a0b      	ldr	r2, [pc, #44]	; (800171c <cmd_init+0x88>)
 80016ee:	2103      	movs	r1, #3
 80016f0:	f000 fdc6 	bl	8002280 <log_printf>
    return MOD_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd90      	pop	{r4, r7, pc}
 80016fe:	bf00      	nop
 8001700:	08001dc9 	.word	0x08001dc9
 8001704:	20000274 	.word	0x20000274
 8001708:	20004fb8 	.word	0x20004fb8
 800170c:	20000280 	.word	0x20000280
 8001710:	20000064 	.word	0x20000064
 8001714:	20000008 	.word	0x20000008
 8001718:	10624dd3 	.word	0x10624dd3
 800171c:	0800e4f0 	.word	0x0800e4f0

08001720 <cmd_start>:

mod_err_t cmd_start()
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
    static const osThreadAttr_t thread_attr = {.stack_size = CMD_THREAD_SIZE};
    return Active_start((Active *)&cmd_ao, &thread_attr, CMD_EVENT_MSG_COUNT, NULL);
 8001724:	2300      	movs	r3, #0
 8001726:	2205      	movs	r2, #5
 8001728:	4903      	ldr	r1, [pc, #12]	; (8001738 <cmd_start+0x18>)
 800172a:	4804      	ldr	r0, [pc, #16]	; (800173c <cmd_start+0x1c>)
 800172c:	f7ff fd4a 	bl	80011c4 <Active_start>
 8001730:	4603      	mov	r3, r0
}
 8001732:	4618      	mov	r0, r3
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	0800f47c 	.word	0x0800f47c
 800173c:	20000274 	.word	0x20000274

08001740 <cmd_register>:

mod_err_t cmd_register(const cmd_client_info *_client_info)
{
 8001740:	b5b0      	push	{r4, r5, r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af04      	add	r7, sp, #16
 8001746:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < CMD_MAX_CLIENTS; i++)
 8001748:	2300      	movs	r3, #0
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	e044      	b.n	80017d8 <cmd_register+0x98>
    {
        if (client_infos[i] == NULL || strcasecmp(client_infos[i]->client_name, _client_info->client_name) == 0)
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <cmd_register+0xa8>)
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00d      	beq.n	8001776 <cmd_register+0x36>
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <cmd_register+0xa8>)
 800175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4619      	mov	r1, r3
 800176a:	4610      	mov	r0, r2
 800176c:	f00c fd48 	bl	800e200 <strcasecmp>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d12d      	bne.n	80017d2 <cmd_register+0x92>
        {
            client_infos[i] = _client_info;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	491b      	ldr	r1, [pc, #108]	; (80017e8 <cmd_register+0xa8>)
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            LOGI(TAG, "Registered commands for %s module", client_infos[i]->client_name);
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <cmd_register+0xac>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d022      	beq.n	80017ce <cmd_register+0x8e>
 8001788:	f004 fde2 	bl	8006350 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <cmd_register+0xb0>)
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	4a17      	ldr	r2, [pc, #92]	; (80017f4 <cmd_register+0xb4>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	099c      	lsrs	r4, r3, #6
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <cmd_register+0xb4>)
 80017a0:	fba3 1302 	umull	r1, r3, r3, r2
 80017a4:	099b      	lsrs	r3, r3, #6
 80017a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	4a0f      	ldr	r2, [pc, #60]	; (80017f0 <cmd_register+0xb0>)
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	7bf9      	ldrb	r1, [r7, #15]
 80017b6:	4d0c      	ldr	r5, [pc, #48]	; (80017e8 <cmd_register+0xa8>)
 80017b8:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80017bc:	6809      	ldr	r1, [r1, #0]
 80017be:	9102      	str	r1, [sp, #8]
 80017c0:	9201      	str	r2, [sp, #4]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	4623      	mov	r3, r4
 80017c6:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <cmd_register+0xb8>)
 80017c8:	2103      	movs	r1, #3
 80017ca:	f000 fd59 	bl	8002280 <log_printf>
            return MOD_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e006      	b.n	80017e0 <cmd_register+0xa0>
    for (uint8_t i = 0; i < CMD_MAX_CLIENTS; i++)
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	3301      	adds	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	2b09      	cmp	r3, #9
 80017dc:	d9b7      	bls.n	800174e <cmd_register+0xe>
        }
    }
    return MOD_ERR_RESOURCE;
 80017de:	2303      	movs	r3, #3
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bdb0      	pop	{r4, r5, r7, pc}
 80017e8:	2000024c 	.word	0x2000024c
 80017ec:	20000064 	.word	0x20000064
 80017f0:	20000008 	.word	0x20000008
 80017f4:	10624dd3 	.word	0x10624dd3
 80017f8:	0800e524 	.word	0x0800e524

080017fc <cmd_execute>:
 *
 * This function parses the command line and then executes the command,
 * typically by running a command function handler for a client.
 */
static mod_err_t cmd_execute(char *cmd_line)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b095      	sub	sp, #84	; 0x54
 8001800:	af04      	add	r7, sp, #16
 8001802:	6078      	str	r0, [r7, #4]
    LOGI(TAG, "Command received: %s", cmd_line);
 8001804:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <cmd_execute+0xcc>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d01e      	beq.n	800184a <cmd_execute+0x4e>
 800180c:	f004 fda0 	bl	8006350 <HAL_GetTick>
 8001810:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001812:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <cmd_execute+0xd0>)
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001818:	4a2d      	ldr	r2, [pc, #180]	; (80018d0 <cmd_execute+0xd4>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	099c      	lsrs	r4, r3, #6
 8001820:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001822:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <cmd_execute+0xd4>)
 8001824:	fba3 1302 	umull	r1, r3, r3, r2
 8001828:	099b      	lsrs	r3, r3, #6
 800182a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	4a25      	ldr	r2, [pc, #148]	; (80018cc <cmd_execute+0xd0>)
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	9102      	str	r1, [sp, #8]
 800183c:	9201      	str	r2, [sp, #4]
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	4623      	mov	r3, r4
 8001842:	4a24      	ldr	r2, [pc, #144]	; (80018d4 <cmd_execute+0xd8>)
 8001844:	2103      	movs	r1, #3
 8001846:	f000 fd1b 	bl	8002280 <log_printf>
    uint32_t num_tokens = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	637b      	str	r3, [r7, #52]	; 0x34
    const char *tokens[CMD_MAX_TOKENS] = {0}; // Store individual tokens as strings.
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	2228      	movs	r2, #40	; 0x28
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f00c fc10 	bl	800e07c <memset>

    /* Tokenize command line */
    mod_err_t err = tokenize(cmd_line, tokens, &num_tokens);
 800185c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	4619      	mov	r1, r3
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f836 	bl	80018d8 <tokenize>
 800186c:	4603      	mov	r3, r0
 800186e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (err)
 8001872:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <cmd_execute+0x84>
    {
        return err;
 800187a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800187e:	e01f      	b.n	80018c0 <cmd_execute+0xc4>
    }

    /* If there are no tokens, nothing to do. */
    if (num_tokens == 0)
 8001880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <cmd_execute+0x8e>
    {
        return MOD_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e01a      	b.n	80018c0 <cmd_execute+0xc4>
    }

    /* Handle help/? command. */
    err = help_handler(tokens);
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f8a6 	bl	80019e0 <help_handler>
 8001894:	4603      	mov	r3, r0
 8001896:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (err != MOD_DID_NOTHING)
 800189a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800189e:	2b0a      	cmp	r3, #10
 80018a0:	d002      	beq.n	80018a8 <cmd_execute+0xac>
    {
        return err;
 80018a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80018a6:	e00b      	b.n	80018c0 <cmd_execute+0xc4>
    }

    err = client_command_handler(tokens, num_tokens);
 80018a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 f91f 	bl	8001af4 <client_command_handler>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    return err;
 80018bc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3744      	adds	r7, #68	; 0x44
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd90      	pop	{r4, r7, pc}
 80018c8:	20000064 	.word	0x20000064
 80018cc:	20000008 	.word	0x20000008
 80018d0:	10624dd3 	.word	0x10624dd3
 80018d4:	0800e648 	.word	0x0800e648

080018d8 <tokenize>:
 * @return MOD_OK if successful, "MOD_ERR_" otherwise.
 * 
 * Tokens include name of client, command, and arguments passed.
 */
static inline mod_err_t tokenize(char *str_to_tokenize, const char **tokens, uint32_t *num_tokens)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b08b      	sub	sp, #44	; 0x2c
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
    char *ptr = str_to_tokenize;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	61fb      	str	r3, [r7, #28]
    uint32_t token_count = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]

    /* Iterate through each token. */
    while (1)
    {
        /* Find start of token. */
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 80018ec:	e002      	b.n	80018f4 <tokenize+0x1c>
        {
            ptr++;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d009      	beq.n	8001910 <tokenize+0x38>
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	4a32      	ldr	r2, [pc, #200]	; (80019cc <tokenize+0xf4>)
 8001904:	4413      	add	r3, r2
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1ee      	bne.n	80018ee <tokenize+0x16>
        }

        if (*ptr == '\0') // Found end of line.
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d04e      	beq.n	80019b6 <tokenize+0xde>
        {
            break;
        }
        else
        {
            if (token_count >= CMD_MAX_TOKENS)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2b09      	cmp	r3, #9
 800191c:	d922      	bls.n	8001964 <tokenize+0x8c>
            {
                LOGW(TAG, "Too many tokens");
 800191e:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <tokenize+0xf8>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d01c      	beq.n	8001960 <tokenize+0x88>
 8001926:	f004 fd13 	bl	8006350 <HAL_GetTick>
 800192a:	6178      	str	r0, [r7, #20]
 800192c:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <tokenize+0xfc>)
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	4a29      	ldr	r2, [pc, #164]	; (80019d8 <tokenize+0x100>)
 8001934:	fba2 2303 	umull	r2, r3, r2, r3
 8001938:	0999      	lsrs	r1, r3, #6
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <tokenize+0x100>)
 800193e:	fba3 4302 	umull	r4, r3, r3, r2
 8001942:	099b      	lsrs	r3, r3, #6
 8001944:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001948:	fb04 f303 	mul.w	r3, r4, r3
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	4a21      	ldr	r2, [pc, #132]	; (80019d4 <tokenize+0xfc>)
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	9201      	str	r2, [sp, #4]
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	460b      	mov	r3, r1
 8001958:	4a20      	ldr	r2, [pc, #128]	; (80019dc <tokenize+0x104>)
 800195a:	2102      	movs	r1, #2
 800195c:	f000 fc90 	bl	8002280 <log_printf>
                return MOD_ERR_BAD_CMD;
 8001960:	2304      	movs	r3, #4
 8001962:	e02f      	b.n	80019c4 <tokenize+0xec>
            }
            else
            {
                /* Record pointer to start of token, then find end of token. */
                tokens[token_count] = ptr;
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	4413      	add	r3, r2
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	601a      	str	r2, [r3, #0]
                ptr++;
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	3301      	adds	r3, #1
 8001974:	61fb      	str	r3, [r7, #28]
                token_count++;
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	3301      	adds	r3, #1
 800197a:	61bb      	str	r3, [r7, #24]
                while (*ptr != '\0' && !isspace((unsigned char)*ptr))
 800197c:	e002      	b.n	8001984 <tokenize+0xac>
                {
                    ptr++;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3301      	adds	r3, #1
 8001982:	61fb      	str	r3, [r7, #28]
                while (*ptr != '\0' && !isspace((unsigned char)*ptr))
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d009      	beq.n	80019a0 <tokenize+0xc8>
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	3301      	adds	r3, #1
 8001992:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <tokenize+0xf4>)
 8001994:	4413      	add	r3, r2
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0ee      	beq.n	800197e <tokenize+0xa6>
                }
                if (*ptr != '\0')
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <tokenize+0xe2>
                {
                    *ptr = '\0'; // Terminate end of token.
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
                    ptr++;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3301      	adds	r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
        while (*ptr != '\0' && isspace((unsigned char)*ptr))
 80019b4:	e79e      	b.n	80018f4 <tokenize+0x1c>
            break;
 80019b6:	bf00      	nop
 80019b8:	e000      	b.n	80019bc <tokenize+0xe4>
                }
                else
                {
                    break; // Found end of line ('\0'), no more tokens.
 80019ba:	bf00      	nop
                }
            }
        }
    }

    *num_tokens = token_count;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	601a      	str	r2, [r3, #0]
    return MOD_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3724      	adds	r7, #36	; 0x24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd90      	pop	{r4, r7, pc}
 80019cc:	0800f674 	.word	0x0800f674
 80019d0:	20000064 	.word	0x20000064
 80019d4:	20000008 	.word	0x20000008
 80019d8:	10624dd3 	.word	0x10624dd3
 80019dc:	0800e67c 	.word	0x0800e67c

080019e0 <help_handler>:
 *         otherwise a "MOD_ERR" value.
 * 
 * Iterates through each client infos 
 */
static inline mod_err_t help_handler(const char **tokens)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
    if (strcasecmp("help", tokens[0]) == 0 || strcasecmp("?", tokens[0]) == 0)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4619      	mov	r1, r3
 80019ee:	4837      	ldr	r0, [pc, #220]	; (8001acc <help_handler+0xec>)
 80019f0:	f00c fc06 	bl	800e200 <strcasecmp>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d008      	beq.n	8001a0c <help_handler+0x2c>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4619      	mov	r1, r3
 8001a00:	4833      	ldr	r0, [pc, #204]	; (8001ad0 <help_handler+0xf0>)
 8001a02:	f00c fbfd 	bl	800e200 <strcasecmp>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d159      	bne.n	8001ac0 <help_handler+0xe0>
    {
        /* Iterate through commands of each client. */
        for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	75fb      	strb	r3, [r7, #23]
 8001a10:	e04b      	b.n	8001aaa <help_handler+0xca>
        {
            const cmd_client_info *ci = client_infos[i];
 8001a12:	7dfb      	ldrb	r3, [r7, #23]
 8001a14:	4a2f      	ldr	r2, [pc, #188]	; (8001ad4 <help_handler+0xf4>)
 8001a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1a:	613b      	str	r3, [r7, #16]

            LOG("%s (", ci->client_name);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	482d      	ldr	r0, [pc, #180]	; (8001ad8 <help_handler+0xf8>)
 8001a24:	f002 ffa0 	bl	8004968 <printf_>

            if (ci->num_u16_pms > 0 && ci->num_cmds == 0)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d007      	beq.n	8001a40 <help_handler+0x60>
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d103      	bne.n	8001a40 <help_handler+0x60>
            {
                /* If client provided pm info only, display pm command. */
                LOG("pm)\r\n");
 8001a38:	4828      	ldr	r0, [pc, #160]	; (8001adc <help_handler+0xfc>)
 8001a3a:	f002 ff95 	bl	8004968 <printf_>
                continue;
 8001a3e:	e031      	b.n	8001aa4 <help_handler+0xc4>
            }
            else if (ci->num_cmds == 0)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d02c      	beq.n	8001aa2 <help_handler+0xc2>
            {
                continue;
            }
            else
            {
                uint8_t i2 = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	75bb      	strb	r3, [r7, #22]
                for (i2 = 0; i2 < ci->num_cmds; i2++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	75bb      	strb	r3, [r7, #22]
 8001a50:	e017      	b.n	8001a82 <help_handler+0xa2>
                {
                    const cmd_cmd_info *cci = &(ci->cmds[i2]);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	6899      	ldr	r1, [r3, #8]
 8001a56:	7dba      	ldrb	r2, [r7, #22]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	60fb      	str	r3, [r7, #12]
                    LOG("%s%s", i2 == 0 ? "" : ", ", cci->cmd_name);
 8001a64:	7dbb      	ldrb	r3, [r7, #22]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <help_handler+0x8e>
 8001a6a:	491d      	ldr	r1, [pc, #116]	; (8001ae0 <help_handler+0x100>)
 8001a6c:	e000      	b.n	8001a70 <help_handler+0x90>
 8001a6e:	491d      	ldr	r1, [pc, #116]	; (8001ae4 <help_handler+0x104>)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	481c      	ldr	r0, [pc, #112]	; (8001ae8 <help_handler+0x108>)
 8001a78:	f002 ff76 	bl	8004968 <printf_>
                for (i2 = 0; i2 < ci->num_cmds; i2++)
 8001a7c:	7dbb      	ldrb	r3, [r7, #22]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	75bb      	strb	r3, [r7, #22]
 8001a82:	7dba      	ldrb	r2, [r7, #22]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d3e2      	bcc.n	8001a52 <help_handler+0x72>
                }
                if (ci->num_u16_pms > 0)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <help_handler+0xba>
                {
                    LOG(", pm");
 8001a94:	4815      	ldr	r0, [pc, #84]	; (8001aec <help_handler+0x10c>)
 8001a96:	f002 ff67 	bl	8004968 <printf_>
                }
                LOG(")\r\n");
 8001a9a:	4815      	ldr	r0, [pc, #84]	; (8001af0 <help_handler+0x110>)
 8001a9c:	f002 ff64 	bl	8004968 <printf_>
 8001aa0:	e000      	b.n	8001aa4 <help_handler+0xc4>
                continue;
 8001aa2:	bf00      	nop
        for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	75fb      	strb	r3, [r7, #23]
 8001aaa:	7dfb      	ldrb	r3, [r7, #23]
 8001aac:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <help_handler+0xf4>)
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <help_handler+0xdc>
 8001ab6:	7dfb      	ldrb	r3, [r7, #23]
 8001ab8:	2b09      	cmp	r3, #9
 8001aba:	d9aa      	bls.n	8001a12 <help_handler+0x32>
            }
        }

        return MOD_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e000      	b.n	8001ac2 <help_handler+0xe2>
    }

    return MOD_DID_NOTHING; // Not a top-level help command.
 8001ac0:	230a      	movs	r3, #10
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	0800e6a8 	.word	0x0800e6a8
 8001ad0:	0800e6b0 	.word	0x0800e6b0
 8001ad4:	2000024c 	.word	0x2000024c
 8001ad8:	0800e6b4 	.word	0x0800e6b4
 8001adc:	0800e6c0 	.word	0x0800e6c0
 8001ae0:	0800e6d0 	.word	0x0800e6d0
 8001ae4:	0800e6d4 	.word	0x0800e6d4
 8001ae8:	0800e6d8 	.word	0x0800e6d8
 8001aec:	0800e6e4 	.word	0x0800e6e4
 8001af0:	0800e6f0 	.word	0x0800e6f0

08001af4 <client_command_handler>:
 * @return MOD_OK if successful, 
 *         MOD_DID_NOTHING if not a client command, 
 *         otherwise a "MOD_ERR" value.
 */
static inline mod_err_t client_command_handler(const char **tokens, uint32_t num_tokens)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	77fb      	strb	r3, [r7, #31]
 8001b02:	e11c      	b.n	8001d3e <client_command_handler+0x24a>
    {
        const cmd_client_info *ci = client_infos[i];
 8001b04:	7ffb      	ldrb	r3, [r7, #31]
 8001b06:	4aa2      	ldr	r2, [pc, #648]	; (8001d90 <client_command_handler+0x29c>)
 8001b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0c:	617b      	str	r3, [r7, #20]

        /* Look for correct client first */
        if (strcasecmp(tokens[0], ci->client_name) != 0)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4619      	mov	r1, r3
 8001b18:	4610      	mov	r0, r2
 8001b1a:	f00c fb71 	bl	800e200 <strcasecmp>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <client_command_handler+0x38>
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001b24:	7ffb      	ldrb	r3, [r7, #31]
 8001b26:	3301      	adds	r3, #1
 8001b28:	77fb      	strb	r3, [r7, #31]
 8001b2a:	e108      	b.n	8001d3e <client_command_handler+0x24a>
        {
            continue;
        }

        /* If there is no command with client, assume they want help. */
        if (num_tokens == 1)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d103      	bne.n	8001b3a <client_command_handler+0x46>
        {
            tokens[1] = "help";
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3304      	adds	r3, #4
 8001b36:	4a97      	ldr	r2, [pc, #604]	; (8001d94 <client_command_handler+0x2a0>)
 8001b38:	601a      	str	r2, [r3, #0]
        }

        /* Handle help command directly. */
        if (strcasecmp(tokens[1], "help") == 0 || strcasecmp(tokens[1], "?") == 0)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4994      	ldr	r1, [pc, #592]	; (8001d94 <client_command_handler+0x2a0>)
 8001b42:	4618      	mov	r0, r3
 8001b44:	f00c fb5c 	bl	800e200 <strcasecmp>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <client_command_handler+0x6e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3304      	adds	r3, #4
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4990      	ldr	r1, [pc, #576]	; (8001d98 <client_command_handler+0x2a4>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f00c fb52 	bl	800e200 <strcasecmp>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d128      	bne.n	8001bb4 <client_command_handler+0xc0>
        {
            /* Print out all commands associated with client */
            for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	77bb      	strb	r3, [r7, #30]
 8001b66:	e014      	b.n	8001b92 <client_command_handler+0x9e>
            {
                const cmd_cmd_info *cci = &(ci->cmds[i2]);
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	6899      	ldr	r1, [r3, #8]
 8001b6c:	7fba      	ldrb	r2, [r7, #30]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	60fb      	str	r3, [r7, #12]
                LOG("%s %s: %s\r\n", ci->client_name, cci->cmd_name, cci->help);
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	4885      	ldr	r0, [pc, #532]	; (8001d9c <client_command_handler+0x2a8>)
 8001b88:	f002 feee 	bl	8004968 <printf_>
            for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 8001b8c:	7fbb      	ldrb	r3, [r7, #30]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	77bb      	strb	r3, [r7, #30]
 8001b92:	7fba      	ldrb	r2, [r7, #30]
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d3e5      	bcc.n	8001b68 <client_command_handler+0x74>
            }
            /* If client provided pm info, print help for pm command also. */
            if (ci->num_u16_pms > 0)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <client_command_handler+0xbc>
            {
                LOG("%s pm: get or clear performance measurements, "
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	487d      	ldr	r0, [pc, #500]	; (8001da0 <client_command_handler+0x2ac>)
 8001bac:	f002 fedc 	bl	8004968 <printf_>
                    "args: [clear] \r\n",
                    ci->client_name);
            }

            return MOD_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e0e8      	b.n	8001d86 <client_command_handler+0x292>
        }

        /* Handle pm command directly. */
        if (strcasecmp(tokens[1], "pm") == 0)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	497a      	ldr	r1, [pc, #488]	; (8001da4 <client_command_handler+0x2b0>)
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f00c fb1f 	bl	800e200 <strcasecmp>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d150      	bne.n	8001c6a <client_command_handler+0x176>
        {
            if (ci->num_u16_pms > 0)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d04a      	beq.n	8001c66 <client_command_handler+0x172>
            {
                bool clear = (num_tokens >= 3 && strcasecmp(tokens[2], "clear") == 0);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d90b      	bls.n	8001bee <client_command_handler+0xfa>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3308      	adds	r3, #8
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4972      	ldr	r1, [pc, #456]	; (8001da8 <client_command_handler+0x2b4>)
 8001bde:	4618      	mov	r0, r3
 8001be0:	f00c fb0e 	bl	800e200 <strcasecmp>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <client_command_handler+0xfa>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <client_command_handler+0xfc>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	74fb      	strb	r3, [r7, #19]
 8001bf2:	7cfb      	ldrb	r3, [r7, #19]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	74fb      	strb	r3, [r7, #19]
                if (clear)
 8001bfa:	7cfb      	ldrb	r3, [r7, #19]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d006      	beq.n	8001c0e <client_command_handler+0x11a>
                {
                    LOG("Clearing %s performance measurements\r\n", ci->client_name);
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4869      	ldr	r0, [pc, #420]	; (8001dac <client_command_handler+0x2b8>)
 8001c08:	f002 feae 	bl	8004968 <printf_>
 8001c0c:	e005      	b.n	8001c1a <client_command_handler+0x126>
                }
                else
                {
                    LOG("%s pms:\r\n", ci->client_name);
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4619      	mov	r1, r3
 8001c14:	4866      	ldr	r0, [pc, #408]	; (8001db0 <client_command_handler+0x2bc>)
 8001c16:	f002 fea7 	bl	8004968 <printf_>
                }
                for (uint8_t i2 = 0; i2 < ci->num_u16_pms; i2++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	777b      	strb	r3, [r7, #29]
 8001c1e:	e01d      	b.n	8001c5c <client_command_handler+0x168>
                {
                    if (clear)
 8001c20:	7cfb      	ldrb	r3, [r7, #19]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <client_command_handler+0x142>
                    {
                        ci->u16_pms[i2] = 0;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	691a      	ldr	r2, [r3, #16]
 8001c2a:	7f7b      	ldrb	r3, [r7, #29]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	2200      	movs	r2, #0
 8001c32:	801a      	strh	r2, [r3, #0]
 8001c34:	e00f      	b.n	8001c56 <client_command_handler+0x162>
                    }
                    else
                    {
                        LOG("%s: %d\r\n", ci->u16_pm_names[i2], ci->u16_pms[i2]);
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	7f7b      	ldrb	r3, [r7, #29]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	6819      	ldr	r1, [r3, #0]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	691a      	ldr	r2, [r3, #16]
 8001c46:	7f7b      	ldrb	r3, [r7, #29]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4858      	ldr	r0, [pc, #352]	; (8001db4 <client_command_handler+0x2c0>)
 8001c52:	f002 fe89 	bl	8004968 <printf_>
                for (uint8_t i2 = 0; i2 < ci->num_u16_pms; i2++)
 8001c56:	7f7b      	ldrb	r3, [r7, #29]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	777b      	strb	r3, [r7, #29]
 8001c5c:	7f7a      	ldrb	r2, [r7, #29]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d3dc      	bcc.n	8001c20 <client_command_handler+0x12c>
                    }
                }
            }

            return MOD_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e08d      	b.n	8001d86 <client_command_handler+0x292>
        }

        /* Look for command within client. */
        for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	773b      	strb	r3, [r7, #28]
 8001c6e:	e056      	b.n	8001d1e <client_command_handler+0x22a>
        {
            if (strcasecmp(tokens[1], ci->cmds[i2].cmd_name) == 0)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3304      	adds	r3, #4
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	6899      	ldr	r1, [r3, #8]
 8001c7a:	7f3a      	ldrb	r2, [r7, #28]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f00c fab9 	bl	800e200 <strcasecmp>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d141      	bne.n	8001d18 <client_command_handler+0x224>
            {
                if (num_tokens == 3 && (strcasecmp(tokens[2], "help") == 0 || strcasecmp(tokens[2], "?") == 0))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d12d      	bne.n	8001cf6 <client_command_handler+0x202>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3308      	adds	r3, #8
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	493c      	ldr	r1, [pc, #240]	; (8001d94 <client_command_handler+0x2a0>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f00c faac 	bl	800e200 <strcasecmp>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <client_command_handler+0x1ce>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3308      	adds	r3, #8
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4938      	ldr	r1, [pc, #224]	; (8001d98 <client_command_handler+0x2a4>)
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f00c faa2 	bl	800e200 <strcasecmp>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d119      	bne.n	8001cf6 <client_command_handler+0x202>
                {
                    LOG("%s %s: %s\r\n", ci->client_name, ci->cmds[i2].cmd_name, ci->cmds[i2].help);
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	6899      	ldr	r1, [r3, #8]
 8001cca:	7f3a      	ldrb	r2, [r7, #28]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	681c      	ldr	r4, [r3, #0]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	6899      	ldr	r1, [r3, #8]
 8001cdc:	7f3a      	ldrb	r2, [r7, #28]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	4622      	mov	r2, r4
 8001cec:	4601      	mov	r1, r0
 8001cee:	482b      	ldr	r0, [pc, #172]	; (8001d9c <client_command_handler+0x2a8>)
 8001cf0:	f002 fe3a 	bl	8004968 <printf_>
 8001cf4:	e00e      	b.n	8001d14 <client_command_handler+0x220>
                }
                else
                {
                    ci->cmds[i2].cb(num_tokens - 2, tokens + 2); // Ignore client and command tokens.
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	6899      	ldr	r1, [r3, #8]
 8001cfa:	7f3a      	ldrb	r2, [r7, #28]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	1e90      	subs	r0, r2, #2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	3208      	adds	r2, #8
 8001d10:	4611      	mov	r1, r2
 8001d12:	4798      	blx	r3
                }
                return MOD_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e036      	b.n	8001d86 <client_command_handler+0x292>
        for (uint8_t i2 = 0; i2 < ci->num_cmds; i2++)
 8001d18:	7f3b      	ldrb	r3, [r7, #28]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	773b      	strb	r3, [r7, #28]
 8001d1e:	7f3a      	ldrb	r2, [r7, #28]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d3a3      	bcc.n	8001c70 <client_command_handler+0x17c>
            }
        }

        LOG("No such command (%s %s)\r\n", tokens[0], tokens[1]);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6819      	ldr	r1, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3304      	adds	r3, #4
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	4820      	ldr	r0, [pc, #128]	; (8001db8 <client_command_handler+0x2c4>)
 8001d36:	f002 fe17 	bl	8004968 <printf_>
        return MOD_ERR_BAD_CMD;
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	e023      	b.n	8001d86 <client_command_handler+0x292>
    for (uint8_t i = 0; client_infos[i] != NULL && i < CMD_MAX_CLIENTS; i++)
 8001d3e:	7ffb      	ldrb	r3, [r7, #31]
 8001d40:	4a13      	ldr	r2, [pc, #76]	; (8001d90 <client_command_handler+0x29c>)
 8001d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <client_command_handler+0x25e>
 8001d4a:	7ffb      	ldrb	r3, [r7, #31]
 8001d4c:	2b09      	cmp	r3, #9
 8001d4e:	f67f aed9 	bls.w	8001b04 <client_command_handler+0x10>
    }

    /* Could not find client */
    LOG("No such command: ");
 8001d52:	481a      	ldr	r0, [pc, #104]	; (8001dbc <client_command_handler+0x2c8>)
 8001d54:	f002 fe08 	bl	8004968 <printf_>
    for (uint8_t i = 0; i < num_tokens; i++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	76fb      	strb	r3, [r7, #27]
 8001d5c:	e00b      	b.n	8001d76 <client_command_handler+0x282>
    {
        LOG("%s ", tokens[i]);
 8001d5e:	7efb      	ldrb	r3, [r7, #27]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4815      	ldr	r0, [pc, #84]	; (8001dc0 <client_command_handler+0x2cc>)
 8001d6c:	f002 fdfc 	bl	8004968 <printf_>
    for (uint8_t i = 0; i < num_tokens; i++)
 8001d70:	7efb      	ldrb	r3, [r7, #27]
 8001d72:	3301      	adds	r3, #1
 8001d74:	76fb      	strb	r3, [r7, #27]
 8001d76:	7efb      	ldrb	r3, [r7, #27]
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d8ef      	bhi.n	8001d5e <client_command_handler+0x26a>
    }
    LOG("\r\n");
 8001d7e:	4811      	ldr	r0, [pc, #68]	; (8001dc4 <client_command_handler+0x2d0>)
 8001d80:	f002 fdf2 	bl	8004968 <printf_>
    return MOD_ERR_BAD_CMD;
 8001d84:	2304      	movs	r3, #4
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd90      	pop	{r4, r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000024c 	.word	0x2000024c
 8001d94:	0800e6a8 	.word	0x0800e6a8
 8001d98:	0800e6b0 	.word	0x0800e6b0
 8001d9c:	0800e6fc 	.word	0x0800e6fc
 8001da0:	0800e710 	.word	0x0800e710
 8001da4:	0800e758 	.word	0x0800e758
 8001da8:	0800e75c 	.word	0x0800e75c
 8001dac:	0800e764 	.word	0x0800e764
 8001db0:	0800e794 	.word	0x0800e794
 8001db4:	0800e7a8 	.word	0x0800e7a8
 8001db8:	0800e7b8 	.word	0x0800e7b8
 8001dbc:	0800e7dc 	.word	0x0800e7dc
 8001dc0:	0800e7f8 	.word	0x0800e7f8
 8001dc4:	0800e804 	.word	0x0800e804

08001dc8 <Cmd_Event_Handler>:
 *
 * @param ao Command active object.
 * @param evt Command event object.
 */
static void Cmd_Event_Handler(Cmd_Active *const ao, Cmd_Event const *const evt)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
    switch (evt->base.sig)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <Cmd_Event_Handler+0x18>
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d022      	beq.n	8001e24 <Cmd_Event_Handler+0x5c>
 8001dde:	e02c      	b.n	8001e3a <Cmd_Event_Handler+0x72>
    {
    case INIT_SIG:
    	LOGI(TAG, "Command active object initialized.");
 8001de0:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <Cmd_Event_Handler+0xc4>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d04a      	beq.n	8001e7e <Cmd_Event_Handler+0xb6>
 8001de8:	f004 fab2 	bl	8006350 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	4b28      	ldr	r3, [pc, #160]	; (8001e90 <Cmd_Event_Handler+0xc8>)
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <Cmd_Event_Handler+0xcc>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	0999      	lsrs	r1, r3, #6
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <Cmd_Event_Handler+0xcc>)
 8001e00:	fba3 4302 	umull	r4, r3, r3, r2
 8001e04:	099b      	lsrs	r3, r3, #6
 8001e06:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001e0a:	fb04 f303 	mul.w	r3, r4, r3
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	4a1f      	ldr	r2, [pc, #124]	; (8001e90 <Cmd_Event_Handler+0xc8>)
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	9201      	str	r2, [sp, #4]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4a1f      	ldr	r2, [pc, #124]	; (8001e98 <Cmd_Event_Handler+0xd0>)
 8001e1c:	2103      	movs	r1, #3
 8001e1e:	f000 fa2f 	bl	8002280 <log_printf>
        break;
 8001e22:	e02c      	b.n	8001e7e <Cmd_Event_Handler+0xb6>
    case CMD_RX_SIG:
        /* Copy command line to avoid race conditions. */
        strncpy(cmd_ao.cmd_buf, evt->cmd_line, CONSOLE_CMD_BUF_SIZE);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2228      	movs	r2, #40	; 0x28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	481b      	ldr	r0, [pc, #108]	; (8001e9c <Cmd_Event_Handler+0xd4>)
 8001e2e:	f00c fa03 	bl	800e238 <strncpy>
        cmd_execute(cmd_ao.cmd_buf);
 8001e32:	481a      	ldr	r0, [pc, #104]	; (8001e9c <Cmd_Event_Handler+0xd4>)
 8001e34:	f7ff fce2 	bl	80017fc <cmd_execute>
        break;
 8001e38:	e024      	b.n	8001e84 <Cmd_Event_Handler+0xbc>
    default:
        LOGW(TAG, "Unknown event signal");
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <Cmd_Event_Handler+0xc4>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01f      	beq.n	8001e82 <Cmd_Event_Handler+0xba>
 8001e42:	f004 fa85 	bl	8006350 <HAL_GetTick>
 8001e46:	60b8      	str	r0, [r7, #8]
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <Cmd_Event_Handler+0xc8>)
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4a11      	ldr	r2, [pc, #68]	; (8001e94 <Cmd_Event_Handler+0xcc>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	0999      	lsrs	r1, r3, #6
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <Cmd_Event_Handler+0xcc>)
 8001e5a:	fba3 4302 	umull	r4, r3, r3, r2
 8001e5e:	099b      	lsrs	r3, r3, #6
 8001e60:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001e64:	fb04 f303 	mul.w	r3, r4, r3
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <Cmd_Event_Handler+0xc8>)
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	9201      	str	r2, [sp, #4]
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	460b      	mov	r3, r1
 8001e74:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <Cmd_Event_Handler+0xd8>)
 8001e76:	2102      	movs	r1, #2
 8001e78:	f000 fa02 	bl	8002280 <log_printf>
        break;
 8001e7c:	e001      	b.n	8001e82 <Cmd_Event_Handler+0xba>
        break;
 8001e7e:	bf00      	nop
 8001e80:	e000      	b.n	8001e84 <Cmd_Event_Handler+0xbc>
        break;
 8001e82:	bf00      	nop
    }
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd90      	pop	{r4, r7, pc}
 8001e8c:	20000064 	.word	0x20000064
 8001e90:	20000008 	.word	0x20000008
 8001e94:	10624dd3 	.word	0x10624dd3
 8001e98:	0800e810 	.word	0x0800e810
 8001e9c:	20000280 	.word	0x20000280
 8001ea0:	0800e850 	.word	0x0800e850

08001ea4 <console_init>:
 * @brief Initialize console module instance.
 *
 * @return MOD_OK for success.
 */
mod_err_t console_init(void)
{
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af02      	add	r7, sp, #8
    memset(&console, 0, sizeof(console));
 8001eaa:	223c      	movs	r2, #60	; 0x3c
 8001eac:	2100      	movs	r1, #0
 8001eae:	4814      	ldr	r0, [pc, #80]	; (8001f00 <console_init+0x5c>)
 8001eb0:	f00c f8e4 	bl	800e07c <memset>
    LOGI(TAG, "Initialized console.");
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <console_init+0x60>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01c      	beq.n	8001ef6 <console_init+0x52>
 8001ebc:	f004 fa48 	bl	8006350 <HAL_GetTick>
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <console_init+0x64>)
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <console_init+0x68>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0999      	lsrs	r1, r3, #6
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <console_init+0x68>)
 8001ed4:	fba3 4302 	umull	r4, r3, r3, r2
 8001ed8:	099b      	lsrs	r3, r3, #6
 8001eda:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001ede:	fb04 f303 	mul.w	r3, r4, r3
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <console_init+0x64>)
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	9201      	str	r2, [sp, #4]
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	460b      	mov	r3, r1
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <console_init+0x6c>)
 8001ef0:	2103      	movs	r1, #3
 8001ef2:	f000 f9c5 	bl	8002280 <log_printf>
    return MOD_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd90      	pop	{r4, r7, pc}
 8001f00:	200002a8 	.word	0x200002a8
 8001f04:	20000064 	.word	0x20000064
 8001f08:	2000000c 	.word	0x2000000c
 8001f0c:	10624dd3 	.word	0x10624dd3
 8001f10:	0800e88c 	.word	0x0800e88c

08001f14 <console_start>:

mod_err_t console_start(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af02      	add	r7, sp, #8
    /* Create OS objects */
    static const osThreadAttr_t thread_attr = {.stack_size = CONSOLE_THREAD_STACK_SIZE};
    console.console_thread_id = osThreadNew(Console_thread, NULL, &thread_attr);
 8001f1a:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <console_start+0x78>)
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	481c      	ldr	r0, [pc, #112]	; (8001f90 <console_start+0x7c>)
 8001f20:	f008 ff96 	bl	800ae50 <osThreadNew>
 8001f24:	4603      	mov	r3, r0
 8001f26:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <console_start+0x80>)
 8001f28:	6013      	str	r3, [r2, #0]
    console.console_queue_id = osMessageQueueNew(CONSOLE_MSG_QUEUE_SIZE, sizeof(char), NULL);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f32:	f009 f930 	bl	800b196 <osMessageQueueNew>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4a16      	ldr	r2, [pc, #88]	; (8001f94 <console_start+0x80>)
 8001f3a:	6053      	str	r3, [r2, #4]

    ASSERT(console.console_queue_id != NULL && console.console_thread_id != NULL);
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <console_start+0x80>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <console_start+0x38>
 8001f44:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <console_start+0x80>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d118      	bne.n	8001f7e <console_start+0x6a>
 8001f4c:	f004 fa00 	bl	8006350 <HAL_GetTick>
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a10      	ldr	r2, [pc, #64]	; (8001f98 <console_start+0x84>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	0999      	lsrs	r1, r3, #6
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <console_start+0x84>)
 8001f60:	fba2 0203 	umull	r0, r2, r2, r3
 8001f64:	0992      	lsrs	r2, r2, #6
 8001f66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f6a:	fb00 f202 	mul.w	r2, r0, r2
 8001f6e:	1a9a      	subs	r2, r3, r2
 8001f70:	2360      	movs	r3, #96	; 0x60
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <console_start+0x88>)
 8001f76:	480a      	ldr	r0, [pc, #40]	; (8001fa0 <console_start+0x8c>)
 8001f78:	f002 fcf6 	bl	8004968 <printf_>
 8001f7c:	e7fe      	b.n	8001f7c <console_start+0x68>

    uart_start();
 8001f7e:	f003 ffdd 	bl	8005f3c <uart_start>

    return MOD_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	0800f4a0 	.word	0x0800f4a0
 8001f90:	08001fd9 	.word	0x08001fd9
 8001f94:	200002a8 	.word	0x200002a8
 8001f98:	10624dd3 	.word	0x10624dd3
 8001f9c:	0800e8c0 	.word	0x0800e8c0
 8001fa0:	0800e8d8 	.word	0x0800e8d8

08001fa4 <console_post>:

mod_err_t console_post(char c)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
    osStatus_t err = osMessageQueuePut(console.console_queue_id, &c, 0U, 0U);
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <console_post+0x30>)
 8001fb0:	6858      	ldr	r0, [r3, #4]
 8001fb2:	1df9      	adds	r1, r7, #7
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f009 f960 	bl	800b27c <osMessageQueuePut>
 8001fbc:	60f8      	str	r0, [r7, #12]
    if (err != osOK)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <console_post+0x24>
    {
        return MOD_ERR_TIMEOUT;
 8001fc4:	2309      	movs	r3, #9
 8001fc6:	e000      	b.n	8001fca <console_post+0x26>
    }

    return MOD_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200002a8 	.word	0x200002a8

08001fd8 <Console_thread>:

/**
 * @brief Console thread.
 */
static void Console_thread(void *argument)
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	6078      	str	r0, [r7, #4]
    LOG(PROMPT);
 8001fe0:	481e      	ldr	r0, [pc, #120]	; (800205c <Console_thread+0x84>)
 8001fe2:	f002 fcc1 	bl	8004968 <printf_>
    while (1)
    {
        /* Read character from message queue, then process character */
        char char_to_process = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]
        osStatus_t status = osMessageQueueGet(console.console_queue_id, &char_to_process, NULL, osWaitForever);
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <Console_thread+0x88>)
 8001fec:	6858      	ldr	r0, [r3, #4]
 8001fee:	f107 010f 	add.w	r1, r7, #15
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f009 f9a0 	bl	800b33c <osMessageQueueGet>
 8001ffc:	6178      	str	r0, [r7, #20]

        if (status != osOK)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d025      	beq.n	8002050 <Console_thread+0x78>
        {
            LOGE(TAG, "Could not read character from queue.");
 8002004:	4b17      	ldr	r3, [pc, #92]	; (8002064 <Console_thread+0x8c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ec      	beq.n	8001fe6 <Console_thread+0xe>
 800200c:	4b16      	ldr	r3, [pc, #88]	; (8002068 <Console_thread+0x90>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	dde8      	ble.n	8001fe6 <Console_thread+0xe>
 8002014:	f004 f99c 	bl	8006350 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <Console_thread+0x94>)
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4a13      	ldr	r2, [pc, #76]	; (8002070 <Console_thread+0x98>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0999      	lsrs	r1, r3, #6
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <Console_thread+0x98>)
 800202c:	fba3 4302 	umull	r4, r3, r3, r2
 8002030:	099b      	lsrs	r3, r3, #6
 8002032:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002036:	fb04 f303 	mul.w	r3, r4, r3
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	4a0b      	ldr	r2, [pc, #44]	; (800206c <Console_thread+0x94>)
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	9201      	str	r2, [sp, #4]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	460b      	mov	r3, r1
 8002046:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <Console_thread+0x9c>)
 8002048:	2101      	movs	r1, #1
 800204a:	f000 f919 	bl	8002280 <log_printf>
 800204e:	e7ca      	b.n	8001fe6 <Console_thread+0xe>
        }
        else
        {
            console_process(char_to_process);
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f810 	bl	8002078 <console_process>
    {
 8002058:	e7c5      	b.n	8001fe6 <Console_thread+0xe>
 800205a:	bf00      	nop
 800205c:	0800e910 	.word	0x0800e910
 8002060:	200002a8 	.word	0x200002a8
 8002064:	20000064 	.word	0x20000064
 8002068:	20000068 	.word	0x20000068
 800206c:	2000000c 	.word	0x2000000c
 8002070:	10624dd3 	.word	0x10624dd3
 8002074:	0800e91c 	.word	0x0800e91c

08002078 <console_process>:
 * @param c Character to process.
 *
 * @return MOD_OK if successful, otherwise a "MOD_ERR" value.
 */
static mod_err_t console_process(char c)
{
 8002078:	b590      	push	{r4, r7, lr}
 800207a:	b087      	sub	sp, #28
 800207c:	af02      	add	r7, sp, #8
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]

    /* Execute command once Enter key is pressed. */
    if (c == '\n' || c == '\r')
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	2b0a      	cmp	r3, #10
 8002086:	d002      	beq.n	800208e <console_process+0x16>
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	2b0d      	cmp	r3, #13
 800208c:	d110      	bne.n	80020b0 <console_process+0x38>
    {
        console.cmd_buf[console.num_cmd_buf_chars] = '\0'; // Signal end of command string.
 800208e:	4b41      	ldr	r3, [pc, #260]	; (8002194 <console_process+0x11c>)
 8002090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002092:	461a      	mov	r2, r3
 8002094:	4b3f      	ldr	r3, [pc, #252]	; (8002194 <console_process+0x11c>)
 8002096:	4413      	add	r3, r2
 8002098:	2200      	movs	r2, #0
 800209a:	735a      	strb	r2, [r3, #13]
        LOG("\r\n");
 800209c:	483e      	ldr	r0, [pc, #248]	; (8002198 <console_process+0x120>)
 800209e:	f002 fc63 	bl	8004968 <printf_>
        post_cmd_event();
 80020a2:	f000 f891 	bl	80021c8 <post_cmd_event>
        console.num_cmd_buf_chars = 0;
 80020a6:	4b3b      	ldr	r3, [pc, #236]	; (8002194 <console_process+0x11c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	86da      	strh	r2, [r3, #54]	; 0x36
        return MOD_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e06c      	b.n	800218a <console_process+0x112>
    }
    /* Delete a character when Backspace key is pressed. */
    if (c == '\b' || c == '\x7f')
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d002      	beq.n	80020bc <console_process+0x44>
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	2b7f      	cmp	r3, #127	; 0x7f
 80020ba:	d10e      	bne.n	80020da <console_process+0x62>
    {
        if (console.num_cmd_buf_chars > 0)
 80020bc:	4b35      	ldr	r3, [pc, #212]	; (8002194 <console_process+0x11c>)
 80020be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <console_process+0x5e>
        {
            LOG("\x7f");
 80020c4:	4835      	ldr	r0, [pc, #212]	; (800219c <console_process+0x124>)
 80020c6:	f002 fc4f 	bl	8004968 <printf_>
            console.num_cmd_buf_chars--; // "Overwrite" last character.
 80020ca:	4b32      	ldr	r3, [pc, #200]	; (8002194 <console_process+0x11c>)
 80020cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	4b30      	ldr	r3, [pc, #192]	; (8002194 <console_process+0x11c>)
 80020d4:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        return MOD_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e057      	b.n	800218a <console_process+0x112>
    }
    /* Toggle logging on and off LOG_TOGGLE_CHAR key is pressed. */
    if (c == LOG_TOGGLE_CHAR)
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2b09      	cmp	r3, #9
 80020de:	d10f      	bne.n	8002100 <console_process+0x88>
    {
        bool log_active = log_toggle();
 80020e0:	f000 f8bc 	bl	800225c <log_toggle>
 80020e4:	4603      	mov	r3, r0
 80020e6:	72fb      	strb	r3, [r7, #11]
        LOG("<Logging %s>\r\n", log_active ? "on" : "off");
 80020e8:	7afb      	ldrb	r3, [r7, #11]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <console_process+0x7a>
 80020ee:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <console_process+0x128>)
 80020f0:	e000      	b.n	80020f4 <console_process+0x7c>
 80020f2:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <console_process+0x12c>)
 80020f4:	4619      	mov	r1, r3
 80020f6:	482c      	ldr	r0, [pc, #176]	; (80021a8 <console_process+0x130>)
 80020f8:	f002 fc36 	bl	8004968 <printf_>
        return MOD_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e044      	b.n	800218a <console_process+0x112>
    }
    /* Echo the character back. */
    if (isprint(c))
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	3301      	adds	r3, #1
 8002104:	4a29      	ldr	r2, [pc, #164]	; (80021ac <console_process+0x134>)
 8002106:	4413      	add	r3, r2
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	f003 0397 	and.w	r3, r3, #151	; 0x97
 800210e:	2b00      	cmp	r3, #0
 8002110:	d03a      	beq.n	8002188 <console_process+0x110>
    {
        if (console.num_cmd_buf_chars < (CONSOLE_CMD_BUF_SIZE - 1))
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <console_process+0x11c>)
 8002114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002116:	2b26      	cmp	r3, #38	; 0x26
 8002118:	d810      	bhi.n	800213c <console_process+0xc4>
        {
            console.cmd_buf[console.num_cmd_buf_chars++] = c;
 800211a:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <console_process+0x11c>)
 800211c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	b291      	uxth	r1, r2
 8002122:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <console_process+0x11c>)
 8002124:	86d1      	strh	r1, [r2, #54]	; 0x36
 8002126:	461a      	mov	r2, r3
 8002128:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <console_process+0x11c>)
 800212a:	4413      	add	r3, r2
 800212c:	79fa      	ldrb	r2, [r7, #7]
 800212e:	735a      	strb	r2, [r3, #13]
            LOG("%c", c);
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	4619      	mov	r1, r3
 8002134:	481e      	ldr	r0, [pc, #120]	; (80021b0 <console_process+0x138>)
 8002136:	f002 fc17 	bl	8004968 <printf_>
 800213a:	e023      	b.n	8002184 <console_process+0x10c>
        }
        else
        {
            /* No space in buffer, so ring terminal bell. */
            LOGW(TAG, "No more space in command buffer.");
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <console_process+0x13c>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01c      	beq.n	800217e <console_process+0x106>
 8002144:	f004 f904 	bl	8006350 <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <console_process+0x140>)
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <console_process+0x144>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	0999      	lsrs	r1, r3, #6
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4b18      	ldr	r3, [pc, #96]	; (80021bc <console_process+0x144>)
 800215c:	fba3 4302 	umull	r4, r3, r3, r2
 8002160:	099b      	lsrs	r3, r3, #6
 8002162:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002166:	fb04 f303 	mul.w	r3, r4, r3
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <console_process+0x140>)
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	9201      	str	r2, [sp, #4]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	460b      	mov	r3, r1
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <console_process+0x148>)
 8002178:	2102      	movs	r1, #2
 800217a:	f000 f881 	bl	8002280 <log_printf>
            LOG("\a");
 800217e:	4811      	ldr	r0, [pc, #68]	; (80021c4 <console_process+0x14c>)
 8002180:	f002 fbf2 	bl	8004968 <printf_>
        }
        return MOD_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	e000      	b.n	800218a <console_process+0x112>
    }

    return MOD_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	bd90      	pop	{r4, r7, pc}
 8002192:	bf00      	nop
 8002194:	200002a8 	.word	0x200002a8
 8002198:	0800e960 	.word	0x0800e960
 800219c:	0800e96c 	.word	0x0800e96c
 80021a0:	0800e978 	.word	0x0800e978
 80021a4:	0800e97c 	.word	0x0800e97c
 80021a8:	0800e980 	.word	0x0800e980
 80021ac:	0800f674 	.word	0x0800f674
 80021b0:	0800e998 	.word	0x0800e998
 80021b4:	20000064 	.word	0x20000064
 80021b8:	2000000c 	.word	0x2000000c
 80021bc:	10624dd3 	.word	0x10624dd3
 80021c0:	0800e9a4 	.word	0x0800e9a4
 80021c4:	0800e9e4 	.word	0x0800e9e4

080021c8 <post_cmd_event>:

/**
 * @brief Post command event to command active object.
 */
static inline void post_cmd_event(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
    Active_post(cmd_base, (Event const *)&cmd_evt);
 80021cc:	4b03      	ldr	r3, [pc, #12]	; (80021dc <post_cmd_event+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4903      	ldr	r1, [pc, #12]	; (80021e0 <post_cmd_event+0x18>)
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff f83c 	bl	8001250 <Active_post>
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20004fb8 	.word	0x20004fb8
 80021e0:	20000010 	.word	0x20000010

080021e4 <log_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t log_init(void)
{
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af02      	add	r7, sp, #8
    SLIST_INIT(&log_head); // Initialize linked list by setting head pointer to NULL.
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <log_init+0x60>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
    LOGI(TAG, "Initialized log module");
 80021f0:	4b15      	ldr	r3, [pc, #84]	; (8002248 <log_init+0x64>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d01c      	beq.n	8002232 <log_init+0x4e>
 80021f8:	f004 f8aa 	bl	8006350 <HAL_GetTick>
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <log_init+0x68>)
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a12      	ldr	r2, [pc, #72]	; (8002250 <log_init+0x6c>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	0999      	lsrs	r1, r3, #6
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <log_init+0x6c>)
 8002210:	fba3 4302 	umull	r4, r3, r3, r2
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800221a:	fb04 f303 	mul.w	r3, r4, r3
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	4a0a      	ldr	r2, [pc, #40]	; (800224c <log_init+0x68>)
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	9201      	str	r2, [sp, #4]
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	460b      	mov	r3, r1
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <log_init+0x70>)
 800222c:	2103      	movs	r1, #3
 800222e:	f000 f827 	bl	8002280 <log_printf>
    return cmd_register(&log_client_info);
 8002232:	4809      	ldr	r0, [pc, #36]	; (8002258 <log_init+0x74>)
 8002234:	f7ff fa84 	bl	8001740 <cmd_register>
 8002238:	4603      	mov	r3, r0
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	bd90      	pop	{r4, r7, pc}
 8002242:	bf00      	nop
 8002244:	200002e4 	.word	0x200002e4
 8002248:	20000064 	.word	0x20000064
 800224c:	20000060 	.word	0x20000060
 8002250:	10624dd3 	.word	0x10624dd3
 8002254:	0800eaf4 	.word	0x0800eaf4
 8002258:	20000048 	.word	0x20000048

0800225c <log_toggle>:

bool log_toggle(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
    _log_active = _log_active ? false : true;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <log_toggle+0x20>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	f083 0301 	eor.w	r3, r3, #1
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b04      	ldr	r3, [pc, #16]	; (800227c <log_toggle+0x20>)
 800226c:	701a      	strb	r2, [r3, #0]
    return _log_active;
 800226e:	4b03      	ldr	r3, [pc, #12]	; (800227c <log_toggle+0x20>)
 8002270:	781b      	ldrb	r3, [r3, #0]
}
 8002272:	4618      	mov	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	20000064 	.word	0x20000064

08002280 <log_printf>:
{
    return _log_active;
}

void log_printf(const char *tag, log_level_t level, const char *fmt, ...)
{
 8002280:	b40c      	push	{r2, r3}
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	460b      	mov	r3, r1
 800228c:	70fb      	strb	r3, [r7, #3]
    log_level_t tag_level = get_log_level(tag);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fa06 	bl	80026a0 <get_log_level>
 8002294:	4603      	mov	r3, r0
 8002296:	73fb      	strb	r3, [r7, #15]
    if (level > tag_level)
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	429a      	cmp	r2, r3
 800229e:	d807      	bhi.n	80022b0 <log_printf+0x30>
    {
        return;
    }
    va_list args;
    va_start(args, fmt);
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	60bb      	str	r3, [r7, #8]
    vprintf(fmt, args);
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	69b8      	ldr	r0, [r7, #24]
 80022aa:	f002 fb79 	bl	80049a0 <vprintf_>
 80022ae:	e000      	b.n	80022b2 <log_printf+0x32>
        return;
 80022b0:	bf00      	nop
    va_end(args);
}
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022ba:	b002      	add	sp, #8
 80022bc:	4770      	bx	lr
	...

080022c0 <log_level_str>:
 * @param level The log level as an integer.
 *
 * @return Log level as a string. Otherwise, "INVALID".
 */
static const char *log_level_str(int32_t level)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    if (level < ARRAY_SIZE(log_level_names))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b05      	cmp	r3, #5
 80022cc:	d804      	bhi.n	80022d8 <log_level_str+0x18>
    {
        return log_level_names[level];
 80022ce:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <log_level_str+0x28>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d6:	e000      	b.n	80022da <log_level_str+0x1a>
    }
    return "INVALID";
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <log_level_str+0x2c>)
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000018 	.word	0x20000018
 80022ec:	0800eb28 	.word	0x0800eb28

080022f0 <log_level_int>:
 * @param level_name The log level as a string.
 *
 * @return Log level as an int, or -1 on error.
 */
static int32_t log_level_int(const char *level_name)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
    for (uint8_t level = 0; level < ARRAY_SIZE(log_level_names); level++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]
 80022fc:	e00f      	b.n	800231e <log_level_int+0x2e>
    {
        if (strcasecmp(level_name, log_level_names[level]) == 0)
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <log_level_int+0x40>)
 8002302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002306:	4619      	mov	r1, r3
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f00b ff79 	bl	800e200 <strcasecmp>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <log_level_int+0x28>
        {
            return level;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	e007      	b.n	8002328 <log_level_int+0x38>
    for (uint8_t level = 0; level < ARRAY_SIZE(log_level_names); level++)
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	3301      	adds	r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	2b05      	cmp	r3, #5
 8002322:	d9ec      	bls.n	80022fe <log_level_int+0xe>
        }
    }

    return -1; // Log level not found.
 8002324:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000018 	.word	0x20000018

08002334 <cmd_log_get>:
 * @return 0 if successful, 1 otherwise.
 *
 * Log levels include global log level and individual tag log levels that override global level.
 */
static uint32_t cmd_log_get(uint32_t argc, const char **argv)
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
    LOG("Global log level: (%s)\r\n", log_level_str(_global_log_level));
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <cmd_log_get+0x64>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ffbc 	bl	80022c0 <log_level_str>
 8002348:	4603      	mov	r3, r0
 800234a:	4619      	mov	r1, r3
 800234c:	4813      	ldr	r0, [pc, #76]	; (800239c <cmd_log_get+0x68>)
 800234e:	f002 fb0b 	bl	8004968 <printf_>

    if (!SLIST_EMPTY(&log_head))
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <cmd_log_get+0x6c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d018      	beq.n	800238c <cmd_log_get+0x58>
    {
        Log_entry *p = NULL;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
        SLIST_FOREACH(p, &log_head, entries)
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <cmd_log_get+0x6c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e00f      	b.n	8002386 <cmd_log_get+0x52>
        {
            LOG("%s log level: (%s)\r\n", p->tag, log_level_str(p->level));
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1d5c      	adds	r4, r3, #5
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	791b      	ldrb	r3, [r3, #4]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ffa6 	bl	80022c0 <log_level_str>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	4621      	mov	r1, r4
 800237a:	480a      	ldr	r0, [pc, #40]	; (80023a4 <cmd_log_get+0x70>)
 800237c:	f002 faf4 	bl	8004968 <printf_>
        SLIST_FOREACH(p, &log_head, entries)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1ec      	bne.n	8002366 <cmd_log_get+0x32>
        }
    }

    return 0;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bd90      	pop	{r4, r7, pc}
 8002396:	bf00      	nop
 8002398:	20000068 	.word	0x20000068
 800239c:	0800eb30 	.word	0x0800eb30
 80023a0:	200002e4 	.word	0x200002e4
 80023a4:	0800eb50 	.word	0x0800eb50

080023a8 <cmd_log_set>:
 * @return 0 if successful, 1 otherwise.
 *
 * TTYS command format: > log set <tag> <level>.
 */
static uint32_t cmd_log_set(uint32_t argc, const char **argv)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b08b      	sub	sp, #44	; 0x2c
 80023ac:	af04      	add	r7, sp, #16
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
    if (argc != 2)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d022      	beq.n	80023fe <cmd_log_set+0x56>
    {
        LOGW(TAG, "Missing log level arguments");
 80023b8:	4b30      	ldr	r3, [pc, #192]	; (800247c <cmd_log_set+0xd4>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d01c      	beq.n	80023fa <cmd_log_set+0x52>
 80023c0:	f003 ffc6 	bl	8006350 <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <cmd_log_set+0xd8>)
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4a2d      	ldr	r2, [pc, #180]	; (8002484 <cmd_log_set+0xdc>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	0999      	lsrs	r1, r3, #6
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <cmd_log_set+0xdc>)
 80023d8:	fba3 4302 	umull	r4, r3, r3, r2
 80023dc:	099b      	lsrs	r3, r3, #6
 80023de:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80023e2:	fb04 f303 	mul.w	r3, r4, r3
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	4a25      	ldr	r2, [pc, #148]	; (8002480 <cmd_log_set+0xd8>)
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	9201      	str	r2, [sp, #4]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	460b      	mov	r3, r1
 80023f2:	4a25      	ldr	r2, [pc, #148]	; (8002488 <cmd_log_set+0xe0>)
 80023f4:	2102      	movs	r1, #2
 80023f6:	f7ff ff43 	bl	8002280 <log_printf>
        return 1; // Should include only 1 argument.
 80023fa:	2301      	movs	r3, #1
 80023fc:	e03a      	b.n	8002474 <cmd_log_set+0xcc>
    }
    else
    {
        int32_t new_log_level = log_level_int(argv[1]);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	3304      	adds	r3, #4
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff73 	bl	80022f0 <log_level_int>
 800240a:	6178      	str	r0, [r7, #20]
        if (new_log_level == -1)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002412:	d126      	bne.n	8002462 <cmd_log_set+0xba>
        {
            LOGW(TAG, "Log level (%s) not recognized", argv[1]);
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <cmd_log_set+0xd4>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d020      	beq.n	800245e <cmd_log_set+0xb6>
 800241c:	f003 ff98 	bl	8006350 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <cmd_log_set+0xd8>)
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4a16      	ldr	r2, [pc, #88]	; (8002484 <cmd_log_set+0xdc>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	099c      	lsrs	r4, r3, #6
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <cmd_log_set+0xdc>)
 8002434:	fba3 1302 	umull	r1, r3, r3, r2
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <cmd_log_set+0xd8>)
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	6839      	ldr	r1, [r7, #0]
 800244a:	3104      	adds	r1, #4
 800244c:	6809      	ldr	r1, [r1, #0]
 800244e:	9102      	str	r1, [sp, #8]
 8002450:	9201      	str	r2, [sp, #4]
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	4623      	mov	r3, r4
 8002456:	4a0d      	ldr	r2, [pc, #52]	; (800248c <cmd_log_set+0xe4>)
 8002458:	2102      	movs	r1, #2
 800245a:	f7ff ff11 	bl	8002280 <log_printf>
            return 1;
 800245e:	2301      	movs	r3, #1
 8002460:	e008      	b.n	8002474 <cmd_log_set+0xcc>
        }
        else
        { // tag , level
            log_level_set(argv[0], new_log_level);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f000 f80f 	bl	8002490 <log_level_set>
            return 0;
 8002472:	2300      	movs	r3, #0
        }
    }
}
 8002474:	4618      	mov	r0, r3
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	bd90      	pop	{r4, r7, pc}
 800247c:	20000064 	.word	0x20000064
 8002480:	20000060 	.word	0x20000060
 8002484:	10624dd3 	.word	0x10624dd3
 8002488:	0800eb6c 	.word	0x0800eb6c
 800248c:	0800eba4 	.word	0x0800eba4

08002490 <log_level_set>:
 * @param level Desired log level.
 *
 * @note Wild-card tag resets log level of all tags to given value.
 */
static inline void log_level_set(const char *tag, log_level_t level)
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b08b      	sub	sp, #44	; 0x2c
 8002494:	af02      	add	r7, sp, #8
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
    Log_entry *p = NULL;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]

    /* Set global log level and delete linked list containing tag entries. */
    if (strcmp("*", tag) == 0)
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4873      	ldr	r0, [pc, #460]	; (8002670 <log_level_set+0x1e0>)
 80024a4:	f7fd fe94 	bl	80001d0 <strcmp>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d144      	bne.n	8002538 <log_level_set+0xa8>
    {
        _global_log_level = level;
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	4a70      	ldr	r2, [pc, #448]	; (8002674 <log_level_set+0x1e4>)
 80024b2:	6013      	str	r3, [r2, #0]

        LOGI(TAG, "Clearing list and cache");
 80024b4:	4b70      	ldr	r3, [pc, #448]	; (8002678 <log_level_set+0x1e8>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d028      	beq.n	800250e <log_level_set+0x7e>
 80024bc:	f003 ff48 	bl	8006350 <HAL_GetTick>
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	4b6e      	ldr	r3, [pc, #440]	; (800267c <log_level_set+0x1ec>)
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4a6d      	ldr	r2, [pc, #436]	; (8002680 <log_level_set+0x1f0>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	0999      	lsrs	r1, r3, #6
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4b6b      	ldr	r3, [pc, #428]	; (8002680 <log_level_set+0x1f0>)
 80024d4:	fba3 4302 	umull	r4, r3, r3, r2
 80024d8:	099b      	lsrs	r3, r3, #6
 80024da:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80024de:	fb04 f303 	mul.w	r3, r4, r3
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	4a65      	ldr	r2, [pc, #404]	; (800267c <log_level_set+0x1ec>)
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	9201      	str	r2, [sp, #4]
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	460b      	mov	r3, r1
 80024ee:	4a65      	ldr	r2, [pc, #404]	; (8002684 <log_level_set+0x1f4>)
 80024f0:	2103      	movs	r1, #3
 80024f2:	f7ff fec5 	bl	8002280 <log_printf>
        while (!SLIST_EMPTY(&log_head))
 80024f6:	e00a      	b.n	800250e <log_level_set+0x7e>
        {
            p = SLIST_FIRST(&log_head);
 80024f8:	4b63      	ldr	r3, [pc, #396]	; (8002688 <log_level_set+0x1f8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	61fb      	str	r3, [r7, #28]
            SLIST_REMOVE_HEAD(&log_head, entries);
 80024fe:	4b62      	ldr	r3, [pc, #392]	; (8002688 <log_level_set+0x1f8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a60      	ldr	r2, [pc, #384]	; (8002688 <log_level_set+0x1f8>)
 8002506:	6013      	str	r3, [r2, #0]
            free(p);
 8002508:	69f8      	ldr	r0, [r7, #28]
 800250a:	f00b fda1 	bl	800e050 <free>
        while (!SLIST_EMPTY(&log_head))
 800250e:	4b5e      	ldr	r3, [pc, #376]	; (8002688 <log_level_set+0x1f8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <log_level_set+0x68>
        }

        cache_state.entry_count = 0;
 8002516:	4b5d      	ldr	r3, [pc, #372]	; (800268c <log_level_set+0x1fc>)
 8002518:	2200      	movs	r2, #0
 800251a:	605a      	str	r2, [r3, #4]
        cache_state.max_generation = 0;
 800251c:	4b5b      	ldr	r3, [pc, #364]	; (800268c <log_level_set+0x1fc>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]

        LOG("Global log level set to (%s)\r\n", log_level_str(_global_log_level));
 8002522:	4b54      	ldr	r3, [pc, #336]	; (8002674 <log_level_set+0x1e4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff feca 	bl	80022c0 <log_level_str>
 800252c:	4603      	mov	r3, r0
 800252e:	4619      	mov	r1, r3
 8002530:	4857      	ldr	r0, [pc, #348]	; (8002690 <log_level_set+0x200>)
 8002532:	f002 fa19 	bl	8004968 <printf_>
        return;
 8002536:	e097      	b.n	8002668 <log_level_set+0x1d8>
    }

    /* Check if tag is already saved in linked list. */
    SLIST_FOREACH(p, &log_head, entries)
 8002538:	4b53      	ldr	r3, [pc, #332]	; (8002688 <log_level_set+0x1f8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	e01c      	b.n	800257a <log_level_set+0xea>
    {
        if (strcmp(p->tag, tag) == 0)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	3305      	adds	r3, #5
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fd fe42 	bl	80001d0 <strcmp>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d110      	bne.n	8002574 <log_level_set+0xe4>
        {
            p->level = level;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	711a      	strb	r2, [r3, #4]
            LOG("%s log level set to (%s)\r\n", p->tag, log_level_str(p->level));
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	1d5c      	adds	r4, r3, #5
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	791b      	ldrb	r3, [r3, #4]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fead 	bl	80022c0 <log_level_str>
 8002566:	4603      	mov	r3, r0
 8002568:	461a      	mov	r2, r3
 800256a:	4621      	mov	r1, r4
 800256c:	4849      	ldr	r0, [pc, #292]	; (8002694 <log_level_set+0x204>)
 800256e:	f002 f9fb 	bl	8004968 <printf_>
            break;
 8002572:	e005      	b.n	8002580 <log_level_set+0xf0>
    SLIST_FOREACH(p, &log_head, entries)
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1df      	bne.n	8002540 <log_level_set+0xb0>
        }
    }

    /* Tag not found in linked list, add new entry. */
    if (p == NULL)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d147      	bne.n	8002616 <log_level_set+0x186>
    {
        Log_entry *new_entry = (Log_entry *)malloc(sizeof(Log_entry));
 8002586:	2010      	movs	r0, #16
 8002588:	f00b fd5a 	bl	800e040 <malloc>
 800258c:	4603      	mov	r3, r0
 800258e:	617b      	str	r3, [r7, #20]
        if (new_entry == NULL)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d121      	bne.n	80025da <log_level_set+0x14a>
        {
            LOGW(TAG, "Insufficient heap memory for new list entry.");
 8002596:	4b38      	ldr	r3, [pc, #224]	; (8002678 <log_level_set+0x1e8>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d063      	beq.n	8002666 <log_level_set+0x1d6>
 800259e:	f003 fed7 	bl	8006350 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]
 80025a4:	4b35      	ldr	r3, [pc, #212]	; (800267c <log_level_set+0x1ec>)
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4a35      	ldr	r2, [pc, #212]	; (8002680 <log_level_set+0x1f0>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	0999      	lsrs	r1, r3, #6
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4b32      	ldr	r3, [pc, #200]	; (8002680 <log_level_set+0x1f0>)
 80025b6:	fba3 4302 	umull	r4, r3, r3, r2
 80025ba:	099b      	lsrs	r3, r3, #6
 80025bc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80025c0:	fb04 f303 	mul.w	r3, r4, r3
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	4a2d      	ldr	r2, [pc, #180]	; (800267c <log_level_set+0x1ec>)
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	9201      	str	r2, [sp, #4]
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	460b      	mov	r3, r1
 80025d0:	4a31      	ldr	r2, [pc, #196]	; (8002698 <log_level_set+0x208>)
 80025d2:	2102      	movs	r1, #2
 80025d4:	f7ff fe54 	bl	8002280 <log_printf>
            return;
 80025d8:	e045      	b.n	8002666 <log_level_set+0x1d6>
        }
        new_entry->level = level;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	711a      	strb	r2, [r3, #4]
        strncpy(new_entry->tag, tag, sizeof(new_entry->tag));
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3305      	adds	r3, #5
 80025e4:	220a      	movs	r2, #10
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f00b fe25 	bl	800e238 <strncpy>
        SLIST_INSERT_HEAD(&log_head, new_entry, entries);
 80025ee:	4b26      	ldr	r3, [pc, #152]	; (8002688 <log_level_set+0x1f8>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	4a24      	ldr	r2, [pc, #144]	; (8002688 <log_level_set+0x1f8>)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	6013      	str	r3, [r2, #0]
        LOG("Added tag (%s) to list with level (%s)\r\n", new_entry->tag, log_level_str(new_entry->level));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	1d5c      	adds	r4, r3, #5
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	791b      	ldrb	r3, [r3, #4]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fe5b 	bl	80022c0 <log_level_str>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	4621      	mov	r1, r4
 8002610:	4822      	ldr	r0, [pc, #136]	; (800269c <log_level_set+0x20c>)
 8002612:	f002 f9a9 	bl	8004968 <printf_>
    }

    /* Update entry in cache if it exists.
     * search in the cache and update the entry it if exists */
    for (uint32_t i = 0; i < cache_state.entry_count; ++i)
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	e01e      	b.n	800265a <log_level_set+0x1ca>
    {
        if (strcmp(cache_state.cache[i].tag, tag) == 0)
 800261c:	4a1b      	ldr	r2, [pc, #108]	; (800268c <log_level_set+0x1fc>)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	3301      	adds	r3, #1
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd fdd0 	bl	80001d0 <strcmp>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10e      	bne.n	8002654 <log_level_set+0x1c4>
        {
            cache_state.cache[i].level = level;
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	b2d9      	uxtb	r1, r3
 800263e:	4a13      	ldr	r2, [pc, #76]	; (800268c <log_level_set+0x1fc>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	3301      	adds	r3, #1
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	78da      	ldrb	r2, [r3, #3]
 800264a:	f361 1247 	bfi	r2, r1, #5, #3
 800264e:	70da      	strb	r2, [r3, #3]
            break;
 8002650:	bf00      	nop
        }
    }

    return;
 8002652:	e009      	b.n	8002668 <log_level_set+0x1d8>
    for (uint32_t i = 0; i < cache_state.entry_count; ++i)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	3301      	adds	r3, #1
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <log_level_set+0x1fc>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	429a      	cmp	r2, r3
 8002662:	d3db      	bcc.n	800261c <log_level_set+0x18c>
    return;
 8002664:	e000      	b.n	8002668 <log_level_set+0x1d8>
            return;
 8002666:	bf00      	nop
}
 8002668:	3724      	adds	r7, #36	; 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd90      	pop	{r4, r7, pc}
 800266e:	bf00      	nop
 8002670:	0800ebe0 	.word	0x0800ebe0
 8002674:	20000068 	.word	0x20000068
 8002678:	20000064 	.word	0x20000064
 800267c:	20000060 	.word	0x20000060
 8002680:	10624dd3 	.word	0x10624dd3
 8002684:	0800ebe4 	.word	0x0800ebe4
 8002688:	200002e4 	.word	0x200002e4
 800268c:	200002e8 	.word	0x200002e8
 8002690:	0800ec18 	.word	0x0800ec18
 8002694:	0800ec40 	.word	0x0800ec40
 8002698:	0800ec64 	.word	0x0800ec64
 800269c:	0800ecb0 	.word	0x0800ecb0

080026a0 <get_log_level>:
 * @param tag Tag to find level of.
 *
 * @return Tag's log level or global log level if not found.
 */
static inline log_level_t get_log_level(const char *tag)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
    log_level_t tag_lvl = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
    if (!get_cached_log_level(tag, &tag_lvl))
 80026ac:	f107 030f 	add.w	r3, r7, #15
 80026b0:	4619      	mov	r1, r3
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f822 	bl	80026fc <get_cached_log_level>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f083 0301 	eor.w	r3, r3, #1
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d014      	beq.n	80026ee <get_log_level+0x4e>
    {
        if (!get_uncached_log_level(tag, &tag_lvl))
 80026c4:	f107 030f 	add.w	r3, r7, #15
 80026c8:	4619      	mov	r1, r3
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f864 	bl	8002798 <get_uncached_log_level>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f083 0301 	eor.w	r3, r3, #1
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <get_log_level+0x44>
        {
            /* Log level not found, default to global log level. */
            tag_lvl = _global_log_level;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <get_log_level+0x58>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	73fb      	strb	r3, [r7, #15]
        }

        /* Add to cache for faster access */
        log_add_cache(tag, tag_lvl);
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	4619      	mov	r1, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f87d 	bl	80027e8 <log_add_cache>
    }

    return tag_lvl;
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000068 	.word	0x20000068

080026fc <get_cached_log_level>:
 * @param[out] level Log level corresponding to tag.
 * @return true Level found in cache.
 *         false Level not found in cache.
 */
static inline bool get_cached_log_level(const char *tag, log_level_t *level)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]

    /* Assumes tag stored as static variable */
    uint32_t i;
    for (i = 0; i < cache_state.entry_count; ++i)
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	e00b      	b.n	8002724 <get_cached_log_level+0x28>
    {
        if (cache_state.cache[i].tag == tag)
 800270c:	4a21      	ldr	r2, [pc, #132]	; (8002794 <get_cached_log_level+0x98>)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	3301      	adds	r3, #1
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4413      	add	r3, r2
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	429a      	cmp	r2, r3
 800271c:	d008      	beq.n	8002730 <get_cached_log_level+0x34>
    for (i = 0; i < cache_state.entry_count; ++i)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3301      	adds	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <get_cached_log_level+0x98>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	429a      	cmp	r2, r3
 800272c:	d3ee      	bcc.n	800270c <get_cached_log_level+0x10>
 800272e:	e000      	b.n	8002732 <get_cached_log_level+0x36>
        {
            break;
 8002730:	bf00      	nop
        }
    }

    /* Could not find log level */
    if (i == cache_state.entry_count)
 8002732:	4b18      	ldr	r3, [pc, #96]	; (8002794 <get_cached_log_level+0x98>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	429a      	cmp	r2, r3
 800273a:	d101      	bne.n	8002740 <get_cached_log_level+0x44>
    {
        return false;
 800273c:	2300      	movs	r3, #0
 800273e:	e024      	b.n	800278a <get_cached_log_level+0x8e>
    }

    /* Return level */
    *level = (log_level_t)cache_state.cache[i].level;
 8002740:	4a14      	ldr	r2, [pc, #80]	; (8002794 <get_cached_log_level+0x98>)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3301      	adds	r3, #1
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	78db      	ldrb	r3, [r3, #3]
 800274c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002750:	b2db      	uxtb	r3, r3
 8002752:	461a      	mov	r2, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	701a      	strb	r2, [r3, #0]

    /* If cache is full, increment generation with each cache hit and heapify */
    if (cache_state.entry_count == TAG_CACHE_SIZE)
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <get_cached_log_level+0x98>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b1f      	cmp	r3, #31
 800275e:	d113      	bne.n	8002788 <get_cached_log_level+0x8c>
    {
        cache_state.cache[i].generation = cache_state.max_generation++;
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <get_cached_log_level+0x98>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	490b      	ldr	r1, [pc, #44]	; (8002794 <get_cached_log_level+0x98>)
 8002768:	600a      	str	r2, [r1, #0]
 800276a:	f023 4060 	bic.w	r0, r3, #3758096384	; 0xe0000000
 800276e:	4909      	ldr	r1, [pc, #36]	; (8002794 <get_cached_log_level+0x98>)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
 8002778:	f360 031c 	bfi	r3, r0, #0, #29
 800277c:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
        heap_bubble_down(i);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f882 	bl	800288c <heap_bubble_down>
    }

    return true;
 8002788:	2301      	movs	r3, #1
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	200002e8 	.word	0x200002e8

08002798 <get_uncached_log_level>:
 * @param[out] level Log level corresponding to tag.
 *
 * @return true if log level found, false otherwise.
 */
static inline bool get_uncached_log_level(const char *tag, log_level_t *level)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
    Log_entry *p = NULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]

    SLIST_FOREACH(p, &log_head, entries)
 80027a6:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <get_uncached_log_level+0x4c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	e011      	b.n	80027d2 <get_uncached_log_level+0x3a>
    {
        if (strcmp(p->tag, tag) == 0)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3305      	adds	r3, #5
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fd0b 	bl	80001d0 <strcmp>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d105      	bne.n	80027cc <get_uncached_log_level+0x34>
        {
            *level = p->level;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	791a      	ldrb	r2, [r3, #4]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	701a      	strb	r2, [r3, #0]
            return true;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e006      	b.n	80027da <get_uncached_log_level+0x42>
    SLIST_FOREACH(p, &log_head, entries)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1ea      	bne.n	80027ae <get_uncached_log_level+0x16>
        }
    }

    return false;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200002e4 	.word	0x200002e4

080027e8 <log_add_cache>:
 * @param log_level Module's log level.
 *
 * Cache is implemented using a binary min-heap.
 */
static inline void log_add_cache(const char *tag, log_level_t log_level)
{
 80027e8:	b5b0      	push	{r4, r5, r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	70fb      	strb	r3, [r7, #3]
    uint32_t generation = cache_state.max_generation++;
 80027f4:	4b24      	ldr	r3, [pc, #144]	; (8002888 <log_add_cache+0xa0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	4923      	ldr	r1, [pc, #140]	; (8002888 <log_add_cache+0xa0>)
 80027fc:	600a      	str	r2, [r1, #0]
 80027fe:	61fb      	str	r3, [r7, #28]

    /* No need to sort since min-heap. */
    if (cache_state.entry_count < TAG_CACHE_SIZE)
 8002800:	4b21      	ldr	r3, [pc, #132]	; (8002888 <log_add_cache+0xa0>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b1e      	cmp	r3, #30
 8002806:	d824      	bhi.n	8002852 <log_add_cache+0x6a>
    {
        cache_state.cache[cache_state.entry_count] = (Log_cached_entry){
 8002808:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <log_add_cache+0xa0>)
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f023 4560 	bic.w	r5, r3, #3758096384	; 0xe0000000
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	b2dc      	uxtb	r4, r3
 800281a:	481b      	ldr	r0, [pc, #108]	; (8002888 <log_add_cache+0xa0>)
 800281c:	1c51      	adds	r1, r2, #1
 800281e:	f850 3031 	ldr.w	r3, [r0, r1, lsl #3]
 8002822:	f365 031c 	bfi	r3, r5, #0, #29
 8002826:	f840 3031 	str.w	r3, [r0, r1, lsl #3]
 800282a:	4917      	ldr	r1, [pc, #92]	; (8002888 <log_add_cache+0xa0>)
 800282c:	1c53      	adds	r3, r2, #1
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	440b      	add	r3, r1
 8002832:	78d9      	ldrb	r1, [r3, #3]
 8002834:	f364 1147 	bfi	r1, r4, #5, #3
 8002838:	70d9      	strb	r1, [r3, #3]
 800283a:	4913      	ldr	r1, [pc, #76]	; (8002888 <log_add_cache+0xa0>)
 800283c:	1c53      	adds	r3, r2, #1
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	440b      	add	r3, r1
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	605a      	str	r2, [r3, #4]
            .generation = generation,
            .level = log_level,
            .tag = tag};
        ++cache_state.entry_count;
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <log_add_cache+0xa0>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	3301      	adds	r3, #1
 800284c:	4a0e      	ldr	r2, [pc, #56]	; (8002888 <log_add_cache+0xa0>)
 800284e:	6053      	str	r3, [r2, #4]
 8002850:	e016      	b.n	8002880 <log_add_cache+0x98>
    }

    // Cache is full, replace first element
    // and do bubble-down sorting to restore
    // binary min-heap.
    cache_state.cache[0] = (Log_cached_entry){
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f023 4060 	bic.w	r0, r3, #3758096384	; 0xe0000000
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	b2d9      	uxtb	r1, r3
 8002860:	4a09      	ldr	r2, [pc, #36]	; (8002888 <log_add_cache+0xa0>)
 8002862:	6893      	ldr	r3, [r2, #8]
 8002864:	f360 031c 	bfi	r3, r0, #0, #29
 8002868:	6093      	str	r3, [r2, #8]
 800286a:	4a07      	ldr	r2, [pc, #28]	; (8002888 <log_add_cache+0xa0>)
 800286c:	7ad3      	ldrb	r3, [r2, #11]
 800286e:	f361 1347 	bfi	r3, r1, #5, #3
 8002872:	72d3      	strb	r3, [r2, #11]
 8002874:	4a04      	ldr	r2, [pc, #16]	; (8002888 <log_add_cache+0xa0>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	60d3      	str	r3, [r2, #12]
        .tag = tag,
        .level = log_level,
        .generation = generation};
    heap_bubble_down(0);
 800287a:	2000      	movs	r0, #0
 800287c:	f000 f806 	bl	800288c <heap_bubble_down>
}
 8002880:	3720      	adds	r7, #32
 8002882:	46bd      	mov	sp, r7
 8002884:	bdb0      	pop	{r4, r5, r7, pc}
 8002886:	bf00      	nop
 8002888:	200002e8 	.word	0x200002e8

0800288c <heap_bubble_down>:

static inline void heap_bubble_down(int index)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
    while (index < TAG_CACHE_SIZE / 2)
 8002894:	e021      	b.n	80028da <heap_bubble_down+0x4e>
    {
        uint32_t left_index = index * 2 + 1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	3301      	adds	r3, #1
 800289c:	617b      	str	r3, [r7, #20]
        uint32_t right_index = left_index + 1;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	3301      	adds	r3, #1
 80028a2:	613b      	str	r3, [r7, #16]
        uint32_t next = (cache_state.cache[left_index].generation < cache_state.cache[right_index].generation) ? left_index : right_index;
 80028a4:	4a11      	ldr	r2, [pc, #68]	; (80028ec <heap_bubble_down+0x60>)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	3301      	adds	r3, #1
 80028aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028ae:	f3c3 021c 	ubfx	r2, r3, #0, #29
 80028b2:	490e      	ldr	r1, [pc, #56]	; (80028ec <heap_bubble_down+0x60>)
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	3301      	adds	r3, #1
 80028b8:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80028bc:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d201      	bcs.n	80028c8 <heap_bubble_down+0x3c>
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	e000      	b.n	80028ca <heap_bubble_down+0x3e>
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	60fb      	str	r3, [r7, #12]
        heap_swap(index, next); // cache[index] always greater than cache[next]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68f9      	ldr	r1, [r7, #12]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 f80d 	bl	80028f0 <heap_swap>
        index = next;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	607b      	str	r3, [r7, #4]
    while (index < TAG_CACHE_SIZE / 2)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b0e      	cmp	r3, #14
 80028de:	ddda      	ble.n	8002896 <heap_bubble_down+0xa>
    }
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200002e8 	.word	0x200002e8

080028f0 <heap_swap>:

static inline void heap_swap(uint32_t i, uint32_t j)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
    Log_cached_entry tmp = cache_state.cache[i];
 80028fa:	4915      	ldr	r1, [pc, #84]	; (8002950 <heap_swap+0x60>)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3301      	adds	r3, #1
 8002900:	f107 0208 	add.w	r2, r7, #8
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	440b      	add	r3, r1
 8002908:	e893 0003 	ldmia.w	r3, {r0, r1}
 800290c:	e882 0003 	stmia.w	r2, {r0, r1}
    cache_state.cache[i] = cache_state.cache[j];
 8002910:	480f      	ldr	r0, [pc, #60]	; (8002950 <heap_swap+0x60>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3301      	adds	r3, #1
 8002916:	490e      	ldr	r1, [pc, #56]	; (8002950 <heap_swap+0x60>)
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	3201      	adds	r2, #1
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4403      	add	r3, r0
 8002920:	00d2      	lsls	r2, r2, #3
 8002922:	440a      	add	r2, r1
 8002924:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002928:	e883 0003 	stmia.w	r3, {r0, r1}
    cache_state.cache[j] = tmp;
 800292c:	4a08      	ldr	r2, [pc, #32]	; (8002950 <heap_swap+0x60>)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	3301      	adds	r3, #1
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	f107 0208 	add.w	r2, r7, #8
 800293a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800293e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	200002e8 	.word	0x200002e8

08002954 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f043 0201 	orr.w	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	601a      	str	r2, [r3, #0]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	609a      	str	r2, [r3, #8]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80029aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029ac:	4907      	ldr	r1, [pc, #28]	; (80029cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80029b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4013      	ands	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029be:	68fb      	ldr	r3, [r7, #12]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	40021000 	.word	0x40021000

080029d0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80029da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029dc:	4907      	ldr	r1, [pc, #28]	; (80029fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80029e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4013      	ands	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029ee:	68fb      	ldr	r3, [r7, #12]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40021000 	.word	0x40021000

08002a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a06:	f003 fc6f 	bl	80062e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a0a:	f000 f82f 	bl	8002a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a0e:	f000 f9a9 	bl	8002d64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002a12:	f000 f957 	bl	8002cc4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002a16:	f000 f8dd 	bl	8002bd4 <MX_TIM3_Init>
  MX_SPI2_Init();
 8002a1a:	f000 f89d 	bl	8002b58 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  uart_config_t uart_cfg = {.uart_reg_base = USART2, .irq_num = USART2_IRQn};
 8002a1e:	4a0f      	ldr	r2, [pc, #60]	; (8002a5c <main+0x5c>)
 8002a20:	463b      	mov	r3, r7
 8002a22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a26:	e883 0003 	stmia.w	r3, {r0, r1}
  uart_init(&uart_cfg);
 8002a2a:	463b      	mov	r3, r7
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f003 fa1d 	bl	8005e6c <uart_init>
  uart_start();
 8002a32:	f003 fa83 	bl	8005f3c <uart_start>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002a36:	2201      	movs	r2, #1
 8002a38:	2120      	movs	r1, #32
 8002a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a3e:	f003 ff1f 	bl	8006880 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002a42:	f008 f963 	bl	800ad0c <osKernelInitialize>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002a46:	4a06      	ldr	r2, [pc, #24]	; (8002a60 <main+0x60>)
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4806      	ldr	r0, [pc, #24]	; (8002a64 <main+0x64>)
 8002a4c:	f008 fa00 	bl	800ae50 <osThreadNew>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4a05      	ldr	r2, [pc, #20]	; (8002a68 <main+0x68>)
 8002a54:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002a56:	f008 f97d 	bl	800ad54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8002a5a:	e7fe      	b.n	8002a5a <main+0x5a>
 8002a5c:	0800ecec 	.word	0x0800ecec
 8002a60:	0800f4c4 	.word	0x0800f4c4
 8002a64:	08002e59 	.word	0x08002e59
 8002a68:	20004fbc 	.word	0x20004fbc

08002a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b0b8      	sub	sp, #224	; 0xe0
 8002a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a76:	2244      	movs	r2, #68	; 0x44
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f00b fafe 	bl	800e07c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a80:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a90:	463b      	mov	r3, r7
 8002a92:	2288      	movs	r2, #136	; 0x88
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f00b faf0 	bl	800e07c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002aaa:	2310      	movs	r3, #16
 8002aac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002abc:	2301      	movs	r3, #1
 8002abe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002ac2:	230a      	movs	r3, #10
 8002ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002ac8:	2307      	movs	r3, #7
 8002aca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ada:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f003 ff4a 	bl	8006978 <HAL_RCC_OscConfig>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002aea:	f000 f9e1 	bl	8002eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002aee:	230f      	movs	r3, #15
 8002af0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002af4:	2303      	movs	r3, #3
 8002af6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b0c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002b10:	2104      	movs	r1, #4
 8002b12:	4618      	mov	r0, r3
 8002b14:	f004 fb16 	bl	8007144 <HAL_RCC_ClockConfig>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002b1e:	f000 f9c7 	bl	8002eb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b22:	2302      	movs	r3, #2
 8002b24:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b26:	2300      	movs	r3, #0
 8002b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b2a:	463b      	mov	r3, r7
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f004 fd2b 	bl	8007588 <HAL_RCCEx_PeriphCLKConfig>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002b38:	f000 f9ba 	bl	8002eb0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002b3c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b40:	f003 fec4 	bl	80068cc <HAL_PWREx_ControlVoltageScaling>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8002b4a:	f000 f9b1 	bl	8002eb0 <Error_Handler>
  }
}
 8002b4e:	bf00      	nop
 8002b50:	37e0      	adds	r7, #224	; 0xe0
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <MX_SPI2_Init+0x74>)
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <MX_SPI2_Init+0x78>)
 8002b60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b62:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <MX_SPI2_Init+0x74>)
 8002b64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b6a:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <MX_SPI2_Init+0x74>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b70:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <MX_SPI2_Init+0x74>)
 8002b72:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b76:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b78:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <MX_SPI2_Init+0x74>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b7e:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <MX_SPI2_Init+0x74>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <MX_SPI2_Init+0x74>)
 8002b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b8a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <MX_SPI2_Init+0x74>)
 8002b8e:	2228      	movs	r2, #40	; 0x28
 8002b90:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b92:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <MX_SPI2_Init+0x74>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <MX_SPI2_Init+0x74>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <MX_SPI2_Init+0x74>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <MX_SPI2_Init+0x74>)
 8002ba6:	2207      	movs	r2, #7
 8002ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002baa:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <MX_SPI2_Init+0x74>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <MX_SPI2_Init+0x74>)
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002bb6:	4805      	ldr	r0, [pc, #20]	; (8002bcc <MX_SPI2_Init+0x74>)
 8002bb8:	f005 f9a2 	bl	8007f00 <HAL_SPI_Init>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002bc2:	f000 f975 	bl	8002eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20004fc0 	.word	0x20004fc0
 8002bd0:	40003800 	.word	0x40003800

08002bd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08e      	sub	sp, #56	; 0x38
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be8:	f107 031c 	add.w	r3, r7, #28
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bf4:	463b      	mov	r3, r7
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	605a      	str	r2, [r3, #4]
 8002bfc:	609a      	str	r2, [r3, #8]
 8002bfe:	60da      	str	r2, [r3, #12]
 8002c00:	611a      	str	r2, [r3, #16]
 8002c02:	615a      	str	r2, [r3, #20]
 8002c04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c06:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <MX_TIM3_Init+0xe8>)
 8002c08:	4a2d      	ldr	r2, [pc, #180]	; (8002cc0 <MX_TIM3_Init+0xec>)
 8002c0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9768 - 1;
 8002c0c:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <MX_TIM3_Init+0xe8>)
 8002c0e:	f242 6227 	movw	r2, #9767	; 0x2627
 8002c12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c14:	4b29      	ldr	r3, [pc, #164]	; (8002cbc <MX_TIM3_Init+0xe8>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4095 - 1;
 8002c1a:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <MX_TIM3_Init+0xe8>)
 8002c1c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002c20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c22:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <MX_TIM3_Init+0xe8>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c28:	4b24      	ldr	r3, [pc, #144]	; (8002cbc <MX_TIM3_Init+0xe8>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c2e:	4823      	ldr	r0, [pc, #140]	; (8002cbc <MX_TIM3_Init+0xe8>)
 8002c30:	f005 ff04 	bl	8008a3c <HAL_TIM_Base_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8002c3a:	f000 f939 	bl	8002eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c48:	4619      	mov	r1, r3
 8002c4a:	481c      	ldr	r0, [pc, #112]	; (8002cbc <MX_TIM3_Init+0xe8>)
 8002c4c:	f006 fbec 	bl	8009428 <HAL_TIM_ConfigClockSource>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8002c56:	f000 f92b 	bl	8002eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c5a:	4818      	ldr	r0, [pc, #96]	; (8002cbc <MX_TIM3_Init+0xe8>)
 8002c5c:	f005 ffb6 	bl	8008bcc <HAL_TIM_PWM_Init>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002c66:	f000 f923 	bl	8002eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c72:	f107 031c 	add.w	r3, r7, #28
 8002c76:	4619      	mov	r1, r3
 8002c78:	4810      	ldr	r0, [pc, #64]	; (8002cbc <MX_TIM3_Init+0xe8>)
 8002c7a:	f007 f8f3 	bl	8009e64 <HAL_TIMEx_MasterConfigSynchronization>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002c84:	f000 f914 	bl	8002eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c88:	2360      	movs	r3, #96	; 0x60
 8002c8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c94:	2300      	movs	r3, #0
 8002c96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c98:	463b      	mov	r3, r7
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4807      	ldr	r0, [pc, #28]	; (8002cbc <MX_TIM3_Init+0xe8>)
 8002ca0:	f006 fab2 	bl	8009208 <HAL_TIM_PWM_ConfigChannel>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002caa:	f000 f901 	bl	8002eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002cae:	4803      	ldr	r0, [pc, #12]	; (8002cbc <MX_TIM3_Init+0xe8>)
 8002cb0:	f002 feb4 	bl	8005a1c <HAL_TIM_MspPostInit>

}
 8002cb4:	bf00      	nop
 8002cb6:	3738      	adds	r7, #56	; 0x38
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20005024 	.word	0x20005024
 8002cc0:	40000400 	.word	0x40000400

08002cc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08e      	sub	sp, #56	; 0x38
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002cca:	f107 031c 	add.w	r3, r7, #28
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	60da      	str	r2, [r3, #12]
 8002cd8:	611a      	str	r2, [r3, #16]
 8002cda:	615a      	str	r2, [r3, #20]
 8002cdc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	611a      	str	r2, [r3, #16]
 8002cec:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002cee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002cf2:	f7ff fe6d 	bl	80029d0 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002cf6:	2001      	movs	r0, #1
 8002cf8:	f7ff fe52 	bl	80029a0 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8002cfc:	230c      	movs	r3, #12
 8002cfe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002d00:	2302      	movs	r3, #2
 8002d02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002d04:	2303      	movs	r3, #3
 8002d06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002d10:	2307      	movs	r3, #7
 8002d12:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	4619      	mov	r1, r3
 8002d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d1c:	f007 fa93 	bl	800a246 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002d20:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002d24:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002d26:	2300      	movs	r3, #0
 8002d28:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002d32:	230c      	movs	r3, #12
 8002d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002d3e:	f107 031c 	add.w	r3, r7, #28
 8002d42:	4619      	mov	r1, r3
 8002d44:	4806      	ldr	r0, [pc, #24]	; (8002d60 <MX_USART2_UART_Init+0x9c>)
 8002d46:	f007 ff21 	bl	800ab8c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002d4a:	4805      	ldr	r0, [pc, #20]	; (8002d60 <MX_USART2_UART_Init+0x9c>)
 8002d4c:	f7ff fe12 	bl	8002974 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002d50:	4803      	ldr	r0, [pc, #12]	; (8002d60 <MX_USART2_UART_Init+0x9c>)
 8002d52:	f7ff fdff 	bl	8002954 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d56:	bf00      	nop
 8002d58:	3738      	adds	r7, #56	; 0x38
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40004400 	.word	0x40004400

08002d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6a:	f107 0314 	add.w	r3, r7, #20
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	609a      	str	r2, [r3, #8]
 8002d76:	60da      	str	r2, [r3, #12]
 8002d78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d7a:	4b34      	ldr	r3, [pc, #208]	; (8002e4c <MX_GPIO_Init+0xe8>)
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7e:	4a33      	ldr	r2, [pc, #204]	; (8002e4c <MX_GPIO_Init+0xe8>)
 8002d80:	f043 0304 	orr.w	r3, r3, #4
 8002d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d86:	4b31      	ldr	r3, [pc, #196]	; (8002e4c <MX_GPIO_Init+0xe8>)
 8002d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d92:	4b2e      	ldr	r3, [pc, #184]	; (8002e4c <MX_GPIO_Init+0xe8>)
 8002d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d96:	4a2d      	ldr	r2, [pc, #180]	; (8002e4c <MX_GPIO_Init+0xe8>)
 8002d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d9e:	4b2b      	ldr	r3, [pc, #172]	; (8002e4c <MX_GPIO_Init+0xe8>)
 8002da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002daa:	4b28      	ldr	r3, [pc, #160]	; (8002e4c <MX_GPIO_Init+0xe8>)
 8002dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dae:	4a27      	ldr	r2, [pc, #156]	; (8002e4c <MX_GPIO_Init+0xe8>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002db6:	4b25      	ldr	r3, [pc, #148]	; (8002e4c <MX_GPIO_Init+0xe8>)
 8002db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc2:	4b22      	ldr	r3, [pc, #136]	; (8002e4c <MX_GPIO_Init+0xe8>)
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc6:	4a21      	ldr	r2, [pc, #132]	; (8002e4c <MX_GPIO_Init+0xe8>)
 8002dc8:	f043 0302 	orr.w	r3, r3, #2
 8002dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dce:	4b1f      	ldr	r3, [pc, #124]	; (8002e4c <MX_GPIO_Init+0xe8>)
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2120      	movs	r1, #32
 8002dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002de2:	f003 fd4d 	bl	8006880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_RESET);
 8002de6:	2200      	movs	r2, #0
 8002de8:	2110      	movs	r1, #16
 8002dea:	4819      	ldr	r0, [pc, #100]	; (8002e50 <MX_GPIO_Init+0xec>)
 8002dec:	f003 fd48 	bl	8006880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002df6:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <MX_GPIO_Init+0xf0>)
 8002df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002dfe:	f107 0314 	add.w	r3, r7, #20
 8002e02:	4619      	mov	r1, r3
 8002e04:	4812      	ldr	r0, [pc, #72]	; (8002e50 <MX_GPIO_Init+0xec>)
 8002e06:	f003 fb91 	bl	800652c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002e0a:	2320      	movs	r3, #32
 8002e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e16:	2300      	movs	r3, #0
 8002e18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002e1a:	f107 0314 	add.w	r3, r7, #20
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e24:	f003 fb82 	bl	800652c <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_CS_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin;
 8002e28:	2310      	movs	r3, #16
 8002e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	2300      	movs	r3, #0
 8002e36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAX_CS_GPIO_Port, &GPIO_InitStruct);
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4804      	ldr	r0, [pc, #16]	; (8002e50 <MX_GPIO_Init+0xec>)
 8002e40:	f003 fb74 	bl	800652c <HAL_GPIO_Init>

}
 8002e44:	bf00      	nop
 8002e46:	3728      	adds	r7, #40	; 0x28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	48000800 	.word	0x48000800
 8002e54:	10210000 	.word	0x10210000

08002e58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

    console_init();
 8002e60:	f7ff f820 	bl	8001ea4 <console_init>
    cmd_init();
 8002e64:	f7fe fc16 	bl	8001694 <cmd_init>
    log_init();
 8002e68:	f7ff f9bc 	bl	80021e4 <log_init>

    reflow_init(&reflow_cfg);
 8002e6c:	4806      	ldr	r0, [pc, #24]	; (8002e88 <StartDefaultTask+0x30>)
 8002e6e:	f002 f92f 	bl	80050d0 <reflow_init>

    console_start();
 8002e72:	f7ff f84f 	bl	8001f14 <console_start>
    cmd_start();
 8002e76:	f7fe fc53 	bl	8001720 <cmd_start>
    reflow_start();
 8002e7a:	f002 f9e3 	bl	8005244 <reflow_start>

    /* Infinite loop */
    for (;;)
    {
        osDelay(1);
 8002e7e:	2001      	movs	r0, #1
 8002e80:	f008 f878 	bl	800af74 <osDelay>
 8002e84:	e7fb      	b.n	8002e7e <StartDefaultTask+0x26>
 8002e86:	bf00      	nop
 8002e88:	0800f4e8 	.word	0x0800f4e8

08002e8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */


  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a04      	ldr	r2, [pc, #16]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d101      	bne.n	8002ea2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e9e:	f003 fa43 	bl	8006328 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40001400 	.word	0x40001400

08002eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb4:	b672      	cpsid	i
}
 8002eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8002eb8:	e7fe      	b.n	8002eb8 <Error_Handler+0x8>

08002eba <PID_Init>:
#include "PID.h"

#define SAMESIGN(X, Y) ((X) <= 0) == ((Y) <= 0)

void PID_Init(PID_t * const pid, PID_cfg_t const * const pid_cfg)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]

	/* Clear controller memory */
	pid->integral = 0.0f;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	61da      	str	r2, [r3, #28]
	pid->prev_error = 0.0f;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24
	pid->derivative = 0.0f;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	621a      	str	r2, [r3, #32]
	pid->prev_measurement = 0.0f;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	629a      	str	r2, [r3, #40]	; 0x28
	pid->out = 0.0f;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Store controller parameters */
    pid->Kp = pid_cfg->Kp;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	601a      	str	r2, [r3, #0]
    pid->Ki = pid_cfg->Ki;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	605a      	str	r2, [r3, #4]
    pid->Kd = pid_cfg->Kd;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	609a      	str	r2, [r3, #8]
    pid->tau = pid_cfg->tau;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	60da      	str	r2, [r3, #12]
    pid->Ts = pid_cfg->Ts;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	611a      	str	r2, [r3, #16]
    pid->out_lim_max = pid_cfg->out_max;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	615a      	str	r2, [r3, #20]
    pid->out_lim_min = pid_cfg->out_min;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	619a      	str	r2, [r3, #24]
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <PID_Calculate>:

float PID_Calculate(PID_t * const pid, float setpoint, float measurement)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f3c:	edc7 0a01 	vstr	s1, [r7, #4]
    /* Compute error */
    float error = setpoint - measurement; 
 8002f40:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f44:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f4c:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Compute proportional term */
    float proportional = pid->Kp * error;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	edd3 7a00 	vldr	s15, [r3]
 8002f56:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f5e:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Compute integral term */
    if ((pid->out == pid->out_lim_max || pid->out == pid->out_lim_min) && SAMESIGN(pid->out, error)) 
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f6e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f76:	d00a      	beq.n	8002f8e <PID_Calculate+0x5e>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f84:	eeb4 7a67 	vcmp.f32	s14, s15
 8002f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8c:	d120      	bne.n	8002fd0 <PID_Calculate+0xa0>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002f94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9c:	bf94      	ite	ls
 8002f9e:	2301      	movls	r3, #1
 8002fa0:	2300      	movhi	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f083 0301 	eor.w	r3, r3, #1
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb6:	bf94      	ite	ls
 8002fb8:	2301      	movls	r3, #1
 8002fba:	2300      	movhi	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	4053      	eors	r3, r2
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d004      	beq.n	8002fd0 <PID_Calculate+0xa0>
    {
        pid->integral = pid->integral; /* Clamp integral term to avoid wind-up. */
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	61da      	str	r2, [r3, #28]
 8002fce:	e01c      	b.n	800300a <PID_Calculate+0xda>
    }
    else
    {
    	pid->integral = pid->integral + 0.5f * pid->Ki * pid->Ts * (error + pid->prev_error);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	ed93 7a07 	vldr	s14, [r3, #28]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fdc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002fe0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	edd3 7a04 	vldr	s15, [r3, #16]
 8002fea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 8002ff4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ff8:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	edc3 7a07 	vstr	s15, [r3, #28]
    }

	/* Compute filtered derivative term. 
     * Note: Taking derivative on measurement only. */
    pid->derivative = -(2.0f * pid->Kd * (measurement - pid->prev_measurement) 	
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003010:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800301a:	edd7 6a01 	vldr	s13, [r7, #4]
 800301e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003022:	ee27 7a27 	vmul.f32	s14, s14, s15
                        + (2.0f * pid->tau - pid->Ts) * pid->derivative)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	edd3 7a03 	vldr	s15, [r3, #12]
 800302c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	edd3 7a04 	vldr	s15, [r3, #16]
 8003036:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003044:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->derivative = -(2.0f * pid->Kd * (measurement - pid->prev_measurement) 	
 8003048:	eef1 6a67 	vneg.f32	s13, s15
                        / (2.0f * pid->tau + pid->Ts);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003052:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	edd3 7a04 	vldr	s15, [r3, #16]
 800305c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003060:	eec6 7a87 	vdiv.f32	s15, s13, s14
    pid->derivative = -(2.0f * pid->Kd * (measurement - pid->prev_measurement) 	
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	edc3 7a08 	vstr	s15, [r3, #32]

	/* Compute output */
    pid->out = proportional + pid->integral + pid->derivative;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003070:	edd7 7a04 	vldr	s15, [r7, #16]
 8003074:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	edd3 7a08 	vldr	s15, [r3, #32]
 800307e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    /* Floor output */
    if (pid->out > pid->out_lim_max) 
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	edd3 7a05 	vldr	s15, [r3, #20]
 8003094:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309c:	dd04      	ble.n	80030a8 <PID_Calculate+0x178>
    {
        pid->out = pid->out_lim_max;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80030a6:	e00e      	b.n	80030c6 <PID_Calculate+0x196>
    }
    else if (pid->out < pid->out_lim_min)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80030b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030bc:	d503      	bpl.n	80030c6 <PID_Calculate+0x196>
    {
        pid->out = pid->out_lim_min;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c
    }

	/* Store error and measurement for next PID calculation. */
    pid->prev_error       = error;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24
    pid->prev_measurement = measurement;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Return controller output */
    return pid->out;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	ee07 3a90 	vmov	s15, r3
}
 80030da:	eeb0 0a67 	vmov.f32	s0, s15
 80030de:	371c      	adds	r7, #28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <PID_Reset>:

void PID_Reset(PID_t * const pid)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
    pid->integral = 0.0f;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	61da      	str	r2, [r3, #28]
	pid->prev_error = 0.0f;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24
	pid->derivative = 0.0f;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	621a      	str	r2, [r3, #32]
	pid->prev_measurement = 0.0f;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	629a      	str	r2, [r3, #40]	; 0x28
	pid->out = 0.0f;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	4603      	mov	r3, r0
 8003132:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4603      	mov	r3, r0
 800314e:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <_out_char+0x1e>
    uart_putc(character);
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	4618      	mov	r0, r3
 800315a:	f002 ff4f 	bl	8005ffc <uart_putc>
  }
}
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	e002      	b.n	800317c <_strnlen_s+0x16>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	3301      	adds	r3, #1
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d004      	beq.n	800318e <_strnlen_s+0x28>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	1e5a      	subs	r2, r3, #1
 8003188:	603a      	str	r2, [r7, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f3      	bne.n	8003176 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	1ad3      	subs	r3, r2, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	2b2f      	cmp	r3, #47	; 0x2f
 80031ae:	d904      	bls.n	80031ba <_is_digit+0x1a>
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	2b39      	cmp	r3, #57	; 0x39
 80031b4:	d801      	bhi.n	80031ba <_is_digit+0x1a>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <_is_digit+0x1c>
 80031ba:	2300      	movs	r3, #0
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	b2db      	uxtb	r3, r3
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80031da:	e00e      	b.n	80031fa <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4618      	mov	r0, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	1c59      	adds	r1, r3, #1
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6011      	str	r1, [r2, #0]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	4403      	add	r3, r0
 80031f6:	3b30      	subs	r3, #48	; 0x30
 80031f8:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff ffcd 	bl	80031a0 <_is_digit>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e7      	bne.n	80031dc <_atoi+0xe>
  }
  return i;
 800320c:	68fb      	ldr	r3, [r7, #12]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8003216:	b590      	push	{r4, r7, lr}
 8003218:	b087      	sub	sp, #28
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d125      	bne.n	800327e <_out_rev+0x68>
 8003232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d120      	bne.n	800327e <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	e00a      	b.n	8003258 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	1c53      	adds	r3, r2, #1
 8003246:	607b      	str	r3, [r7, #4]
 8003248:	68fc      	ldr	r4, [r7, #12]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	2020      	movs	r0, #32
 8003250:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	3301      	adds	r3, #1
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325c:	429a      	cmp	r2, r3
 800325e:	d3f0      	bcc.n	8003242 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8003260:	e00d      	b.n	800327e <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8003262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003264:	3b01      	subs	r3, #1
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800326a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326c:	4413      	add	r3, r2
 800326e:	7818      	ldrb	r0, [r3, #0]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	1c53      	adds	r3, r2, #1
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	68fc      	ldr	r4, [r7, #12]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	47a0      	blx	r4
  while (len) {
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1ee      	bne.n	8003262 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00e      	beq.n	80032ac <_out_rev+0x96>
    while (idx - start_idx < width) {
 800328e:	e007      	b.n	80032a0 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	1c53      	adds	r3, r2, #1
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	68fc      	ldr	r4, [r7, #12]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	2020      	movs	r0, #32
 800329e:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d8f1      	bhi.n	8003290 <_out_rev+0x7a>
    }
  }

  return idx;
 80032ac:	687b      	ldr	r3, [r7, #4]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd90      	pop	{r4, r7, pc}

080032b6 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b088      	sub	sp, #32
 80032ba:	af04      	add	r7, sp, #16
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d136      	bne.n	800333c <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80032ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d018      	beq.n	8003306 <_ntoa_format+0x50>
 80032d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d013      	beq.n	8003306 <_ntoa_format+0x50>
 80032de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d104      	bne.n	80032f0 <_ntoa_format+0x3a>
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <_ntoa_format+0x50>
      width--;
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f2:	3b01      	subs	r3, #1
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80032f6:	e006      	b.n	8003306 <_ntoa_format+0x50>
      buf[len++] = '0';
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	61fa      	str	r2, [r7, #28]
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4413      	add	r3, r2
 8003302:	2230      	movs	r2, #48	; 0x30
 8003304:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	429a      	cmp	r2, r3
 800330c:	d20a      	bcs.n	8003324 <_ntoa_format+0x6e>
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	2b1f      	cmp	r3, #31
 8003312:	d9f1      	bls.n	80032f8 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003314:	e006      	b.n	8003324 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	61fa      	str	r2, [r7, #28]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4413      	add	r3, r2
 8003320:	2230      	movs	r2, #48	; 0x30
 8003322:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d006      	beq.n	800333c <_ntoa_format+0x86>
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003332:	429a      	cmp	r2, r3
 8003334:	d202      	bcs.n	800333c <_ntoa_format+0x86>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	2b1f      	cmp	r3, #31
 800333a:	d9ec      	bls.n	8003316 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b00      	cmp	r3, #0
 8003344:	d058      	beq.n	80033f8 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334c:	2b00      	cmp	r3, #0
 800334e:	d116      	bne.n	800337e <_ntoa_format+0xc8>
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d013      	beq.n	800337e <_ntoa_format+0xc8>
 8003356:	69fa      	ldr	r2, [r7, #28]
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	429a      	cmp	r2, r3
 800335c:	d003      	beq.n	8003366 <_ntoa_format+0xb0>
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003362:	429a      	cmp	r2, r3
 8003364:	d10b      	bne.n	800337e <_ntoa_format+0xc8>
      len--;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3b01      	subs	r3, #1
 800336a:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <_ntoa_format+0xc8>
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	2b10      	cmp	r3, #16
 8003376:	d102      	bne.n	800337e <_ntoa_format+0xc8>
        len--;
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	3b01      	subs	r3, #1
 800337c:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	2b10      	cmp	r3, #16
 8003382:	d10f      	bne.n	80033a4 <_ntoa_format+0xee>
 8003384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <_ntoa_format+0xee>
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	2b1f      	cmp	r3, #31
 8003392:	d807      	bhi.n	80033a4 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	61fa      	str	r2, [r7, #28]
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4413      	add	r3, r2
 800339e:	2278      	movs	r2, #120	; 0x78
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e01f      	b.n	80033e4 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	2b10      	cmp	r3, #16
 80033a8:	d10f      	bne.n	80033ca <_ntoa_format+0x114>
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <_ntoa_format+0x114>
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2b1f      	cmp	r3, #31
 80033b8:	d807      	bhi.n	80033ca <_ntoa_format+0x114>
      buf[len++] = 'X';
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	61fa      	str	r2, [r7, #28]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4413      	add	r3, r2
 80033c4:	2258      	movs	r2, #88	; 0x58
 80033c6:	701a      	strb	r2, [r3, #0]
 80033c8:	e00c      	b.n	80033e4 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d109      	bne.n	80033e4 <_ntoa_format+0x12e>
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b1f      	cmp	r3, #31
 80033d4:	d806      	bhi.n	80033e4 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	61fa      	str	r2, [r7, #28]
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4413      	add	r3, r2
 80033e0:	2262      	movs	r2, #98	; 0x62
 80033e2:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	2b1f      	cmp	r3, #31
 80033e8:	d806      	bhi.n	80033f8 <_ntoa_format+0x142>
      buf[len++] = '0';
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	61fa      	str	r2, [r7, #28]
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4413      	add	r3, r2
 80033f4:	2230      	movs	r2, #48	; 0x30
 80033f6:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b1f      	cmp	r3, #31
 80033fc:	d824      	bhi.n	8003448 <_ntoa_format+0x192>
    if (negative) {
 80033fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <_ntoa_format+0x160>
      buf[len++] = '-';
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	61fa      	str	r2, [r7, #28]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4413      	add	r3, r2
 8003410:	222d      	movs	r2, #45	; 0x2d
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e018      	b.n	8003448 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	61fa      	str	r2, [r7, #28]
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4413      	add	r3, r2
 800342a:	222b      	movs	r2, #43	; 0x2b
 800342c:	701a      	strb	r2, [r3, #0]
 800342e:	e00b      	b.n	8003448 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d006      	beq.n	8003448 <_ntoa_format+0x192>
      buf[len++] = ' ';
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	61fa      	str	r2, [r7, #28]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4413      	add	r3, r2
 8003444:	2220      	movs	r2, #32
 8003446:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	9303      	str	r3, [sp, #12]
 800344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344e:	9302      	str	r3, [sp, #8]
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	9301      	str	r3, [sp, #4]
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f7ff fed9 	bl	8003216 <_out_rev>
 8003464:	4603      	mov	r3, r0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b096      	sub	sp, #88	; 0x58
 8003472:	af08      	add	r7, sp, #32
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d103      	bne.n	800348e <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8003486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003488:	f023 0310 	bic.w	r3, r3, #16
 800348c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800348e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <_ntoa_long+0x30>
 8003498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d033      	beq.n	8003506 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 800349e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80034a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80034a8:	fb01 f202 	mul.w	r2, r1, r2
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80034b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034b6:	2b09      	cmp	r3, #9
 80034b8:	d804      	bhi.n	80034c4 <_ntoa_long+0x56>
 80034ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034be:	3330      	adds	r3, #48	; 0x30
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	e00d      	b.n	80034e0 <_ntoa_long+0x72>
 80034c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <_ntoa_long+0x64>
 80034ce:	2241      	movs	r2, #65	; 0x41
 80034d0:	e000      	b.n	80034d4 <_ntoa_long+0x66>
 80034d2:	2261      	movs	r2, #97	; 0x61
 80034d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034d8:	4413      	add	r3, r2
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	3b0a      	subs	r3, #10
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e2:	1c59      	adds	r1, r3, #1
 80034e4:	6379      	str	r1, [r7, #52]	; 0x34
 80034e6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80034ea:	440b      	add	r3, r1
 80034ec:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80034f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f8:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80034fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <_ntoa_long+0x98>
 8003500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003502:	2b1f      	cmp	r3, #31
 8003504:	d9cb      	bls.n	800349e <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003508:	9306      	str	r3, [sp, #24]
 800350a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800350c:	9305      	str	r3, [sp, #20]
 800350e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003510:	9304      	str	r3, [sp, #16]
 8003512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003514:	9303      	str	r3, [sp, #12]
 8003516:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800351a:	9302      	str	r3, [sp, #8]
 800351c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351e:	9301      	str	r3, [sp, #4]
 8003520:	f107 0310 	add.w	r3, r7, #16
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7ff fec2 	bl	80032b6 <_ntoa_format>
 8003532:	4603      	mov	r3, r0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3738      	adds	r7, #56	; 0x38
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b096      	sub	sp, #88	; 0x58
 8003540:	af08      	add	r7, sp, #32
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800354e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003552:	4313      	orrs	r3, r2
 8003554:	d103      	bne.n	800355e <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8003556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003558:	f023 0310 	bic.w	r3, r3, #16
 800355c:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800355e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <_ntoa_long_long+0x34>
 8003568:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800356c:	4313      	orrs	r3, r2
 800356e:	d038      	beq.n	80035e2 <_ntoa_long_long+0xa6>
    do {
      const char digit = (char)(value % base);
 8003570:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003574:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003578:	f7fd fb22 	bl	8000bc0 <__aeabi_uldivmod>
 800357c:	4613      	mov	r3, r2
 800357e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003582:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003586:	2b09      	cmp	r3, #9
 8003588:	d804      	bhi.n	8003594 <_ntoa_long_long+0x58>
 800358a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800358e:	3330      	adds	r3, #48	; 0x30
 8003590:	b2da      	uxtb	r2, r3
 8003592:	e00d      	b.n	80035b0 <_ntoa_long_long+0x74>
 8003594:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <_ntoa_long_long+0x66>
 800359e:	2241      	movs	r2, #65	; 0x41
 80035a0:	e000      	b.n	80035a4 <_ntoa_long_long+0x68>
 80035a2:	2261      	movs	r2, #97	; 0x61
 80035a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80035a8:	4413      	add	r3, r2
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	3b0a      	subs	r3, #10
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b2:	1c59      	adds	r1, r3, #1
 80035b4:	6379      	str	r1, [r7, #52]	; 0x34
 80035b6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80035ba:	440b      	add	r3, r1
 80035bc:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80035c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80035c8:	f7fd fafa 	bl	8000bc0 <__aeabi_uldivmod>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80035d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035d8:	4313      	orrs	r3, r2
 80035da:	d002      	beq.n	80035e2 <_ntoa_long_long+0xa6>
 80035dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035de:	2b1f      	cmp	r3, #31
 80035e0:	d9c6      	bls.n	8003570 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80035e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035e6:	9206      	str	r2, [sp, #24]
 80035e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035ea:	9205      	str	r2, [sp, #20]
 80035ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035ee:	9204      	str	r2, [sp, #16]
 80035f0:	9303      	str	r3, [sp, #12]
 80035f2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80035f6:	9302      	str	r3, [sp, #8]
 80035f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fa:	9301      	str	r3, [sp, #4]
 80035fc:	f107 0310 	add.w	r3, r7, #16
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f7ff fe54 	bl	80032b6 <_ntoa_format>
 800360e:	4603      	mov	r3, r0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3738      	adds	r7, #56	; 0x38
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003618:	b590      	push	{r4, r7, lr}
 800361a:	b09d      	sub	sp, #116	; 0x74
 800361c:	af04      	add	r7, sp, #16
 800361e:	6178      	str	r0, [r7, #20]
 8003620:	6139      	str	r1, [r7, #16]
 8003622:	60fa      	str	r2, [r7, #12]
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800363a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800363e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003642:	f7fd f9f3 	bl	8000a2c <__aeabi_dcmpeq>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10f      	bne.n	800366c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800364c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800364e:	9303      	str	r3, [sp, #12]
 8003650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003652:	9302      	str	r3, [sp, #8]
 8003654:	2303      	movs	r3, #3
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	4ba9      	ldr	r3, [pc, #676]	; (8003900 <_ftoa+0x2e8>)
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	6939      	ldr	r1, [r7, #16]
 8003662:	6978      	ldr	r0, [r7, #20]
 8003664:	f7ff fdd7 	bl	8003216 <_out_rev>
 8003668:	4603      	mov	r3, r0
 800366a:	e22b      	b.n	8003ac4 <_ftoa+0x4ac>
  if (value < -DBL_MAX)
 800366c:	f04f 32ff 	mov.w	r2, #4294967295
 8003670:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003674:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003678:	f7fd f9e2 	bl	8000a40 <__aeabi_dcmplt>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00f      	beq.n	80036a2 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003684:	9303      	str	r3, [sp, #12]
 8003686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003688:	9302      	str	r3, [sp, #8]
 800368a:	2304      	movs	r3, #4
 800368c:	9301      	str	r3, [sp, #4]
 800368e:	4b9d      	ldr	r3, [pc, #628]	; (8003904 <_ftoa+0x2ec>)
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	6939      	ldr	r1, [r7, #16]
 8003698:	6978      	ldr	r0, [r7, #20]
 800369a:	f7ff fdbc 	bl	8003216 <_out_rev>
 800369e:	4603      	mov	r3, r0
 80036a0:	e210      	b.n	8003ac4 <_ftoa+0x4ac>
  if (value > DBL_MAX)
 80036a2:	f04f 32ff 	mov.w	r2, #4294967295
 80036a6:	4b98      	ldr	r3, [pc, #608]	; (8003908 <_ftoa+0x2f0>)
 80036a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036ac:	f7fd f9e6 	bl	8000a7c <__aeabi_dcmpgt>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d01d      	beq.n	80036f2 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80036b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <_ftoa+0xac>
 80036c0:	4b92      	ldr	r3, [pc, #584]	; (800390c <_ftoa+0x2f4>)
 80036c2:	e000      	b.n	80036c6 <_ftoa+0xae>
 80036c4:	4b92      	ldr	r3, [pc, #584]	; (8003910 <_ftoa+0x2f8>)
 80036c6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036c8:	f002 0204 	and.w	r2, r2, #4
 80036cc:	2a00      	cmp	r2, #0
 80036ce:	d001      	beq.n	80036d4 <_ftoa+0xbc>
 80036d0:	2204      	movs	r2, #4
 80036d2:	e000      	b.n	80036d6 <_ftoa+0xbe>
 80036d4:	2203      	movs	r2, #3
 80036d6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80036d8:	9103      	str	r1, [sp, #12]
 80036da:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80036dc:	9102      	str	r1, [sp, #8]
 80036de:	9201      	str	r2, [sp, #4]
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	6939      	ldr	r1, [r7, #16]
 80036e8:	6978      	ldr	r0, [r7, #20]
 80036ea:	f7ff fd94 	bl	8003216 <_out_rev>
 80036ee:	4603      	mov	r3, r0
 80036f0:	e1e8      	b.n	8003ac4 <_ftoa+0x4ac>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80036f2:	a37f      	add	r3, pc, #508	; (adr r3, 80038f0 <_ftoa+0x2d8>)
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036fc:	f7fd f9be 	bl	8000a7c <__aeabi_dcmpgt>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d109      	bne.n	800371a <_ftoa+0x102>
 8003706:	a37c      	add	r3, pc, #496	; (adr r3, 80038f8 <_ftoa+0x2e0>)
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003710:	f7fd f996 	bl	8000a40 <__aeabi_dcmplt>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00f      	beq.n	800373a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800371a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800371c:	9302      	str	r3, [sp, #8]
 800371e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	ed97 0b00 	vldr	d0, [r7]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	6939      	ldr	r1, [r7, #16]
 8003730:	6978      	ldr	r0, [r7, #20]
 8003732:	f000 f9d1 	bl	8003ad8 <_etoa>
 8003736:	4603      	mov	r3, r0
 8003738:	e1c4      	b.n	8003ac4 <_ftoa+0x4ac>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800373a:	2300      	movs	r3, #0
 800373c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800374c:	f7fd f978 	bl	8000a40 <__aeabi_dcmplt>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00e      	beq.n	8003774 <_ftoa+0x15c>
    negative = true;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800375c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003760:	f04f 0000 	mov.w	r0, #0
 8003764:	f04f 0100 	mov.w	r1, #0
 8003768:	f7fc fd40 	bl	80001ec <__aeabi_dsub>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8003774:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10e      	bne.n	800379c <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800377e:	2306      	movs	r3, #6
 8003780:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003782:	e00b      	b.n	800379c <_ftoa+0x184>
    buf[len++] = '0';
 8003784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	65fa      	str	r2, [r7, #92]	; 0x5c
 800378a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800378e:	4413      	add	r3, r2
 8003790:	2230      	movs	r2, #48	; 0x30
 8003792:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8003796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003798:	3b01      	subs	r3, #1
 800379a:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800379c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800379e:	2b1f      	cmp	r3, #31
 80037a0:	d802      	bhi.n	80037a8 <_ftoa+0x190>
 80037a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037a4:	2b09      	cmp	r3, #9
 80037a6:	d8ed      	bhi.n	8003784 <_ftoa+0x16c>
  }

  int whole = (int)value;
 80037a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037ac:	f7fd f970 	bl	8000a90 <__aeabi_d2iz>
 80037b0:	4603      	mov	r3, r0
 80037b2:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 80037b4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80037b6:	f7fc fe67 	bl	8000488 <__aeabi_i2d>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037c2:	f7fc fd13 	bl	80001ec <__aeabi_dsub>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4610      	mov	r0, r2
 80037cc:	4619      	mov	r1, r3
 80037ce:	4a51      	ldr	r2, [pc, #324]	; (8003914 <_ftoa+0x2fc>)
 80037d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4413      	add	r3, r2
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	f7fc febf 	bl	800055c <__aeabi_dmul>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80037e6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80037ea:	f7fd f979 	bl	8000ae0 <__aeabi_d2uiz>
 80037ee:	4603      	mov	r3, r0
 80037f0:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 80037f2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80037f4:	f7fc fe38 	bl	8000468 <__aeabi_ui2d>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003800:	f7fc fcf4 	bl	80001ec <__aeabi_dsub>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	4b41      	ldr	r3, [pc, #260]	; (8003918 <_ftoa+0x300>)
 8003812:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003816:	f7fd f931 	bl	8000a7c <__aeabi_dcmpgt>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d016      	beq.n	800384e <_ftoa+0x236>
    ++frac;
 8003820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003822:	3301      	adds	r3, #1
 8003824:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8003826:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003828:	f7fc fe1e 	bl	8000468 <__aeabi_ui2d>
 800382c:	4a39      	ldr	r2, [pc, #228]	; (8003914 <_ftoa+0x2fc>)
 800382e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4413      	add	r3, r2
 8003834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003838:	f7fd f916 	bl	8000a68 <__aeabi_dcmpge>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01a      	beq.n	8003878 <_ftoa+0x260>
      frac = 0;
 8003842:	2300      	movs	r3, #0
 8003844:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8003846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003848:	3301      	adds	r3, #1
 800384a:	657b      	str	r3, [r7, #84]	; 0x54
 800384c:	e014      	b.n	8003878 <_ftoa+0x260>
    }
  }
  else if (diff < 0.5) {
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	4b31      	ldr	r3, [pc, #196]	; (8003918 <_ftoa+0x300>)
 8003854:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003858:	f7fd f8f2 	bl	8000a40 <__aeabi_dcmplt>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <_ftoa+0x260>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003864:	2b00      	cmp	r3, #0
 8003866:	d004      	beq.n	8003872 <_ftoa+0x25a>
 8003868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <_ftoa+0x260>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003874:	3301      	adds	r3, #1
 8003876:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8003878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800387a:	2b00      	cmp	r3, #0
 800387c:	d134      	bne.n	80038e8 <_ftoa+0x2d0>
    diff = value - (double)whole;
 800387e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003880:	f7fc fe02 	bl	8000488 <__aeabi_i2d>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	e9d7 0100 	ldrd	r0, r1, [r7]
 800388c:	f7fc fcae 	bl	80001ec <__aeabi_dsub>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003898:	2301      	movs	r3, #1
 800389a:	461c      	mov	r4, r3
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <_ftoa+0x300>)
 80038a2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80038a6:	f7fd f8cb 	bl	8000a40 <__aeabi_dcmplt>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <_ftoa+0x29c>
 80038b0:	2300      	movs	r3, #0
 80038b2:	461c      	mov	r4, r3
 80038b4:	b2e3      	uxtb	r3, r4
 80038b6:	f083 0301 	eor.w	r3, r3, #1
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d109      	bne.n	80038d4 <_ftoa+0x2bc>
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	4b14      	ldr	r3, [pc, #80]	; (8003918 <_ftoa+0x300>)
 80038c6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80038ca:	f7fd f8d7 	bl	8000a7c <__aeabi_dcmpgt>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d067      	beq.n	80039a4 <_ftoa+0x38c>
 80038d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 8085 	beq.w	80039ea <_ftoa+0x3d2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80038e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e2:	3301      	adds	r3, #1
 80038e4:	657b      	str	r3, [r7, #84]	; 0x54
 80038e6:	e080      	b.n	80039ea <_ftoa+0x3d2>
    }
  }
  else {
    unsigned int count = prec;
 80038e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80038ec:	e037      	b.n	800395e <_ftoa+0x346>
 80038ee:	bf00      	nop
 80038f0:	00000000 	.word	0x00000000
 80038f4:	41cdcd65 	.word	0x41cdcd65
 80038f8:	00000000 	.word	0x00000000
 80038fc:	c1cdcd65 	.word	0xc1cdcd65
 8003900:	0800ecf4 	.word	0x0800ecf4
 8003904:	0800ecf8 	.word	0x0800ecf8
 8003908:	7fefffff 	.word	0x7fefffff
 800390c:	0800ed00 	.word	0x0800ed00
 8003910:	0800ed08 	.word	0x0800ed08
 8003914:	0800f500 	.word	0x0800f500
 8003918:	3fe00000 	.word	0x3fe00000
      --count;
 800391c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800391e:	3b01      	subs	r3, #1
 8003920:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8003922:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003924:	4b69      	ldr	r3, [pc, #420]	; (8003acc <_ftoa+0x4b4>)
 8003926:	fba3 2301 	umull	r2, r3, r3, r1
 800392a:	08da      	lsrs	r2, r3, #3
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	1aca      	subs	r2, r1, r3
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800393a:	1c59      	adds	r1, r3, #1
 800393c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800393e:	3230      	adds	r2, #48	; 0x30
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003946:	440b      	add	r3, r1
 8003948:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800394c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800394e:	4a5f      	ldr	r2, [pc, #380]	; (8003acc <_ftoa+0x4b4>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	08db      	lsrs	r3, r3, #3
 8003956:	653b      	str	r3, [r7, #80]	; 0x50
 8003958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <_ftoa+0x34e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800395e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003960:	2b1f      	cmp	r3, #31
 8003962:	d9db      	bls.n	800391c <_ftoa+0x304>
 8003964:	e00a      	b.n	800397c <_ftoa+0x364>
        break;
 8003966:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003968:	e008      	b.n	800397c <_ftoa+0x364>
      buf[len++] = '0';
 800396a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003970:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003974:	4413      	add	r3, r2
 8003976:	2230      	movs	r2, #48	; 0x30
 8003978:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800397c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800397e:	2b1f      	cmp	r3, #31
 8003980:	d804      	bhi.n	800398c <_ftoa+0x374>
 8003982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003984:	1e5a      	subs	r2, r3, #1
 8003986:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1ee      	bne.n	800396a <_ftoa+0x352>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800398c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800398e:	2b1f      	cmp	r3, #31
 8003990:	d82b      	bhi.n	80039ea <_ftoa+0x3d2>
      // add decimal
      buf[len++] = '.';
 8003992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003998:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800399c:	4413      	add	r3, r2
 800399e:	222e      	movs	r2, #46	; 0x2e
 80039a0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80039a4:	e021      	b.n	80039ea <_ftoa+0x3d2>
    buf[len++] = (char)(48 + (whole % 10));
 80039a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039a8:	4b49      	ldr	r3, [pc, #292]	; (8003ad0 <_ftoa+0x4b8>)
 80039aa:	fb83 1302 	smull	r1, r3, r3, r2
 80039ae:	1099      	asrs	r1, r3, #2
 80039b0:	17d3      	asrs	r3, r2, #31
 80039b2:	1ac9      	subs	r1, r1, r3
 80039b4:	460b      	mov	r3, r1
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	1ad1      	subs	r1, r2, r3
 80039be:	b2ca      	uxtb	r2, r1
 80039c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c2:	1c59      	adds	r1, r3, #1
 80039c4:	65f9      	str	r1, [r7, #92]	; 0x5c
 80039c6:	3230      	adds	r2, #48	; 0x30
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80039ce:	440b      	add	r3, r1
 80039d0:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80039d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d6:	4a3e      	ldr	r2, [pc, #248]	; (8003ad0 <_ftoa+0x4b8>)
 80039d8:	fb82 1203 	smull	r1, r2, r2, r3
 80039dc:	1092      	asrs	r2, r2, #2
 80039de:	17db      	asrs	r3, r3, #31
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	657b      	str	r3, [r7, #84]	; 0x54
 80039e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <_ftoa+0x3da>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80039ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ec:	2b1f      	cmp	r3, #31
 80039ee:	d9da      	bls.n	80039a6 <_ftoa+0x38e>
 80039f0:	e000      	b.n	80039f4 <_ftoa+0x3dc>
      break;
 80039f2:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80039f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d124      	bne.n	8003a48 <_ftoa+0x430>
 80039fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01f      	beq.n	8003a48 <_ftoa+0x430>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d015      	beq.n	8003a3a <_ftoa+0x422>
 8003a0e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d104      	bne.n	8003a20 <_ftoa+0x408>
 8003a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a18:	f003 030c 	and.w	r3, r3, #12
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00c      	beq.n	8003a3a <_ftoa+0x422>
      width--;
 8003a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a22:	3b01      	subs	r3, #1
 8003a24:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003a26:	e008      	b.n	8003a3a <_ftoa+0x422>
      buf[len++] = '0';
 8003a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003a2e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003a32:	4413      	add	r3, r2
 8003a34:	2230      	movs	r2, #48	; 0x30
 8003a36:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003a3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d202      	bcs.n	8003a48 <_ftoa+0x430>
 8003a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a44:	2b1f      	cmp	r3, #31
 8003a46:	d9ef      	bls.n	8003a28 <_ftoa+0x410>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003a48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a4a:	2b1f      	cmp	r3, #31
 8003a4c:	d82a      	bhi.n	8003aa4 <_ftoa+0x48c>
    if (negative) {
 8003a4e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <_ftoa+0x452>
      buf[len++] = '-';
 8003a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003a5c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003a60:	4413      	add	r3, r2
 8003a62:	222d      	movs	r2, #45	; 0x2d
 8003a64:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003a68:	e01c      	b.n	8003aa4 <_ftoa+0x48c>
    }
    else if (flags & FLAGS_PLUS) {
 8003a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d009      	beq.n	8003a88 <_ftoa+0x470>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003a7a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003a7e:	4413      	add	r3, r2
 8003a80:	222b      	movs	r2, #43	; 0x2b
 8003a82:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003a86:	e00d      	b.n	8003aa4 <_ftoa+0x48c>
    }
    else if (flags & FLAGS_SPACE) {
 8003a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <_ftoa+0x48c>
      buf[len++] = ' ';
 8003a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003a98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003a9c:	4413      	add	r3, r2
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aa6:	9303      	str	r3, [sp, #12]
 8003aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aaa:	9302      	str	r3, [sp, #8]
 8003aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aae:	9301      	str	r3, [sp, #4]
 8003ab0:	f107 0318 	add.w	r3, r7, #24
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	6939      	ldr	r1, [r7, #16]
 8003abc:	6978      	ldr	r0, [r7, #20]
 8003abe:	f7ff fbaa 	bl	8003216 <_out_rev>
 8003ac2:	4603      	mov	r3, r0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3764      	adds	r7, #100	; 0x64
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd90      	pop	{r4, r7, pc}
 8003acc:	cccccccd 	.word	0xcccccccd
 8003ad0:	66666667 	.word	0x66666667
 8003ad4:	00000000 	.word	0x00000000

08003ad8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003adc:	b09d      	sub	sp, #116	; 0x74
 8003ade:	af06      	add	r7, sp, #24
 8003ae0:	61f8      	str	r0, [r7, #28]
 8003ae2:	61b9      	str	r1, [r7, #24]
 8003ae4:	617a      	str	r2, [r7, #20]
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003aec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003af0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003af4:	f7fc ff9a 	bl	8000a2c <__aeabi_dcmpeq>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d014      	beq.n	8003b28 <_etoa+0x50>
 8003afe:	f04f 32ff 	mov.w	r2, #4294967295
 8003b02:	4bc3      	ldr	r3, [pc, #780]	; (8003e10 <_etoa+0x338>)
 8003b04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b08:	f7fc ffb8 	bl	8000a7c <__aeabi_dcmpgt>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <_etoa+0x50>
 8003b12:	f04f 32ff 	mov.w	r2, #4294967295
 8003b16:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003b1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b1e:	f7fc ff8f 	bl	8000a40 <__aeabi_dcmplt>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d012      	beq.n	8003b4e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b2c:	9302      	str	r3, [sp, #8]
 8003b2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b32:	9301      	str	r3, [sp, #4]
 8003b34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	ed97 0b02 	vldr	d0, [r7, #8]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	69b9      	ldr	r1, [r7, #24]
 8003b44:	69f8      	ldr	r0, [r7, #28]
 8003b46:	f7ff fd67 	bl	8003618 <_ftoa>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	e245      	b.n	8003fda <_etoa+0x502>
  }

  // determine the sign
  const bool negative = value < 0;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	461e      	mov	r6, r3
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b5e:	f7fc ff6f 	bl	8000a40 <__aeabi_dcmplt>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <_etoa+0x94>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	461e      	mov	r6, r3
 8003b6c:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8003b70:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <_etoa+0xac>
    value = -value;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003b82:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8003b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003b90:	2306      	movs	r3, #6
 8003b92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8003b96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b9a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8003b9e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	0d0a      	lsrs	r2, r1, #20
 8003bac:	2300      	movs	r3, #0
 8003bae:	4613      	mov	r3, r2
 8003bb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bb4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003bb8:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003bba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc2:	4994      	ldr	r1, [pc, #592]	; (8003e14 <_etoa+0x33c>)
 8003bc4:	ea02 0400 	and.w	r4, r2, r0
 8003bc8:	ea03 0501 	and.w	r5, r3, r1
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	4b91      	ldr	r3, [pc, #580]	; (8003e18 <_etoa+0x340>)
 8003bd2:	ea44 0802 	orr.w	r8, r4, r2
 8003bd6:	ea45 0903 	orr.w	r9, r5, r3
 8003bda:	e9c7 8908 	strd	r8, r9, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003bde:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003be0:	f7fc fc52 	bl	8000488 <__aeabi_i2d>
 8003be4:	a37e      	add	r3, pc, #504	; (adr r3, 8003de0 <_etoa+0x308>)
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	f7fc fcb7 	bl	800055c <__aeabi_dmul>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	a37c      	add	r3, pc, #496	; (adr r3, 8003de8 <_etoa+0x310>)
 8003bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfc:	f7fc faf8 	bl	80001f0 <__adddf3>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4614      	mov	r4, r2
 8003c06:	461d      	mov	r5, r3
 8003c08:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	4b82      	ldr	r3, [pc, #520]	; (8003e1c <_etoa+0x344>)
 8003c12:	f7fc faeb 	bl	80001ec <__aeabi_dsub>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	a374      	add	r3, pc, #464	; (adr r3, 8003df0 <_etoa+0x318>)
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f7fc fc9a 	bl	800055c <__aeabi_dmul>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	4629      	mov	r1, r5
 8003c30:	f7fc fade 	bl	80001f0 <__adddf3>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	f7fc ff28 	bl	8000a90 <__aeabi_d2iz>
 8003c40:	4603      	mov	r3, r0
 8003c42:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8003c44:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003c46:	f7fc fc1f 	bl	8000488 <__aeabi_i2d>
 8003c4a:	a36b      	add	r3, pc, #428	; (adr r3, 8003df8 <_etoa+0x320>)
 8003c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c50:	f7fc fc84 	bl	800055c <__aeabi_dmul>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	4b6f      	ldr	r3, [pc, #444]	; (8003e20 <_etoa+0x348>)
 8003c62:	f7fc fac5 	bl	80001f0 <__adddf3>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f7fc ff0f 	bl	8000a90 <__aeabi_d2iz>
 8003c72:	4603      	mov	r3, r0
 8003c74:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003c76:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003c78:	f7fc fc06 	bl	8000488 <__aeabi_i2d>
 8003c7c:	a360      	add	r3, pc, #384	; (adr r3, 8003e00 <_etoa+0x328>)
 8003c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c82:	f7fc fc6b 	bl	800055c <__aeabi_dmul>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4614      	mov	r4, r2
 8003c8c:	461d      	mov	r5, r3
 8003c8e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003c90:	f7fc fbfa 	bl	8000488 <__aeabi_i2d>
 8003c94:	a35c      	add	r3, pc, #368	; (adr r3, 8003e08 <_etoa+0x330>)
 8003c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9a:	f7fc fc5f 	bl	800055c <__aeabi_dmul>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	f7fc faa1 	bl	80001ec <__aeabi_dsub>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 8003cb2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cb6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003cba:	f7fc fc4f 	bl	800055c <__aeabi_dmul>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8003cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003ccc:	4618      	mov	r0, r3
 8003cce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	0503      	lsls	r3, r0, #20
 8003cdc:	2200      	movs	r2, #0
 8003cde:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003ce2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ce6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	f7fc fa7f 	bl	80001f0 <__adddf3>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4690      	mov	r8, r2
 8003cf8:	4699      	mov	r9, r3
 8003cfa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cfe:	f04f 0000 	mov.w	r0, #0
 8003d02:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003d06:	f7fc fa71 	bl	80001ec <__aeabi_dsub>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4692      	mov	sl, r2
 8003d10:	469b      	mov	fp, r3
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	4b43      	ldr	r3, [pc, #268]	; (8003e24 <_etoa+0x34c>)
 8003d18:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003d1c:	f7fc fd48 	bl	80007b0 <__aeabi_ddiv>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	4b3e      	ldr	r3, [pc, #248]	; (8003e28 <_etoa+0x350>)
 8003d2e:	f7fc fa5f 	bl	80001f0 <__adddf3>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003d3a:	f7fc fd39 	bl	80007b0 <__aeabi_ddiv>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4610      	mov	r0, r2
 8003d44:	4619      	mov	r1, r3
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	4b38      	ldr	r3, [pc, #224]	; (8003e2c <_etoa+0x354>)
 8003d4c:	f7fc fa50 	bl	80001f0 <__adddf3>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003d58:	f7fc fd2a 	bl	80007b0 <__aeabi_ddiv>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4650      	mov	r0, sl
 8003d62:	4659      	mov	r1, fp
 8003d64:	f7fc fa44 	bl	80001f0 <__adddf3>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4640      	mov	r0, r8
 8003d6e:	4649      	mov	r1, r9
 8003d70:	f7fc fd1e 	bl	80007b0 <__aeabi_ddiv>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <_etoa+0x340>)
 8003d82:	f7fc fa35 	bl	80001f0 <__adddf3>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	f7fc fbe5 	bl	800055c <__aeabi_dmul>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8003d9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003da2:	f7fc fe4d 	bl	8000a40 <__aeabi_dcmplt>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00d      	beq.n	8003dc8 <_etoa+0x2f0>
    expval--;
 8003dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dae:	3b01      	subs	r3, #1
 8003db0:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8003db2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <_etoa+0x350>)
 8003dbc:	f7fc fcf8 	bl	80007b0 <__aeabi_ddiv>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8003dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dca:	2b63      	cmp	r3, #99	; 0x63
 8003dcc:	dc30      	bgt.n	8003e30 <_etoa+0x358>
 8003dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd0:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003dd4:	db2c      	blt.n	8003e30 <_etoa+0x358>
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	e02b      	b.n	8003e32 <_etoa+0x35a>
 8003dda:	bf00      	nop
 8003ddc:	f3af 8000 	nop.w
 8003de0:	509f79fb 	.word	0x509f79fb
 8003de4:	3fd34413 	.word	0x3fd34413
 8003de8:	8b60c8b3 	.word	0x8b60c8b3
 8003dec:	3fc68a28 	.word	0x3fc68a28
 8003df0:	636f4361 	.word	0x636f4361
 8003df4:	3fd287a7 	.word	0x3fd287a7
 8003df8:	0979a371 	.word	0x0979a371
 8003dfc:	400a934f 	.word	0x400a934f
 8003e00:	bbb55516 	.word	0xbbb55516
 8003e04:	40026bb1 	.word	0x40026bb1
 8003e08:	fefa39ef 	.word	0xfefa39ef
 8003e0c:	3fe62e42 	.word	0x3fe62e42
 8003e10:	7fefffff 	.word	0x7fefffff
 8003e14:	000fffff 	.word	0x000fffff
 8003e18:	3ff00000 	.word	0x3ff00000
 8003e1c:	3ff80000 	.word	0x3ff80000
 8003e20:	3fe00000 	.word	0x3fe00000
 8003e24:	402c0000 	.word	0x402c0000
 8003e28:	40240000 	.word	0x40240000
 8003e2c:	40180000 	.word	0x40180000
 8003e30:	2305      	movs	r3, #5
 8003e32:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8003e34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d03d      	beq.n	8003ebc <_etoa+0x3e4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8003e40:	a369      	add	r3, pc, #420	; (adr r3, 8003fe8 <_etoa+0x510>)
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e4a:	f7fc fe0d 	bl	8000a68 <__aeabi_dcmpge>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d024      	beq.n	8003e9e <_etoa+0x3c6>
 8003e54:	a366      	add	r3, pc, #408	; (adr r3, 8003ff0 <_etoa+0x518>)
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e5e:	f7fc fdef 	bl	8000a40 <__aeabi_dcmplt>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01a      	beq.n	8003e9e <_etoa+0x3c6>
      if ((int)prec > expval) {
 8003e68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	da07      	bge.n	8003e82 <_etoa+0x3aa>
        prec = (unsigned)((int)prec - expval - 1);
 8003e72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e80:	e002      	b.n	8003e88 <_etoa+0x3b0>
      }
      else {
        prec = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003e88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e9c:	e00e      	b.n	8003ebc <_etoa+0x3e4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8003e9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <_etoa+0x3e4>
 8003ea6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d004      	beq.n	8003ebc <_etoa+0x3e4>
        --prec;
 8003eb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8003ebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8003ec2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d904      	bls.n	8003ed6 <_etoa+0x3fe>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003ecc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed4:	e001      	b.n	8003eda <_etoa+0x402>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003eda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d004      	beq.n	8003ef0 <_etoa+0x418>
 8003ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <_etoa+0x418>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8003ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <_etoa+0x432>
    value /= conv.F;
 8003ef6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003efa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003efe:	f7fc fc57 	bl	80007b0 <__aeabi_ddiv>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8003f0e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d006      	beq.n	8003f24 <_etoa+0x44c>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003f20:	607b      	str	r3, [r7, #4]
 8003f22:	e003      	b.n	8003f2c <_etoa+0x454>
 8003f24:	ed97 7b02 	vldr	d7, [r7, #8]
 8003f28:	ed87 7b00 	vstr	d7, [r7]
 8003f2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f34:	9302      	str	r3, [sp, #8]
 8003f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	ed97 0b00 	vldr	d0, [r7]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	69b9      	ldr	r1, [r7, #24]
 8003f4a:	69f8      	ldr	r0, [r7, #28]
 8003f4c:	f7ff fb64 	bl	8003618 <_ftoa>
 8003f50:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8003f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d03f      	beq.n	8003fd8 <_etoa+0x500>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <_etoa+0x490>
 8003f64:	2045      	movs	r0, #69	; 0x45
 8003f66:	e000      	b.n	8003f6a <_etoa+0x492>
 8003f68:	2065      	movs	r0, #101	; 0x65
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	1c53      	adds	r3, r2, #1
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	69fc      	ldr	r4, [r7, #28]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	69b9      	ldr	r1, [r7, #24]
 8003f76:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8003f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bfb8      	it	lt
 8003f7e:	425b      	neglt	r3, r3
 8003f80:	4618      	mov	r0, r3
 8003f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f84:	0fdb      	lsrs	r3, r3, #31
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f8a:	3a01      	subs	r2, #1
 8003f8c:	2105      	movs	r1, #5
 8003f8e:	9105      	str	r1, [sp, #20]
 8003f90:	9204      	str	r2, [sp, #16]
 8003f92:	2200      	movs	r2, #0
 8003f94:	9203      	str	r2, [sp, #12]
 8003f96:	220a      	movs	r2, #10
 8003f98:	9202      	str	r2, [sp, #8]
 8003f9a:	9301      	str	r3, [sp, #4]
 8003f9c:	9000      	str	r0, [sp, #0]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	69b9      	ldr	r1, [r7, #24]
 8003fa4:	69f8      	ldr	r0, [r7, #28]
 8003fa6:	f7ff fa62 	bl	800346e <_ntoa_long>
 8003faa:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00f      	beq.n	8003fd8 <_etoa+0x500>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003fb8:	e007      	b.n	8003fca <_etoa+0x4f2>
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	1c53      	adds	r3, r2, #1
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	69fc      	ldr	r4, [r7, #28]
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	69b9      	ldr	r1, [r7, #24]
 8003fc6:	2020      	movs	r0, #32
 8003fc8:	47a0      	blx	r4
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d8f0      	bhi.n	8003fba <_etoa+0x4e2>
    }
  }
  return idx;
 8003fd8:	697b      	ldr	r3, [r7, #20]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	375c      	adds	r7, #92	; 0x5c
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe4:	f3af 8000 	nop.w
 8003fe8:	eb1c432d 	.word	0xeb1c432d
 8003fec:	3f1a36e2 	.word	0x3f1a36e2
 8003ff0:	00000000 	.word	0x00000000
 8003ff4:	412e8480 	.word	0x412e8480

08003ff8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003ff8:	b5b0      	push	{r4, r5, r7, lr}
 8003ffa:	b0a0      	sub	sp, #128	; 0x80
 8003ffc:	af0a      	add	r7, sp, #40	; 0x28
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f040 8494 	bne.w	800493a <_vsnprintf+0x942>
    // use null output function
    out = _out_null;
 8004012:	4ba0      	ldr	r3, [pc, #640]	; (8004294 <_vsnprintf+0x29c>)
 8004014:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8004016:	f000 bc90 	b.w	800493a <_vsnprintf+0x942>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b25      	cmp	r3, #37	; 0x25
 8004020:	d00d      	beq.n	800403e <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	7818      	ldrb	r0, [r3, #0]
 8004026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004028:	1c53      	adds	r3, r2, #1
 800402a:	647b      	str	r3, [r7, #68]	; 0x44
 800402c:	68fc      	ldr	r4, [r7, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	47a0      	blx	r4
      format++;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	3301      	adds	r3, #1
 8004038:	603b      	str	r3, [r7, #0]
      continue;
 800403a:	f000 bc7e 	b.w	800493a <_vsnprintf+0x942>
    }
    else {
      // yes, evaluate it
      format++;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	3b20      	subs	r3, #32
 800404e:	2b10      	cmp	r3, #16
 8004050:	d856      	bhi.n	8004100 <_vsnprintf+0x108>
 8004052:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <_vsnprintf+0x60>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	080040d9 	.word	0x080040d9
 800405c:	08004101 	.word	0x08004101
 8004060:	08004101 	.word	0x08004101
 8004064:	080040ed 	.word	0x080040ed
 8004068:	08004101 	.word	0x08004101
 800406c:	08004101 	.word	0x08004101
 8004070:	08004101 	.word	0x08004101
 8004074:	08004101 	.word	0x08004101
 8004078:	08004101 	.word	0x08004101
 800407c:	08004101 	.word	0x08004101
 8004080:	08004101 	.word	0x08004101
 8004084:	080040c5 	.word	0x080040c5
 8004088:	08004101 	.word	0x08004101
 800408c:	080040b1 	.word	0x080040b1
 8004090:	08004101 	.word	0x08004101
 8004094:	08004101 	.word	0x08004101
 8004098:	0800409d 	.word	0x0800409d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800409c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	657b      	str	r3, [r7, #84]	; 0x54
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	3301      	adds	r3, #1
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	2301      	movs	r3, #1
 80040ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ae:	e02a      	b.n	8004106 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80040b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b2:	f043 0302 	orr.w	r3, r3, #2
 80040b6:	657b      	str	r3, [r7, #84]	; 0x54
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	3301      	adds	r3, #1
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	2301      	movs	r3, #1
 80040c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80040c2:	e020      	b.n	8004106 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80040c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040c6:	f043 0304 	orr.w	r3, r3, #4
 80040ca:	657b      	str	r3, [r7, #84]	; 0x54
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	3301      	adds	r3, #1
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	2301      	movs	r3, #1
 80040d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80040d6:	e016      	b.n	8004106 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80040d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040da:	f043 0308 	orr.w	r3, r3, #8
 80040de:	657b      	str	r3, [r7, #84]	; 0x54
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	3301      	adds	r3, #1
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	2301      	movs	r3, #1
 80040e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ea:	e00c      	b.n	8004106 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80040ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ee:	f043 0310 	orr.w	r3, r3, #16
 80040f2:	657b      	str	r3, [r7, #84]	; 0x54
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	3301      	adds	r3, #1
 80040f8:	603b      	str	r3, [r7, #0]
 80040fa:	2301      	movs	r3, #1
 80040fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80040fe:	e002      	b.n	8004106 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8004100:	2300      	movs	r3, #0
 8004102:	64bb      	str	r3, [r7, #72]	; 0x48
 8004104:	bf00      	nop
      }
    } while (n);
 8004106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004108:	2b00      	cmp	r3, #0
 800410a:	d19d      	bne.n	8004048 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff f843 	bl	80031a0 <_is_digit>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <_vsnprintf+0x134>
      width = _atoi(&format);
 8004120:	463b      	mov	r3, r7
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff f853 	bl	80031ce <_atoi>
 8004128:	6538      	str	r0, [r7, #80]	; 0x50
 800412a:	e018      	b.n	800415e <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b2a      	cmp	r3, #42	; 0x2a
 8004132:	d114      	bne.n	800415e <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 8004134:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004136:	1d1a      	adds	r2, r3, #4
 8004138:	66ba      	str	r2, [r7, #104]	; 0x68
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	2b00      	cmp	r3, #0
 8004142:	da07      	bge.n	8004154 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 8004144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004146:	f043 0302 	orr.w	r3, r3, #2
 800414a:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	425b      	negs	r3, r3
 8004150:	653b      	str	r3, [r7, #80]	; 0x50
 8004152:	e001      	b.n	8004158 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	3301      	adds	r3, #1
 800415c:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b2e      	cmp	r3, #46	; 0x2e
 8004168:	d124      	bne.n	80041b4 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 800416a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800416c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004170:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	3301      	adds	r3, #1
 8004176:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff f80f 	bl	80031a0 <_is_digit>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8004188:	463b      	mov	r3, r7
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff f81f 	bl	80031ce <_atoi>
 8004190:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004192:	e00f      	b.n	80041b4 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b2a      	cmp	r3, #42	; 0x2a
 800419a:	d10b      	bne.n	80041b4 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800419c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800419e:	1d1a      	adds	r2, r3, #4
 80041a0:	66ba      	str	r2, [r7, #104]	; 0x68
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80041a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80041ac:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	3301      	adds	r3, #1
 80041b2:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	3b68      	subs	r3, #104	; 0x68
 80041ba:	2b12      	cmp	r3, #18
 80041bc:	d866      	bhi.n	800428c <_vsnprintf+0x294>
 80041be:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <_vsnprintf+0x1cc>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	08004237 	.word	0x08004237
 80041c8:	0800428d 	.word	0x0800428d
 80041cc:	0800426d 	.word	0x0800426d
 80041d0:	0800428d 	.word	0x0800428d
 80041d4:	08004211 	.word	0x08004211
 80041d8:	0800428d 	.word	0x0800428d
 80041dc:	0800428d 	.word	0x0800428d
 80041e0:	0800428d 	.word	0x0800428d
 80041e4:	0800428d 	.word	0x0800428d
 80041e8:	0800428d 	.word	0x0800428d
 80041ec:	0800428d 	.word	0x0800428d
 80041f0:	0800428d 	.word	0x0800428d
 80041f4:	0800425d 	.word	0x0800425d
 80041f8:	0800428d 	.word	0x0800428d
 80041fc:	0800428d 	.word	0x0800428d
 8004200:	0800428d 	.word	0x0800428d
 8004204:	0800428d 	.word	0x0800428d
 8004208:	0800428d 	.word	0x0800428d
 800420c:	0800427d 	.word	0x0800427d
      case 'l' :
        flags |= FLAGS_LONG;
 8004210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004216:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	3301      	adds	r3, #1
 800421c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b6c      	cmp	r3, #108	; 0x6c
 8004224:	d134      	bne.n	8004290 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8004226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800422c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	3301      	adds	r3, #1
 8004232:	603b      	str	r3, [r7, #0]
        }
        break;
 8004234:	e02c      	b.n	8004290 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800423c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	3301      	adds	r3, #1
 8004242:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b68      	cmp	r3, #104	; 0x68
 800424a:	d125      	bne.n	8004298 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 800424c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800424e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004252:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	3301      	adds	r3, #1
 8004258:	603b      	str	r3, [r7, #0]
        }
        break;
 800425a:	e01d      	b.n	8004298 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800425c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800425e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004262:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	3301      	adds	r3, #1
 8004268:	603b      	str	r3, [r7, #0]
        break;
 800426a:	e016      	b.n	800429a <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800426c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800426e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004272:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	3301      	adds	r3, #1
 8004278:	603b      	str	r3, [r7, #0]
        break;
 800427a:	e00e      	b.n	800429a <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800427c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800427e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004282:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	3301      	adds	r3, #1
 8004288:	603b      	str	r3, [r7, #0]
        break;
 800428a:	e006      	b.n	800429a <_vsnprintf+0x2a2>
      default :
        break;
 800428c:	bf00      	nop
 800428e:	e004      	b.n	800429a <_vsnprintf+0x2a2>
        break;
 8004290:	bf00      	nop
 8004292:	e002      	b.n	800429a <_vsnprintf+0x2a2>
 8004294:	08003125 	.word	0x08003125
        break;
 8004298:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	3b25      	subs	r3, #37	; 0x25
 80042a0:	2b53      	cmp	r3, #83	; 0x53
 80042a2:	f200 833d 	bhi.w	8004920 <_vsnprintf+0x928>
 80042a6:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <_vsnprintf+0x2b4>)
 80042a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ac:	08004909 	.word	0x08004909
 80042b0:	08004921 	.word	0x08004921
 80042b4:	08004921 	.word	0x08004921
 80042b8:	08004921 	.word	0x08004921
 80042bc:	08004921 	.word	0x08004921
 80042c0:	08004921 	.word	0x08004921
 80042c4:	08004921 	.word	0x08004921
 80042c8:	08004921 	.word	0x08004921
 80042cc:	08004921 	.word	0x08004921
 80042d0:	08004921 	.word	0x08004921
 80042d4:	08004921 	.word	0x08004921
 80042d8:	08004921 	.word	0x08004921
 80042dc:	08004921 	.word	0x08004921
 80042e0:	08004921 	.word	0x08004921
 80042e4:	08004921 	.word	0x08004921
 80042e8:	08004921 	.word	0x08004921
 80042ec:	08004921 	.word	0x08004921
 80042f0:	08004921 	.word	0x08004921
 80042f4:	08004921 	.word	0x08004921
 80042f8:	08004921 	.word	0x08004921
 80042fc:	08004921 	.word	0x08004921
 8004300:	08004921 	.word	0x08004921
 8004304:	08004921 	.word	0x08004921
 8004308:	08004921 	.word	0x08004921
 800430c:	08004921 	.word	0x08004921
 8004310:	08004921 	.word	0x08004921
 8004314:	08004921 	.word	0x08004921
 8004318:	08004921 	.word	0x08004921
 800431c:	08004921 	.word	0x08004921
 8004320:	08004921 	.word	0x08004921
 8004324:	08004921 	.word	0x08004921
 8004328:	08004921 	.word	0x08004921
 800432c:	080046d7 	.word	0x080046d7
 8004330:	0800468b 	.word	0x0800468b
 8004334:	080046d7 	.word	0x080046d7
 8004338:	08004921 	.word	0x08004921
 800433c:	08004921 	.word	0x08004921
 8004340:	08004921 	.word	0x08004921
 8004344:	08004921 	.word	0x08004921
 8004348:	08004921 	.word	0x08004921
 800434c:	08004921 	.word	0x08004921
 8004350:	08004921 	.word	0x08004921
 8004354:	08004921 	.word	0x08004921
 8004358:	08004921 	.word	0x08004921
 800435c:	08004921 	.word	0x08004921
 8004360:	08004921 	.word	0x08004921
 8004364:	08004921 	.word	0x08004921
 8004368:	08004921 	.word	0x08004921
 800436c:	08004921 	.word	0x08004921
 8004370:	08004921 	.word	0x08004921
 8004374:	08004921 	.word	0x08004921
 8004378:	080043fd 	.word	0x080043fd
 800437c:	08004921 	.word	0x08004921
 8004380:	08004921 	.word	0x08004921
 8004384:	08004921 	.word	0x08004921
 8004388:	08004921 	.word	0x08004921
 800438c:	08004921 	.word	0x08004921
 8004390:	08004921 	.word	0x08004921
 8004394:	08004921 	.word	0x08004921
 8004398:	08004921 	.word	0x08004921
 800439c:	08004921 	.word	0x08004921
 80043a0:	080043fd 	.word	0x080043fd
 80043a4:	08004743 	.word	0x08004743
 80043a8:	080043fd 	.word	0x080043fd
 80043ac:	080046d7 	.word	0x080046d7
 80043b0:	0800468b 	.word	0x0800468b
 80043b4:	080046d7 	.word	0x080046d7
 80043b8:	08004921 	.word	0x08004921
 80043bc:	080043fd 	.word	0x080043fd
 80043c0:	08004921 	.word	0x08004921
 80043c4:	08004921 	.word	0x08004921
 80043c8:	08004921 	.word	0x08004921
 80043cc:	08004921 	.word	0x08004921
 80043d0:	08004921 	.word	0x08004921
 80043d4:	080043fd 	.word	0x080043fd
 80043d8:	0800487b 	.word	0x0800487b
 80043dc:	08004921 	.word	0x08004921
 80043e0:	08004921 	.word	0x08004921
 80043e4:	080047b7 	.word	0x080047b7
 80043e8:	08004921 	.word	0x08004921
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	08004921 	.word	0x08004921
 80043f4:	08004921 	.word	0x08004921
 80043f8:	080043fd 	.word	0x080043fd
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b78      	cmp	r3, #120	; 0x78
 8004402:	d003      	beq.n	800440c <_vsnprintf+0x414>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b58      	cmp	r3, #88	; 0x58
 800440a:	d102      	bne.n	8004412 <_vsnprintf+0x41a>
          base = 16U;
 800440c:	2310      	movs	r3, #16
 800440e:	643b      	str	r3, [r7, #64]	; 0x40
 8004410:	e013      	b.n	800443a <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b6f      	cmp	r3, #111	; 0x6f
 8004418:	d102      	bne.n	8004420 <_vsnprintf+0x428>
          base =  8U;
 800441a:	2308      	movs	r3, #8
 800441c:	643b      	str	r3, [r7, #64]	; 0x40
 800441e:	e00c      	b.n	800443a <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b62      	cmp	r3, #98	; 0x62
 8004426:	d102      	bne.n	800442e <_vsnprintf+0x436>
          base =  2U;
 8004428:	2302      	movs	r3, #2
 800442a:	643b      	str	r3, [r7, #64]	; 0x40
 800442c:	e005      	b.n	800443a <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800442e:	230a      	movs	r3, #10
 8004430:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8004432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004434:	f023 0310 	bic.w	r3, r3, #16
 8004438:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b58      	cmp	r3, #88	; 0x58
 8004440:	d103      	bne.n	800444a <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8004442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004444:	f043 0320 	orr.w	r3, r3, #32
 8004448:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b69      	cmp	r3, #105	; 0x69
 8004450:	d007      	beq.n	8004462 <_vsnprintf+0x46a>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b64      	cmp	r3, #100	; 0x64
 8004458:	d003      	beq.n	8004462 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800445a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800445c:	f023 030c 	bic.w	r3, r3, #12
 8004460:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8004462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800446c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b69      	cmp	r3, #105	; 0x69
 800447a:	d004      	beq.n	8004486 <_vsnprintf+0x48e>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b64      	cmp	r3, #100	; 0x64
 8004482:	f040 808e 	bne.w	80045a2 <_vsnprintf+0x5aa>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8004486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800448c:	2b00      	cmp	r3, #0
 800448e:	d02f      	beq.n	80044f0 <_vsnprintf+0x4f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8004490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004492:	3307      	adds	r3, #7
 8004494:	f023 0307 	bic.w	r3, r3, #7
 8004498:	f103 0208 	add.w	r2, r3, #8
 800449c:	66ba      	str	r2, [r7, #104]	; 0x68
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80044a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044aa:	2a00      	cmp	r2, #0
 80044ac:	f173 0100 	sbcs.w	r1, r3, #0
 80044b0:	da02      	bge.n	80044b8 <_vsnprintf+0x4c0>
 80044b2:	4252      	negs	r2, r2
 80044b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80044b8:	4610      	mov	r0, r2
 80044ba:	4619      	mov	r1, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	0fdb      	lsrs	r3, r3, #31
 80044c0:	b2dc      	uxtb	r4, r3
 80044c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c4:	461a      	mov	r2, r3
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 80044cc:	9508      	str	r5, [sp, #32]
 80044ce:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80044d0:	9507      	str	r5, [sp, #28]
 80044d2:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80044d4:	9506      	str	r5, [sp, #24]
 80044d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80044da:	9402      	str	r4, [sp, #8]
 80044dc:	e9cd 0100 	strd	r0, r1, [sp]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f7ff f828 	bl	800353c <_ntoa_long_long>
 80044ec:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80044ee:	e0c8      	b.n	8004682 <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80044f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d01e      	beq.n	8004538 <_vsnprintf+0x540>
            const long value = va_arg(va, long);
 80044fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044fc:	1d1a      	adds	r2, r3, #4
 80044fe:	66ba      	str	r2, [r7, #104]	; 0x68
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b00      	cmp	r3, #0
 8004508:	bfb8      	it	lt
 800450a:	425b      	neglt	r3, r3
 800450c:	4619      	mov	r1, r3
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	0fdb      	lsrs	r3, r3, #31
 8004512:	b2db      	uxtb	r3, r3
 8004514:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004516:	9205      	str	r2, [sp, #20]
 8004518:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800451a:	9204      	str	r2, [sp, #16]
 800451c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800451e:	9203      	str	r2, [sp, #12]
 8004520:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004522:	9202      	str	r2, [sp, #8]
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	9100      	str	r1, [sp, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f7fe ff9d 	bl	800346e <_ntoa_long>
 8004534:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8004536:	e0a4      	b.n	8004682 <_vsnprintf+0x68a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800453a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <_vsnprintf+0x556>
 8004542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004544:	1d1a      	adds	r2, r3, #4
 8004546:	66ba      	str	r2, [r7, #104]	; 0x68
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	e00e      	b.n	800456c <_vsnprintf+0x574>
 800454e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <_vsnprintf+0x56c>
 8004558:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800455a:	1d1a      	adds	r2, r3, #4
 800455c:	66ba      	str	r2, [r7, #104]	; 0x68
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	b21b      	sxth	r3, r3
 8004562:	e003      	b.n	800456c <_vsnprintf+0x574>
 8004564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004566:	1d1a      	adds	r2, r3, #4
 8004568:	66ba      	str	r2, [r7, #104]	; 0x68
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	2b00      	cmp	r3, #0
 8004572:	bfb8      	it	lt
 8004574:	425b      	neglt	r3, r3
 8004576:	4619      	mov	r1, r3
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	0fdb      	lsrs	r3, r3, #31
 800457c:	b2db      	uxtb	r3, r3
 800457e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004580:	9205      	str	r2, [sp, #20]
 8004582:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004584:	9204      	str	r2, [sp, #16]
 8004586:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004588:	9203      	str	r2, [sp, #12]
 800458a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800458c:	9202      	str	r2, [sp, #8]
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	9100      	str	r1, [sp, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7fe ff68 	bl	800346e <_ntoa_long>
 800459e:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80045a0:	e06f      	b.n	8004682 <_vsnprintf+0x68a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80045a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d020      	beq.n	80045ee <_vsnprintf+0x5f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80045ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045ae:	3307      	adds	r3, #7
 80045b0:	f023 0307 	bic.w	r3, r3, #7
 80045b4:	f103 0208 	add.w	r2, r3, #8
 80045b8:	66ba      	str	r2, [r7, #104]	; 0x68
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045c0:	4608      	mov	r0, r1
 80045c2:	f04f 0100 	mov.w	r1, #0
 80045c6:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80045c8:	9408      	str	r4, [sp, #32]
 80045ca:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80045cc:	9407      	str	r4, [sp, #28]
 80045ce:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80045d0:	9406      	str	r4, [sp, #24]
 80045d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045d6:	2100      	movs	r1, #0
 80045d8:	9102      	str	r1, [sp, #8]
 80045da:	e9cd 2300 	strd	r2, r3, [sp]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f7fe ffa9 	bl	800353c <_ntoa_long_long>
 80045ea:	6478      	str	r0, [r7, #68]	; 0x44
 80045ec:	e049      	b.n	8004682 <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80045ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d016      	beq.n	8004626 <_vsnprintf+0x62e>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80045f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045fa:	1d1a      	adds	r2, r3, #4
 80045fc:	66ba      	str	r2, [r7, #104]	; 0x68
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004602:	9205      	str	r2, [sp, #20]
 8004604:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004606:	9204      	str	r2, [sp, #16]
 8004608:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800460a:	9203      	str	r2, [sp, #12]
 800460c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800460e:	9202      	str	r2, [sp, #8]
 8004610:	2200      	movs	r2, #0
 8004612:	9201      	str	r2, [sp, #4]
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7fe ff26 	bl	800346e <_ntoa_long>
 8004622:	6478      	str	r0, [r7, #68]	; 0x44
 8004624:	e02d      	b.n	8004682 <_vsnprintf+0x68a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <_vsnprintf+0x644>
 8004630:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004632:	1d1a      	adds	r2, r3, #4
 8004634:	66ba      	str	r2, [r7, #104]	; 0x68
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	e00e      	b.n	800465a <_vsnprintf+0x662>
 800463c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <_vsnprintf+0x65a>
 8004646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004648:	1d1a      	adds	r2, r3, #4
 800464a:	66ba      	str	r2, [r7, #104]	; 0x68
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	b29b      	uxth	r3, r3
 8004650:	e003      	b.n	800465a <_vsnprintf+0x662>
 8004652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004654:	1d1a      	adds	r2, r3, #4
 8004656:	66ba      	str	r2, [r7, #104]	; 0x68
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800465c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800465e:	9305      	str	r3, [sp, #20]
 8004660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004662:	9304      	str	r3, [sp, #16]
 8004664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004666:	9303      	str	r3, [sp, #12]
 8004668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800466a:	9302      	str	r3, [sp, #8]
 800466c:	2300      	movs	r3, #0
 800466e:	9301      	str	r3, [sp, #4]
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7fe fef7 	bl	800346e <_ntoa_long>
 8004680:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	3301      	adds	r3, #1
 8004686:	603b      	str	r3, [r7, #0]
        break;
 8004688:	e157      	b.n	800493a <_vsnprintf+0x942>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b46      	cmp	r3, #70	; 0x46
 8004690:	d103      	bne.n	800469a <_vsnprintf+0x6a2>
 8004692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004694:	f043 0320 	orr.w	r3, r3, #32
 8004698:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800469a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800469c:	3307      	adds	r3, #7
 800469e:	f023 0307 	bic.w	r3, r3, #7
 80046a2:	f103 0208 	add.w	r2, r3, #8
 80046a6:	66ba      	str	r2, [r7, #104]	; 0x68
 80046a8:	ed93 7b00 	vldr	d7, [r3]
 80046ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ae:	9302      	str	r3, [sp, #8]
 80046b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	eeb0 0a47 	vmov.f32	s0, s14
 80046bc:	eef0 0a67 	vmov.f32	s1, s15
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f7fe ffa6 	bl	8003618 <_ftoa>
 80046cc:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	603b      	str	r3, [r7, #0]
        break;
 80046d4:	e131      	b.n	800493a <_vsnprintf+0x942>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b67      	cmp	r3, #103	; 0x67
 80046dc:	d003      	beq.n	80046e6 <_vsnprintf+0x6ee>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b47      	cmp	r3, #71	; 0x47
 80046e4:	d103      	bne.n	80046ee <_vsnprintf+0x6f6>
 80046e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046ec:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b45      	cmp	r3, #69	; 0x45
 80046f4:	d003      	beq.n	80046fe <_vsnprintf+0x706>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b47      	cmp	r3, #71	; 0x47
 80046fc:	d103      	bne.n	8004706 <_vsnprintf+0x70e>
 80046fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004700:	f043 0320 	orr.w	r3, r3, #32
 8004704:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004708:	3307      	adds	r3, #7
 800470a:	f023 0307 	bic.w	r3, r3, #7
 800470e:	f103 0208 	add.w	r2, r3, #8
 8004712:	66ba      	str	r2, [r7, #104]	; 0x68
 8004714:	ed93 7b00 	vldr	d7, [r3]
 8004718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800471a:	9302      	str	r3, [sp, #8]
 800471c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800471e:	9301      	str	r3, [sp, #4]
 8004720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	eeb0 0a47 	vmov.f32	s0, s14
 8004728:	eef0 0a67 	vmov.f32	s1, s15
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f7ff f9d0 	bl	8003ad8 <_etoa>
 8004738:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	3301      	adds	r3, #1
 800473e:	603b      	str	r3, [r7, #0]
        break;
 8004740:	e0fb      	b.n	800493a <_vsnprintf+0x942>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8004742:	2301      	movs	r3, #1
 8004744:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8004746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10e      	bne.n	800476e <_vsnprintf+0x776>
          while (l++ < width) {
 8004750:	e007      	b.n	8004762 <_vsnprintf+0x76a>
            out(' ', buffer, idx++, maxlen);
 8004752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004754:	1c53      	adds	r3, r2, #1
 8004756:	647b      	str	r3, [r7, #68]	; 0x44
 8004758:	68fc      	ldr	r4, [r7, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	2020      	movs	r0, #32
 8004760:	47a0      	blx	r4
          while (l++ < width) {
 8004762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004768:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800476a:	429a      	cmp	r2, r3
 800476c:	d8f1      	bhi.n	8004752 <_vsnprintf+0x75a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800476e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004770:	1d1a      	adds	r2, r3, #4
 8004772:	66ba      	str	r2, [r7, #104]	; 0x68
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	b2d8      	uxtb	r0, r3
 8004778:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800477a:	1c53      	adds	r3, r2, #1
 800477c:	647b      	str	r3, [r7, #68]	; 0x44
 800477e:	68fc      	ldr	r4, [r7, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8004786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00e      	beq.n	80047ae <_vsnprintf+0x7b6>
          while (l++ < width) {
 8004790:	e007      	b.n	80047a2 <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 8004792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004794:	1c53      	adds	r3, r2, #1
 8004796:	647b      	str	r3, [r7, #68]	; 0x44
 8004798:	68fc      	ldr	r4, [r7, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	2020      	movs	r0, #32
 80047a0:	47a0      	blx	r4
          while (l++ < width) {
 80047a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d8f1      	bhi.n	8004792 <_vsnprintf+0x79a>
          }
        }
        format++;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	3301      	adds	r3, #1
 80047b2:	603b      	str	r3, [r7, #0]
        break;
 80047b4:	e0c1      	b.n	800493a <_vsnprintf+0x942>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80047b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047b8:	1d1a      	adds	r2, r3, #4
 80047ba:	66ba      	str	r2, [r7, #104]	; 0x68
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80047c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <_vsnprintf+0x7d2>
 80047c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c8:	e001      	b.n	80047ce <_vsnprintf+0x7d6>
 80047ca:	f04f 33ff 	mov.w	r3, #4294967295
 80047ce:	4619      	mov	r1, r3
 80047d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047d2:	f7fe fcc8 	bl	8003166 <_strnlen_s>
 80047d6:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80047d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <_vsnprintf+0x7f6>
          l = (l < precision ? l : precision);
 80047e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e6:	4293      	cmp	r3, r2
 80047e8:	bf28      	it	cs
 80047ea:	4613      	movcs	r3, r2
 80047ec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 80047ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d11a      	bne.n	800482e <_vsnprintf+0x836>
          while (l++ < width) {
 80047f8:	e007      	b.n	800480a <_vsnprintf+0x812>
            out(' ', buffer, idx++, maxlen);
 80047fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047fc:	1c53      	adds	r3, r2, #1
 80047fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004800:	68fc      	ldr	r4, [r7, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	2020      	movs	r0, #32
 8004808:	47a0      	blx	r4
          while (l++ < width) {
 800480a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	637a      	str	r2, [r7, #52]	; 0x34
 8004810:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004812:	429a      	cmp	r2, r3
 8004814:	d8f1      	bhi.n	80047fa <_vsnprintf+0x802>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004816:	e00a      	b.n	800482e <_vsnprintf+0x836>
          out(*(p++), buffer, idx++, maxlen);
 8004818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	63ba      	str	r2, [r7, #56]	; 0x38
 800481e:	7818      	ldrb	r0, [r3, #0]
 8004820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004822:	1c53      	adds	r3, r2, #1
 8004824:	647b      	str	r3, [r7, #68]	; 0x44
 8004826:	68fc      	ldr	r4, [r7, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <_vsnprintf+0x852>
 8004836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0eb      	beq.n	8004818 <_vsnprintf+0x820>
 8004840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004842:	1e5a      	subs	r2, r3, #1
 8004844:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e6      	bne.n	8004818 <_vsnprintf+0x820>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800484a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00e      	beq.n	8004872 <_vsnprintf+0x87a>
          while (l++ < width) {
 8004854:	e007      	b.n	8004866 <_vsnprintf+0x86e>
            out(' ', buffer, idx++, maxlen);
 8004856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004858:	1c53      	adds	r3, r2, #1
 800485a:	647b      	str	r3, [r7, #68]	; 0x44
 800485c:	68fc      	ldr	r4, [r7, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	2020      	movs	r0, #32
 8004864:	47a0      	blx	r4
          while (l++ < width) {
 8004866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	637a      	str	r2, [r7, #52]	; 0x34
 800486c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800486e:	429a      	cmp	r2, r3
 8004870:	d8f1      	bhi.n	8004856 <_vsnprintf+0x85e>
          }
        }
        format++;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	3301      	adds	r3, #1
 8004876:	603b      	str	r3, [r7, #0]
        break;
 8004878:	e05f      	b.n	800493a <_vsnprintf+0x942>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800487a:	2308      	movs	r3, #8
 800487c:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800487e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004880:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8004884:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8004886:	2300      	movs	r3, #0
 8004888:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 800488c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004890:	2b00      	cmp	r3, #0
 8004892:	d01e      	beq.n	80048d2 <_vsnprintf+0x8da>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8004894:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004896:	1d1a      	adds	r2, r3, #4
 8004898:	66ba      	str	r2, [r7, #104]	; 0x68
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048a4:	9108      	str	r1, [sp, #32]
 80048a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80048a8:	9107      	str	r1, [sp, #28]
 80048aa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80048ac:	9106      	str	r1, [sp, #24]
 80048ae:	f04f 0010 	mov.w	r0, #16
 80048b2:	f04f 0100 	mov.w	r1, #0
 80048b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048ba:	2100      	movs	r1, #0
 80048bc:	9102      	str	r1, [sp, #8]
 80048be:	e9cd 2300 	strd	r2, r3, [sp]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f7fe fe37 	bl	800353c <_ntoa_long_long>
 80048ce:	6478      	str	r0, [r7, #68]	; 0x44
 80048d0:	e016      	b.n	8004900 <_vsnprintf+0x908>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80048d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048d4:	1d1a      	adds	r2, r3, #4
 80048d6:	66ba      	str	r2, [r7, #104]	; 0x68
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048de:	9305      	str	r3, [sp, #20]
 80048e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e2:	9304      	str	r3, [sp, #16]
 80048e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e6:	9303      	str	r3, [sp, #12]
 80048e8:	2310      	movs	r3, #16
 80048ea:	9302      	str	r3, [sp, #8]
 80048ec:	2300      	movs	r3, #0
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	9200      	str	r2, [sp, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7fe fdb8 	bl	800346e <_ntoa_long>
 80048fe:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	3301      	adds	r3, #1
 8004904:	603b      	str	r3, [r7, #0]
        break;
 8004906:	e018      	b.n	800493a <_vsnprintf+0x942>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8004908:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800490a:	1c53      	adds	r3, r2, #1
 800490c:	647b      	str	r3, [r7, #68]	; 0x44
 800490e:	68fc      	ldr	r4, [r7, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68b9      	ldr	r1, [r7, #8]
 8004914:	2025      	movs	r0, #37	; 0x25
 8004916:	47a0      	blx	r4
        format++;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	3301      	adds	r3, #1
 800491c:	603b      	str	r3, [r7, #0]
        break;
 800491e:	e00c      	b.n	800493a <_vsnprintf+0x942>

      default :
        out(*format, buffer, idx++, maxlen);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	7818      	ldrb	r0, [r3, #0]
 8004924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004926:	1c53      	adds	r3, r2, #1
 8004928:	647b      	str	r3, [r7, #68]	; 0x44
 800492a:	68fc      	ldr	r4, [r7, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	47a0      	blx	r4
        format++;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	3301      	adds	r3, #1
 8004936:	603b      	str	r3, [r7, #0]
        break;
 8004938:	bf00      	nop
  while (*format)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	f47f ab6b 	bne.w	800401a <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8004944:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	d302      	bcc.n	8004952 <_vsnprintf+0x95a>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	1e5a      	subs	r2, r3, #1
 8004950:	e000      	b.n	8004954 <_vsnprintf+0x95c>
 8004952:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004954:	68fc      	ldr	r4, [r7, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68b9      	ldr	r1, [r7, #8]
 800495a:	2000      	movs	r0, #0
 800495c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800495e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004960:	4618      	mov	r0, r3
 8004962:	3758      	adds	r7, #88	; 0x58
 8004964:	46bd      	mov	sp, r7
 8004966:	bdb0      	pop	{r4, r5, r7, pc}

08004968 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8004968:	b40f      	push	{r0, r1, r2, r3}
 800496a:	b580      	push	{r7, lr}
 800496c:	b086      	sub	sp, #24
 800496e:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8004970:	f107 031c 	add.w	r3, r7, #28
 8004974:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8004976:	1d39      	adds	r1, r7, #4
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f04f 32ff 	mov.w	r2, #4294967295
 8004982:	4806      	ldr	r0, [pc, #24]	; (800499c <printf_+0x34>)
 8004984:	f7ff fb38 	bl	8003ff8 <_vsnprintf>
 8004988:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800498a:	68fb      	ldr	r3, [r7, #12]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004996:	b004      	add	sp, #16
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	08003141 	.word	0x08003141

080049a0 <vprintf_>:
  return ret;
}


int vprintf_(const char* format, va_list va)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80049aa:	f107 010c 	add.w	r1, r7, #12
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f04f 32ff 	mov.w	r2, #4294967295
 80049b8:	4803      	ldr	r0, [pc, #12]	; (80049c8 <vprintf_+0x28>)
 80049ba:	f7ff fb1d 	bl	8003ff8 <_vsnprintf>
 80049be:	4603      	mov	r3, r0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	08003141 	.word	0x08003141

080049cc <Reflow_reset_INIT>:

/*---------------------------------------------------------------------------*/
/* State machine facilities... */

static Reflow_Status Reflow_reset_INIT(Reflow_Active *const ao, Event const *const evt)
{
 80049cc:	b590      	push	{r4, r7, lr}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
    LOGI(TAG, "Initializing reflow oven controller...");
 80049d6:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <Reflow_reset_INIT+0x60>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01c      	beq.n	8004a18 <Reflow_reset_INIT+0x4c>
 80049de:	f001 fcb7 	bl	8006350 <HAL_GetTick>
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <Reflow_reset_INIT+0x64>)
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4a12      	ldr	r2, [pc, #72]	; (8004a34 <Reflow_reset_INIT+0x68>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	0999      	lsrs	r1, r3, #6
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <Reflow_reset_INIT+0x68>)
 80049f6:	fba3 4302 	umull	r4, r3, r3, r2
 80049fa:	099b      	lsrs	r3, r3, #6
 80049fc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004a00:	fb04 f303 	mul.w	r3, r4, r3
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	4a0a      	ldr	r2, [pc, #40]	; (8004a30 <Reflow_reset_INIT+0x64>)
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	9201      	str	r2, [sp, #4]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4a09      	ldr	r2, [pc, #36]	; (8004a38 <Reflow_reset_INIT+0x6c>)
 8004a12:	2103      	movs	r1, #3
 8004a14:	f7fd fc34 	bl	8002280 <log_printf>
    ao->state = RESET_STATE; // Redundant, but just in case.
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    return INIT_STATUS;
 8004a20:	2303      	movs	r3, #3
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd90      	pop	{r4, r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000064 	.word	0x20000064
 8004a30:	2000010c 	.word	0x2000010c
 8004a34:	10624dd3 	.word	0x10624dd3
 8004a38:	0800edec 	.word	0x0800edec

08004a3c <Reflow_reset_ENTRY>:

static Reflow_Status Reflow_reset_ENTRY(Reflow_Active *const ao, Event const *const evt)
{
 8004a3c:	b590      	push	{r4, r7, lr}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
    /* Disable PWM output signal */
	__HAL_TIM_SET_COMPARE(ao->pwm_timer_handle, ao->pwm_channel, 0);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d105      	bne.n	8004a5a <Reflow_reset_ENTRY+0x1e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2200      	movs	r2, #0
 8004a56:	635a      	str	r2, [r3, #52]	; 0x34
 8004a58:	e02c      	b.n	8004ab4 <Reflow_reset_ENTRY+0x78>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d105      	bne.n	8004a6e <Reflow_reset_ENTRY+0x32>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	6393      	str	r3, [r2, #56]	; 0x38
 8004a6c:	e022      	b.n	8004ab4 <Reflow_reset_ENTRY+0x78>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d105      	bne.n	8004a82 <Reflow_reset_ENTRY+0x46>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004a80:	e018      	b.n	8004ab4 <Reflow_reset_ENTRY+0x78>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	d105      	bne.n	8004a96 <Reflow_reset_ENTRY+0x5a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	2300      	movs	r3, #0
 8004a92:	6413      	str	r3, [r2, #64]	; 0x40
 8004a94:	e00e      	b.n	8004ab4 <Reflow_reset_ENTRY+0x78>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b10      	cmp	r3, #16
 8004a9c:	d105      	bne.n	8004aaa <Reflow_reset_ENTRY+0x6e>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8004aa8:	e004      	b.n	8004ab4 <Reflow_reset_ENTRY+0x78>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_TIM_PWM_Stop(ao->pwm_timer_handle, ao->pwm_channel);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f004 f9ec 	bl	8008e9c <HAL_TIM_PWM_Stop>

    /* Clear PID memory */
    PID_Reset(&ao->pid_params);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	332c      	adds	r3, #44	; 0x2c
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fe fb0d 	bl	80030e8 <PID_Reset>

    /* Disarm timers */
    osTimerStop(ao->pid_timer_id);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f006 fb28 	bl	800b128 <osTimerStop>
    TimeEvent_disarm(&ao->reflow_time_evt);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3314      	adds	r3, #20
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fc fcd5 	bl	800148c <TimeEvent_disarm>

    LOGI(TAG, "Reflow oven controller initialized.");
 8004ae2:	4b23      	ldr	r3, [pc, #140]	; (8004b70 <Reflow_reset_ENTRY+0x134>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01c      	beq.n	8004b24 <Reflow_reset_ENTRY+0xe8>
 8004aea:	f001 fc31 	bl	8006350 <HAL_GetTick>
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <Reflow_reset_ENTRY+0x138>)
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4a20      	ldr	r2, [pc, #128]	; (8004b78 <Reflow_reset_ENTRY+0x13c>)
 8004af8:	fba2 2303 	umull	r2, r3, r2, r3
 8004afc:	0999      	lsrs	r1, r3, #6
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4b1d      	ldr	r3, [pc, #116]	; (8004b78 <Reflow_reset_ENTRY+0x13c>)
 8004b02:	fba3 4302 	umull	r4, r3, r3, r2
 8004b06:	099b      	lsrs	r3, r3, #6
 8004b08:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004b0c:	fb04 f303 	mul.w	r3, r4, r3
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	4a18      	ldr	r2, [pc, #96]	; (8004b74 <Reflow_reset_ENTRY+0x138>)
 8004b14:	6812      	ldr	r2, [r2, #0]
 8004b16:	9201      	str	r2, [sp, #4]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4a17      	ldr	r2, [pc, #92]	; (8004b7c <Reflow_reset_ENTRY+0x140>)
 8004b1e:	2103      	movs	r1, #3
 8004b20:	f7fd fbae 	bl	8002280 <log_printf>
    LOGI(TAG, "Enter command \"reflow start\" to start reflow process.");
 8004b24:	4b12      	ldr	r3, [pc, #72]	; (8004b70 <Reflow_reset_ENTRY+0x134>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01c      	beq.n	8004b66 <Reflow_reset_ENTRY+0x12a>
 8004b2c:	f001 fc10 	bl	8006350 <HAL_GetTick>
 8004b30:	60b8      	str	r0, [r7, #8]
 8004b32:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <Reflow_reset_ENTRY+0x138>)
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	4a0f      	ldr	r2, [pc, #60]	; (8004b78 <Reflow_reset_ENTRY+0x13c>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	0999      	lsrs	r1, r3, #6
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	4b0d      	ldr	r3, [pc, #52]	; (8004b78 <Reflow_reset_ENTRY+0x13c>)
 8004b44:	fba3 4302 	umull	r4, r3, r3, r2
 8004b48:	099b      	lsrs	r3, r3, #6
 8004b4a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004b4e:	fb04 f303 	mul.w	r3, r4, r3
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <Reflow_reset_ENTRY+0x138>)
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	9201      	str	r2, [sp, #4]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4a08      	ldr	r2, [pc, #32]	; (8004b80 <Reflow_reset_ENTRY+0x144>)
 8004b60:	2103      	movs	r1, #3
 8004b62:	f7fd fb8d 	bl	8002280 <log_printf>
    return HANDLED_STATUS;
 8004b66:	2301      	movs	r3, #1
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd90      	pop	{r4, r7, pc}
 8004b70:	20000064 	.word	0x20000064
 8004b74:	2000010c 	.word	0x2000010c
 8004b78:	10624dd3 	.word	0x10624dd3
 8004b7c:	0800ee30 	.word	0x0800ee30
 8004b80:	0800ee70 	.word	0x0800ee70

08004b84 <Reflow_preheat_ENTRY>:

static Reflow_Status Reflow_preheat_ENTRY(Reflow_Active *const ao, Event const *const evt)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(ao->pwm_timer_handle, ao->pwm_channel);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	4619      	mov	r1, r3
 8004b98:	4610      	mov	r0, r2
 8004b9a:	f004 f879 	bl	8008c90 <HAL_TIM_PWM_Start>
	ao->setpoint = (float)ao->reflow_phases[PREHEAT_STATE - 1].reach_temp;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    osTimerStart(ao->pid_timer_id, (uint32_t)(ao->pid_params.Ts*1000));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004bba:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004bdc <Reflow_preheat_ENTRY+0x58>
 8004bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bc6:	ee17 1a90 	vmov	r1, s15
 8004bca:	4610      	mov	r0, r2
 8004bcc:	f006 fa7e 	bl	800b0cc <osTimerStart>
    return HANDLED_STATUS;
 8004bd0:	2301      	movs	r3, #1
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	447a0000 	.word	0x447a0000

08004be0 <Reflow_soak_ENTRY>:

static Reflow_Status Reflow_soak_ENTRY(Reflow_Active *const ao, Event const *const evt)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
	/* Set step size for slowest temperature rise. */
    ao->step_size = (float)( ao->reflow_phases[SOAK_STATE - 1].reach_temp - ao->reflow_phases[PREHEAT_STATE-1].reach_temp )/
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	ee07 3a90 	vmov	s15, r3
 8004bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
    				       ( ao->reflow_phases[SOAK_STATE - 1].reach_time / 1000 * (1 / ao->pid_params.Ts) );
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c00:	4a11      	ldr	r2, [pc, #68]	; (8004c48 <Reflow_soak_ENTRY+0x68>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	099b      	lsrs	r3, r3, #6
 8004c08:	ee07 3a90 	vmov	s15, r3
 8004c0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8004c16:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004c1a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004c1e:	ee27 7a27 	vmul.f32	s14, s14, s15
    ao->step_size = (float)( ao->reflow_phases[SOAK_STATE - 1].reach_temp - ao->reflow_phases[PREHEAT_STATE-1].reach_temp )/
 8004c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	TimeEvent_arm(&ao->reflow_time_evt, ao->reflow_phases[SOAK_STATE - 1].reach_time, 0);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f103 0014 	add.w	r0, r3, #20
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c36:	2200      	movs	r2, #0
 8004c38:	4619      	mov	r1, r3
 8004c3a:	f7fc fb69 	bl	8001310 <TimeEvent_arm>
    return HANDLED_STATUS;
 8004c3e:	2301      	movs	r3, #1
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	10624dd3 	.word	0x10624dd3

08004c4c <Reflow_rampup_ENTRY>:

static Reflow_Status Reflow_rampup_ENTRY(Reflow_Active *const ao, Event const *const evt)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
	ao->setpoint = (float)ao->reflow_phases[RAMPUP_STATE - 1].reach_temp;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c5c:	ee07 3a90 	vmov	s15, r3
 8004c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    return HANDLED_STATUS;
 8004c6a:	2301      	movs	r3, #1
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <Reflow_peak_ENTRY>:

static Reflow_Status Reflow_peak_ENTRY(Reflow_Active *const ao, Event const *const evt)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
	ao->step_size = 0;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	65da      	str	r2, [r3, #92]	; 0x5c
	TimeEvent_arm(&ao->reflow_time_evt, ao->reflow_phases[PEAK_STATE - 1].reach_time, 0);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f103 0014 	add.w	r0, r3, #20
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	2200      	movs	r2, #0
 8004c98:	4619      	mov	r1, r3
 8004c9a:	f7fc fb39 	bl	8001310 <TimeEvent_arm>
    return HANDLED_STATUS;
 8004c9e:	2301      	movs	r3, #1
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <Reflow_cooldown_ENTRY>:

static Reflow_Status Reflow_cooldown_ENTRY(Reflow_Active *const ao, Event const *const evt)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
	ao->setpoint = (float)ao->reflow_phases[COOLDOWN_STATE - 1].reach_temp;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cb8:	ee07 3a90 	vmov	s15, r3
 8004cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    return HANDLED_STATUS;
 8004cc6:	2301      	movs	r3, #1
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <Reflow_reset_START>:

static Reflow_Status Reflow_reset_START(Reflow_Active *const ao, Event const *const evt)
{
 8004cd4:	b590      	push	{r4, r7, lr}
 8004cd6:	b08b      	sub	sp, #44	; 0x2c
 8004cd8:	af04      	add	r7, sp, #16
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
    /* Check that oven temperature has cooled down. */
    float current_temp = 0;
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	60bb      	str	r3, [r7, #8]
    if (readTemperature(&current_temp) != true)
 8004ce4:	f107 0308 	add.w	r3, r7, #8
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fdd3 	bl	8005894 <readTemperature>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	f083 0301 	eor.w	r3, r3, #1
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d022      	beq.n	8004d40 <Reflow_reset_START+0x6c>
    {
        LOGW(TAG, "MAX31855K Read Error, unable to start reflow process.");
 8004cfa:	4b3f      	ldr	r3, [pc, #252]	; (8004df8 <Reflow_reset_START+0x124>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d01c      	beq.n	8004d3c <Reflow_reset_START+0x68>
 8004d02:	f001 fb25 	bl	8006350 <HAL_GetTick>
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	4b3c      	ldr	r3, [pc, #240]	; (8004dfc <Reflow_reset_START+0x128>)
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4a3c      	ldr	r2, [pc, #240]	; (8004e00 <Reflow_reset_START+0x12c>)
 8004d10:	fba2 2303 	umull	r2, r3, r2, r3
 8004d14:	0999      	lsrs	r1, r3, #6
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4b39      	ldr	r3, [pc, #228]	; (8004e00 <Reflow_reset_START+0x12c>)
 8004d1a:	fba3 4302 	umull	r4, r3, r3, r2
 8004d1e:	099b      	lsrs	r3, r3, #6
 8004d20:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004d24:	fb04 f303 	mul.w	r3, r4, r3
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	4a34      	ldr	r2, [pc, #208]	; (8004dfc <Reflow_reset_START+0x128>)
 8004d2c:	6812      	ldr	r2, [r2, #0]
 8004d2e:	9201      	str	r2, [sp, #4]
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	460b      	mov	r3, r1
 8004d34:	4a33      	ldr	r2, [pc, #204]	; (8004e04 <Reflow_reset_START+0x130>)
 8004d36:	2102      	movs	r1, #2
 8004d38:	f7fd faa2 	bl	8002280 <log_printf>
        return HANDLED_STATUS;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e057      	b.n	8004df0 <Reflow_reset_START+0x11c>
    }
    else if ((uint32_t)current_temp > ao->reflow_phases[COOLDOWN_STATE - 1].reach_temp) // Subtract 1 due to RESET_STATE.)
 8004d40:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d48:	ee17 2a90 	vmov	r2, s15
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d926      	bls.n	8004da4 <Reflow_reset_START+0xd0>
    {
    	LOGW(TAG, "Oven temperature must cool to below %lu before starting another run.",
 8004d56:	4b28      	ldr	r3, [pc, #160]	; (8004df8 <Reflow_reset_START+0x124>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d020      	beq.n	8004da0 <Reflow_reset_START+0xcc>
 8004d5e:	f001 faf7 	bl	8006350 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]
 8004d64:	4b25      	ldr	r3, [pc, #148]	; (8004dfc <Reflow_reset_START+0x128>)
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	4a25      	ldr	r2, [pc, #148]	; (8004e00 <Reflow_reset_START+0x12c>)
 8004d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d70:	099c      	lsrs	r4, r3, #6
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4b22      	ldr	r3, [pc, #136]	; (8004e00 <Reflow_reset_START+0x12c>)
 8004d76:	fba3 1302 	umull	r1, r3, r3, r2
 8004d7a:	099b      	lsrs	r3, r3, #6
 8004d7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	4a1d      	ldr	r2, [pc, #116]	; (8004dfc <Reflow_reset_START+0x128>)
 8004d88:	6812      	ldr	r2, [r2, #0]
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
 8004d90:	9102      	str	r1, [sp, #8]
 8004d92:	9201      	str	r2, [sp, #4]
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	4623      	mov	r3, r4
 8004d98:	4a1b      	ldr	r2, [pc, #108]	; (8004e08 <Reflow_reset_START+0x134>)
 8004d9a:	2102      	movs	r1, #2
 8004d9c:	f7fd fa70 	bl	8002280 <log_printf>
    	                 ao->reflow_phases[COOLDOWN_STATE - 1].reach_temp);
    	return HANDLED_STATUS;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e025      	b.n	8004df0 <Reflow_reset_START+0x11c>
    }
	else
	{
		LOGI(TAG, "Starting reflow process. Entering pre-heat phase.");
 8004da4:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <Reflow_reset_START+0x124>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d01c      	beq.n	8004de6 <Reflow_reset_START+0x112>
 8004dac:	f001 fad0 	bl	8006350 <HAL_GetTick>
 8004db0:	6178      	str	r0, [r7, #20]
 8004db2:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <Reflow_reset_START+0x128>)
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	4a11      	ldr	r2, [pc, #68]	; (8004e00 <Reflow_reset_START+0x12c>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	0999      	lsrs	r1, r3, #6
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4b0f      	ldr	r3, [pc, #60]	; (8004e00 <Reflow_reset_START+0x12c>)
 8004dc4:	fba3 4302 	umull	r4, r3, r3, r2
 8004dc8:	099b      	lsrs	r3, r3, #6
 8004dca:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004dce:	fb04 f303 	mul.w	r3, r4, r3
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	4a09      	ldr	r2, [pc, #36]	; (8004dfc <Reflow_reset_START+0x128>)
 8004dd6:	6812      	ldr	r2, [r2, #0]
 8004dd8:	9201      	str	r2, [sp, #4]
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4a0b      	ldr	r2, [pc, #44]	; (8004e0c <Reflow_reset_START+0x138>)
 8004de0:	2103      	movs	r1, #3
 8004de2:	f7fd fa4d 	bl	8002280 <log_printf>
		ao->state = PREHEAT_STATE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		return TRAN_STATUS;
 8004dee:	2300      	movs	r3, #0
	}
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd90      	pop	{r4, r7, pc}
 8004df8:	20000064 	.word	0x20000064
 8004dfc:	2000010c 	.word	0x2000010c
 8004e00:	10624dd3 	.word	0x10624dd3
 8004e04:	0800eec4 	.word	0x0800eec4
 8004e08:	0800ef18 	.word	0x0800ef18
 8004e0c:	0800ef7c 	.word	0x0800ef7c

08004e10 <Reflow_preheat_REACHTEMP>:

static Reflow_Status Reflow_preheat_REACHTEMP(Reflow_Active *const ao, Event const *const evt)
{
 8004e10:	b590      	push	{r4, r7, lr}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
    LOGI(TAG, "Entering soak phase.");
 8004e1a:	4b15      	ldr	r3, [pc, #84]	; (8004e70 <Reflow_preheat_REACHTEMP+0x60>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d01c      	beq.n	8004e5c <Reflow_preheat_REACHTEMP+0x4c>
 8004e22:	f001 fa95 	bl	8006350 <HAL_GetTick>
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <Reflow_preheat_REACHTEMP+0x64>)
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4a12      	ldr	r2, [pc, #72]	; (8004e78 <Reflow_preheat_REACHTEMP+0x68>)
 8004e30:	fba2 2303 	umull	r2, r3, r2, r3
 8004e34:	0999      	lsrs	r1, r3, #6
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4b0f      	ldr	r3, [pc, #60]	; (8004e78 <Reflow_preheat_REACHTEMP+0x68>)
 8004e3a:	fba3 4302 	umull	r4, r3, r3, r2
 8004e3e:	099b      	lsrs	r3, r3, #6
 8004e40:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004e44:	fb04 f303 	mul.w	r3, r4, r3
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	4a0a      	ldr	r2, [pc, #40]	; (8004e74 <Reflow_preheat_REACHTEMP+0x64>)
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	9201      	str	r2, [sp, #4]
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	460b      	mov	r3, r1
 8004e54:	4a09      	ldr	r2, [pc, #36]	; (8004e7c <Reflow_preheat_REACHTEMP+0x6c>)
 8004e56:	2103      	movs	r1, #3
 8004e58:	f7fd fa12 	bl	8002280 <log_printf>
    ao->state = SOAK_STATE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    return TRAN_STATUS;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd90      	pop	{r4, r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000064 	.word	0x20000064
 8004e74:	2000010c 	.word	0x2000010c
 8004e78:	10624dd3 	.word	0x10624dd3
 8004e7c:	0800efcc 	.word	0x0800efcc

08004e80 <Reflow_soak_REACHTIME>:

static Reflow_Status Reflow_soak_REACHTIME(Reflow_Active *const ao, Event const *const evt)
{
 8004e80:	b590      	push	{r4, r7, lr}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
    LOGI(TAG, "Entering ramp-up phase.");
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <Reflow_soak_REACHTIME+0x60>)
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01c      	beq.n	8004ecc <Reflow_soak_REACHTIME+0x4c>
 8004e92:	f001 fa5d 	bl	8006350 <HAL_GetTick>
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <Reflow_soak_REACHTIME+0x64>)
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4a12      	ldr	r2, [pc, #72]	; (8004ee8 <Reflow_soak_REACHTIME+0x68>)
 8004ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea4:	0999      	lsrs	r1, r3, #6
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <Reflow_soak_REACHTIME+0x68>)
 8004eaa:	fba3 4302 	umull	r4, r3, r3, r2
 8004eae:	099b      	lsrs	r3, r3, #6
 8004eb0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004eb4:	fb04 f303 	mul.w	r3, r4, r3
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	4a0a      	ldr	r2, [pc, #40]	; (8004ee4 <Reflow_soak_REACHTIME+0x64>)
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	9201      	str	r2, [sp, #4]
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4a09      	ldr	r2, [pc, #36]	; (8004eec <Reflow_soak_REACHTIME+0x6c>)
 8004ec6:	2103      	movs	r1, #3
 8004ec8:	f7fd f9da 	bl	8002280 <log_printf>
    ao->state = RAMPUP_STATE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2203      	movs	r2, #3
 8004ed0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    return TRAN_STATUS;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd90      	pop	{r4, r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20000064 	.word	0x20000064
 8004ee4:	2000010c 	.word	0x2000010c
 8004ee8:	10624dd3 	.word	0x10624dd3
 8004eec:	0800f000 	.word	0x0800f000

08004ef0 <Reflow_rampup_REACHTEMP>:

static Reflow_Status Reflow_rampup_REACHTEMP(Reflow_Active *const ao, Event const *const evt)
{
 8004ef0:	b590      	push	{r4, r7, lr}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
    LOGI(TAG, "Entering peak phase.");
 8004efa:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <Reflow_rampup_REACHTEMP+0x60>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d01c      	beq.n	8004f3c <Reflow_rampup_REACHTEMP+0x4c>
 8004f02:	f001 fa25 	bl	8006350 <HAL_GetTick>
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	4b12      	ldr	r3, [pc, #72]	; (8004f54 <Reflow_rampup_REACHTEMP+0x64>)
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4a12      	ldr	r2, [pc, #72]	; (8004f58 <Reflow_rampup_REACHTEMP+0x68>)
 8004f10:	fba2 2303 	umull	r2, r3, r2, r3
 8004f14:	0999      	lsrs	r1, r3, #6
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <Reflow_rampup_REACHTEMP+0x68>)
 8004f1a:	fba3 4302 	umull	r4, r3, r3, r2
 8004f1e:	099b      	lsrs	r3, r3, #6
 8004f20:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004f24:	fb04 f303 	mul.w	r3, r4, r3
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	4a0a      	ldr	r2, [pc, #40]	; (8004f54 <Reflow_rampup_REACHTEMP+0x64>)
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	9201      	str	r2, [sp, #4]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	460b      	mov	r3, r1
 8004f34:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <Reflow_rampup_REACHTEMP+0x6c>)
 8004f36:	2103      	movs	r1, #3
 8004f38:	f7fd f9a2 	bl	8002280 <log_printf>
    ao->state = PEAK_STATE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2204      	movs	r2, #4
 8004f40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    return TRAN_STATUS;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd90      	pop	{r4, r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000064 	.word	0x20000064
 8004f54:	2000010c 	.word	0x2000010c
 8004f58:	10624dd3 	.word	0x10624dd3
 8004f5c:	0800f034 	.word	0x0800f034

08004f60 <Reflow_peak_REACHTIME>:

static Reflow_Status Reflow_peak_REACHTIME(Reflow_Active *const ao, Event const *const evt)
{
 8004f60:	b590      	push	{r4, r7, lr}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
    LOGI(TAG, "Entering cool-down phase.");
 8004f6a:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <Reflow_peak_REACHTIME+0x60>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d01c      	beq.n	8004fac <Reflow_peak_REACHTIME+0x4c>
 8004f72:	f001 f9ed 	bl	8006350 <HAL_GetTick>
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <Reflow_peak_REACHTIME+0x64>)
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a12      	ldr	r2, [pc, #72]	; (8004fc8 <Reflow_peak_REACHTIME+0x68>)
 8004f80:	fba2 2303 	umull	r2, r3, r2, r3
 8004f84:	0999      	lsrs	r1, r3, #6
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <Reflow_peak_REACHTIME+0x68>)
 8004f8a:	fba3 4302 	umull	r4, r3, r3, r2
 8004f8e:	099b      	lsrs	r3, r3, #6
 8004f90:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004f94:	fb04 f303 	mul.w	r3, r4, r3
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	4a0a      	ldr	r2, [pc, #40]	; (8004fc4 <Reflow_peak_REACHTIME+0x64>)
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	9201      	str	r2, [sp, #4]
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4a09      	ldr	r2, [pc, #36]	; (8004fcc <Reflow_peak_REACHTIME+0x6c>)
 8004fa6:	2103      	movs	r1, #3
 8004fa8:	f7fd f96a 	bl	8002280 <log_printf>
    ao->state = COOLDOWN_STATE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2205      	movs	r2, #5
 8004fb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    return TRAN_STATUS;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd90      	pop	{r4, r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000064 	.word	0x20000064
 8004fc4:	2000010c 	.word	0x2000010c
 8004fc8:	10624dd3 	.word	0x10624dd3
 8004fcc:	0800f068 	.word	0x0800f068

08004fd0 <Reflow_cooldown_REACHTEMP>:

static Reflow_Status Reflow_cooldown_REACHTEMP(Reflow_Active *const ao, Event const *const evt)
{
 8004fd0:	b590      	push	{r4, r7, lr}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
    LOGI(TAG, "Reflow process completed!");
 8004fda:	4b15      	ldr	r3, [pc, #84]	; (8005030 <Reflow_cooldown_REACHTEMP+0x60>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01c      	beq.n	800501c <Reflow_cooldown_REACHTEMP+0x4c>
 8004fe2:	f001 f9b5 	bl	8006350 <HAL_GetTick>
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	4b12      	ldr	r3, [pc, #72]	; (8005034 <Reflow_cooldown_REACHTEMP+0x64>)
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4a12      	ldr	r2, [pc, #72]	; (8005038 <Reflow_cooldown_REACHTEMP+0x68>)
 8004ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff4:	0999      	lsrs	r1, r3, #6
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <Reflow_cooldown_REACHTEMP+0x68>)
 8004ffa:	fba3 4302 	umull	r4, r3, r3, r2
 8004ffe:	099b      	lsrs	r3, r3, #6
 8005000:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005004:	fb04 f303 	mul.w	r3, r4, r3
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	4a0a      	ldr	r2, [pc, #40]	; (8005034 <Reflow_cooldown_REACHTEMP+0x64>)
 800500c:	6812      	ldr	r2, [r2, #0]
 800500e:	9201      	str	r2, [sp, #4]
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	460b      	mov	r3, r1
 8005014:	4a09      	ldr	r2, [pc, #36]	; (800503c <Reflow_cooldown_REACHTEMP+0x6c>)
 8005016:	2103      	movs	r1, #3
 8005018:	f7fd f932 	bl	8002280 <log_printf>
    ao->state = RESET_STATE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    return TRAN_STATUS;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	bd90      	pop	{r4, r7, pc}
 800502e:	bf00      	nop
 8005030:	20000064 	.word	0x20000064
 8005034:	2000010c 	.word	0x2000010c
 8005038:	10624dd3 	.word	0x10624dd3
 800503c:	0800f0a0 	.word	0x0800f0a0

08005040 <Reflow_STOP>:

static Reflow_Status Reflow_STOP(Reflow_Active *const ao, Event const *const evt)
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b087      	sub	sp, #28
 8005044:	af02      	add	r7, sp, #8
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
    LOGI(TAG, "Stopping reflow process...");
 800504a:	4b17      	ldr	r3, [pc, #92]	; (80050a8 <Reflow_STOP+0x68>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d01c      	beq.n	800508c <Reflow_STOP+0x4c>
 8005052:	f001 f97d 	bl	8006350 <HAL_GetTick>
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	4b14      	ldr	r3, [pc, #80]	; (80050ac <Reflow_STOP+0x6c>)
 800505a:	6818      	ldr	r0, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4a14      	ldr	r2, [pc, #80]	; (80050b0 <Reflow_STOP+0x70>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	0999      	lsrs	r1, r3, #6
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4b11      	ldr	r3, [pc, #68]	; (80050b0 <Reflow_STOP+0x70>)
 800506a:	fba3 4302 	umull	r4, r3, r3, r2
 800506e:	099b      	lsrs	r3, r3, #6
 8005070:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005074:	fb04 f303 	mul.w	r3, r4, r3
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	4a0c      	ldr	r2, [pc, #48]	; (80050ac <Reflow_STOP+0x6c>)
 800507c:	6812      	ldr	r2, [r2, #0]
 800507e:	9201      	str	r2, [sp, #4]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	460b      	mov	r3, r1
 8005084:	4a0b      	ldr	r2, [pc, #44]	; (80050b4 <Reflow_STOP+0x74>)
 8005086:	2103      	movs	r1, #3
 8005088:	f7fd f8fa 	bl	8002280 <log_printf>
    osTimerStop(ao->pid_timer_id);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	4618      	mov	r0, r3
 8005092:	f006 f849 	bl	800b128 <osTimerStop>
    ao->state = RESET_STATE; // Transition to RESET state.
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    return TRAN_STATUS;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd90      	pop	{r4, r7, pc}
 80050a8:	20000064 	.word	0x20000064
 80050ac:	2000010c 	.word	0x2000010c
 80050b0:	10624dd3 	.word	0x10624dd3
 80050b4:	0800f0d8 	.word	0x0800f0d8

080050b8 <Reflow_ignore>:

static Reflow_Status Reflow_ignore(Reflow_Active *const ao, Event const *const evt)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
    return IGNORE_STATUS;
 80050c2:	2302      	movs	r3, #2
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <reflow_init>:
    /* RAMPUP 	*/ {Reflow_ignore, Reflow_rampup_ENTRY, Reflow_ignore, Reflow_ignore, Reflow_rampup_REACHTEMP, Reflow_STOP},
    /* PEAK 	*/ {Reflow_ignore, Reflow_peak_ENTRY, Reflow_ignore, Reflow_peak_REACHTIME, Reflow_ignore, Reflow_STOP},
    /* COOLDOWN */ {Reflow_ignore, Reflow_cooldown_ENTRY, Reflow_ignore, Reflow_ignore, Reflow_cooldown_REACHTEMP, Reflow_STOP}};

void reflow_init(Reflow_cfg_t const *const reflow_cfg)
{
 80050d0:	b590      	push	{r4, r7, lr}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	6078      	str	r0, [r7, #4]
    /* Call active object constructor */
    Active_ctor((Active *)&reflow_ao, (EventHandler)reflow_evt_handler);
 80050d8:	494f      	ldr	r1, [pc, #316]	; (8005218 <reflow_init+0x148>)
 80050da:	4850      	ldr	r0, [pc, #320]	; (800521c <reflow_init+0x14c>)
 80050dc:	f7fc f85a 	bl	8001194 <Active_ctor>

    /* Register PWM timer and enable preload register */
    reflow_ao.pwm_timer_handle = reflow_cfg->pwm_timer_handle;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a4d      	ldr	r2, [pc, #308]	; (800521c <reflow_init+0x14c>)
 80050e6:	60d3      	str	r3, [r2, #12]
    reflow_ao.pwm_channel = reflow_cfg->pwm_channel;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	4a4b      	ldr	r2, [pc, #300]	; (800521c <reflow_init+0x14c>)
 80050ee:	6113      	str	r3, [r2, #16]
    __HAL_TIM_ENABLE_OCxPRELOAD(reflow_ao.pwm_timer_handle, reflow_ao.pwm_channel);
 80050f0:	4b4a      	ldr	r3, [pc, #296]	; (800521c <reflow_init+0x14c>)
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10a      	bne.n	800510e <reflow_init+0x3e>
 80050f8:	4b48      	ldr	r3, [pc, #288]	; (800521c <reflow_init+0x14c>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	699a      	ldr	r2, [r3, #24]
 8005100:	4b46      	ldr	r3, [pc, #280]	; (800521c <reflow_init+0x14c>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0208 	orr.w	r2, r2, #8
 800510a:	619a      	str	r2, [r3, #24]
 800510c:	e045      	b.n	800519a <reflow_init+0xca>
 800510e:	4b43      	ldr	r3, [pc, #268]	; (800521c <reflow_init+0x14c>)
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b04      	cmp	r3, #4
 8005114:	d10a      	bne.n	800512c <reflow_init+0x5c>
 8005116:	4b41      	ldr	r3, [pc, #260]	; (800521c <reflow_init+0x14c>)
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	4a3f      	ldr	r2, [pc, #252]	; (800521c <reflow_init+0x14c>)
 8005120:	68d2      	ldr	r2, [r2, #12]
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005128:	6193      	str	r3, [r2, #24]
 800512a:	e036      	b.n	800519a <reflow_init+0xca>
 800512c:	4b3b      	ldr	r3, [pc, #236]	; (800521c <reflow_init+0x14c>)
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d10a      	bne.n	800514a <reflow_init+0x7a>
 8005134:	4b39      	ldr	r3, [pc, #228]	; (800521c <reflow_init+0x14c>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	4a37      	ldr	r2, [pc, #220]	; (800521c <reflow_init+0x14c>)
 800513e:	68d2      	ldr	r2, [r2, #12]
 8005140:	6812      	ldr	r2, [r2, #0]
 8005142:	f043 0308 	orr.w	r3, r3, #8
 8005146:	61d3      	str	r3, [r2, #28]
 8005148:	e027      	b.n	800519a <reflow_init+0xca>
 800514a:	4b34      	ldr	r3, [pc, #208]	; (800521c <reflow_init+0x14c>)
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b0c      	cmp	r3, #12
 8005150:	d10a      	bne.n	8005168 <reflow_init+0x98>
 8005152:	4b32      	ldr	r3, [pc, #200]	; (800521c <reflow_init+0x14c>)
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	4a30      	ldr	r2, [pc, #192]	; (800521c <reflow_init+0x14c>)
 800515c:	68d2      	ldr	r2, [r2, #12]
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005164:	61d3      	str	r3, [r2, #28]
 8005166:	e018      	b.n	800519a <reflow_init+0xca>
 8005168:	4b2c      	ldr	r3, [pc, #176]	; (800521c <reflow_init+0x14c>)
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	2b10      	cmp	r3, #16
 800516e:	d10a      	bne.n	8005186 <reflow_init+0xb6>
 8005170:	4b2a      	ldr	r3, [pc, #168]	; (800521c <reflow_init+0x14c>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005178:	4a28      	ldr	r2, [pc, #160]	; (800521c <reflow_init+0x14c>)
 800517a:	68d2      	ldr	r2, [r2, #12]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	f043 0308 	orr.w	r3, r3, #8
 8005182:	6553      	str	r3, [r2, #84]	; 0x54
 8005184:	e009      	b.n	800519a <reflow_init+0xca>
 8005186:	4b25      	ldr	r3, [pc, #148]	; (800521c <reflow_init+0x14c>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518e:	4a23      	ldr	r2, [pc, #140]	; (800521c <reflow_init+0x14c>)
 8005190:	68d2      	ldr	r2, [r2, #12]
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005198:	6553      	str	r3, [r2, #84]	; 0x54
                                             .Kd = KD_INIT,
                                             .tau = TAU_INIT,
                                             .Ts = TS_INIT,
                                             .out_max = OUT_MAX_INIT,
                                             .out_min = OUT_MIN_INIT};
    PID_Init(&reflow_ao.pid_params, &reflow_pid_cfg);
 800519a:	4921      	ldr	r1, [pc, #132]	; (8005220 <reflow_init+0x150>)
 800519c:	4821      	ldr	r0, [pc, #132]	; (8005224 <reflow_init+0x154>)
 800519e:	f7fd fe8c 	bl	8002eba <PID_Init>

    /* Initialize timer instances. */
    TimeEvent_ctor(&reflow_ao.reflow_time_evt, REACH_TIME_SIG, (Active *)&reflow_ao);
 80051a2:	4a1e      	ldr	r2, [pc, #120]	; (800521c <reflow_init+0x14c>)
 80051a4:	2103      	movs	r1, #3
 80051a6:	4820      	ldr	r0, [pc, #128]	; (8005228 <reflow_init+0x158>)
 80051a8:	f7fc f86a 	bl	8001280 <TimeEvent_ctor>
    reflow_ao.pid_timer_id = osTimerNew(reflow_pid_iteration, osTimerPeriodic, NULL, NULL);
 80051ac:	2300      	movs	r3, #0
 80051ae:	2200      	movs	r2, #0
 80051b0:	2101      	movs	r1, #1
 80051b2:	481e      	ldr	r0, [pc, #120]	; (800522c <reflow_init+0x15c>)
 80051b4:	f005 ff0e 	bl	800afd4 <osTimerNew>
 80051b8:	4603      	mov	r3, r0
 80051ba:	4a18      	ldr	r2, [pc, #96]	; (800521c <reflow_init+0x14c>)
 80051bc:	6253      	str	r3, [r2, #36]	; 0x24

    /* Register reflow commands */
    cmd_register(&reflow_client_info);
 80051be:	481c      	ldr	r0, [pc, #112]	; (8005230 <reflow_init+0x160>)
 80051c0:	f7fc fabe 	bl	8001740 <cmd_register>

    /* Initialize thermocouple IC */
    MAX31855K_Init(&reflow_cfg->max_cfg);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3308      	adds	r3, #8
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fb fe75 	bl	8000eb8 <MAX31855K_Init>

    LOGI(TAG, "Initialized reflow module.");
 80051ce:	4b19      	ldr	r3, [pc, #100]	; (8005234 <reflow_init+0x164>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d01c      	beq.n	8005210 <reflow_init+0x140>
 80051d6:	f001 f8bb 	bl	8006350 <HAL_GetTick>
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	4b16      	ldr	r3, [pc, #88]	; (8005238 <reflow_init+0x168>)
 80051de:	6818      	ldr	r0, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4a16      	ldr	r2, [pc, #88]	; (800523c <reflow_init+0x16c>)
 80051e4:	fba2 2303 	umull	r2, r3, r2, r3
 80051e8:	0999      	lsrs	r1, r3, #6
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4b13      	ldr	r3, [pc, #76]	; (800523c <reflow_init+0x16c>)
 80051ee:	fba3 4302 	umull	r4, r3, r3, r2
 80051f2:	099b      	lsrs	r3, r3, #6
 80051f4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80051f8:	fb04 f303 	mul.w	r3, r4, r3
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	4a0e      	ldr	r2, [pc, #56]	; (8005238 <reflow_init+0x168>)
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	9201      	str	r2, [sp, #4]
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	460b      	mov	r3, r1
 8005208:	4a0d      	ldr	r2, [pc, #52]	; (8005240 <reflow_init+0x170>)
 800520a:	2103      	movs	r1, #3
 800520c:	f7fd f838 	bl	8002280 <log_printf>
}
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	bd90      	pop	{r4, r7, pc}
 8005218:	08005611 	.word	0x08005611
 800521c:	2000006c 	.word	0x2000006c
 8005220:	0800f608 	.word	0x0800f608
 8005224:	20000098 	.word	0x20000098
 8005228:	20000080 	.word	0x20000080
 800522c:	08005275 	.word	0x08005275
 8005230:	20000128 	.word	0x20000128
 8005234:	20000064 	.word	0x20000064
 8005238:	2000010c 	.word	0x2000010c
 800523c:	10624dd3 	.word	0x10624dd3
 8005240:	0800f110 	.word	0x0800f110

08005244 <reflow_start>:

void reflow_start()
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	; 0x28
 8005248:	af00      	add	r7, sp, #0
    osThreadAttr_t reflow_thread_attr = {.stack_size = REFLOW_THREAD_STACK_SZ};
 800524a:	1d3b      	adds	r3, r7, #4
 800524c:	2224      	movs	r2, #36	; 0x24
 800524e:	2100      	movs	r1, #0
 8005250:	4618      	mov	r0, r3
 8005252:	f008 ff13 	bl	800e07c <memset>
 8005256:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800525a:	61bb      	str	r3, [r7, #24]
    Active_start((Active *)&reflow_ao, &reflow_thread_attr, 5, NULL);
 800525c:	1d39      	adds	r1, r7, #4
 800525e:	2300      	movs	r3, #0
 8005260:	2205      	movs	r2, #5
 8005262:	4803      	ldr	r0, [pc, #12]	; (8005270 <reflow_start+0x2c>)
 8005264:	f7fb ffae 	bl	80011c4 <Active_start>
}
 8005268:	bf00      	nop
 800526a:	3728      	adds	r7, #40	; 0x28
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	2000006c 	.word	0x2000006c

08005274 <reflow_pid_iteration>:

/**
 * @brief Perform PID iteration.
 */
static void reflow_pid_iteration(void *argument)
{
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b08b      	sub	sp, #44	; 0x2c
 8005278:	af02      	add	r7, sp, #8
 800527a:	6078      	str	r0, [r7, #4]
	float temp_reading = 0;
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
	bool status = readTemperature(&temp_reading);
 8005282:	f107 030c 	add.w	r3, r7, #12
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fb04 	bl	8005894 <readTemperature>
 800528c:	4603      	mov	r3, r0
 800528e:	77fb      	strb	r3, [r7, #31]
	if(status == false)
 8005290:	7ffb      	ldrb	r3, [r7, #31]
 8005292:	f083 0301 	eor.w	r3, r3, #1
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d028      	beq.n	80052ee <reflow_pid_iteration+0x7a>
	{
		LOGE(TAG, "Could not read temperature, aborting reflow process.");
 800529c:	4b6c      	ldr	r3, [pc, #432]	; (8005450 <reflow_pid_iteration+0x1dc>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d020      	beq.n	80052e6 <reflow_pid_iteration+0x72>
 80052a4:	4b6b      	ldr	r3, [pc, #428]	; (8005454 <reflow_pid_iteration+0x1e0>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	dd1c      	ble.n	80052e6 <reflow_pid_iteration+0x72>
 80052ac:	f001 f850 	bl	8006350 <HAL_GetTick>
 80052b0:	61b8      	str	r0, [r7, #24]
 80052b2:	4b69      	ldr	r3, [pc, #420]	; (8005458 <reflow_pid_iteration+0x1e4>)
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	4a68      	ldr	r2, [pc, #416]	; (800545c <reflow_pid_iteration+0x1e8>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	0999      	lsrs	r1, r3, #6
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	4b66      	ldr	r3, [pc, #408]	; (800545c <reflow_pid_iteration+0x1e8>)
 80052c4:	fba3 4302 	umull	r4, r3, r3, r2
 80052c8:	099b      	lsrs	r3, r3, #6
 80052ca:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80052ce:	fb04 f303 	mul.w	r3, r4, r3
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	4a60      	ldr	r2, [pc, #384]	; (8005458 <reflow_pid_iteration+0x1e4>)
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	9201      	str	r2, [sp, #4]
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	460b      	mov	r3, r1
 80052de:	4a60      	ldr	r2, [pc, #384]	; (8005460 <reflow_pid_iteration+0x1ec>)
 80052e0:	2101      	movs	r1, #1
 80052e2:	f7fc ffcd 	bl	8002280 <log_printf>
		Active_post(&reflow_ao.reflow_base, &stop_evt);
 80052e6:	495f      	ldr	r1, [pc, #380]	; (8005464 <reflow_pid_iteration+0x1f0>)
 80052e8:	485f      	ldr	r0, [pc, #380]	; (8005468 <reflow_pid_iteration+0x1f4>)
 80052ea:	f7fb ffb1 	bl	8001250 <Active_post>
	}

	/* Check if temperature reached intended temperature of REACHTEMP phases.
	 * If so, send REACHTEMP signal to reflow active object.
	 */
	if(reflow_ao.reflow_phases[reflow_ao.state - 1].phase_type == REACHTEMP)
 80052ee:	4b5e      	ldr	r3, [pc, #376]	; (8005468 <reflow_pid_iteration+0x1f4>)
 80052f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052f4:	1e5a      	subs	r2, r3, #1
 80052f6:	495c      	ldr	r1, [pc, #368]	; (8005468 <reflow_pid_iteration+0x1f4>)
 80052f8:	4613      	mov	r3, r2
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	3364      	adds	r3, #100	; 0x64
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d125      	bne.n	8005356 <reflow_pid_iteration+0xe2>
	{
		uint32_t reach_temp = reflow_ao.reflow_phases[reflow_ao.state - 1].reach_temp;
 800530a:	4b57      	ldr	r3, [pc, #348]	; (8005468 <reflow_pid_iteration+0x1f4>)
 800530c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005310:	1e5a      	subs	r2, r3, #1
 8005312:	4955      	ldr	r1, [pc, #340]	; (8005468 <reflow_pid_iteration+0x1f4>)
 8005314:	4613      	mov	r3, r2
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	3368      	adds	r3, #104	; 0x68
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	617b      	str	r3, [r7, #20]
		/* Give some leeway. */
		if(reach_temp > (uint32_t)temp_reading - 1U && reach_temp < (uint32_t)temp_reading + 1U)
 8005324:	edd7 7a03 	vldr	s15, [r7, #12]
 8005328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800532c:	ee17 3a90 	vmov	r3, s15
 8005330:	3b01      	subs	r3, #1
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	429a      	cmp	r2, r3
 8005336:	d919      	bls.n	800536c <reflow_pid_iteration+0xf8>
 8005338:	edd7 7a03 	vldr	s15, [r7, #12]
 800533c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005340:	ee17 3a90 	vmov	r3, s15
 8005344:	3301      	adds	r3, #1
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	429a      	cmp	r2, r3
 800534a:	d20f      	bcs.n	800536c <reflow_pid_iteration+0xf8>
		{
			static const Event reachtemp_evt = { .sig = REACH_TEMP_SIG };
			Active_post(&reflow_ao.reflow_base, &reachtemp_evt);
 800534c:	4947      	ldr	r1, [pc, #284]	; (800546c <reflow_pid_iteration+0x1f8>)
 800534e:	4846      	ldr	r0, [pc, #280]	; (8005468 <reflow_pid_iteration+0x1f4>)
 8005350:	f7fb ff7e 	bl	8001250 <Active_post>
 8005354:	e00a      	b.n	800536c <reflow_pid_iteration+0xf8>
	else
	{
		/* Currently in a REACHTIME phase.
	     * Update setpoint by a step to smooth out temperature change.
	     */
		reflow_ao.setpoint += reflow_ao.step_size;
 8005356:	4b44      	ldr	r3, [pc, #272]	; (8005468 <reflow_pid_iteration+0x1f4>)
 8005358:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800535c:	4b42      	ldr	r3, [pc, #264]	; (8005468 <reflow_pid_iteration+0x1f4>)
 800535e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8005362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005366:	4b40      	ldr	r3, [pc, #256]	; (8005468 <reflow_pid_iteration+0x1f4>)
 8005368:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	}

	float pwm_value = PID_Calculate(&reflow_ao.pid_params, reflow_ao.setpoint, temp_reading);
 800536c:	4b3e      	ldr	r3, [pc, #248]	; (8005468 <reflow_pid_iteration+0x1f4>)
 800536e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005372:	ed97 7a03 	vldr	s14, [r7, #12]
 8005376:	eef0 0a47 	vmov.f32	s1, s14
 800537a:	eeb0 0a67 	vmov.f32	s0, s15
 800537e:	483c      	ldr	r0, [pc, #240]	; (8005470 <reflow_pid_iteration+0x1fc>)
 8005380:	f7fd fdd6 	bl	8002f30 <PID_Calculate>
 8005384:	ed87 0a04 	vstr	s0, [r7, #16]

	__HAL_TIM_SET_COMPARE(reflow_ao.pwm_timer_handle, reflow_ao.pwm_channel, (uint16_t)pwm_value);
 8005388:	4b37      	ldr	r3, [pc, #220]	; (8005468 <reflow_pid_iteration+0x1f4>)
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10b      	bne.n	80053a8 <reflow_pid_iteration+0x134>
 8005390:	edd7 7a04 	vldr	s15, [r7, #16]
 8005394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005398:	ee17 3a90 	vmov	r3, s15
 800539c:	b29a      	uxth	r2, r3
 800539e:	4b32      	ldr	r3, [pc, #200]	; (8005468 <reflow_pid_iteration+0x1f4>)
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80053a6:	e04f      	b.n	8005448 <reflow_pid_iteration+0x1d4>
	__HAL_TIM_SET_COMPARE(reflow_ao.pwm_timer_handle, reflow_ao.pwm_channel, (uint16_t)pwm_value);
 80053a8:	4b2f      	ldr	r3, [pc, #188]	; (8005468 <reflow_pid_iteration+0x1f4>)
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	d10c      	bne.n	80053ca <reflow_pid_iteration+0x156>
 80053b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80053b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053b8:	ee17 3a90 	vmov	r3, s15
 80053bc:	b299      	uxth	r1, r3
 80053be:	4b2a      	ldr	r3, [pc, #168]	; (8005468 <reflow_pid_iteration+0x1f4>)
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	460b      	mov	r3, r1
 80053c6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80053c8:	e03e      	b.n	8005448 <reflow_pid_iteration+0x1d4>
	__HAL_TIM_SET_COMPARE(reflow_ao.pwm_timer_handle, reflow_ao.pwm_channel, (uint16_t)pwm_value);
 80053ca:	4b27      	ldr	r3, [pc, #156]	; (8005468 <reflow_pid_iteration+0x1f4>)
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d10c      	bne.n	80053ec <reflow_pid_iteration+0x178>
 80053d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80053d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053da:	ee17 3a90 	vmov	r3, s15
 80053de:	b299      	uxth	r1, r3
 80053e0:	4b21      	ldr	r3, [pc, #132]	; (8005468 <reflow_pid_iteration+0x1f4>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	460b      	mov	r3, r1
 80053e8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80053ea:	e02d      	b.n	8005448 <reflow_pid_iteration+0x1d4>
	__HAL_TIM_SET_COMPARE(reflow_ao.pwm_timer_handle, reflow_ao.pwm_channel, (uint16_t)pwm_value);
 80053ec:	4b1e      	ldr	r3, [pc, #120]	; (8005468 <reflow_pid_iteration+0x1f4>)
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2b0c      	cmp	r3, #12
 80053f2:	d10c      	bne.n	800540e <reflow_pid_iteration+0x19a>
 80053f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80053f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053fc:	ee17 3a90 	vmov	r3, s15
 8005400:	b299      	uxth	r1, r3
 8005402:	4b19      	ldr	r3, [pc, #100]	; (8005468 <reflow_pid_iteration+0x1f4>)
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	460b      	mov	r3, r1
 800540a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800540c:	e01c      	b.n	8005448 <reflow_pid_iteration+0x1d4>
	__HAL_TIM_SET_COMPARE(reflow_ao.pwm_timer_handle, reflow_ao.pwm_channel, (uint16_t)pwm_value);
 800540e:	4b16      	ldr	r3, [pc, #88]	; (8005468 <reflow_pid_iteration+0x1f4>)
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b10      	cmp	r3, #16
 8005414:	d10c      	bne.n	8005430 <reflow_pid_iteration+0x1bc>
 8005416:	edd7 7a04 	vldr	s15, [r7, #16]
 800541a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800541e:	ee17 3a90 	vmov	r3, s15
 8005422:	b299      	uxth	r1, r3
 8005424:	4b10      	ldr	r3, [pc, #64]	; (8005468 <reflow_pid_iteration+0x1f4>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	460b      	mov	r3, r1
 800542c:	6593      	str	r3, [r2, #88]	; 0x58
}
 800542e:	e00b      	b.n	8005448 <reflow_pid_iteration+0x1d4>
	__HAL_TIM_SET_COMPARE(reflow_ao.pwm_timer_handle, reflow_ao.pwm_channel, (uint16_t)pwm_value);
 8005430:	edd7 7a04 	vldr	s15, [r7, #16]
 8005434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005438:	ee17 3a90 	vmov	r3, s15
 800543c:	b299      	uxth	r1, r3
 800543e:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <reflow_pid_iteration+0x1f4>)
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	460b      	mov	r3, r1
 8005446:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8005448:	bf00      	nop
 800544a:	3724      	adds	r7, #36	; 0x24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd90      	pop	{r4, r7, pc}
 8005450:	20000064 	.word	0x20000064
 8005454:	20000068 	.word	0x20000068
 8005458:	2000010c 	.word	0x2000010c
 800545c:	10624dd3 	.word	0x10624dd3
 8005460:	0800f148 	.word	0x0800f148
 8005464:	0800f574 	.word	0x0800f574
 8005468:	2000006c 	.word	0x2000006c
 800546c:	0800f624 	.word	0x0800f624
 8005470:	20000098 	.word	0x20000098

08005474 <reflow_get_params_cmd>:

/**
 * @brief Display PID, profile parameters, or both to user.
 */
static uint32_t reflow_get_params_cmd(uint32_t argc, const char **argv)
{
 8005474:	b590      	push	{r4, r7, lr}
 8005476:	b089      	sub	sp, #36	; 0x24
 8005478:	af04      	add	r7, sp, #16
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
    if (argc != 1)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d023      	beq.n	80054cc <reflow_get_params_cmd+0x58>
    {
        LOGW(TAG, "Expecting single token only.");
 8005484:	4b41      	ldr	r3, [pc, #260]	; (800558c <reflow_get_params_cmd+0x118>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01c      	beq.n	80054c6 <reflow_get_params_cmd+0x52>
 800548c:	f000 ff60 	bl	8006350 <HAL_GetTick>
 8005490:	60b8      	str	r0, [r7, #8]
 8005492:	4b3f      	ldr	r3, [pc, #252]	; (8005590 <reflow_get_params_cmd+0x11c>)
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	4a3e      	ldr	r2, [pc, #248]	; (8005594 <reflow_get_params_cmd+0x120>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	0999      	lsrs	r1, r3, #6
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	4b3c      	ldr	r3, [pc, #240]	; (8005594 <reflow_get_params_cmd+0x120>)
 80054a4:	fba3 4302 	umull	r4, r3, r3, r2
 80054a8:	099b      	lsrs	r3, r3, #6
 80054aa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80054ae:	fb04 f303 	mul.w	r3, r4, r3
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	4a36      	ldr	r2, [pc, #216]	; (8005590 <reflow_get_params_cmd+0x11c>)
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	9201      	str	r2, [sp, #4]
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	460b      	mov	r3, r1
 80054be:	4a36      	ldr	r2, [pc, #216]	; (8005598 <reflow_get_params_cmd+0x124>)
 80054c0:	2102      	movs	r1, #2
 80054c2:	f7fc fedd 	bl	8002280 <log_printf>
        return -1;
 80054c6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ca:	e05b      	b.n	8005584 <reflow_get_params_cmd+0x110>
    }

    if (strcasecmp(argv[0], "*") == 0)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4932      	ldr	r1, [pc, #200]	; (800559c <reflow_get_params_cmd+0x128>)
 80054d2:	4618      	mov	r0, r3
 80054d4:	f008 fe94 	bl	800e200 <strcasecmp>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <reflow_get_params_cmd+0x78>
    {
        displayPIDParams();
 80054de:	f000 f923 	bl	8005728 <displayPIDParams>
        displayProfileParams();
 80054e2:	f000 f975 	bl	80057d0 <displayProfileParams>
        displayState();
 80054e6:	f000 f9bf 	bl	8005868 <displayState>
 80054ea:	e04a      	b.n	8005582 <reflow_get_params_cmd+0x10e>
    }
    else if (strcasecmp(argv[0], "pid") == 0)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	492b      	ldr	r1, [pc, #172]	; (80055a0 <reflow_get_params_cmd+0x12c>)
 80054f2:	4618      	mov	r0, r3
 80054f4:	f008 fe84 	bl	800e200 <strcasecmp>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <reflow_get_params_cmd+0x90>
    {
        displayPIDParams();
 80054fe:	f000 f913 	bl	8005728 <displayPIDParams>
 8005502:	e03e      	b.n	8005582 <reflow_get_params_cmd+0x10e>
    }
    else if (strcasecmp(argv[0], "profile") == 0)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4926      	ldr	r1, [pc, #152]	; (80055a4 <reflow_get_params_cmd+0x130>)
 800550a:	4618      	mov	r0, r3
 800550c:	f008 fe78 	bl	800e200 <strcasecmp>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d102      	bne.n	800551c <reflow_get_params_cmd+0xa8>
    {
        displayProfileParams();
 8005516:	f000 f95b 	bl	80057d0 <displayProfileParams>
 800551a:	e032      	b.n	8005582 <reflow_get_params_cmd+0x10e>
    }
    else if (strcasecmp(argv[0], "state") == 0)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4921      	ldr	r1, [pc, #132]	; (80055a8 <reflow_get_params_cmd+0x134>)
 8005522:	4618      	mov	r0, r3
 8005524:	f008 fe6c 	bl	800e200 <strcasecmp>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d102      	bne.n	8005534 <reflow_get_params_cmd+0xc0>
    {
    	displayState();
 800552e:	f000 f99b 	bl	8005868 <displayState>
 8005532:	e026      	b.n	8005582 <reflow_get_params_cmd+0x10e>
    }
    else
    {
        LOGW(TAG, "Invalid argument: %s", argv[0]);
 8005534:	4b15      	ldr	r3, [pc, #84]	; (800558c <reflow_get_params_cmd+0x118>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01f      	beq.n	800557c <reflow_get_params_cmd+0x108>
 800553c:	f000 ff08 	bl	8006350 <HAL_GetTick>
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	4b13      	ldr	r3, [pc, #76]	; (8005590 <reflow_get_params_cmd+0x11c>)
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4a12      	ldr	r2, [pc, #72]	; (8005594 <reflow_get_params_cmd+0x120>)
 800554a:	fba2 2303 	umull	r2, r3, r2, r3
 800554e:	099c      	lsrs	r4, r3, #6
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4b10      	ldr	r3, [pc, #64]	; (8005594 <reflow_get_params_cmd+0x120>)
 8005554:	fba3 1302 	umull	r1, r3, r3, r2
 8005558:	099b      	lsrs	r3, r3, #6
 800555a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800555e:	fb01 f303 	mul.w	r3, r1, r3
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	4a0a      	ldr	r2, [pc, #40]	; (8005590 <reflow_get_params_cmd+0x11c>)
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	6809      	ldr	r1, [r1, #0]
 800556c:	9102      	str	r1, [sp, #8]
 800556e:	9201      	str	r2, [sp, #4]
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	4623      	mov	r3, r4
 8005574:	4a0d      	ldr	r2, [pc, #52]	; (80055ac <reflow_get_params_cmd+0x138>)
 8005576:	2102      	movs	r1, #2
 8005578:	f7fc fe82 	bl	8002280 <log_printf>
        return -1;
 800557c:	f04f 33ff 	mov.w	r3, #4294967295
 8005580:	e000      	b.n	8005584 <reflow_get_params_cmd+0x110>
    }
    return 0;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	bd90      	pop	{r4, r7, pc}
 800558c:	20000064 	.word	0x20000064
 8005590:	2000010c 	.word	0x2000010c
 8005594:	10624dd3 	.word	0x10624dd3
 8005598:	0800f19c 	.word	0x0800f19c
 800559c:	0800f1d8 	.word	0x0800f1d8
 80055a0:	0800f1dc 	.word	0x0800f1dc
 80055a4:	0800f1e0 	.word	0x0800f1e0
 80055a8:	0800f1e8 	.word	0x0800f1e8
 80055ac:	0800f1f0 	.word	0x0800f1f0

080055b0 <reflow_start_cmd>:

static uint32_t reflow_start_cmd(uint32_t argc, const char **argv)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
	static const Event start_evt = { .sig = START_REFLOW_SIG };
	Active_post(&reflow_ao.reflow_base, &start_evt);
 80055ba:	4906      	ldr	r1, [pc, #24]	; (80055d4 <reflow_start_cmd+0x24>)
 80055bc:	4806      	ldr	r0, [pc, #24]	; (80055d8 <reflow_start_cmd+0x28>)
 80055be:	f7fb fe47 	bl	8001250 <Active_post>
	LOG("Posted START signal to reflow active object.\r\n");
 80055c2:	4806      	ldr	r0, [pc, #24]	; (80055dc <reflow_start_cmd+0x2c>)
 80055c4:	f7ff f9d0 	bl	8004968 <printf_>
	return 0;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	0800f628 	.word	0x0800f628
 80055d8:	2000006c 	.word	0x2000006c
 80055dc:	0800f224 	.word	0x0800f224

080055e0 <reflow_stop_cmd>:

static uint32_t reflow_stop_cmd(uint32_t argc, const char **argv)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
	Active_post(&reflow_ao.reflow_base, &stop_evt);
 80055ea:	4906      	ldr	r1, [pc, #24]	; (8005604 <reflow_stop_cmd+0x24>)
 80055ec:	4806      	ldr	r0, [pc, #24]	; (8005608 <reflow_stop_cmd+0x28>)
 80055ee:	f7fb fe2f 	bl	8001250 <Active_post>
	LOG("Posted STOP signal to reflow active object.\r\n");
 80055f2:	4806      	ldr	r0, [pc, #24]	; (800560c <reflow_stop_cmd+0x2c>)
 80055f4:	f7ff f9b8 	bl	8004968 <printf_>
	return 0;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	0800f574 	.word	0x0800f574
 8005608:	2000006c 	.word	0x2000006c
 800560c:	0800f25c 	.word	0x0800f25c

08005610 <reflow_evt_handler>:

static void reflow_evt_handler(Reflow_Active *const ao, Event const *const evt)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af02      	add	r7, sp, #8
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
    /* Use state table to handle events */
    ASSERT((ao->state < NUM_REFLOW_STATES) && (evt->sig < NUM_REFLOW_SIGS));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005620:	2b05      	cmp	r3, #5
 8005622:	d803      	bhi.n	800562c <reflow_evt_handler+0x1c>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b05      	cmp	r3, #5
 800562a:	dd19      	ble.n	8005660 <reflow_evt_handler+0x50>
 800562c:	f000 fe90 	bl	8006350 <HAL_GetTick>
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4a38      	ldr	r2, [pc, #224]	; (8005718 <reflow_evt_handler+0x108>)
 8005636:	fba2 2303 	umull	r2, r3, r2, r3
 800563a:	0999      	lsrs	r1, r3, #6
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4a36      	ldr	r2, [pc, #216]	; (8005718 <reflow_evt_handler+0x108>)
 8005640:	fba2 0203 	umull	r0, r2, r2, r3
 8005644:	0992      	lsrs	r2, r2, #6
 8005646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800564a:	fb00 f202 	mul.w	r2, r0, r2
 800564e:	1a9a      	subs	r2, r3, r2
 8005650:	f240 139b 	movw	r3, #411	; 0x19b
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	4b31      	ldr	r3, [pc, #196]	; (800571c <reflow_evt_handler+0x10c>)
 8005658:	4831      	ldr	r0, [pc, #196]	; (8005720 <reflow_evt_handler+0x110>)
 800565a:	f7ff f985 	bl	8004968 <printf_>
 800565e:	e7fe      	b.n	800565e <reflow_evt_handler+0x4e>
    Reflow_Status stat = Reflow_state_table[ao->state][evt->sig](ao, evt);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005666:	4618      	mov	r0, r3
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	492d      	ldr	r1, [pc, #180]	; (8005724 <reflow_evt_handler+0x114>)
 800566e:	4603      	mov	r3, r0
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	4403      	add	r3, r0
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	4413      	add	r3, r2
 8005678:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	4798      	blx	r3
 8005682:	4603      	mov	r3, r0
 8005684:	75fb      	strb	r3, [r7, #23]

    /**
	 * Execute entry action of current state if
	 * state transition was taken.
	 */
    if (stat == TRAN_STATUS)
 8005686:	7dfb      	ldrb	r3, [r7, #23]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d12e      	bne.n	80056ea <reflow_evt_handler+0xda>
    {
        ASSERT(ao->state < NUM_REFLOW_STATES);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005692:	2b05      	cmp	r3, #5
 8005694:	d919      	bls.n	80056ca <reflow_evt_handler+0xba>
 8005696:	f000 fe5b 	bl	8006350 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <reflow_evt_handler+0x108>)
 80056a0:	fba2 2303 	umull	r2, r3, r2, r3
 80056a4:	0999      	lsrs	r1, r3, #6
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	4a1b      	ldr	r2, [pc, #108]	; (8005718 <reflow_evt_handler+0x108>)
 80056aa:	fba2 0203 	umull	r0, r2, r2, r3
 80056ae:	0992      	lsrs	r2, r2, #6
 80056b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056b4:	fb00 f202 	mul.w	r2, r0, r2
 80056b8:	1a9a      	subs	r2, r3, r2
 80056ba:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	4b16      	ldr	r3, [pc, #88]	; (800571c <reflow_evt_handler+0x10c>)
 80056c2:	4817      	ldr	r0, [pc, #92]	; (8005720 <reflow_evt_handler+0x110>)
 80056c4:	f7ff f950 	bl	8004968 <printf_>
 80056c8:	e7fe      	b.n	80056c8 <reflow_evt_handler+0xb8>
        Reflow_state_table[ao->state][ENTRY_SIG](ao, (Event *)0);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056d0:	4619      	mov	r1, r3
 80056d2:	4a14      	ldr	r2, [pc, #80]	; (8005724 <reflow_evt_handler+0x114>)
 80056d4:	460b      	mov	r3, r1
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	440b      	add	r3, r1
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	4413      	add	r3, r2
 80056de:	3304      	adds	r3, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2100      	movs	r1, #0
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
    else if (stat == INIT_STATUS)
    {
        /* Execute entry action of initial state. */
        Reflow_state_table[ao->state][ENTRY_SIG](ao, (Event *)0);
    }
}
 80056e8:	e011      	b.n	800570e <reflow_evt_handler+0xfe>
    else if (stat == INIT_STATUS)
 80056ea:	7dfb      	ldrb	r3, [r7, #23]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d10e      	bne.n	800570e <reflow_evt_handler+0xfe>
        Reflow_state_table[ao->state][ENTRY_SIG](ao, (Event *)0);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056f6:	4619      	mov	r1, r3
 80056f8:	4a0a      	ldr	r2, [pc, #40]	; (8005724 <reflow_evt_handler+0x114>)
 80056fa:	460b      	mov	r3, r1
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	440b      	add	r3, r1
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	4413      	add	r3, r2
 8005704:	3304      	adds	r3, #4
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2100      	movs	r1, #0
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	4798      	blx	r3
}
 800570e:	bf00      	nop
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	10624dd3 	.word	0x10624dd3
 800571c:	0800f294 	.word	0x0800f294
 8005720:	0800f2ac 	.word	0x0800f2ac
 8005724:	0800f578 	.word	0x0800f578

08005728 <displayPIDParams>:

static inline void displayPIDParams()
{
 8005728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800572c:	b092      	sub	sp, #72	; 0x48
 800572e:	af0c      	add	r7, sp, #48	; 0x30
    LOG("Kp: %.2f\tKi: %.2f\tKd: %.2f\tTau: %.2f\r\n"
 8005730:	4b25      	ldr	r3, [pc, #148]	; (80057c8 <displayPIDParams+0xa0>)
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	4618      	mov	r0, r3
 8005736:	f7fa feb9 	bl	80004ac <__aeabi_f2d>
 800573a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800573e:	4b22      	ldr	r3, [pc, #136]	; (80057c8 <displayPIDParams+0xa0>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	4618      	mov	r0, r3
 8005744:	f7fa feb2 	bl	80004ac <__aeabi_f2d>
 8005748:	4680      	mov	r8, r0
 800574a:	4689      	mov	r9, r1
 800574c:	4b1e      	ldr	r3, [pc, #120]	; (80057c8 <displayPIDParams+0xa0>)
 800574e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005750:	4618      	mov	r0, r3
 8005752:	f7fa feab 	bl	80004ac <__aeabi_f2d>
 8005756:	4682      	mov	sl, r0
 8005758:	468b      	mov	fp, r1
 800575a:	4b1b      	ldr	r3, [pc, #108]	; (80057c8 <displayPIDParams+0xa0>)
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	4618      	mov	r0, r3
 8005760:	f7fa fea4 	bl	80004ac <__aeabi_f2d>
 8005764:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005768:	4b17      	ldr	r3, [pc, #92]	; (80057c8 <displayPIDParams+0xa0>)
 800576a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576c:	4618      	mov	r0, r3
 800576e:	f7fa fe9d 	bl	80004ac <__aeabi_f2d>
 8005772:	e9c7 0100 	strd	r0, r1, [r7]
 8005776:	4b14      	ldr	r3, [pc, #80]	; (80057c8 <displayPIDParams+0xa0>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	4618      	mov	r0, r3
 800577c:	f7fa fe96 	bl	80004ac <__aeabi_f2d>
 8005780:	4604      	mov	r4, r0
 8005782:	460d      	mov	r5, r1
 8005784:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <displayPIDParams+0xa0>)
 8005786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005788:	4618      	mov	r0, r3
 800578a:	f7fa fe8f 	bl	80004ac <__aeabi_f2d>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005796:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800579a:	ed97 7b00 	vldr	d7, [r7]
 800579e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80057a2:	ed97 7b02 	vldr	d7, [r7, #8]
 80057a6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80057aa:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80057ae:	e9cd 8900 	strd	r8, r9, [sp]
 80057b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80057b6:	4805      	ldr	r0, [pc, #20]	; (80057cc <displayPIDParams+0xa4>)
 80057b8:	f7ff f8d6 	bl	8004968 <printf_>
        "Sampling Period: %.2f s\tMax Limit: %.2f\tMin Limit: %.2f\r\n",
        reflow_ao.pid_params.Kp, reflow_ao.pid_params.Ki, reflow_ao.pid_params.Kd,
        reflow_ao.pid_params.tau, reflow_ao.pid_params.Ts,
        reflow_ao.pid_params.out_lim_max, reflow_ao.pid_params.out_lim_min);
}
 80057bc:	bf00      	nop
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057c6:	bf00      	nop
 80057c8:	2000006c 	.word	0x2000006c
 80057cc:	0800f2e4 	.word	0x0800f2e4

080057d0 <displayProfileParams>:

static inline void displayProfileParams()
{
 80057d0:	b5b0      	push	{r4, r5, r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af02      	add	r7, sp, #8
    for (uint8_t i = 0; i < NUM_PROFILE_PHASES; i++)
 80057d6:	2300      	movs	r3, #0
 80057d8:	71fb      	strb	r3, [r7, #7]
 80057da:	e031      	b.n	8005840 <displayProfileParams+0x70>
    {
        LOG("Phase: %s\tType: %s\tReach Temp: %lu deg C\tReach Time: %lu s\r\n",
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	3301      	adds	r3, #1
 80057e0:	4a1b      	ldr	r2, [pc, #108]	; (8005850 <displayProfileParams+0x80>)
 80057e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80057e6:	79fa      	ldrb	r2, [r7, #7]
 80057e8:	481a      	ldr	r0, [pc, #104]	; (8005854 <displayProfileParams+0x84>)
 80057ea:	4613      	mov	r3, r2
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4403      	add	r3, r0
 80057f4:	3364      	adds	r3, #100	; 0x64
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <displayProfileParams+0x30>
 80057fc:	4816      	ldr	r0, [pc, #88]	; (8005858 <displayProfileParams+0x88>)
 80057fe:	e000      	b.n	8005802 <displayProfileParams+0x32>
 8005800:	4816      	ldr	r0, [pc, #88]	; (800585c <displayProfileParams+0x8c>)
 8005802:	79fa      	ldrb	r2, [r7, #7]
 8005804:	4c13      	ldr	r4, [pc, #76]	; (8005854 <displayProfileParams+0x84>)
 8005806:	4613      	mov	r3, r2
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4423      	add	r3, r4
 8005810:	3368      	adds	r3, #104	; 0x68
 8005812:	681c      	ldr	r4, [r3, #0]
 8005814:	79fa      	ldrb	r2, [r7, #7]
 8005816:	4d0f      	ldr	r5, [pc, #60]	; (8005854 <displayProfileParams+0x84>)
 8005818:	4613      	mov	r3, r2
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	442b      	add	r3, r5
 8005822:	336c      	adds	r3, #108	; 0x6c
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a0e      	ldr	r2, [pc, #56]	; (8005860 <displayProfileParams+0x90>)
 8005828:	fba2 2303 	umull	r2, r3, r2, r3
 800582c:	099b      	lsrs	r3, r3, #6
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	4623      	mov	r3, r4
 8005832:	4602      	mov	r2, r0
 8005834:	480b      	ldr	r0, [pc, #44]	; (8005864 <displayProfileParams+0x94>)
 8005836:	f7ff f897 	bl	8004968 <printf_>
    for (uint8_t i = 0; i < NUM_PROFILE_PHASES; i++)
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	3301      	adds	r3, #1
 800583e:	71fb      	strb	r3, [r7, #7]
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	2b04      	cmp	r3, #4
 8005844:	d9ca      	bls.n	80057dc <displayProfileParams+0xc>
            reflow_names[i + 1], reflow_ao.reflow_phases[i].phase_type == REACHTEMP ? "REACHTEMP" : "REACHTIME",
            reflow_ao.reflow_phases[i].reach_temp,
            reflow_ao.reflow_phases[i].reach_time / 1000);
    }
}
 8005846:	bf00      	nop
 8005848:	bf00      	nop
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bdb0      	pop	{r4, r5, r7, pc}
 8005850:	20000110 	.word	0x20000110
 8005854:	2000006c 	.word	0x2000006c
 8005858:	0800f34c 	.word	0x0800f34c
 800585c:	0800f358 	.word	0x0800f358
 8005860:	10624dd3 	.word	0x10624dd3
 8005864:	0800f364 	.word	0x0800f364

08005868 <displayState>:

static inline void displayState()
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
	LOG("Current state: %s\r\n", reflow_names[reflow_ao.state]);
 800586c:	4b06      	ldr	r3, [pc, #24]	; (8005888 <displayState+0x20>)
 800586e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005872:	461a      	mov	r2, r3
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <displayState+0x24>)
 8005876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587a:	4619      	mov	r1, r3
 800587c:	4804      	ldr	r0, [pc, #16]	; (8005890 <displayState+0x28>)
 800587e:	f7ff f873 	bl	8004968 <printf_>
}
 8005882:	bf00      	nop
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	2000006c 	.word	0x2000006c
 800588c:	20000110 	.word	0x20000110
 8005890:	0800f3a8 	.word	0x0800f3a8

08005894 <readTemperature>:
 * @param[in/out] temp Temperature reading if return value is true, unmodified otherwise.
 *
 * @return true if successful read, false otherwise
 */
static inline bool readTemperature(float *const temp)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	MAX31855K_err_t err = MAX31855K_RxBlocking();
 800589c:	f7fb fb36 	bl	8000f0c <MAX31855K_RxBlocking>
 80058a0:	4603      	mov	r3, r0
 80058a2:	73fb      	strb	r3, [r7, #15]
	if(err)
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <readTemperature+0x1a>
	{
		return false;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e007      	b.n	80058be <readTemperature+0x2a>
	}
	else
	{
		*temp = MAX31855K_Get_HJ();
 80058ae:	f7fb fb63 	bl	8000f78 <MAX31855K_Get_HJ>
 80058b2:	eef0 7a40 	vmov.f32	s15, s0
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80058bc:	2301      	movs	r3, #1
	}
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ce:	4b11      	ldr	r3, [pc, #68]	; (8005914 <HAL_MspInit+0x4c>)
 80058d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d2:	4a10      	ldr	r2, [pc, #64]	; (8005914 <HAL_MspInit+0x4c>)
 80058d4:	f043 0301 	orr.w	r3, r3, #1
 80058d8:	6613      	str	r3, [r2, #96]	; 0x60
 80058da:	4b0e      	ldr	r3, [pc, #56]	; (8005914 <HAL_MspInit+0x4c>)
 80058dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058e6:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <HAL_MspInit+0x4c>)
 80058e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ea:	4a0a      	ldr	r2, [pc, #40]	; (8005914 <HAL_MspInit+0x4c>)
 80058ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f0:	6593      	str	r3, [r2, #88]	; 0x58
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <HAL_MspInit+0x4c>)
 80058f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80058fe:	2200      	movs	r2, #0
 8005900:	210f      	movs	r1, #15
 8005902:	f06f 0001 	mvn.w	r0, #1
 8005906:	f000 fde7 	bl	80064d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800590a:	bf00      	nop
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	40021000 	.word	0x40021000

08005918 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08a      	sub	sp, #40	; 0x28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005920:	f107 0314 	add.w	r3, r7, #20
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	605a      	str	r2, [r3, #4]
 800592a:	609a      	str	r2, [r3, #8]
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a25      	ldr	r2, [pc, #148]	; (80059cc <HAL_SPI_MspInit+0xb4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d144      	bne.n	80059c4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800593a:	4b25      	ldr	r3, [pc, #148]	; (80059d0 <HAL_SPI_MspInit+0xb8>)
 800593c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593e:	4a24      	ldr	r2, [pc, #144]	; (80059d0 <HAL_SPI_MspInit+0xb8>)
 8005940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005944:	6593      	str	r3, [r2, #88]	; 0x58
 8005946:	4b22      	ldr	r3, [pc, #136]	; (80059d0 <HAL_SPI_MspInit+0xb8>)
 8005948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005952:	4b1f      	ldr	r3, [pc, #124]	; (80059d0 <HAL_SPI_MspInit+0xb8>)
 8005954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005956:	4a1e      	ldr	r2, [pc, #120]	; (80059d0 <HAL_SPI_MspInit+0xb8>)
 8005958:	f043 0304 	orr.w	r3, r3, #4
 800595c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800595e:	4b1c      	ldr	r3, [pc, #112]	; (80059d0 <HAL_SPI_MspInit+0xb8>)
 8005960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800596a:	4b19      	ldr	r3, [pc, #100]	; (80059d0 <HAL_SPI_MspInit+0xb8>)
 800596c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800596e:	4a18      	ldr	r2, [pc, #96]	; (80059d0 <HAL_SPI_MspInit+0xb8>)
 8005970:	f043 0302 	orr.w	r3, r3, #2
 8005974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005976:	4b16      	ldr	r3, [pc, #88]	; (80059d0 <HAL_SPI_MspInit+0xb8>)
 8005978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	60bb      	str	r3, [r7, #8]
 8005980:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005982:	230c      	movs	r3, #12
 8005984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005986:	2302      	movs	r3, #2
 8005988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800598e:	2303      	movs	r3, #3
 8005990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005992:	2305      	movs	r3, #5
 8005994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005996:	f107 0314 	add.w	r3, r7, #20
 800599a:	4619      	mov	r1, r3
 800599c:	480d      	ldr	r0, [pc, #52]	; (80059d4 <HAL_SPI_MspInit+0xbc>)
 800599e:	f000 fdc5 	bl	800652c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80059a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059a8:	2302      	movs	r3, #2
 80059aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059b0:	2303      	movs	r3, #3
 80059b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80059b4:	2305      	movs	r3, #5
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059b8:	f107 0314 	add.w	r3, r7, #20
 80059bc:	4619      	mov	r1, r3
 80059be:	4806      	ldr	r0, [pc, #24]	; (80059d8 <HAL_SPI_MspInit+0xc0>)
 80059c0:	f000 fdb4 	bl	800652c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80059c4:	bf00      	nop
 80059c6:	3728      	adds	r7, #40	; 0x28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	40003800 	.word	0x40003800
 80059d0:	40021000 	.word	0x40021000
 80059d4:	48000800 	.word	0x48000800
 80059d8:	48000400 	.word	0x48000400

080059dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a0a      	ldr	r2, [pc, #40]	; (8005a14 <HAL_TIM_Base_MspInit+0x38>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d10b      	bne.n	8005a06 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059ee:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <HAL_TIM_Base_MspInit+0x3c>)
 80059f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f2:	4a09      	ldr	r2, [pc, #36]	; (8005a18 <HAL_TIM_Base_MspInit+0x3c>)
 80059f4:	f043 0302 	orr.w	r3, r3, #2
 80059f8:	6593      	str	r3, [r2, #88]	; 0x58
 80059fa:	4b07      	ldr	r3, [pc, #28]	; (8005a18 <HAL_TIM_Base_MspInit+0x3c>)
 80059fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005a06:	bf00      	nop
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40000400 	.word	0x40000400
 8005a18:	40021000 	.word	0x40021000

08005a1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a24:	f107 030c 	add.w	r3, r7, #12
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	605a      	str	r2, [r3, #4]
 8005a2e:	609a      	str	r2, [r3, #8]
 8005a30:	60da      	str	r2, [r3, #12]
 8005a32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a11      	ldr	r2, [pc, #68]	; (8005a80 <HAL_TIM_MspPostInit+0x64>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d11c      	bne.n	8005a78 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a3e:	4b11      	ldr	r3, [pc, #68]	; (8005a84 <HAL_TIM_MspPostInit+0x68>)
 8005a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a42:	4a10      	ldr	r2, [pc, #64]	; (8005a84 <HAL_TIM_MspPostInit+0x68>)
 8005a44:	f043 0301 	orr.w	r3, r3, #1
 8005a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a4a:	4b0e      	ldr	r3, [pc, #56]	; (8005a84 <HAL_TIM_MspPostInit+0x68>)
 8005a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	60bb      	str	r3, [r7, #8]
 8005a54:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005a56:	2340      	movs	r3, #64	; 0x40
 8005a58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005a66:	2302      	movs	r3, #2
 8005a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a6a:	f107 030c 	add.w	r3, r7, #12
 8005a6e:	4619      	mov	r1, r3
 8005a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a74:	f000 fd5a 	bl	800652c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005a78:	bf00      	nop
 8005a7a:	3720      	adds	r7, #32
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40021000 	.word	0x40021000

08005a88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08c      	sub	sp, #48	; 0x30
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8005a98:	2200      	movs	r2, #0
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	2037      	movs	r0, #55	; 0x37
 8005a9e:	f000 fd1b 	bl	80064d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005aa2:	2037      	movs	r0, #55	; 0x37
 8005aa4:	f000 fd34 	bl	8006510 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8005aa8:	4b1e      	ldr	r3, [pc, #120]	; (8005b24 <HAL_InitTick+0x9c>)
 8005aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aac:	4a1d      	ldr	r2, [pc, #116]	; (8005b24 <HAL_InitTick+0x9c>)
 8005aae:	f043 0320 	orr.w	r3, r3, #32
 8005ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ab4:	4b1b      	ldr	r3, [pc, #108]	; (8005b24 <HAL_InitTick+0x9c>)
 8005ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005ac0:	f107 0210 	add.w	r2, r7, #16
 8005ac4:	f107 0314 	add.w	r3, r7, #20
 8005ac8:	4611      	mov	r1, r2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f001 fcca 	bl	8007464 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005ad0:	f001 fcb2 	bl	8007438 <HAL_RCC_GetPCLK1Freq>
 8005ad4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	4a13      	ldr	r2, [pc, #76]	; (8005b28 <HAL_InitTick+0xa0>)
 8005ada:	fba2 2303 	umull	r2, r3, r2, r3
 8005ade:	0c9b      	lsrs	r3, r3, #18
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8005ae4:	4b11      	ldr	r3, [pc, #68]	; (8005b2c <HAL_InitTick+0xa4>)
 8005ae6:	4a12      	ldr	r2, [pc, #72]	; (8005b30 <HAL_InitTick+0xa8>)
 8005ae8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8005aea:	4b10      	ldr	r3, [pc, #64]	; (8005b2c <HAL_InitTick+0xa4>)
 8005aec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005af0:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8005af2:	4a0e      	ldr	r2, [pc, #56]	; (8005b2c <HAL_InitTick+0xa4>)
 8005af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af6:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8005af8:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <HAL_InitTick+0xa4>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005afe:	4b0b      	ldr	r3, [pc, #44]	; (8005b2c <HAL_InitTick+0xa4>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8005b04:	4809      	ldr	r0, [pc, #36]	; (8005b2c <HAL_InitTick+0xa4>)
 8005b06:	f002 ff99 	bl	8008a3c <HAL_TIM_Base_Init>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d104      	bne.n	8005b1a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8005b10:	4806      	ldr	r0, [pc, #24]	; (8005b2c <HAL_InitTick+0xa4>)
 8005b12:	f002 ffeb 	bl	8008aec <HAL_TIM_Base_Start_IT>
 8005b16:	4603      	mov	r3, r0
 8005b18:	e000      	b.n	8005b1c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3730      	adds	r7, #48	; 0x30
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40021000 	.word	0x40021000
 8005b28:	431bde83 	.word	0x431bde83
 8005b2c:	20005070 	.word	0x20005070
 8005b30:	40001400 	.word	0x40001400

08005b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b38:	e7fe      	b.n	8005b38 <NMI_Handler+0x4>

08005b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b3e:	e7fe      	b.n	8005b3e <HardFault_Handler+0x4>

08005b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b44:	e7fe      	b.n	8005b44 <MemManage_Handler+0x4>

08005b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b46:	b480      	push	{r7}
 8005b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b4a:	e7fe      	b.n	8005b4a <BusFault_Handler+0x4>

08005b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b50:	e7fe      	b.n	8005b50 <UsageFault_Handler+0x4>

08005b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b52:	b480      	push	{r7}
 8005b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b56:	bf00      	nop
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005b64:	4802      	ldr	r0, [pc, #8]	; (8005b70 <TIM7_IRQHandler+0x10>)
 8005b66:	f003 fa2f 	bl	8008fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005b6a:	bf00      	nop
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20005070 	.word	0x20005070

08005b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b7c:	4a14      	ldr	r2, [pc, #80]	; (8005bd0 <_sbrk+0x5c>)
 8005b7e:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <_sbrk+0x60>)
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b88:	4b13      	ldr	r3, [pc, #76]	; (8005bd8 <_sbrk+0x64>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d102      	bne.n	8005b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b90:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <_sbrk+0x64>)
 8005b92:	4a12      	ldr	r2, [pc, #72]	; (8005bdc <_sbrk+0x68>)
 8005b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b96:	4b10      	ldr	r3, [pc, #64]	; (8005bd8 <_sbrk+0x64>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d207      	bcs.n	8005bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ba4:	f008 fa22 	bl	800dfec <__errno>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	220c      	movs	r2, #12
 8005bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005bae:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb2:	e009      	b.n	8005bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005bb4:	4b08      	ldr	r3, [pc, #32]	; (8005bd8 <_sbrk+0x64>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005bba:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <_sbrk+0x64>)
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	4a05      	ldr	r2, [pc, #20]	; (8005bd8 <_sbrk+0x64>)
 8005bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3718      	adds	r7, #24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20018000 	.word	0x20018000
 8005bd4:	00000400 	.word	0x00000400
 8005bd8:	200003e8 	.word	0x200003e8
 8005bdc:	20005110 	.word	0x20005110

08005be0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005be4:	4b15      	ldr	r3, [pc, #84]	; (8005c3c <SystemInit+0x5c>)
 8005be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bea:	4a14      	ldr	r2, [pc, #80]	; (8005c3c <SystemInit+0x5c>)
 8005bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005bf4:	4b12      	ldr	r3, [pc, #72]	; (8005c40 <SystemInit+0x60>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a11      	ldr	r2, [pc, #68]	; (8005c40 <SystemInit+0x60>)
 8005bfa:	f043 0301 	orr.w	r3, r3, #1
 8005bfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005c00:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <SystemInit+0x60>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005c06:	4b0e      	ldr	r3, [pc, #56]	; (8005c40 <SystemInit+0x60>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a0d      	ldr	r2, [pc, #52]	; (8005c40 <SystemInit+0x60>)
 8005c0c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005c10:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005c14:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005c16:	4b0a      	ldr	r3, [pc, #40]	; (8005c40 <SystemInit+0x60>)
 8005c18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c1c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005c1e:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <SystemInit+0x60>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a07      	ldr	r2, [pc, #28]	; (8005c40 <SystemInit+0x60>)
 8005c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c28:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005c2a:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <SystemInit+0x60>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	619a      	str	r2, [r3, #24]
}
 8005c30:	bf00      	nop
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	e000ed00 	.word	0xe000ed00
 8005c40:	40021000 	.word	0x40021000

08005c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c48:	4b04      	ldr	r3, [pc, #16]	; (8005c5c <__NVIC_GetPriorityGrouping+0x18>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	0a1b      	lsrs	r3, r3, #8
 8005c4e:	f003 0307 	and.w	r3, r3, #7
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	e000ed00 	.word	0xe000ed00

08005c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	db0b      	blt.n	8005c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c72:	79fb      	ldrb	r3, [r7, #7]
 8005c74:	f003 021f 	and.w	r2, r3, #31
 8005c78:	4907      	ldr	r1, [pc, #28]	; (8005c98 <__NVIC_EnableIRQ+0x38>)
 8005c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	2001      	movs	r0, #1
 8005c82:	fa00 f202 	lsl.w	r2, r0, r2
 8005c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	e000e100 	.word	0xe000e100

08005c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	6039      	str	r1, [r7, #0]
 8005ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	db0a      	blt.n	8005cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	490c      	ldr	r1, [pc, #48]	; (8005ce8 <__NVIC_SetPriority+0x4c>)
 8005cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cba:	0112      	lsls	r2, r2, #4
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	440b      	add	r3, r1
 8005cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005cc4:	e00a      	b.n	8005cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	4908      	ldr	r1, [pc, #32]	; (8005cec <__NVIC_SetPriority+0x50>)
 8005ccc:	79fb      	ldrb	r3, [r7, #7]
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	3b04      	subs	r3, #4
 8005cd4:	0112      	lsls	r2, r2, #4
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	440b      	add	r3, r1
 8005cda:	761a      	strb	r2, [r3, #24]
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	e000e100 	.word	0xe000e100
 8005cec:	e000ed00 	.word	0xe000ed00

08005cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b089      	sub	sp, #36	; 0x24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f1c3 0307 	rsb	r3, r3, #7
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	bf28      	it	cs
 8005d0e:	2304      	movcs	r3, #4
 8005d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	3304      	adds	r3, #4
 8005d16:	2b06      	cmp	r3, #6
 8005d18:	d902      	bls.n	8005d20 <NVIC_EncodePriority+0x30>
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	3b03      	subs	r3, #3
 8005d1e:	e000      	b.n	8005d22 <NVIC_EncodePriority+0x32>
 8005d20:	2300      	movs	r3, #0
 8005d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d24:	f04f 32ff 	mov.w	r2, #4294967295
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2e:	43da      	mvns	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	401a      	ands	r2, r3
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d38:	f04f 31ff 	mov.w	r1, #4294967295
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d42:	43d9      	mvns	r1, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d48:	4313      	orrs	r3, r2
         );
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3724      	adds	r7, #36	; 0x24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <LL_USART_IsEnabled>:
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <LL_USART_IsEnabled+0x18>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e000      	b.n	8005d70 <LL_USART_IsEnabled+0x1a>
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <LL_USART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	621a      	str	r2, [r3, #32]
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2204      	movs	r2, #4
 8005dbc:	621a      	str	r2, [r3, #32]
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2208      	movs	r2, #8
 8005dd6:	621a      	str	r2, [r3, #32]
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f043 0220 	orr.w	r2, r3, #32
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	601a      	str	r2, [r3, #0]
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	601a      	str	r2, [r3, #0]
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	601a      	str	r2, [r3, #0]
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e54:	2b80      	cmp	r3, #128	; 0x80
 8005e56:	d101      	bne.n	8005e5c <LL_USART_IsEnabledIT_TXE+0x18>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e000      	b.n	8005e5e <LL_USART_IsEnabledIT_TXE+0x1a>
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
	...

08005e6c <uart_init>:
////////////////////////////////////////////////////////////////////////////////
// Public (global) functions
////////////////////////////////////////////////////////////////////////////////

mod_err_t uart_init(uart_config_t *uart_cfg)
{
 8005e6c:	b590      	push	{r4, r7, lr}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	6078      	str	r0, [r7, #4]
    if (uart_cfg->uart_reg_base == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <uart_init+0x14>
    {
        return MOD_ERR_ARG;
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e04c      	b.n	8005f1a <uart_init+0xae>
    }
    else if (!LL_USART_IsEnabled(uart_cfg->uart_reg_base))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff ff66 	bl	8005d56 <LL_USART_IsEnabled>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <uart_init+0x28>
    {
        return MOD_ERR_PERIPH;
 8005e90:	2308      	movs	r3, #8
 8005e92:	e042      	b.n	8005f1a <uart_init+0xae>
    }
    else
    {
        switch (uart_cfg->irq_num)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8005e9a:	2b27      	cmp	r3, #39	; 0x27
 8005e9c:	dc02      	bgt.n	8005ea4 <uart_init+0x38>
 8005e9e:	2b25      	cmp	r3, #37	; 0x25
 8005ea0:	da03      	bge.n	8005eaa <uart_init+0x3e>
 8005ea2:	e039      	b.n	8005f18 <uart_init+0xac>
 8005ea4:	3b34      	subs	r3, #52	; 0x34
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d836      	bhi.n	8005f18 <uart_init+0xac>
        case USART1_IRQn:
        case USART2_IRQn:
        case USART3_IRQn:
        case UART4_IRQn:
        case UART5_IRQn:
            memset(&uart, 0, sizeof(uart));
 8005eaa:	f240 420c 	movw	r2, #1036	; 0x40c
 8005eae:	2100      	movs	r1, #0
 8005eb0:	481c      	ldr	r0, [pc, #112]	; (8005f24 <uart_init+0xb8>)
 8005eb2:	f008 f8e3 	bl	800e07c <memset>
            uart.irq_num = uart_cfg->irq_num;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8005ebc:	4b19      	ldr	r3, [pc, #100]	; (8005f24 <uart_init+0xb8>)
 8005ebe:	711a      	strb	r2, [r3, #4]
            uart.uart_reg_base = uart_cfg->uart_reg_base;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <uart_init+0xb8>)
 8005ec6:	6013      	str	r3, [r2, #0]
            mod_err_t err = cmd_register(&uart_client_info);
 8005ec8:	4817      	ldr	r0, [pc, #92]	; (8005f28 <uart_init+0xbc>)
 8005eca:	f7fb fc39 	bl	8001740 <cmd_register>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	73fb      	strb	r3, [r7, #15]
            LOGI(TAG, "Initialized UART");
 8005ed2:	4b16      	ldr	r3, [pc, #88]	; (8005f2c <uart_init+0xc0>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d01c      	beq.n	8005f14 <uart_init+0xa8>
 8005eda:	f000 fa39 	bl	8006350 <HAL_GetTick>
 8005ede:	60b8      	str	r0, [r7, #8]
 8005ee0:	4b13      	ldr	r3, [pc, #76]	; (8005f30 <uart_init+0xc4>)
 8005ee2:	6818      	ldr	r0, [r3, #0]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4a13      	ldr	r2, [pc, #76]	; (8005f34 <uart_init+0xc8>)
 8005ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eec:	0999      	lsrs	r1, r3, #6
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <uart_init+0xc8>)
 8005ef2:	fba3 4302 	umull	r4, r3, r3, r2
 8005ef6:	099b      	lsrs	r3, r3, #6
 8005ef8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005efc:	fb04 f303 	mul.w	r3, r4, r3
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	4a0b      	ldr	r2, [pc, #44]	; (8005f30 <uart_init+0xc4>)
 8005f04:	6812      	ldr	r2, [r2, #0]
 8005f06:	9201      	str	r2, [sp, #4]
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4a0a      	ldr	r2, [pc, #40]	; (8005f38 <uart_init+0xcc>)
 8005f0e:	2103      	movs	r1, #3
 8005f10:	f7fc f9b6 	bl	8002280 <log_printf>
            return err;
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
 8005f16:	e000      	b.n	8005f1a <uart_init+0xae>
        default:
            return MOD_ERR_ARG;
 8005f18:	2302      	movs	r3, #2
        }
    }
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd90      	pop	{r4, r7, pc}
 8005f22:	bf00      	nop
 8005f24:	200003ec 	.word	0x200003ec
 8005f28:	2000015c 	.word	0x2000015c
 8005f2c:	20000064 	.word	0x20000064
 8005f30:	20000174 	.word	0x20000174
 8005f34:	10624dd3 	.word	0x10624dd3
 8005f38:	0800f3fc 	.word	0x0800f3fc

08005f3c <uart_start>:

mod_err_t uart_start(void)
{
 8005f3c:	b590      	push	{r4, r7, lr}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af02      	add	r7, sp, #8
    if (uart.uart_reg_base == NULL)
 8005f42:	4b28      	ldr	r3, [pc, #160]	; (8005fe4 <uart_start+0xa8>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d126      	bne.n	8005f98 <uart_start+0x5c>
    {
        LOGE(TAG, "UART not initialized");
 8005f4a:	4b27      	ldr	r3, [pc, #156]	; (8005fe8 <uart_start+0xac>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d020      	beq.n	8005f94 <uart_start+0x58>
 8005f52:	4b26      	ldr	r3, [pc, #152]	; (8005fec <uart_start+0xb0>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	dd1c      	ble.n	8005f94 <uart_start+0x58>
 8005f5a:	f000 f9f9 	bl	8006350 <HAL_GetTick>
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	4b23      	ldr	r3, [pc, #140]	; (8005ff0 <uart_start+0xb4>)
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a23      	ldr	r2, [pc, #140]	; (8005ff4 <uart_start+0xb8>)
 8005f68:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6c:	0999      	lsrs	r1, r3, #6
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	4b20      	ldr	r3, [pc, #128]	; (8005ff4 <uart_start+0xb8>)
 8005f72:	fba3 4302 	umull	r4, r3, r3, r2
 8005f76:	099b      	lsrs	r3, r3, #6
 8005f78:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005f7c:	fb04 f303 	mul.w	r3, r4, r3
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	4a1b      	ldr	r2, [pc, #108]	; (8005ff0 <uart_start+0xb4>)
 8005f84:	6812      	ldr	r2, [r2, #0]
 8005f86:	9201      	str	r2, [sp, #4]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4a1a      	ldr	r2, [pc, #104]	; (8005ff8 <uart_start+0xbc>)
 8005f8e:	2101      	movs	r1, #1
 8005f90:	f7fc f976 	bl	8002280 <log_printf>
        return MOD_ERR_NOT_INIT;
 8005f94:	2306      	movs	r3, #6
 8005f96:	e020      	b.n	8005fda <uart_start+0x9e>
    }

    LL_USART_EnableIT_TXE(uart.uart_reg_base);  // Generate interrupt whenever TXE flag is set.
 8005f98:	4b12      	ldr	r3, [pc, #72]	; (8005fe4 <uart_start+0xa8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff ff31 	bl	8005e04 <LL_USART_EnableIT_TXE>
    LL_USART_EnableIT_RXNE(uart.uart_reg_base); // Generate interrupt whenever RXNE flag is set.
 8005fa2:	4b10      	ldr	r3, [pc, #64]	; (8005fe4 <uart_start+0xa8>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff ff1c 	bl	8005de4 <LL_USART_EnableIT_RXNE>

    /* Interrupt priority must be set greater than or
     * equal to configMAX_SYSCALL_INTERRUPT_PRIORITY
     * in order for ISR to use FreeRTOS API.
     * See https://www.freertos.org/RTOS-Cortex-M3-M4.html */
    __NVIC_SetPriority(uart.irq_num, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
 8005fac:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <uart_start+0xa8>)
 8005fae:	f993 4004 	ldrsb.w	r4, [r3, #4]
 8005fb2:	f7ff fe47 	bl	8005c44 <__NVIC_GetPriorityGrouping>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2105      	movs	r1, #5
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff fe97 	bl	8005cf0 <NVIC_EncodePriority>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f7ff fe68 	bl	8005c9c <__NVIC_SetPriority>

    __NVIC_EnableIRQ(uart.irq_num);
 8005fcc:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <uart_start+0xa8>)
 8005fce:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff fe44 	bl	8005c60 <__NVIC_EnableIRQ>

    return MOD_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd90      	pop	{r4, r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	200003ec 	.word	0x200003ec
 8005fe8:	20000064 	.word	0x20000064
 8005fec:	20000068 	.word	0x20000068
 8005ff0:	20000174 	.word	0x20000174
 8005ff4:	10624dd3 	.word	0x10624dd3
 8005ff8:	0800f42c 	.word	0x0800f42c

08005ffc <uart_putc>:

mod_err_t uart_putc(char c)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	4603      	mov	r3, r0
 8006004:	71fb      	strb	r3, [r7, #7]

    uint16_t next_put_idx = (uart.tx_buf_put_idx + 1) % UART_TX_BUF_SIZE;
 8006006:	4b23      	ldr	r3, [pc, #140]	; (8006094 <uart_putc+0x98>)
 8006008:	891b      	ldrh	r3, [r3, #8]
 800600a:	3301      	adds	r3, #1
 800600c:	425a      	negs	r2, r3
 800600e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006012:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006016:	bf58      	it	pl
 8006018:	4253      	negpl	r3, r2
 800601a:	81fb      	strh	r3, [r7, #14]

    /* Tx circular buffer is full. */
    if (next_put_idx == uart.tx_buf_get_idx)
 800601c:	4b1d      	ldr	r3, [pc, #116]	; (8006094 <uart_putc+0x98>)
 800601e:	88db      	ldrh	r3, [r3, #6]
 8006020:	89fa      	ldrh	r2, [r7, #14]
 8006022:	429a      	cmp	r2, r3
 8006024:	d111      	bne.n	800604a <uart_putc+0x4e>
    {
        INC_SAT_U16(uart_pms[CNT_TX_BUF_OVERRUN]);
 8006026:	4b1c      	ldr	r3, [pc, #112]	; (8006098 <uart_putc+0x9c>)
 8006028:	891a      	ldrh	r2, [r3, #8]
 800602a:	4b1b      	ldr	r3, [pc, #108]	; (8006098 <uart_putc+0x9c>)
 800602c:	891b      	ldrh	r3, [r3, #8]
 800602e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006032:	428b      	cmp	r3, r1
 8006034:	bf14      	ite	ne
 8006036:	2301      	movne	r3, #1
 8006038:	2300      	moveq	r3, #0
 800603a:	b2db      	uxtb	r3, r3
 800603c:	b29b      	uxth	r3, r3
 800603e:	4413      	add	r3, r2
 8006040:	b29a      	uxth	r2, r3
 8006042:	4b15      	ldr	r3, [pc, #84]	; (8006098 <uart_putc+0x9c>)
 8006044:	811a      	strh	r2, [r3, #8]
        return MOD_ERR_BUF_OVERRUN;
 8006046:	2305      	movs	r3, #5
 8006048:	e01f      	b.n	800608a <uart_putc+0x8e>
    }

    /* Place char in buffer */
    uart.tx_buf[uart.tx_buf_put_idx] = c;
 800604a:	4b12      	ldr	r3, [pc, #72]	; (8006094 <uart_putc+0x98>)
 800604c:	891b      	ldrh	r3, [r3, #8]
 800604e:	461a      	mov	r2, r3
 8006050:	4b10      	ldr	r3, [pc, #64]	; (8006094 <uart_putc+0x98>)
 8006052:	4413      	add	r3, r2
 8006054:	79fa      	ldrb	r2, [r7, #7]
 8006056:	729a      	strb	r2, [r3, #10]
    uart.tx_buf_put_idx = next_put_idx;
 8006058:	4a0e      	ldr	r2, [pc, #56]	; (8006094 <uart_putc+0x98>)
 800605a:	89fb      	ldrh	r3, [r7, #14]
 800605c:	8113      	strh	r3, [r2, #8]

    // Ensure TXE interrupt is enabled.
    if (uart.uart_reg_base != NULL && !LL_USART_IsEnabledIT_TXE(uart.uart_reg_base))
 800605e:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <uart_putc+0x98>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d010      	beq.n	8006088 <uart_putc+0x8c>
 8006066:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <uart_putc+0x98>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff feea 	bl	8005e44 <LL_USART_IsEnabledIT_TXE>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d108      	bne.n	8006088 <uart_putc+0x8c>
  __ASM volatile ("cpsid i" : : : "memory");
 8006076:	b672      	cpsid	i
}
 8006078:	bf00      	nop
    {
        __disable_irq();
        LL_USART_EnableIT_TXE(uart.uart_reg_base);
 800607a:	4b06      	ldr	r3, [pc, #24]	; (8006094 <uart_putc+0x98>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4618      	mov	r0, r3
 8006080:	f7ff fec0 	bl	8005e04 <LL_USART_EnableIT_TXE>
  __ASM volatile ("cpsie i" : : : "memory");
 8006084:	b662      	cpsie	i
}
 8006086:	bf00      	nop
        __enable_irq();
    }

    return MOD_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	200003ec 	.word	0x200003ec
 8006098:	200007f8 	.word	0x200007f8

0800609c <USART1_IRQHandler>:
////////////////////////////////////////////////////////////////////////////////
// Interrupt handlers
////////////////////////////////////////////////////////////////////////////////

void USART1_IRQHandler(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
    UART_ISR();
 80060a0:	f000 f81a 	bl	80060d8 <UART_ISR>
}
 80060a4:	bf00      	nop
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
    UART_ISR();
 80060ac:	f000 f814 	bl	80060d8 <UART_ISR>
}
 80060b0:	bf00      	nop
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
    UART_ISR();
 80060b8:	f000 f80e 	bl	80060d8 <UART_ISR>
}
 80060bc:	bf00      	nop
 80060be:	bd80      	pop	{r7, pc}

080060c0 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
    UART_ISR();
 80060c4:	f000 f808 	bl	80060d8 <UART_ISR>
}
 80060c8:	bf00      	nop
 80060ca:	bd80      	pop	{r7, pc}

080060cc <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
    UART_ISR();
 80060d0:	f000 f802 	bl	80060d8 <UART_ISR>
}
 80060d4:	bf00      	nop
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <UART_ISR>:
////////////////////////////////////////////////////////////////////////////////
// Private (static) function definitions
////////////////////////////////////////////////////////////////////////////////

static void UART_ISR(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
    /* Read interrupt status register. */
    uint32_t status_reg = uart.uart_reg_base->ISR;
 80060de:	4b41      	ldr	r3, [pc, #260]	; (80061e4 <UART_ISR+0x10c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	607b      	str	r3, [r7, #4]

    /* Service interrupt flags. */
    if (status_reg & USART_ISR_RXNE_Msk)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <UART_ISR+0x1c>
    {
        read_rdr();
 80060f0:	f000 f87c 	bl	80061ec <read_rdr>
    }
    if (status_reg & USART_ISR_TXE_Msk)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <UART_ISR+0x2a>
    {
        write_tdr();
 80060fe:	f000 f89f 	bl	8006240 <write_tdr>
    }

    /* Check error flags. */
    if (status_reg & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE | USART_ISR_PE))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f003 030f 	and.w	r3, r3, #15
 8006108:	2b00      	cmp	r3, #0
 800610a:	d067      	beq.n	80061dc <UART_ISR+0x104>
    {
        if (status_reg & LL_USART_ISR_ORE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f003 0308 	and.w	r3, r3, #8
 8006112:	2b00      	cmp	r3, #0
 8006114:	d014      	beq.n	8006140 <UART_ISR+0x68>
        {   // An overrun error occurs if a character is received and RXNE has not been reset.
            // The RDR register content is not lost but the shift register is overwritten by incoming data.
            INC_SAT_U16(uart_pms[CNT_RX_UART_ORE]);
 8006116:	4b34      	ldr	r3, [pc, #208]	; (80061e8 <UART_ISR+0x110>)
 8006118:	881a      	ldrh	r2, [r3, #0]
 800611a:	4b33      	ldr	r3, [pc, #204]	; (80061e8 <UART_ISR+0x110>)
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006122:	428b      	cmp	r3, r1
 8006124:	bf14      	ite	ne
 8006126:	2301      	movne	r3, #1
 8006128:	2300      	moveq	r3, #0
 800612a:	b2db      	uxtb	r3, r3
 800612c:	b29b      	uxth	r3, r3
 800612e:	4413      	add	r3, r2
 8006130:	b29a      	uxth	r2, r3
 8006132:	4b2d      	ldr	r3, [pc, #180]	; (80061e8 <UART_ISR+0x110>)
 8006134:	801a      	strh	r2, [r3, #0]
            LL_USART_ClearFlag_ORE(uart.uart_reg_base);
 8006136:	4b2b      	ldr	r3, [pc, #172]	; (80061e4 <UART_ISR+0x10c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff fe45 	bl	8005dca <LL_USART_ClearFlag_ORE>
        }
        if (status_reg & LL_USART_ISR_NE)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	d014      	beq.n	8006174 <UART_ISR+0x9c>
        {
            INC_SAT_U16(uart_pms[CNT_RX_UART_NE]);
 800614a:	4b27      	ldr	r3, [pc, #156]	; (80061e8 <UART_ISR+0x110>)
 800614c:	885a      	ldrh	r2, [r3, #2]
 800614e:	4b26      	ldr	r3, [pc, #152]	; (80061e8 <UART_ISR+0x110>)
 8006150:	885b      	ldrh	r3, [r3, #2]
 8006152:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006156:	428b      	cmp	r3, r1
 8006158:	bf14      	ite	ne
 800615a:	2301      	movne	r3, #1
 800615c:	2300      	moveq	r3, #0
 800615e:	b2db      	uxtb	r3, r3
 8006160:	b29b      	uxth	r3, r3
 8006162:	4413      	add	r3, r2
 8006164:	b29a      	uxth	r2, r3
 8006166:	4b20      	ldr	r3, [pc, #128]	; (80061e8 <UART_ISR+0x110>)
 8006168:	805a      	strh	r2, [r3, #2]
            LL_USART_ClearFlag_NE(uart.uart_reg_base);
 800616a:	4b1e      	ldr	r3, [pc, #120]	; (80061e4 <UART_ISR+0x10c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff fe1e 	bl	8005db0 <LL_USART_ClearFlag_NE>
        }
        if (status_reg & LL_USART_ISR_FE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d014      	beq.n	80061a8 <UART_ISR+0xd0>
        {
            INC_SAT_U16(uart_pms[CNT_RX_UART_FE]);
 800617e:	4b1a      	ldr	r3, [pc, #104]	; (80061e8 <UART_ISR+0x110>)
 8006180:	889a      	ldrh	r2, [r3, #4]
 8006182:	4b19      	ldr	r3, [pc, #100]	; (80061e8 <UART_ISR+0x110>)
 8006184:	889b      	ldrh	r3, [r3, #4]
 8006186:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800618a:	428b      	cmp	r3, r1
 800618c:	bf14      	ite	ne
 800618e:	2301      	movne	r3, #1
 8006190:	2300      	moveq	r3, #0
 8006192:	b2db      	uxtb	r3, r3
 8006194:	b29b      	uxth	r3, r3
 8006196:	4413      	add	r3, r2
 8006198:	b29a      	uxth	r2, r3
 800619a:	4b13      	ldr	r3, [pc, #76]	; (80061e8 <UART_ISR+0x110>)
 800619c:	809a      	strh	r2, [r3, #4]
            LL_USART_ClearFlag_FE(uart.uart_reg_base);
 800619e:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <UART_ISR+0x10c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff fdf7 	bl	8005d96 <LL_USART_ClearFlag_FE>
        }
        if (status_reg & LL_USART_ISR_PE)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d014      	beq.n	80061dc <UART_ISR+0x104>
        {
            INC_SAT_U16(uart_pms[CNT_RX_UART_PE]);
 80061b2:	4b0d      	ldr	r3, [pc, #52]	; (80061e8 <UART_ISR+0x110>)
 80061b4:	88da      	ldrh	r2, [r3, #6]
 80061b6:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <UART_ISR+0x110>)
 80061b8:	88db      	ldrh	r3, [r3, #6]
 80061ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80061be:	428b      	cmp	r3, r1
 80061c0:	bf14      	ite	ne
 80061c2:	2301      	movne	r3, #1
 80061c4:	2300      	moveq	r3, #0
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	4413      	add	r3, r2
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	4b06      	ldr	r3, [pc, #24]	; (80061e8 <UART_ISR+0x110>)
 80061d0:	80da      	strh	r2, [r3, #6]
            LL_USART_ClearFlag_PE(uart.uart_reg_base);
 80061d2:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <UART_ISR+0x10c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff fdd0 	bl	8005d7c <LL_USART_ClearFlag_PE>
        }
    }
}
 80061dc:	bf00      	nop
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	200003ec 	.word	0x200003ec
 80061e8:	200007f8 	.word	0x200007f8

080061ec <read_rdr>:

/**
 * @brief Read character from receive data register (RDR) and send to console message queue.
 */
static inline void read_rdr(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
    char rx_char = uart.uart_reg_base->RDR & 0xFFU; // Clears RXNE flag.
 80061f2:	4b11      	ldr	r3, [pc, #68]	; (8006238 <read_rdr+0x4c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	71fb      	strb	r3, [r7, #7]
    mod_err_t err = console_post(rx_char);
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fb fed0 	bl	8001fa4 <console_post>
 8006204:	4603      	mov	r3, r0
 8006206:	71bb      	strb	r3, [r7, #6]
    if (err == MOD_ERR_TIMEOUT)
 8006208:	79bb      	ldrb	r3, [r7, #6]
 800620a:	2b09      	cmp	r3, #9
 800620c:	d10f      	bne.n	800622e <read_rdr+0x42>
    {
        INC_SAT_U16(uart_pms[CNT_RX_BUF_OVERRUN]);
 800620e:	4b0b      	ldr	r3, [pc, #44]	; (800623c <read_rdr+0x50>)
 8006210:	895a      	ldrh	r2, [r3, #10]
 8006212:	4b0a      	ldr	r3, [pc, #40]	; (800623c <read_rdr+0x50>)
 8006214:	895b      	ldrh	r3, [r3, #10]
 8006216:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800621a:	428b      	cmp	r3, r1
 800621c:	bf14      	ite	ne
 800621e:	2301      	movne	r3, #1
 8006220:	2300      	moveq	r3, #0
 8006222:	b2db      	uxtb	r3, r3
 8006224:	b29b      	uxth	r3, r3
 8006226:	4413      	add	r3, r2
 8006228:	b29a      	uxth	r2, r3
 800622a:	4b04      	ldr	r3, [pc, #16]	; (800623c <read_rdr+0x50>)
 800622c:	815a      	strh	r2, [r3, #10]
    }
}
 800622e:	bf00      	nop
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	200003ec 	.word	0x200003ec
 800623c:	200007f8 	.word	0x200007f8

08006240 <write_tdr>:

/**
 * @brief Write character from transmit buffer to transmit data register (TDR).
 */
static inline void write_tdr(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
    if (uart.tx_buf_get_idx == uart.tx_buf_put_idx)
 8006244:	4b12      	ldr	r3, [pc, #72]	; (8006290 <write_tdr+0x50>)
 8006246:	88da      	ldrh	r2, [r3, #6]
 8006248:	4b11      	ldr	r3, [pc, #68]	; (8006290 <write_tdr+0x50>)
 800624a:	891b      	ldrh	r3, [r3, #8]
 800624c:	429a      	cmp	r2, r3
 800624e:	d105      	bne.n	800625c <write_tdr+0x1c>
    {
        /* Nothing to transmit, disable TXE flag from generating an interrupt. */
        LL_USART_DisableIT_TXE(uart.uart_reg_base);
 8006250:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <write_tdr+0x50>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff fde5 	bl	8005e24 <LL_USART_DisableIT_TXE>
    else
    {
        uart.uart_reg_base->TDR = uart.tx_buf[uart.tx_buf_get_idx]; // Clears TXE flag.
        uart.tx_buf_get_idx = (uart.tx_buf_get_idx + 1) % UART_TX_BUF_SIZE;
    }
}
 800625a:	e016      	b.n	800628a <write_tdr+0x4a>
        uart.uart_reg_base->TDR = uart.tx_buf[uart.tx_buf_get_idx]; // Clears TXE flag.
 800625c:	4b0c      	ldr	r3, [pc, #48]	; (8006290 <write_tdr+0x50>)
 800625e:	88db      	ldrh	r3, [r3, #6]
 8006260:	461a      	mov	r2, r3
 8006262:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <write_tdr+0x50>)
 8006264:	4413      	add	r3, r2
 8006266:	7a9a      	ldrb	r2, [r3, #10]
 8006268:	4b09      	ldr	r3, [pc, #36]	; (8006290 <write_tdr+0x50>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	b292      	uxth	r2, r2
 800626e:	851a      	strh	r2, [r3, #40]	; 0x28
        uart.tx_buf_get_idx = (uart.tx_buf_get_idx + 1) % UART_TX_BUF_SIZE;
 8006270:	4b07      	ldr	r3, [pc, #28]	; (8006290 <write_tdr+0x50>)
 8006272:	88db      	ldrh	r3, [r3, #6]
 8006274:	3301      	adds	r3, #1
 8006276:	425a      	negs	r2, r3
 8006278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800627c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006280:	bf58      	it	pl
 8006282:	4253      	negpl	r3, r2
 8006284:	b29a      	uxth	r2, r3
 8006286:	4b02      	ldr	r3, [pc, #8]	; (8006290 <write_tdr+0x50>)
 8006288:	80da      	strh	r2, [r3, #6]
}
 800628a:	bf00      	nop
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	200003ec 	.word	0x200003ec

08006294 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 8006294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80062cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006298:	f7ff fca2 	bl	8005be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800629c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800629e:	e003      	b.n	80062a8 <LoopCopyDataInit>

080062a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80062a0:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80062a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80062a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80062a6:	3104      	adds	r1, #4

080062a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80062a8:	480a      	ldr	r0, [pc, #40]	; (80062d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80062aa:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80062ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80062ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80062b0:	d3f6      	bcc.n	80062a0 <CopyDataInit>
	ldr	r2, =_sbss
 80062b2:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80062b4:	e002      	b.n	80062bc <LoopFillZerobss>

080062b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80062b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80062b8:	f842 3b04 	str.w	r3, [r2], #4

080062bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80062bc:	4b08      	ldr	r3, [pc, #32]	; (80062e0 <LoopForever+0x16>)
	cmp	r2, r3
 80062be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80062c0:	d3f9      	bcc.n	80062b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80062c2:	f007 fe99 	bl	800dff8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80062c6:	f7fc fb9b 	bl	8002a00 <main>

080062ca <LoopForever>:

LoopForever:
    b LoopForever
 80062ca:	e7fe      	b.n	80062ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80062cc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80062d0:	0800f788 	.word	0x0800f788
	ldr	r0, =_sdata
 80062d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80062d8:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 80062dc:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 80062e0:	20005110 	.word	0x20005110

080062e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80062e4:	e7fe      	b.n	80062e4 <ADC1_2_IRQHandler>
	...

080062e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80062f2:	4b0c      	ldr	r3, [pc, #48]	; (8006324 <HAL_Init+0x3c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a0b      	ldr	r2, [pc, #44]	; (8006324 <HAL_Init+0x3c>)
 80062f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062fe:	2003      	movs	r0, #3
 8006300:	f000 f8df 	bl	80064c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006304:	2000      	movs	r0, #0
 8006306:	f7ff fbbf 	bl	8005a88 <HAL_InitTick>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	71fb      	strb	r3, [r7, #7]
 8006314:	e001      	b.n	800631a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006316:	f7ff fad7 	bl	80058c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800631a:	79fb      	ldrb	r3, [r7, #7]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40022000 	.word	0x40022000

08006328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <HAL_IncTick+0x20>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	461a      	mov	r2, r3
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <HAL_IncTick+0x24>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4413      	add	r3, r2
 8006338:	4a04      	ldr	r2, [pc, #16]	; (800634c <HAL_IncTick+0x24>)
 800633a:	6013      	str	r3, [r2, #0]
}
 800633c:	bf00      	nop
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	2000017c 	.word	0x2000017c
 800634c:	200050bc 	.word	0x200050bc

08006350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  return uwTick;
 8006354:	4b03      	ldr	r3, [pc, #12]	; (8006364 <HAL_GetTick+0x14>)
 8006356:	681b      	ldr	r3, [r3, #0]
}
 8006358:	4618      	mov	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	200050bc 	.word	0x200050bc

08006368 <__NVIC_SetPriorityGrouping>:
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006378:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <__NVIC_SetPriorityGrouping+0x44>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006384:	4013      	ands	r3, r2
 8006386:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800639a:	4a04      	ldr	r2, [pc, #16]	; (80063ac <__NVIC_SetPriorityGrouping+0x44>)
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	60d3      	str	r3, [r2, #12]
}
 80063a0:	bf00      	nop
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	e000ed00 	.word	0xe000ed00

080063b0 <__NVIC_GetPriorityGrouping>:
{
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063b4:	4b04      	ldr	r3, [pc, #16]	; (80063c8 <__NVIC_GetPriorityGrouping+0x18>)
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	0a1b      	lsrs	r3, r3, #8
 80063ba:	f003 0307 	and.w	r3, r3, #7
}
 80063be:	4618      	mov	r0, r3
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	e000ed00 	.word	0xe000ed00

080063cc <__NVIC_EnableIRQ>:
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	4603      	mov	r3, r0
 80063d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	db0b      	blt.n	80063f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063de:	79fb      	ldrb	r3, [r7, #7]
 80063e0:	f003 021f 	and.w	r2, r3, #31
 80063e4:	4907      	ldr	r1, [pc, #28]	; (8006404 <__NVIC_EnableIRQ+0x38>)
 80063e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ea:	095b      	lsrs	r3, r3, #5
 80063ec:	2001      	movs	r0, #1
 80063ee:	fa00 f202 	lsl.w	r2, r0, r2
 80063f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	e000e100 	.word	0xe000e100

08006408 <__NVIC_SetPriority>:
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	4603      	mov	r3, r0
 8006410:	6039      	str	r1, [r7, #0]
 8006412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006418:	2b00      	cmp	r3, #0
 800641a:	db0a      	blt.n	8006432 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	b2da      	uxtb	r2, r3
 8006420:	490c      	ldr	r1, [pc, #48]	; (8006454 <__NVIC_SetPriority+0x4c>)
 8006422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006426:	0112      	lsls	r2, r2, #4
 8006428:	b2d2      	uxtb	r2, r2
 800642a:	440b      	add	r3, r1
 800642c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006430:	e00a      	b.n	8006448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	b2da      	uxtb	r2, r3
 8006436:	4908      	ldr	r1, [pc, #32]	; (8006458 <__NVIC_SetPriority+0x50>)
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	f003 030f 	and.w	r3, r3, #15
 800643e:	3b04      	subs	r3, #4
 8006440:	0112      	lsls	r2, r2, #4
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	440b      	add	r3, r1
 8006446:	761a      	strb	r2, [r3, #24]
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	e000e100 	.word	0xe000e100
 8006458:	e000ed00 	.word	0xe000ed00

0800645c <NVIC_EncodePriority>:
{
 800645c:	b480      	push	{r7}
 800645e:	b089      	sub	sp, #36	; 0x24
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	f1c3 0307 	rsb	r3, r3, #7
 8006476:	2b04      	cmp	r3, #4
 8006478:	bf28      	it	cs
 800647a:	2304      	movcs	r3, #4
 800647c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	3304      	adds	r3, #4
 8006482:	2b06      	cmp	r3, #6
 8006484:	d902      	bls.n	800648c <NVIC_EncodePriority+0x30>
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	3b03      	subs	r3, #3
 800648a:	e000      	b.n	800648e <NVIC_EncodePriority+0x32>
 800648c:	2300      	movs	r3, #0
 800648e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006490:	f04f 32ff 	mov.w	r2, #4294967295
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	43da      	mvns	r2, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	401a      	ands	r2, r3
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064a4:	f04f 31ff 	mov.w	r1, #4294967295
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	fa01 f303 	lsl.w	r3, r1, r3
 80064ae:	43d9      	mvns	r1, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064b4:	4313      	orrs	r3, r2
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3724      	adds	r7, #36	; 0x24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7ff ff4c 	bl	8006368 <__NVIC_SetPriorityGrouping>
}
 80064d0:	bf00      	nop
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	4603      	mov	r3, r0
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80064e6:	2300      	movs	r3, #0
 80064e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80064ea:	f7ff ff61 	bl	80063b0 <__NVIC_GetPriorityGrouping>
 80064ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	68b9      	ldr	r1, [r7, #8]
 80064f4:	6978      	ldr	r0, [r7, #20]
 80064f6:	f7ff ffb1 	bl	800645c <NVIC_EncodePriority>
 80064fa:	4602      	mov	r2, r0
 80064fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006500:	4611      	mov	r1, r2
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff ff80 	bl	8006408 <__NVIC_SetPriority>
}
 8006508:	bf00      	nop
 800650a:	3718      	adds	r7, #24
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800651a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff ff54 	bl	80063cc <__NVIC_EnableIRQ>
}
 8006524:	bf00      	nop
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006536:	2300      	movs	r3, #0
 8006538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800653a:	e17f      	b.n	800683c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	2101      	movs	r1, #1
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	fa01 f303 	lsl.w	r3, r1, r3
 8006548:	4013      	ands	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 8171 	beq.w	8006836 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d00b      	beq.n	8006574 <HAL_GPIO_Init+0x48>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b02      	cmp	r3, #2
 8006562:	d007      	beq.n	8006574 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006568:	2b11      	cmp	r3, #17
 800656a:	d003      	beq.n	8006574 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2b12      	cmp	r3, #18
 8006572:	d130      	bne.n	80065d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	2203      	movs	r2, #3
 8006580:	fa02 f303 	lsl.w	r3, r2, r3
 8006584:	43db      	mvns	r3, r3
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4013      	ands	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	fa02 f303 	lsl.w	r3, r2, r3
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80065aa:	2201      	movs	r2, #1
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	fa02 f303 	lsl.w	r3, r2, r3
 80065b2:	43db      	mvns	r3, r3
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4013      	ands	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	091b      	lsrs	r3, r3, #4
 80065c0:	f003 0201 	and.w	r2, r3, #1
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d118      	bne.n	8006614 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80065e8:	2201      	movs	r2, #1
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	fa02 f303 	lsl.w	r3, r2, r3
 80065f0:	43db      	mvns	r3, r3
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4013      	ands	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	08db      	lsrs	r3, r3, #3
 80065fe:	f003 0201 	and.w	r2, r3, #1
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	fa02 f303 	lsl.w	r3, r2, r3
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	005b      	lsls	r3, r3, #1
 800661e:	2203      	movs	r2, #3
 8006620:	fa02 f303 	lsl.w	r3, r2, r3
 8006624:	43db      	mvns	r3, r3
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	4013      	ands	r3, r2
 800662a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	fa02 f303 	lsl.w	r3, r2, r3
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b02      	cmp	r3, #2
 800664a:	d003      	beq.n	8006654 <HAL_GPIO_Init+0x128>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	2b12      	cmp	r3, #18
 8006652:	d123      	bne.n	800669c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	08da      	lsrs	r2, r3, #3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3208      	adds	r2, #8
 800665c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006660:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	220f      	movs	r2, #15
 800666c:	fa02 f303 	lsl.w	r3, r2, r3
 8006670:	43db      	mvns	r3, r3
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	4013      	ands	r3, r2
 8006676:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	691a      	ldr	r2, [r3, #16]
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	08da      	lsrs	r2, r3, #3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3208      	adds	r2, #8
 8006696:	6939      	ldr	r1, [r7, #16]
 8006698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	2203      	movs	r2, #3
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	43db      	mvns	r3, r3
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	4013      	ands	r3, r2
 80066b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f003 0203 	and.w	r2, r3, #3
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	fa02 f303 	lsl.w	r3, r2, r3
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 80ac 	beq.w	8006836 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066de:	4b5f      	ldr	r3, [pc, #380]	; (800685c <HAL_GPIO_Init+0x330>)
 80066e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e2:	4a5e      	ldr	r2, [pc, #376]	; (800685c <HAL_GPIO_Init+0x330>)
 80066e4:	f043 0301 	orr.w	r3, r3, #1
 80066e8:	6613      	str	r3, [r2, #96]	; 0x60
 80066ea:	4b5c      	ldr	r3, [pc, #368]	; (800685c <HAL_GPIO_Init+0x330>)
 80066ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	60bb      	str	r3, [r7, #8]
 80066f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80066f6:	4a5a      	ldr	r2, [pc, #360]	; (8006860 <HAL_GPIO_Init+0x334>)
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	089b      	lsrs	r3, r3, #2
 80066fc:	3302      	adds	r3, #2
 80066fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006702:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f003 0303 	and.w	r3, r3, #3
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	220f      	movs	r2, #15
 800670e:	fa02 f303 	lsl.w	r3, r2, r3
 8006712:	43db      	mvns	r3, r3
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	4013      	ands	r3, r2
 8006718:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006720:	d025      	beq.n	800676e <HAL_GPIO_Init+0x242>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a4f      	ldr	r2, [pc, #316]	; (8006864 <HAL_GPIO_Init+0x338>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d01f      	beq.n	800676a <HAL_GPIO_Init+0x23e>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a4e      	ldr	r2, [pc, #312]	; (8006868 <HAL_GPIO_Init+0x33c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d019      	beq.n	8006766 <HAL_GPIO_Init+0x23a>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a4d      	ldr	r2, [pc, #308]	; (800686c <HAL_GPIO_Init+0x340>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d013      	beq.n	8006762 <HAL_GPIO_Init+0x236>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a4c      	ldr	r2, [pc, #304]	; (8006870 <HAL_GPIO_Init+0x344>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d00d      	beq.n	800675e <HAL_GPIO_Init+0x232>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a4b      	ldr	r2, [pc, #300]	; (8006874 <HAL_GPIO_Init+0x348>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d007      	beq.n	800675a <HAL_GPIO_Init+0x22e>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a4a      	ldr	r2, [pc, #296]	; (8006878 <HAL_GPIO_Init+0x34c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d101      	bne.n	8006756 <HAL_GPIO_Init+0x22a>
 8006752:	2306      	movs	r3, #6
 8006754:	e00c      	b.n	8006770 <HAL_GPIO_Init+0x244>
 8006756:	2307      	movs	r3, #7
 8006758:	e00a      	b.n	8006770 <HAL_GPIO_Init+0x244>
 800675a:	2305      	movs	r3, #5
 800675c:	e008      	b.n	8006770 <HAL_GPIO_Init+0x244>
 800675e:	2304      	movs	r3, #4
 8006760:	e006      	b.n	8006770 <HAL_GPIO_Init+0x244>
 8006762:	2303      	movs	r3, #3
 8006764:	e004      	b.n	8006770 <HAL_GPIO_Init+0x244>
 8006766:	2302      	movs	r3, #2
 8006768:	e002      	b.n	8006770 <HAL_GPIO_Init+0x244>
 800676a:	2301      	movs	r3, #1
 800676c:	e000      	b.n	8006770 <HAL_GPIO_Init+0x244>
 800676e:	2300      	movs	r3, #0
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	f002 0203 	and.w	r2, r2, #3
 8006776:	0092      	lsls	r2, r2, #2
 8006778:	4093      	lsls	r3, r2
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006780:	4937      	ldr	r1, [pc, #220]	; (8006860 <HAL_GPIO_Init+0x334>)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	089b      	lsrs	r3, r3, #2
 8006786:	3302      	adds	r3, #2
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800678e:	4b3b      	ldr	r3, [pc, #236]	; (800687c <HAL_GPIO_Init+0x350>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	43db      	mvns	r3, r3
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4013      	ands	r3, r2
 800679c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067b2:	4a32      	ldr	r2, [pc, #200]	; (800687c <HAL_GPIO_Init+0x350>)
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80067b8:	4b30      	ldr	r3, [pc, #192]	; (800687c <HAL_GPIO_Init+0x350>)
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	43db      	mvns	r3, r3
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	4013      	ands	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4313      	orrs	r3, r2
 80067da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80067dc:	4a27      	ldr	r2, [pc, #156]	; (800687c <HAL_GPIO_Init+0x350>)
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80067e2:	4b26      	ldr	r3, [pc, #152]	; (800687c <HAL_GPIO_Init+0x350>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	43db      	mvns	r3, r3
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4013      	ands	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4313      	orrs	r3, r2
 8006804:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006806:	4a1d      	ldr	r2, [pc, #116]	; (800687c <HAL_GPIO_Init+0x350>)
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800680c:	4b1b      	ldr	r3, [pc, #108]	; (800687c <HAL_GPIO_Init+0x350>)
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	43db      	mvns	r3, r3
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4013      	ands	r3, r2
 800681a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4313      	orrs	r3, r2
 800682e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006830:	4a12      	ldr	r2, [pc, #72]	; (800687c <HAL_GPIO_Init+0x350>)
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	3301      	adds	r3, #1
 800683a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	fa22 f303 	lsr.w	r3, r2, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	f47f ae78 	bne.w	800653c <HAL_GPIO_Init+0x10>
  }
}
 800684c:	bf00      	nop
 800684e:	bf00      	nop
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	40021000 	.word	0x40021000
 8006860:	40010000 	.word	0x40010000
 8006864:	48000400 	.word	0x48000400
 8006868:	48000800 	.word	0x48000800
 800686c:	48000c00 	.word	0x48000c00
 8006870:	48001000 	.word	0x48001000
 8006874:	48001400 	.word	0x48001400
 8006878:	48001800 	.word	0x48001800
 800687c:	40010400 	.word	0x40010400

08006880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	807b      	strh	r3, [r7, #2]
 800688c:	4613      	mov	r3, r2
 800688e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006890:	787b      	ldrb	r3, [r7, #1]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006896:	887a      	ldrh	r2, [r7, #2]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800689c:	e002      	b.n	80068a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800689e:	887a      	ldrh	r2, [r7, #2]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80068b4:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80068bc:	4618      	mov	r0, r3
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	40007000 	.word	0x40007000

080068cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068da:	d130      	bne.n	800693e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80068dc:	4b23      	ldr	r3, [pc, #140]	; (800696c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e8:	d038      	beq.n	800695c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80068ea:	4b20      	ldr	r3, [pc, #128]	; (800696c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80068f2:	4a1e      	ldr	r2, [pc, #120]	; (800696c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80068fa:	4b1d      	ldr	r3, [pc, #116]	; (8006970 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2232      	movs	r2, #50	; 0x32
 8006900:	fb02 f303 	mul.w	r3, r2, r3
 8006904:	4a1b      	ldr	r2, [pc, #108]	; (8006974 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006906:	fba2 2303 	umull	r2, r3, r2, r3
 800690a:	0c9b      	lsrs	r3, r3, #18
 800690c:	3301      	adds	r3, #1
 800690e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006910:	e002      	b.n	8006918 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3b01      	subs	r3, #1
 8006916:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006918:	4b14      	ldr	r3, [pc, #80]	; (800696c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006924:	d102      	bne.n	800692c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1f2      	bne.n	8006912 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800692c:	4b0f      	ldr	r3, [pc, #60]	; (800696c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006938:	d110      	bne.n	800695c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e00f      	b.n	800695e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800693e:	4b0b      	ldr	r3, [pc, #44]	; (800696c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800694a:	d007      	beq.n	800695c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800694c:	4b07      	ldr	r3, [pc, #28]	; (800696c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006954:	4a05      	ldr	r2, [pc, #20]	; (800696c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800695a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	40007000 	.word	0x40007000
 8006970:	20000140 	.word	0x20000140
 8006974:	431bde83 	.word	0x431bde83

08006978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e3d4      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800698a:	4ba1      	ldr	r3, [pc, #644]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 030c 	and.w	r3, r3, #12
 8006992:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006994:	4b9e      	ldr	r3, [pc, #632]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f003 0303 	and.w	r3, r3, #3
 800699c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0310 	and.w	r3, r3, #16
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 80e4 	beq.w	8006b74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d007      	beq.n	80069c2 <HAL_RCC_OscConfig+0x4a>
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	2b0c      	cmp	r3, #12
 80069b6:	f040 808b 	bne.w	8006ad0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	f040 8087 	bne.w	8006ad0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069c2:	4b93      	ldr	r3, [pc, #588]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d005      	beq.n	80069da <HAL_RCC_OscConfig+0x62>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e3ac      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1a      	ldr	r2, [r3, #32]
 80069de:	4b8c      	ldr	r3, [pc, #560]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d004      	beq.n	80069f4 <HAL_RCC_OscConfig+0x7c>
 80069ea:	4b89      	ldr	r3, [pc, #548]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069f2:	e005      	b.n	8006a00 <HAL_RCC_OscConfig+0x88>
 80069f4:	4b86      	ldr	r3, [pc, #536]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 80069f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069fa:	091b      	lsrs	r3, r3, #4
 80069fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d223      	bcs.n	8006a4c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fd5d 	bl	80074c8 <RCC_SetFlashLatencyFromMSIRange>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e38d      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a18:	4b7d      	ldr	r3, [pc, #500]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a7c      	ldr	r2, [pc, #496]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006a1e:	f043 0308 	orr.w	r3, r3, #8
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	4b7a      	ldr	r3, [pc, #488]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	4977      	ldr	r1, [pc, #476]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a36:	4b76      	ldr	r3, [pc, #472]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	021b      	lsls	r3, r3, #8
 8006a44:	4972      	ldr	r1, [pc, #456]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	604b      	str	r3, [r1, #4]
 8006a4a:	e025      	b.n	8006a98 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a4c:	4b70      	ldr	r3, [pc, #448]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a6f      	ldr	r2, [pc, #444]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006a52:	f043 0308 	orr.w	r3, r3, #8
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	4b6d      	ldr	r3, [pc, #436]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	496a      	ldr	r1, [pc, #424]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a6a:	4b69      	ldr	r3, [pc, #420]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	021b      	lsls	r3, r3, #8
 8006a78:	4965      	ldr	r1, [pc, #404]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d109      	bne.n	8006a98 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 fd1d 	bl	80074c8 <RCC_SetFlashLatencyFromMSIRange>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e34d      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a98:	f000 fc36 	bl	8007308 <HAL_RCC_GetSysClockFreq>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	4b5c      	ldr	r3, [pc, #368]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	091b      	lsrs	r3, r3, #4
 8006aa4:	f003 030f 	and.w	r3, r3, #15
 8006aa8:	495a      	ldr	r1, [pc, #360]	; (8006c14 <HAL_RCC_OscConfig+0x29c>)
 8006aaa:	5ccb      	ldrb	r3, [r1, r3]
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab4:	4a58      	ldr	r2, [pc, #352]	; (8006c18 <HAL_RCC_OscConfig+0x2a0>)
 8006ab6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006ab8:	4b58      	ldr	r3, [pc, #352]	; (8006c1c <HAL_RCC_OscConfig+0x2a4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fe ffe3 	bl	8005a88 <HAL_InitTick>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d052      	beq.n	8006b72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	e331      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d032      	beq.n	8006b3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006ad8:	4b4d      	ldr	r3, [pc, #308]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a4c      	ldr	r2, [pc, #304]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ae4:	f7ff fc34 	bl	8006350 <HAL_GetTick>
 8006ae8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006aea:	e008      	b.n	8006afe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006aec:	f7ff fc30 	bl	8006350 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d901      	bls.n	8006afe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e31a      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006afe:	4b44      	ldr	r3, [pc, #272]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d0f0      	beq.n	8006aec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b0a:	4b41      	ldr	r3, [pc, #260]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a40      	ldr	r2, [pc, #256]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006b10:	f043 0308 	orr.w	r3, r3, #8
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	4b3e      	ldr	r3, [pc, #248]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	493b      	ldr	r1, [pc, #236]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b28:	4b39      	ldr	r3, [pc, #228]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	4936      	ldr	r1, [pc, #216]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	604b      	str	r3, [r1, #4]
 8006b3c:	e01a      	b.n	8006b74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006b3e:	4b34      	ldr	r3, [pc, #208]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a33      	ldr	r2, [pc, #204]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006b44:	f023 0301 	bic.w	r3, r3, #1
 8006b48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b4a:	f7ff fc01 	bl	8006350 <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b50:	e008      	b.n	8006b64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b52:	f7ff fbfd 	bl	8006350 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d901      	bls.n	8006b64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e2e7      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b64:	4b2a      	ldr	r3, [pc, #168]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1f0      	bne.n	8006b52 <HAL_RCC_OscConfig+0x1da>
 8006b70:	e000      	b.n	8006b74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d074      	beq.n	8006c6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	2b08      	cmp	r3, #8
 8006b84:	d005      	beq.n	8006b92 <HAL_RCC_OscConfig+0x21a>
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	2b0c      	cmp	r3, #12
 8006b8a:	d10e      	bne.n	8006baa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d10b      	bne.n	8006baa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b92:	4b1f      	ldr	r3, [pc, #124]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d064      	beq.n	8006c68 <HAL_RCC_OscConfig+0x2f0>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d160      	bne.n	8006c68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e2c4      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb2:	d106      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x24a>
 8006bb4:	4b16      	ldr	r3, [pc, #88]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a15      	ldr	r2, [pc, #84]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	e01d      	b.n	8006bfe <HAL_RCC_OscConfig+0x286>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bca:	d10c      	bne.n	8006be6 <HAL_RCC_OscConfig+0x26e>
 8006bcc:	4b10      	ldr	r3, [pc, #64]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a0f      	ldr	r2, [pc, #60]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006bd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	4b0d      	ldr	r3, [pc, #52]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a0c      	ldr	r2, [pc, #48]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006be2:	6013      	str	r3, [r2, #0]
 8006be4:	e00b      	b.n	8006bfe <HAL_RCC_OscConfig+0x286>
 8006be6:	4b0a      	ldr	r3, [pc, #40]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a09      	ldr	r2, [pc, #36]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a06      	ldr	r2, [pc, #24]	; (8006c10 <HAL_RCC_OscConfig+0x298>)
 8006bf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bfc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d01c      	beq.n	8006c40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c06:	f7ff fba3 	bl	8006350 <HAL_GetTick>
 8006c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c0c:	e011      	b.n	8006c32 <HAL_RCC_OscConfig+0x2ba>
 8006c0e:	bf00      	nop
 8006c10:	40021000 	.word	0x40021000
 8006c14:	0800f62c 	.word	0x0800f62c
 8006c18:	20000140 	.word	0x20000140
 8006c1c:	20000178 	.word	0x20000178
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c20:	f7ff fb96 	bl	8006350 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b64      	cmp	r3, #100	; 0x64
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e280      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c32:	4baf      	ldr	r3, [pc, #700]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0f0      	beq.n	8006c20 <HAL_RCC_OscConfig+0x2a8>
 8006c3e:	e014      	b.n	8006c6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c40:	f7ff fb86 	bl	8006350 <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c48:	f7ff fb82 	bl	8006350 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b64      	cmp	r3, #100	; 0x64
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e26c      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c5a:	4ba5      	ldr	r3, [pc, #660]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f0      	bne.n	8006c48 <HAL_RCC_OscConfig+0x2d0>
 8006c66:	e000      	b.n	8006c6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d060      	beq.n	8006d38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d005      	beq.n	8006c88 <HAL_RCC_OscConfig+0x310>
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	2b0c      	cmp	r3, #12
 8006c80:	d119      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d116      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c88:	4b99      	ldr	r3, [pc, #612]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x328>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e249      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ca0:	4b93      	ldr	r3, [pc, #588]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	061b      	lsls	r3, r3, #24
 8006cae:	4990      	ldr	r1, [pc, #576]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cb4:	e040      	b.n	8006d38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d023      	beq.n	8006d06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cbe:	4b8c      	ldr	r3, [pc, #560]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a8b      	ldr	r2, [pc, #556]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cca:	f7ff fb41 	bl	8006350 <HAL_GetTick>
 8006cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cd0:	e008      	b.n	8006ce4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cd2:	f7ff fb3d 	bl	8006350 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d901      	bls.n	8006ce4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e227      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ce4:	4b82      	ldr	r3, [pc, #520]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d0f0      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf0:	4b7f      	ldr	r3, [pc, #508]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	061b      	lsls	r3, r3, #24
 8006cfe:	497c      	ldr	r1, [pc, #496]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	604b      	str	r3, [r1, #4]
 8006d04:	e018      	b.n	8006d38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d06:	4b7a      	ldr	r3, [pc, #488]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a79      	ldr	r2, [pc, #484]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d12:	f7ff fb1d 	bl	8006350 <HAL_GetTick>
 8006d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d18:	e008      	b.n	8006d2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d1a:	f7ff fb19 	bl	8006350 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d901      	bls.n	8006d2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e203      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d2c:	4b70      	ldr	r3, [pc, #448]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1f0      	bne.n	8006d1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0308 	and.w	r3, r3, #8
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d03c      	beq.n	8006dbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d01c      	beq.n	8006d86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d4c:	4b68      	ldr	r3, [pc, #416]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d52:	4a67      	ldr	r2, [pc, #412]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006d54:	f043 0301 	orr.w	r3, r3, #1
 8006d58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d5c:	f7ff faf8 	bl	8006350 <HAL_GetTick>
 8006d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d62:	e008      	b.n	8006d76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d64:	f7ff faf4 	bl	8006350 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e1de      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d76:	4b5e      	ldr	r3, [pc, #376]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0ef      	beq.n	8006d64 <HAL_RCC_OscConfig+0x3ec>
 8006d84:	e01b      	b.n	8006dbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d86:	4b5a      	ldr	r3, [pc, #360]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d8c:	4a58      	ldr	r2, [pc, #352]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006d8e:	f023 0301 	bic.w	r3, r3, #1
 8006d92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d96:	f7ff fadb 	bl	8006350 <HAL_GetTick>
 8006d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d9c:	e008      	b.n	8006db0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d9e:	f7ff fad7 	bl	8006350 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d901      	bls.n	8006db0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e1c1      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006db0:	4b4f      	ldr	r3, [pc, #316]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1ef      	bne.n	8006d9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0304 	and.w	r3, r3, #4
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 80a6 	beq.w	8006f18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006dd0:	4b47      	ldr	r3, [pc, #284]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10d      	bne.n	8006df8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ddc:	4b44      	ldr	r3, [pc, #272]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de0:	4a43      	ldr	r2, [pc, #268]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006de6:	6593      	str	r3, [r2, #88]	; 0x58
 8006de8:	4b41      	ldr	r3, [pc, #260]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df0:	60bb      	str	r3, [r7, #8]
 8006df2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006df4:	2301      	movs	r3, #1
 8006df6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006df8:	4b3e      	ldr	r3, [pc, #248]	; (8006ef4 <HAL_RCC_OscConfig+0x57c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d118      	bne.n	8006e36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e04:	4b3b      	ldr	r3, [pc, #236]	; (8006ef4 <HAL_RCC_OscConfig+0x57c>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a3a      	ldr	r2, [pc, #232]	; (8006ef4 <HAL_RCC_OscConfig+0x57c>)
 8006e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e10:	f7ff fa9e 	bl	8006350 <HAL_GetTick>
 8006e14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e16:	e008      	b.n	8006e2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e18:	f7ff fa9a 	bl	8006350 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d901      	bls.n	8006e2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e184      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e2a:	4b32      	ldr	r3, [pc, #200]	; (8006ef4 <HAL_RCC_OscConfig+0x57c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0f0      	beq.n	8006e18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d108      	bne.n	8006e50 <HAL_RCC_OscConfig+0x4d8>
 8006e3e:	4b2c      	ldr	r3, [pc, #176]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e44:	4a2a      	ldr	r2, [pc, #168]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e4e:	e024      	b.n	8006e9a <HAL_RCC_OscConfig+0x522>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	2b05      	cmp	r3, #5
 8006e56:	d110      	bne.n	8006e7a <HAL_RCC_OscConfig+0x502>
 8006e58:	4b25      	ldr	r3, [pc, #148]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e5e:	4a24      	ldr	r2, [pc, #144]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006e60:	f043 0304 	orr.w	r3, r3, #4
 8006e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e68:	4b21      	ldr	r3, [pc, #132]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e6e:	4a20      	ldr	r2, [pc, #128]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006e70:	f043 0301 	orr.w	r3, r3, #1
 8006e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e78:	e00f      	b.n	8006e9a <HAL_RCC_OscConfig+0x522>
 8006e7a:	4b1d      	ldr	r3, [pc, #116]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e80:	4a1b      	ldr	r2, [pc, #108]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006e82:	f023 0301 	bic.w	r3, r3, #1
 8006e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e8a:	4b19      	ldr	r3, [pc, #100]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e90:	4a17      	ldr	r2, [pc, #92]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006e92:	f023 0304 	bic.w	r3, r3, #4
 8006e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d016      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea2:	f7ff fa55 	bl	8006350 <HAL_GetTick>
 8006ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ea8:	e00a      	b.n	8006ec0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eaa:	f7ff fa51 	bl	8006350 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d901      	bls.n	8006ec0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e139      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ec0:	4b0b      	ldr	r3, [pc, #44]	; (8006ef0 <HAL_RCC_OscConfig+0x578>)
 8006ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0ed      	beq.n	8006eaa <HAL_RCC_OscConfig+0x532>
 8006ece:	e01a      	b.n	8006f06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed0:	f7ff fa3e 	bl	8006350 <HAL_GetTick>
 8006ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ed6:	e00f      	b.n	8006ef8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ed8:	f7ff fa3a 	bl	8006350 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d906      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e122      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
 8006eee:	bf00      	nop
 8006ef0:	40021000 	.word	0x40021000
 8006ef4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ef8:	4b90      	ldr	r3, [pc, #576]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 8006efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e8      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f06:	7ffb      	ldrb	r3, [r7, #31]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d105      	bne.n	8006f18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f0c:	4b8b      	ldr	r3, [pc, #556]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 8006f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f10:	4a8a      	ldr	r2, [pc, #552]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 8006f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8108 	beq.w	8007132 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	f040 80d0 	bne.w	80070cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006f2c:	4b83      	ldr	r3, [pc, #524]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f003 0203 	and.w	r2, r3, #3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d130      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d127      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d11f      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f6c:	2a07      	cmp	r2, #7
 8006f6e:	bf14      	ite	ne
 8006f70:	2201      	movne	r2, #1
 8006f72:	2200      	moveq	r2, #0
 8006f74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d113      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f84:	085b      	lsrs	r3, r3, #1
 8006f86:	3b01      	subs	r3, #1
 8006f88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d109      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	085b      	lsrs	r3, r3, #1
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d06e      	beq.n	8007080 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b0c      	cmp	r3, #12
 8006fa6:	d069      	beq.n	800707c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006fa8:	4b64      	ldr	r3, [pc, #400]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d105      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006fb4:	4b61      	ldr	r3, [pc, #388]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e0b7      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006fc4:	4b5d      	ldr	r3, [pc, #372]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a5c      	ldr	r2, [pc, #368]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 8006fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006fd0:	f7ff f9be 	bl	8006350 <HAL_GetTick>
 8006fd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fd6:	e008      	b.n	8006fea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fd8:	f7ff f9ba 	bl	8006350 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d901      	bls.n	8006fea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e0a4      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fea:	4b54      	ldr	r3, [pc, #336]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1f0      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ff6:	4b51      	ldr	r3, [pc, #324]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	4b51      	ldr	r3, [pc, #324]	; (8007140 <HAL_RCC_OscConfig+0x7c8>)
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007006:	3a01      	subs	r2, #1
 8007008:	0112      	lsls	r2, r2, #4
 800700a:	4311      	orrs	r1, r2
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007010:	0212      	lsls	r2, r2, #8
 8007012:	4311      	orrs	r1, r2
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007018:	0852      	lsrs	r2, r2, #1
 800701a:	3a01      	subs	r2, #1
 800701c:	0552      	lsls	r2, r2, #21
 800701e:	4311      	orrs	r1, r2
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007024:	0852      	lsrs	r2, r2, #1
 8007026:	3a01      	subs	r2, #1
 8007028:	0652      	lsls	r2, r2, #25
 800702a:	4311      	orrs	r1, r2
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007030:	0912      	lsrs	r2, r2, #4
 8007032:	0452      	lsls	r2, r2, #17
 8007034:	430a      	orrs	r2, r1
 8007036:	4941      	ldr	r1, [pc, #260]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 8007038:	4313      	orrs	r3, r2
 800703a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800703c:	4b3f      	ldr	r3, [pc, #252]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a3e      	ldr	r2, [pc, #248]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 8007042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007046:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007048:	4b3c      	ldr	r3, [pc, #240]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	4a3b      	ldr	r2, [pc, #236]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 800704e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007052:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007054:	f7ff f97c 	bl	8006350 <HAL_GetTick>
 8007058:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800705c:	f7ff f978 	bl	8006350 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b02      	cmp	r3, #2
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e062      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800706e:	4b33      	ldr	r3, [pc, #204]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0f0      	beq.n	800705c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800707a:	e05a      	b.n	8007132 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e059      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007080:	4b2e      	ldr	r3, [pc, #184]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d152      	bne.n	8007132 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800708c:	4b2b      	ldr	r3, [pc, #172]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a2a      	ldr	r2, [pc, #168]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 8007092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007096:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007098:	4b28      	ldr	r3, [pc, #160]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	4a27      	ldr	r2, [pc, #156]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 800709e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80070a4:	f7ff f954 	bl	8006350 <HAL_GetTick>
 80070a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070aa:	e008      	b.n	80070be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ac:	f7ff f950 	bl	8006350 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d901      	bls.n	80070be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e03a      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070be:	4b1f      	ldr	r3, [pc, #124]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d0f0      	beq.n	80070ac <HAL_RCC_OscConfig+0x734>
 80070ca:	e032      	b.n	8007132 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	2b0c      	cmp	r3, #12
 80070d0:	d02d      	beq.n	800712e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070d2:	4b1a      	ldr	r3, [pc, #104]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a19      	ldr	r2, [pc, #100]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 80070d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070dc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80070de:	4b17      	ldr	r3, [pc, #92]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d105      	bne.n	80070f6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80070ea:	4b14      	ldr	r3, [pc, #80]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	4a13      	ldr	r2, [pc, #76]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 80070f0:	f023 0303 	bic.w	r3, r3, #3
 80070f4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80070f6:	4b11      	ldr	r3, [pc, #68]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	4a10      	ldr	r2, [pc, #64]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 80070fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007104:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007106:	f7ff f923 	bl	8006350 <HAL_GetTick>
 800710a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800710c:	e008      	b.n	8007120 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800710e:	f7ff f91f 	bl	8006350 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	2b02      	cmp	r3, #2
 800711a:	d901      	bls.n	8007120 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e009      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007120:	4b06      	ldr	r3, [pc, #24]	; (800713c <HAL_RCC_OscConfig+0x7c4>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1f0      	bne.n	800710e <HAL_RCC_OscConfig+0x796>
 800712c:	e001      	b.n	8007132 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e000      	b.n	8007134 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3720      	adds	r7, #32
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	40021000 	.word	0x40021000
 8007140:	f99d808c 	.word	0xf99d808c

08007144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e0c8      	b.n	80072ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007158:	4b66      	ldr	r3, [pc, #408]	; (80072f4 <HAL_RCC_ClockConfig+0x1b0>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0307 	and.w	r3, r3, #7
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d910      	bls.n	8007188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007166:	4b63      	ldr	r3, [pc, #396]	; (80072f4 <HAL_RCC_ClockConfig+0x1b0>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f023 0207 	bic.w	r2, r3, #7
 800716e:	4961      	ldr	r1, [pc, #388]	; (80072f4 <HAL_RCC_ClockConfig+0x1b0>)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	4313      	orrs	r3, r2
 8007174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007176:	4b5f      	ldr	r3, [pc, #380]	; (80072f4 <HAL_RCC_ClockConfig+0x1b0>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0307 	and.w	r3, r3, #7
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	429a      	cmp	r2, r3
 8007182:	d001      	beq.n	8007188 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e0b0      	b.n	80072ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d04c      	beq.n	800722e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	2b03      	cmp	r3, #3
 800719a:	d107      	bne.n	80071ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800719c:	4b56      	ldr	r3, [pc, #344]	; (80072f8 <HAL_RCC_ClockConfig+0x1b4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d121      	bne.n	80071ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e09e      	b.n	80072ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d107      	bne.n	80071c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071b4:	4b50      	ldr	r3, [pc, #320]	; (80072f8 <HAL_RCC_ClockConfig+0x1b4>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d115      	bne.n	80071ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e092      	b.n	80072ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d107      	bne.n	80071dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80071cc:	4b4a      	ldr	r3, [pc, #296]	; (80072f8 <HAL_RCC_ClockConfig+0x1b4>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d109      	bne.n	80071ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e086      	b.n	80072ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071dc:	4b46      	ldr	r3, [pc, #280]	; (80072f8 <HAL_RCC_ClockConfig+0x1b4>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e07e      	b.n	80072ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071ec:	4b42      	ldr	r3, [pc, #264]	; (80072f8 <HAL_RCC_ClockConfig+0x1b4>)
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f023 0203 	bic.w	r2, r3, #3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	493f      	ldr	r1, [pc, #252]	; (80072f8 <HAL_RCC_ClockConfig+0x1b4>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071fe:	f7ff f8a7 	bl	8006350 <HAL_GetTick>
 8007202:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007204:	e00a      	b.n	800721c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007206:	f7ff f8a3 	bl	8006350 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	f241 3288 	movw	r2, #5000	; 0x1388
 8007214:	4293      	cmp	r3, r2
 8007216:	d901      	bls.n	800721c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e066      	b.n	80072ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800721c:	4b36      	ldr	r3, [pc, #216]	; (80072f8 <HAL_RCC_ClockConfig+0x1b4>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f003 020c 	and.w	r2, r3, #12
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	429a      	cmp	r2, r3
 800722c:	d1eb      	bne.n	8007206 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d008      	beq.n	800724c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800723a:	4b2f      	ldr	r3, [pc, #188]	; (80072f8 <HAL_RCC_ClockConfig+0x1b4>)
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	492c      	ldr	r1, [pc, #176]	; (80072f8 <HAL_RCC_ClockConfig+0x1b4>)
 8007248:	4313      	orrs	r3, r2
 800724a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800724c:	4b29      	ldr	r3, [pc, #164]	; (80072f4 <HAL_RCC_ClockConfig+0x1b0>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	429a      	cmp	r2, r3
 8007258:	d210      	bcs.n	800727c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800725a:	4b26      	ldr	r3, [pc, #152]	; (80072f4 <HAL_RCC_ClockConfig+0x1b0>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f023 0207 	bic.w	r2, r3, #7
 8007262:	4924      	ldr	r1, [pc, #144]	; (80072f4 <HAL_RCC_ClockConfig+0x1b0>)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	4313      	orrs	r3, r2
 8007268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800726a:	4b22      	ldr	r3, [pc, #136]	; (80072f4 <HAL_RCC_ClockConfig+0x1b0>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	429a      	cmp	r2, r3
 8007276:	d001      	beq.n	800727c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e036      	b.n	80072ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d008      	beq.n	800729a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007288:	4b1b      	ldr	r3, [pc, #108]	; (80072f8 <HAL_RCC_ClockConfig+0x1b4>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	4918      	ldr	r1, [pc, #96]	; (80072f8 <HAL_RCC_ClockConfig+0x1b4>)
 8007296:	4313      	orrs	r3, r2
 8007298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0308 	and.w	r3, r3, #8
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d009      	beq.n	80072ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072a6:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <HAL_RCC_ClockConfig+0x1b4>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	4910      	ldr	r1, [pc, #64]	; (80072f8 <HAL_RCC_ClockConfig+0x1b4>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80072ba:	f000 f825 	bl	8007308 <HAL_RCC_GetSysClockFreq>
 80072be:	4602      	mov	r2, r0
 80072c0:	4b0d      	ldr	r3, [pc, #52]	; (80072f8 <HAL_RCC_ClockConfig+0x1b4>)
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	091b      	lsrs	r3, r3, #4
 80072c6:	f003 030f 	and.w	r3, r3, #15
 80072ca:	490c      	ldr	r1, [pc, #48]	; (80072fc <HAL_RCC_ClockConfig+0x1b8>)
 80072cc:	5ccb      	ldrb	r3, [r1, r3]
 80072ce:	f003 031f 	and.w	r3, r3, #31
 80072d2:	fa22 f303 	lsr.w	r3, r2, r3
 80072d6:	4a0a      	ldr	r2, [pc, #40]	; (8007300 <HAL_RCC_ClockConfig+0x1bc>)
 80072d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80072da:	4b0a      	ldr	r3, [pc, #40]	; (8007304 <HAL_RCC_ClockConfig+0x1c0>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fe fbd2 	bl	8005a88 <HAL_InitTick>
 80072e4:	4603      	mov	r3, r0
 80072e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80072e8:	7afb      	ldrb	r3, [r7, #11]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	40022000 	.word	0x40022000
 80072f8:	40021000 	.word	0x40021000
 80072fc:	0800f62c 	.word	0x0800f62c
 8007300:	20000140 	.word	0x20000140
 8007304:	20000178 	.word	0x20000178

08007308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007308:	b480      	push	{r7}
 800730a:	b089      	sub	sp, #36	; 0x24
 800730c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800730e:	2300      	movs	r3, #0
 8007310:	61fb      	str	r3, [r7, #28]
 8007312:	2300      	movs	r3, #0
 8007314:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007316:	4b3e      	ldr	r3, [pc, #248]	; (8007410 <HAL_RCC_GetSysClockFreq+0x108>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 030c 	and.w	r3, r3, #12
 800731e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007320:	4b3b      	ldr	r3, [pc, #236]	; (8007410 <HAL_RCC_GetSysClockFreq+0x108>)
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f003 0303 	and.w	r3, r3, #3
 8007328:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d005      	beq.n	800733c <HAL_RCC_GetSysClockFreq+0x34>
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	2b0c      	cmp	r3, #12
 8007334:	d121      	bne.n	800737a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d11e      	bne.n	800737a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800733c:	4b34      	ldr	r3, [pc, #208]	; (8007410 <HAL_RCC_GetSysClockFreq+0x108>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0308 	and.w	r3, r3, #8
 8007344:	2b00      	cmp	r3, #0
 8007346:	d107      	bne.n	8007358 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007348:	4b31      	ldr	r3, [pc, #196]	; (8007410 <HAL_RCC_GetSysClockFreq+0x108>)
 800734a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800734e:	0a1b      	lsrs	r3, r3, #8
 8007350:	f003 030f 	and.w	r3, r3, #15
 8007354:	61fb      	str	r3, [r7, #28]
 8007356:	e005      	b.n	8007364 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007358:	4b2d      	ldr	r3, [pc, #180]	; (8007410 <HAL_RCC_GetSysClockFreq+0x108>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	091b      	lsrs	r3, r3, #4
 800735e:	f003 030f 	and.w	r3, r3, #15
 8007362:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007364:	4a2b      	ldr	r2, [pc, #172]	; (8007414 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800736c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10d      	bne.n	8007390 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007378:	e00a      	b.n	8007390 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	2b04      	cmp	r3, #4
 800737e:	d102      	bne.n	8007386 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007380:	4b25      	ldr	r3, [pc, #148]	; (8007418 <HAL_RCC_GetSysClockFreq+0x110>)
 8007382:	61bb      	str	r3, [r7, #24]
 8007384:	e004      	b.n	8007390 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	2b08      	cmp	r3, #8
 800738a:	d101      	bne.n	8007390 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800738c:	4b23      	ldr	r3, [pc, #140]	; (800741c <HAL_RCC_GetSysClockFreq+0x114>)
 800738e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	2b0c      	cmp	r3, #12
 8007394:	d134      	bne.n	8007400 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007396:	4b1e      	ldr	r3, [pc, #120]	; (8007410 <HAL_RCC_GetSysClockFreq+0x108>)
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f003 0303 	and.w	r3, r3, #3
 800739e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d003      	beq.n	80073ae <HAL_RCC_GetSysClockFreq+0xa6>
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d003      	beq.n	80073b4 <HAL_RCC_GetSysClockFreq+0xac>
 80073ac:	e005      	b.n	80073ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80073ae:	4b1a      	ldr	r3, [pc, #104]	; (8007418 <HAL_RCC_GetSysClockFreq+0x110>)
 80073b0:	617b      	str	r3, [r7, #20]
      break;
 80073b2:	e005      	b.n	80073c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80073b4:	4b19      	ldr	r3, [pc, #100]	; (800741c <HAL_RCC_GetSysClockFreq+0x114>)
 80073b6:	617b      	str	r3, [r7, #20]
      break;
 80073b8:	e002      	b.n	80073c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	617b      	str	r3, [r7, #20]
      break;
 80073be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073c0:	4b13      	ldr	r3, [pc, #76]	; (8007410 <HAL_RCC_GetSysClockFreq+0x108>)
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	091b      	lsrs	r3, r3, #4
 80073c6:	f003 0307 	and.w	r3, r3, #7
 80073ca:	3301      	adds	r3, #1
 80073cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80073ce:	4b10      	ldr	r3, [pc, #64]	; (8007410 <HAL_RCC_GetSysClockFreq+0x108>)
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	0a1b      	lsrs	r3, r3, #8
 80073d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	fb02 f203 	mul.w	r2, r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80073e6:	4b0a      	ldr	r3, [pc, #40]	; (8007410 <HAL_RCC_GetSysClockFreq+0x108>)
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	0e5b      	lsrs	r3, r3, #25
 80073ec:	f003 0303 	and.w	r3, r3, #3
 80073f0:	3301      	adds	r3, #1
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80073fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007400:	69bb      	ldr	r3, [r7, #24]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3724      	adds	r7, #36	; 0x24
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	40021000 	.word	0x40021000
 8007414:	0800f644 	.word	0x0800f644
 8007418:	00f42400 	.word	0x00f42400
 800741c:	007a1200 	.word	0x007a1200

08007420 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007424:	4b03      	ldr	r3, [pc, #12]	; (8007434 <HAL_RCC_GetHCLKFreq+0x14>)
 8007426:	681b      	ldr	r3, [r3, #0]
}
 8007428:	4618      	mov	r0, r3
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	20000140 	.word	0x20000140

08007438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800743c:	f7ff fff0 	bl	8007420 <HAL_RCC_GetHCLKFreq>
 8007440:	4602      	mov	r2, r0
 8007442:	4b06      	ldr	r3, [pc, #24]	; (800745c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	0a1b      	lsrs	r3, r3, #8
 8007448:	f003 0307 	and.w	r3, r3, #7
 800744c:	4904      	ldr	r1, [pc, #16]	; (8007460 <HAL_RCC_GetPCLK1Freq+0x28>)
 800744e:	5ccb      	ldrb	r3, [r1, r3]
 8007450:	f003 031f 	and.w	r3, r3, #31
 8007454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007458:	4618      	mov	r0, r3
 800745a:	bd80      	pop	{r7, pc}
 800745c:	40021000 	.word	0x40021000
 8007460:	0800f63c 	.word	0x0800f63c

08007464 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	220f      	movs	r2, #15
 8007472:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007474:	4b12      	ldr	r3, [pc, #72]	; (80074c0 <HAL_RCC_GetClockConfig+0x5c>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f003 0203 	and.w	r2, r3, #3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007480:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <HAL_RCC_GetClockConfig+0x5c>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800748c:	4b0c      	ldr	r3, [pc, #48]	; (80074c0 <HAL_RCC_GetClockConfig+0x5c>)
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007498:	4b09      	ldr	r3, [pc, #36]	; (80074c0 <HAL_RCC_GetClockConfig+0x5c>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	08db      	lsrs	r3, r3, #3
 800749e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80074a6:	4b07      	ldr	r3, [pc, #28]	; (80074c4 <HAL_RCC_GetClockConfig+0x60>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0207 	and.w	r2, r3, #7
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	601a      	str	r2, [r3, #0]
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	40021000 	.word	0x40021000
 80074c4:	40022000 	.word	0x40022000

080074c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80074d0:	2300      	movs	r3, #0
 80074d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80074d4:	4b2a      	ldr	r3, [pc, #168]	; (8007580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80074d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80074e0:	f7ff f9e6 	bl	80068b0 <HAL_PWREx_GetVoltageRange>
 80074e4:	6178      	str	r0, [r7, #20]
 80074e6:	e014      	b.n	8007512 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80074e8:	4b25      	ldr	r3, [pc, #148]	; (8007580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80074ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ec:	4a24      	ldr	r2, [pc, #144]	; (8007580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80074ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074f2:	6593      	str	r3, [r2, #88]	; 0x58
 80074f4:	4b22      	ldr	r3, [pc, #136]	; (8007580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80074f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074fc:	60fb      	str	r3, [r7, #12]
 80074fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007500:	f7ff f9d6 	bl	80068b0 <HAL_PWREx_GetVoltageRange>
 8007504:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007506:	4b1e      	ldr	r3, [pc, #120]	; (8007580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800750a:	4a1d      	ldr	r2, [pc, #116]	; (8007580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800750c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007510:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007518:	d10b      	bne.n	8007532 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b80      	cmp	r3, #128	; 0x80
 800751e:	d919      	bls.n	8007554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2ba0      	cmp	r3, #160	; 0xa0
 8007524:	d902      	bls.n	800752c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007526:	2302      	movs	r3, #2
 8007528:	613b      	str	r3, [r7, #16]
 800752a:	e013      	b.n	8007554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800752c:	2301      	movs	r3, #1
 800752e:	613b      	str	r3, [r7, #16]
 8007530:	e010      	b.n	8007554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b80      	cmp	r3, #128	; 0x80
 8007536:	d902      	bls.n	800753e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007538:	2303      	movs	r3, #3
 800753a:	613b      	str	r3, [r7, #16]
 800753c:	e00a      	b.n	8007554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b80      	cmp	r3, #128	; 0x80
 8007542:	d102      	bne.n	800754a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007544:	2302      	movs	r3, #2
 8007546:	613b      	str	r3, [r7, #16]
 8007548:	e004      	b.n	8007554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b70      	cmp	r3, #112	; 0x70
 800754e:	d101      	bne.n	8007554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007550:	2301      	movs	r3, #1
 8007552:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007554:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f023 0207 	bic.w	r2, r3, #7
 800755c:	4909      	ldr	r1, [pc, #36]	; (8007584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	4313      	orrs	r3, r2
 8007562:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007564:	4b07      	ldr	r3, [pc, #28]	; (8007584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0307 	and.w	r3, r3, #7
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	429a      	cmp	r2, r3
 8007570:	d001      	beq.n	8007576 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e000      	b.n	8007578 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	40021000 	.word	0x40021000
 8007584:	40022000 	.word	0x40022000

08007588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007590:	2300      	movs	r3, #0
 8007592:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007594:	2300      	movs	r3, #0
 8007596:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d041      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80075ac:	d02a      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80075ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80075b2:	d824      	bhi.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80075b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075b8:	d008      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80075ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075be:	d81e      	bhi.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00a      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80075c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075c8:	d010      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80075ca:	e018      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80075cc:	4b86      	ldr	r3, [pc, #536]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	4a85      	ldr	r2, [pc, #532]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80075d8:	e015      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3304      	adds	r3, #4
 80075de:	2100      	movs	r1, #0
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 fabb 	bl	8007b5c <RCCEx_PLLSAI1_Config>
 80075e6:	4603      	mov	r3, r0
 80075e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80075ea:	e00c      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3320      	adds	r3, #32
 80075f0:	2100      	movs	r1, #0
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fba6 	bl	8007d44 <RCCEx_PLLSAI2_Config>
 80075f8:	4603      	mov	r3, r0
 80075fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80075fc:	e003      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	74fb      	strb	r3, [r7, #19]
      break;
 8007602:	e000      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007606:	7cfb      	ldrb	r3, [r7, #19]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10b      	bne.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800760c:	4b76      	ldr	r3, [pc, #472]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800760e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007612:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800761a:	4973      	ldr	r1, [pc, #460]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800761c:	4313      	orrs	r3, r2
 800761e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007622:	e001      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007624:	7cfb      	ldrb	r3, [r7, #19]
 8007626:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d041      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007638:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800763c:	d02a      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800763e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007642:	d824      	bhi.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007644:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007648:	d008      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800764a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800764e:	d81e      	bhi.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00a      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007658:	d010      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800765a:	e018      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800765c:	4b62      	ldr	r3, [pc, #392]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	4a61      	ldr	r2, [pc, #388]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007666:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007668:	e015      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3304      	adds	r3, #4
 800766e:	2100      	movs	r1, #0
 8007670:	4618      	mov	r0, r3
 8007672:	f000 fa73 	bl	8007b5c <RCCEx_PLLSAI1_Config>
 8007676:	4603      	mov	r3, r0
 8007678:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800767a:	e00c      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3320      	adds	r3, #32
 8007680:	2100      	movs	r1, #0
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fb5e 	bl	8007d44 <RCCEx_PLLSAI2_Config>
 8007688:	4603      	mov	r3, r0
 800768a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800768c:	e003      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	74fb      	strb	r3, [r7, #19]
      break;
 8007692:	e000      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007696:	7cfb      	ldrb	r3, [r7, #19]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10b      	bne.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800769c:	4b52      	ldr	r3, [pc, #328]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800769e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076aa:	494f      	ldr	r1, [pc, #316]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80076b2:	e001      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b4:	7cfb      	ldrb	r3, [r7, #19]
 80076b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 80a0 	beq.w	8007806 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076c6:	2300      	movs	r3, #0
 80076c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80076ca:	4b47      	ldr	r3, [pc, #284]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80076d6:	2301      	movs	r3, #1
 80076d8:	e000      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80076da:	2300      	movs	r3, #0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00d      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076e0:	4b41      	ldr	r3, [pc, #260]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e4:	4a40      	ldr	r2, [pc, #256]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ea:	6593      	str	r3, [r2, #88]	; 0x58
 80076ec:	4b3e      	ldr	r3, [pc, #248]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076f4:	60bb      	str	r3, [r7, #8]
 80076f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076f8:	2301      	movs	r3, #1
 80076fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076fc:	4b3b      	ldr	r3, [pc, #236]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a3a      	ldr	r2, [pc, #232]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007706:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007708:	f7fe fe22 	bl	8006350 <HAL_GetTick>
 800770c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800770e:	e009      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007710:	f7fe fe1e 	bl	8006350 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	2b02      	cmp	r3, #2
 800771c:	d902      	bls.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	74fb      	strb	r3, [r7, #19]
        break;
 8007722:	e005      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007724:	4b31      	ldr	r3, [pc, #196]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0ef      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007730:	7cfb      	ldrb	r3, [r7, #19]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d15c      	bne.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007736:	4b2c      	ldr	r3, [pc, #176]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800773c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007740:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d01f      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	429a      	cmp	r2, r3
 8007752:	d019      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007754:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800775a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800775e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007760:	4b21      	ldr	r3, [pc, #132]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007766:	4a20      	ldr	r2, [pc, #128]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800776c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007770:	4b1d      	ldr	r3, [pc, #116]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007776:	4a1c      	ldr	r2, [pc, #112]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800777c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007780:	4a19      	ldr	r2, [pc, #100]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	d016      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007792:	f7fe fddd 	bl	8006350 <HAL_GetTick>
 8007796:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007798:	e00b      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800779a:	f7fe fdd9 	bl	8006350 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d902      	bls.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	74fb      	strb	r3, [r7, #19]
            break;
 80077b0:	e006      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077b2:	4b0d      	ldr	r3, [pc, #52]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0ec      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80077c0:	7cfb      	ldrb	r3, [r7, #19]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10c      	bne.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077c6:	4b08      	ldr	r3, [pc, #32]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077d6:	4904      	ldr	r1, [pc, #16]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80077de:	e009      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80077e0:	7cfb      	ldrb	r3, [r7, #19]
 80077e2:	74bb      	strb	r3, [r7, #18]
 80077e4:	e006      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80077e6:	bf00      	nop
 80077e8:	40021000 	.word	0x40021000
 80077ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f0:	7cfb      	ldrb	r3, [r7, #19]
 80077f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077f4:	7c7b      	ldrb	r3, [r7, #17]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d105      	bne.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077fa:	4b9e      	ldr	r3, [pc, #632]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fe:	4a9d      	ldr	r2, [pc, #628]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007804:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00a      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007812:	4b98      	ldr	r3, [pc, #608]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007818:	f023 0203 	bic.w	r2, r3, #3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	4994      	ldr	r1, [pc, #592]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007822:	4313      	orrs	r3, r2
 8007824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00a      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007834:	4b8f      	ldr	r3, [pc, #572]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800783a:	f023 020c 	bic.w	r2, r3, #12
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007842:	498c      	ldr	r1, [pc, #560]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007844:	4313      	orrs	r3, r2
 8007846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0304 	and.w	r3, r3, #4
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00a      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007856:	4b87      	ldr	r3, [pc, #540]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800785c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007864:	4983      	ldr	r1, [pc, #524]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007866:	4313      	orrs	r3, r2
 8007868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 0308 	and.w	r3, r3, #8
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00a      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007878:	4b7e      	ldr	r3, [pc, #504]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800787a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800787e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007886:	497b      	ldr	r1, [pc, #492]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007888:	4313      	orrs	r3, r2
 800788a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0310 	and.w	r3, r3, #16
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00a      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800789a:	4b76      	ldr	r3, [pc, #472]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800789c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a8:	4972      	ldr	r1, [pc, #456]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0320 	and.w	r3, r3, #32
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00a      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078bc:	4b6d      	ldr	r3, [pc, #436]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ca:	496a      	ldr	r1, [pc, #424]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078de:	4b65      	ldr	r3, [pc, #404]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ec:	4961      	ldr	r1, [pc, #388]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00a      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007900:	4b5c      	ldr	r3, [pc, #368]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007906:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800790e:	4959      	ldr	r1, [pc, #356]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007910:	4313      	orrs	r3, r2
 8007912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007922:	4b54      	ldr	r3, [pc, #336]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007928:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007930:	4950      	ldr	r1, [pc, #320]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007932:	4313      	orrs	r3, r2
 8007934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00a      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007944:	4b4b      	ldr	r3, [pc, #300]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800794a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007952:	4948      	ldr	r1, [pc, #288]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007954:	4313      	orrs	r3, r2
 8007956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007966:	4b43      	ldr	r3, [pc, #268]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800796c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007974:	493f      	ldr	r1, [pc, #252]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007976:	4313      	orrs	r3, r2
 8007978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d028      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007988:	4b3a      	ldr	r3, [pc, #232]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800798a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800798e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007996:	4937      	ldr	r1, [pc, #220]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007998:	4313      	orrs	r3, r2
 800799a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079a6:	d106      	bne.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079a8:	4b32      	ldr	r3, [pc, #200]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	4a31      	ldr	r2, [pc, #196]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079b2:	60d3      	str	r3, [r2, #12]
 80079b4:	e011      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079be:	d10c      	bne.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3304      	adds	r3, #4
 80079c4:	2101      	movs	r1, #1
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 f8c8 	bl	8007b5c <RCCEx_PLLSAI1_Config>
 80079cc:	4603      	mov	r3, r0
 80079ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80079d0:	7cfb      	ldrb	r3, [r7, #19]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80079d6:	7cfb      	ldrb	r3, [r7, #19]
 80079d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d028      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80079e6:	4b23      	ldr	r3, [pc, #140]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f4:	491f      	ldr	r1, [pc, #124]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a04:	d106      	bne.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a06:	4b1b      	ldr	r3, [pc, #108]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	4a1a      	ldr	r2, [pc, #104]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a10:	60d3      	str	r3, [r2, #12]
 8007a12:	e011      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a1c:	d10c      	bne.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	3304      	adds	r3, #4
 8007a22:	2101      	movs	r1, #1
 8007a24:	4618      	mov	r0, r3
 8007a26:	f000 f899 	bl	8007b5c <RCCEx_PLLSAI1_Config>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a2e:	7cfb      	ldrb	r3, [r7, #19]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007a34:	7cfb      	ldrb	r3, [r7, #19]
 8007a36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d02b      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a44:	4b0b      	ldr	r3, [pc, #44]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a52:	4908      	ldr	r1, [pc, #32]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a54:	4313      	orrs	r3, r2
 8007a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a62:	d109      	bne.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a64:	4b03      	ldr	r3, [pc, #12]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	4a02      	ldr	r2, [pc, #8]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a6e:	60d3      	str	r3, [r2, #12]
 8007a70:	e014      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007a72:	bf00      	nop
 8007a74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a80:	d10c      	bne.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3304      	adds	r3, #4
 8007a86:	2101      	movs	r1, #1
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 f867 	bl	8007b5c <RCCEx_PLLSAI1_Config>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a92:	7cfb      	ldrb	r3, [r7, #19]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007a98:	7cfb      	ldrb	r3, [r7, #19]
 8007a9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d02f      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007aa8:	4b2b      	ldr	r3, [pc, #172]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ab6:	4928      	ldr	r1, [pc, #160]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ac2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ac6:	d10d      	bne.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	3304      	adds	r3, #4
 8007acc:	2102      	movs	r1, #2
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 f844 	bl	8007b5c <RCCEx_PLLSAI1_Config>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ad8:	7cfb      	ldrb	r3, [r7, #19]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d014      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007ade:	7cfb      	ldrb	r3, [r7, #19]
 8007ae0:	74bb      	strb	r3, [r7, #18]
 8007ae2:	e011      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aec:	d10c      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3320      	adds	r3, #32
 8007af2:	2102      	movs	r1, #2
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 f925 	bl	8007d44 <RCCEx_PLLSAI2_Config>
 8007afa:	4603      	mov	r3, r0
 8007afc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007afe:	7cfb      	ldrb	r3, [r7, #19]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007b04:	7cfb      	ldrb	r3, [r7, #19]
 8007b06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00a      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b14:	4b10      	ldr	r3, [pc, #64]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b22:	490d      	ldr	r1, [pc, #52]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00b      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b36:	4b08      	ldr	r3, [pc, #32]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b46:	4904      	ldr	r1, [pc, #16]	; (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007b4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3718      	adds	r7, #24
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	40021000 	.word	0x40021000

08007b5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007b6a:	4b75      	ldr	r3, [pc, #468]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f003 0303 	and.w	r3, r3, #3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d018      	beq.n	8007ba8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007b76:	4b72      	ldr	r3, [pc, #456]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f003 0203 	and.w	r2, r3, #3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d10d      	bne.n	8007ba2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
       ||
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d009      	beq.n	8007ba2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007b8e:	4b6c      	ldr	r3, [pc, #432]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	091b      	lsrs	r3, r3, #4
 8007b94:	f003 0307 	and.w	r3, r3, #7
 8007b98:	1c5a      	adds	r2, r3, #1
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
       ||
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d047      	beq.n	8007c32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	73fb      	strb	r3, [r7, #15]
 8007ba6:	e044      	b.n	8007c32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b03      	cmp	r3, #3
 8007bae:	d018      	beq.n	8007be2 <RCCEx_PLLSAI1_Config+0x86>
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d825      	bhi.n	8007c00 <RCCEx_PLLSAI1_Config+0xa4>
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d002      	beq.n	8007bbe <RCCEx_PLLSAI1_Config+0x62>
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d009      	beq.n	8007bd0 <RCCEx_PLLSAI1_Config+0x74>
 8007bbc:	e020      	b.n	8007c00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007bbe:	4b60      	ldr	r3, [pc, #384]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0302 	and.w	r3, r3, #2
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d11d      	bne.n	8007c06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bce:	e01a      	b.n	8007c06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007bd0:	4b5b      	ldr	r3, [pc, #364]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d116      	bne.n	8007c0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007be0:	e013      	b.n	8007c0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007be2:	4b57      	ldr	r3, [pc, #348]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10f      	bne.n	8007c0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007bee:	4b54      	ldr	r3, [pc, #336]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d109      	bne.n	8007c0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007bfe:	e006      	b.n	8007c0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	73fb      	strb	r3, [r7, #15]
      break;
 8007c04:	e004      	b.n	8007c10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007c06:	bf00      	nop
 8007c08:	e002      	b.n	8007c10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007c0a:	bf00      	nop
 8007c0c:	e000      	b.n	8007c10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007c0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10d      	bne.n	8007c32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007c16:	4b4a      	ldr	r3, [pc, #296]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6819      	ldr	r1, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	3b01      	subs	r3, #1
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	430b      	orrs	r3, r1
 8007c2c:	4944      	ldr	r1, [pc, #272]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d17d      	bne.n	8007d34 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007c38:	4b41      	ldr	r3, [pc, #260]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a40      	ldr	r2, [pc, #256]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c44:	f7fe fb84 	bl	8006350 <HAL_GetTick>
 8007c48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c4a:	e009      	b.n	8007c60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c4c:	f7fe fb80 	bl	8006350 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d902      	bls.n	8007c60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	73fb      	strb	r3, [r7, #15]
        break;
 8007c5e:	e005      	b.n	8007c6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c60:	4b37      	ldr	r3, [pc, #220]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1ef      	bne.n	8007c4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d160      	bne.n	8007d34 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d111      	bne.n	8007c9c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c78:	4b31      	ldr	r3, [pc, #196]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	6892      	ldr	r2, [r2, #8]
 8007c88:	0211      	lsls	r1, r2, #8
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	68d2      	ldr	r2, [r2, #12]
 8007c8e:	0912      	lsrs	r2, r2, #4
 8007c90:	0452      	lsls	r2, r2, #17
 8007c92:	430a      	orrs	r2, r1
 8007c94:	492a      	ldr	r1, [pc, #168]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	610b      	str	r3, [r1, #16]
 8007c9a:	e027      	b.n	8007cec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d112      	bne.n	8007cc8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ca2:	4b27      	ldr	r3, [pc, #156]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007caa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	6892      	ldr	r2, [r2, #8]
 8007cb2:	0211      	lsls	r1, r2, #8
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	6912      	ldr	r2, [r2, #16]
 8007cb8:	0852      	lsrs	r2, r2, #1
 8007cba:	3a01      	subs	r2, #1
 8007cbc:	0552      	lsls	r2, r2, #21
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	491f      	ldr	r1, [pc, #124]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	610b      	str	r3, [r1, #16]
 8007cc6:	e011      	b.n	8007cec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007cc8:	4b1d      	ldr	r3, [pc, #116]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007cd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	6892      	ldr	r2, [r2, #8]
 8007cd8:	0211      	lsls	r1, r2, #8
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	6952      	ldr	r2, [r2, #20]
 8007cde:	0852      	lsrs	r2, r2, #1
 8007ce0:	3a01      	subs	r2, #1
 8007ce2:	0652      	lsls	r2, r2, #25
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	4916      	ldr	r1, [pc, #88]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007cec:	4b14      	ldr	r3, [pc, #80]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a13      	ldr	r2, [pc, #76]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007cf6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cf8:	f7fe fb2a 	bl	8006350 <HAL_GetTick>
 8007cfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007cfe:	e009      	b.n	8007d14 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d00:	f7fe fb26 	bl	8006350 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d902      	bls.n	8007d14 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	73fb      	strb	r3, [r7, #15]
          break;
 8007d12:	e005      	b.n	8007d20 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007d14:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d0ef      	beq.n	8007d00 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007d26:	4b06      	ldr	r3, [pc, #24]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d28:	691a      	ldr	r2, [r3, #16]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	4904      	ldr	r1, [pc, #16]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	40021000 	.word	0x40021000

08007d44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007d52:	4b6a      	ldr	r3, [pc, #424]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	f003 0303 	and.w	r3, r3, #3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d018      	beq.n	8007d90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007d5e:	4b67      	ldr	r3, [pc, #412]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f003 0203 	and.w	r2, r3, #3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d10d      	bne.n	8007d8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
       ||
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d009      	beq.n	8007d8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007d76:	4b61      	ldr	r3, [pc, #388]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	091b      	lsrs	r3, r3, #4
 8007d7c:	f003 0307 	and.w	r3, r3, #7
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
       ||
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d047      	beq.n	8007e1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	73fb      	strb	r3, [r7, #15]
 8007d8e:	e044      	b.n	8007e1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d018      	beq.n	8007dca <RCCEx_PLLSAI2_Config+0x86>
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d825      	bhi.n	8007de8 <RCCEx_PLLSAI2_Config+0xa4>
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d002      	beq.n	8007da6 <RCCEx_PLLSAI2_Config+0x62>
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d009      	beq.n	8007db8 <RCCEx_PLLSAI2_Config+0x74>
 8007da4:	e020      	b.n	8007de8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007da6:	4b55      	ldr	r3, [pc, #340]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d11d      	bne.n	8007dee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007db6:	e01a      	b.n	8007dee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007db8:	4b50      	ldr	r3, [pc, #320]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d116      	bne.n	8007df2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dc8:	e013      	b.n	8007df2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007dca:	4b4c      	ldr	r3, [pc, #304]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10f      	bne.n	8007df6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007dd6:	4b49      	ldr	r3, [pc, #292]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d109      	bne.n	8007df6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007de6:	e006      	b.n	8007df6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	73fb      	strb	r3, [r7, #15]
      break;
 8007dec:	e004      	b.n	8007df8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007dee:	bf00      	nop
 8007df0:	e002      	b.n	8007df8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007df2:	bf00      	nop
 8007df4:	e000      	b.n	8007df8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007df6:	bf00      	nop
    }

    if(status == HAL_OK)
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10d      	bne.n	8007e1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007dfe:	4b3f      	ldr	r3, [pc, #252]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6819      	ldr	r1, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	011b      	lsls	r3, r3, #4
 8007e12:	430b      	orrs	r3, r1
 8007e14:	4939      	ldr	r1, [pc, #228]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d167      	bne.n	8007ef0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007e20:	4b36      	ldr	r3, [pc, #216]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a35      	ldr	r2, [pc, #212]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e2c:	f7fe fa90 	bl	8006350 <HAL_GetTick>
 8007e30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e32:	e009      	b.n	8007e48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007e34:	f7fe fa8c 	bl	8006350 <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d902      	bls.n	8007e48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	73fb      	strb	r3, [r7, #15]
        break;
 8007e46:	e005      	b.n	8007e54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e48:	4b2c      	ldr	r3, [pc, #176]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1ef      	bne.n	8007e34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d14a      	bne.n	8007ef0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d111      	bne.n	8007e84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e60:	4b26      	ldr	r3, [pc, #152]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	6892      	ldr	r2, [r2, #8]
 8007e70:	0211      	lsls	r1, r2, #8
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	68d2      	ldr	r2, [r2, #12]
 8007e76:	0912      	lsrs	r2, r2, #4
 8007e78:	0452      	lsls	r2, r2, #17
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	491f      	ldr	r1, [pc, #124]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	614b      	str	r3, [r1, #20]
 8007e82:	e011      	b.n	8007ea8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e84:	4b1d      	ldr	r3, [pc, #116]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007e8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	6892      	ldr	r2, [r2, #8]
 8007e94:	0211      	lsls	r1, r2, #8
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	6912      	ldr	r2, [r2, #16]
 8007e9a:	0852      	lsrs	r2, r2, #1
 8007e9c:	3a01      	subs	r2, #1
 8007e9e:	0652      	lsls	r2, r2, #25
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	4916      	ldr	r1, [pc, #88]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007ea8:	4b14      	ldr	r3, [pc, #80]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a13      	ldr	r2, [pc, #76]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb4:	f7fe fa4c 	bl	8006350 <HAL_GetTick>
 8007eb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007eba:	e009      	b.n	8007ed0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007ebc:	f7fe fa48 	bl	8006350 <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d902      	bls.n	8007ed0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	73fb      	strb	r3, [r7, #15]
          break;
 8007ece:	e005      	b.n	8007edc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007ed0:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d0ef      	beq.n	8007ebc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d106      	bne.n	8007ef0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007ee2:	4b06      	ldr	r3, [pc, #24]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ee4:	695a      	ldr	r2, [r3, #20]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	4904      	ldr	r1, [pc, #16]	; (8007efc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	40021000 	.word	0x40021000

08007f00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d101      	bne.n	8007f12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e095      	b.n	800803e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d108      	bne.n	8007f2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f22:	d009      	beq.n	8007f38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	61da      	str	r2, [r3, #28]
 8007f2a:	e005      	b.n	8007f38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d106      	bne.n	8007f58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7fd fce0 	bl	8005918 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f78:	d902      	bls.n	8007f80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60fb      	str	r3, [r7, #12]
 8007f7e:	e002      	b.n	8007f86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007f8e:	d007      	beq.n	8007fa0 <HAL_SPI_Init+0xa0>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f98:	d002      	beq.n	8007fa0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	f003 0302 	and.w	r3, r3, #2
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	431a      	orrs	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe2:	ea42 0103 	orr.w	r1, r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	0c1b      	lsrs	r3, r3, #16
 8007ffc:	f003 0204 	and.w	r2, r3, #4
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	f003 0310 	and.w	r3, r3, #16
 8008008:	431a      	orrs	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800e:	f003 0308 	and.w	r3, r3, #8
 8008012:	431a      	orrs	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800801c:	ea42 0103 	orr.w	r1, r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b088      	sub	sp, #32
 800804a:	af02      	add	r7, sp, #8
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	603b      	str	r3, [r7, #0]
 8008052:	4613      	mov	r3, r2
 8008054:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008062:	d112      	bne.n	800808a <HAL_SPI_Receive+0x44>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10e      	bne.n	800808a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2204      	movs	r2, #4
 8008070:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008074:	88fa      	ldrh	r2, [r7, #6]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	4613      	mov	r3, r2
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	68b9      	ldr	r1, [r7, #8]
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 f910 	bl	80082a6 <HAL_SPI_TransmitReceive>
 8008086:	4603      	mov	r3, r0
 8008088:	e109      	b.n	800829e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008090:	2b01      	cmp	r3, #1
 8008092:	d101      	bne.n	8008098 <HAL_SPI_Receive+0x52>
 8008094:	2302      	movs	r3, #2
 8008096:	e102      	b.n	800829e <HAL_SPI_Receive+0x258>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080a0:	f7fe f956 	bl	8006350 <HAL_GetTick>
 80080a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d002      	beq.n	80080b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80080b2:	2302      	movs	r3, #2
 80080b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80080b6:	e0e9      	b.n	800828c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d002      	beq.n	80080c4 <HAL_SPI_Receive+0x7e>
 80080be:	88fb      	ldrh	r3, [r7, #6]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d102      	bne.n	80080ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80080c8:	e0e0      	b.n	800828c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2204      	movs	r2, #4
 80080ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	88fa      	ldrh	r2, [r7, #6]
 80080e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	88fa      	ldrh	r2, [r7, #6]
 80080ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008114:	d908      	bls.n	8008128 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008124:	605a      	str	r2, [r3, #4]
 8008126:	e007      	b.n	8008138 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008136:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008140:	d10f      	bne.n	8008162 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008150:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008160:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816c:	2b40      	cmp	r3, #64	; 0x40
 800816e:	d007      	beq.n	8008180 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800817e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008188:	d867      	bhi.n	800825a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800818a:	e030      	b.n	80081ee <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	2b01      	cmp	r3, #1
 8008198:	d117      	bne.n	80081ca <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f103 020c 	add.w	r2, r3, #12
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a6:	7812      	ldrb	r2, [r2, #0]
 80081a8:	b2d2      	uxtb	r2, r2
 80081aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081bc:	b29b      	uxth	r3, r3
 80081be:	3b01      	subs	r3, #1
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80081c8:	e011      	b.n	80081ee <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081ca:	f7fe f8c1 	bl	8006350 <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d803      	bhi.n	80081e2 <HAL_SPI_Receive+0x19c>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e0:	d102      	bne.n	80081e8 <HAL_SPI_Receive+0x1a2>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d102      	bne.n	80081ee <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80081ec:	e04e      	b.n	800828c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1c8      	bne.n	800818c <HAL_SPI_Receive+0x146>
 80081fa:	e034      	b.n	8008266 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	2b01      	cmp	r3, #1
 8008208:	d115      	bne.n	8008236 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68da      	ldr	r2, [r3, #12]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008214:	b292      	uxth	r2, r2
 8008216:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821c:	1c9a      	adds	r2, r3, #2
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008228:	b29b      	uxth	r3, r3
 800822a:	3b01      	subs	r3, #1
 800822c:	b29a      	uxth	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008234:	e011      	b.n	800825a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008236:	f7fe f88b 	bl	8006350 <HAL_GetTick>
 800823a:	4602      	mov	r2, r0
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	683a      	ldr	r2, [r7, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	d803      	bhi.n	800824e <HAL_SPI_Receive+0x208>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824c:	d102      	bne.n	8008254 <HAL_SPI_Receive+0x20e>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d102      	bne.n	800825a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008258:	e018      	b.n	800828c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008260:	b29b      	uxth	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1ca      	bne.n	80081fc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 fb48 	bl	8008900 <SPI_EndRxTransaction>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2220      	movs	r2, #32
 800827a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	75fb      	strb	r3, [r7, #23]
 8008288:	e000      	b.n	800828c <HAL_SPI_Receive+0x246>
  }

error :
 800828a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800829c:	7dfb      	ldrb	r3, [r7, #23]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3718      	adds	r7, #24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b08a      	sub	sp, #40	; 0x28
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	60f8      	str	r0, [r7, #12]
 80082ae:	60b9      	str	r1, [r7, #8]
 80082b0:	607a      	str	r2, [r7, #4]
 80082b2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80082b4:	2301      	movs	r3, #1
 80082b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d101      	bne.n	80082cc <HAL_SPI_TransmitReceive+0x26>
 80082c8:	2302      	movs	r3, #2
 80082ca:	e1fb      	b.n	80086c4 <HAL_SPI_TransmitReceive+0x41e>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082d4:	f7fe f83c 	bl	8006350 <HAL_GetTick>
 80082d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80082e8:	887b      	ldrh	r3, [r7, #2]
 80082ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80082ec:	887b      	ldrh	r3, [r7, #2]
 80082ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80082f0:	7efb      	ldrb	r3, [r7, #27]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d00e      	beq.n	8008314 <HAL_SPI_TransmitReceive+0x6e>
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082fc:	d106      	bne.n	800830c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d102      	bne.n	800830c <HAL_SPI_TransmitReceive+0x66>
 8008306:	7efb      	ldrb	r3, [r7, #27]
 8008308:	2b04      	cmp	r3, #4
 800830a:	d003      	beq.n	8008314 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800830c:	2302      	movs	r3, #2
 800830e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008312:	e1cd      	b.n	80086b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d005      	beq.n	8008326 <HAL_SPI_TransmitReceive+0x80>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <HAL_SPI_TransmitReceive+0x80>
 8008320:	887b      	ldrh	r3, [r7, #2]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d103      	bne.n	800832e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800832c:	e1c0      	b.n	80086b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b04      	cmp	r3, #4
 8008338:	d003      	beq.n	8008342 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2205      	movs	r2, #5
 800833e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	887a      	ldrh	r2, [r7, #2]
 8008352:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	887a      	ldrh	r2, [r7, #2]
 800835a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	887a      	ldrh	r2, [r7, #2]
 8008368:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	887a      	ldrh	r2, [r7, #2]
 800836e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008384:	d802      	bhi.n	800838c <HAL_SPI_TransmitReceive+0xe6>
 8008386:	8a3b      	ldrh	r3, [r7, #16]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d908      	bls.n	800839e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800839a:	605a      	str	r2, [r3, #4]
 800839c:	e007      	b.n	80083ae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b8:	2b40      	cmp	r3, #64	; 0x40
 80083ba:	d007      	beq.n	80083cc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083d4:	d97c      	bls.n	80084d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d002      	beq.n	80083e4 <HAL_SPI_TransmitReceive+0x13e>
 80083de:	8a7b      	ldrh	r3, [r7, #18]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d169      	bne.n	80084b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e8:	881a      	ldrh	r2, [r3, #0]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f4:	1c9a      	adds	r2, r3, #2
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083fe:	b29b      	uxth	r3, r3
 8008400:	3b01      	subs	r3, #1
 8008402:	b29a      	uxth	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008408:	e056      	b.n	80084b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f003 0302 	and.w	r3, r3, #2
 8008414:	2b02      	cmp	r3, #2
 8008416:	d11b      	bne.n	8008450 <HAL_SPI_TransmitReceive+0x1aa>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800841c:	b29b      	uxth	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d016      	beq.n	8008450 <HAL_SPI_TransmitReceive+0x1aa>
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	2b01      	cmp	r3, #1
 8008426:	d113      	bne.n	8008450 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842c:	881a      	ldrh	r2, [r3, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008438:	1c9a      	adds	r2, r3, #2
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008442:	b29b      	uxth	r3, r3
 8008444:	3b01      	subs	r3, #1
 8008446:	b29a      	uxth	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b01      	cmp	r3, #1
 800845c:	d11c      	bne.n	8008498 <HAL_SPI_TransmitReceive+0x1f2>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008464:	b29b      	uxth	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d016      	beq.n	8008498 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68da      	ldr	r2, [r3, #12]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008474:	b292      	uxth	r2, r2
 8008476:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847c:	1c9a      	adds	r2, r3, #2
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008488:	b29b      	uxth	r3, r3
 800848a:	3b01      	subs	r3, #1
 800848c:	b29a      	uxth	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008494:	2301      	movs	r3, #1
 8008496:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008498:	f7fd ff5a 	bl	8006350 <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d807      	bhi.n	80084b8 <HAL_SPI_TransmitReceive+0x212>
 80084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ae:	d003      	beq.n	80084b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80084b6:	e0fb      	b.n	80086b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084bc:	b29b      	uxth	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1a3      	bne.n	800840a <HAL_SPI_TransmitReceive+0x164>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d19d      	bne.n	800840a <HAL_SPI_TransmitReceive+0x164>
 80084ce:	e0df      	b.n	8008690 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d003      	beq.n	80084e0 <HAL_SPI_TransmitReceive+0x23a>
 80084d8:	8a7b      	ldrh	r3, [r7, #18]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	f040 80cb 	bne.w	8008676 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d912      	bls.n	8008510 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ee:	881a      	ldrh	r2, [r3, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fa:	1c9a      	adds	r2, r3, #2
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008504:	b29b      	uxth	r3, r3
 8008506:	3b02      	subs	r3, #2
 8008508:	b29a      	uxth	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800850e:	e0b2      	b.n	8008676 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	330c      	adds	r3, #12
 800851a:	7812      	ldrb	r2, [r2, #0]
 800851c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800852c:	b29b      	uxth	r3, r3
 800852e:	3b01      	subs	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008536:	e09e      	b.n	8008676 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f003 0302 	and.w	r3, r3, #2
 8008542:	2b02      	cmp	r3, #2
 8008544:	d134      	bne.n	80085b0 <HAL_SPI_TransmitReceive+0x30a>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800854a:	b29b      	uxth	r3, r3
 800854c:	2b00      	cmp	r3, #0
 800854e:	d02f      	beq.n	80085b0 <HAL_SPI_TransmitReceive+0x30a>
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	2b01      	cmp	r3, #1
 8008554:	d12c      	bne.n	80085b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800855a:	b29b      	uxth	r3, r3
 800855c:	2b01      	cmp	r3, #1
 800855e:	d912      	bls.n	8008586 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008564:	881a      	ldrh	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008570:	1c9a      	adds	r2, r3, #2
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800857a:	b29b      	uxth	r3, r3
 800857c:	3b02      	subs	r3, #2
 800857e:	b29a      	uxth	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008584:	e012      	b.n	80085ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	330c      	adds	r3, #12
 8008590:	7812      	ldrb	r2, [r2, #0]
 8008592:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	3b01      	subs	r3, #1
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085ac:	2300      	movs	r3, #0
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d148      	bne.n	8008650 <HAL_SPI_TransmitReceive+0x3aa>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d042      	beq.n	8008650 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d923      	bls.n	800861e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68da      	ldr	r2, [r3, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e0:	b292      	uxth	r2, r2
 80085e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e8:	1c9a      	adds	r2, r3, #2
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	3b02      	subs	r3, #2
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008606:	b29b      	uxth	r3, r3
 8008608:	2b01      	cmp	r3, #1
 800860a:	d81f      	bhi.n	800864c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685a      	ldr	r2, [r3, #4]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800861a:	605a      	str	r2, [r3, #4]
 800861c:	e016      	b.n	800864c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f103 020c 	add.w	r2, r3, #12
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862a:	7812      	ldrb	r2, [r2, #0]
 800862c:	b2d2      	uxtb	r2, r2
 800862e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008634:	1c5a      	adds	r2, r3, #1
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008640:	b29b      	uxth	r3, r3
 8008642:	3b01      	subs	r3, #1
 8008644:	b29a      	uxth	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800864c:	2301      	movs	r3, #1
 800864e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008650:	f7fd fe7e 	bl	8006350 <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800865c:	429a      	cmp	r2, r3
 800865e:	d803      	bhi.n	8008668 <HAL_SPI_TransmitReceive+0x3c2>
 8008660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008666:	d102      	bne.n	800866e <HAL_SPI_TransmitReceive+0x3c8>
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	2b00      	cmp	r3, #0
 800866c:	d103      	bne.n	8008676 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008674:	e01c      	b.n	80086b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800867a:	b29b      	uxth	r3, r3
 800867c:	2b00      	cmp	r3, #0
 800867e:	f47f af5b 	bne.w	8008538 <HAL_SPI_TransmitReceive+0x292>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008688:	b29b      	uxth	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	f47f af54 	bne.w	8008538 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008690:	69fa      	ldr	r2, [r7, #28]
 8008692:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 f98b 	bl	80089b0 <SPI_EndRxTxTransaction>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d006      	beq.n	80086ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2220      	movs	r2, #32
 80086aa:	661a      	str	r2, [r3, #96]	; 0x60
 80086ac:	e000      	b.n	80086b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80086ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80086c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3728      	adds	r7, #40	; 0x28
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b088      	sub	sp, #32
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	603b      	str	r3, [r7, #0]
 80086d8:	4613      	mov	r3, r2
 80086da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086dc:	f7fd fe38 	bl	8006350 <HAL_GetTick>
 80086e0:	4602      	mov	r2, r0
 80086e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e4:	1a9b      	subs	r3, r3, r2
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	4413      	add	r3, r2
 80086ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086ec:	f7fd fe30 	bl	8006350 <HAL_GetTick>
 80086f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086f2:	4b39      	ldr	r3, [pc, #228]	; (80087d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	015b      	lsls	r3, r3, #5
 80086f8:	0d1b      	lsrs	r3, r3, #20
 80086fa:	69fa      	ldr	r2, [r7, #28]
 80086fc:	fb02 f303 	mul.w	r3, r2, r3
 8008700:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008702:	e054      	b.n	80087ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800870a:	d050      	beq.n	80087ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800870c:	f7fd fe20 	bl	8006350 <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	69fa      	ldr	r2, [r7, #28]
 8008718:	429a      	cmp	r2, r3
 800871a:	d902      	bls.n	8008722 <SPI_WaitFlagStateUntilTimeout+0x56>
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d13d      	bne.n	800879e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008730:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800873a:	d111      	bne.n	8008760 <SPI_WaitFlagStateUntilTimeout+0x94>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008744:	d004      	beq.n	8008750 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800874e:	d107      	bne.n	8008760 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800875e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008768:	d10f      	bne.n	800878a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008778:	601a      	str	r2, [r3, #0]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008788:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e017      	b.n	80087ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80087a4:	2300      	movs	r3, #0
 80087a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	4013      	ands	r3, r2
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	bf0c      	ite	eq
 80087be:	2301      	moveq	r3, #1
 80087c0:	2300      	movne	r3, #0
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	461a      	mov	r2, r3
 80087c6:	79fb      	ldrb	r3, [r7, #7]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d19b      	bne.n	8008704 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3720      	adds	r7, #32
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20000140 	.word	0x20000140

080087dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b088      	sub	sp, #32
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80087ea:	f7fd fdb1 	bl	8006350 <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f2:	1a9b      	subs	r3, r3, r2
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	4413      	add	r3, r2
 80087f8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80087fa:	f7fd fda9 	bl	8006350 <HAL_GetTick>
 80087fe:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008800:	4b3e      	ldr	r3, [pc, #248]	; (80088fc <SPI_WaitFifoStateUntilTimeout+0x120>)
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	4613      	mov	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	00da      	lsls	r2, r3, #3
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	0d1b      	lsrs	r3, r3, #20
 8008810:	69fa      	ldr	r2, [r7, #28]
 8008812:	fb02 f303 	mul.w	r3, r2, r3
 8008816:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8008818:	e062      	b.n	80088e0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008820:	d109      	bne.n	8008836 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d106      	bne.n	8008836 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	330c      	adds	r3, #12
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	b2db      	uxtb	r3, r3
 8008832:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8008834:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800883c:	d050      	beq.n	80088e0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800883e:	f7fd fd87 	bl	8006350 <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	69fa      	ldr	r2, [r7, #28]
 800884a:	429a      	cmp	r2, r3
 800884c:	d902      	bls.n	8008854 <SPI_WaitFifoStateUntilTimeout+0x78>
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d13d      	bne.n	80088d0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	685a      	ldr	r2, [r3, #4]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008862:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800886c:	d111      	bne.n	8008892 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008876:	d004      	beq.n	8008882 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008880:	d107      	bne.n	8008892 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008890:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800889a:	d10f      	bne.n	80088bc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e010      	b.n	80088f2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	3b01      	subs	r3, #1
 80088de:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	689a      	ldr	r2, [r3, #8]
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	4013      	ands	r3, r2
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d194      	bne.n	800881a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3720      	adds	r7, #32
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	20000140 	.word	0x20000140

08008900 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b086      	sub	sp, #24
 8008904:	af02      	add	r7, sp, #8
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008914:	d111      	bne.n	800893a <SPI_EndRxTransaction+0x3a>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800891e:	d004      	beq.n	800892a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008928:	d107      	bne.n	800893a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008938:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	2200      	movs	r2, #0
 8008942:	2180      	movs	r1, #128	; 0x80
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f7ff fec1 	bl	80086cc <SPI_WaitFlagStateUntilTimeout>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d007      	beq.n	8008960 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008954:	f043 0220 	orr.w	r2, r3, #32
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e023      	b.n	80089a8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008968:	d11d      	bne.n	80089a6 <SPI_EndRxTransaction+0xa6>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008972:	d004      	beq.n	800897e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800897c:	d113      	bne.n	80089a6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2200      	movs	r2, #0
 8008986:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f7ff ff26 	bl	80087dc <SPI_WaitFifoStateUntilTimeout>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d007      	beq.n	80089a6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800899a:	f043 0220 	orr.w	r2, r3, #32
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e000      	b.n	80089a8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af02      	add	r7, sp, #8
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f7ff ff07 	bl	80087dc <SPI_WaitFifoStateUntilTimeout>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d007      	beq.n	80089e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089d8:	f043 0220 	orr.w	r2, r3, #32
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e027      	b.n	8008a34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2200      	movs	r2, #0
 80089ec:	2180      	movs	r1, #128	; 0x80
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f7ff fe6c 	bl	80086cc <SPI_WaitFlagStateUntilTimeout>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d007      	beq.n	8008a0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089fe:	f043 0220 	orr.w	r2, r3, #32
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e014      	b.n	8008a34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f7ff fee0 	bl	80087dc <SPI_WaitFifoStateUntilTimeout>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d007      	beq.n	8008a32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a26:	f043 0220 	orr.w	r2, r3, #32
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e000      	b.n	8008a34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e049      	b.n	8008ae2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d106      	bne.n	8008a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f7fc ffba 	bl	80059dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	3304      	adds	r3, #4
 8008a78:	4619      	mov	r1, r3
 8008a7a:	4610      	mov	r0, r2
 8008a7c:	f000 fdc2 	bl	8009604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
	...

08008aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d001      	beq.n	8008b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e04f      	b.n	8008ba4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2202      	movs	r2, #2
 8008b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68da      	ldr	r2, [r3, #12]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f042 0201 	orr.w	r2, r2, #1
 8008b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a23      	ldr	r2, [pc, #140]	; (8008bb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d01d      	beq.n	8008b62 <HAL_TIM_Base_Start_IT+0x76>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b2e:	d018      	beq.n	8008b62 <HAL_TIM_Base_Start_IT+0x76>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a1f      	ldr	r2, [pc, #124]	; (8008bb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d013      	beq.n	8008b62 <HAL_TIM_Base_Start_IT+0x76>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a1e      	ldr	r2, [pc, #120]	; (8008bb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d00e      	beq.n	8008b62 <HAL_TIM_Base_Start_IT+0x76>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a1c      	ldr	r2, [pc, #112]	; (8008bbc <HAL_TIM_Base_Start_IT+0xd0>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d009      	beq.n	8008b62 <HAL_TIM_Base_Start_IT+0x76>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a1b      	ldr	r2, [pc, #108]	; (8008bc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d004      	beq.n	8008b62 <HAL_TIM_Base_Start_IT+0x76>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a19      	ldr	r2, [pc, #100]	; (8008bc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d115      	bne.n	8008b8e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	689a      	ldr	r2, [r3, #8]
 8008b68:	4b17      	ldr	r3, [pc, #92]	; (8008bc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2b06      	cmp	r3, #6
 8008b72:	d015      	beq.n	8008ba0 <HAL_TIM_Base_Start_IT+0xb4>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b7a:	d011      	beq.n	8008ba0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f042 0201 	orr.w	r2, r2, #1
 8008b8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b8c:	e008      	b.n	8008ba0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f042 0201 	orr.w	r2, r2, #1
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	e000      	b.n	8008ba2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ba0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	40012c00 	.word	0x40012c00
 8008bb4:	40000400 	.word	0x40000400
 8008bb8:	40000800 	.word	0x40000800
 8008bbc:	40000c00 	.word	0x40000c00
 8008bc0:	40013400 	.word	0x40013400
 8008bc4:	40014000 	.word	0x40014000
 8008bc8:	00010007 	.word	0x00010007

08008bcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e049      	b.n	8008c72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d106      	bne.n	8008bf8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f841 	bl	8008c7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	3304      	adds	r3, #4
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4610      	mov	r0, r2
 8008c0c:	f000 fcfa 	bl	8009604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b083      	sub	sp, #12
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c82:	bf00      	nop
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
	...

08008c90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d109      	bne.n	8008cb4 <HAL_TIM_PWM_Start+0x24>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	bf14      	ite	ne
 8008cac:	2301      	movne	r3, #1
 8008cae:	2300      	moveq	r3, #0
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	e03c      	b.n	8008d2e <HAL_TIM_PWM_Start+0x9e>
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	d109      	bne.n	8008cce <HAL_TIM_PWM_Start+0x3e>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	bf14      	ite	ne
 8008cc6:	2301      	movne	r3, #1
 8008cc8:	2300      	moveq	r3, #0
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	e02f      	b.n	8008d2e <HAL_TIM_PWM_Start+0x9e>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b08      	cmp	r3, #8
 8008cd2:	d109      	bne.n	8008ce8 <HAL_TIM_PWM_Start+0x58>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	bf14      	ite	ne
 8008ce0:	2301      	movne	r3, #1
 8008ce2:	2300      	moveq	r3, #0
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	e022      	b.n	8008d2e <HAL_TIM_PWM_Start+0x9e>
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	2b0c      	cmp	r3, #12
 8008cec:	d109      	bne.n	8008d02 <HAL_TIM_PWM_Start+0x72>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	bf14      	ite	ne
 8008cfa:	2301      	movne	r3, #1
 8008cfc:	2300      	moveq	r3, #0
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	e015      	b.n	8008d2e <HAL_TIM_PWM_Start+0x9e>
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2b10      	cmp	r3, #16
 8008d06:	d109      	bne.n	8008d1c <HAL_TIM_PWM_Start+0x8c>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	bf14      	ite	ne
 8008d14:	2301      	movne	r3, #1
 8008d16:	2300      	moveq	r3, #0
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	e008      	b.n	8008d2e <HAL_TIM_PWM_Start+0x9e>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	bf14      	ite	ne
 8008d28:	2301      	movne	r3, #1
 8008d2a:	2300      	moveq	r3, #0
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e09c      	b.n	8008e70 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d104      	bne.n	8008d46 <HAL_TIM_PWM_Start+0xb6>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d44:	e023      	b.n	8008d8e <HAL_TIM_PWM_Start+0xfe>
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	d104      	bne.n	8008d56 <HAL_TIM_PWM_Start+0xc6>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2202      	movs	r2, #2
 8008d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d54:	e01b      	b.n	8008d8e <HAL_TIM_PWM_Start+0xfe>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b08      	cmp	r3, #8
 8008d5a:	d104      	bne.n	8008d66 <HAL_TIM_PWM_Start+0xd6>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2202      	movs	r2, #2
 8008d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d64:	e013      	b.n	8008d8e <HAL_TIM_PWM_Start+0xfe>
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b0c      	cmp	r3, #12
 8008d6a:	d104      	bne.n	8008d76 <HAL_TIM_PWM_Start+0xe6>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2202      	movs	r2, #2
 8008d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d74:	e00b      	b.n	8008d8e <HAL_TIM_PWM_Start+0xfe>
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b10      	cmp	r3, #16
 8008d7a:	d104      	bne.n	8008d86 <HAL_TIM_PWM_Start+0xf6>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d84:	e003      	b.n	8008d8e <HAL_TIM_PWM_Start+0xfe>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2202      	movs	r2, #2
 8008d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2201      	movs	r2, #1
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f001 f83e 	bl	8009e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a35      	ldr	r2, [pc, #212]	; (8008e78 <HAL_TIM_PWM_Start+0x1e8>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d013      	beq.n	8008dce <HAL_TIM_PWM_Start+0x13e>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a34      	ldr	r2, [pc, #208]	; (8008e7c <HAL_TIM_PWM_Start+0x1ec>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d00e      	beq.n	8008dce <HAL_TIM_PWM_Start+0x13e>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a32      	ldr	r2, [pc, #200]	; (8008e80 <HAL_TIM_PWM_Start+0x1f0>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d009      	beq.n	8008dce <HAL_TIM_PWM_Start+0x13e>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a31      	ldr	r2, [pc, #196]	; (8008e84 <HAL_TIM_PWM_Start+0x1f4>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d004      	beq.n	8008dce <HAL_TIM_PWM_Start+0x13e>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a2f      	ldr	r2, [pc, #188]	; (8008e88 <HAL_TIM_PWM_Start+0x1f8>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d101      	bne.n	8008dd2 <HAL_TIM_PWM_Start+0x142>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e000      	b.n	8008dd4 <HAL_TIM_PWM_Start+0x144>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d007      	beq.n	8008de8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008de6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a22      	ldr	r2, [pc, #136]	; (8008e78 <HAL_TIM_PWM_Start+0x1e8>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d01d      	beq.n	8008e2e <HAL_TIM_PWM_Start+0x19e>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dfa:	d018      	beq.n	8008e2e <HAL_TIM_PWM_Start+0x19e>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a22      	ldr	r2, [pc, #136]	; (8008e8c <HAL_TIM_PWM_Start+0x1fc>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d013      	beq.n	8008e2e <HAL_TIM_PWM_Start+0x19e>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a21      	ldr	r2, [pc, #132]	; (8008e90 <HAL_TIM_PWM_Start+0x200>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d00e      	beq.n	8008e2e <HAL_TIM_PWM_Start+0x19e>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a1f      	ldr	r2, [pc, #124]	; (8008e94 <HAL_TIM_PWM_Start+0x204>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d009      	beq.n	8008e2e <HAL_TIM_PWM_Start+0x19e>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a17      	ldr	r2, [pc, #92]	; (8008e7c <HAL_TIM_PWM_Start+0x1ec>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d004      	beq.n	8008e2e <HAL_TIM_PWM_Start+0x19e>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a15      	ldr	r2, [pc, #84]	; (8008e80 <HAL_TIM_PWM_Start+0x1f0>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d115      	bne.n	8008e5a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	689a      	ldr	r2, [r3, #8]
 8008e34:	4b18      	ldr	r3, [pc, #96]	; (8008e98 <HAL_TIM_PWM_Start+0x208>)
 8008e36:	4013      	ands	r3, r2
 8008e38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b06      	cmp	r3, #6
 8008e3e:	d015      	beq.n	8008e6c <HAL_TIM_PWM_Start+0x1dc>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e46:	d011      	beq.n	8008e6c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f042 0201 	orr.w	r2, r2, #1
 8008e56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e58:	e008      	b.n	8008e6c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f042 0201 	orr.w	r2, r2, #1
 8008e68:	601a      	str	r2, [r3, #0]
 8008e6a:	e000      	b.n	8008e6e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	40012c00 	.word	0x40012c00
 8008e7c:	40013400 	.word	0x40013400
 8008e80:	40014000 	.word	0x40014000
 8008e84:	40014400 	.word	0x40014400
 8008e88:	40014800 	.word	0x40014800
 8008e8c:	40000400 	.word	0x40000400
 8008e90:	40000800 	.word	0x40000800
 8008e94:	40000c00 	.word	0x40000c00
 8008e98:	00010007 	.word	0x00010007

08008e9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 ffb2 	bl	8009e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a3e      	ldr	r2, [pc, #248]	; (8008fb4 <HAL_TIM_PWM_Stop+0x118>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d013      	beq.n	8008ee6 <HAL_TIM_PWM_Stop+0x4a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a3d      	ldr	r2, [pc, #244]	; (8008fb8 <HAL_TIM_PWM_Stop+0x11c>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d00e      	beq.n	8008ee6 <HAL_TIM_PWM_Stop+0x4a>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a3b      	ldr	r2, [pc, #236]	; (8008fbc <HAL_TIM_PWM_Stop+0x120>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d009      	beq.n	8008ee6 <HAL_TIM_PWM_Stop+0x4a>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a3a      	ldr	r2, [pc, #232]	; (8008fc0 <HAL_TIM_PWM_Stop+0x124>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d004      	beq.n	8008ee6 <HAL_TIM_PWM_Stop+0x4a>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a38      	ldr	r2, [pc, #224]	; (8008fc4 <HAL_TIM_PWM_Stop+0x128>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d101      	bne.n	8008eea <HAL_TIM_PWM_Stop+0x4e>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e000      	b.n	8008eec <HAL_TIM_PWM_Stop+0x50>
 8008eea:	2300      	movs	r3, #0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d017      	beq.n	8008f20 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6a1a      	ldr	r2, [r3, #32]
 8008ef6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008efa:	4013      	ands	r3, r2
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10f      	bne.n	8008f20 <HAL_TIM_PWM_Stop+0x84>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6a1a      	ldr	r2, [r3, #32]
 8008f06:	f240 4344 	movw	r3, #1092	; 0x444
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d107      	bne.n	8008f20 <HAL_TIM_PWM_Stop+0x84>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6a1a      	ldr	r2, [r3, #32]
 8008f26:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10f      	bne.n	8008f50 <HAL_TIM_PWM_Stop+0xb4>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6a1a      	ldr	r2, [r3, #32]
 8008f36:	f240 4344 	movw	r3, #1092	; 0x444
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d107      	bne.n	8008f50 <HAL_TIM_PWM_Stop+0xb4>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f022 0201 	bic.w	r2, r2, #1
 8008f4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d104      	bne.n	8008f60 <HAL_TIM_PWM_Stop+0xc4>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f5e:	e023      	b.n	8008fa8 <HAL_TIM_PWM_Stop+0x10c>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2b04      	cmp	r3, #4
 8008f64:	d104      	bne.n	8008f70 <HAL_TIM_PWM_Stop+0xd4>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f6e:	e01b      	b.n	8008fa8 <HAL_TIM_PWM_Stop+0x10c>
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	2b08      	cmp	r3, #8
 8008f74:	d104      	bne.n	8008f80 <HAL_TIM_PWM_Stop+0xe4>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f7e:	e013      	b.n	8008fa8 <HAL_TIM_PWM_Stop+0x10c>
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	2b0c      	cmp	r3, #12
 8008f84:	d104      	bne.n	8008f90 <HAL_TIM_PWM_Stop+0xf4>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f8e:	e00b      	b.n	8008fa8 <HAL_TIM_PWM_Stop+0x10c>
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	2b10      	cmp	r3, #16
 8008f94:	d104      	bne.n	8008fa0 <HAL_TIM_PWM_Stop+0x104>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f9e:	e003      	b.n	8008fa8 <HAL_TIM_PWM_Stop+0x10c>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	40012c00 	.word	0x40012c00
 8008fb8:	40013400 	.word	0x40013400
 8008fbc:	40014000 	.word	0x40014000
 8008fc0:	40014400 	.word	0x40014400
 8008fc4:	40014800 	.word	0x40014800

08008fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	f003 0302 	and.w	r3, r3, #2
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d122      	bne.n	8009024 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	f003 0302 	and.w	r3, r3, #2
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d11b      	bne.n	8009024 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f06f 0202 	mvn.w	r2, #2
 8008ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	f003 0303 	and.w	r3, r3, #3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fadc 	bl	80095c8 <HAL_TIM_IC_CaptureCallback>
 8009010:	e005      	b.n	800901e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 face 	bl	80095b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fadf 	bl	80095dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	f003 0304 	and.w	r3, r3, #4
 800902e:	2b04      	cmp	r3, #4
 8009030:	d122      	bne.n	8009078 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	f003 0304 	and.w	r3, r3, #4
 800903c:	2b04      	cmp	r3, #4
 800903e:	d11b      	bne.n	8009078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f06f 0204 	mvn.w	r2, #4
 8009048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2202      	movs	r2, #2
 800904e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fab2 	bl	80095c8 <HAL_TIM_IC_CaptureCallback>
 8009064:	e005      	b.n	8009072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 faa4 	bl	80095b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fab5 	bl	80095dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	f003 0308 	and.w	r3, r3, #8
 8009082:	2b08      	cmp	r3, #8
 8009084:	d122      	bne.n	80090cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	f003 0308 	and.w	r3, r3, #8
 8009090:	2b08      	cmp	r3, #8
 8009092:	d11b      	bne.n	80090cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f06f 0208 	mvn.w	r2, #8
 800909c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2204      	movs	r2, #4
 80090a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	f003 0303 	and.w	r3, r3, #3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 fa88 	bl	80095c8 <HAL_TIM_IC_CaptureCallback>
 80090b8:	e005      	b.n	80090c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fa7a 	bl	80095b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fa8b 	bl	80095dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	f003 0310 	and.w	r3, r3, #16
 80090d6:	2b10      	cmp	r3, #16
 80090d8:	d122      	bne.n	8009120 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	f003 0310 	and.w	r3, r3, #16
 80090e4:	2b10      	cmp	r3, #16
 80090e6:	d11b      	bne.n	8009120 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f06f 0210 	mvn.w	r2, #16
 80090f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2208      	movs	r2, #8
 80090f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	69db      	ldr	r3, [r3, #28]
 80090fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009102:	2b00      	cmp	r3, #0
 8009104:	d003      	beq.n	800910e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fa5e 	bl	80095c8 <HAL_TIM_IC_CaptureCallback>
 800910c:	e005      	b.n	800911a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fa50 	bl	80095b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fa61 	bl	80095dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	2b01      	cmp	r3, #1
 800912c:	d10e      	bne.n	800914c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f003 0301 	and.w	r3, r3, #1
 8009138:	2b01      	cmp	r3, #1
 800913a:	d107      	bne.n	800914c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f06f 0201 	mvn.w	r2, #1
 8009144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7f9 fea0 	bl	8002e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009156:	2b80      	cmp	r3, #128	; 0x80
 8009158:	d10e      	bne.n	8009178 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009164:	2b80      	cmp	r3, #128	; 0x80
 8009166:	d107      	bne.n	8009178 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 ff08 	bl	8009f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009186:	d10e      	bne.n	80091a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009192:	2b80      	cmp	r3, #128	; 0x80
 8009194:	d107      	bne.n	80091a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800919e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fefb 	bl	8009f9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b0:	2b40      	cmp	r3, #64	; 0x40
 80091b2:	d10e      	bne.n	80091d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091be:	2b40      	cmp	r3, #64	; 0x40
 80091c0:	d107      	bne.n	80091d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fa0f 	bl	80095f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	f003 0320 	and.w	r3, r3, #32
 80091dc:	2b20      	cmp	r3, #32
 80091de:	d10e      	bne.n	80091fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	f003 0320 	and.w	r3, r3, #32
 80091ea:	2b20      	cmp	r3, #32
 80091ec:	d107      	bne.n	80091fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f06f 0220 	mvn.w	r2, #32
 80091f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 febb 	bl	8009f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091fe:	bf00      	nop
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800921a:	2b01      	cmp	r3, #1
 800921c:	d101      	bne.n	8009222 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800921e:	2302      	movs	r3, #2
 8009220:	e0fd      	b.n	800941e <HAL_TIM_PWM_ConfigChannel+0x216>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b14      	cmp	r3, #20
 800922e:	f200 80f0 	bhi.w	8009412 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009232:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009238:	0800928d 	.word	0x0800928d
 800923c:	08009413 	.word	0x08009413
 8009240:	08009413 	.word	0x08009413
 8009244:	08009413 	.word	0x08009413
 8009248:	080092cd 	.word	0x080092cd
 800924c:	08009413 	.word	0x08009413
 8009250:	08009413 	.word	0x08009413
 8009254:	08009413 	.word	0x08009413
 8009258:	0800930f 	.word	0x0800930f
 800925c:	08009413 	.word	0x08009413
 8009260:	08009413 	.word	0x08009413
 8009264:	08009413 	.word	0x08009413
 8009268:	0800934f 	.word	0x0800934f
 800926c:	08009413 	.word	0x08009413
 8009270:	08009413 	.word	0x08009413
 8009274:	08009413 	.word	0x08009413
 8009278:	08009391 	.word	0x08009391
 800927c:	08009413 	.word	0x08009413
 8009280:	08009413 	.word	0x08009413
 8009284:	08009413 	.word	0x08009413
 8009288:	080093d1 	.word	0x080093d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68b9      	ldr	r1, [r7, #8]
 8009292:	4618      	mov	r0, r3
 8009294:	f000 fa50 	bl	8009738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	699a      	ldr	r2, [r3, #24]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f042 0208 	orr.w	r2, r2, #8
 80092a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	699a      	ldr	r2, [r3, #24]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 0204 	bic.w	r2, r2, #4
 80092b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6999      	ldr	r1, [r3, #24]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	691a      	ldr	r2, [r3, #16]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	619a      	str	r2, [r3, #24]
      break;
 80092ca:	e0a3      	b.n	8009414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68b9      	ldr	r1, [r7, #8]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 fac0 	bl	8009858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699a      	ldr	r2, [r3, #24]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699a      	ldr	r2, [r3, #24]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6999      	ldr	r1, [r3, #24]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	021a      	lsls	r2, r3, #8
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	430a      	orrs	r2, r1
 800930a:	619a      	str	r2, [r3, #24]
      break;
 800930c:	e082      	b.n	8009414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68b9      	ldr	r1, [r7, #8]
 8009314:	4618      	mov	r0, r3
 8009316:	f000 fb29 	bl	800996c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	69da      	ldr	r2, [r3, #28]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f042 0208 	orr.w	r2, r2, #8
 8009328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	69da      	ldr	r2, [r3, #28]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 0204 	bic.w	r2, r2, #4
 8009338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	69d9      	ldr	r1, [r3, #28]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	691a      	ldr	r2, [r3, #16]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	430a      	orrs	r2, r1
 800934a:	61da      	str	r2, [r3, #28]
      break;
 800934c:	e062      	b.n	8009414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68b9      	ldr	r1, [r7, #8]
 8009354:	4618      	mov	r0, r3
 8009356:	f000 fb91 	bl	8009a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	69da      	ldr	r2, [r3, #28]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	69da      	ldr	r2, [r3, #28]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	69d9      	ldr	r1, [r3, #28]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	021a      	lsls	r2, r3, #8
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	61da      	str	r2, [r3, #28]
      break;
 800938e:	e041      	b.n	8009414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68b9      	ldr	r1, [r7, #8]
 8009396:	4618      	mov	r0, r3
 8009398:	f000 fbda 	bl	8009b50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f042 0208 	orr.w	r2, r2, #8
 80093aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f022 0204 	bic.w	r2, r2, #4
 80093ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	691a      	ldr	r2, [r3, #16]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	430a      	orrs	r2, r1
 80093cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093ce:	e021      	b.n	8009414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68b9      	ldr	r1, [r7, #8]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 fc1e 	bl	8009c18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	021a      	lsls	r2, r3, #8
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	430a      	orrs	r2, r1
 800940e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009410:	e000      	b.n	8009414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009412:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop

08009428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009438:	2b01      	cmp	r3, #1
 800943a:	d101      	bne.n	8009440 <HAL_TIM_ConfigClockSource+0x18>
 800943c:	2302      	movs	r3, #2
 800943e:	e0b5      	b.n	80095ac <HAL_TIM_ConfigClockSource+0x184>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2202      	movs	r2, #2
 800944c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800945e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009462:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800946a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800947c:	d03e      	beq.n	80094fc <HAL_TIM_ConfigClockSource+0xd4>
 800947e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009482:	f200 8087 	bhi.w	8009594 <HAL_TIM_ConfigClockSource+0x16c>
 8009486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800948a:	f000 8085 	beq.w	8009598 <HAL_TIM_ConfigClockSource+0x170>
 800948e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009492:	d87f      	bhi.n	8009594 <HAL_TIM_ConfigClockSource+0x16c>
 8009494:	2b70      	cmp	r3, #112	; 0x70
 8009496:	d01a      	beq.n	80094ce <HAL_TIM_ConfigClockSource+0xa6>
 8009498:	2b70      	cmp	r3, #112	; 0x70
 800949a:	d87b      	bhi.n	8009594 <HAL_TIM_ConfigClockSource+0x16c>
 800949c:	2b60      	cmp	r3, #96	; 0x60
 800949e:	d050      	beq.n	8009542 <HAL_TIM_ConfigClockSource+0x11a>
 80094a0:	2b60      	cmp	r3, #96	; 0x60
 80094a2:	d877      	bhi.n	8009594 <HAL_TIM_ConfigClockSource+0x16c>
 80094a4:	2b50      	cmp	r3, #80	; 0x50
 80094a6:	d03c      	beq.n	8009522 <HAL_TIM_ConfigClockSource+0xfa>
 80094a8:	2b50      	cmp	r3, #80	; 0x50
 80094aa:	d873      	bhi.n	8009594 <HAL_TIM_ConfigClockSource+0x16c>
 80094ac:	2b40      	cmp	r3, #64	; 0x40
 80094ae:	d058      	beq.n	8009562 <HAL_TIM_ConfigClockSource+0x13a>
 80094b0:	2b40      	cmp	r3, #64	; 0x40
 80094b2:	d86f      	bhi.n	8009594 <HAL_TIM_ConfigClockSource+0x16c>
 80094b4:	2b30      	cmp	r3, #48	; 0x30
 80094b6:	d064      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0x15a>
 80094b8:	2b30      	cmp	r3, #48	; 0x30
 80094ba:	d86b      	bhi.n	8009594 <HAL_TIM_ConfigClockSource+0x16c>
 80094bc:	2b20      	cmp	r3, #32
 80094be:	d060      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0x15a>
 80094c0:	2b20      	cmp	r3, #32
 80094c2:	d867      	bhi.n	8009594 <HAL_TIM_ConfigClockSource+0x16c>
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d05c      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0x15a>
 80094c8:	2b10      	cmp	r3, #16
 80094ca:	d05a      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80094cc:	e062      	b.n	8009594 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6818      	ldr	r0, [r3, #0]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	6899      	ldr	r1, [r3, #8]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	685a      	ldr	r2, [r3, #4]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f000 fc7b 	bl	8009dd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80094f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	609a      	str	r2, [r3, #8]
      break;
 80094fa:	e04e      	b.n	800959a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6818      	ldr	r0, [r3, #0]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	6899      	ldr	r1, [r3, #8]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685a      	ldr	r2, [r3, #4]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	f000 fc64 	bl	8009dd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	689a      	ldr	r2, [r3, #8]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800951e:	609a      	str	r2, [r3, #8]
      break;
 8009520:	e03b      	b.n	800959a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6818      	ldr	r0, [r3, #0]
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	6859      	ldr	r1, [r3, #4]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	461a      	mov	r2, r3
 8009530:	f000 fbd8 	bl	8009ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2150      	movs	r1, #80	; 0x50
 800953a:	4618      	mov	r0, r3
 800953c:	f000 fc31 	bl	8009da2 <TIM_ITRx_SetConfig>
      break;
 8009540:	e02b      	b.n	800959a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6818      	ldr	r0, [r3, #0]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	6859      	ldr	r1, [r3, #4]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	461a      	mov	r2, r3
 8009550:	f000 fbf7 	bl	8009d42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2160      	movs	r1, #96	; 0x60
 800955a:	4618      	mov	r0, r3
 800955c:	f000 fc21 	bl	8009da2 <TIM_ITRx_SetConfig>
      break;
 8009560:	e01b      	b.n	800959a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	6859      	ldr	r1, [r3, #4]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	461a      	mov	r2, r3
 8009570:	f000 fbb8 	bl	8009ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2140      	movs	r1, #64	; 0x40
 800957a:	4618      	mov	r0, r3
 800957c:	f000 fc11 	bl	8009da2 <TIM_ITRx_SetConfig>
      break;
 8009580:	e00b      	b.n	800959a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4619      	mov	r1, r3
 800958c:	4610      	mov	r0, r2
 800958e:	f000 fc08 	bl	8009da2 <TIM_ITRx_SetConfig>
        break;
 8009592:	e002      	b.n	800959a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8009594:	bf00      	nop
 8009596:	e000      	b.n	800959a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8009598:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a40      	ldr	r2, [pc, #256]	; (8009718 <TIM_Base_SetConfig+0x114>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d013      	beq.n	8009644 <TIM_Base_SetConfig+0x40>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009622:	d00f      	beq.n	8009644 <TIM_Base_SetConfig+0x40>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a3d      	ldr	r2, [pc, #244]	; (800971c <TIM_Base_SetConfig+0x118>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d00b      	beq.n	8009644 <TIM_Base_SetConfig+0x40>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a3c      	ldr	r2, [pc, #240]	; (8009720 <TIM_Base_SetConfig+0x11c>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d007      	beq.n	8009644 <TIM_Base_SetConfig+0x40>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a3b      	ldr	r2, [pc, #236]	; (8009724 <TIM_Base_SetConfig+0x120>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d003      	beq.n	8009644 <TIM_Base_SetConfig+0x40>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a3a      	ldr	r2, [pc, #232]	; (8009728 <TIM_Base_SetConfig+0x124>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d108      	bne.n	8009656 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800964a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	4313      	orrs	r3, r2
 8009654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a2f      	ldr	r2, [pc, #188]	; (8009718 <TIM_Base_SetConfig+0x114>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d01f      	beq.n	800969e <TIM_Base_SetConfig+0x9a>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009664:	d01b      	beq.n	800969e <TIM_Base_SetConfig+0x9a>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a2c      	ldr	r2, [pc, #176]	; (800971c <TIM_Base_SetConfig+0x118>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d017      	beq.n	800969e <TIM_Base_SetConfig+0x9a>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a2b      	ldr	r2, [pc, #172]	; (8009720 <TIM_Base_SetConfig+0x11c>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d013      	beq.n	800969e <TIM_Base_SetConfig+0x9a>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a2a      	ldr	r2, [pc, #168]	; (8009724 <TIM_Base_SetConfig+0x120>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d00f      	beq.n	800969e <TIM_Base_SetConfig+0x9a>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a29      	ldr	r2, [pc, #164]	; (8009728 <TIM_Base_SetConfig+0x124>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d00b      	beq.n	800969e <TIM_Base_SetConfig+0x9a>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a28      	ldr	r2, [pc, #160]	; (800972c <TIM_Base_SetConfig+0x128>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d007      	beq.n	800969e <TIM_Base_SetConfig+0x9a>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a27      	ldr	r2, [pc, #156]	; (8009730 <TIM_Base_SetConfig+0x12c>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d003      	beq.n	800969e <TIM_Base_SetConfig+0x9a>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a26      	ldr	r2, [pc, #152]	; (8009734 <TIM_Base_SetConfig+0x130>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d108      	bne.n	80096b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	689a      	ldr	r2, [r3, #8]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a10      	ldr	r2, [pc, #64]	; (8009718 <TIM_Base_SetConfig+0x114>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d00f      	beq.n	80096fc <TIM_Base_SetConfig+0xf8>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a12      	ldr	r2, [pc, #72]	; (8009728 <TIM_Base_SetConfig+0x124>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d00b      	beq.n	80096fc <TIM_Base_SetConfig+0xf8>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a11      	ldr	r2, [pc, #68]	; (800972c <TIM_Base_SetConfig+0x128>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d007      	beq.n	80096fc <TIM_Base_SetConfig+0xf8>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a10      	ldr	r2, [pc, #64]	; (8009730 <TIM_Base_SetConfig+0x12c>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d003      	beq.n	80096fc <TIM_Base_SetConfig+0xf8>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a0f      	ldr	r2, [pc, #60]	; (8009734 <TIM_Base_SetConfig+0x130>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d103      	bne.n	8009704 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	691a      	ldr	r2, [r3, #16]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	615a      	str	r2, [r3, #20]
}
 800970a:	bf00      	nop
 800970c:	3714      	adds	r7, #20
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	40012c00 	.word	0x40012c00
 800971c:	40000400 	.word	0x40000400
 8009720:	40000800 	.word	0x40000800
 8009724:	40000c00 	.word	0x40000c00
 8009728:	40013400 	.word	0x40013400
 800972c:	40014000 	.word	0x40014000
 8009730:	40014400 	.word	0x40014400
 8009734:	40014800 	.word	0x40014800

08009738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009738:	b480      	push	{r7}
 800973a:	b087      	sub	sp, #28
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	f023 0201 	bic.w	r2, r3, #1
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800976a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f023 0303 	bic.w	r3, r3, #3
 8009772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	4313      	orrs	r3, r2
 800977c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f023 0302 	bic.w	r3, r3, #2
 8009784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	4313      	orrs	r3, r2
 800978e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a2c      	ldr	r2, [pc, #176]	; (8009844 <TIM_OC1_SetConfig+0x10c>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d00f      	beq.n	80097b8 <TIM_OC1_SetConfig+0x80>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a2b      	ldr	r2, [pc, #172]	; (8009848 <TIM_OC1_SetConfig+0x110>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d00b      	beq.n	80097b8 <TIM_OC1_SetConfig+0x80>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a2a      	ldr	r2, [pc, #168]	; (800984c <TIM_OC1_SetConfig+0x114>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d007      	beq.n	80097b8 <TIM_OC1_SetConfig+0x80>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a29      	ldr	r2, [pc, #164]	; (8009850 <TIM_OC1_SetConfig+0x118>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d003      	beq.n	80097b8 <TIM_OC1_SetConfig+0x80>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a28      	ldr	r2, [pc, #160]	; (8009854 <TIM_OC1_SetConfig+0x11c>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d10c      	bne.n	80097d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	f023 0308 	bic.w	r3, r3, #8
 80097be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	697a      	ldr	r2, [r7, #20]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	f023 0304 	bic.w	r3, r3, #4
 80097d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a1b      	ldr	r2, [pc, #108]	; (8009844 <TIM_OC1_SetConfig+0x10c>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d00f      	beq.n	80097fa <TIM_OC1_SetConfig+0xc2>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a1a      	ldr	r2, [pc, #104]	; (8009848 <TIM_OC1_SetConfig+0x110>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d00b      	beq.n	80097fa <TIM_OC1_SetConfig+0xc2>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a19      	ldr	r2, [pc, #100]	; (800984c <TIM_OC1_SetConfig+0x114>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d007      	beq.n	80097fa <TIM_OC1_SetConfig+0xc2>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a18      	ldr	r2, [pc, #96]	; (8009850 <TIM_OC1_SetConfig+0x118>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d003      	beq.n	80097fa <TIM_OC1_SetConfig+0xc2>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a17      	ldr	r2, [pc, #92]	; (8009854 <TIM_OC1_SetConfig+0x11c>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d111      	bne.n	800981e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	4313      	orrs	r3, r2
 8009812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	4313      	orrs	r3, r2
 800981c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	685a      	ldr	r2, [r3, #4]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	697a      	ldr	r2, [r7, #20]
 8009836:	621a      	str	r2, [r3, #32]
}
 8009838:	bf00      	nop
 800983a:	371c      	adds	r7, #28
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	40012c00 	.word	0x40012c00
 8009848:	40013400 	.word	0x40013400
 800984c:	40014000 	.word	0x40014000
 8009850:	40014400 	.word	0x40014400
 8009854:	40014800 	.word	0x40014800

08009858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009858:	b480      	push	{r7}
 800985a:	b087      	sub	sp, #28
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a1b      	ldr	r3, [r3, #32]
 8009866:	f023 0210 	bic.w	r2, r3, #16
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800988a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	021b      	lsls	r3, r3, #8
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	4313      	orrs	r3, r2
 800989e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	f023 0320 	bic.w	r3, r3, #32
 80098a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	011b      	lsls	r3, r3, #4
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a28      	ldr	r2, [pc, #160]	; (8009958 <TIM_OC2_SetConfig+0x100>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d003      	beq.n	80098c4 <TIM_OC2_SetConfig+0x6c>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a27      	ldr	r2, [pc, #156]	; (800995c <TIM_OC2_SetConfig+0x104>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d10d      	bne.n	80098e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	011b      	lsls	r3, r3, #4
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a1d      	ldr	r2, [pc, #116]	; (8009958 <TIM_OC2_SetConfig+0x100>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d00f      	beq.n	8009908 <TIM_OC2_SetConfig+0xb0>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a1c      	ldr	r2, [pc, #112]	; (800995c <TIM_OC2_SetConfig+0x104>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d00b      	beq.n	8009908 <TIM_OC2_SetConfig+0xb0>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a1b      	ldr	r2, [pc, #108]	; (8009960 <TIM_OC2_SetConfig+0x108>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d007      	beq.n	8009908 <TIM_OC2_SetConfig+0xb0>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a1a      	ldr	r2, [pc, #104]	; (8009964 <TIM_OC2_SetConfig+0x10c>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d003      	beq.n	8009908 <TIM_OC2_SetConfig+0xb0>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a19      	ldr	r2, [pc, #100]	; (8009968 <TIM_OC2_SetConfig+0x110>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d113      	bne.n	8009930 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800990e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	695b      	ldr	r3, [r3, #20]
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	4313      	orrs	r3, r2
 8009922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	4313      	orrs	r3, r2
 800992e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	693a      	ldr	r2, [r7, #16]
 8009934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	685a      	ldr	r2, [r3, #4]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	621a      	str	r2, [r3, #32]
}
 800994a:	bf00      	nop
 800994c:	371c      	adds	r7, #28
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	40012c00 	.word	0x40012c00
 800995c:	40013400 	.word	0x40013400
 8009960:	40014000 	.word	0x40014000
 8009964:	40014400 	.word	0x40014400
 8009968:	40014800 	.word	0x40014800

0800996c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800996c:	b480      	push	{r7}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	69db      	ldr	r3, [r3, #28]
 8009992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800999a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800999e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f023 0303 	bic.w	r3, r3, #3
 80099a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	021b      	lsls	r3, r3, #8
 80099c0:	697a      	ldr	r2, [r7, #20]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a27      	ldr	r2, [pc, #156]	; (8009a68 <TIM_OC3_SetConfig+0xfc>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d003      	beq.n	80099d6 <TIM_OC3_SetConfig+0x6a>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a26      	ldr	r2, [pc, #152]	; (8009a6c <TIM_OC3_SetConfig+0x100>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d10d      	bne.n	80099f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	021b      	lsls	r3, r3, #8
 80099e4:	697a      	ldr	r2, [r7, #20]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a1c      	ldr	r2, [pc, #112]	; (8009a68 <TIM_OC3_SetConfig+0xfc>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d00f      	beq.n	8009a1a <TIM_OC3_SetConfig+0xae>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a1b      	ldr	r2, [pc, #108]	; (8009a6c <TIM_OC3_SetConfig+0x100>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d00b      	beq.n	8009a1a <TIM_OC3_SetConfig+0xae>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a1a      	ldr	r2, [pc, #104]	; (8009a70 <TIM_OC3_SetConfig+0x104>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d007      	beq.n	8009a1a <TIM_OC3_SetConfig+0xae>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a19      	ldr	r2, [pc, #100]	; (8009a74 <TIM_OC3_SetConfig+0x108>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d003      	beq.n	8009a1a <TIM_OC3_SetConfig+0xae>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a18      	ldr	r2, [pc, #96]	; (8009a78 <TIM_OC3_SetConfig+0x10c>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d113      	bne.n	8009a42 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	011b      	lsls	r3, r3, #4
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	011b      	lsls	r3, r3, #4
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	693a      	ldr	r2, [r7, #16]
 8009a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	697a      	ldr	r2, [r7, #20]
 8009a5a:	621a      	str	r2, [r3, #32]
}
 8009a5c:	bf00      	nop
 8009a5e:	371c      	adds	r7, #28
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	40012c00 	.word	0x40012c00
 8009a6c:	40013400 	.word	0x40013400
 8009a70:	40014000 	.word	0x40014000
 8009a74:	40014400 	.word	0x40014400
 8009a78:	40014800 	.word	0x40014800

08009a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b087      	sub	sp, #28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a1b      	ldr	r3, [r3, #32]
 8009a8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	69db      	ldr	r3, [r3, #28]
 8009aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	021b      	lsls	r3, r3, #8
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	031b      	lsls	r3, r3, #12
 8009ad2:	693a      	ldr	r2, [r7, #16]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a18      	ldr	r2, [pc, #96]	; (8009b3c <TIM_OC4_SetConfig+0xc0>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d00f      	beq.n	8009b00 <TIM_OC4_SetConfig+0x84>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a17      	ldr	r2, [pc, #92]	; (8009b40 <TIM_OC4_SetConfig+0xc4>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d00b      	beq.n	8009b00 <TIM_OC4_SetConfig+0x84>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a16      	ldr	r2, [pc, #88]	; (8009b44 <TIM_OC4_SetConfig+0xc8>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d007      	beq.n	8009b00 <TIM_OC4_SetConfig+0x84>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a15      	ldr	r2, [pc, #84]	; (8009b48 <TIM_OC4_SetConfig+0xcc>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d003      	beq.n	8009b00 <TIM_OC4_SetConfig+0x84>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a14      	ldr	r2, [pc, #80]	; (8009b4c <TIM_OC4_SetConfig+0xd0>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d109      	bne.n	8009b14 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	695b      	ldr	r3, [r3, #20]
 8009b0c:	019b      	lsls	r3, r3, #6
 8009b0e:	697a      	ldr	r2, [r7, #20]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	685a      	ldr	r2, [r3, #4]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	693a      	ldr	r2, [r7, #16]
 8009b2c:	621a      	str	r2, [r3, #32]
}
 8009b2e:	bf00      	nop
 8009b30:	371c      	adds	r7, #28
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	40012c00 	.word	0x40012c00
 8009b40:	40013400 	.word	0x40013400
 8009b44:	40014000 	.word	0x40014000
 8009b48:	40014400 	.word	0x40014400
 8009b4c:	40014800 	.word	0x40014800

08009b50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009b94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	041b      	lsls	r3, r3, #16
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a17      	ldr	r2, [pc, #92]	; (8009c04 <TIM_OC5_SetConfig+0xb4>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d00f      	beq.n	8009bca <TIM_OC5_SetConfig+0x7a>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a16      	ldr	r2, [pc, #88]	; (8009c08 <TIM_OC5_SetConfig+0xb8>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d00b      	beq.n	8009bca <TIM_OC5_SetConfig+0x7a>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a15      	ldr	r2, [pc, #84]	; (8009c0c <TIM_OC5_SetConfig+0xbc>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d007      	beq.n	8009bca <TIM_OC5_SetConfig+0x7a>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a14      	ldr	r2, [pc, #80]	; (8009c10 <TIM_OC5_SetConfig+0xc0>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d003      	beq.n	8009bca <TIM_OC5_SetConfig+0x7a>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a13      	ldr	r2, [pc, #76]	; (8009c14 <TIM_OC5_SetConfig+0xc4>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d109      	bne.n	8009bde <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	021b      	lsls	r3, r3, #8
 8009bd8:	697a      	ldr	r2, [r7, #20]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	685a      	ldr	r2, [r3, #4]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	693a      	ldr	r2, [r7, #16]
 8009bf6:	621a      	str	r2, [r3, #32]
}
 8009bf8:	bf00      	nop
 8009bfa:	371c      	adds	r7, #28
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr
 8009c04:	40012c00 	.word	0x40012c00
 8009c08:	40013400 	.word	0x40013400
 8009c0c:	40014000 	.word	0x40014000
 8009c10:	40014400 	.word	0x40014400
 8009c14:	40014800 	.word	0x40014800

08009c18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a1b      	ldr	r3, [r3, #32]
 8009c26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	021b      	lsls	r3, r3, #8
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	051b      	lsls	r3, r3, #20
 8009c66:	693a      	ldr	r2, [r7, #16]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a18      	ldr	r2, [pc, #96]	; (8009cd0 <TIM_OC6_SetConfig+0xb8>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d00f      	beq.n	8009c94 <TIM_OC6_SetConfig+0x7c>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a17      	ldr	r2, [pc, #92]	; (8009cd4 <TIM_OC6_SetConfig+0xbc>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d00b      	beq.n	8009c94 <TIM_OC6_SetConfig+0x7c>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a16      	ldr	r2, [pc, #88]	; (8009cd8 <TIM_OC6_SetConfig+0xc0>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d007      	beq.n	8009c94 <TIM_OC6_SetConfig+0x7c>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a15      	ldr	r2, [pc, #84]	; (8009cdc <TIM_OC6_SetConfig+0xc4>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d003      	beq.n	8009c94 <TIM_OC6_SetConfig+0x7c>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a14      	ldr	r2, [pc, #80]	; (8009ce0 <TIM_OC6_SetConfig+0xc8>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d109      	bne.n	8009ca8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	695b      	ldr	r3, [r3, #20]
 8009ca0:	029b      	lsls	r3, r3, #10
 8009ca2:	697a      	ldr	r2, [r7, #20]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	697a      	ldr	r2, [r7, #20]
 8009cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	685a      	ldr	r2, [r3, #4]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	693a      	ldr	r2, [r7, #16]
 8009cc0:	621a      	str	r2, [r3, #32]
}
 8009cc2:	bf00      	nop
 8009cc4:	371c      	adds	r7, #28
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	40012c00 	.word	0x40012c00
 8009cd4:	40013400 	.word	0x40013400
 8009cd8:	40014000 	.word	0x40014000
 8009cdc:	40014400 	.word	0x40014400
 8009ce0:	40014800 	.word	0x40014800

08009ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6a1b      	ldr	r3, [r3, #32]
 8009cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	f023 0201 	bic.w	r2, r3, #1
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	011b      	lsls	r3, r3, #4
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	f023 030a 	bic.w	r3, r3, #10
 8009d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	621a      	str	r2, [r3, #32]
}
 8009d36:	bf00      	nop
 8009d38:	371c      	adds	r7, #28
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d42:	b480      	push	{r7}
 8009d44:	b087      	sub	sp, #28
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	60f8      	str	r0, [r7, #12]
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	f023 0210 	bic.w	r2, r3, #16
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	699b      	ldr	r3, [r3, #24]
 8009d5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6a1b      	ldr	r3, [r3, #32]
 8009d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	031b      	lsls	r3, r3, #12
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	011b      	lsls	r3, r3, #4
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	697a      	ldr	r2, [r7, #20]
 8009d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	621a      	str	r2, [r3, #32]
}
 8009d96:	bf00      	nop
 8009d98:	371c      	adds	r7, #28
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b085      	sub	sp, #20
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	f043 0307 	orr.w	r3, r3, #7
 8009dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	609a      	str	r2, [r3, #8]
}
 8009dcc:	bf00      	nop
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b087      	sub	sp, #28
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
 8009de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009df2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	021a      	lsls	r2, r3, #8
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	431a      	orrs	r2, r3
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	697a      	ldr	r2, [r7, #20]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	697a      	ldr	r2, [r7, #20]
 8009e0a:	609a      	str	r2, [r3, #8]
}
 8009e0c:	bf00      	nop
 8009e0e:	371c      	adds	r7, #28
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b087      	sub	sp, #28
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	f003 031f 	and.w	r3, r3, #31
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6a1a      	ldr	r2, [r3, #32]
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	43db      	mvns	r3, r3
 8009e3a:	401a      	ands	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6a1a      	ldr	r2, [r3, #32]
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	f003 031f 	and.w	r3, r3, #31
 8009e4a:	6879      	ldr	r1, [r7, #4]
 8009e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e50:	431a      	orrs	r2, r3
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	621a      	str	r2, [r3, #32]
}
 8009e56:	bf00      	nop
 8009e58:	371c      	adds	r7, #28
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
	...

08009e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d101      	bne.n	8009e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e78:	2302      	movs	r3, #2
 8009e7a:	e068      	b.n	8009f4e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2202      	movs	r2, #2
 8009e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a2e      	ldr	r2, [pc, #184]	; (8009f5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d004      	beq.n	8009eb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a2d      	ldr	r2, [pc, #180]	; (8009f60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d108      	bne.n	8009ec2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009eb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ec8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a1e      	ldr	r2, [pc, #120]	; (8009f5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d01d      	beq.n	8009f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eee:	d018      	beq.n	8009f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a1b      	ldr	r2, [pc, #108]	; (8009f64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d013      	beq.n	8009f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a1a      	ldr	r2, [pc, #104]	; (8009f68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d00e      	beq.n	8009f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a18      	ldr	r2, [pc, #96]	; (8009f6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d009      	beq.n	8009f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a13      	ldr	r2, [pc, #76]	; (8009f60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d004      	beq.n	8009f22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a14      	ldr	r2, [pc, #80]	; (8009f70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d10c      	bne.n	8009f3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	40012c00 	.word	0x40012c00
 8009f60:	40013400 	.word	0x40013400
 8009f64:	40000400 	.word	0x40000400
 8009f68:	40000800 	.word	0x40000800
 8009f6c:	40000c00 	.word	0x40000c00
 8009f70:	40014000 	.word	0x40014000

08009f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f7c:	bf00      	nop
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b08b      	sub	sp, #44	; 0x2c
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	fa93 f3a3 	rbit	r3, r3
 8009fca:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8009fd6:	2320      	movs	r3, #32
 8009fd8:	e003      	b.n	8009fe2 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	fab3 f383 	clz	r3, r3
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	005b      	lsls	r3, r3, #1
 8009fe4:	2103      	movs	r1, #3
 8009fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8009fea:	43db      	mvns	r3, r3
 8009fec:	401a      	ands	r2, r3
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	fa93 f3a3 	rbit	r3, r3
 8009ff8:	61fb      	str	r3, [r7, #28]
  return result;
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	2b00      	cmp	r3, #0
 800a002:	d101      	bne.n	800a008 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a004:	2320      	movs	r3, #32
 800a006:	e003      	b.n	800a010 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	fab3 f383 	clz	r3, r3
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	005b      	lsls	r3, r3, #1
 800a012:	6879      	ldr	r1, [r7, #4]
 800a014:	fa01 f303 	lsl.w	r3, r1, r3
 800a018:	431a      	orrs	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	601a      	str	r2, [r3, #0]
}
 800a01e:	bf00      	nop
 800a020:	372c      	adds	r7, #44	; 0x2c
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a02a:	b480      	push	{r7}
 800a02c:	b085      	sub	sp, #20
 800a02e:	af00      	add	r7, sp, #0
 800a030:	60f8      	str	r0, [r7, #12]
 800a032:	60b9      	str	r1, [r7, #8]
 800a034:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	43db      	mvns	r3, r3
 800a03e:	401a      	ands	r2, r3
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	6879      	ldr	r1, [r7, #4]
 800a044:	fb01 f303 	mul.w	r3, r1, r3
 800a048:	431a      	orrs	r2, r3
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	605a      	str	r2, [r3, #4]
}
 800a04e:	bf00      	nop
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b08b      	sub	sp, #44	; 0x2c
 800a05e:	af00      	add	r7, sp, #0
 800a060:	60f8      	str	r0, [r7, #12]
 800a062:	60b9      	str	r1, [r7, #8]
 800a064:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	689a      	ldr	r2, [r3, #8]
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	fa93 f3a3 	rbit	r3, r3
 800a074:	613b      	str	r3, [r7, #16]
  return result;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a080:	2320      	movs	r3, #32
 800a082:	e003      	b.n	800a08c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	fab3 f383 	clz	r3, r3
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	005b      	lsls	r3, r3, #1
 800a08e:	2103      	movs	r1, #3
 800a090:	fa01 f303 	lsl.w	r3, r1, r3
 800a094:	43db      	mvns	r3, r3
 800a096:	401a      	ands	r2, r3
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a09c:	6a3b      	ldr	r3, [r7, #32]
 800a09e:	fa93 f3a3 	rbit	r3, r3
 800a0a2:	61fb      	str	r3, [r7, #28]
  return result;
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d101      	bne.n	800a0b2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a0ae:	2320      	movs	r3, #32
 800a0b0:	e003      	b.n	800a0ba <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	fab3 f383 	clz	r3, r3
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	005b      	lsls	r3, r3, #1
 800a0bc:	6879      	ldr	r1, [r7, #4]
 800a0be:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c2:	431a      	orrs	r2, r3
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800a0c8:	bf00      	nop
 800a0ca:	372c      	adds	r7, #44	; 0x2c
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b08b      	sub	sp, #44	; 0x2c
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	68da      	ldr	r2, [r3, #12]
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	fa93 f3a3 	rbit	r3, r3
 800a0ee:	613b      	str	r3, [r7, #16]
  return result;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d101      	bne.n	800a0fe <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a0fa:	2320      	movs	r3, #32
 800a0fc:	e003      	b.n	800a106 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	fab3 f383 	clz	r3, r3
 800a104:	b2db      	uxtb	r3, r3
 800a106:	005b      	lsls	r3, r3, #1
 800a108:	2103      	movs	r1, #3
 800a10a:	fa01 f303 	lsl.w	r3, r1, r3
 800a10e:	43db      	mvns	r3, r3
 800a110:	401a      	ands	r2, r3
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	fa93 f3a3 	rbit	r3, r3
 800a11c:	61fb      	str	r3, [r7, #28]
  return result;
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a128:	2320      	movs	r3, #32
 800a12a:	e003      	b.n	800a134 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	fab3 f383 	clz	r3, r3
 800a132:	b2db      	uxtb	r3, r3
 800a134:	005b      	lsls	r3, r3, #1
 800a136:	6879      	ldr	r1, [r7, #4]
 800a138:	fa01 f303 	lsl.w	r3, r1, r3
 800a13c:	431a      	orrs	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	60da      	str	r2, [r3, #12]
}
 800a142:	bf00      	nop
 800a144:	372c      	adds	r7, #44	; 0x2c
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr

0800a14e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a14e:	b480      	push	{r7}
 800a150:	b08b      	sub	sp, #44	; 0x2c
 800a152:	af00      	add	r7, sp, #0
 800a154:	60f8      	str	r0, [r7, #12]
 800a156:	60b9      	str	r1, [r7, #8]
 800a158:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6a1a      	ldr	r2, [r3, #32]
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	fa93 f3a3 	rbit	r3, r3
 800a168:	613b      	str	r3, [r7, #16]
  return result;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d101      	bne.n	800a178 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a174:	2320      	movs	r3, #32
 800a176:	e003      	b.n	800a180 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	fab3 f383 	clz	r3, r3
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	210f      	movs	r1, #15
 800a184:	fa01 f303 	lsl.w	r3, r1, r3
 800a188:	43db      	mvns	r3, r3
 800a18a:	401a      	ands	r2, r3
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	fa93 f3a3 	rbit	r3, r3
 800a196:	61fb      	str	r3, [r7, #28]
  return result;
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a1a2:	2320      	movs	r3, #32
 800a1a4:	e003      	b.n	800a1ae <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a8:	fab3 f383 	clz	r3, r3
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	6879      	ldr	r1, [r7, #4]
 800a1b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1b6:	431a      	orrs	r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800a1bc:	bf00      	nop
 800a1be:	372c      	adds	r7, #44	; 0x2c
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b08b      	sub	sp, #44	; 0x2c
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	0a1b      	lsrs	r3, r3, #8
 800a1dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	fa93 f3a3 	rbit	r3, r3
 800a1e4:	613b      	str	r3, [r7, #16]
  return result;
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a1f0:	2320      	movs	r3, #32
 800a1f2:	e003      	b.n	800a1fc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	fab3 f383 	clz	r3, r3
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	210f      	movs	r1, #15
 800a200:	fa01 f303 	lsl.w	r3, r1, r3
 800a204:	43db      	mvns	r3, r3
 800a206:	401a      	ands	r2, r3
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	0a1b      	lsrs	r3, r3, #8
 800a20c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a20e:	6a3b      	ldr	r3, [r7, #32]
 800a210:	fa93 f3a3 	rbit	r3, r3
 800a214:	61fb      	str	r3, [r7, #28]
  return result;
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d101      	bne.n	800a224 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a220:	2320      	movs	r3, #32
 800a222:	e003      	b.n	800a22c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a226:	fab3 f383 	clz	r3, r3
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	6879      	ldr	r1, [r7, #4]
 800a230:	fa01 f303 	lsl.w	r3, r1, r3
 800a234:	431a      	orrs	r2, r3
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800a23a:	bf00      	nop
 800a23c:	372c      	adds	r7, #44	; 0x2c
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr

0800a246 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b088      	sub	sp, #32
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
 800a24e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	fa93 f3a3 	rbit	r3, r3
 800a25c:	60fb      	str	r3, [r7, #12]
  return result;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d101      	bne.n	800a26c <LL_GPIO_Init+0x26>
    return 32U;
 800a268:	2320      	movs	r3, #32
 800a26a:	e003      	b.n	800a274 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	fab3 f383 	clz	r3, r3
 800a272:	b2db      	uxtb	r3, r3
 800a274:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a276:	e048      	b.n	800a30a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	2101      	movs	r1, #1
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	fa01 f303 	lsl.w	r3, r1, r3
 800a284:	4013      	ands	r3, r2
 800a286:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d03a      	beq.n	800a304 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	2b01      	cmp	r3, #1
 800a294:	d003      	beq.n	800a29e <LL_GPIO_Init+0x58>
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d10e      	bne.n	800a2bc <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	69b9      	ldr	r1, [r7, #24]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7ff fed7 	bl	800a05a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	6819      	ldr	r1, [r3, #0]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7ff feb7 	bl	800a02a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	69b9      	ldr	r1, [r7, #24]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff ff05 	bl	800a0d4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d111      	bne.n	800a2f6 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	2bff      	cmp	r3, #255	; 0xff
 800a2d6:	d807      	bhi.n	800a2e8 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	695b      	ldr	r3, [r3, #20]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	69b9      	ldr	r1, [r7, #24]
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f7ff ff34 	bl	800a14e <LL_GPIO_SetAFPin_0_7>
 800a2e6:	e006      	b.n	800a2f6 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	69b9      	ldr	r1, [r7, #24]
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f7ff ff69 	bl	800a1c8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	69b9      	ldr	r1, [r7, #24]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7ff fe56 	bl	8009fb0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	3301      	adds	r3, #1
 800a308:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	fa22 f303 	lsr.w	r3, r2, r3
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1af      	bne.n	800a278 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3720      	adds	r7, #32
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
	...

0800a324 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800a324:	b480      	push	{r7}
 800a326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800a328:	4b07      	ldr	r3, [pc, #28]	; (800a348 <LL_RCC_HSI_IsReady+0x24>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a334:	d101      	bne.n	800a33a <LL_RCC_HSI_IsReady+0x16>
 800a336:	2301      	movs	r3, #1
 800a338:	e000      	b.n	800a33c <LL_RCC_HSI_IsReady+0x18>
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	40021000 	.word	0x40021000

0800a34c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800a34c:	b480      	push	{r7}
 800a34e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800a350:	4b07      	ldr	r3, [pc, #28]	; (800a370 <LL_RCC_LSE_IsReady+0x24>)
 800a352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a356:	f003 0302 	and.w	r3, r3, #2
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d101      	bne.n	800a362 <LL_RCC_LSE_IsReady+0x16>
 800a35e:	2301      	movs	r3, #1
 800a360:	e000      	b.n	800a364 <LL_RCC_LSE_IsReady+0x18>
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	40021000 	.word	0x40021000

0800a374 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800a374:	b480      	push	{r7}
 800a376:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800a378:	4b06      	ldr	r3, [pc, #24]	; (800a394 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 0308 	and.w	r3, r3, #8
 800a380:	2b08      	cmp	r3, #8
 800a382:	d101      	bne.n	800a388 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800a384:	2301      	movs	r3, #1
 800a386:	e000      	b.n	800a38a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	40021000 	.word	0x40021000

0800a398 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800a398:	b480      	push	{r7}
 800a39a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800a39c:	4b04      	ldr	r3, [pc, #16]	; (800a3b0 <LL_RCC_MSI_GetRange+0x18>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	40021000 	.word	0x40021000

0800a3b4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800a3b8:	4b04      	ldr	r3, [pc, #16]	; (800a3cc <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800a3ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3be:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr
 800a3cc:	40021000 	.word	0x40021000

0800a3d0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a3d4:	4b04      	ldr	r3, [pc, #16]	; (800a3e8 <LL_RCC_GetSysClkSource+0x18>)
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	f003 030c 	and.w	r3, r3, #12
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	40021000 	.word	0x40021000

0800a3ec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a3f0:	4b04      	ldr	r3, [pc, #16]	; (800a404 <LL_RCC_GetAHBPrescaler+0x18>)
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	40021000 	.word	0x40021000

0800a408 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a408:	b480      	push	{r7}
 800a40a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800a40c:	4b04      	ldr	r3, [pc, #16]	; (800a420 <LL_RCC_GetAPB1Prescaler+0x18>)
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800a414:	4618      	mov	r0, r3
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	40021000 	.word	0x40021000

0800a424 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800a424:	b480      	push	{r7}
 800a426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800a428:	4b04      	ldr	r3, [pc, #16]	; (800a43c <LL_RCC_GetAPB2Prescaler+0x18>)
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800a430:	4618      	mov	r0, r3
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	40021000 	.word	0x40021000

0800a440 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a448:	4b06      	ldr	r3, [pc, #24]	; (800a464 <LL_RCC_GetUSARTClockSource+0x24>)
 800a44a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	401a      	ands	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	041b      	lsls	r3, r3, #16
 800a456:	4313      	orrs	r3, r2
}
 800a458:	4618      	mov	r0, r3
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr
 800a464:	40021000 	.word	0x40021000

0800a468 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800a470:	4b06      	ldr	r3, [pc, #24]	; (800a48c <LL_RCC_GetUARTClockSource+0x24>)
 800a472:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	401a      	ands	r2, r3
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	041b      	lsls	r3, r3, #16
 800a47e:	4313      	orrs	r3, r2
}
 800a480:	4618      	mov	r0, r3
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr
 800a48c:	40021000 	.word	0x40021000

0800a490 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a490:	b480      	push	{r7}
 800a492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a494:	4b04      	ldr	r3, [pc, #16]	; (800a4a8 <LL_RCC_PLL_GetMainSource+0x18>)
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	f003 0303 	and.w	r3, r3, #3
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	40021000 	.word	0x40021000

0800a4ac <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a4b0:	4b04      	ldr	r3, [pc, #16]	; (800a4c4 <LL_RCC_PLL_GetN+0x18>)
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	0a1b      	lsrs	r3, r3, #8
 800a4b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr
 800a4c4:	40021000 	.word	0x40021000

0800a4c8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a4cc:	4b04      	ldr	r3, [pc, #16]	; (800a4e0 <LL_RCC_PLL_GetR+0x18>)
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	40021000 	.word	0x40021000

0800a4e4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a4e8:	4b04      	ldr	r3, [pc, #16]	; (800a4fc <LL_RCC_PLL_GetDivider+0x18>)
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	40021000 	.word	0x40021000

0800a500 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a508:	2300      	movs	r3, #0
 800a50a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2b03      	cmp	r3, #3
 800a510:	d137      	bne.n	800a582 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f7ff ff94 	bl	800a440 <LL_RCC_GetUSARTClockSource>
 800a518:	4603      	mov	r3, r0
 800a51a:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800a51e:	2b03      	cmp	r3, #3
 800a520:	f200 80b3 	bhi.w	800a68a <LL_RCC_GetUSARTClockFreq+0x18a>
 800a524:	a201      	add	r2, pc, #4	; (adr r2, 800a52c <LL_RCC_GetUSARTClockFreq+0x2c>)
 800a526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52a:	bf00      	nop
 800a52c:	0800a56b 	.word	0x0800a56b
 800a530:	0800a53d 	.word	0x0800a53d
 800a534:	0800a545 	.word	0x0800a545
 800a538:	0800a557 	.word	0x0800a557
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a53c:	f000 f95c 	bl	800a7f8 <RCC_GetSystemClockFreq>
 800a540:	60f8      	str	r0, [r7, #12]
        break;
 800a542:	e0b5      	b.n	800a6b0 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800a544:	f7ff feee 	bl	800a324 <LL_RCC_HSI_IsReady>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f000 809f 	beq.w	800a68e <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 800a550:	4b5a      	ldr	r3, [pc, #360]	; (800a6bc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800a552:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a554:	e09b      	b.n	800a68e <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800a556:	f7ff fef9 	bl	800a34c <LL_RCC_LSE_IsReady>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f000 8098 	beq.w	800a692 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 800a562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a566:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a568:	e093      	b.n	800a692 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a56a:	f000 f945 	bl	800a7f8 <RCC_GetSystemClockFreq>
 800a56e:	4603      	mov	r3, r0
 800a570:	4618      	mov	r0, r3
 800a572:	f000 f9d1 	bl	800a918 <RCC_GetHCLKClockFreq>
 800a576:	4603      	mov	r3, r0
 800a578:	4618      	mov	r0, r3
 800a57a:	f000 f9f7 	bl	800a96c <RCC_GetPCLK2ClockFreq>
 800a57e:	60f8      	str	r0, [r7, #12]
        break;
 800a580:	e096      	b.n	800a6b0 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b0c      	cmp	r3, #12
 800a586:	d146      	bne.n	800a616 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff ff59 	bl	800a440 <LL_RCC_GetUSARTClockSource>
 800a58e:	4603      	mov	r3, r0
 800a590:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800a594:	2b0c      	cmp	r3, #12
 800a596:	d87e      	bhi.n	800a696 <LL_RCC_GetUSARTClockFreq+0x196>
 800a598:	a201      	add	r2, pc, #4	; (adr r2, 800a5a0 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800a59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59e:	bf00      	nop
 800a5a0:	0800a5ff 	.word	0x0800a5ff
 800a5a4:	0800a697 	.word	0x0800a697
 800a5a8:	0800a697 	.word	0x0800a697
 800a5ac:	0800a697 	.word	0x0800a697
 800a5b0:	0800a5d5 	.word	0x0800a5d5
 800a5b4:	0800a697 	.word	0x0800a697
 800a5b8:	0800a697 	.word	0x0800a697
 800a5bc:	0800a697 	.word	0x0800a697
 800a5c0:	0800a5dd 	.word	0x0800a5dd
 800a5c4:	0800a697 	.word	0x0800a697
 800a5c8:	0800a697 	.word	0x0800a697
 800a5cc:	0800a697 	.word	0x0800a697
 800a5d0:	0800a5ed 	.word	0x0800a5ed
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a5d4:	f000 f910 	bl	800a7f8 <RCC_GetSystemClockFreq>
 800a5d8:	60f8      	str	r0, [r7, #12]
        break;
 800a5da:	e069      	b.n	800a6b0 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800a5dc:	f7ff fea2 	bl	800a324 <LL_RCC_HSI_IsReady>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d059      	beq.n	800a69a <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 800a5e6:	4b35      	ldr	r3, [pc, #212]	; (800a6bc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800a5e8:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a5ea:	e056      	b.n	800a69a <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800a5ec:	f7ff feae 	bl	800a34c <LL_RCC_LSE_IsReady>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d053      	beq.n	800a69e <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 800a5f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5fa:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a5fc:	e04f      	b.n	800a69e <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a5fe:	f000 f8fb 	bl	800a7f8 <RCC_GetSystemClockFreq>
 800a602:	4603      	mov	r3, r0
 800a604:	4618      	mov	r0, r3
 800a606:	f000 f987 	bl	800a918 <RCC_GetHCLKClockFreq>
 800a60a:	4603      	mov	r3, r0
 800a60c:	4618      	mov	r0, r3
 800a60e:	f000 f999 	bl	800a944 <RCC_GetPCLK1ClockFreq>
 800a612:	60f8      	str	r0, [r7, #12]
        break;
 800a614:	e04c      	b.n	800a6b0 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2b30      	cmp	r3, #48	; 0x30
 800a61a:	d142      	bne.n	800a6a2 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f7ff ff0f 	bl	800a440 <LL_RCC_GetUSARTClockSource>
 800a622:	4603      	mov	r3, r0
 800a624:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800a628:	d01a      	beq.n	800a660 <LL_RCC_GetUSARTClockFreq+0x160>
 800a62a:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800a62e:	d83a      	bhi.n	800a6a6 <LL_RCC_GetUSARTClockFreq+0x1a6>
 800a630:	4a23      	ldr	r2, [pc, #140]	; (800a6c0 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d00c      	beq.n	800a650 <LL_RCC_GetUSARTClockFreq+0x150>
 800a636:	4a22      	ldr	r2, [pc, #136]	; (800a6c0 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d834      	bhi.n	800a6a6 <LL_RCC_GetUSARTClockFreq+0x1a6>
 800a63c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a640:	d017      	beq.n	800a672 <LL_RCC_GetUSARTClockFreq+0x172>
 800a642:	4a20      	ldr	r2, [pc, #128]	; (800a6c4 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d12e      	bne.n	800a6a6 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800a648:	f000 f8d6 	bl	800a7f8 <RCC_GetSystemClockFreq>
 800a64c:	60f8      	str	r0, [r7, #12]
          break;
 800a64e:	e02f      	b.n	800a6b0 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 800a650:	f7ff fe68 	bl	800a324 <LL_RCC_HSI_IsReady>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d027      	beq.n	800a6aa <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 800a65a:	4b18      	ldr	r3, [pc, #96]	; (800a6bc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800a65c:	60fb      	str	r3, [r7, #12]
          }
          break;
 800a65e:	e024      	b.n	800a6aa <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 800a660:	f7ff fe74 	bl	800a34c <LL_RCC_LSE_IsReady>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d021      	beq.n	800a6ae <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 800a66a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a66e:	60fb      	str	r3, [r7, #12]
          }
          break;
 800a670:	e01d      	b.n	800a6ae <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a672:	f000 f8c1 	bl	800a7f8 <RCC_GetSystemClockFreq>
 800a676:	4603      	mov	r3, r0
 800a678:	4618      	mov	r0, r3
 800a67a:	f000 f94d 	bl	800a918 <RCC_GetHCLKClockFreq>
 800a67e:	4603      	mov	r3, r0
 800a680:	4618      	mov	r0, r3
 800a682:	f000 f95f 	bl	800a944 <RCC_GetPCLK1ClockFreq>
 800a686:	60f8      	str	r0, [r7, #12]
          break;
 800a688:	e012      	b.n	800a6b0 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800a68a:	bf00      	nop
 800a68c:	e010      	b.n	800a6b0 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800a68e:	bf00      	nop
 800a690:	e00e      	b.n	800a6b0 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800a692:	bf00      	nop
 800a694:	e00c      	b.n	800a6b0 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800a696:	bf00      	nop
 800a698:	e00a      	b.n	800a6b0 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800a69a:	bf00      	nop
 800a69c:	e008      	b.n	800a6b0 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800a69e:	bf00      	nop
 800a6a0:	e006      	b.n	800a6b0 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 800a6a2:	bf00      	nop
 800a6a4:	e004      	b.n	800a6b0 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 800a6a6:	bf00      	nop
 800a6a8:	e002      	b.n	800a6b0 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 800a6aa:	bf00      	nop
 800a6ac:	e000      	b.n	800a6b0 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 800a6ae:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	00f42400 	.word	0x00f42400
 800a6c0:	00300020 	.word	0x00300020
 800a6c4:	00300010 	.word	0x00300010

0800a6c8 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2bc0      	cmp	r3, #192	; 0xc0
 800a6d8:	d136      	bne.n	800a748 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f7ff fec4 	bl	800a468 <LL_RCC_GetUARTClockSource>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800a6e6:	d01a      	beq.n	800a71e <LL_RCC_GetUARTClockFreq+0x56>
 800a6e8:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800a6ec:	d82e      	bhi.n	800a74c <LL_RCC_GetUARTClockFreq+0x84>
 800a6ee:	4a3d      	ldr	r2, [pc, #244]	; (800a7e4 <LL_RCC_GetUARTClockFreq+0x11c>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d00c      	beq.n	800a70e <LL_RCC_GetUARTClockFreq+0x46>
 800a6f4:	4a3b      	ldr	r2, [pc, #236]	; (800a7e4 <LL_RCC_GetUARTClockFreq+0x11c>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d828      	bhi.n	800a74c <LL_RCC_GetUARTClockFreq+0x84>
 800a6fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a6fe:	d017      	beq.n	800a730 <LL_RCC_GetUARTClockFreq+0x68>
 800a700:	4a39      	ldr	r2, [pc, #228]	; (800a7e8 <LL_RCC_GetUARTClockFreq+0x120>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d122      	bne.n	800a74c <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800a706:	f000 f877 	bl	800a7f8 <RCC_GetSystemClockFreq>
 800a70a:	60f8      	str	r0, [r7, #12]
        break;
 800a70c:	e023      	b.n	800a756 <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800a70e:	f7ff fe09 	bl	800a324 <LL_RCC_HSI_IsReady>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d01b      	beq.n	800a750 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 800a718:	4b34      	ldr	r3, [pc, #208]	; (800a7ec <LL_RCC_GetUARTClockFreq+0x124>)
 800a71a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a71c:	e018      	b.n	800a750 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800a71e:	f7ff fe15 	bl	800a34c <LL_RCC_LSE_IsReady>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d015      	beq.n	800a754 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 800a728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a72c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a72e:	e011      	b.n	800a754 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a730:	f000 f862 	bl	800a7f8 <RCC_GetSystemClockFreq>
 800a734:	4603      	mov	r3, r0
 800a736:	4618      	mov	r0, r3
 800a738:	f000 f8ee 	bl	800a918 <RCC_GetHCLKClockFreq>
 800a73c:	4603      	mov	r3, r0
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 f900 	bl	800a944 <RCC_GetPCLK1ClockFreq>
 800a744:	60f8      	str	r0, [r7, #12]
        break;
 800a746:	e006      	b.n	800a756 <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 800a748:	bf00      	nop
 800a74a:	e004      	b.n	800a756 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 800a74c:	bf00      	nop
 800a74e:	e002      	b.n	800a756 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 800a750:	bf00      	nop
 800a752:	e000      	b.n	800a756 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 800a754:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a75c:	d136      	bne.n	800a7cc <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f7ff fe82 	bl	800a468 <LL_RCC_GetUARTClockSource>
 800a764:	4603      	mov	r3, r0
 800a766:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800a76a:	d01a      	beq.n	800a7a2 <LL_RCC_GetUARTClockFreq+0xda>
 800a76c:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800a770:	d82e      	bhi.n	800a7d0 <LL_RCC_GetUARTClockFreq+0x108>
 800a772:	4a1f      	ldr	r2, [pc, #124]	; (800a7f0 <LL_RCC_GetUARTClockFreq+0x128>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d00c      	beq.n	800a792 <LL_RCC_GetUARTClockFreq+0xca>
 800a778:	4a1d      	ldr	r2, [pc, #116]	; (800a7f0 <LL_RCC_GetUARTClockFreq+0x128>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d828      	bhi.n	800a7d0 <LL_RCC_GetUARTClockFreq+0x108>
 800a77e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a782:	d017      	beq.n	800a7b4 <LL_RCC_GetUARTClockFreq+0xec>
 800a784:	4a1b      	ldr	r2, [pc, #108]	; (800a7f4 <LL_RCC_GetUARTClockFreq+0x12c>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d122      	bne.n	800a7d0 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800a78a:	f000 f835 	bl	800a7f8 <RCC_GetSystemClockFreq>
 800a78e:	60f8      	str	r0, [r7, #12]
        break;
 800a790:	e023      	b.n	800a7da <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800a792:	f7ff fdc7 	bl	800a324 <LL_RCC_HSI_IsReady>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d01b      	beq.n	800a7d4 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 800a79c:	4b13      	ldr	r3, [pc, #76]	; (800a7ec <LL_RCC_GetUARTClockFreq+0x124>)
 800a79e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a7a0:	e018      	b.n	800a7d4 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800a7a2:	f7ff fdd3 	bl	800a34c <LL_RCC_LSE_IsReady>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d015      	beq.n	800a7d8 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 800a7ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7b0:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a7b2:	e011      	b.n	800a7d8 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a7b4:	f000 f820 	bl	800a7f8 <RCC_GetSystemClockFreq>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 f8ac 	bl	800a918 <RCC_GetHCLKClockFreq>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f000 f8be 	bl	800a944 <RCC_GetPCLK1ClockFreq>
 800a7c8:	60f8      	str	r0, [r7, #12]
        break;
 800a7ca:	e006      	b.n	800a7da <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 800a7cc:	bf00      	nop
 800a7ce:	e004      	b.n	800a7da <LL_RCC_GetUARTClockFreq+0x112>
        break;
 800a7d0:	bf00      	nop
 800a7d2:	e002      	b.n	800a7da <LL_RCC_GetUARTClockFreq+0x112>
        break;
 800a7d4:	bf00      	nop
 800a7d6:	e000      	b.n	800a7da <LL_RCC_GetUARTClockFreq+0x112>
        break;
 800a7d8:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800a7da:	68fb      	ldr	r3, [r7, #12]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	00c00080 	.word	0x00c00080
 800a7e8:	00c00040 	.word	0x00c00040
 800a7ec:	00f42400 	.word	0x00f42400
 800a7f0:	03000200 	.word	0x03000200
 800a7f4:	03000100 	.word	0x03000100

0800a7f8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800a7fe:	f7ff fde7 	bl	800a3d0 <LL_RCC_GetSysClkSource>
 800a802:	4603      	mov	r3, r0
 800a804:	2b0c      	cmp	r3, #12
 800a806:	d851      	bhi.n	800a8ac <RCC_GetSystemClockFreq+0xb4>
 800a808:	a201      	add	r2, pc, #4	; (adr r2, 800a810 <RCC_GetSystemClockFreq+0x18>)
 800a80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80e:	bf00      	nop
 800a810:	0800a845 	.word	0x0800a845
 800a814:	0800a8ad 	.word	0x0800a8ad
 800a818:	0800a8ad 	.word	0x0800a8ad
 800a81c:	0800a8ad 	.word	0x0800a8ad
 800a820:	0800a899 	.word	0x0800a899
 800a824:	0800a8ad 	.word	0x0800a8ad
 800a828:	0800a8ad 	.word	0x0800a8ad
 800a82c:	0800a8ad 	.word	0x0800a8ad
 800a830:	0800a89f 	.word	0x0800a89f
 800a834:	0800a8ad 	.word	0x0800a8ad
 800a838:	0800a8ad 	.word	0x0800a8ad
 800a83c:	0800a8ad 	.word	0x0800a8ad
 800a840:	0800a8a5 	.word	0x0800a8a5
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800a844:	f7ff fd96 	bl	800a374 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d111      	bne.n	800a872 <RCC_GetSystemClockFreq+0x7a>
 800a84e:	f7ff fd91 	bl	800a374 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d004      	beq.n	800a862 <RCC_GetSystemClockFreq+0x6a>
 800a858:	f7ff fd9e 	bl	800a398 <LL_RCC_MSI_GetRange>
 800a85c:	4603      	mov	r3, r0
 800a85e:	0a1b      	lsrs	r3, r3, #8
 800a860:	e003      	b.n	800a86a <RCC_GetSystemClockFreq+0x72>
 800a862:	f7ff fda7 	bl	800a3b4 <LL_RCC_MSI_GetRangeAfterStandby>
 800a866:	4603      	mov	r3, r0
 800a868:	0a1b      	lsrs	r3, r3, #8
 800a86a:	4a28      	ldr	r2, [pc, #160]	; (800a90c <RCC_GetSystemClockFreq+0x114>)
 800a86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a870:	e010      	b.n	800a894 <RCC_GetSystemClockFreq+0x9c>
 800a872:	f7ff fd7f 	bl	800a374 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d004      	beq.n	800a886 <RCC_GetSystemClockFreq+0x8e>
 800a87c:	f7ff fd8c 	bl	800a398 <LL_RCC_MSI_GetRange>
 800a880:	4603      	mov	r3, r0
 800a882:	091b      	lsrs	r3, r3, #4
 800a884:	e003      	b.n	800a88e <RCC_GetSystemClockFreq+0x96>
 800a886:	f7ff fd95 	bl	800a3b4 <LL_RCC_MSI_GetRangeAfterStandby>
 800a88a:	4603      	mov	r3, r0
 800a88c:	091b      	lsrs	r3, r3, #4
 800a88e:	4a1f      	ldr	r2, [pc, #124]	; (800a90c <RCC_GetSystemClockFreq+0x114>)
 800a890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a894:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800a896:	e033      	b.n	800a900 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800a898:	4b1d      	ldr	r3, [pc, #116]	; (800a910 <RCC_GetSystemClockFreq+0x118>)
 800a89a:	607b      	str	r3, [r7, #4]
      break;
 800a89c:	e030      	b.n	800a900 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800a89e:	4b1d      	ldr	r3, [pc, #116]	; (800a914 <RCC_GetSystemClockFreq+0x11c>)
 800a8a0:	607b      	str	r3, [r7, #4]
      break;
 800a8a2:	e02d      	b.n	800a900 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800a8a4:	f000 f876 	bl	800a994 <RCC_PLL_GetFreqDomain_SYS>
 800a8a8:	6078      	str	r0, [r7, #4]
      break;
 800a8aa:	e029      	b.n	800a900 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800a8ac:	f7ff fd62 	bl	800a374 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d111      	bne.n	800a8da <RCC_GetSystemClockFreq+0xe2>
 800a8b6:	f7ff fd5d 	bl	800a374 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d004      	beq.n	800a8ca <RCC_GetSystemClockFreq+0xd2>
 800a8c0:	f7ff fd6a 	bl	800a398 <LL_RCC_MSI_GetRange>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	0a1b      	lsrs	r3, r3, #8
 800a8c8:	e003      	b.n	800a8d2 <RCC_GetSystemClockFreq+0xda>
 800a8ca:	f7ff fd73 	bl	800a3b4 <LL_RCC_MSI_GetRangeAfterStandby>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	0a1b      	lsrs	r3, r3, #8
 800a8d2:	4a0e      	ldr	r2, [pc, #56]	; (800a90c <RCC_GetSystemClockFreq+0x114>)
 800a8d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8d8:	e010      	b.n	800a8fc <RCC_GetSystemClockFreq+0x104>
 800a8da:	f7ff fd4b 	bl	800a374 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d004      	beq.n	800a8ee <RCC_GetSystemClockFreq+0xf6>
 800a8e4:	f7ff fd58 	bl	800a398 <LL_RCC_MSI_GetRange>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	091b      	lsrs	r3, r3, #4
 800a8ec:	e003      	b.n	800a8f6 <RCC_GetSystemClockFreq+0xfe>
 800a8ee:	f7ff fd61 	bl	800a3b4 <LL_RCC_MSI_GetRangeAfterStandby>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	091b      	lsrs	r3, r3, #4
 800a8f6:	4a05      	ldr	r2, [pc, #20]	; (800a90c <RCC_GetSystemClockFreq+0x114>)
 800a8f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8fc:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800a8fe:	bf00      	nop
  }

  return frequency;
 800a900:	687b      	ldr	r3, [r7, #4]
}
 800a902:	4618      	mov	r0, r3
 800a904:	3708      	adds	r7, #8
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	0800f644 	.word	0x0800f644
 800a910:	00f42400 	.word	0x00f42400
 800a914:	007a1200 	.word	0x007a1200

0800a918 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800a920:	f7ff fd64 	bl	800a3ec <LL_RCC_GetAHBPrescaler>
 800a924:	4603      	mov	r3, r0
 800a926:	091b      	lsrs	r3, r3, #4
 800a928:	f003 030f 	and.w	r3, r3, #15
 800a92c:	4a04      	ldr	r2, [pc, #16]	; (800a940 <RCC_GetHCLKClockFreq+0x28>)
 800a92e:	5cd3      	ldrb	r3, [r2, r3]
 800a930:	461a      	mov	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	40d3      	lsrs	r3, r2
}
 800a936:	4618      	mov	r0, r3
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	0800f62c 	.word	0x0800f62c

0800a944 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800a94c:	f7ff fd5c 	bl	800a408 <LL_RCC_GetAPB1Prescaler>
 800a950:	4603      	mov	r3, r0
 800a952:	0a1b      	lsrs	r3, r3, #8
 800a954:	4a04      	ldr	r2, [pc, #16]	; (800a968 <RCC_GetPCLK1ClockFreq+0x24>)
 800a956:	5cd3      	ldrb	r3, [r2, r3]
 800a958:	461a      	mov	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	40d3      	lsrs	r3, r2
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	0800f63c 	.word	0x0800f63c

0800a96c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800a974:	f7ff fd56 	bl	800a424 <LL_RCC_GetAPB2Prescaler>
 800a978:	4603      	mov	r3, r0
 800a97a:	0adb      	lsrs	r3, r3, #11
 800a97c:	4a04      	ldr	r2, [pc, #16]	; (800a990 <RCC_GetPCLK2ClockFreq+0x24>)
 800a97e:	5cd3      	ldrb	r3, [r2, r3]
 800a980:	461a      	mov	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	40d3      	lsrs	r3, r2
}
 800a986:	4618      	mov	r0, r3
 800a988:	3708      	adds	r7, #8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	0800f63c 	.word	0x0800f63c

0800a994 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800a994:	b590      	push	{r4, r7, lr}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800a99a:	f7ff fd79 	bl	800a490 <LL_RCC_PLL_GetMainSource>
 800a99e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	d036      	beq.n	800aa14 <RCC_PLL_GetFreqDomain_SYS+0x80>
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	2b03      	cmp	r3, #3
 800a9aa:	d836      	bhi.n	800aa1a <RCC_PLL_GetFreqDomain_SYS+0x86>
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d003      	beq.n	800a9ba <RCC_PLL_GetFreqDomain_SYS+0x26>
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d02a      	beq.n	800aa0e <RCC_PLL_GetFreqDomain_SYS+0x7a>
 800a9b8:	e02f      	b.n	800aa1a <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800a9ba:	f7ff fcdb 	bl	800a374 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d111      	bne.n	800a9e8 <RCC_PLL_GetFreqDomain_SYS+0x54>
 800a9c4:	f7ff fcd6 	bl	800a374 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d004      	beq.n	800a9d8 <RCC_PLL_GetFreqDomain_SYS+0x44>
 800a9ce:	f7ff fce3 	bl	800a398 <LL_RCC_MSI_GetRange>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	0a1b      	lsrs	r3, r3, #8
 800a9d6:	e003      	b.n	800a9e0 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 800a9d8:	f7ff fcec 	bl	800a3b4 <LL_RCC_MSI_GetRangeAfterStandby>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	0a1b      	lsrs	r3, r3, #8
 800a9e0:	4a2f      	ldr	r2, [pc, #188]	; (800aaa0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800a9e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9e6:	e010      	b.n	800aa0a <RCC_PLL_GetFreqDomain_SYS+0x76>
 800a9e8:	f7ff fcc4 	bl	800a374 <LL_RCC_MSI_IsEnabledRangeSelect>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d004      	beq.n	800a9fc <RCC_PLL_GetFreqDomain_SYS+0x68>
 800a9f2:	f7ff fcd1 	bl	800a398 <LL_RCC_MSI_GetRange>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	091b      	lsrs	r3, r3, #4
 800a9fa:	e003      	b.n	800aa04 <RCC_PLL_GetFreqDomain_SYS+0x70>
 800a9fc:	f7ff fcda 	bl	800a3b4 <LL_RCC_MSI_GetRangeAfterStandby>
 800aa00:	4603      	mov	r3, r0
 800aa02:	091b      	lsrs	r3, r3, #4
 800aa04:	4a26      	ldr	r2, [pc, #152]	; (800aaa0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800aa06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa0a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800aa0c:	e02f      	b.n	800aa6e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800aa0e:	4b25      	ldr	r3, [pc, #148]	; (800aaa4 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 800aa10:	607b      	str	r3, [r7, #4]
      break;
 800aa12:	e02c      	b.n	800aa6e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800aa14:	4b24      	ldr	r3, [pc, #144]	; (800aaa8 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800aa16:	607b      	str	r3, [r7, #4]
      break;
 800aa18:	e029      	b.n	800aa6e <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800aa1a:	f7ff fcab 	bl	800a374 <LL_RCC_MSI_IsEnabledRangeSelect>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d111      	bne.n	800aa48 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 800aa24:	f7ff fca6 	bl	800a374 <LL_RCC_MSI_IsEnabledRangeSelect>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d004      	beq.n	800aa38 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 800aa2e:	f7ff fcb3 	bl	800a398 <LL_RCC_MSI_GetRange>
 800aa32:	4603      	mov	r3, r0
 800aa34:	0a1b      	lsrs	r3, r3, #8
 800aa36:	e003      	b.n	800aa40 <RCC_PLL_GetFreqDomain_SYS+0xac>
 800aa38:	f7ff fcbc 	bl	800a3b4 <LL_RCC_MSI_GetRangeAfterStandby>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	0a1b      	lsrs	r3, r3, #8
 800aa40:	4a17      	ldr	r2, [pc, #92]	; (800aaa0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800aa42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa46:	e010      	b.n	800aa6a <RCC_PLL_GetFreqDomain_SYS+0xd6>
 800aa48:	f7ff fc94 	bl	800a374 <LL_RCC_MSI_IsEnabledRangeSelect>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d004      	beq.n	800aa5c <RCC_PLL_GetFreqDomain_SYS+0xc8>
 800aa52:	f7ff fca1 	bl	800a398 <LL_RCC_MSI_GetRange>
 800aa56:	4603      	mov	r3, r0
 800aa58:	091b      	lsrs	r3, r3, #4
 800aa5a:	e003      	b.n	800aa64 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 800aa5c:	f7ff fcaa 	bl	800a3b4 <LL_RCC_MSI_GetRangeAfterStandby>
 800aa60:	4603      	mov	r3, r0
 800aa62:	091b      	lsrs	r3, r3, #4
 800aa64:	4a0e      	ldr	r2, [pc, #56]	; (800aaa0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800aa66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa6a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800aa6c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800aa6e:	f7ff fd39 	bl	800a4e4 <LL_RCC_PLL_GetDivider>
 800aa72:	4603      	mov	r3, r0
 800aa74:	091b      	lsrs	r3, r3, #4
 800aa76:	3301      	adds	r3, #1
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	fbb2 f4f3 	udiv	r4, r2, r3
 800aa7e:	f7ff fd15 	bl	800a4ac <LL_RCC_PLL_GetN>
 800aa82:	4603      	mov	r3, r0
 800aa84:	fb03 f404 	mul.w	r4, r3, r4
 800aa88:	f7ff fd1e 	bl	800a4c8 <LL_RCC_PLL_GetR>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	0e5b      	lsrs	r3, r3, #25
 800aa90:	3301      	adds	r3, #1
 800aa92:	005b      	lsls	r3, r3, #1
 800aa94:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd90      	pop	{r4, r7, pc}
 800aaa0:	0800f644 	.word	0x0800f644
 800aaa4:	00f42400 	.word	0x00f42400
 800aaa8:	007a1200 	.word	0x007a1200

0800aaac <LL_USART_IsEnabled>:
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f003 0301 	and.w	r3, r3, #1
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d101      	bne.n	800aac4 <LL_USART_IsEnabled+0x18>
 800aac0:	2301      	movs	r3, #1
 800aac2:	e000      	b.n	800aac6 <LL_USART_IsEnabled+0x1a>
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	370c      	adds	r7, #12
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <LL_USART_SetStopBitsLength>:
{
 800aad2:	b480      	push	{r7}
 800aad4:	b083      	sub	sp, #12
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	431a      	orrs	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	605a      	str	r2, [r3, #4]
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <LL_USART_SetHWFlowCtrl>:
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	431a      	orrs	r2, r3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	609a      	str	r2, [r3, #8]
}
 800ab12:	bf00      	nop
 800ab14:	370c      	adds	r7, #12
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr

0800ab1e <LL_USART_SetBaudRate>:
{
 800ab1e:	b480      	push	{r7}
 800ab20:	b087      	sub	sp, #28
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	60f8      	str	r0, [r7, #12]
 800ab26:	60b9      	str	r1, [r7, #8]
 800ab28:	607a      	str	r2, [r7, #4]
 800ab2a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab32:	d11a      	bne.n	800ab6a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	005a      	lsls	r2, r3, #1
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	085b      	lsrs	r3, r3, #1
 800ab3c:	441a      	add	r2, r3
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800ab48:	697a      	ldr	r2, [r7, #20]
 800ab4a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800ab4e:	4013      	ands	r3, r2
 800ab50:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	085b      	lsrs	r3, r3, #1
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	f003 0307 	and.w	r3, r3, #7
 800ab5c:	693a      	ldr	r2, [r7, #16]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	693a      	ldr	r2, [r7, #16]
 800ab66:	60da      	str	r2, [r3, #12]
}
 800ab68:	e00a      	b.n	800ab80 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	085a      	lsrs	r2, r3, #1
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	441a      	add	r2, r3
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	60da      	str	r2, [r3, #12]
}
 800ab80:	bf00      	nop
 800ab82:	371c      	adds	r7, #28
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f7ff ff84 	bl	800aaac <LL_USART_IsEnabled>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d15b      	bne.n	800ac62 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	4b2f      	ldr	r3, [pc, #188]	; (800ac6c <LL_USART_Init+0xe0>)
 800abb0:	4013      	ands	r3, r2
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	6851      	ldr	r1, [r2, #4]
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	68d2      	ldr	r2, [r2, #12]
 800abba:	4311      	orrs	r1, r2
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	6912      	ldr	r2, [r2, #16]
 800abc0:	4311      	orrs	r1, r2
 800abc2:	683a      	ldr	r2, [r7, #0]
 800abc4:	6992      	ldr	r2, [r2, #24]
 800abc6:	430a      	orrs	r2, r1
 800abc8:	431a      	orrs	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	4619      	mov	r1, r3
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7ff ff7c 	bl	800aad2 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	695b      	ldr	r3, [r3, #20]
 800abde:	4619      	mov	r1, r3
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f7ff ff89 	bl	800aaf8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a21      	ldr	r2, [pc, #132]	; (800ac70 <LL_USART_Init+0xe4>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d104      	bne.n	800abf8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800abee:	2003      	movs	r0, #3
 800abf0:	f7ff fc86 	bl	800a500 <LL_RCC_GetUSARTClockFreq>
 800abf4:	60b8      	str	r0, [r7, #8]
 800abf6:	e023      	b.n	800ac40 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a1e      	ldr	r2, [pc, #120]	; (800ac74 <LL_USART_Init+0xe8>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d104      	bne.n	800ac0a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800ac00:	200c      	movs	r0, #12
 800ac02:	f7ff fc7d 	bl	800a500 <LL_RCC_GetUSARTClockFreq>
 800ac06:	60b8      	str	r0, [r7, #8]
 800ac08:	e01a      	b.n	800ac40 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a1a      	ldr	r2, [pc, #104]	; (800ac78 <LL_USART_Init+0xec>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d104      	bne.n	800ac1c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800ac12:	2030      	movs	r0, #48	; 0x30
 800ac14:	f7ff fc74 	bl	800a500 <LL_RCC_GetUSARTClockFreq>
 800ac18:	60b8      	str	r0, [r7, #8]
 800ac1a:	e011      	b.n	800ac40 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4a17      	ldr	r2, [pc, #92]	; (800ac7c <LL_USART_Init+0xf0>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d104      	bne.n	800ac2e <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800ac24:	20c0      	movs	r0, #192	; 0xc0
 800ac26:	f7ff fd4f 	bl	800a6c8 <LL_RCC_GetUARTClockFreq>
 800ac2a:	60b8      	str	r0, [r7, #8]
 800ac2c:	e008      	b.n	800ac40 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a13      	ldr	r2, [pc, #76]	; (800ac80 <LL_USART_Init+0xf4>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d104      	bne.n	800ac40 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800ac36:	f44f 7040 	mov.w	r0, #768	; 0x300
 800ac3a:	f7ff fd45 	bl	800a6c8 <LL_RCC_GetUARTClockFreq>
 800ac3e:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00d      	beq.n	800ac62 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d009      	beq.n	800ac62 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	699a      	ldr	r2, [r3, #24]
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	68b9      	ldr	r1, [r7, #8]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f7ff ff5e 	bl	800ab1e <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800ac62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	efff69f3 	.word	0xefff69f3
 800ac70:	40013800 	.word	0x40013800
 800ac74:	40004400 	.word	0x40004400
 800ac78:	40004800 	.word	0x40004800
 800ac7c:	40004c00 	.word	0x40004c00
 800ac80:	40005000 	.word	0x40005000

0800ac84 <__NVIC_SetPriority>:
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	6039      	str	r1, [r7, #0]
 800ac8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	db0a      	blt.n	800acae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	490c      	ldr	r1, [pc, #48]	; (800acd0 <__NVIC_SetPriority+0x4c>)
 800ac9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aca2:	0112      	lsls	r2, r2, #4
 800aca4:	b2d2      	uxtb	r2, r2
 800aca6:	440b      	add	r3, r1
 800aca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800acac:	e00a      	b.n	800acc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	b2da      	uxtb	r2, r3
 800acb2:	4908      	ldr	r1, [pc, #32]	; (800acd4 <__NVIC_SetPriority+0x50>)
 800acb4:	79fb      	ldrb	r3, [r7, #7]
 800acb6:	f003 030f 	and.w	r3, r3, #15
 800acba:	3b04      	subs	r3, #4
 800acbc:	0112      	lsls	r2, r2, #4
 800acbe:	b2d2      	uxtb	r2, r2
 800acc0:	440b      	add	r3, r1
 800acc2:	761a      	strb	r2, [r3, #24]
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr
 800acd0:	e000e100 	.word	0xe000e100
 800acd4:	e000ed00 	.word	0xe000ed00

0800acd8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800acd8:	b580      	push	{r7, lr}
 800acda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800acdc:	4b05      	ldr	r3, [pc, #20]	; (800acf4 <SysTick_Handler+0x1c>)
 800acde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ace0:	f002 f836 	bl	800cd50 <xTaskGetSchedulerState>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d001      	beq.n	800acee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800acea:	f002 ff05 	bl	800daf8 <xPortSysTickHandler>
  }
}
 800acee:	bf00      	nop
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	e000e010 	.word	0xe000e010

0800acf8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800acf8:	b580      	push	{r7, lr}
 800acfa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800acfc:	2100      	movs	r1, #0
 800acfe:	f06f 0004 	mvn.w	r0, #4
 800ad02:	f7ff ffbf 	bl	800ac84 <__NVIC_SetPriority>
#endif
}
 800ad06:	bf00      	nop
 800ad08:	bd80      	pop	{r7, pc}
	...

0800ad0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad12:	f3ef 8305 	mrs	r3, IPSR
 800ad16:	603b      	str	r3, [r7, #0]
  return(result);
 800ad18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d003      	beq.n	800ad26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ad1e:	f06f 0305 	mvn.w	r3, #5
 800ad22:	607b      	str	r3, [r7, #4]
 800ad24:	e00c      	b.n	800ad40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ad26:	4b0a      	ldr	r3, [pc, #40]	; (800ad50 <osKernelInitialize+0x44>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d105      	bne.n	800ad3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ad2e:	4b08      	ldr	r3, [pc, #32]	; (800ad50 <osKernelInitialize+0x44>)
 800ad30:	2201      	movs	r2, #1
 800ad32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ad34:	2300      	movs	r3, #0
 800ad36:	607b      	str	r3, [r7, #4]
 800ad38:	e002      	b.n	800ad40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ad3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad40:	687b      	ldr	r3, [r7, #4]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	370c      	adds	r7, #12
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop
 800ad50:	20000804 	.word	0x20000804

0800ad54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad5a:	f3ef 8305 	mrs	r3, IPSR
 800ad5e:	603b      	str	r3, [r7, #0]
  return(result);
 800ad60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d003      	beq.n	800ad6e <osKernelStart+0x1a>
    stat = osErrorISR;
 800ad66:	f06f 0305 	mvn.w	r3, #5
 800ad6a:	607b      	str	r3, [r7, #4]
 800ad6c:	e010      	b.n	800ad90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ad6e:	4b0b      	ldr	r3, [pc, #44]	; (800ad9c <osKernelStart+0x48>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d109      	bne.n	800ad8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ad76:	f7ff ffbf 	bl	800acf8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ad7a:	4b08      	ldr	r3, [pc, #32]	; (800ad9c <osKernelStart+0x48>)
 800ad7c:	2202      	movs	r2, #2
 800ad7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ad80:	f001 fb9e 	bl	800c4c0 <vTaskStartScheduler>
      stat = osOK;
 800ad84:	2300      	movs	r3, #0
 800ad86:	607b      	str	r3, [r7, #4]
 800ad88:	e002      	b.n	800ad90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ad8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad90:	687b      	ldr	r3, [r7, #4]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	20000804 	.word	0x20000804

0800ada0 <osKernelLock>:

int32_t osKernelLock (void) {
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ada6:	f3ef 8305 	mrs	r3, IPSR
 800adaa:	603b      	str	r3, [r7, #0]
  return(result);
 800adac:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d003      	beq.n	800adba <osKernelLock+0x1a>
    lock = (int32_t)osErrorISR;
 800adb2:	f06f 0305 	mvn.w	r3, #5
 800adb6:	607b      	str	r3, [r7, #4]
 800adb8:	e013      	b.n	800ade2 <osKernelLock+0x42>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 800adba:	f001 ffc9 	bl	800cd50 <xTaskGetSchedulerState>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <osKernelLock+0x2a>
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d003      	beq.n	800add0 <osKernelLock+0x30>
 800adc8:	e007      	b.n	800adda <osKernelLock+0x3a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 800adca:	2301      	movs	r3, #1
 800adcc:	607b      	str	r3, [r7, #4]
        break;
 800adce:	e008      	b.n	800ade2 <osKernelLock+0x42>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 800add0:	f001 fbdc 	bl	800c58c <vTaskSuspendAll>
        lock = 0;
 800add4:	2300      	movs	r3, #0
 800add6:	607b      	str	r3, [r7, #4]
        break;
 800add8:	e003      	b.n	800ade2 <osKernelLock+0x42>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 800adda:	f04f 33ff 	mov.w	r3, #4294967295
 800adde:	607b      	str	r3, [r7, #4]
        break;
 800ade0:	bf00      	nop
    }
  }

  return (lock);
 800ade2:	687b      	ldr	r3, [r7, #4]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <osKernelUnlock>:

int32_t osKernelUnlock (void) {
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adf2:	f3ef 8305 	mrs	r3, IPSR
 800adf6:	603b      	str	r3, [r7, #0]
  return(result);
 800adf8:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d003      	beq.n	800ae06 <osKernelUnlock+0x1a>
    lock = (int32_t)osErrorISR;
 800adfe:	f06f 0305 	mvn.w	r3, #5
 800ae02:	607b      	str	r3, [r7, #4]
 800ae04:	e01f      	b.n	800ae46 <osKernelUnlock+0x5a>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 800ae06:	f001 ffa3 	bl	800cd50 <xTaskGetSchedulerState>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d002      	beq.n	800ae16 <osKernelUnlock+0x2a>
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	d010      	beq.n	800ae36 <osKernelUnlock+0x4a>
 800ae14:	e012      	b.n	800ae3c <osKernelUnlock+0x50>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 800ae16:	2301      	movs	r3, #1
 800ae18:	607b      	str	r3, [r7, #4]

        if (xTaskResumeAll() != pdTRUE) {
 800ae1a:	f001 fbc5 	bl	800c5a8 <xTaskResumeAll>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d00f      	beq.n	800ae44 <osKernelUnlock+0x58>
          if (xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) {
 800ae24:	f001 ff94 	bl	800cd50 <xTaskGetSchedulerState>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d10a      	bne.n	800ae44 <osKernelUnlock+0x58>
            lock = (int32_t)osError;
 800ae2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae32:	607b      	str	r3, [r7, #4]
          }
        }
        break;
 800ae34:	e006      	b.n	800ae44 <osKernelUnlock+0x58>

      case taskSCHEDULER_RUNNING:
        lock = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	607b      	str	r3, [r7, #4]
        break;
 800ae3a:	e004      	b.n	800ae46 <osKernelUnlock+0x5a>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 800ae3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae40:	607b      	str	r3, [r7, #4]
        break;
 800ae42:	e000      	b.n	800ae46 <osKernelUnlock+0x5a>
        break;
 800ae44:	bf00      	nop
    }
  }

  return (lock);
 800ae46:	687b      	ldr	r3, [r7, #4]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3708      	adds	r7, #8
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b08e      	sub	sp, #56	; 0x38
 800ae54:	af04      	add	r7, sp, #16
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae60:	f3ef 8305 	mrs	r3, IPSR
 800ae64:	617b      	str	r3, [r7, #20]
  return(result);
 800ae66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d17e      	bne.n	800af6a <osThreadNew+0x11a>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d07b      	beq.n	800af6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ae72:	2380      	movs	r3, #128	; 0x80
 800ae74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ae76:	2318      	movs	r3, #24
 800ae78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ae7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d045      	beq.n	800af16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d002      	beq.n	800ae98 <osThreadNew+0x48>
        name = attr->name;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	699b      	ldr	r3, [r3, #24]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d008      	beq.n	800aebe <osThreadNew+0x6e>
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	2b38      	cmp	r3, #56	; 0x38
 800aeb0:	d805      	bhi.n	800aebe <osThreadNew+0x6e>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	f003 0301 	and.w	r3, r3, #1
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <osThreadNew+0x72>
        return (NULL);
 800aebe:	2300      	movs	r3, #0
 800aec0:	e054      	b.n	800af6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	089b      	lsrs	r3, r3, #2
 800aed0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00e      	beq.n	800aef8 <osThreadNew+0xa8>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	2b5b      	cmp	r3, #91	; 0x5b
 800aee0:	d90a      	bls.n	800aef8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d006      	beq.n	800aef8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	695b      	ldr	r3, [r3, #20]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d002      	beq.n	800aef8 <osThreadNew+0xa8>
        mem = 1;
 800aef2:	2301      	movs	r3, #1
 800aef4:	61bb      	str	r3, [r7, #24]
 800aef6:	e010      	b.n	800af1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10c      	bne.n	800af1a <osThreadNew+0xca>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d108      	bne.n	800af1a <osThreadNew+0xca>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	691b      	ldr	r3, [r3, #16]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d104      	bne.n	800af1a <osThreadNew+0xca>
          mem = 0;
 800af10:	2300      	movs	r3, #0
 800af12:	61bb      	str	r3, [r7, #24]
 800af14:	e001      	b.n	800af1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800af16:	2300      	movs	r3, #0
 800af18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d110      	bne.n	800af42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af28:	9202      	str	r2, [sp, #8]
 800af2a:	9301      	str	r3, [sp, #4]
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	6a3a      	ldr	r2, [r7, #32]
 800af34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f001 f8ec 	bl	800c114 <xTaskCreateStatic>
 800af3c:	4603      	mov	r3, r0
 800af3e:	613b      	str	r3, [r7, #16]
 800af40:	e013      	b.n	800af6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d110      	bne.n	800af6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800af48:	6a3b      	ldr	r3, [r7, #32]
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	f107 0310 	add.w	r3, r7, #16
 800af50:	9301      	str	r3, [sp, #4]
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f001 f937 	bl	800c1ce <xTaskCreate>
 800af60:	4603      	mov	r3, r0
 800af62:	2b01      	cmp	r3, #1
 800af64:	d001      	beq.n	800af6a <osThreadNew+0x11a>
            hTask = NULL;
 800af66:	2300      	movs	r3, #0
 800af68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800af6a:	693b      	ldr	r3, [r7, #16]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3728      	adds	r7, #40	; 0x28
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af7c:	f3ef 8305 	mrs	r3, IPSR
 800af80:	60bb      	str	r3, [r7, #8]
  return(result);
 800af82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af84:	2b00      	cmp	r3, #0
 800af86:	d003      	beq.n	800af90 <osDelay+0x1c>
    stat = osErrorISR;
 800af88:	f06f 0305 	mvn.w	r3, #5
 800af8c:	60fb      	str	r3, [r7, #12]
 800af8e:	e007      	b.n	800afa0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800af90:	2300      	movs	r3, #0
 800af92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d002      	beq.n	800afa0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f001 fa5c 	bl	800c458 <vTaskDelay>
    }
  }

  return (stat);
 800afa0:	68fb      	ldr	r3, [r7, #12]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800afaa:	b580      	push	{r7, lr}
 800afac:	b084      	sub	sp, #16
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f002 fbbd 	bl	800d732 <pvTimerGetTimerID>
 800afb8:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d005      	beq.n	800afcc <TimerCallback+0x22>
    callb->func (callb->arg);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	6852      	ldr	r2, [r2, #4]
 800afc8:	4610      	mov	r0, r2
 800afca:	4798      	blx	r3
  }
}
 800afcc:	bf00      	nop
 800afce:	3710      	adds	r7, #16
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b08c      	sub	sp, #48	; 0x30
 800afd8:	af02      	add	r7, sp, #8
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	607a      	str	r2, [r7, #4]
 800afde:	603b      	str	r3, [r7, #0]
 800afe0:	460b      	mov	r3, r1
 800afe2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800afe4:	2300      	movs	r3, #0
 800afe6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afe8:	f3ef 8305 	mrs	r3, IPSR
 800afec:	613b      	str	r3, [r7, #16]
  return(result);
 800afee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d163      	bne.n	800b0bc <osTimerNew+0xe8>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d060      	beq.n	800b0bc <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800affa:	2008      	movs	r0, #8
 800affc:	f002 fe0c 	bl	800dc18 <pvPortMalloc>
 800b000:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d059      	beq.n	800b0bc <osTimerNew+0xe8>
      callb->func = func;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800b014:	7afb      	ldrb	r3, [r7, #11]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d102      	bne.n	800b020 <osTimerNew+0x4c>
        reload = pdFALSE;
 800b01a:	2300      	movs	r3, #0
 800b01c:	61fb      	str	r3, [r7, #28]
 800b01e:	e001      	b.n	800b024 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800b020:	2301      	movs	r3, #1
 800b022:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800b024:	f04f 33ff 	mov.w	r3, #4294967295
 800b028:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800b02a:	2300      	movs	r3, #0
 800b02c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d01c      	beq.n	800b06e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d002      	beq.n	800b042 <osTimerNew+0x6e>
          name = attr->name;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d006      	beq.n	800b058 <osTimerNew+0x84>
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	2b2b      	cmp	r3, #43	; 0x2b
 800b050:	d902      	bls.n	800b058 <osTimerNew+0x84>
          mem = 1;
 800b052:	2301      	movs	r3, #1
 800b054:	61bb      	str	r3, [r7, #24]
 800b056:	e00c      	b.n	800b072 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d108      	bne.n	800b072 <osTimerNew+0x9e>
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d104      	bne.n	800b072 <osTimerNew+0x9e>
            mem = 0;
 800b068:	2300      	movs	r3, #0
 800b06a:	61bb      	str	r3, [r7, #24]
 800b06c:	e001      	b.n	800b072 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800b06e:	2300      	movs	r3, #0
 800b070:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	2b01      	cmp	r3, #1
 800b076:	d10c      	bne.n	800b092 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	9301      	str	r3, [sp, #4]
 800b07e:	4b12      	ldr	r3, [pc, #72]	; (800b0c8 <osTimerNew+0xf4>)
 800b080:	9300      	str	r3, [sp, #0]
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	69fa      	ldr	r2, [r7, #28]
 800b086:	2101      	movs	r1, #1
 800b088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b08a:	f001 ffaa 	bl	800cfe2 <xTimerCreateStatic>
 800b08e:	6238      	str	r0, [r7, #32]
 800b090:	e00b      	b.n	800b0aa <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d108      	bne.n	800b0aa <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800b098:	4b0b      	ldr	r3, [pc, #44]	; (800b0c8 <osTimerNew+0xf4>)
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	69fa      	ldr	r2, [r7, #28]
 800b0a0:	2101      	movs	r1, #1
 800b0a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0a4:	f001 ff7c 	bl	800cfa0 <xTimerCreate>
 800b0a8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800b0aa:	6a3b      	ldr	r3, [r7, #32]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d105      	bne.n	800b0bc <osTimerNew+0xe8>
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d002      	beq.n	800b0bc <osTimerNew+0xe8>
        vPortFree (callb);
 800b0b6:	6978      	ldr	r0, [r7, #20]
 800b0b8:	f002 fe7a 	bl	800ddb0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800b0bc:	6a3b      	ldr	r3, [r7, #32]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3728      	adds	r7, #40	; 0x28
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	0800afab 	.word	0x0800afab

0800b0cc <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b088      	sub	sp, #32
 800b0d0:	af02      	add	r7, sp, #8
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0da:	f3ef 8305 	mrs	r3, IPSR
 800b0de:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d003      	beq.n	800b0ee <osTimerStart+0x22>
    stat = osErrorISR;
 800b0e6:	f06f 0305 	mvn.w	r3, #5
 800b0ea:	617b      	str	r3, [r7, #20]
 800b0ec:	e017      	b.n	800b11e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d103      	bne.n	800b0fc <osTimerStart+0x30>
    stat = osErrorParameter;
 800b0f4:	f06f 0303 	mvn.w	r3, #3
 800b0f8:	617b      	str	r3, [r7, #20]
 800b0fa:	e010      	b.n	800b11e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	9300      	str	r3, [sp, #0]
 800b100:	2300      	movs	r3, #0
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	2104      	movs	r1, #4
 800b106:	6938      	ldr	r0, [r7, #16]
 800b108:	f001 ffe4 	bl	800d0d4 <xTimerGenericCommand>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d102      	bne.n	800b118 <osTimerStart+0x4c>
      stat = osOK;
 800b112:	2300      	movs	r3, #0
 800b114:	617b      	str	r3, [r7, #20]
 800b116:	e002      	b.n	800b11e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800b118:	f06f 0302 	mvn.w	r3, #2
 800b11c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b11e:	697b      	ldr	r3, [r7, #20]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800b128:	b580      	push	{r7, lr}
 800b12a:	b088      	sub	sp, #32
 800b12c:	af02      	add	r7, sp, #8
 800b12e:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b134:	f3ef 8305 	mrs	r3, IPSR
 800b138:	60fb      	str	r3, [r7, #12]
  return(result);
 800b13a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d003      	beq.n	800b148 <osTimerStop+0x20>
    stat = osErrorISR;
 800b140:	f06f 0305 	mvn.w	r3, #5
 800b144:	617b      	str	r3, [r7, #20]
 800b146:	e021      	b.n	800b18c <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d103      	bne.n	800b156 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800b14e:	f06f 0303 	mvn.w	r3, #3
 800b152:	617b      	str	r3, [r7, #20]
 800b154:	e01a      	b.n	800b18c <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800b156:	6938      	ldr	r0, [r7, #16]
 800b158:	f002 fac2 	bl	800d6e0 <xTimerIsTimerActive>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d103      	bne.n	800b16a <osTimerStop+0x42>
      stat = osErrorResource;
 800b162:	f06f 0302 	mvn.w	r3, #2
 800b166:	617b      	str	r3, [r7, #20]
 800b168:	e010      	b.n	800b18c <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800b16a:	2300      	movs	r3, #0
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	2300      	movs	r3, #0
 800b170:	2200      	movs	r2, #0
 800b172:	2103      	movs	r1, #3
 800b174:	6938      	ldr	r0, [r7, #16]
 800b176:	f001 ffad 	bl	800d0d4 <xTimerGenericCommand>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d102      	bne.n	800b186 <osTimerStop+0x5e>
        stat = osOK;
 800b180:	2300      	movs	r3, #0
 800b182:	617b      	str	r3, [r7, #20]
 800b184:	e002      	b.n	800b18c <osTimerStop+0x64>
      } else {
        stat = osError;
 800b186:	f04f 33ff 	mov.w	r3, #4294967295
 800b18a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b18c:	697b      	ldr	r3, [r7, #20]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3718      	adds	r7, #24
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b196:	b580      	push	{r7, lr}
 800b198:	b08a      	sub	sp, #40	; 0x28
 800b19a:	af02      	add	r7, sp, #8
 800b19c:	60f8      	str	r0, [r7, #12]
 800b19e:	60b9      	str	r1, [r7, #8]
 800b1a0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1a6:	f3ef 8305 	mrs	r3, IPSR
 800b1aa:	613b      	str	r3, [r7, #16]
  return(result);
 800b1ac:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d15f      	bne.n	800b272 <osMessageQueueNew+0xdc>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d05c      	beq.n	800b272 <osMessageQueueNew+0xdc>
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d059      	beq.n	800b272 <osMessageQueueNew+0xdc>
    mem = -1;
 800b1be:	f04f 33ff 	mov.w	r3, #4294967295
 800b1c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d029      	beq.n	800b21e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d012      	beq.n	800b1f8 <osMessageQueueNew+0x62>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	2b4f      	cmp	r3, #79	; 0x4f
 800b1d8:	d90e      	bls.n	800b1f8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00a      	beq.n	800b1f8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	695a      	ldr	r2, [r3, #20]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	68b9      	ldr	r1, [r7, #8]
 800b1ea:	fb01 f303 	mul.w	r3, r1, r3
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d302      	bcc.n	800b1f8 <osMessageQueueNew+0x62>
        mem = 1;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	61bb      	str	r3, [r7, #24]
 800b1f6:	e014      	b.n	800b222 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d110      	bne.n	800b222 <osMessageQueueNew+0x8c>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10c      	bne.n	800b222 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d108      	bne.n	800b222 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	695b      	ldr	r3, [r3, #20]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d104      	bne.n	800b222 <osMessageQueueNew+0x8c>
          mem = 0;
 800b218:	2300      	movs	r3, #0
 800b21a:	61bb      	str	r3, [r7, #24]
 800b21c:	e001      	b.n	800b222 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b21e:	2300      	movs	r3, #0
 800b220:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d10b      	bne.n	800b240 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	691a      	ldr	r2, [r3, #16]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	2100      	movs	r1, #0
 800b232:	9100      	str	r1, [sp, #0]
 800b234:	68b9      	ldr	r1, [r7, #8]
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f000 fa2e 	bl	800b698 <xQueueGenericCreateStatic>
 800b23c:	61f8      	str	r0, [r7, #28]
 800b23e:	e008      	b.n	800b252 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d105      	bne.n	800b252 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b246:	2200      	movs	r2, #0
 800b248:	68b9      	ldr	r1, [r7, #8]
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f000 fa9c 	bl	800b788 <xQueueGenericCreate>
 800b250:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00c      	beq.n	800b272 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d003      	beq.n	800b266 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	617b      	str	r3, [r7, #20]
 800b264:	e001      	b.n	800b26a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b266:	2300      	movs	r3, #0
 800b268:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b26a:	6979      	ldr	r1, [r7, #20]
 800b26c:	69f8      	ldr	r0, [r7, #28]
 800b26e:	f000 fef3 	bl	800c058 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b272:	69fb      	ldr	r3, [r7, #28]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3720      	adds	r7, #32
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b088      	sub	sp, #32
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	603b      	str	r3, [r7, #0]
 800b288:	4613      	mov	r3, r2
 800b28a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b290:	2300      	movs	r3, #0
 800b292:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b294:	f3ef 8305 	mrs	r3, IPSR
 800b298:	617b      	str	r3, [r7, #20]
  return(result);
 800b29a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d028      	beq.n	800b2f2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d005      	beq.n	800b2b2 <osMessageQueuePut+0x36>
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <osMessageQueuePut+0x36>
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d003      	beq.n	800b2ba <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b2b2:	f06f 0303 	mvn.w	r3, #3
 800b2b6:	61fb      	str	r3, [r7, #28]
 800b2b8:	e038      	b.n	800b32c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b2be:	f107 0210 	add.w	r2, r7, #16
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	68b9      	ldr	r1, [r7, #8]
 800b2c6:	69b8      	ldr	r0, [r7, #24]
 800b2c8:	f000 fbba 	bl	800ba40 <xQueueGenericSendFromISR>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d003      	beq.n	800b2da <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b2d2:	f06f 0302 	mvn.w	r3, #2
 800b2d6:	61fb      	str	r3, [r7, #28]
 800b2d8:	e028      	b.n	800b32c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d025      	beq.n	800b32c <osMessageQueuePut+0xb0>
 800b2e0:	4b15      	ldr	r3, [pc, #84]	; (800b338 <osMessageQueuePut+0xbc>)
 800b2e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2e6:	601a      	str	r2, [r3, #0]
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	e01c      	b.n	800b32c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <osMessageQueuePut+0x82>
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d103      	bne.n	800b306 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b2fe:	f06f 0303 	mvn.w	r3, #3
 800b302:	61fb      	str	r3, [r7, #28]
 800b304:	e012      	b.n	800b32c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b306:	2300      	movs	r3, #0
 800b308:	683a      	ldr	r2, [r7, #0]
 800b30a:	68b9      	ldr	r1, [r7, #8]
 800b30c:	69b8      	ldr	r0, [r7, #24]
 800b30e:	f000 fa99 	bl	800b844 <xQueueGenericSend>
 800b312:	4603      	mov	r3, r0
 800b314:	2b01      	cmp	r3, #1
 800b316:	d009      	beq.n	800b32c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d003      	beq.n	800b326 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b31e:	f06f 0301 	mvn.w	r3, #1
 800b322:	61fb      	str	r3, [r7, #28]
 800b324:	e002      	b.n	800b32c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b326:	f06f 0302 	mvn.w	r3, #2
 800b32a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b32c:	69fb      	ldr	r3, [r7, #28]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3720      	adds	r7, #32
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	e000ed04 	.word	0xe000ed04

0800b33c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b088      	sub	sp, #32
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
 800b348:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b34e:	2300      	movs	r3, #0
 800b350:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b352:	f3ef 8305 	mrs	r3, IPSR
 800b356:	617b      	str	r3, [r7, #20]
  return(result);
 800b358:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d028      	beq.n	800b3b0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d005      	beq.n	800b370 <osMessageQueueGet+0x34>
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d002      	beq.n	800b370 <osMessageQueueGet+0x34>
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d003      	beq.n	800b378 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b370:	f06f 0303 	mvn.w	r3, #3
 800b374:	61fb      	str	r3, [r7, #28]
 800b376:	e037      	b.n	800b3e8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b378:	2300      	movs	r3, #0
 800b37a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b37c:	f107 0310 	add.w	r3, r7, #16
 800b380:	461a      	mov	r2, r3
 800b382:	68b9      	ldr	r1, [r7, #8]
 800b384:	69b8      	ldr	r0, [r7, #24]
 800b386:	f000 fcd7 	bl	800bd38 <xQueueReceiveFromISR>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d003      	beq.n	800b398 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b390:	f06f 0302 	mvn.w	r3, #2
 800b394:	61fb      	str	r3, [r7, #28]
 800b396:	e027      	b.n	800b3e8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d024      	beq.n	800b3e8 <osMessageQueueGet+0xac>
 800b39e:	4b15      	ldr	r3, [pc, #84]	; (800b3f4 <osMessageQueueGet+0xb8>)
 800b3a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	f3bf 8f6f 	isb	sy
 800b3ae:	e01b      	b.n	800b3e8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d002      	beq.n	800b3bc <osMessageQueueGet+0x80>
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d103      	bne.n	800b3c4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b3bc:	f06f 0303 	mvn.w	r3, #3
 800b3c0:	61fb      	str	r3, [r7, #28]
 800b3c2:	e011      	b.n	800b3e8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b3c4:	683a      	ldr	r2, [r7, #0]
 800b3c6:	68b9      	ldr	r1, [r7, #8]
 800b3c8:	69b8      	ldr	r0, [r7, #24]
 800b3ca:	f000 fbd5 	bl	800bb78 <xQueueReceive>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d009      	beq.n	800b3e8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d003      	beq.n	800b3e2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b3da:	f06f 0301 	mvn.w	r3, #1
 800b3de:	61fb      	str	r3, [r7, #28]
 800b3e0:	e002      	b.n	800b3e8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b3e2:	f06f 0302 	mvn.w	r3, #2
 800b3e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b3e8:	69fb      	ldr	r3, [r7, #28]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3720      	adds	r7, #32
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	e000ed04 	.word	0xe000ed04

0800b3f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	4a07      	ldr	r2, [pc, #28]	; (800b424 <vApplicationGetIdleTaskMemory+0x2c>)
 800b408:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	4a06      	ldr	r2, [pc, #24]	; (800b428 <vApplicationGetIdleTaskMemory+0x30>)
 800b40e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2280      	movs	r2, #128	; 0x80
 800b414:	601a      	str	r2, [r3, #0]
}
 800b416:	bf00      	nop
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	20000808 	.word	0x20000808
 800b428:	20000864 	.word	0x20000864

0800b42c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b42c:	b480      	push	{r7}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	4a07      	ldr	r2, [pc, #28]	; (800b458 <vApplicationGetTimerTaskMemory+0x2c>)
 800b43c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	4a06      	ldr	r2, [pc, #24]	; (800b45c <vApplicationGetTimerTaskMemory+0x30>)
 800b442:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b44a:	601a      	str	r2, [r3, #0]
}
 800b44c:	bf00      	nop
 800b44e:	3714      	adds	r7, #20
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr
 800b458:	20000a64 	.word	0x20000a64
 800b45c:	20000ac0 	.word	0x20000ac0

0800b460 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f103 0208 	add.w	r2, r3, #8
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f04f 32ff 	mov.w	r2, #4294967295
 800b478:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f103 0208 	add.w	r2, r3, #8
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f103 0208 	add.w	r2, r3, #8
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b494:	bf00      	nop
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b4ae:	bf00      	nop
 800b4b0:	370c      	adds	r7, #12
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr

0800b4ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4ba:	b480      	push	{r7}
 800b4bc:	b085      	sub	sp, #20
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
 800b4c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	689a      	ldr	r2, [r3, #8]
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	683a      	ldr	r2, [r7, #0]
 800b4de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	1c5a      	adds	r2, r3, #1
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	601a      	str	r2, [r3, #0]
}
 800b4f6:	bf00      	nop
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr

0800b502 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b502:	b480      	push	{r7}
 800b504:	b085      	sub	sp, #20
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b518:	d103      	bne.n	800b522 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	60fb      	str	r3, [r7, #12]
 800b520:	e00c      	b.n	800b53c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	3308      	adds	r3, #8
 800b526:	60fb      	str	r3, [r7, #12]
 800b528:	e002      	b.n	800b530 <vListInsert+0x2e>
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	60fb      	str	r3, [r7, #12]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68ba      	ldr	r2, [r7, #8]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d2f6      	bcs.n	800b52a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	685a      	ldr	r2, [r3, #4]
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	683a      	ldr	r2, [r7, #0]
 800b54a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	1c5a      	adds	r2, r3, #1
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	601a      	str	r2, [r3, #0]
}
 800b568:	bf00      	nop
 800b56a:	3714      	adds	r7, #20
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	6892      	ldr	r2, [r2, #8]
 800b58a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	6852      	ldr	r2, [r2, #4]
 800b594:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d103      	bne.n	800b5a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	689a      	ldr	r2, [r3, #8]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	1e5a      	subs	r2, r3, #1
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3714      	adds	r7, #20
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10a      	bne.n	800b5f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b5ee:	bf00      	nop
 800b5f0:	e7fe      	b.n	800b5f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b5f2:	f002 f9ef 	bl	800d9d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5fe:	68f9      	ldr	r1, [r7, #12]
 800b600:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b602:	fb01 f303 	mul.w	r3, r1, r3
 800b606:	441a      	add	r2, r3
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2200      	movs	r2, #0
 800b610:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b622:	3b01      	subs	r3, #1
 800b624:	68f9      	ldr	r1, [r7, #12]
 800b626:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b628:	fb01 f303 	mul.w	r3, r1, r3
 800b62c:	441a      	add	r2, r3
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	22ff      	movs	r2, #255	; 0xff
 800b636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	22ff      	movs	r2, #255	; 0xff
 800b63e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d114      	bne.n	800b672 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d01a      	beq.n	800b686 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	3310      	adds	r3, #16
 800b654:	4618      	mov	r0, r3
 800b656:	f001 f9bd 	bl	800c9d4 <xTaskRemoveFromEventList>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d012      	beq.n	800b686 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b660:	4b0c      	ldr	r3, [pc, #48]	; (800b694 <xQueueGenericReset+0xcc>)
 800b662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b666:	601a      	str	r2, [r3, #0]
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	f3bf 8f6f 	isb	sy
 800b670:	e009      	b.n	800b686 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	3310      	adds	r3, #16
 800b676:	4618      	mov	r0, r3
 800b678:	f7ff fef2 	bl	800b460 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3324      	adds	r3, #36	; 0x24
 800b680:	4618      	mov	r0, r3
 800b682:	f7ff feed 	bl	800b460 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b686:	f002 f9d5 	bl	800da34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b68a:	2301      	movs	r3, #1
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	e000ed04 	.word	0xe000ed04

0800b698 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b08e      	sub	sp, #56	; 0x38
 800b69c:	af02      	add	r7, sp, #8
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
 800b6a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d10a      	bne.n	800b6c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b0:	f383 8811 	msr	BASEPRI, r3
 800b6b4:	f3bf 8f6f 	isb	sy
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b6be:	bf00      	nop
 800b6c0:	e7fe      	b.n	800b6c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d10a      	bne.n	800b6de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6cc:	f383 8811 	msr	BASEPRI, r3
 800b6d0:	f3bf 8f6f 	isb	sy
 800b6d4:	f3bf 8f4f 	dsb	sy
 800b6d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6da:	bf00      	nop
 800b6dc:	e7fe      	b.n	800b6dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d002      	beq.n	800b6ea <xQueueGenericCreateStatic+0x52>
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d001      	beq.n	800b6ee <xQueueGenericCreateStatic+0x56>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e000      	b.n	800b6f0 <xQueueGenericCreateStatic+0x58>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10a      	bne.n	800b70a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f8:	f383 8811 	msr	BASEPRI, r3
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	623b      	str	r3, [r7, #32]
}
 800b706:	bf00      	nop
 800b708:	e7fe      	b.n	800b708 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d102      	bne.n	800b716 <xQueueGenericCreateStatic+0x7e>
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d101      	bne.n	800b71a <xQueueGenericCreateStatic+0x82>
 800b716:	2301      	movs	r3, #1
 800b718:	e000      	b.n	800b71c <xQueueGenericCreateStatic+0x84>
 800b71a:	2300      	movs	r3, #0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d10a      	bne.n	800b736 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b724:	f383 8811 	msr	BASEPRI, r3
 800b728:	f3bf 8f6f 	isb	sy
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	61fb      	str	r3, [r7, #28]
}
 800b732:	bf00      	nop
 800b734:	e7fe      	b.n	800b734 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b736:	2350      	movs	r3, #80	; 0x50
 800b738:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	2b50      	cmp	r3, #80	; 0x50
 800b73e:	d00a      	beq.n	800b756 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b744:	f383 8811 	msr	BASEPRI, r3
 800b748:	f3bf 8f6f 	isb	sy
 800b74c:	f3bf 8f4f 	dsb	sy
 800b750:	61bb      	str	r3, [r7, #24]
}
 800b752:	bf00      	nop
 800b754:	e7fe      	b.n	800b754 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b756:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00d      	beq.n	800b77e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b764:	2201      	movs	r2, #1
 800b766:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b76a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	4613      	mov	r3, r2
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	68b9      	ldr	r1, [r7, #8]
 800b778:	68f8      	ldr	r0, [r7, #12]
 800b77a:	f000 f83f 	bl	800b7fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b780:	4618      	mov	r0, r3
 800b782:	3730      	adds	r7, #48	; 0x30
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b08a      	sub	sp, #40	; 0x28
 800b78c:	af02      	add	r7, sp, #8
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	4613      	mov	r3, r2
 800b794:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10a      	bne.n	800b7b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	613b      	str	r3, [r7, #16]
}
 800b7ae:	bf00      	nop
 800b7b0:	e7fe      	b.n	800b7b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	68ba      	ldr	r2, [r7, #8]
 800b7b6:	fb02 f303 	mul.w	r3, r2, r3
 800b7ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	3350      	adds	r3, #80	; 0x50
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f002 fa29 	bl	800dc18 <pvPortMalloc>
 800b7c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d011      	beq.n	800b7f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	3350      	adds	r3, #80	; 0x50
 800b7d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b7e0:	79fa      	ldrb	r2, [r7, #7]
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	697a      	ldr	r2, [r7, #20]
 800b7ea:	68b9      	ldr	r1, [r7, #8]
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f000 f805 	bl	800b7fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b7f2:	69bb      	ldr	r3, [r7, #24]
	}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3720      	adds	r7, #32
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
 800b808:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d103      	bne.n	800b818 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	69ba      	ldr	r2, [r7, #24]
 800b814:	601a      	str	r2, [r3, #0]
 800b816:	e002      	b.n	800b81e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b824:	69bb      	ldr	r3, [r7, #24]
 800b826:	68ba      	ldr	r2, [r7, #8]
 800b828:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b82a:	2101      	movs	r1, #1
 800b82c:	69b8      	ldr	r0, [r7, #24]
 800b82e:	f7ff fecb 	bl	800b5c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	78fa      	ldrb	r2, [r7, #3]
 800b836:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b83a:	bf00      	nop
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
	...

0800b844 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b08e      	sub	sp, #56	; 0x38
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	607a      	str	r2, [r7, #4]
 800b850:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b852:	2300      	movs	r3, #0
 800b854:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d10a      	bne.n	800b876 <xQueueGenericSend+0x32>
	__asm volatile
 800b860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b864:	f383 8811 	msr	BASEPRI, r3
 800b868:	f3bf 8f6f 	isb	sy
 800b86c:	f3bf 8f4f 	dsb	sy
 800b870:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b872:	bf00      	nop
 800b874:	e7fe      	b.n	800b874 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d103      	bne.n	800b884 <xQueueGenericSend+0x40>
 800b87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b880:	2b00      	cmp	r3, #0
 800b882:	d101      	bne.n	800b888 <xQueueGenericSend+0x44>
 800b884:	2301      	movs	r3, #1
 800b886:	e000      	b.n	800b88a <xQueueGenericSend+0x46>
 800b888:	2300      	movs	r3, #0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d10a      	bne.n	800b8a4 <xQueueGenericSend+0x60>
	__asm volatile
 800b88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8a0:	bf00      	nop
 800b8a2:	e7fe      	b.n	800b8a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	d103      	bne.n	800b8b2 <xQueueGenericSend+0x6e>
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d101      	bne.n	800b8b6 <xQueueGenericSend+0x72>
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e000      	b.n	800b8b8 <xQueueGenericSend+0x74>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d10a      	bne.n	800b8d2 <xQueueGenericSend+0x8e>
	__asm volatile
 800b8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c0:	f383 8811 	msr	BASEPRI, r3
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	623b      	str	r3, [r7, #32]
}
 800b8ce:	bf00      	nop
 800b8d0:	e7fe      	b.n	800b8d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b8d2:	f001 fa3d 	bl	800cd50 <xTaskGetSchedulerState>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d102      	bne.n	800b8e2 <xQueueGenericSend+0x9e>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d101      	bne.n	800b8e6 <xQueueGenericSend+0xa2>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e000      	b.n	800b8e8 <xQueueGenericSend+0xa4>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d10a      	bne.n	800b902 <xQueueGenericSend+0xbe>
	__asm volatile
 800b8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f0:	f383 8811 	msr	BASEPRI, r3
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	61fb      	str	r3, [r7, #28]
}
 800b8fe:	bf00      	nop
 800b900:	e7fe      	b.n	800b900 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b902:	f002 f867 	bl	800d9d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b90e:	429a      	cmp	r2, r3
 800b910:	d302      	bcc.n	800b918 <xQueueGenericSend+0xd4>
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b02      	cmp	r3, #2
 800b916:	d129      	bne.n	800b96c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b918:	683a      	ldr	r2, [r7, #0]
 800b91a:	68b9      	ldr	r1, [r7, #8]
 800b91c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b91e:	f000 fa8b 	bl	800be38 <prvCopyDataToQueue>
 800b922:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d010      	beq.n	800b94e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92e:	3324      	adds	r3, #36	; 0x24
 800b930:	4618      	mov	r0, r3
 800b932:	f001 f84f 	bl	800c9d4 <xTaskRemoveFromEventList>
 800b936:	4603      	mov	r3, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d013      	beq.n	800b964 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b93c:	4b3f      	ldr	r3, [pc, #252]	; (800ba3c <xQueueGenericSend+0x1f8>)
 800b93e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b942:	601a      	str	r2, [r3, #0]
 800b944:	f3bf 8f4f 	dsb	sy
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	e00a      	b.n	800b964 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b950:	2b00      	cmp	r3, #0
 800b952:	d007      	beq.n	800b964 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b954:	4b39      	ldr	r3, [pc, #228]	; (800ba3c <xQueueGenericSend+0x1f8>)
 800b956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b95a:	601a      	str	r2, [r3, #0]
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b964:	f002 f866 	bl	800da34 <vPortExitCritical>
				return pdPASS;
 800b968:	2301      	movs	r3, #1
 800b96a:	e063      	b.n	800ba34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d103      	bne.n	800b97a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b972:	f002 f85f 	bl	800da34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b976:	2300      	movs	r3, #0
 800b978:	e05c      	b.n	800ba34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b97a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d106      	bne.n	800b98e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b980:	f107 0314 	add.w	r3, r7, #20
 800b984:	4618      	mov	r0, r3
 800b986:	f001 f889 	bl	800ca9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b98a:	2301      	movs	r3, #1
 800b98c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b98e:	f002 f851 	bl	800da34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b992:	f000 fdfb 	bl	800c58c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b996:	f002 f81d 	bl	800d9d4 <vPortEnterCritical>
 800b99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9a0:	b25b      	sxtb	r3, r3
 800b9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a6:	d103      	bne.n	800b9b0 <xQueueGenericSend+0x16c>
 800b9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9b6:	b25b      	sxtb	r3, r3
 800b9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9bc:	d103      	bne.n	800b9c6 <xQueueGenericSend+0x182>
 800b9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9c6:	f002 f835 	bl	800da34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9ca:	1d3a      	adds	r2, r7, #4
 800b9cc:	f107 0314 	add.w	r3, r7, #20
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f001 f878 	bl	800cac8 <xTaskCheckForTimeOut>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d124      	bne.n	800ba28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b9de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9e0:	f000 fb22 	bl	800c028 <prvIsQueueFull>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d018      	beq.n	800ba1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ec:	3310      	adds	r3, #16
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	4611      	mov	r1, r2
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 ff9e 	bl	800c934 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b9f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9fa:	f000 faad 	bl	800bf58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b9fe:	f000 fdd3 	bl	800c5a8 <xTaskResumeAll>
 800ba02:	4603      	mov	r3, r0
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f47f af7c 	bne.w	800b902 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ba0a:	4b0c      	ldr	r3, [pc, #48]	; (800ba3c <xQueueGenericSend+0x1f8>)
 800ba0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba10:	601a      	str	r2, [r3, #0]
 800ba12:	f3bf 8f4f 	dsb	sy
 800ba16:	f3bf 8f6f 	isb	sy
 800ba1a:	e772      	b.n	800b902 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ba1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba1e:	f000 fa9b 	bl	800bf58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba22:	f000 fdc1 	bl	800c5a8 <xTaskResumeAll>
 800ba26:	e76c      	b.n	800b902 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ba28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba2a:	f000 fa95 	bl	800bf58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba2e:	f000 fdbb 	bl	800c5a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ba32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3738      	adds	r7, #56	; 0x38
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	e000ed04 	.word	0xe000ed04

0800ba40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b090      	sub	sp, #64	; 0x40
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
 800ba4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ba52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d10a      	bne.n	800ba6e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ba58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5c:	f383 8811 	msr	BASEPRI, r3
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba6a:	bf00      	nop
 800ba6c:	e7fe      	b.n	800ba6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d103      	bne.n	800ba7c <xQueueGenericSendFromISR+0x3c>
 800ba74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d101      	bne.n	800ba80 <xQueueGenericSendFromISR+0x40>
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e000      	b.n	800ba82 <xQueueGenericSendFromISR+0x42>
 800ba80:	2300      	movs	r3, #0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d10a      	bne.n	800ba9c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ba86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba98:	bf00      	nop
 800ba9a:	e7fe      	b.n	800ba9a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	2b02      	cmp	r3, #2
 800baa0:	d103      	bne.n	800baaa <xQueueGenericSendFromISR+0x6a>
 800baa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d101      	bne.n	800baae <xQueueGenericSendFromISR+0x6e>
 800baaa:	2301      	movs	r3, #1
 800baac:	e000      	b.n	800bab0 <xQueueGenericSendFromISR+0x70>
 800baae:	2300      	movs	r3, #0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d10a      	bne.n	800baca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab8:	f383 8811 	msr	BASEPRI, r3
 800babc:	f3bf 8f6f 	isb	sy
 800bac0:	f3bf 8f4f 	dsb	sy
 800bac4:	623b      	str	r3, [r7, #32]
}
 800bac6:	bf00      	nop
 800bac8:	e7fe      	b.n	800bac8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800baca:	f002 f865 	bl	800db98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bace:	f3ef 8211 	mrs	r2, BASEPRI
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	61fa      	str	r2, [r7, #28]
 800bae4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bae6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bae8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800baea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d302      	bcc.n	800bafc <xQueueGenericSendFromISR+0xbc>
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	2b02      	cmp	r3, #2
 800bafa:	d12f      	bne.n	800bb5c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb0c:	683a      	ldr	r2, [r7, #0]
 800bb0e:	68b9      	ldr	r1, [r7, #8]
 800bb10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb12:	f000 f991 	bl	800be38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bb16:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bb1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb1e:	d112      	bne.n	800bb46 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d016      	beq.n	800bb56 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2a:	3324      	adds	r3, #36	; 0x24
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f000 ff51 	bl	800c9d4 <xTaskRemoveFromEventList>
 800bb32:	4603      	mov	r3, r0
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d00e      	beq.n	800bb56 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00b      	beq.n	800bb56 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2201      	movs	r2, #1
 800bb42:	601a      	str	r2, [r3, #0]
 800bb44:	e007      	b.n	800bb56 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bb46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	b25a      	sxtb	r2, r3
 800bb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bb56:	2301      	movs	r3, #1
 800bb58:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bb5a:	e001      	b.n	800bb60 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb62:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bb6a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3740      	adds	r7, #64	; 0x40
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
	...

0800bb78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b08c      	sub	sp, #48	; 0x30
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bb84:	2300      	movs	r3, #0
 800bb86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10a      	bne.n	800bba8 <xQueueReceive+0x30>
	__asm volatile
 800bb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	623b      	str	r3, [r7, #32]
}
 800bba4:	bf00      	nop
 800bba6:	e7fe      	b.n	800bba6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d103      	bne.n	800bbb6 <xQueueReceive+0x3e>
 800bbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d101      	bne.n	800bbba <xQueueReceive+0x42>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e000      	b.n	800bbbc <xQueueReceive+0x44>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d10a      	bne.n	800bbd6 <xQueueReceive+0x5e>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	61fb      	str	r3, [r7, #28]
}
 800bbd2:	bf00      	nop
 800bbd4:	e7fe      	b.n	800bbd4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbd6:	f001 f8bb 	bl	800cd50 <xTaskGetSchedulerState>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d102      	bne.n	800bbe6 <xQueueReceive+0x6e>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d101      	bne.n	800bbea <xQueueReceive+0x72>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e000      	b.n	800bbec <xQueueReceive+0x74>
 800bbea:	2300      	movs	r3, #0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10a      	bne.n	800bc06 <xQueueReceive+0x8e>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	61bb      	str	r3, [r7, #24]
}
 800bc02:	bf00      	nop
 800bc04:	e7fe      	b.n	800bc04 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc06:	f001 fee5 	bl	800d9d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc0e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d01f      	beq.n	800bc56 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bc16:	68b9      	ldr	r1, [r7, #8]
 800bc18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc1a:	f000 f977 	bl	800bf0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc20:	1e5a      	subs	r2, r3, #1
 800bc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc28:	691b      	ldr	r3, [r3, #16]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00f      	beq.n	800bc4e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc30:	3310      	adds	r3, #16
 800bc32:	4618      	mov	r0, r3
 800bc34:	f000 fece 	bl	800c9d4 <xTaskRemoveFromEventList>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d007      	beq.n	800bc4e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bc3e:	4b3d      	ldr	r3, [pc, #244]	; (800bd34 <xQueueReceive+0x1bc>)
 800bc40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc44:	601a      	str	r2, [r3, #0]
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bc4e:	f001 fef1 	bl	800da34 <vPortExitCritical>
				return pdPASS;
 800bc52:	2301      	movs	r3, #1
 800bc54:	e069      	b.n	800bd2a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d103      	bne.n	800bc64 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc5c:	f001 feea 	bl	800da34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bc60:	2300      	movs	r3, #0
 800bc62:	e062      	b.n	800bd2a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d106      	bne.n	800bc78 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc6a:	f107 0310 	add.w	r3, r7, #16
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f000 ff14 	bl	800ca9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc74:	2301      	movs	r3, #1
 800bc76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc78:	f001 fedc 	bl	800da34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc7c:	f000 fc86 	bl	800c58c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc80:	f001 fea8 	bl	800d9d4 <vPortEnterCritical>
 800bc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc8a:	b25b      	sxtb	r3, r3
 800bc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc90:	d103      	bne.n	800bc9a <xQueueReceive+0x122>
 800bc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc94:	2200      	movs	r2, #0
 800bc96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bca0:	b25b      	sxtb	r3, r3
 800bca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca6:	d103      	bne.n	800bcb0 <xQueueReceive+0x138>
 800bca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcb0:	f001 fec0 	bl	800da34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcb4:	1d3a      	adds	r2, r7, #4
 800bcb6:	f107 0310 	add.w	r3, r7, #16
 800bcba:	4611      	mov	r1, r2
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f000 ff03 	bl	800cac8 <xTaskCheckForTimeOut>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d123      	bne.n	800bd10 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bcc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcca:	f000 f997 	bl	800bffc <prvIsQueueEmpty>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d017      	beq.n	800bd04 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd6:	3324      	adds	r3, #36	; 0x24
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	4611      	mov	r1, r2
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f000 fe29 	bl	800c934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bce4:	f000 f938 	bl	800bf58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bce8:	f000 fc5e 	bl	800c5a8 <xTaskResumeAll>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d189      	bne.n	800bc06 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bcf2:	4b10      	ldr	r3, [pc, #64]	; (800bd34 <xQueueReceive+0x1bc>)
 800bcf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcf8:	601a      	str	r2, [r3, #0]
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	f3bf 8f6f 	isb	sy
 800bd02:	e780      	b.n	800bc06 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bd04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd06:	f000 f927 	bl	800bf58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd0a:	f000 fc4d 	bl	800c5a8 <xTaskResumeAll>
 800bd0e:	e77a      	b.n	800bc06 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bd10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd12:	f000 f921 	bl	800bf58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd16:	f000 fc47 	bl	800c5a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd1c:	f000 f96e 	bl	800bffc <prvIsQueueEmpty>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	f43f af6f 	beq.w	800bc06 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bd28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3730      	adds	r7, #48	; 0x30
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	e000ed04 	.word	0xe000ed04

0800bd38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b08e      	sub	sp, #56	; 0x38
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d10a      	bne.n	800bd64 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	623b      	str	r3, [r7, #32]
}
 800bd60:	bf00      	nop
 800bd62:	e7fe      	b.n	800bd62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d103      	bne.n	800bd72 <xQueueReceiveFromISR+0x3a>
 800bd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d101      	bne.n	800bd76 <xQueueReceiveFromISR+0x3e>
 800bd72:	2301      	movs	r3, #1
 800bd74:	e000      	b.n	800bd78 <xQueueReceiveFromISR+0x40>
 800bd76:	2300      	movs	r3, #0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d10a      	bne.n	800bd92 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd80:	f383 8811 	msr	BASEPRI, r3
 800bd84:	f3bf 8f6f 	isb	sy
 800bd88:	f3bf 8f4f 	dsb	sy
 800bd8c:	61fb      	str	r3, [r7, #28]
}
 800bd8e:	bf00      	nop
 800bd90:	e7fe      	b.n	800bd90 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd92:	f001 ff01 	bl	800db98 <vPortValidateInterruptPriority>
	__asm volatile
 800bd96:	f3ef 8211 	mrs	r2, BASEPRI
 800bd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9e:	f383 8811 	msr	BASEPRI, r3
 800bda2:	f3bf 8f6f 	isb	sy
 800bda6:	f3bf 8f4f 	dsb	sy
 800bdaa:	61ba      	str	r2, [r7, #24]
 800bdac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bdae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bdb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d02f      	beq.n	800be1e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bdc8:	68b9      	ldr	r1, [r7, #8]
 800bdca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdcc:	f000 f89e 	bl	800bf0c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd2:	1e5a      	subs	r2, r3, #1
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bdd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde0:	d112      	bne.n	800be08 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde4:	691b      	ldr	r3, [r3, #16]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d016      	beq.n	800be18 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdec:	3310      	adds	r3, #16
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f000 fdf0 	bl	800c9d4 <xTaskRemoveFromEventList>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00e      	beq.n	800be18 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d00b      	beq.n	800be18 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2201      	movs	r2, #1
 800be04:	601a      	str	r2, [r3, #0]
 800be06:	e007      	b.n	800be18 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800be08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be0c:	3301      	adds	r3, #1
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	b25a      	sxtb	r2, r3
 800be12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800be18:	2301      	movs	r3, #1
 800be1a:	637b      	str	r3, [r7, #52]	; 0x34
 800be1c:	e001      	b.n	800be22 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800be1e:	2300      	movs	r3, #0
 800be20:	637b      	str	r3, [r7, #52]	; 0x34
 800be22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be24:	613b      	str	r3, [r7, #16]
	__asm volatile
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	f383 8811 	msr	BASEPRI, r3
}
 800be2c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800be30:	4618      	mov	r0, r3
 800be32:	3738      	adds	r7, #56	; 0x38
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b086      	sub	sp, #24
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800be44:	2300      	movs	r3, #0
 800be46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be52:	2b00      	cmp	r3, #0
 800be54:	d10d      	bne.n	800be72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d14d      	bne.n	800befa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	4618      	mov	r0, r3
 800be64:	f000 ff92 	bl	800cd8c <xTaskPriorityDisinherit>
 800be68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2200      	movs	r2, #0
 800be6e:	609a      	str	r2, [r3, #8]
 800be70:	e043      	b.n	800befa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d119      	bne.n	800beac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6858      	ldr	r0, [r3, #4]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be80:	461a      	mov	r2, r3
 800be82:	68b9      	ldr	r1, [r7, #8]
 800be84:	f002 f8ec 	bl	800e060 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	685a      	ldr	r2, [r3, #4]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be90:	441a      	add	r2, r3
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	685a      	ldr	r2, [r3, #4]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d32b      	bcc.n	800befa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	605a      	str	r2, [r3, #4]
 800beaa:	e026      	b.n	800befa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	68d8      	ldr	r0, [r3, #12]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb4:	461a      	mov	r2, r3
 800beb6:	68b9      	ldr	r1, [r7, #8]
 800beb8:	f002 f8d2 	bl	800e060 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	68da      	ldr	r2, [r3, #12]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec4:	425b      	negs	r3, r3
 800bec6:	441a      	add	r2, r3
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	68da      	ldr	r2, [r3, #12]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d207      	bcs.n	800bee8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	689a      	ldr	r2, [r3, #8]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee0:	425b      	negs	r3, r3
 800bee2:	441a      	add	r2, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2b02      	cmp	r3, #2
 800beec:	d105      	bne.n	800befa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d002      	beq.n	800befa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	3b01      	subs	r3, #1
 800bef8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	1c5a      	adds	r2, r3, #1
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bf02:	697b      	ldr	r3, [r7, #20]
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3718      	adds	r7, #24
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d018      	beq.n	800bf50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	68da      	ldr	r2, [r3, #12]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf26:	441a      	add	r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	68da      	ldr	r2, [r3, #12]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d303      	bcc.n	800bf40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	68d9      	ldr	r1, [r3, #12]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf48:	461a      	mov	r2, r3
 800bf4a:	6838      	ldr	r0, [r7, #0]
 800bf4c:	f002 f888 	bl	800e060 <memcpy>
	}
}
 800bf50:	bf00      	nop
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bf60:	f001 fd38 	bl	800d9d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf6c:	e011      	b.n	800bf92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d012      	beq.n	800bf9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	3324      	adds	r3, #36	; 0x24
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f000 fd2a 	bl	800c9d4 <xTaskRemoveFromEventList>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d001      	beq.n	800bf8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bf86:	f000 fe01 	bl	800cb8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bf8a:	7bfb      	ldrb	r3, [r7, #15]
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	dce9      	bgt.n	800bf6e <prvUnlockQueue+0x16>
 800bf9a:	e000      	b.n	800bf9e <prvUnlockQueue+0x46>
					break;
 800bf9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	22ff      	movs	r2, #255	; 0xff
 800bfa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bfa6:	f001 fd45 	bl	800da34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bfaa:	f001 fd13 	bl	800d9d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bfb6:	e011      	b.n	800bfdc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d012      	beq.n	800bfe6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	3310      	adds	r3, #16
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f000 fd05 	bl	800c9d4 <xTaskRemoveFromEventList>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d001      	beq.n	800bfd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bfd0:	f000 fddc 	bl	800cb8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bfd4:	7bbb      	ldrb	r3, [r7, #14]
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bfdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	dce9      	bgt.n	800bfb8 <prvUnlockQueue+0x60>
 800bfe4:	e000      	b.n	800bfe8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bfe6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	22ff      	movs	r2, #255	; 0xff
 800bfec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bff0:	f001 fd20 	bl	800da34 <vPortExitCritical>
}
 800bff4:	bf00      	nop
 800bff6:	3710      	adds	r7, #16
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c004:	f001 fce6 	bl	800d9d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d102      	bne.n	800c016 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c010:	2301      	movs	r3, #1
 800c012:	60fb      	str	r3, [r7, #12]
 800c014:	e001      	b.n	800c01a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c016:	2300      	movs	r3, #0
 800c018:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c01a:	f001 fd0b 	bl	800da34 <vPortExitCritical>

	return xReturn;
 800c01e:	68fb      	ldr	r3, [r7, #12]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3710      	adds	r7, #16
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c030:	f001 fcd0 	bl	800d9d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d102      	bne.n	800c046 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c040:	2301      	movs	r3, #1
 800c042:	60fb      	str	r3, [r7, #12]
 800c044:	e001      	b.n	800c04a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c046:	2300      	movs	r3, #0
 800c048:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c04a:	f001 fcf3 	bl	800da34 <vPortExitCritical>

	return xReturn;
 800c04e:	68fb      	ldr	r3, [r7, #12]
}
 800c050:	4618      	mov	r0, r3
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c062:	2300      	movs	r3, #0
 800c064:	60fb      	str	r3, [r7, #12]
 800c066:	e014      	b.n	800c092 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c068:	4a0f      	ldr	r2, [pc, #60]	; (800c0a8 <vQueueAddToRegistry+0x50>)
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10b      	bne.n	800c08c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c074:	490c      	ldr	r1, [pc, #48]	; (800c0a8 <vQueueAddToRegistry+0x50>)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c07e:	4a0a      	ldr	r2, [pc, #40]	; (800c0a8 <vQueueAddToRegistry+0x50>)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	00db      	lsls	r3, r3, #3
 800c084:	4413      	add	r3, r2
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c08a:	e006      	b.n	800c09a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	3301      	adds	r3, #1
 800c090:	60fb      	str	r3, [r7, #12]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2b07      	cmp	r3, #7
 800c096:	d9e7      	bls.n	800c068 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c098:	bf00      	nop
 800c09a:	bf00      	nop
 800c09c:	3714      	adds	r7, #20
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	200050c0 	.word	0x200050c0

0800c0ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b086      	sub	sp, #24
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c0bc:	f001 fc8a 	bl	800d9d4 <vPortEnterCritical>
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0c6:	b25b      	sxtb	r3, r3
 800c0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0cc:	d103      	bne.n	800c0d6 <vQueueWaitForMessageRestricted+0x2a>
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0dc:	b25b      	sxtb	r3, r3
 800c0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e2:	d103      	bne.n	800c0ec <vQueueWaitForMessageRestricted+0x40>
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0ec:	f001 fca2 	bl	800da34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d106      	bne.n	800c106 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	3324      	adds	r3, #36	; 0x24
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	68b9      	ldr	r1, [r7, #8]
 800c100:	4618      	mov	r0, r3
 800c102:	f000 fc3b 	bl	800c97c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c106:	6978      	ldr	r0, [r7, #20]
 800c108:	f7ff ff26 	bl	800bf58 <prvUnlockQueue>
	}
 800c10c:	bf00      	nop
 800c10e:	3718      	adds	r7, #24
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c114:	b580      	push	{r7, lr}
 800c116:	b08e      	sub	sp, #56	; 0x38
 800c118:	af04      	add	r7, sp, #16
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	607a      	str	r2, [r7, #4]
 800c120:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10a      	bne.n	800c13e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12c:	f383 8811 	msr	BASEPRI, r3
 800c130:	f3bf 8f6f 	isb	sy
 800c134:	f3bf 8f4f 	dsb	sy
 800c138:	623b      	str	r3, [r7, #32]
}
 800c13a:	bf00      	nop
 800c13c:	e7fe      	b.n	800c13c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10a      	bne.n	800c15a <xTaskCreateStatic+0x46>
	__asm volatile
 800c144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c148:	f383 8811 	msr	BASEPRI, r3
 800c14c:	f3bf 8f6f 	isb	sy
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	61fb      	str	r3, [r7, #28]
}
 800c156:	bf00      	nop
 800c158:	e7fe      	b.n	800c158 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c15a:	235c      	movs	r3, #92	; 0x5c
 800c15c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	2b5c      	cmp	r3, #92	; 0x5c
 800c162:	d00a      	beq.n	800c17a <xTaskCreateStatic+0x66>
	__asm volatile
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	f383 8811 	msr	BASEPRI, r3
 800c16c:	f3bf 8f6f 	isb	sy
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	61bb      	str	r3, [r7, #24]
}
 800c176:	bf00      	nop
 800c178:	e7fe      	b.n	800c178 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c17a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d01e      	beq.n	800c1c0 <xTaskCreateStatic+0xac>
 800c182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c184:	2b00      	cmp	r3, #0
 800c186:	d01b      	beq.n	800c1c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c190:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c194:	2202      	movs	r2, #2
 800c196:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c19a:	2300      	movs	r3, #0
 800c19c:	9303      	str	r3, [sp, #12]
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	9302      	str	r3, [sp, #8]
 800c1a2:	f107 0314 	add.w	r3, r7, #20
 800c1a6:	9301      	str	r3, [sp, #4]
 800c1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	68b9      	ldr	r1, [r7, #8]
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f000 f850 	bl	800c258 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1ba:	f000 f8dd 	bl	800c378 <prvAddNewTaskToReadyList>
 800c1be:	e001      	b.n	800c1c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c1c4:	697b      	ldr	r3, [r7, #20]
	}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3728      	adds	r7, #40	; 0x28
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b08c      	sub	sp, #48	; 0x30
 800c1d2:	af04      	add	r7, sp, #16
 800c1d4:	60f8      	str	r0, [r7, #12]
 800c1d6:	60b9      	str	r1, [r7, #8]
 800c1d8:	603b      	str	r3, [r7, #0]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c1de:	88fb      	ldrh	r3, [r7, #6]
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f001 fd18 	bl	800dc18 <pvPortMalloc>
 800c1e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00e      	beq.n	800c20e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c1f0:	205c      	movs	r0, #92	; 0x5c
 800c1f2:	f001 fd11 	bl	800dc18 <pvPortMalloc>
 800c1f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d003      	beq.n	800c206 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	697a      	ldr	r2, [r7, #20]
 800c202:	631a      	str	r2, [r3, #48]	; 0x30
 800c204:	e005      	b.n	800c212 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c206:	6978      	ldr	r0, [r7, #20]
 800c208:	f001 fdd2 	bl	800ddb0 <vPortFree>
 800c20c:	e001      	b.n	800c212 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c20e:	2300      	movs	r3, #0
 800c210:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d017      	beq.n	800c248 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	2200      	movs	r2, #0
 800c21c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c220:	88fa      	ldrh	r2, [r7, #6]
 800c222:	2300      	movs	r3, #0
 800c224:	9303      	str	r3, [sp, #12]
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	9302      	str	r3, [sp, #8]
 800c22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22c:	9301      	str	r3, [sp, #4]
 800c22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c230:	9300      	str	r3, [sp, #0]
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	68b9      	ldr	r1, [r7, #8]
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f000 f80e 	bl	800c258 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c23c:	69f8      	ldr	r0, [r7, #28]
 800c23e:	f000 f89b 	bl	800c378 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c242:	2301      	movs	r3, #1
 800c244:	61bb      	str	r3, [r7, #24]
 800c246:	e002      	b.n	800c24e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c248:	f04f 33ff 	mov.w	r3, #4294967295
 800c24c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c24e:	69bb      	ldr	r3, [r7, #24]
	}
 800c250:	4618      	mov	r0, r3
 800c252:	3720      	adds	r7, #32
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b088      	sub	sp, #32
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
 800c264:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c268:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	461a      	mov	r2, r3
 800c270:	21a5      	movs	r1, #165	; 0xa5
 800c272:	f001 ff03 	bl	800e07c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c280:	3b01      	subs	r3, #1
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	4413      	add	r3, r2
 800c286:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	f023 0307 	bic.w	r3, r3, #7
 800c28e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	f003 0307 	and.w	r3, r3, #7
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00a      	beq.n	800c2b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29e:	f383 8811 	msr	BASEPRI, r3
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	617b      	str	r3, [r7, #20]
}
 800c2ac:	bf00      	nop
 800c2ae:	e7fe      	b.n	800c2ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d01f      	beq.n	800c2f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	61fb      	str	r3, [r7, #28]
 800c2ba:	e012      	b.n	800c2e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c2bc:	68ba      	ldr	r2, [r7, #8]
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	7819      	ldrb	r1, [r3, #0]
 800c2c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	3334      	adds	r3, #52	; 0x34
 800c2cc:	460a      	mov	r2, r1
 800c2ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d006      	beq.n	800c2ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	61fb      	str	r3, [r7, #28]
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	2b0f      	cmp	r3, #15
 800c2e6:	d9e9      	bls.n	800c2bc <prvInitialiseNewTask+0x64>
 800c2e8:	e000      	b.n	800c2ec <prvInitialiseNewTask+0x94>
			{
				break;
 800c2ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c2f4:	e003      	b.n	800c2fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c300:	2b37      	cmp	r3, #55	; 0x37
 800c302:	d901      	bls.n	800c308 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c304:	2337      	movs	r3, #55	; 0x37
 800c306:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c30c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c312:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c316:	2200      	movs	r2, #0
 800c318:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	3304      	adds	r3, #4
 800c31e:	4618      	mov	r0, r3
 800c320:	f7ff f8be 	bl	800b4a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c326:	3318      	adds	r3, #24
 800c328:	4618      	mov	r0, r3
 800c32a:	f7ff f8b9 	bl	800b4a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c332:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c336:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c342:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c346:	2200      	movs	r2, #0
 800c348:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34c:	2200      	movs	r2, #0
 800c34e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c352:	683a      	ldr	r2, [r7, #0]
 800c354:	68f9      	ldr	r1, [r7, #12]
 800c356:	69b8      	ldr	r0, [r7, #24]
 800c358:	f001 fa0c 	bl	800d774 <pxPortInitialiseStack>
 800c35c:	4602      	mov	r2, r0
 800c35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c360:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c364:	2b00      	cmp	r3, #0
 800c366:	d002      	beq.n	800c36e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c36c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c36e:	bf00      	nop
 800c370:	3720      	adds	r7, #32
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
	...

0800c378 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c380:	f001 fb28 	bl	800d9d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c384:	4b2d      	ldr	r3, [pc, #180]	; (800c43c <prvAddNewTaskToReadyList+0xc4>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	3301      	adds	r3, #1
 800c38a:	4a2c      	ldr	r2, [pc, #176]	; (800c43c <prvAddNewTaskToReadyList+0xc4>)
 800c38c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c38e:	4b2c      	ldr	r3, [pc, #176]	; (800c440 <prvAddNewTaskToReadyList+0xc8>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d109      	bne.n	800c3aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c396:	4a2a      	ldr	r2, [pc, #168]	; (800c440 <prvAddNewTaskToReadyList+0xc8>)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c39c:	4b27      	ldr	r3, [pc, #156]	; (800c43c <prvAddNewTaskToReadyList+0xc4>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d110      	bne.n	800c3c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c3a4:	f000 fc16 	bl	800cbd4 <prvInitialiseTaskLists>
 800c3a8:	e00d      	b.n	800c3c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c3aa:	4b26      	ldr	r3, [pc, #152]	; (800c444 <prvAddNewTaskToReadyList+0xcc>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d109      	bne.n	800c3c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c3b2:	4b23      	ldr	r3, [pc, #140]	; (800c440 <prvAddNewTaskToReadyList+0xc8>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d802      	bhi.n	800c3c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c3c0:	4a1f      	ldr	r2, [pc, #124]	; (800c440 <prvAddNewTaskToReadyList+0xc8>)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c3c6:	4b20      	ldr	r3, [pc, #128]	; (800c448 <prvAddNewTaskToReadyList+0xd0>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	4a1e      	ldr	r2, [pc, #120]	; (800c448 <prvAddNewTaskToReadyList+0xd0>)
 800c3ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c3d0:	4b1d      	ldr	r3, [pc, #116]	; (800c448 <prvAddNewTaskToReadyList+0xd0>)
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3dc:	4b1b      	ldr	r3, [pc, #108]	; (800c44c <prvAddNewTaskToReadyList+0xd4>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d903      	bls.n	800c3ec <prvAddNewTaskToReadyList+0x74>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e8:	4a18      	ldr	r2, [pc, #96]	; (800c44c <prvAddNewTaskToReadyList+0xd4>)
 800c3ea:	6013      	str	r3, [r2, #0]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3f0:	4613      	mov	r3, r2
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	4413      	add	r3, r2
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	4a15      	ldr	r2, [pc, #84]	; (800c450 <prvAddNewTaskToReadyList+0xd8>)
 800c3fa:	441a      	add	r2, r3
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3304      	adds	r3, #4
 800c400:	4619      	mov	r1, r3
 800c402:	4610      	mov	r0, r2
 800c404:	f7ff f859 	bl	800b4ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c408:	f001 fb14 	bl	800da34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c40c:	4b0d      	ldr	r3, [pc, #52]	; (800c444 <prvAddNewTaskToReadyList+0xcc>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d00e      	beq.n	800c432 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c414:	4b0a      	ldr	r3, [pc, #40]	; (800c440 <prvAddNewTaskToReadyList+0xc8>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41e:	429a      	cmp	r2, r3
 800c420:	d207      	bcs.n	800c432 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c422:	4b0c      	ldr	r3, [pc, #48]	; (800c454 <prvAddNewTaskToReadyList+0xdc>)
 800c424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c428:	601a      	str	r2, [r3, #0]
 800c42a:	f3bf 8f4f 	dsb	sy
 800c42e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c432:	bf00      	nop
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	20001394 	.word	0x20001394
 800c440:	20000ec0 	.word	0x20000ec0
 800c444:	200013a0 	.word	0x200013a0
 800c448:	200013b0 	.word	0x200013b0
 800c44c:	2000139c 	.word	0x2000139c
 800c450:	20000ec4 	.word	0x20000ec4
 800c454:	e000ed04 	.word	0xe000ed04

0800c458 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c460:	2300      	movs	r3, #0
 800c462:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d017      	beq.n	800c49a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c46a:	4b13      	ldr	r3, [pc, #76]	; (800c4b8 <vTaskDelay+0x60>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00a      	beq.n	800c488 <vTaskDelay+0x30>
	__asm volatile
 800c472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c476:	f383 8811 	msr	BASEPRI, r3
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	60bb      	str	r3, [r7, #8]
}
 800c484:	bf00      	nop
 800c486:	e7fe      	b.n	800c486 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c488:	f000 f880 	bl	800c58c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c48c:	2100      	movs	r1, #0
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 fcea 	bl	800ce68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c494:	f000 f888 	bl	800c5a8 <xTaskResumeAll>
 800c498:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d107      	bne.n	800c4b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c4a0:	4b06      	ldr	r3, [pc, #24]	; (800c4bc <vTaskDelay+0x64>)
 800c4a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4a6:	601a      	str	r2, [r3, #0]
 800c4a8:	f3bf 8f4f 	dsb	sy
 800c4ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4b0:	bf00      	nop
 800c4b2:	3710      	adds	r7, #16
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	200013bc 	.word	0x200013bc
 800c4bc:	e000ed04 	.word	0xe000ed04

0800c4c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b08a      	sub	sp, #40	; 0x28
 800c4c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c4ce:	463a      	mov	r2, r7
 800c4d0:	1d39      	adds	r1, r7, #4
 800c4d2:	f107 0308 	add.w	r3, r7, #8
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7fe ff8e 	bl	800b3f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	68ba      	ldr	r2, [r7, #8]
 800c4e2:	9202      	str	r2, [sp, #8]
 800c4e4:	9301      	str	r3, [sp, #4]
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	9300      	str	r3, [sp, #0]
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	460a      	mov	r2, r1
 800c4ee:	4921      	ldr	r1, [pc, #132]	; (800c574 <vTaskStartScheduler+0xb4>)
 800c4f0:	4821      	ldr	r0, [pc, #132]	; (800c578 <vTaskStartScheduler+0xb8>)
 800c4f2:	f7ff fe0f 	bl	800c114 <xTaskCreateStatic>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	4a20      	ldr	r2, [pc, #128]	; (800c57c <vTaskStartScheduler+0xbc>)
 800c4fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c4fc:	4b1f      	ldr	r3, [pc, #124]	; (800c57c <vTaskStartScheduler+0xbc>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d002      	beq.n	800c50a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c504:	2301      	movs	r3, #1
 800c506:	617b      	str	r3, [r7, #20]
 800c508:	e001      	b.n	800c50e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c50a:	2300      	movs	r3, #0
 800c50c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	2b01      	cmp	r3, #1
 800c512:	d102      	bne.n	800c51a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c514:	f000 fcfc 	bl	800cf10 <xTimerCreateTimerTask>
 800c518:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d116      	bne.n	800c54e <vTaskStartScheduler+0x8e>
	__asm volatile
 800c520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c524:	f383 8811 	msr	BASEPRI, r3
 800c528:	f3bf 8f6f 	isb	sy
 800c52c:	f3bf 8f4f 	dsb	sy
 800c530:	613b      	str	r3, [r7, #16]
}
 800c532:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c534:	4b12      	ldr	r3, [pc, #72]	; (800c580 <vTaskStartScheduler+0xc0>)
 800c536:	f04f 32ff 	mov.w	r2, #4294967295
 800c53a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c53c:	4b11      	ldr	r3, [pc, #68]	; (800c584 <vTaskStartScheduler+0xc4>)
 800c53e:	2201      	movs	r2, #1
 800c540:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c542:	4b11      	ldr	r3, [pc, #68]	; (800c588 <vTaskStartScheduler+0xc8>)
 800c544:	2200      	movs	r2, #0
 800c546:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c548:	f001 f9a2 	bl	800d890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c54c:	e00e      	b.n	800c56c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c554:	d10a      	bne.n	800c56c <vTaskStartScheduler+0xac>
	__asm volatile
 800c556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	60fb      	str	r3, [r7, #12]
}
 800c568:	bf00      	nop
 800c56a:	e7fe      	b.n	800c56a <vTaskStartScheduler+0xaa>
}
 800c56c:	bf00      	nop
 800c56e:	3718      	adds	r7, #24
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	0800f460 	.word	0x0800f460
 800c578:	0800cba5 	.word	0x0800cba5
 800c57c:	200013b8 	.word	0x200013b8
 800c580:	200013b4 	.word	0x200013b4
 800c584:	200013a0 	.word	0x200013a0
 800c588:	20001398 	.word	0x20001398

0800c58c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c58c:	b480      	push	{r7}
 800c58e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c590:	4b04      	ldr	r3, [pc, #16]	; (800c5a4 <vTaskSuspendAll+0x18>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	3301      	adds	r3, #1
 800c596:	4a03      	ldr	r2, [pc, #12]	; (800c5a4 <vTaskSuspendAll+0x18>)
 800c598:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c59a:	bf00      	nop
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr
 800c5a4:	200013bc 	.word	0x200013bc

0800c5a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c5b6:	4b42      	ldr	r3, [pc, #264]	; (800c6c0 <xTaskResumeAll+0x118>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10a      	bne.n	800c5d4 <xTaskResumeAll+0x2c>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	603b      	str	r3, [r7, #0]
}
 800c5d0:	bf00      	nop
 800c5d2:	e7fe      	b.n	800c5d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c5d4:	f001 f9fe 	bl	800d9d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c5d8:	4b39      	ldr	r3, [pc, #228]	; (800c6c0 <xTaskResumeAll+0x118>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	4a38      	ldr	r2, [pc, #224]	; (800c6c0 <xTaskResumeAll+0x118>)
 800c5e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5e2:	4b37      	ldr	r3, [pc, #220]	; (800c6c0 <xTaskResumeAll+0x118>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d162      	bne.n	800c6b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c5ea:	4b36      	ldr	r3, [pc, #216]	; (800c6c4 <xTaskResumeAll+0x11c>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d05e      	beq.n	800c6b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c5f2:	e02f      	b.n	800c654 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5f4:	4b34      	ldr	r3, [pc, #208]	; (800c6c8 <xTaskResumeAll+0x120>)
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	3318      	adds	r3, #24
 800c600:	4618      	mov	r0, r3
 800c602:	f7fe ffb7 	bl	800b574 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	3304      	adds	r3, #4
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7fe ffb2 	bl	800b574 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c614:	4b2d      	ldr	r3, [pc, #180]	; (800c6cc <xTaskResumeAll+0x124>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d903      	bls.n	800c624 <xTaskResumeAll+0x7c>
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c620:	4a2a      	ldr	r2, [pc, #168]	; (800c6cc <xTaskResumeAll+0x124>)
 800c622:	6013      	str	r3, [r2, #0]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c628:	4613      	mov	r3, r2
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	4413      	add	r3, r2
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	4a27      	ldr	r2, [pc, #156]	; (800c6d0 <xTaskResumeAll+0x128>)
 800c632:	441a      	add	r2, r3
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	3304      	adds	r3, #4
 800c638:	4619      	mov	r1, r3
 800c63a:	4610      	mov	r0, r2
 800c63c:	f7fe ff3d 	bl	800b4ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c644:	4b23      	ldr	r3, [pc, #140]	; (800c6d4 <xTaskResumeAll+0x12c>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d302      	bcc.n	800c654 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c64e:	4b22      	ldr	r3, [pc, #136]	; (800c6d8 <xTaskResumeAll+0x130>)
 800c650:	2201      	movs	r2, #1
 800c652:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c654:	4b1c      	ldr	r3, [pc, #112]	; (800c6c8 <xTaskResumeAll+0x120>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d1cb      	bne.n	800c5f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d001      	beq.n	800c666 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c662:	f000 fb55 	bl	800cd10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c666:	4b1d      	ldr	r3, [pc, #116]	; (800c6dc <xTaskResumeAll+0x134>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d010      	beq.n	800c694 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c672:	f000 f847 	bl	800c704 <xTaskIncrementTick>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d002      	beq.n	800c682 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c67c:	4b16      	ldr	r3, [pc, #88]	; (800c6d8 <xTaskResumeAll+0x130>)
 800c67e:	2201      	movs	r2, #1
 800c680:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	3b01      	subs	r3, #1
 800c686:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1f1      	bne.n	800c672 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c68e:	4b13      	ldr	r3, [pc, #76]	; (800c6dc <xTaskResumeAll+0x134>)
 800c690:	2200      	movs	r2, #0
 800c692:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c694:	4b10      	ldr	r3, [pc, #64]	; (800c6d8 <xTaskResumeAll+0x130>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d009      	beq.n	800c6b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c69c:	2301      	movs	r3, #1
 800c69e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c6a0:	4b0f      	ldr	r3, [pc, #60]	; (800c6e0 <xTaskResumeAll+0x138>)
 800c6a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a6:	601a      	str	r2, [r3, #0]
 800c6a8:	f3bf 8f4f 	dsb	sy
 800c6ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6b0:	f001 f9c0 	bl	800da34 <vPortExitCritical>

	return xAlreadyYielded;
 800c6b4:	68bb      	ldr	r3, [r7, #8]
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3710      	adds	r7, #16
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	200013bc 	.word	0x200013bc
 800c6c4:	20001394 	.word	0x20001394
 800c6c8:	20001354 	.word	0x20001354
 800c6cc:	2000139c 	.word	0x2000139c
 800c6d0:	20000ec4 	.word	0x20000ec4
 800c6d4:	20000ec0 	.word	0x20000ec0
 800c6d8:	200013a8 	.word	0x200013a8
 800c6dc:	200013a4 	.word	0x200013a4
 800c6e0:	e000ed04 	.word	0xe000ed04

0800c6e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c6ea:	4b05      	ldr	r3, [pc, #20]	; (800c700 <xTaskGetTickCount+0x1c>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c6f0:	687b      	ldr	r3, [r7, #4]
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	370c      	adds	r7, #12
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	20001398 	.word	0x20001398

0800c704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b086      	sub	sp, #24
 800c708:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c70a:	2300      	movs	r3, #0
 800c70c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c70e:	4b4f      	ldr	r3, [pc, #316]	; (800c84c <xTaskIncrementTick+0x148>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	f040 808f 	bne.w	800c836 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c718:	4b4d      	ldr	r3, [pc, #308]	; (800c850 <xTaskIncrementTick+0x14c>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	3301      	adds	r3, #1
 800c71e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c720:	4a4b      	ldr	r2, [pc, #300]	; (800c850 <xTaskIncrementTick+0x14c>)
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d120      	bne.n	800c76e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c72c:	4b49      	ldr	r3, [pc, #292]	; (800c854 <xTaskIncrementTick+0x150>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d00a      	beq.n	800c74c <xTaskIncrementTick+0x48>
	__asm volatile
 800c736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73a:	f383 8811 	msr	BASEPRI, r3
 800c73e:	f3bf 8f6f 	isb	sy
 800c742:	f3bf 8f4f 	dsb	sy
 800c746:	603b      	str	r3, [r7, #0]
}
 800c748:	bf00      	nop
 800c74a:	e7fe      	b.n	800c74a <xTaskIncrementTick+0x46>
 800c74c:	4b41      	ldr	r3, [pc, #260]	; (800c854 <xTaskIncrementTick+0x150>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	60fb      	str	r3, [r7, #12]
 800c752:	4b41      	ldr	r3, [pc, #260]	; (800c858 <xTaskIncrementTick+0x154>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a3f      	ldr	r2, [pc, #252]	; (800c854 <xTaskIncrementTick+0x150>)
 800c758:	6013      	str	r3, [r2, #0]
 800c75a:	4a3f      	ldr	r2, [pc, #252]	; (800c858 <xTaskIncrementTick+0x154>)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6013      	str	r3, [r2, #0]
 800c760:	4b3e      	ldr	r3, [pc, #248]	; (800c85c <xTaskIncrementTick+0x158>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	3301      	adds	r3, #1
 800c766:	4a3d      	ldr	r2, [pc, #244]	; (800c85c <xTaskIncrementTick+0x158>)
 800c768:	6013      	str	r3, [r2, #0]
 800c76a:	f000 fad1 	bl	800cd10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c76e:	4b3c      	ldr	r3, [pc, #240]	; (800c860 <xTaskIncrementTick+0x15c>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	693a      	ldr	r2, [r7, #16]
 800c774:	429a      	cmp	r2, r3
 800c776:	d349      	bcc.n	800c80c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c778:	4b36      	ldr	r3, [pc, #216]	; (800c854 <xTaskIncrementTick+0x150>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d104      	bne.n	800c78c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c782:	4b37      	ldr	r3, [pc, #220]	; (800c860 <xTaskIncrementTick+0x15c>)
 800c784:	f04f 32ff 	mov.w	r2, #4294967295
 800c788:	601a      	str	r2, [r3, #0]
					break;
 800c78a:	e03f      	b.n	800c80c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c78c:	4b31      	ldr	r3, [pc, #196]	; (800c854 <xTaskIncrementTick+0x150>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c79c:	693a      	ldr	r2, [r7, #16]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d203      	bcs.n	800c7ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c7a4:	4a2e      	ldr	r2, [pc, #184]	; (800c860 <xTaskIncrementTick+0x15c>)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c7aa:	e02f      	b.n	800c80c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	3304      	adds	r3, #4
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7fe fedf 	bl	800b574 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d004      	beq.n	800c7c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	3318      	adds	r3, #24
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7fe fed6 	bl	800b574 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7cc:	4b25      	ldr	r3, [pc, #148]	; (800c864 <xTaskIncrementTick+0x160>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d903      	bls.n	800c7dc <xTaskIncrementTick+0xd8>
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d8:	4a22      	ldr	r2, [pc, #136]	; (800c864 <xTaskIncrementTick+0x160>)
 800c7da:	6013      	str	r3, [r2, #0]
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	009b      	lsls	r3, r3, #2
 800c7e4:	4413      	add	r3, r2
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	4a1f      	ldr	r2, [pc, #124]	; (800c868 <xTaskIncrementTick+0x164>)
 800c7ea:	441a      	add	r2, r3
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	3304      	adds	r3, #4
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	4610      	mov	r0, r2
 800c7f4:	f7fe fe61 	bl	800b4ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7fc:	4b1b      	ldr	r3, [pc, #108]	; (800c86c <xTaskIncrementTick+0x168>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c802:	429a      	cmp	r2, r3
 800c804:	d3b8      	bcc.n	800c778 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c806:	2301      	movs	r3, #1
 800c808:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c80a:	e7b5      	b.n	800c778 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c80c:	4b17      	ldr	r3, [pc, #92]	; (800c86c <xTaskIncrementTick+0x168>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c812:	4915      	ldr	r1, [pc, #84]	; (800c868 <xTaskIncrementTick+0x164>)
 800c814:	4613      	mov	r3, r2
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	4413      	add	r3, r2
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	440b      	add	r3, r1
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b01      	cmp	r3, #1
 800c822:	d901      	bls.n	800c828 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c824:	2301      	movs	r3, #1
 800c826:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c828:	4b11      	ldr	r3, [pc, #68]	; (800c870 <xTaskIncrementTick+0x16c>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d007      	beq.n	800c840 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c830:	2301      	movs	r3, #1
 800c832:	617b      	str	r3, [r7, #20]
 800c834:	e004      	b.n	800c840 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c836:	4b0f      	ldr	r3, [pc, #60]	; (800c874 <xTaskIncrementTick+0x170>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	3301      	adds	r3, #1
 800c83c:	4a0d      	ldr	r2, [pc, #52]	; (800c874 <xTaskIncrementTick+0x170>)
 800c83e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c840:	697b      	ldr	r3, [r7, #20]
}
 800c842:	4618      	mov	r0, r3
 800c844:	3718      	adds	r7, #24
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	200013bc 	.word	0x200013bc
 800c850:	20001398 	.word	0x20001398
 800c854:	2000134c 	.word	0x2000134c
 800c858:	20001350 	.word	0x20001350
 800c85c:	200013ac 	.word	0x200013ac
 800c860:	200013b4 	.word	0x200013b4
 800c864:	2000139c 	.word	0x2000139c
 800c868:	20000ec4 	.word	0x20000ec4
 800c86c:	20000ec0 	.word	0x20000ec0
 800c870:	200013a8 	.word	0x200013a8
 800c874:	200013a4 	.word	0x200013a4

0800c878 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c87e:	4b28      	ldr	r3, [pc, #160]	; (800c920 <vTaskSwitchContext+0xa8>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d003      	beq.n	800c88e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c886:	4b27      	ldr	r3, [pc, #156]	; (800c924 <vTaskSwitchContext+0xac>)
 800c888:	2201      	movs	r2, #1
 800c88a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c88c:	e041      	b.n	800c912 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c88e:	4b25      	ldr	r3, [pc, #148]	; (800c924 <vTaskSwitchContext+0xac>)
 800c890:	2200      	movs	r2, #0
 800c892:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c894:	4b24      	ldr	r3, [pc, #144]	; (800c928 <vTaskSwitchContext+0xb0>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	60fb      	str	r3, [r7, #12]
 800c89a:	e010      	b.n	800c8be <vTaskSwitchContext+0x46>
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d10a      	bne.n	800c8b8 <vTaskSwitchContext+0x40>
	__asm volatile
 800c8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a6:	f383 8811 	msr	BASEPRI, r3
 800c8aa:	f3bf 8f6f 	isb	sy
 800c8ae:	f3bf 8f4f 	dsb	sy
 800c8b2:	607b      	str	r3, [r7, #4]
}
 800c8b4:	bf00      	nop
 800c8b6:	e7fe      	b.n	800c8b6 <vTaskSwitchContext+0x3e>
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	60fb      	str	r3, [r7, #12]
 800c8be:	491b      	ldr	r1, [pc, #108]	; (800c92c <vTaskSwitchContext+0xb4>)
 800c8c0:	68fa      	ldr	r2, [r7, #12]
 800c8c2:	4613      	mov	r3, r2
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	4413      	add	r3, r2
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	440b      	add	r3, r1
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d0e4      	beq.n	800c89c <vTaskSwitchContext+0x24>
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	4413      	add	r3, r2
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	4a13      	ldr	r2, [pc, #76]	; (800c92c <vTaskSwitchContext+0xb4>)
 800c8de:	4413      	add	r3, r2
 800c8e0:	60bb      	str	r3, [r7, #8]
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	685a      	ldr	r2, [r3, #4]
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	605a      	str	r2, [r3, #4]
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	685a      	ldr	r2, [r3, #4]
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	3308      	adds	r3, #8
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d104      	bne.n	800c902 <vTaskSwitchContext+0x8a>
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	685a      	ldr	r2, [r3, #4]
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	605a      	str	r2, [r3, #4]
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	4a09      	ldr	r2, [pc, #36]	; (800c930 <vTaskSwitchContext+0xb8>)
 800c90a:	6013      	str	r3, [r2, #0]
 800c90c:	4a06      	ldr	r2, [pc, #24]	; (800c928 <vTaskSwitchContext+0xb0>)
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6013      	str	r3, [r2, #0]
}
 800c912:	bf00      	nop
 800c914:	3714      	adds	r7, #20
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	200013bc 	.word	0x200013bc
 800c924:	200013a8 	.word	0x200013a8
 800c928:	2000139c 	.word	0x2000139c
 800c92c:	20000ec4 	.word	0x20000ec4
 800c930:	20000ec0 	.word	0x20000ec0

0800c934 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d10a      	bne.n	800c95a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c948:	f383 8811 	msr	BASEPRI, r3
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	60fb      	str	r3, [r7, #12]
}
 800c956:	bf00      	nop
 800c958:	e7fe      	b.n	800c958 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c95a:	4b07      	ldr	r3, [pc, #28]	; (800c978 <vTaskPlaceOnEventList+0x44>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	3318      	adds	r3, #24
 800c960:	4619      	mov	r1, r3
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f7fe fdcd 	bl	800b502 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c968:	2101      	movs	r1, #1
 800c96a:	6838      	ldr	r0, [r7, #0]
 800c96c:	f000 fa7c 	bl	800ce68 <prvAddCurrentTaskToDelayedList>
}
 800c970:	bf00      	nop
 800c972:	3710      	adds	r7, #16
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	20000ec0 	.word	0x20000ec0

0800c97c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b086      	sub	sp, #24
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d10a      	bne.n	800c9a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	617b      	str	r3, [r7, #20]
}
 800c9a0:	bf00      	nop
 800c9a2:	e7fe      	b.n	800c9a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c9a4:	4b0a      	ldr	r3, [pc, #40]	; (800c9d0 <vTaskPlaceOnEventListRestricted+0x54>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	3318      	adds	r3, #24
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f7fe fd84 	bl	800b4ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d002      	beq.n	800c9be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c9b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c9bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c9be:	6879      	ldr	r1, [r7, #4]
 800c9c0:	68b8      	ldr	r0, [r7, #8]
 800c9c2:	f000 fa51 	bl	800ce68 <prvAddCurrentTaskToDelayedList>
	}
 800c9c6:	bf00      	nop
 800c9c8:	3718      	adds	r7, #24
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	20000ec0 	.word	0x20000ec0

0800c9d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b086      	sub	sp, #24
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d10a      	bne.n	800ca00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ee:	f383 8811 	msr	BASEPRI, r3
 800c9f2:	f3bf 8f6f 	isb	sy
 800c9f6:	f3bf 8f4f 	dsb	sy
 800c9fa:	60fb      	str	r3, [r7, #12]
}
 800c9fc:	bf00      	nop
 800c9fe:	e7fe      	b.n	800c9fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	3318      	adds	r3, #24
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7fe fdb5 	bl	800b574 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca0a:	4b1e      	ldr	r3, [pc, #120]	; (800ca84 <xTaskRemoveFromEventList+0xb0>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d11d      	bne.n	800ca4e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	3304      	adds	r3, #4
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7fe fdac 	bl	800b574 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca20:	4b19      	ldr	r3, [pc, #100]	; (800ca88 <xTaskRemoveFromEventList+0xb4>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d903      	bls.n	800ca30 <xTaskRemoveFromEventList+0x5c>
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca2c:	4a16      	ldr	r2, [pc, #88]	; (800ca88 <xTaskRemoveFromEventList+0xb4>)
 800ca2e:	6013      	str	r3, [r2, #0]
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca34:	4613      	mov	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	4413      	add	r3, r2
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	4a13      	ldr	r2, [pc, #76]	; (800ca8c <xTaskRemoveFromEventList+0xb8>)
 800ca3e:	441a      	add	r2, r3
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	3304      	adds	r3, #4
 800ca44:	4619      	mov	r1, r3
 800ca46:	4610      	mov	r0, r2
 800ca48:	f7fe fd37 	bl	800b4ba <vListInsertEnd>
 800ca4c:	e005      	b.n	800ca5a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	3318      	adds	r3, #24
 800ca52:	4619      	mov	r1, r3
 800ca54:	480e      	ldr	r0, [pc, #56]	; (800ca90 <xTaskRemoveFromEventList+0xbc>)
 800ca56:	f7fe fd30 	bl	800b4ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca5e:	4b0d      	ldr	r3, [pc, #52]	; (800ca94 <xTaskRemoveFromEventList+0xc0>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d905      	bls.n	800ca74 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ca6c:	4b0a      	ldr	r3, [pc, #40]	; (800ca98 <xTaskRemoveFromEventList+0xc4>)
 800ca6e:	2201      	movs	r2, #1
 800ca70:	601a      	str	r2, [r3, #0]
 800ca72:	e001      	b.n	800ca78 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ca74:	2300      	movs	r3, #0
 800ca76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ca78:	697b      	ldr	r3, [r7, #20]
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3718      	adds	r7, #24
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	200013bc 	.word	0x200013bc
 800ca88:	2000139c 	.word	0x2000139c
 800ca8c:	20000ec4 	.word	0x20000ec4
 800ca90:	20001354 	.word	0x20001354
 800ca94:	20000ec0 	.word	0x20000ec0
 800ca98:	200013a8 	.word	0x200013a8

0800ca9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800caa4:	4b06      	ldr	r3, [pc, #24]	; (800cac0 <vTaskInternalSetTimeOutState+0x24>)
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800caac:	4b05      	ldr	r3, [pc, #20]	; (800cac4 <vTaskInternalSetTimeOutState+0x28>)
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	605a      	str	r2, [r3, #4]
}
 800cab4:	bf00      	nop
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	200013ac 	.word	0x200013ac
 800cac4:	20001398 	.word	0x20001398

0800cac8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b088      	sub	sp, #32
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d10a      	bne.n	800caee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cadc:	f383 8811 	msr	BASEPRI, r3
 800cae0:	f3bf 8f6f 	isb	sy
 800cae4:	f3bf 8f4f 	dsb	sy
 800cae8:	613b      	str	r3, [r7, #16]
}
 800caea:	bf00      	nop
 800caec:	e7fe      	b.n	800caec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d10a      	bne.n	800cb0a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800caf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf8:	f383 8811 	msr	BASEPRI, r3
 800cafc:	f3bf 8f6f 	isb	sy
 800cb00:	f3bf 8f4f 	dsb	sy
 800cb04:	60fb      	str	r3, [r7, #12]
}
 800cb06:	bf00      	nop
 800cb08:	e7fe      	b.n	800cb08 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cb0a:	f000 ff63 	bl	800d9d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cb0e:	4b1d      	ldr	r3, [pc, #116]	; (800cb84 <xTaskCheckForTimeOut+0xbc>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	69ba      	ldr	r2, [r7, #24]
 800cb1a:	1ad3      	subs	r3, r2, r3
 800cb1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb26:	d102      	bne.n	800cb2e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	61fb      	str	r3, [r7, #28]
 800cb2c:	e023      	b.n	800cb76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	4b15      	ldr	r3, [pc, #84]	; (800cb88 <xTaskCheckForTimeOut+0xc0>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d007      	beq.n	800cb4a <xTaskCheckForTimeOut+0x82>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	69ba      	ldr	r2, [r7, #24]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d302      	bcc.n	800cb4a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cb44:	2301      	movs	r3, #1
 800cb46:	61fb      	str	r3, [r7, #28]
 800cb48:	e015      	b.n	800cb76 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	697a      	ldr	r2, [r7, #20]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d20b      	bcs.n	800cb6c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	1ad2      	subs	r2, r2, r3
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f7ff ff9b 	bl	800ca9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cb66:	2300      	movs	r3, #0
 800cb68:	61fb      	str	r3, [r7, #28]
 800cb6a:	e004      	b.n	800cb76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cb72:	2301      	movs	r3, #1
 800cb74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cb76:	f000 ff5d 	bl	800da34 <vPortExitCritical>

	return xReturn;
 800cb7a:	69fb      	ldr	r3, [r7, #28]
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3720      	adds	r7, #32
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	20001398 	.word	0x20001398
 800cb88:	200013ac 	.word	0x200013ac

0800cb8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cb90:	4b03      	ldr	r3, [pc, #12]	; (800cba0 <vTaskMissedYield+0x14>)
 800cb92:	2201      	movs	r2, #1
 800cb94:	601a      	str	r2, [r3, #0]
}
 800cb96:	bf00      	nop
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr
 800cba0:	200013a8 	.word	0x200013a8

0800cba4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cbac:	f000 f852 	bl	800cc54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cbb0:	4b06      	ldr	r3, [pc, #24]	; (800cbcc <prvIdleTask+0x28>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d9f9      	bls.n	800cbac <prvIdleTask+0x8>
			{
				taskYIELD();
 800cbb8:	4b05      	ldr	r3, [pc, #20]	; (800cbd0 <prvIdleTask+0x2c>)
 800cbba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbbe:	601a      	str	r2, [r3, #0]
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cbc8:	e7f0      	b.n	800cbac <prvIdleTask+0x8>
 800cbca:	bf00      	nop
 800cbcc:	20000ec4 	.word	0x20000ec4
 800cbd0:	e000ed04 	.word	0xe000ed04

0800cbd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbda:	2300      	movs	r3, #0
 800cbdc:	607b      	str	r3, [r7, #4]
 800cbde:	e00c      	b.n	800cbfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	4a12      	ldr	r2, [pc, #72]	; (800cc34 <prvInitialiseTaskLists+0x60>)
 800cbec:	4413      	add	r3, r2
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7fe fc36 	bl	800b460 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	607b      	str	r3, [r7, #4]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2b37      	cmp	r3, #55	; 0x37
 800cbfe:	d9ef      	bls.n	800cbe0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cc00:	480d      	ldr	r0, [pc, #52]	; (800cc38 <prvInitialiseTaskLists+0x64>)
 800cc02:	f7fe fc2d 	bl	800b460 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cc06:	480d      	ldr	r0, [pc, #52]	; (800cc3c <prvInitialiseTaskLists+0x68>)
 800cc08:	f7fe fc2a 	bl	800b460 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cc0c:	480c      	ldr	r0, [pc, #48]	; (800cc40 <prvInitialiseTaskLists+0x6c>)
 800cc0e:	f7fe fc27 	bl	800b460 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cc12:	480c      	ldr	r0, [pc, #48]	; (800cc44 <prvInitialiseTaskLists+0x70>)
 800cc14:	f7fe fc24 	bl	800b460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cc18:	480b      	ldr	r0, [pc, #44]	; (800cc48 <prvInitialiseTaskLists+0x74>)
 800cc1a:	f7fe fc21 	bl	800b460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cc1e:	4b0b      	ldr	r3, [pc, #44]	; (800cc4c <prvInitialiseTaskLists+0x78>)
 800cc20:	4a05      	ldr	r2, [pc, #20]	; (800cc38 <prvInitialiseTaskLists+0x64>)
 800cc22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cc24:	4b0a      	ldr	r3, [pc, #40]	; (800cc50 <prvInitialiseTaskLists+0x7c>)
 800cc26:	4a05      	ldr	r2, [pc, #20]	; (800cc3c <prvInitialiseTaskLists+0x68>)
 800cc28:	601a      	str	r2, [r3, #0]
}
 800cc2a:	bf00      	nop
 800cc2c:	3708      	adds	r7, #8
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	20000ec4 	.word	0x20000ec4
 800cc38:	20001324 	.word	0x20001324
 800cc3c:	20001338 	.word	0x20001338
 800cc40:	20001354 	.word	0x20001354
 800cc44:	20001368 	.word	0x20001368
 800cc48:	20001380 	.word	0x20001380
 800cc4c:	2000134c 	.word	0x2000134c
 800cc50:	20001350 	.word	0x20001350

0800cc54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc5a:	e019      	b.n	800cc90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cc5c:	f000 feba 	bl	800d9d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc60:	4b10      	ldr	r3, [pc, #64]	; (800cca4 <prvCheckTasksWaitingTermination+0x50>)
 800cc62:	68db      	ldr	r3, [r3, #12]
 800cc64:	68db      	ldr	r3, [r3, #12]
 800cc66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	3304      	adds	r3, #4
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7fe fc81 	bl	800b574 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cc72:	4b0d      	ldr	r3, [pc, #52]	; (800cca8 <prvCheckTasksWaitingTermination+0x54>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	3b01      	subs	r3, #1
 800cc78:	4a0b      	ldr	r2, [pc, #44]	; (800cca8 <prvCheckTasksWaitingTermination+0x54>)
 800cc7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cc7c:	4b0b      	ldr	r3, [pc, #44]	; (800ccac <prvCheckTasksWaitingTermination+0x58>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	3b01      	subs	r3, #1
 800cc82:	4a0a      	ldr	r2, [pc, #40]	; (800ccac <prvCheckTasksWaitingTermination+0x58>)
 800cc84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cc86:	f000 fed5 	bl	800da34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 f810 	bl	800ccb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc90:	4b06      	ldr	r3, [pc, #24]	; (800ccac <prvCheckTasksWaitingTermination+0x58>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d1e1      	bne.n	800cc5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cc98:	bf00      	nop
 800cc9a:	bf00      	nop
 800cc9c:	3708      	adds	r7, #8
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	20001368 	.word	0x20001368
 800cca8:	20001394 	.word	0x20001394
 800ccac:	2000137c 	.word	0x2000137c

0800ccb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d108      	bne.n	800ccd4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f001 f872 	bl	800ddb0 <vPortFree>
				vPortFree( pxTCB );
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f001 f86f 	bl	800ddb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ccd2:	e018      	b.n	800cd06 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d103      	bne.n	800cce6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f001 f866 	bl	800ddb0 <vPortFree>
	}
 800cce4:	e00f      	b.n	800cd06 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ccec:	2b02      	cmp	r3, #2
 800ccee:	d00a      	beq.n	800cd06 <prvDeleteTCB+0x56>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	60fb      	str	r3, [r7, #12]
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <prvDeleteTCB+0x54>
	}
 800cd06:	bf00      	nop
 800cd08:	3710      	adds	r7, #16
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
	...

0800cd10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd16:	4b0c      	ldr	r3, [pc, #48]	; (800cd48 <prvResetNextTaskUnblockTime+0x38>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d104      	bne.n	800cd2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cd20:	4b0a      	ldr	r3, [pc, #40]	; (800cd4c <prvResetNextTaskUnblockTime+0x3c>)
 800cd22:	f04f 32ff 	mov.w	r2, #4294967295
 800cd26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cd28:	e008      	b.n	800cd3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd2a:	4b07      	ldr	r3, [pc, #28]	; (800cd48 <prvResetNextTaskUnblockTime+0x38>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	68db      	ldr	r3, [r3, #12]
 800cd32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	4a04      	ldr	r2, [pc, #16]	; (800cd4c <prvResetNextTaskUnblockTime+0x3c>)
 800cd3a:	6013      	str	r3, [r2, #0]
}
 800cd3c:	bf00      	nop
 800cd3e:	370c      	adds	r7, #12
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr
 800cd48:	2000134c 	.word	0x2000134c
 800cd4c:	200013b4 	.word	0x200013b4

0800cd50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cd50:	b480      	push	{r7}
 800cd52:	b083      	sub	sp, #12
 800cd54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cd56:	4b0b      	ldr	r3, [pc, #44]	; (800cd84 <xTaskGetSchedulerState+0x34>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d102      	bne.n	800cd64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	607b      	str	r3, [r7, #4]
 800cd62:	e008      	b.n	800cd76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd64:	4b08      	ldr	r3, [pc, #32]	; (800cd88 <xTaskGetSchedulerState+0x38>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d102      	bne.n	800cd72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	607b      	str	r3, [r7, #4]
 800cd70:	e001      	b.n	800cd76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cd72:	2300      	movs	r3, #0
 800cd74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cd76:	687b      	ldr	r3, [r7, #4]
	}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	370c      	adds	r7, #12
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr
 800cd84:	200013a0 	.word	0x200013a0
 800cd88:	200013bc 	.word	0x200013bc

0800cd8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b086      	sub	sp, #24
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d056      	beq.n	800ce50 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cda2:	4b2e      	ldr	r3, [pc, #184]	; (800ce5c <xTaskPriorityDisinherit+0xd0>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	693a      	ldr	r2, [r7, #16]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d00a      	beq.n	800cdc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb0:	f383 8811 	msr	BASEPRI, r3
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	f3bf 8f4f 	dsb	sy
 800cdbc:	60fb      	str	r3, [r7, #12]
}
 800cdbe:	bf00      	nop
 800cdc0:	e7fe      	b.n	800cdc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d10a      	bne.n	800cde0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdce:	f383 8811 	msr	BASEPRI, r3
 800cdd2:	f3bf 8f6f 	isb	sy
 800cdd6:	f3bf 8f4f 	dsb	sy
 800cdda:	60bb      	str	r3, [r7, #8]
}
 800cddc:	bf00      	nop
 800cdde:	e7fe      	b.n	800cdde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cde4:	1e5a      	subs	r2, r3, #1
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d02c      	beq.n	800ce50 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d128      	bne.n	800ce50 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	3304      	adds	r3, #4
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7fe fbb6 	bl	800b574 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce20:	4b0f      	ldr	r3, [pc, #60]	; (800ce60 <xTaskPriorityDisinherit+0xd4>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d903      	bls.n	800ce30 <xTaskPriorityDisinherit+0xa4>
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2c:	4a0c      	ldr	r2, [pc, #48]	; (800ce60 <xTaskPriorityDisinherit+0xd4>)
 800ce2e:	6013      	str	r3, [r2, #0]
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce34:	4613      	mov	r3, r2
 800ce36:	009b      	lsls	r3, r3, #2
 800ce38:	4413      	add	r3, r2
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	4a09      	ldr	r2, [pc, #36]	; (800ce64 <xTaskPriorityDisinherit+0xd8>)
 800ce3e:	441a      	add	r2, r3
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	3304      	adds	r3, #4
 800ce44:	4619      	mov	r1, r3
 800ce46:	4610      	mov	r0, r2
 800ce48:	f7fe fb37 	bl	800b4ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ce50:	697b      	ldr	r3, [r7, #20]
	}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3718      	adds	r7, #24
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	20000ec0 	.word	0x20000ec0
 800ce60:	2000139c 	.word	0x2000139c
 800ce64:	20000ec4 	.word	0x20000ec4

0800ce68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ce72:	4b21      	ldr	r3, [pc, #132]	; (800cef8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce78:	4b20      	ldr	r3, [pc, #128]	; (800cefc <prvAddCurrentTaskToDelayedList+0x94>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	3304      	adds	r3, #4
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7fe fb78 	bl	800b574 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce8a:	d10a      	bne.n	800cea2 <prvAddCurrentTaskToDelayedList+0x3a>
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d007      	beq.n	800cea2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce92:	4b1a      	ldr	r3, [pc, #104]	; (800cefc <prvAddCurrentTaskToDelayedList+0x94>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	3304      	adds	r3, #4
 800ce98:	4619      	mov	r1, r3
 800ce9a:	4819      	ldr	r0, [pc, #100]	; (800cf00 <prvAddCurrentTaskToDelayedList+0x98>)
 800ce9c:	f7fe fb0d 	bl	800b4ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cea0:	e026      	b.n	800cef0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cea2:	68fa      	ldr	r2, [r7, #12]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	4413      	add	r3, r2
 800cea8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ceaa:	4b14      	ldr	r3, [pc, #80]	; (800cefc <prvAddCurrentTaskToDelayedList+0x94>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	68ba      	ldr	r2, [r7, #8]
 800ceb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ceb2:	68ba      	ldr	r2, [r7, #8]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d209      	bcs.n	800cece <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ceba:	4b12      	ldr	r3, [pc, #72]	; (800cf04 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	4b0f      	ldr	r3, [pc, #60]	; (800cefc <prvAddCurrentTaskToDelayedList+0x94>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	3304      	adds	r3, #4
 800cec4:	4619      	mov	r1, r3
 800cec6:	4610      	mov	r0, r2
 800cec8:	f7fe fb1b 	bl	800b502 <vListInsert>
}
 800cecc:	e010      	b.n	800cef0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cece:	4b0e      	ldr	r3, [pc, #56]	; (800cf08 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	4b0a      	ldr	r3, [pc, #40]	; (800cefc <prvAddCurrentTaskToDelayedList+0x94>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	3304      	adds	r3, #4
 800ced8:	4619      	mov	r1, r3
 800ceda:	4610      	mov	r0, r2
 800cedc:	f7fe fb11 	bl	800b502 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cee0:	4b0a      	ldr	r3, [pc, #40]	; (800cf0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	68ba      	ldr	r2, [r7, #8]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d202      	bcs.n	800cef0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ceea:	4a08      	ldr	r2, [pc, #32]	; (800cf0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	6013      	str	r3, [r2, #0]
}
 800cef0:	bf00      	nop
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	20001398 	.word	0x20001398
 800cefc:	20000ec0 	.word	0x20000ec0
 800cf00:	20001380 	.word	0x20001380
 800cf04:	20001350 	.word	0x20001350
 800cf08:	2000134c 	.word	0x2000134c
 800cf0c:	200013b4 	.word	0x200013b4

0800cf10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b08a      	sub	sp, #40	; 0x28
 800cf14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cf16:	2300      	movs	r3, #0
 800cf18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cf1a:	f000 fba1 	bl	800d660 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cf1e:	4b1c      	ldr	r3, [pc, #112]	; (800cf90 <xTimerCreateTimerTask+0x80>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d021      	beq.n	800cf6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cf26:	2300      	movs	r3, #0
 800cf28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cf2e:	1d3a      	adds	r2, r7, #4
 800cf30:	f107 0108 	add.w	r1, r7, #8
 800cf34:	f107 030c 	add.w	r3, r7, #12
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7fe fa77 	bl	800b42c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cf3e:	6879      	ldr	r1, [r7, #4]
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	68fa      	ldr	r2, [r7, #12]
 800cf44:	9202      	str	r2, [sp, #8]
 800cf46:	9301      	str	r3, [sp, #4]
 800cf48:	2302      	movs	r3, #2
 800cf4a:	9300      	str	r3, [sp, #0]
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	460a      	mov	r2, r1
 800cf50:	4910      	ldr	r1, [pc, #64]	; (800cf94 <xTimerCreateTimerTask+0x84>)
 800cf52:	4811      	ldr	r0, [pc, #68]	; (800cf98 <xTimerCreateTimerTask+0x88>)
 800cf54:	f7ff f8de 	bl	800c114 <xTaskCreateStatic>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	4a10      	ldr	r2, [pc, #64]	; (800cf9c <xTimerCreateTimerTask+0x8c>)
 800cf5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cf5e:	4b0f      	ldr	r3, [pc, #60]	; (800cf9c <xTimerCreateTimerTask+0x8c>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d001      	beq.n	800cf6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cf66:	2301      	movs	r3, #1
 800cf68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d10a      	bne.n	800cf86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf74:	f383 8811 	msr	BASEPRI, r3
 800cf78:	f3bf 8f6f 	isb	sy
 800cf7c:	f3bf 8f4f 	dsb	sy
 800cf80:	613b      	str	r3, [r7, #16]
}
 800cf82:	bf00      	nop
 800cf84:	e7fe      	b.n	800cf84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cf86:	697b      	ldr	r3, [r7, #20]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3718      	adds	r7, #24
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	200013f0 	.word	0x200013f0
 800cf94:	0800f468 	.word	0x0800f468
 800cf98:	0800d209 	.word	0x0800d209
 800cf9c:	200013f4 	.word	0x200013f4

0800cfa0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b088      	sub	sp, #32
 800cfa4:	af02      	add	r7, sp, #8
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
 800cfac:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800cfae:	202c      	movs	r0, #44	; 0x2c
 800cfb0:	f000 fe32 	bl	800dc18 <pvPortMalloc>
 800cfb4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d00d      	beq.n	800cfd8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	9301      	str	r3, [sp, #4]
 800cfc8:	6a3b      	ldr	r3, [r7, #32]
 800cfca:	9300      	str	r3, [sp, #0]
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	68b9      	ldr	r1, [r7, #8]
 800cfd2:	68f8      	ldr	r0, [r7, #12]
 800cfd4:	f000 f843 	bl	800d05e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cfd8:	697b      	ldr	r3, [r7, #20]
	}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3718      	adds	r7, #24
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}

0800cfe2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b08a      	sub	sp, #40	; 0x28
 800cfe6:	af02      	add	r7, sp, #8
 800cfe8:	60f8      	str	r0, [r7, #12]
 800cfea:	60b9      	str	r1, [r7, #8]
 800cfec:	607a      	str	r2, [r7, #4]
 800cfee:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800cff0:	232c      	movs	r3, #44	; 0x2c
 800cff2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	2b2c      	cmp	r3, #44	; 0x2c
 800cff8:	d00a      	beq.n	800d010 <xTimerCreateStatic+0x2e>
	__asm volatile
 800cffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffe:	f383 8811 	msr	BASEPRI, r3
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	f3bf 8f4f 	dsb	sy
 800d00a:	61bb      	str	r3, [r7, #24]
}
 800d00c:	bf00      	nop
 800d00e:	e7fe      	b.n	800d00e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d010:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d014:	2b00      	cmp	r3, #0
 800d016:	d10a      	bne.n	800d02e <xTimerCreateStatic+0x4c>
	__asm volatile
 800d018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01c:	f383 8811 	msr	BASEPRI, r3
 800d020:	f3bf 8f6f 	isb	sy
 800d024:	f3bf 8f4f 	dsb	sy
 800d028:	617b      	str	r3, [r7, #20]
}
 800d02a:	bf00      	nop
 800d02c:	e7fe      	b.n	800d02c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d030:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d00d      	beq.n	800d054 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	2202      	movs	r2, #2
 800d03c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	9301      	str	r3, [sp, #4]
 800d044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d046:	9300      	str	r3, [sp, #0]
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	68b9      	ldr	r1, [r7, #8]
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	f000 f805 	bl	800d05e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d054:	69fb      	ldr	r3, [r7, #28]
	}
 800d056:	4618      	mov	r0, r3
 800d058:	3720      	adds	r7, #32
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b086      	sub	sp, #24
 800d062:	af00      	add	r7, sp, #0
 800d064:	60f8      	str	r0, [r7, #12]
 800d066:	60b9      	str	r1, [r7, #8]
 800d068:	607a      	str	r2, [r7, #4]
 800d06a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d10a      	bne.n	800d088 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800d072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d076:	f383 8811 	msr	BASEPRI, r3
 800d07a:	f3bf 8f6f 	isb	sy
 800d07e:	f3bf 8f4f 	dsb	sy
 800d082:	617b      	str	r3, [r7, #20]
}
 800d084:	bf00      	nop
 800d086:	e7fe      	b.n	800d086 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d01e      	beq.n	800d0cc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d08e:	f000 fae7 	bl	800d660 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d094:	68fa      	ldr	r2, [r7, #12]
 800d096:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09a:	68ba      	ldr	r2, [r7, #8]
 800d09c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a0:	683a      	ldr	r2, [r7, #0]
 800d0a2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a6:	6a3a      	ldr	r2, [r7, #32]
 800d0a8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ac:	3304      	adds	r3, #4
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7fe f9f6 	bl	800b4a0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d008      	beq.n	800d0cc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0c0:	f043 0304 	orr.w	r3, r3, #4
 800d0c4:	b2da      	uxtb	r2, r3
 800d0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d0cc:	bf00      	nop
 800d0ce:	3718      	adds	r7, #24
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b08a      	sub	sp, #40	; 0x28
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	607a      	str	r2, [r7, #4]
 800d0e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d10a      	bne.n	800d102 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f0:	f383 8811 	msr	BASEPRI, r3
 800d0f4:	f3bf 8f6f 	isb	sy
 800d0f8:	f3bf 8f4f 	dsb	sy
 800d0fc:	623b      	str	r3, [r7, #32]
}
 800d0fe:	bf00      	nop
 800d100:	e7fe      	b.n	800d100 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d102:	4b1a      	ldr	r3, [pc, #104]	; (800d16c <xTimerGenericCommand+0x98>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d02a      	beq.n	800d160 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	2b05      	cmp	r3, #5
 800d11a:	dc18      	bgt.n	800d14e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d11c:	f7ff fe18 	bl	800cd50 <xTaskGetSchedulerState>
 800d120:	4603      	mov	r3, r0
 800d122:	2b02      	cmp	r3, #2
 800d124:	d109      	bne.n	800d13a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d126:	4b11      	ldr	r3, [pc, #68]	; (800d16c <xTimerGenericCommand+0x98>)
 800d128:	6818      	ldr	r0, [r3, #0]
 800d12a:	f107 0110 	add.w	r1, r7, #16
 800d12e:	2300      	movs	r3, #0
 800d130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d132:	f7fe fb87 	bl	800b844 <xQueueGenericSend>
 800d136:	6278      	str	r0, [r7, #36]	; 0x24
 800d138:	e012      	b.n	800d160 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d13a:	4b0c      	ldr	r3, [pc, #48]	; (800d16c <xTimerGenericCommand+0x98>)
 800d13c:	6818      	ldr	r0, [r3, #0]
 800d13e:	f107 0110 	add.w	r1, r7, #16
 800d142:	2300      	movs	r3, #0
 800d144:	2200      	movs	r2, #0
 800d146:	f7fe fb7d 	bl	800b844 <xQueueGenericSend>
 800d14a:	6278      	str	r0, [r7, #36]	; 0x24
 800d14c:	e008      	b.n	800d160 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d14e:	4b07      	ldr	r3, [pc, #28]	; (800d16c <xTimerGenericCommand+0x98>)
 800d150:	6818      	ldr	r0, [r3, #0]
 800d152:	f107 0110 	add.w	r1, r7, #16
 800d156:	2300      	movs	r3, #0
 800d158:	683a      	ldr	r2, [r7, #0]
 800d15a:	f7fe fc71 	bl	800ba40 <xQueueGenericSendFromISR>
 800d15e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d162:	4618      	mov	r0, r3
 800d164:	3728      	adds	r7, #40	; 0x28
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	200013f0 	.word	0x200013f0

0800d170 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b088      	sub	sp, #32
 800d174:	af02      	add	r7, sp, #8
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d17a:	4b22      	ldr	r3, [pc, #136]	; (800d204 <prvProcessExpiredTimer+0x94>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	68db      	ldr	r3, [r3, #12]
 800d182:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	3304      	adds	r3, #4
 800d188:	4618      	mov	r0, r3
 800d18a:	f7fe f9f3 	bl	800b574 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d194:	f003 0304 	and.w	r3, r3, #4
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d022      	beq.n	800d1e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	699a      	ldr	r2, [r3, #24]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	18d1      	adds	r1, r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	683a      	ldr	r2, [r7, #0]
 800d1a8:	6978      	ldr	r0, [r7, #20]
 800d1aa:	f000 f8d1 	bl	800d350 <prvInsertTimerInActiveList>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d01f      	beq.n	800d1f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	9300      	str	r3, [sp, #0]
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	2100      	movs	r1, #0
 800d1be:	6978      	ldr	r0, [r7, #20]
 800d1c0:	f7ff ff88 	bl	800d0d4 <xTimerGenericCommand>
 800d1c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d113      	bne.n	800d1f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d0:	f383 8811 	msr	BASEPRI, r3
 800d1d4:	f3bf 8f6f 	isb	sy
 800d1d8:	f3bf 8f4f 	dsb	sy
 800d1dc:	60fb      	str	r3, [r7, #12]
}
 800d1de:	bf00      	nop
 800d1e0:	e7fe      	b.n	800d1e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1e8:	f023 0301 	bic.w	r3, r3, #1
 800d1ec:	b2da      	uxtb	r2, r3
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	6a1b      	ldr	r3, [r3, #32]
 800d1f8:	6978      	ldr	r0, [r7, #20]
 800d1fa:	4798      	blx	r3
}
 800d1fc:	bf00      	nop
 800d1fe:	3718      	adds	r7, #24
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	200013e8 	.word	0x200013e8

0800d208 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d210:	f107 0308 	add.w	r3, r7, #8
 800d214:	4618      	mov	r0, r3
 800d216:	f000 f857 	bl	800d2c8 <prvGetNextExpireTime>
 800d21a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	4619      	mov	r1, r3
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f000 f803 	bl	800d22c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d226:	f000 f8d5 	bl	800d3d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d22a:	e7f1      	b.n	800d210 <prvTimerTask+0x8>

0800d22c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d236:	f7ff f9a9 	bl	800c58c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d23a:	f107 0308 	add.w	r3, r7, #8
 800d23e:	4618      	mov	r0, r3
 800d240:	f000 f866 	bl	800d310 <prvSampleTimeNow>
 800d244:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d130      	bne.n	800d2ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d10a      	bne.n	800d268 <prvProcessTimerOrBlockTask+0x3c>
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	429a      	cmp	r2, r3
 800d258:	d806      	bhi.n	800d268 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d25a:	f7ff f9a5 	bl	800c5a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d25e:	68f9      	ldr	r1, [r7, #12]
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7ff ff85 	bl	800d170 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d266:	e024      	b.n	800d2b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d008      	beq.n	800d280 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d26e:	4b13      	ldr	r3, [pc, #76]	; (800d2bc <prvProcessTimerOrBlockTask+0x90>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d101      	bne.n	800d27c <prvProcessTimerOrBlockTask+0x50>
 800d278:	2301      	movs	r3, #1
 800d27a:	e000      	b.n	800d27e <prvProcessTimerOrBlockTask+0x52>
 800d27c:	2300      	movs	r3, #0
 800d27e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d280:	4b0f      	ldr	r3, [pc, #60]	; (800d2c0 <prvProcessTimerOrBlockTask+0x94>)
 800d282:	6818      	ldr	r0, [r3, #0]
 800d284:	687a      	ldr	r2, [r7, #4]
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	1ad3      	subs	r3, r2, r3
 800d28a:	683a      	ldr	r2, [r7, #0]
 800d28c:	4619      	mov	r1, r3
 800d28e:	f7fe ff0d 	bl	800c0ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d292:	f7ff f989 	bl	800c5a8 <xTaskResumeAll>
 800d296:	4603      	mov	r3, r0
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d10a      	bne.n	800d2b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d29c:	4b09      	ldr	r3, [pc, #36]	; (800d2c4 <prvProcessTimerOrBlockTask+0x98>)
 800d29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2a2:	601a      	str	r2, [r3, #0]
 800d2a4:	f3bf 8f4f 	dsb	sy
 800d2a8:	f3bf 8f6f 	isb	sy
}
 800d2ac:	e001      	b.n	800d2b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d2ae:	f7ff f97b 	bl	800c5a8 <xTaskResumeAll>
}
 800d2b2:	bf00      	nop
 800d2b4:	3710      	adds	r7, #16
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	200013ec 	.word	0x200013ec
 800d2c0:	200013f0 	.word	0x200013f0
 800d2c4:	e000ed04 	.word	0xe000ed04

0800d2c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b085      	sub	sp, #20
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d2d0:	4b0e      	ldr	r3, [pc, #56]	; (800d30c <prvGetNextExpireTime+0x44>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d101      	bne.n	800d2de <prvGetNextExpireTime+0x16>
 800d2da:	2201      	movs	r2, #1
 800d2dc:	e000      	b.n	800d2e0 <prvGetNextExpireTime+0x18>
 800d2de:	2200      	movs	r2, #0
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d105      	bne.n	800d2f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2ec:	4b07      	ldr	r3, [pc, #28]	; (800d30c <prvGetNextExpireTime+0x44>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	60fb      	str	r3, [r7, #12]
 800d2f6:	e001      	b.n	800d2fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3714      	adds	r7, #20
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop
 800d30c:	200013e8 	.word	0x200013e8

0800d310 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b084      	sub	sp, #16
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d318:	f7ff f9e4 	bl	800c6e4 <xTaskGetTickCount>
 800d31c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d31e:	4b0b      	ldr	r3, [pc, #44]	; (800d34c <prvSampleTimeNow+0x3c>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	429a      	cmp	r2, r3
 800d326:	d205      	bcs.n	800d334 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d328:	f000 f936 	bl	800d598 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2201      	movs	r2, #1
 800d330:	601a      	str	r2, [r3, #0]
 800d332:	e002      	b.n	800d33a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2200      	movs	r2, #0
 800d338:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d33a:	4a04      	ldr	r2, [pc, #16]	; (800d34c <prvSampleTimeNow+0x3c>)
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d340:	68fb      	ldr	r3, [r7, #12]
}
 800d342:	4618      	mov	r0, r3
 800d344:	3710      	adds	r7, #16
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	200013f8 	.word	0x200013f8

0800d350 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	607a      	str	r2, [r7, #4]
 800d35c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d35e:	2300      	movs	r3, #0
 800d360:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	68ba      	ldr	r2, [r7, #8]
 800d366:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	68fa      	ldr	r2, [r7, #12]
 800d36c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d36e:	68ba      	ldr	r2, [r7, #8]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	429a      	cmp	r2, r3
 800d374:	d812      	bhi.n	800d39c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	1ad2      	subs	r2, r2, r3
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	699b      	ldr	r3, [r3, #24]
 800d380:	429a      	cmp	r2, r3
 800d382:	d302      	bcc.n	800d38a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d384:	2301      	movs	r3, #1
 800d386:	617b      	str	r3, [r7, #20]
 800d388:	e01b      	b.n	800d3c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d38a:	4b10      	ldr	r3, [pc, #64]	; (800d3cc <prvInsertTimerInActiveList+0x7c>)
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	3304      	adds	r3, #4
 800d392:	4619      	mov	r1, r3
 800d394:	4610      	mov	r0, r2
 800d396:	f7fe f8b4 	bl	800b502 <vListInsert>
 800d39a:	e012      	b.n	800d3c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d206      	bcs.n	800d3b2 <prvInsertTimerInActiveList+0x62>
 800d3a4:	68ba      	ldr	r2, [r7, #8]
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d302      	bcc.n	800d3b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	617b      	str	r3, [r7, #20]
 800d3b0:	e007      	b.n	800d3c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d3b2:	4b07      	ldr	r3, [pc, #28]	; (800d3d0 <prvInsertTimerInActiveList+0x80>)
 800d3b4:	681a      	ldr	r2, [r3, #0]
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	3304      	adds	r3, #4
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	4610      	mov	r0, r2
 800d3be:	f7fe f8a0 	bl	800b502 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d3c2:	697b      	ldr	r3, [r7, #20]
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3718      	adds	r7, #24
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	200013ec 	.word	0x200013ec
 800d3d0:	200013e8 	.word	0x200013e8

0800d3d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b08e      	sub	sp, #56	; 0x38
 800d3d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d3da:	e0ca      	b.n	800d572 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	da18      	bge.n	800d414 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d3e2:	1d3b      	adds	r3, r7, #4
 800d3e4:	3304      	adds	r3, #4
 800d3e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d10a      	bne.n	800d404 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f2:	f383 8811 	msr	BASEPRI, r3
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	61fb      	str	r3, [r7, #28]
}
 800d400:	bf00      	nop
 800d402:	e7fe      	b.n	800d402 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d40a:	6850      	ldr	r0, [r2, #4]
 800d40c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d40e:	6892      	ldr	r2, [r2, #8]
 800d410:	4611      	mov	r1, r2
 800d412:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2b00      	cmp	r3, #0
 800d418:	f2c0 80aa 	blt.w	800d570 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d422:	695b      	ldr	r3, [r3, #20]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d004      	beq.n	800d432 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42a:	3304      	adds	r3, #4
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7fe f8a1 	bl	800b574 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d432:	463b      	mov	r3, r7
 800d434:	4618      	mov	r0, r3
 800d436:	f7ff ff6b 	bl	800d310 <prvSampleTimeNow>
 800d43a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2b09      	cmp	r3, #9
 800d440:	f200 8097 	bhi.w	800d572 <prvProcessReceivedCommands+0x19e>
 800d444:	a201      	add	r2, pc, #4	; (adr r2, 800d44c <prvProcessReceivedCommands+0x78>)
 800d446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d44a:	bf00      	nop
 800d44c:	0800d475 	.word	0x0800d475
 800d450:	0800d475 	.word	0x0800d475
 800d454:	0800d475 	.word	0x0800d475
 800d458:	0800d4e9 	.word	0x0800d4e9
 800d45c:	0800d4fd 	.word	0x0800d4fd
 800d460:	0800d547 	.word	0x0800d547
 800d464:	0800d475 	.word	0x0800d475
 800d468:	0800d475 	.word	0x0800d475
 800d46c:	0800d4e9 	.word	0x0800d4e9
 800d470:	0800d4fd 	.word	0x0800d4fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d47a:	f043 0301 	orr.w	r3, r3, #1
 800d47e:	b2da      	uxtb	r2, r3
 800d480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d486:	68ba      	ldr	r2, [r7, #8]
 800d488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48a:	699b      	ldr	r3, [r3, #24]
 800d48c:	18d1      	adds	r1, r2, r3
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d494:	f7ff ff5c 	bl	800d350 <prvInsertTimerInActiveList>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d069      	beq.n	800d572 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a0:	6a1b      	ldr	r3, [r3, #32]
 800d4a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4ac:	f003 0304 	and.w	r3, r3, #4
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d05e      	beq.n	800d572 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d4b4:	68ba      	ldr	r2, [r7, #8]
 800d4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b8:	699b      	ldr	r3, [r3, #24]
 800d4ba:	441a      	add	r2, r3
 800d4bc:	2300      	movs	r3, #0
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4c6:	f7ff fe05 	bl	800d0d4 <xTimerGenericCommand>
 800d4ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d4cc:	6a3b      	ldr	r3, [r7, #32]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d14f      	bne.n	800d572 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d6:	f383 8811 	msr	BASEPRI, r3
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	61bb      	str	r3, [r7, #24]
}
 800d4e4:	bf00      	nop
 800d4e6:	e7fe      	b.n	800d4e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4ee:	f023 0301 	bic.w	r3, r3, #1
 800d4f2:	b2da      	uxtb	r2, r3
 800d4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d4fa:	e03a      	b.n	800d572 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d502:	f043 0301 	orr.w	r3, r3, #1
 800d506:	b2da      	uxtb	r2, r3
 800d508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d50e:	68ba      	ldr	r2, [r7, #8]
 800d510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d512:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d516:	699b      	ldr	r3, [r3, #24]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d10a      	bne.n	800d532 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d520:	f383 8811 	msr	BASEPRI, r3
 800d524:	f3bf 8f6f 	isb	sy
 800d528:	f3bf 8f4f 	dsb	sy
 800d52c:	617b      	str	r3, [r7, #20]
}
 800d52e:	bf00      	nop
 800d530:	e7fe      	b.n	800d530 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d534:	699a      	ldr	r2, [r3, #24]
 800d536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d538:	18d1      	adds	r1, r2, r3
 800d53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d53e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d540:	f7ff ff06 	bl	800d350 <prvInsertTimerInActiveList>
					break;
 800d544:	e015      	b.n	800d572 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d54c:	f003 0302 	and.w	r3, r3, #2
 800d550:	2b00      	cmp	r3, #0
 800d552:	d103      	bne.n	800d55c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d556:	f000 fc2b 	bl	800ddb0 <vPortFree>
 800d55a:	e00a      	b.n	800d572 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d562:	f023 0301 	bic.w	r3, r3, #1
 800d566:	b2da      	uxtb	r2, r3
 800d568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d56e:	e000      	b.n	800d572 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d570:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d572:	4b08      	ldr	r3, [pc, #32]	; (800d594 <prvProcessReceivedCommands+0x1c0>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	1d39      	adds	r1, r7, #4
 800d578:	2200      	movs	r2, #0
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7fe fafc 	bl	800bb78 <xQueueReceive>
 800d580:	4603      	mov	r3, r0
 800d582:	2b00      	cmp	r3, #0
 800d584:	f47f af2a 	bne.w	800d3dc <prvProcessReceivedCommands+0x8>
	}
}
 800d588:	bf00      	nop
 800d58a:	bf00      	nop
 800d58c:	3730      	adds	r7, #48	; 0x30
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	200013f0 	.word	0x200013f0

0800d598 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b088      	sub	sp, #32
 800d59c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d59e:	e048      	b.n	800d632 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d5a0:	4b2d      	ldr	r3, [pc, #180]	; (800d658 <prvSwitchTimerLists+0xc0>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5aa:	4b2b      	ldr	r3, [pc, #172]	; (800d658 <prvSwitchTimerLists+0xc0>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	68db      	ldr	r3, [r3, #12]
 800d5b0:	68db      	ldr	r3, [r3, #12]
 800d5b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	3304      	adds	r3, #4
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7fd ffdb 	bl	800b574 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	6a1b      	ldr	r3, [r3, #32]
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5cc:	f003 0304 	and.w	r3, r3, #4
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d02e      	beq.n	800d632 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	699b      	ldr	r3, [r3, #24]
 800d5d8:	693a      	ldr	r2, [r7, #16]
 800d5da:	4413      	add	r3, r2
 800d5dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d5de:	68ba      	ldr	r2, [r7, #8]
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d90e      	bls.n	800d604 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	68ba      	ldr	r2, [r7, #8]
 800d5ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	68fa      	ldr	r2, [r7, #12]
 800d5f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d5f2:	4b19      	ldr	r3, [pc, #100]	; (800d658 <prvSwitchTimerLists+0xc0>)
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	3304      	adds	r3, #4
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	4610      	mov	r0, r2
 800d5fe:	f7fd ff80 	bl	800b502 <vListInsert>
 800d602:	e016      	b.n	800d632 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d604:	2300      	movs	r3, #0
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	2300      	movs	r3, #0
 800d60a:	693a      	ldr	r2, [r7, #16]
 800d60c:	2100      	movs	r1, #0
 800d60e:	68f8      	ldr	r0, [r7, #12]
 800d610:	f7ff fd60 	bl	800d0d4 <xTimerGenericCommand>
 800d614:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d10a      	bne.n	800d632 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d620:	f383 8811 	msr	BASEPRI, r3
 800d624:	f3bf 8f6f 	isb	sy
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	603b      	str	r3, [r7, #0]
}
 800d62e:	bf00      	nop
 800d630:	e7fe      	b.n	800d630 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d632:	4b09      	ldr	r3, [pc, #36]	; (800d658 <prvSwitchTimerLists+0xc0>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d1b1      	bne.n	800d5a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d63c:	4b06      	ldr	r3, [pc, #24]	; (800d658 <prvSwitchTimerLists+0xc0>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d642:	4b06      	ldr	r3, [pc, #24]	; (800d65c <prvSwitchTimerLists+0xc4>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4a04      	ldr	r2, [pc, #16]	; (800d658 <prvSwitchTimerLists+0xc0>)
 800d648:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d64a:	4a04      	ldr	r2, [pc, #16]	; (800d65c <prvSwitchTimerLists+0xc4>)
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	6013      	str	r3, [r2, #0]
}
 800d650:	bf00      	nop
 800d652:	3718      	adds	r7, #24
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	200013e8 	.word	0x200013e8
 800d65c:	200013ec 	.word	0x200013ec

0800d660 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d666:	f000 f9b5 	bl	800d9d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d66a:	4b15      	ldr	r3, [pc, #84]	; (800d6c0 <prvCheckForValidListAndQueue+0x60>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d120      	bne.n	800d6b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d672:	4814      	ldr	r0, [pc, #80]	; (800d6c4 <prvCheckForValidListAndQueue+0x64>)
 800d674:	f7fd fef4 	bl	800b460 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d678:	4813      	ldr	r0, [pc, #76]	; (800d6c8 <prvCheckForValidListAndQueue+0x68>)
 800d67a:	f7fd fef1 	bl	800b460 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d67e:	4b13      	ldr	r3, [pc, #76]	; (800d6cc <prvCheckForValidListAndQueue+0x6c>)
 800d680:	4a10      	ldr	r2, [pc, #64]	; (800d6c4 <prvCheckForValidListAndQueue+0x64>)
 800d682:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d684:	4b12      	ldr	r3, [pc, #72]	; (800d6d0 <prvCheckForValidListAndQueue+0x70>)
 800d686:	4a10      	ldr	r2, [pc, #64]	; (800d6c8 <prvCheckForValidListAndQueue+0x68>)
 800d688:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d68a:	2300      	movs	r3, #0
 800d68c:	9300      	str	r3, [sp, #0]
 800d68e:	4b11      	ldr	r3, [pc, #68]	; (800d6d4 <prvCheckForValidListAndQueue+0x74>)
 800d690:	4a11      	ldr	r2, [pc, #68]	; (800d6d8 <prvCheckForValidListAndQueue+0x78>)
 800d692:	2110      	movs	r1, #16
 800d694:	200a      	movs	r0, #10
 800d696:	f7fd ffff 	bl	800b698 <xQueueGenericCreateStatic>
 800d69a:	4603      	mov	r3, r0
 800d69c:	4a08      	ldr	r2, [pc, #32]	; (800d6c0 <prvCheckForValidListAndQueue+0x60>)
 800d69e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d6a0:	4b07      	ldr	r3, [pc, #28]	; (800d6c0 <prvCheckForValidListAndQueue+0x60>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d005      	beq.n	800d6b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d6a8:	4b05      	ldr	r3, [pc, #20]	; (800d6c0 <prvCheckForValidListAndQueue+0x60>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	490b      	ldr	r1, [pc, #44]	; (800d6dc <prvCheckForValidListAndQueue+0x7c>)
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fe fcd2 	bl	800c058 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d6b4:	f000 f9be 	bl	800da34 <vPortExitCritical>
}
 800d6b8:	bf00      	nop
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	200013f0 	.word	0x200013f0
 800d6c4:	200013c0 	.word	0x200013c0
 800d6c8:	200013d4 	.word	0x200013d4
 800d6cc:	200013e8 	.word	0x200013e8
 800d6d0:	200013ec 	.word	0x200013ec
 800d6d4:	2000149c 	.word	0x2000149c
 800d6d8:	200013fc 	.word	0x200013fc
 800d6dc:	0800f470 	.word	0x0800f470

0800d6e0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b086      	sub	sp, #24
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d10a      	bne.n	800d708 <xTimerIsTimerActive+0x28>
	__asm volatile
 800d6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f6:	f383 8811 	msr	BASEPRI, r3
 800d6fa:	f3bf 8f6f 	isb	sy
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	60fb      	str	r3, [r7, #12]
}
 800d704:	bf00      	nop
 800d706:	e7fe      	b.n	800d706 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800d708:	f000 f964 	bl	800d9d4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d712:	f003 0301 	and.w	r3, r3, #1
 800d716:	2b00      	cmp	r3, #0
 800d718:	d102      	bne.n	800d720 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800d71a:	2300      	movs	r3, #0
 800d71c:	617b      	str	r3, [r7, #20]
 800d71e:	e001      	b.n	800d724 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800d720:	2301      	movs	r3, #1
 800d722:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800d724:	f000 f986 	bl	800da34 <vPortExitCritical>

	return xReturn;
 800d728:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800d72a:	4618      	mov	r0, r3
 800d72c:	3718      	adds	r7, #24
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d732:	b580      	push	{r7, lr}
 800d734:	b086      	sub	sp, #24
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d10a      	bne.n	800d75a <pvTimerGetTimerID+0x28>
	__asm volatile
 800d744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d748:	f383 8811 	msr	BASEPRI, r3
 800d74c:	f3bf 8f6f 	isb	sy
 800d750:	f3bf 8f4f 	dsb	sy
 800d754:	60fb      	str	r3, [r7, #12]
}
 800d756:	bf00      	nop
 800d758:	e7fe      	b.n	800d758 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800d75a:	f000 f93b 	bl	800d9d4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	69db      	ldr	r3, [r3, #28]
 800d762:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d764:	f000 f966 	bl	800da34 <vPortExitCritical>

	return pvReturn;
 800d768:	693b      	ldr	r3, [r7, #16]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3718      	adds	r7, #24
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
	...

0800d774 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d774:	b480      	push	{r7}
 800d776:	b085      	sub	sp, #20
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	3b04      	subs	r3, #4
 800d784:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d78c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	3b04      	subs	r3, #4
 800d792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	f023 0201 	bic.w	r2, r3, #1
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	3b04      	subs	r3, #4
 800d7a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d7a4:	4a0c      	ldr	r2, [pc, #48]	; (800d7d8 <pxPortInitialiseStack+0x64>)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	3b14      	subs	r3, #20
 800d7ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	3b04      	subs	r3, #4
 800d7ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f06f 0202 	mvn.w	r2, #2
 800d7c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	3b20      	subs	r3, #32
 800d7c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3714      	adds	r7, #20
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr
 800d7d8:	0800d7dd 	.word	0x0800d7dd

0800d7dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d7e6:	4b12      	ldr	r3, [pc, #72]	; (800d830 <prvTaskExitError+0x54>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ee:	d00a      	beq.n	800d806 <prvTaskExitError+0x2a>
	__asm volatile
 800d7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f4:	f383 8811 	msr	BASEPRI, r3
 800d7f8:	f3bf 8f6f 	isb	sy
 800d7fc:	f3bf 8f4f 	dsb	sy
 800d800:	60fb      	str	r3, [r7, #12]
}
 800d802:	bf00      	nop
 800d804:	e7fe      	b.n	800d804 <prvTaskExitError+0x28>
	__asm volatile
 800d806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d80a:	f383 8811 	msr	BASEPRI, r3
 800d80e:	f3bf 8f6f 	isb	sy
 800d812:	f3bf 8f4f 	dsb	sy
 800d816:	60bb      	str	r3, [r7, #8]
}
 800d818:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d81a:	bf00      	nop
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d0fc      	beq.n	800d81c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d822:	bf00      	nop
 800d824:	bf00      	nop
 800d826:	3714      	adds	r7, #20
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr
 800d830:	20000180 	.word	0x20000180
	...

0800d840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d840:	4b07      	ldr	r3, [pc, #28]	; (800d860 <pxCurrentTCBConst2>)
 800d842:	6819      	ldr	r1, [r3, #0]
 800d844:	6808      	ldr	r0, [r1, #0]
 800d846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d84a:	f380 8809 	msr	PSP, r0
 800d84e:	f3bf 8f6f 	isb	sy
 800d852:	f04f 0000 	mov.w	r0, #0
 800d856:	f380 8811 	msr	BASEPRI, r0
 800d85a:	4770      	bx	lr
 800d85c:	f3af 8000 	nop.w

0800d860 <pxCurrentTCBConst2>:
 800d860:	20000ec0 	.word	0x20000ec0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d864:	bf00      	nop
 800d866:	bf00      	nop

0800d868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d868:	4808      	ldr	r0, [pc, #32]	; (800d88c <prvPortStartFirstTask+0x24>)
 800d86a:	6800      	ldr	r0, [r0, #0]
 800d86c:	6800      	ldr	r0, [r0, #0]
 800d86e:	f380 8808 	msr	MSP, r0
 800d872:	f04f 0000 	mov.w	r0, #0
 800d876:	f380 8814 	msr	CONTROL, r0
 800d87a:	b662      	cpsie	i
 800d87c:	b661      	cpsie	f
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	f3bf 8f6f 	isb	sy
 800d886:	df00      	svc	0
 800d888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d88a:	bf00      	nop
 800d88c:	e000ed08 	.word	0xe000ed08

0800d890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b086      	sub	sp, #24
 800d894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d896:	4b46      	ldr	r3, [pc, #280]	; (800d9b0 <xPortStartScheduler+0x120>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4a46      	ldr	r2, [pc, #280]	; (800d9b4 <xPortStartScheduler+0x124>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d10a      	bne.n	800d8b6 <xPortStartScheduler+0x26>
	__asm volatile
 800d8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	613b      	str	r3, [r7, #16]
}
 800d8b2:	bf00      	nop
 800d8b4:	e7fe      	b.n	800d8b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d8b6:	4b3e      	ldr	r3, [pc, #248]	; (800d9b0 <xPortStartScheduler+0x120>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	4a3f      	ldr	r2, [pc, #252]	; (800d9b8 <xPortStartScheduler+0x128>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d10a      	bne.n	800d8d6 <xPortStartScheduler+0x46>
	__asm volatile
 800d8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c4:	f383 8811 	msr	BASEPRI, r3
 800d8c8:	f3bf 8f6f 	isb	sy
 800d8cc:	f3bf 8f4f 	dsb	sy
 800d8d0:	60fb      	str	r3, [r7, #12]
}
 800d8d2:	bf00      	nop
 800d8d4:	e7fe      	b.n	800d8d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d8d6:	4b39      	ldr	r3, [pc, #228]	; (800d9bc <xPortStartScheduler+0x12c>)
 800d8d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	22ff      	movs	r2, #255	; 0xff
 800d8e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d8f0:	78fb      	ldrb	r3, [r7, #3]
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d8f8:	b2da      	uxtb	r2, r3
 800d8fa:	4b31      	ldr	r3, [pc, #196]	; (800d9c0 <xPortStartScheduler+0x130>)
 800d8fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d8fe:	4b31      	ldr	r3, [pc, #196]	; (800d9c4 <xPortStartScheduler+0x134>)
 800d900:	2207      	movs	r2, #7
 800d902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d904:	e009      	b.n	800d91a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d906:	4b2f      	ldr	r3, [pc, #188]	; (800d9c4 <xPortStartScheduler+0x134>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	3b01      	subs	r3, #1
 800d90c:	4a2d      	ldr	r2, [pc, #180]	; (800d9c4 <xPortStartScheduler+0x134>)
 800d90e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d910:	78fb      	ldrb	r3, [r7, #3]
 800d912:	b2db      	uxtb	r3, r3
 800d914:	005b      	lsls	r3, r3, #1
 800d916:	b2db      	uxtb	r3, r3
 800d918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d91a:	78fb      	ldrb	r3, [r7, #3]
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d922:	2b80      	cmp	r3, #128	; 0x80
 800d924:	d0ef      	beq.n	800d906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d926:	4b27      	ldr	r3, [pc, #156]	; (800d9c4 <xPortStartScheduler+0x134>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	f1c3 0307 	rsb	r3, r3, #7
 800d92e:	2b04      	cmp	r3, #4
 800d930:	d00a      	beq.n	800d948 <xPortStartScheduler+0xb8>
	__asm volatile
 800d932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d936:	f383 8811 	msr	BASEPRI, r3
 800d93a:	f3bf 8f6f 	isb	sy
 800d93e:	f3bf 8f4f 	dsb	sy
 800d942:	60bb      	str	r3, [r7, #8]
}
 800d944:	bf00      	nop
 800d946:	e7fe      	b.n	800d946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d948:	4b1e      	ldr	r3, [pc, #120]	; (800d9c4 <xPortStartScheduler+0x134>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	021b      	lsls	r3, r3, #8
 800d94e:	4a1d      	ldr	r2, [pc, #116]	; (800d9c4 <xPortStartScheduler+0x134>)
 800d950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d952:	4b1c      	ldr	r3, [pc, #112]	; (800d9c4 <xPortStartScheduler+0x134>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d95a:	4a1a      	ldr	r2, [pc, #104]	; (800d9c4 <xPortStartScheduler+0x134>)
 800d95c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	b2da      	uxtb	r2, r3
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d966:	4b18      	ldr	r3, [pc, #96]	; (800d9c8 <xPortStartScheduler+0x138>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4a17      	ldr	r2, [pc, #92]	; (800d9c8 <xPortStartScheduler+0x138>)
 800d96c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d972:	4b15      	ldr	r3, [pc, #84]	; (800d9c8 <xPortStartScheduler+0x138>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a14      	ldr	r2, [pc, #80]	; (800d9c8 <xPortStartScheduler+0x138>)
 800d978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d97c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d97e:	f000 f8dd 	bl	800db3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d982:	4b12      	ldr	r3, [pc, #72]	; (800d9cc <xPortStartScheduler+0x13c>)
 800d984:	2200      	movs	r2, #0
 800d986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d988:	f000 f8fc 	bl	800db84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d98c:	4b10      	ldr	r3, [pc, #64]	; (800d9d0 <xPortStartScheduler+0x140>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a0f      	ldr	r2, [pc, #60]	; (800d9d0 <xPortStartScheduler+0x140>)
 800d992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d998:	f7ff ff66 	bl	800d868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d99c:	f7fe ff6c 	bl	800c878 <vTaskSwitchContext>
	prvTaskExitError();
 800d9a0:	f7ff ff1c 	bl	800d7dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3718      	adds	r7, #24
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	e000ed00 	.word	0xe000ed00
 800d9b4:	410fc271 	.word	0x410fc271
 800d9b8:	410fc270 	.word	0x410fc270
 800d9bc:	e000e400 	.word	0xe000e400
 800d9c0:	200014ec 	.word	0x200014ec
 800d9c4:	200014f0 	.word	0x200014f0
 800d9c8:	e000ed20 	.word	0xe000ed20
 800d9cc:	20000180 	.word	0x20000180
 800d9d0:	e000ef34 	.word	0xe000ef34

0800d9d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
	__asm volatile
 800d9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9de:	f383 8811 	msr	BASEPRI, r3
 800d9e2:	f3bf 8f6f 	isb	sy
 800d9e6:	f3bf 8f4f 	dsb	sy
 800d9ea:	607b      	str	r3, [r7, #4]
}
 800d9ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d9ee:	4b0f      	ldr	r3, [pc, #60]	; (800da2c <vPortEnterCritical+0x58>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	4a0d      	ldr	r2, [pc, #52]	; (800da2c <vPortEnterCritical+0x58>)
 800d9f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d9f8:	4b0c      	ldr	r3, [pc, #48]	; (800da2c <vPortEnterCritical+0x58>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d10f      	bne.n	800da20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800da00:	4b0b      	ldr	r3, [pc, #44]	; (800da30 <vPortEnterCritical+0x5c>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	b2db      	uxtb	r3, r3
 800da06:	2b00      	cmp	r3, #0
 800da08:	d00a      	beq.n	800da20 <vPortEnterCritical+0x4c>
	__asm volatile
 800da0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0e:	f383 8811 	msr	BASEPRI, r3
 800da12:	f3bf 8f6f 	isb	sy
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	603b      	str	r3, [r7, #0]
}
 800da1c:	bf00      	nop
 800da1e:	e7fe      	b.n	800da1e <vPortEnterCritical+0x4a>
	}
}
 800da20:	bf00      	nop
 800da22:	370c      	adds	r7, #12
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr
 800da2c:	20000180 	.word	0x20000180
 800da30:	e000ed04 	.word	0xe000ed04

0800da34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800da3a:	4b12      	ldr	r3, [pc, #72]	; (800da84 <vPortExitCritical+0x50>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d10a      	bne.n	800da58 <vPortExitCritical+0x24>
	__asm volatile
 800da42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da46:	f383 8811 	msr	BASEPRI, r3
 800da4a:	f3bf 8f6f 	isb	sy
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	607b      	str	r3, [r7, #4]
}
 800da54:	bf00      	nop
 800da56:	e7fe      	b.n	800da56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800da58:	4b0a      	ldr	r3, [pc, #40]	; (800da84 <vPortExitCritical+0x50>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	3b01      	subs	r3, #1
 800da5e:	4a09      	ldr	r2, [pc, #36]	; (800da84 <vPortExitCritical+0x50>)
 800da60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800da62:	4b08      	ldr	r3, [pc, #32]	; (800da84 <vPortExitCritical+0x50>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d105      	bne.n	800da76 <vPortExitCritical+0x42>
 800da6a:	2300      	movs	r3, #0
 800da6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	f383 8811 	msr	BASEPRI, r3
}
 800da74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800da76:	bf00      	nop
 800da78:	370c      	adds	r7, #12
 800da7a:	46bd      	mov	sp, r7
 800da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da80:	4770      	bx	lr
 800da82:	bf00      	nop
 800da84:	20000180 	.word	0x20000180
	...

0800da90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800da90:	f3ef 8009 	mrs	r0, PSP
 800da94:	f3bf 8f6f 	isb	sy
 800da98:	4b15      	ldr	r3, [pc, #84]	; (800daf0 <pxCurrentTCBConst>)
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	f01e 0f10 	tst.w	lr, #16
 800daa0:	bf08      	it	eq
 800daa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800daa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daaa:	6010      	str	r0, [r2, #0]
 800daac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dab4:	f380 8811 	msr	BASEPRI, r0
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f7fe feda 	bl	800c878 <vTaskSwitchContext>
 800dac4:	f04f 0000 	mov.w	r0, #0
 800dac8:	f380 8811 	msr	BASEPRI, r0
 800dacc:	bc09      	pop	{r0, r3}
 800dace:	6819      	ldr	r1, [r3, #0]
 800dad0:	6808      	ldr	r0, [r1, #0]
 800dad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad6:	f01e 0f10 	tst.w	lr, #16
 800dada:	bf08      	it	eq
 800dadc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dae0:	f380 8809 	msr	PSP, r0
 800dae4:	f3bf 8f6f 	isb	sy
 800dae8:	4770      	bx	lr
 800daea:	bf00      	nop
 800daec:	f3af 8000 	nop.w

0800daf0 <pxCurrentTCBConst>:
 800daf0:	20000ec0 	.word	0x20000ec0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800daf4:	bf00      	nop
 800daf6:	bf00      	nop

0800daf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
	__asm volatile
 800dafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db02:	f383 8811 	msr	BASEPRI, r3
 800db06:	f3bf 8f6f 	isb	sy
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	607b      	str	r3, [r7, #4]
}
 800db10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800db12:	f7fe fdf7 	bl	800c704 <xTaskIncrementTick>
 800db16:	4603      	mov	r3, r0
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d003      	beq.n	800db24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800db1c:	4b06      	ldr	r3, [pc, #24]	; (800db38 <xPortSysTickHandler+0x40>)
 800db1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db22:	601a      	str	r2, [r3, #0]
 800db24:	2300      	movs	r3, #0
 800db26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	f383 8811 	msr	BASEPRI, r3
}
 800db2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800db30:	bf00      	nop
 800db32:	3708      	adds	r7, #8
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	e000ed04 	.word	0xe000ed04

0800db3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800db3c:	b480      	push	{r7}
 800db3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800db40:	4b0b      	ldr	r3, [pc, #44]	; (800db70 <vPortSetupTimerInterrupt+0x34>)
 800db42:	2200      	movs	r2, #0
 800db44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800db46:	4b0b      	ldr	r3, [pc, #44]	; (800db74 <vPortSetupTimerInterrupt+0x38>)
 800db48:	2200      	movs	r2, #0
 800db4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800db4c:	4b0a      	ldr	r3, [pc, #40]	; (800db78 <vPortSetupTimerInterrupt+0x3c>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4a0a      	ldr	r2, [pc, #40]	; (800db7c <vPortSetupTimerInterrupt+0x40>)
 800db52:	fba2 2303 	umull	r2, r3, r2, r3
 800db56:	099b      	lsrs	r3, r3, #6
 800db58:	4a09      	ldr	r2, [pc, #36]	; (800db80 <vPortSetupTimerInterrupt+0x44>)
 800db5a:	3b01      	subs	r3, #1
 800db5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800db5e:	4b04      	ldr	r3, [pc, #16]	; (800db70 <vPortSetupTimerInterrupt+0x34>)
 800db60:	2207      	movs	r2, #7
 800db62:	601a      	str	r2, [r3, #0]
}
 800db64:	bf00      	nop
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	e000e010 	.word	0xe000e010
 800db74:	e000e018 	.word	0xe000e018
 800db78:	20000140 	.word	0x20000140
 800db7c:	10624dd3 	.word	0x10624dd3
 800db80:	e000e014 	.word	0xe000e014

0800db84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800db84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800db94 <vPortEnableVFP+0x10>
 800db88:	6801      	ldr	r1, [r0, #0]
 800db8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800db8e:	6001      	str	r1, [r0, #0]
 800db90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800db92:	bf00      	nop
 800db94:	e000ed88 	.word	0xe000ed88

0800db98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800db9e:	f3ef 8305 	mrs	r3, IPSR
 800dba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2b0f      	cmp	r3, #15
 800dba8:	d914      	bls.n	800dbd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dbaa:	4a17      	ldr	r2, [pc, #92]	; (800dc08 <vPortValidateInterruptPriority+0x70>)
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	4413      	add	r3, r2
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dbb4:	4b15      	ldr	r3, [pc, #84]	; (800dc0c <vPortValidateInterruptPriority+0x74>)
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	7afa      	ldrb	r2, [r7, #11]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d20a      	bcs.n	800dbd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc2:	f383 8811 	msr	BASEPRI, r3
 800dbc6:	f3bf 8f6f 	isb	sy
 800dbca:	f3bf 8f4f 	dsb	sy
 800dbce:	607b      	str	r3, [r7, #4]
}
 800dbd0:	bf00      	nop
 800dbd2:	e7fe      	b.n	800dbd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dbd4:	4b0e      	ldr	r3, [pc, #56]	; (800dc10 <vPortValidateInterruptPriority+0x78>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dbdc:	4b0d      	ldr	r3, [pc, #52]	; (800dc14 <vPortValidateInterruptPriority+0x7c>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d90a      	bls.n	800dbfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe8:	f383 8811 	msr	BASEPRI, r3
 800dbec:	f3bf 8f6f 	isb	sy
 800dbf0:	f3bf 8f4f 	dsb	sy
 800dbf4:	603b      	str	r3, [r7, #0]
}
 800dbf6:	bf00      	nop
 800dbf8:	e7fe      	b.n	800dbf8 <vPortValidateInterruptPriority+0x60>
	}
 800dbfa:	bf00      	nop
 800dbfc:	3714      	adds	r7, #20
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr
 800dc06:	bf00      	nop
 800dc08:	e000e3f0 	.word	0xe000e3f0
 800dc0c:	200014ec 	.word	0x200014ec
 800dc10:	e000ed0c 	.word	0xe000ed0c
 800dc14:	200014f0 	.word	0x200014f0

0800dc18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b08a      	sub	sp, #40	; 0x28
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dc20:	2300      	movs	r3, #0
 800dc22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dc24:	f7fe fcb2 	bl	800c58c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dc28:	4b5b      	ldr	r3, [pc, #364]	; (800dd98 <pvPortMalloc+0x180>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d101      	bne.n	800dc34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dc30:	f000 f920 	bl	800de74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dc34:	4b59      	ldr	r3, [pc, #356]	; (800dd9c <pvPortMalloc+0x184>)
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	4013      	ands	r3, r2
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	f040 8093 	bne.w	800dd68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d01d      	beq.n	800dc84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dc48:	2208      	movs	r2, #8
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f003 0307 	and.w	r3, r3, #7
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d014      	beq.n	800dc84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f023 0307 	bic.w	r3, r3, #7
 800dc60:	3308      	adds	r3, #8
 800dc62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f003 0307 	and.w	r3, r3, #7
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d00a      	beq.n	800dc84 <pvPortMalloc+0x6c>
	__asm volatile
 800dc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc72:	f383 8811 	msr	BASEPRI, r3
 800dc76:	f3bf 8f6f 	isb	sy
 800dc7a:	f3bf 8f4f 	dsb	sy
 800dc7e:	617b      	str	r3, [r7, #20]
}
 800dc80:	bf00      	nop
 800dc82:	e7fe      	b.n	800dc82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d06e      	beq.n	800dd68 <pvPortMalloc+0x150>
 800dc8a:	4b45      	ldr	r3, [pc, #276]	; (800dda0 <pvPortMalloc+0x188>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d869      	bhi.n	800dd68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dc94:	4b43      	ldr	r3, [pc, #268]	; (800dda4 <pvPortMalloc+0x18c>)
 800dc96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dc98:	4b42      	ldr	r3, [pc, #264]	; (800dda4 <pvPortMalloc+0x18c>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc9e:	e004      	b.n	800dcaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d903      	bls.n	800dcbc <pvPortMalloc+0xa4>
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d1f1      	bne.n	800dca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dcbc:	4b36      	ldr	r3, [pc, #216]	; (800dd98 <pvPortMalloc+0x180>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d050      	beq.n	800dd68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dcc6:	6a3b      	ldr	r3, [r7, #32]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2208      	movs	r2, #8
 800dccc:	4413      	add	r3, r2
 800dcce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd2:	681a      	ldr	r2, [r3, #0]
 800dcd4:	6a3b      	ldr	r3, [r7, #32]
 800dcd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcda:	685a      	ldr	r2, [r3, #4]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	1ad2      	subs	r2, r2, r3
 800dce0:	2308      	movs	r3, #8
 800dce2:	005b      	lsls	r3, r3, #1
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d91f      	bls.n	800dd28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	4413      	add	r3, r2
 800dcee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dcf0:	69bb      	ldr	r3, [r7, #24]
 800dcf2:	f003 0307 	and.w	r3, r3, #7
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d00a      	beq.n	800dd10 <pvPortMalloc+0xf8>
	__asm volatile
 800dcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfe:	f383 8811 	msr	BASEPRI, r3
 800dd02:	f3bf 8f6f 	isb	sy
 800dd06:	f3bf 8f4f 	dsb	sy
 800dd0a:	613b      	str	r3, [r7, #16]
}
 800dd0c:	bf00      	nop
 800dd0e:	e7fe      	b.n	800dd0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd12:	685a      	ldr	r2, [r3, #4]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	1ad2      	subs	r2, r2, r3
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dd22:	69b8      	ldr	r0, [r7, #24]
 800dd24:	f000 f908 	bl	800df38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dd28:	4b1d      	ldr	r3, [pc, #116]	; (800dda0 <pvPortMalloc+0x188>)
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	4a1b      	ldr	r2, [pc, #108]	; (800dda0 <pvPortMalloc+0x188>)
 800dd34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dd36:	4b1a      	ldr	r3, [pc, #104]	; (800dda0 <pvPortMalloc+0x188>)
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	4b1b      	ldr	r3, [pc, #108]	; (800dda8 <pvPortMalloc+0x190>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d203      	bcs.n	800dd4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dd42:	4b17      	ldr	r3, [pc, #92]	; (800dda0 <pvPortMalloc+0x188>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4a18      	ldr	r2, [pc, #96]	; (800dda8 <pvPortMalloc+0x190>)
 800dd48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4c:	685a      	ldr	r2, [r3, #4]
 800dd4e:	4b13      	ldr	r3, [pc, #76]	; (800dd9c <pvPortMalloc+0x184>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	431a      	orrs	r2, r3
 800dd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dd5e:	4b13      	ldr	r3, [pc, #76]	; (800ddac <pvPortMalloc+0x194>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	3301      	adds	r3, #1
 800dd64:	4a11      	ldr	r2, [pc, #68]	; (800ddac <pvPortMalloc+0x194>)
 800dd66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dd68:	f7fe fc1e 	bl	800c5a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	f003 0307 	and.w	r3, r3, #7
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d00a      	beq.n	800dd8c <pvPortMalloc+0x174>
	__asm volatile
 800dd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7a:	f383 8811 	msr	BASEPRI, r3
 800dd7e:	f3bf 8f6f 	isb	sy
 800dd82:	f3bf 8f4f 	dsb	sy
 800dd86:	60fb      	str	r3, [r7, #12]
}
 800dd88:	bf00      	nop
 800dd8a:	e7fe      	b.n	800dd8a <pvPortMalloc+0x172>
	return pvReturn;
 800dd8c:	69fb      	ldr	r3, [r7, #28]
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3728      	adds	r7, #40	; 0x28
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	20004f94 	.word	0x20004f94
 800dd9c:	20004fa8 	.word	0x20004fa8
 800dda0:	20004f98 	.word	0x20004f98
 800dda4:	20004f8c 	.word	0x20004f8c
 800dda8:	20004f9c 	.word	0x20004f9c
 800ddac:	20004fa0 	.word	0x20004fa0

0800ddb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b086      	sub	sp, #24
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d04d      	beq.n	800de5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ddc2:	2308      	movs	r3, #8
 800ddc4:	425b      	negs	r3, r3
 800ddc6:	697a      	ldr	r2, [r7, #20]
 800ddc8:	4413      	add	r3, r2
 800ddca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	685a      	ldr	r2, [r3, #4]
 800ddd4:	4b24      	ldr	r3, [pc, #144]	; (800de68 <vPortFree+0xb8>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4013      	ands	r3, r2
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d10a      	bne.n	800ddf4 <vPortFree+0x44>
	__asm volatile
 800ddde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde2:	f383 8811 	msr	BASEPRI, r3
 800dde6:	f3bf 8f6f 	isb	sy
 800ddea:	f3bf 8f4f 	dsb	sy
 800ddee:	60fb      	str	r3, [r7, #12]
}
 800ddf0:	bf00      	nop
 800ddf2:	e7fe      	b.n	800ddf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d00a      	beq.n	800de12 <vPortFree+0x62>
	__asm volatile
 800ddfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de00:	f383 8811 	msr	BASEPRI, r3
 800de04:	f3bf 8f6f 	isb	sy
 800de08:	f3bf 8f4f 	dsb	sy
 800de0c:	60bb      	str	r3, [r7, #8]
}
 800de0e:	bf00      	nop
 800de10:	e7fe      	b.n	800de10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	685a      	ldr	r2, [r3, #4]
 800de16:	4b14      	ldr	r3, [pc, #80]	; (800de68 <vPortFree+0xb8>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4013      	ands	r3, r2
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d01e      	beq.n	800de5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d11a      	bne.n	800de5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	685a      	ldr	r2, [r3, #4]
 800de2c:	4b0e      	ldr	r3, [pc, #56]	; (800de68 <vPortFree+0xb8>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	43db      	mvns	r3, r3
 800de32:	401a      	ands	r2, r3
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800de38:	f7fe fba8 	bl	800c58c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	685a      	ldr	r2, [r3, #4]
 800de40:	4b0a      	ldr	r3, [pc, #40]	; (800de6c <vPortFree+0xbc>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4413      	add	r3, r2
 800de46:	4a09      	ldr	r2, [pc, #36]	; (800de6c <vPortFree+0xbc>)
 800de48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800de4a:	6938      	ldr	r0, [r7, #16]
 800de4c:	f000 f874 	bl	800df38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800de50:	4b07      	ldr	r3, [pc, #28]	; (800de70 <vPortFree+0xc0>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	3301      	adds	r3, #1
 800de56:	4a06      	ldr	r2, [pc, #24]	; (800de70 <vPortFree+0xc0>)
 800de58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800de5a:	f7fe fba5 	bl	800c5a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800de5e:	bf00      	nop
 800de60:	3718      	adds	r7, #24
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	20004fa8 	.word	0x20004fa8
 800de6c:	20004f98 	.word	0x20004f98
 800de70:	20004fa4 	.word	0x20004fa4

0800de74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800de74:	b480      	push	{r7}
 800de76:	b085      	sub	sp, #20
 800de78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800de7a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800de7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800de80:	4b27      	ldr	r3, [pc, #156]	; (800df20 <prvHeapInit+0xac>)
 800de82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f003 0307 	and.w	r3, r3, #7
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d00c      	beq.n	800dea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	3307      	adds	r3, #7
 800de92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f023 0307 	bic.w	r3, r3, #7
 800de9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800de9c:	68ba      	ldr	r2, [r7, #8]
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	1ad3      	subs	r3, r2, r3
 800dea2:	4a1f      	ldr	r2, [pc, #124]	; (800df20 <prvHeapInit+0xac>)
 800dea4:	4413      	add	r3, r2
 800dea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800deac:	4a1d      	ldr	r2, [pc, #116]	; (800df24 <prvHeapInit+0xb0>)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800deb2:	4b1c      	ldr	r3, [pc, #112]	; (800df24 <prvHeapInit+0xb0>)
 800deb4:	2200      	movs	r2, #0
 800deb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	68ba      	ldr	r2, [r7, #8]
 800debc:	4413      	add	r3, r2
 800debe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dec0:	2208      	movs	r2, #8
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	1a9b      	subs	r3, r3, r2
 800dec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f023 0307 	bic.w	r3, r3, #7
 800dece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	4a15      	ldr	r2, [pc, #84]	; (800df28 <prvHeapInit+0xb4>)
 800ded4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ded6:	4b14      	ldr	r3, [pc, #80]	; (800df28 <prvHeapInit+0xb4>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	2200      	movs	r2, #0
 800dedc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dede:	4b12      	ldr	r3, [pc, #72]	; (800df28 <prvHeapInit+0xb4>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	2200      	movs	r2, #0
 800dee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	1ad2      	subs	r2, r2, r3
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800def4:	4b0c      	ldr	r3, [pc, #48]	; (800df28 <prvHeapInit+0xb4>)
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	4a0a      	ldr	r2, [pc, #40]	; (800df2c <prvHeapInit+0xb8>)
 800df02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	4a09      	ldr	r2, [pc, #36]	; (800df30 <prvHeapInit+0xbc>)
 800df0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800df0c:	4b09      	ldr	r3, [pc, #36]	; (800df34 <prvHeapInit+0xc0>)
 800df0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800df12:	601a      	str	r2, [r3, #0]
}
 800df14:	bf00      	nop
 800df16:	3714      	adds	r7, #20
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr
 800df20:	200014f4 	.word	0x200014f4
 800df24:	20004f8c 	.word	0x20004f8c
 800df28:	20004f94 	.word	0x20004f94
 800df2c:	20004f9c 	.word	0x20004f9c
 800df30:	20004f98 	.word	0x20004f98
 800df34:	20004fa8 	.word	0x20004fa8

0800df38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800df38:	b480      	push	{r7}
 800df3a:	b085      	sub	sp, #20
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800df40:	4b28      	ldr	r3, [pc, #160]	; (800dfe4 <prvInsertBlockIntoFreeList+0xac>)
 800df42:	60fb      	str	r3, [r7, #12]
 800df44:	e002      	b.n	800df4c <prvInsertBlockIntoFreeList+0x14>
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	60fb      	str	r3, [r7, #12]
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	429a      	cmp	r2, r3
 800df54:	d8f7      	bhi.n	800df46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	68ba      	ldr	r2, [r7, #8]
 800df60:	4413      	add	r3, r2
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	429a      	cmp	r2, r3
 800df66:	d108      	bne.n	800df7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	685a      	ldr	r2, [r3, #4]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	441a      	add	r2, r3
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	68ba      	ldr	r2, [r7, #8]
 800df84:	441a      	add	r2, r3
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d118      	bne.n	800dfc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	4b15      	ldr	r3, [pc, #84]	; (800dfe8 <prvInsertBlockIntoFreeList+0xb0>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	429a      	cmp	r2, r3
 800df98:	d00d      	beq.n	800dfb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	685a      	ldr	r2, [r3, #4]
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	441a      	add	r2, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	681a      	ldr	r2, [r3, #0]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	601a      	str	r2, [r3, #0]
 800dfb4:	e008      	b.n	800dfc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dfb6:	4b0c      	ldr	r3, [pc, #48]	; (800dfe8 <prvInsertBlockIntoFreeList+0xb0>)
 800dfb8:	681a      	ldr	r2, [r3, #0]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	601a      	str	r2, [r3, #0]
 800dfbe:	e003      	b.n	800dfc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dfc8:	68fa      	ldr	r2, [r7, #12]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d002      	beq.n	800dfd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dfd6:	bf00      	nop
 800dfd8:	3714      	adds	r7, #20
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop
 800dfe4:	20004f8c 	.word	0x20004f8c
 800dfe8:	20004f94 	.word	0x20004f94

0800dfec <__errno>:
 800dfec:	4b01      	ldr	r3, [pc, #4]	; (800dff4 <__errno+0x8>)
 800dfee:	6818      	ldr	r0, [r3, #0]
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop
 800dff4:	20000184 	.word	0x20000184

0800dff8 <__libc_init_array>:
 800dff8:	b570      	push	{r4, r5, r6, lr}
 800dffa:	4d0d      	ldr	r5, [pc, #52]	; (800e030 <__libc_init_array+0x38>)
 800dffc:	4c0d      	ldr	r4, [pc, #52]	; (800e034 <__libc_init_array+0x3c>)
 800dffe:	1b64      	subs	r4, r4, r5
 800e000:	10a4      	asrs	r4, r4, #2
 800e002:	2600      	movs	r6, #0
 800e004:	42a6      	cmp	r6, r4
 800e006:	d109      	bne.n	800e01c <__libc_init_array+0x24>
 800e008:	4d0b      	ldr	r5, [pc, #44]	; (800e038 <__libc_init_array+0x40>)
 800e00a:	4c0c      	ldr	r4, [pc, #48]	; (800e03c <__libc_init_array+0x44>)
 800e00c:	f000 f936 	bl	800e27c <_init>
 800e010:	1b64      	subs	r4, r4, r5
 800e012:	10a4      	asrs	r4, r4, #2
 800e014:	2600      	movs	r6, #0
 800e016:	42a6      	cmp	r6, r4
 800e018:	d105      	bne.n	800e026 <__libc_init_array+0x2e>
 800e01a:	bd70      	pop	{r4, r5, r6, pc}
 800e01c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e020:	4798      	blx	r3
 800e022:	3601      	adds	r6, #1
 800e024:	e7ee      	b.n	800e004 <__libc_init_array+0xc>
 800e026:	f855 3b04 	ldr.w	r3, [r5], #4
 800e02a:	4798      	blx	r3
 800e02c:	3601      	adds	r6, #1
 800e02e:	e7f2      	b.n	800e016 <__libc_init_array+0x1e>
 800e030:	0800f780 	.word	0x0800f780
 800e034:	0800f780 	.word	0x0800f780
 800e038:	0800f780 	.word	0x0800f780
 800e03c:	0800f784 	.word	0x0800f784

0800e040 <malloc>:
 800e040:	4b02      	ldr	r3, [pc, #8]	; (800e04c <malloc+0xc>)
 800e042:	4601      	mov	r1, r0
 800e044:	6818      	ldr	r0, [r3, #0]
 800e046:	f000 b871 	b.w	800e12c <_malloc_r>
 800e04a:	bf00      	nop
 800e04c:	20000184 	.word	0x20000184

0800e050 <free>:
 800e050:	4b02      	ldr	r3, [pc, #8]	; (800e05c <free+0xc>)
 800e052:	4601      	mov	r1, r0
 800e054:	6818      	ldr	r0, [r3, #0]
 800e056:	f000 b819 	b.w	800e08c <_free_r>
 800e05a:	bf00      	nop
 800e05c:	20000184 	.word	0x20000184

0800e060 <memcpy>:
 800e060:	440a      	add	r2, r1
 800e062:	4291      	cmp	r1, r2
 800e064:	f100 33ff 	add.w	r3, r0, #4294967295
 800e068:	d100      	bne.n	800e06c <memcpy+0xc>
 800e06a:	4770      	bx	lr
 800e06c:	b510      	push	{r4, lr}
 800e06e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e072:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e076:	4291      	cmp	r1, r2
 800e078:	d1f9      	bne.n	800e06e <memcpy+0xe>
 800e07a:	bd10      	pop	{r4, pc}

0800e07c <memset>:
 800e07c:	4402      	add	r2, r0
 800e07e:	4603      	mov	r3, r0
 800e080:	4293      	cmp	r3, r2
 800e082:	d100      	bne.n	800e086 <memset+0xa>
 800e084:	4770      	bx	lr
 800e086:	f803 1b01 	strb.w	r1, [r3], #1
 800e08a:	e7f9      	b.n	800e080 <memset+0x4>

0800e08c <_free_r>:
 800e08c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e08e:	2900      	cmp	r1, #0
 800e090:	d048      	beq.n	800e124 <_free_r+0x98>
 800e092:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e096:	9001      	str	r0, [sp, #4]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	f1a1 0404 	sub.w	r4, r1, #4
 800e09e:	bfb8      	it	lt
 800e0a0:	18e4      	addlt	r4, r4, r3
 800e0a2:	f000 f8dd 	bl	800e260 <__malloc_lock>
 800e0a6:	4a20      	ldr	r2, [pc, #128]	; (800e128 <_free_r+0x9c>)
 800e0a8:	9801      	ldr	r0, [sp, #4]
 800e0aa:	6813      	ldr	r3, [r2, #0]
 800e0ac:	4615      	mov	r5, r2
 800e0ae:	b933      	cbnz	r3, 800e0be <_free_r+0x32>
 800e0b0:	6063      	str	r3, [r4, #4]
 800e0b2:	6014      	str	r4, [r2, #0]
 800e0b4:	b003      	add	sp, #12
 800e0b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0ba:	f000 b8d7 	b.w	800e26c <__malloc_unlock>
 800e0be:	42a3      	cmp	r3, r4
 800e0c0:	d90b      	bls.n	800e0da <_free_r+0x4e>
 800e0c2:	6821      	ldr	r1, [r4, #0]
 800e0c4:	1862      	adds	r2, r4, r1
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	bf04      	itt	eq
 800e0ca:	681a      	ldreq	r2, [r3, #0]
 800e0cc:	685b      	ldreq	r3, [r3, #4]
 800e0ce:	6063      	str	r3, [r4, #4]
 800e0d0:	bf04      	itt	eq
 800e0d2:	1852      	addeq	r2, r2, r1
 800e0d4:	6022      	streq	r2, [r4, #0]
 800e0d6:	602c      	str	r4, [r5, #0]
 800e0d8:	e7ec      	b.n	800e0b4 <_free_r+0x28>
 800e0da:	461a      	mov	r2, r3
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	b10b      	cbz	r3, 800e0e4 <_free_r+0x58>
 800e0e0:	42a3      	cmp	r3, r4
 800e0e2:	d9fa      	bls.n	800e0da <_free_r+0x4e>
 800e0e4:	6811      	ldr	r1, [r2, #0]
 800e0e6:	1855      	adds	r5, r2, r1
 800e0e8:	42a5      	cmp	r5, r4
 800e0ea:	d10b      	bne.n	800e104 <_free_r+0x78>
 800e0ec:	6824      	ldr	r4, [r4, #0]
 800e0ee:	4421      	add	r1, r4
 800e0f0:	1854      	adds	r4, r2, r1
 800e0f2:	42a3      	cmp	r3, r4
 800e0f4:	6011      	str	r1, [r2, #0]
 800e0f6:	d1dd      	bne.n	800e0b4 <_free_r+0x28>
 800e0f8:	681c      	ldr	r4, [r3, #0]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	6053      	str	r3, [r2, #4]
 800e0fe:	4421      	add	r1, r4
 800e100:	6011      	str	r1, [r2, #0]
 800e102:	e7d7      	b.n	800e0b4 <_free_r+0x28>
 800e104:	d902      	bls.n	800e10c <_free_r+0x80>
 800e106:	230c      	movs	r3, #12
 800e108:	6003      	str	r3, [r0, #0]
 800e10a:	e7d3      	b.n	800e0b4 <_free_r+0x28>
 800e10c:	6825      	ldr	r5, [r4, #0]
 800e10e:	1961      	adds	r1, r4, r5
 800e110:	428b      	cmp	r3, r1
 800e112:	bf04      	itt	eq
 800e114:	6819      	ldreq	r1, [r3, #0]
 800e116:	685b      	ldreq	r3, [r3, #4]
 800e118:	6063      	str	r3, [r4, #4]
 800e11a:	bf04      	itt	eq
 800e11c:	1949      	addeq	r1, r1, r5
 800e11e:	6021      	streq	r1, [r4, #0]
 800e120:	6054      	str	r4, [r2, #4]
 800e122:	e7c7      	b.n	800e0b4 <_free_r+0x28>
 800e124:	b003      	add	sp, #12
 800e126:	bd30      	pop	{r4, r5, pc}
 800e128:	20004fac 	.word	0x20004fac

0800e12c <_malloc_r>:
 800e12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e12e:	1ccd      	adds	r5, r1, #3
 800e130:	f025 0503 	bic.w	r5, r5, #3
 800e134:	3508      	adds	r5, #8
 800e136:	2d0c      	cmp	r5, #12
 800e138:	bf38      	it	cc
 800e13a:	250c      	movcc	r5, #12
 800e13c:	2d00      	cmp	r5, #0
 800e13e:	4606      	mov	r6, r0
 800e140:	db01      	blt.n	800e146 <_malloc_r+0x1a>
 800e142:	42a9      	cmp	r1, r5
 800e144:	d903      	bls.n	800e14e <_malloc_r+0x22>
 800e146:	230c      	movs	r3, #12
 800e148:	6033      	str	r3, [r6, #0]
 800e14a:	2000      	movs	r0, #0
 800e14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e14e:	f000 f887 	bl	800e260 <__malloc_lock>
 800e152:	4921      	ldr	r1, [pc, #132]	; (800e1d8 <_malloc_r+0xac>)
 800e154:	680a      	ldr	r2, [r1, #0]
 800e156:	4614      	mov	r4, r2
 800e158:	b99c      	cbnz	r4, 800e182 <_malloc_r+0x56>
 800e15a:	4f20      	ldr	r7, [pc, #128]	; (800e1dc <_malloc_r+0xb0>)
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	b923      	cbnz	r3, 800e16a <_malloc_r+0x3e>
 800e160:	4621      	mov	r1, r4
 800e162:	4630      	mov	r0, r6
 800e164:	f000 f83c 	bl	800e1e0 <_sbrk_r>
 800e168:	6038      	str	r0, [r7, #0]
 800e16a:	4629      	mov	r1, r5
 800e16c:	4630      	mov	r0, r6
 800e16e:	f000 f837 	bl	800e1e0 <_sbrk_r>
 800e172:	1c43      	adds	r3, r0, #1
 800e174:	d123      	bne.n	800e1be <_malloc_r+0x92>
 800e176:	230c      	movs	r3, #12
 800e178:	6033      	str	r3, [r6, #0]
 800e17a:	4630      	mov	r0, r6
 800e17c:	f000 f876 	bl	800e26c <__malloc_unlock>
 800e180:	e7e3      	b.n	800e14a <_malloc_r+0x1e>
 800e182:	6823      	ldr	r3, [r4, #0]
 800e184:	1b5b      	subs	r3, r3, r5
 800e186:	d417      	bmi.n	800e1b8 <_malloc_r+0x8c>
 800e188:	2b0b      	cmp	r3, #11
 800e18a:	d903      	bls.n	800e194 <_malloc_r+0x68>
 800e18c:	6023      	str	r3, [r4, #0]
 800e18e:	441c      	add	r4, r3
 800e190:	6025      	str	r5, [r4, #0]
 800e192:	e004      	b.n	800e19e <_malloc_r+0x72>
 800e194:	6863      	ldr	r3, [r4, #4]
 800e196:	42a2      	cmp	r2, r4
 800e198:	bf0c      	ite	eq
 800e19a:	600b      	streq	r3, [r1, #0]
 800e19c:	6053      	strne	r3, [r2, #4]
 800e19e:	4630      	mov	r0, r6
 800e1a0:	f000 f864 	bl	800e26c <__malloc_unlock>
 800e1a4:	f104 000b 	add.w	r0, r4, #11
 800e1a8:	1d23      	adds	r3, r4, #4
 800e1aa:	f020 0007 	bic.w	r0, r0, #7
 800e1ae:	1ac2      	subs	r2, r0, r3
 800e1b0:	d0cc      	beq.n	800e14c <_malloc_r+0x20>
 800e1b2:	1a1b      	subs	r3, r3, r0
 800e1b4:	50a3      	str	r3, [r4, r2]
 800e1b6:	e7c9      	b.n	800e14c <_malloc_r+0x20>
 800e1b8:	4622      	mov	r2, r4
 800e1ba:	6864      	ldr	r4, [r4, #4]
 800e1bc:	e7cc      	b.n	800e158 <_malloc_r+0x2c>
 800e1be:	1cc4      	adds	r4, r0, #3
 800e1c0:	f024 0403 	bic.w	r4, r4, #3
 800e1c4:	42a0      	cmp	r0, r4
 800e1c6:	d0e3      	beq.n	800e190 <_malloc_r+0x64>
 800e1c8:	1a21      	subs	r1, r4, r0
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	f000 f808 	bl	800e1e0 <_sbrk_r>
 800e1d0:	3001      	adds	r0, #1
 800e1d2:	d1dd      	bne.n	800e190 <_malloc_r+0x64>
 800e1d4:	e7cf      	b.n	800e176 <_malloc_r+0x4a>
 800e1d6:	bf00      	nop
 800e1d8:	20004fac 	.word	0x20004fac
 800e1dc:	20004fb0 	.word	0x20004fb0

0800e1e0 <_sbrk_r>:
 800e1e0:	b538      	push	{r3, r4, r5, lr}
 800e1e2:	4d06      	ldr	r5, [pc, #24]	; (800e1fc <_sbrk_r+0x1c>)
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	4604      	mov	r4, r0
 800e1e8:	4608      	mov	r0, r1
 800e1ea:	602b      	str	r3, [r5, #0]
 800e1ec:	f7f7 fcc2 	bl	8005b74 <_sbrk>
 800e1f0:	1c43      	adds	r3, r0, #1
 800e1f2:	d102      	bne.n	800e1fa <_sbrk_r+0x1a>
 800e1f4:	682b      	ldr	r3, [r5, #0]
 800e1f6:	b103      	cbz	r3, 800e1fa <_sbrk_r+0x1a>
 800e1f8:	6023      	str	r3, [r4, #0]
 800e1fa:	bd38      	pop	{r3, r4, r5, pc}
 800e1fc:	20005100 	.word	0x20005100

0800e200 <strcasecmp>:
 800e200:	b570      	push	{r4, r5, r6, lr}
 800e202:	4d0c      	ldr	r5, [pc, #48]	; (800e234 <strcasecmp+0x34>)
 800e204:	4604      	mov	r4, r0
 800e206:	462e      	mov	r6, r5
 800e208:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e20c:	5d5a      	ldrb	r2, [r3, r5]
 800e20e:	f002 0203 	and.w	r2, r2, #3
 800e212:	2a01      	cmp	r2, #1
 800e214:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e218:	5cb0      	ldrb	r0, [r6, r2]
 800e21a:	f000 0003 	and.w	r0, r0, #3
 800e21e:	bf08      	it	eq
 800e220:	3320      	addeq	r3, #32
 800e222:	2801      	cmp	r0, #1
 800e224:	bf08      	it	eq
 800e226:	3220      	addeq	r2, #32
 800e228:	1a98      	subs	r0, r3, r2
 800e22a:	d101      	bne.n	800e230 <strcasecmp+0x30>
 800e22c:	2a00      	cmp	r2, #0
 800e22e:	d1eb      	bne.n	800e208 <strcasecmp+0x8>
 800e230:	bd70      	pop	{r4, r5, r6, pc}
 800e232:	bf00      	nop
 800e234:	0800f675 	.word	0x0800f675

0800e238 <strncpy>:
 800e238:	b510      	push	{r4, lr}
 800e23a:	3901      	subs	r1, #1
 800e23c:	4603      	mov	r3, r0
 800e23e:	b132      	cbz	r2, 800e24e <strncpy+0x16>
 800e240:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e244:	f803 4b01 	strb.w	r4, [r3], #1
 800e248:	3a01      	subs	r2, #1
 800e24a:	2c00      	cmp	r4, #0
 800e24c:	d1f7      	bne.n	800e23e <strncpy+0x6>
 800e24e:	441a      	add	r2, r3
 800e250:	2100      	movs	r1, #0
 800e252:	4293      	cmp	r3, r2
 800e254:	d100      	bne.n	800e258 <strncpy+0x20>
 800e256:	bd10      	pop	{r4, pc}
 800e258:	f803 1b01 	strb.w	r1, [r3], #1
 800e25c:	e7f9      	b.n	800e252 <strncpy+0x1a>
	...

0800e260 <__malloc_lock>:
 800e260:	4801      	ldr	r0, [pc, #4]	; (800e268 <__malloc_lock+0x8>)
 800e262:	f000 b809 	b.w	800e278 <__retarget_lock_acquire_recursive>
 800e266:	bf00      	nop
 800e268:	20005108 	.word	0x20005108

0800e26c <__malloc_unlock>:
 800e26c:	4801      	ldr	r0, [pc, #4]	; (800e274 <__malloc_unlock+0x8>)
 800e26e:	f000 b804 	b.w	800e27a <__retarget_lock_release_recursive>
 800e272:	bf00      	nop
 800e274:	20005108 	.word	0x20005108

0800e278 <__retarget_lock_acquire_recursive>:
 800e278:	4770      	bx	lr

0800e27a <__retarget_lock_release_recursive>:
 800e27a:	4770      	bx	lr

0800e27c <_init>:
 800e27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e27e:	bf00      	nop
 800e280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e282:	bc08      	pop	{r3}
 800e284:	469e      	mov	lr, r3
 800e286:	4770      	bx	lr

0800e288 <_fini>:
 800e288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e28a:	bf00      	nop
 800e28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e28e:	bc08      	pop	{r3}
 800e290:	469e      	mov	lr, r3
 800e292:	4770      	bx	lr
