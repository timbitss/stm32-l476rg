
UART-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08009360  08009360  00019360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800952c  0800952c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800952c  0800952c  0001952c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009534  08009534  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009534  08009534  00019534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009538  08009538  00019538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800953c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003578  20000074  080095b0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200035ec  080095b0  000235ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb2f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cec  00000000  00000000  0003fbd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  000438c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001680  00000000  00000000  000450a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a3c3  00000000  00000000  00046728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000199be  00000000  00000000  00070aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010058f  00000000  00000000  0008a4a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018aa38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d3c  00000000  00000000  0018aa8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009348 	.word	0x08009348

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009348 	.word	0x08009348

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2iz>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d215      	bcs.n	8000ac2 <__aeabi_d2iz+0x36>
 8000a96:	d511      	bpl.n	8000abc <__aeabi_d2iz+0x30>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d912      	bls.n	8000ac8 <__aeabi_d2iz+0x3c>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_d2iz+0x48>
 8000ac8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	bf08      	it	eq
 8000ace:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_d2uiz>:
 8000adc:	004a      	lsls	r2, r1, #1
 8000ade:	d211      	bcs.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae4:	d211      	bcs.n	8000b0a <__aeabi_d2uiz+0x2e>
 8000ae6:	d50d      	bpl.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d40e      	bmi.n	8000b10 <__aeabi_d2uiz+0x34>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_d2uiz+0x3a>
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b96e 	b.w	8000e10 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	468c      	mov	ip, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f040 8083 	bne.w	8000c62 <__udivmoddi4+0x116>
 8000b5c:	428a      	cmp	r2, r1
 8000b5e:	4617      	mov	r7, r2
 8000b60:	d947      	bls.n	8000bf2 <__udivmoddi4+0xa6>
 8000b62:	fab2 f282 	clz	r2, r2
 8000b66:	b142      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b68:	f1c2 0020 	rsb	r0, r2, #32
 8000b6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b70:	4091      	lsls	r1, r2
 8000b72:	4097      	lsls	r7, r2
 8000b74:	ea40 0c01 	orr.w	ip, r0, r1
 8000b78:	4094      	lsls	r4, r2
 8000b7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fbbc f6f8 	udiv	r6, ip, r8
 8000b84:	fa1f fe87 	uxth.w	lr, r7
 8000b88:	fb08 c116 	mls	r1, r8, r6, ip
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb06 f10e 	mul.w	r1, r6, lr
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x60>
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b9e:	f080 8119 	bcs.w	8000dd4 <__udivmoddi4+0x288>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 8116 	bls.w	8000dd4 <__udivmoddi4+0x288>
 8000ba8:	3e02      	subs	r6, #2
 8000baa:	443b      	add	r3, r7
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc0:	45a6      	cmp	lr, r4
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x8c>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bca:	f080 8105 	bcs.w	8000dd8 <__udivmoddi4+0x28c>
 8000bce:	45a6      	cmp	lr, r4
 8000bd0:	f240 8102 	bls.w	8000dd8 <__udivmoddi4+0x28c>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	443c      	add	r4, r7
 8000bd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bdc:	eba4 040e 	sub.w	r4, r4, lr
 8000be0:	2600      	movs	r6, #0
 8000be2:	b11d      	cbz	r5, 8000bec <__udivmoddi4+0xa0>
 8000be4:	40d4      	lsrs	r4, r2
 8000be6:	2300      	movs	r3, #0
 8000be8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bec:	4631      	mov	r1, r6
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	b902      	cbnz	r2, 8000bf6 <__udivmoddi4+0xaa>
 8000bf4:	deff      	udf	#255	; 0xff
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d150      	bne.n	8000ca0 <__udivmoddi4+0x154>
 8000bfe:	1bcb      	subs	r3, r1, r7
 8000c00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c04:	fa1f f887 	uxth.w	r8, r7
 8000c08:	2601      	movs	r6, #1
 8000c0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c0e:	0c21      	lsrs	r1, r4, #16
 8000c10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c18:	fb08 f30c 	mul.w	r3, r8, ip
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	d907      	bls.n	8000c30 <__udivmoddi4+0xe4>
 8000c20:	1879      	adds	r1, r7, r1
 8000c22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0xe2>
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	f200 80e9 	bhi.w	8000e00 <__udivmoddi4+0x2b4>
 8000c2e:	4684      	mov	ip, r0
 8000c30:	1ac9      	subs	r1, r1, r3
 8000c32:	b2a3      	uxth	r3, r4
 8000c34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c40:	fb08 f800 	mul.w	r8, r8, r0
 8000c44:	45a0      	cmp	r8, r4
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x10c>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x10a>
 8000c50:	45a0      	cmp	r8, r4
 8000c52:	f200 80d9 	bhi.w	8000e08 <__udivmoddi4+0x2bc>
 8000c56:	4618      	mov	r0, r3
 8000c58:	eba4 0408 	sub.w	r4, r4, r8
 8000c5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c60:	e7bf      	b.n	8000be2 <__udivmoddi4+0x96>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x12e>
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	f000 80b1 	beq.w	8000dce <__udivmoddi4+0x282>
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c72:	4630      	mov	r0, r6
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f683 	clz	r6, r3
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d14a      	bne.n	8000d18 <__udivmoddi4+0x1cc>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0x140>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80b8 	bhi.w	8000dfc <__udivmoddi4+0x2b0>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	468c      	mov	ip, r1
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	d0a8      	beq.n	8000bec <__udivmoddi4+0xa0>
 8000c9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c9e:	e7a5      	b.n	8000bec <__udivmoddi4+0xa0>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ca8:	4097      	lsls	r7, r2
 8000caa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb2:	40d9      	lsrs	r1, r3
 8000cb4:	4330      	orrs	r0, r6
 8000cb6:	0c03      	lsrs	r3, r0, #16
 8000cb8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cbc:	fa1f f887 	uxth.w	r8, r7
 8000cc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb06 f108 	mul.w	r1, r6, r8
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x19c>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cda:	f080 808d 	bcs.w	8000df8 <__udivmoddi4+0x2ac>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 808a 	bls.w	8000df8 <__udivmoddi4+0x2ac>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b281      	uxth	r1, r0
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf8:	fb00 f308 	mul.w	r3, r0, r8
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0x1c4>
 8000d00:	1879      	adds	r1, r7, r1
 8000d02:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d06:	d273      	bcs.n	8000df0 <__udivmoddi4+0x2a4>
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d971      	bls.n	8000df0 <__udivmoddi4+0x2a4>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4439      	add	r1, r7
 8000d10:	1acb      	subs	r3, r1, r3
 8000d12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d16:	e778      	b.n	8000c0a <__udivmoddi4+0xbe>
 8000d18:	f1c6 0c20 	rsb	ip, r6, #32
 8000d1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d24:	431c      	orrs	r4, r3
 8000d26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d36:	431f      	orrs	r7, r3
 8000d38:	0c3b      	lsrs	r3, r7, #16
 8000d3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d3e:	fa1f f884 	uxth.w	r8, r4
 8000d42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d4e:	458a      	cmp	sl, r1
 8000d50:	fa02 f206 	lsl.w	r2, r2, r6
 8000d54:	fa00 f306 	lsl.w	r3, r0, r6
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x220>
 8000d5a:	1861      	adds	r1, r4, r1
 8000d5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d60:	d248      	bcs.n	8000df4 <__udivmoddi4+0x2a8>
 8000d62:	458a      	cmp	sl, r1
 8000d64:	d946      	bls.n	8000df4 <__udivmoddi4+0x2a8>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	4421      	add	r1, r4
 8000d6c:	eba1 010a 	sub.w	r1, r1, sl
 8000d70:	b2bf      	uxth	r7, r7
 8000d72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d7e:	fb00 f808 	mul.w	r8, r0, r8
 8000d82:	45b8      	cmp	r8, r7
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x24a>
 8000d86:	19e7      	adds	r7, r4, r7
 8000d88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8c:	d22e      	bcs.n	8000dec <__udivmoddi4+0x2a0>
 8000d8e:	45b8      	cmp	r8, r7
 8000d90:	d92c      	bls.n	8000dec <__udivmoddi4+0x2a0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4427      	add	r7, r4
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	eba7 0708 	sub.w	r7, r7, r8
 8000d9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000da2:	454f      	cmp	r7, r9
 8000da4:	46c6      	mov	lr, r8
 8000da6:	4649      	mov	r1, r9
 8000da8:	d31a      	bcc.n	8000de0 <__udivmoddi4+0x294>
 8000daa:	d017      	beq.n	8000ddc <__udivmoddi4+0x290>
 8000dac:	b15d      	cbz	r5, 8000dc6 <__udivmoddi4+0x27a>
 8000dae:	ebb3 020e 	subs.w	r2, r3, lr
 8000db2:	eb67 0701 	sbc.w	r7, r7, r1
 8000db6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dba:	40f2      	lsrs	r2, r6
 8000dbc:	ea4c 0202 	orr.w	r2, ip, r2
 8000dc0:	40f7      	lsrs	r7, r6
 8000dc2:	e9c5 2700 	strd	r2, r7, [r5]
 8000dc6:	2600      	movs	r6, #0
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e70b      	b.n	8000bec <__udivmoddi4+0xa0>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e9      	b.n	8000bac <__udivmoddi4+0x60>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6fd      	b.n	8000bd8 <__udivmoddi4+0x8c>
 8000ddc:	4543      	cmp	r3, r8
 8000dde:	d2e5      	bcs.n	8000dac <__udivmoddi4+0x260>
 8000de0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000de4:	eb69 0104 	sbc.w	r1, r9, r4
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7df      	b.n	8000dac <__udivmoddi4+0x260>
 8000dec:	4608      	mov	r0, r1
 8000dee:	e7d2      	b.n	8000d96 <__udivmoddi4+0x24a>
 8000df0:	4660      	mov	r0, ip
 8000df2:	e78d      	b.n	8000d10 <__udivmoddi4+0x1c4>
 8000df4:	4681      	mov	r9, r0
 8000df6:	e7b9      	b.n	8000d6c <__udivmoddi4+0x220>
 8000df8:	4666      	mov	r6, ip
 8000dfa:	e775      	b.n	8000ce8 <__udivmoddi4+0x19c>
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e74a      	b.n	8000c96 <__udivmoddi4+0x14a>
 8000e00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e04:	4439      	add	r1, r7
 8000e06:	e713      	b.n	8000c30 <__udivmoddi4+0xe4>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	443c      	add	r4, r7
 8000e0c:	e724      	b.n	8000c58 <__udivmoddi4+0x10c>
 8000e0e:	bf00      	nop

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <_putchar>:
 * @brief Requirement for tiny printf() function.
 * 
 * @param character Character to place in UART TX buffer.
 */
void _putchar(char character)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(uart_handle_ptr, (uint8_t *)&character, 1, HAL_MAX_DELAY);
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <_putchar+0x24>)
 8000e20:	6818      	ldr	r0, [r3, #0]
 8000e22:	1df9      	adds	r1, r7, #7
 8000e24:	f04f 33ff 	mov.w	r3, #4294967295
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f004 f97f 	bl	800512c <HAL_UART_Transmit>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000090 	.word	0x20000090

08000e3c <Command_Transmit>:

osStatus_t Command_Transmit(const char *msg, uint32_t timeout_period)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
    osStatus_t status = osMessageQueuePut(tx_msg_queue_id, (void*)&msg, 0, timeout_period); // Transmit character pointer.
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <Command_Transmit+0x24>)
 8000e48:	6818      	ldr	r0, [r3, #0]
 8000e4a:	1d39      	adds	r1, r7, #4
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f004 ffa0 	bl	8005d94 <osMessageQueuePut>
 8000e54:	60f8      	str	r0, [r7, #12]
    return status;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200034c0 	.word	0x200034c0

08000e64 <UART_RX_Thread>:

/******************* RTOS Threads **************************/

void UART_RX_Thread(void *args)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    while (1)
    {
        osDelay(1);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f004 ff03 	bl	8005c78 <osDelay>
 8000e72:	e7fb      	b.n	8000e6c <UART_RX_Thread+0x8>

08000e74 <UART_TX_Thread>:
    }
}

void UART_TX_Thread(void *args)
{   
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
    /* Wait forever for message from queue, then transmit over UART */
    while (1)
    {
        char* msg_to_tx = NULL; // Buffer to store char *.
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
        osStatus_t status = osMessageQueueGet(tx_msg_queue_id, (void *)&msg_to_tx, NULL, osWaitForever);
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <UART_TX_Thread+0x3c>)
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	f107 0108 	add.w	r1, r7, #8
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f004 ffe1 	bl	8005e54 <osMessageQueueGet>
 8000e92:	60f8      	str	r0, [r7, #12]
        if(msg_to_tx == NULL)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d103      	bne.n	8000ea2 <UART_TX_Thread+0x2e>
        {
            printf("Invalid message\r\n");
 8000e9a:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <UART_TX_Thread+0x40>)
 8000e9c:	f001 fe08 	bl	8002ab0 <printf_>
 8000ea0:	e7ec      	b.n	8000e7c <UART_TX_Thread+0x8>
        }
        else
        {
            printf("%s", msg_to_tx);
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <UART_TX_Thread+0x44>)
 8000ea8:	f001 fe02 	bl	8002ab0 <printf_>
    {
 8000eac:	e7e6      	b.n	8000e7c <UART_TX_Thread+0x8>
 8000eae:	bf00      	nop
 8000eb0:	200034c0 	.word	0x200034c0
 8000eb4:	08009360 	.word	0x08009360
 8000eb8:	08009374 	.word	0x08009374

08000ebc <Command_Init>:
        }
    }
}

uint8_t Command_Init(UART_HandleTypeDef *huart)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b096      	sub	sp, #88	; 0x58
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    uart_handle_ptr = huart;
 8000ec4:	4a23      	ldr	r2, [pc, #140]	; (8000f54 <Command_Init+0x98>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]

    /* Define task attributes */
    const osThreadAttr_t rx_task_attributes = {
 8000eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ece:	2224      	movs	r2, #36	; 0x24
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f007 fd6a 	bl	80089ac <memset>
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <Command_Init+0x9c>)
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee0:	643b      	str	r3, [r7, #64]	; 0x40
 8000ee2:	2318      	movs	r3, #24
 8000ee4:	647b      	str	r3, [r7, #68]	; 0x44
        .name = "RxTask",
        .stack_size = 128 * 4,
        .priority = (osPriority_t)osPriorityNormal,
    };
    const osThreadAttr_t tx_task_attributes = {
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	2224      	movs	r2, #36	; 0x24
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f007 fd5c 	bl	80089ac <memset>
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <Command_Init+0xa0>)
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	2318      	movs	r3, #24
 8000f00:	623b      	str	r3, [r7, #32]
        .stack_size = 4096,
        .priority = (osPriority_t)osPriorityNormal,
    };

    /* Create threads */
    osThreadId_t rx_thread_handle = (osThreadId_t)osThreadNew(UART_RX_Thread, NULL, &rx_task_attributes);
 8000f02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f06:	461a      	mov	r2, r3
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4815      	ldr	r0, [pc, #84]	; (8000f60 <Command_Init+0xa4>)
 8000f0c:	f004 fe22 	bl	8005b54 <osThreadNew>
 8000f10:	6578      	str	r0, [r7, #84]	; 0x54
    osThreadId_t tx_thread_handle = (osThreadId_t)osThreadNew(UART_TX_Thread, NULL, &tx_task_attributes);
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	461a      	mov	r2, r3
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4812      	ldr	r0, [pc, #72]	; (8000f64 <Command_Init+0xa8>)
 8000f1c:	f004 fe1a 	bl	8005b54 <osThreadNew>
 8000f20:	6538      	str	r0, [r7, #80]	; 0x50

    /* Create UART transmit message queue */
    tx_msg_queue_id = osMessageQueueNew(MAX_MSG_COUNT, sizeof(char *), NULL);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2104      	movs	r1, #4
 8000f26:	2005      	movs	r0, #5
 8000f28:	f004 fec1 	bl	8005cae <osMessageQueueNew>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <Command_Init+0xac>)
 8000f30:	6013      	str	r3, [r2, #0]

    if (rx_thread_handle == NULL || tx_thread_handle == NULL || tx_msg_queue_id == NULL)
 8000f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d006      	beq.n	8000f46 <Command_Init+0x8a>
 8000f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <Command_Init+0x8a>
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <Command_Init+0xac>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <Command_Init+0x8e>
    {
        return 1; // Insufficient memory.
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <Command_Init+0x90>
    }
    else
    {
        return 0;
 8000f4a:	2300      	movs	r3, #0
    }
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3758      	adds	r7, #88	; 0x58
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000090 	.word	0x20000090
 8000f58:	08009378 	.word	0x08009378
 8000f5c:	08009380 	.word	0x08009380
 8000f60:	08000e65 	.word	0x08000e65
 8000f64:	08000e75 	.word	0x08000e75
 8000f68:	200034c0 	.word	0x200034c0

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b5b0      	push	{r4, r5, r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f72:	f001 ff99 	bl	8002ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f76:	f000 f83b 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7a:	f000 f8df 	bl	800113c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f7e:	f000 f8ad 	bl	80010dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f82:	f004 fd9d 	bl	8005ac0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f86:	4a15      	ldr	r2, [pc, #84]	; (8000fdc <main+0x70>)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4815      	ldr	r0, [pc, #84]	; (8000fe0 <main+0x74>)
 8000f8c:	f004 fde2 	bl	8005b54 <osThreadNew>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <main+0x78>)
 8000f94:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  uint8_t err = Command_Init(&huart2);
 8000f96:	4814      	ldr	r0, [pc, #80]	; (8000fe8 <main+0x7c>)
 8000f98:	f7ff ff90 	bl	8000ebc <Command_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(err)
 8000fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d014      	beq.n	8000fd4 <main+0x68>
  {
	  char buf[] = "Could not create UART threads\r\n";
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <main+0x80>)
 8000fac:	1d3c      	adds	r4, r7, #4
 8000fae:	461d      	mov	r5, r3
 8000fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff f906 	bl	80001d0 <strlen>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	1d39      	adds	r1, r7, #4
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <main+0x7c>)
 8000fd0:	f004 f8ac 	bl	800512c <HAL_UART_Transmit>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fd4:	f004 fd98 	bl	8005b08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <main+0x6c>
 8000fda:	bf00      	nop
 8000fdc:	08009408 	.word	0x08009408
 8000fe0:	0800120d 	.word	0x0800120d
 8000fe4:	200034c4 	.word	0x200034c4
 8000fe8:	200034c8 	.word	0x200034c8
 8000fec:	08009394 	.word	0x08009394

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b0b8      	sub	sp, #224	; 0xe0
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ffa:	2244      	movs	r2, #68	; 0x44
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f007 fcd4 	bl	80089ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001014:	463b      	mov	r3, r7
 8001016:	2288      	movs	r2, #136	; 0x88
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f007 fcc6 	bl	80089ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001020:	2302      	movs	r3, #2
 8001022:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800102a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800102e:	2310      	movs	r3, #16
 8001030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001034:	2302      	movs	r3, #2
 8001036:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800103a:	2302      	movs	r3, #2
 800103c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001046:	230a      	movs	r3, #10
 8001048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800104c:	2307      	movs	r3, #7
 800104e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001052:	2302      	movs	r3, #2
 8001054:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001058:	2302      	movs	r3, #2
 800105a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fa68 	bl	8003538 <HAL_RCC_OscConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800106e:	f000 f8f7 	bl	8001260 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001072:	230f      	movs	r3, #15
 8001074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001078:	2303      	movs	r3, #3
 800107a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001090:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001094:	2104      	movs	r1, #4
 8001096:	4618      	mov	r0, r3
 8001098:	f002 fe34 	bl	8003d04 <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80010a2:	f000 f8dd 	bl	8001260 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010a6:	2302      	movs	r3, #2
 80010a8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 f85f 	bl	8004174 <HAL_RCCEx_PeriphCLKConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80010bc:	f000 f8d0 	bl	8001260 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010c4:	f002 f9e2 	bl	800348c <HAL_PWREx_ControlVoltageScaling>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80010ce:	f000 f8c7 	bl	8001260 <Error_Handler>
  }
}
 80010d2:	bf00      	nop
 80010d4:	37e0      	adds	r7, #224	; 0xe0
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_USART2_UART_Init+0x58>)
 80010e2:	4a15      	ldr	r2, [pc, #84]	; (8001138 <MX_USART2_UART_Init+0x5c>)
 80010e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MX_USART2_UART_Init+0x58>)
 80010e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_USART2_UART_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_USART2_UART_Init+0x58>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_USART2_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_USART2_UART_Init+0x58>)
 8001102:	220c      	movs	r2, #12
 8001104:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_USART2_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_USART2_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <MX_USART2_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_USART2_UART_Init+0x58>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_USART2_UART_Init+0x58>)
 8001120:	f003 ffb6 	bl	8005090 <HAL_UART_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800112a:	f000 f899 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200034c8 	.word	0x200034c8
 8001138:	40004400 	.word	0x40004400

0800113c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <MX_GPIO_Init+0xc4>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	4a2a      	ldr	r2, [pc, #168]	; (8001200 <MX_GPIO_Init+0xc4>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115e:	4b28      	ldr	r3, [pc, #160]	; (8001200 <MX_GPIO_Init+0xc4>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <MX_GPIO_Init+0xc4>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	4a24      	ldr	r2, [pc, #144]	; (8001200 <MX_GPIO_Init+0xc4>)
 8001170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <MX_GPIO_Init+0xc4>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <MX_GPIO_Init+0xc4>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	4a1e      	ldr	r2, [pc, #120]	; (8001200 <MX_GPIO_Init+0xc4>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <MX_GPIO_Init+0xc4>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <MX_GPIO_Init+0xc4>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	4a18      	ldr	r2, [pc, #96]	; (8001200 <MX_GPIO_Init+0xc4>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_GPIO_Init+0xc4>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ba:	f002 f941 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_GPIO_Init+0xc8>)
 80011c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_GPIO_Init+0xcc>)
 80011d4:	f001 ff8a 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011d8:	2320      	movs	r3, #32
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f001 ff7b 	bl	80030ec <HAL_GPIO_Init>

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	; 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000
 8001204:	10210000 	.word	0x10210000
 8001208:	48000800 	.word	0x48000800

0800120c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  char* s = "Hello World\r\n";
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <StartDefaultTask+0x28>)
 8001216:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    printf("Sending message\r\n");
 8001218:	4807      	ldr	r0, [pc, #28]	; (8001238 <StartDefaultTask+0x2c>)
 800121a:	f007 fc3d 	bl	8008a98 <puts>
	int err_tx = Command_Transmit(s, 50);
 800121e:	2132      	movs	r1, #50	; 0x32
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f7ff fe0b 	bl	8000e3c <Command_Transmit>
 8001226:	60b8      	str	r0, [r7, #8]
    osDelay(1000);
 8001228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800122c:	f004 fd24 	bl	8005c78 <osDelay>
  {
 8001230:	e7f2      	b.n	8001218 <StartDefaultTask+0xc>
 8001232:	bf00      	nop
 8001234:	080093b4 	.word	0x080093b4
 8001238:	080093c4 	.word	0x080093c4

0800123c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800124e:	f001 fe4b 	bl	8002ee8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40001400 	.word	0x40001400

08001260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001268:	e7fe      	b.n	8001268 <Error_Handler+0x8>

0800126a <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800126a:	b480      	push	{r7}
 800126c:	b085      	sub	sp, #20
 800126e:	af00      	add	r7, sp, #0
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4603      	mov	r3, r0
 8001278:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <_out_char+0x1e>
    _putchar(character);
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fdb8 	bl	8000e14 <_putchar>
  }
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	e002      	b.n	80012c2 <_strnlen_s+0x16>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	3301      	adds	r3, #1
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <_strnlen_s+0x28>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	1e5a      	subs	r2, r3, #1
 80012ce:	603a      	str	r2, [r7, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f3      	bne.n	80012bc <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	1ad3      	subs	r3, r2, r3
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b2f      	cmp	r3, #47	; 0x2f
 80012f4:	d904      	bls.n	8001300 <_is_digit+0x1a>
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2b39      	cmp	r3, #57	; 0x39
 80012fa:	d801      	bhi.n	8001300 <_is_digit+0x1a>
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <_is_digit+0x1c>
 8001300:	2300      	movs	r3, #0
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	b2db      	uxtb	r3, r3
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001320:	e00e      	b.n	8001340 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4618      	mov	r0, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	1c59      	adds	r1, r3, #1
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6011      	str	r1, [r2, #0]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	4403      	add	r3, r0
 800133c:	3b30      	subs	r3, #48	; 0x30
 800133e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ffcd 	bl	80012e6 <_is_digit>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1e7      	bne.n	8001322 <_atoi+0xe>
  }
  return i;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800136e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d125      	bne.n	80013c4 <_out_rev+0x68>
 8001378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d120      	bne.n	80013c4 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8001382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	e00a      	b.n	800139e <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	1c53      	adds	r3, r2, #1
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	68fc      	ldr	r4, [r7, #12]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	2020      	movs	r0, #32
 8001396:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	3301      	adds	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d3f0      	bcc.n	8001388 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80013a6:	e00d      	b.n	80013c4 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80013a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013aa:	3b01      	subs	r3, #1
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b2:	4413      	add	r3, r2
 80013b4:	7818      	ldrb	r0, [r3, #0]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	1c53      	adds	r3, r2, #1
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	68fc      	ldr	r4, [r7, #12]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	47a0      	blx	r4
  while (len) {
 80013c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1ee      	bne.n	80013a8 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80013ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00e      	beq.n	80013f2 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80013d4:	e007      	b.n	80013e6 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	1c53      	adds	r3, r2, #1
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	68fc      	ldr	r4, [r7, #12]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	2020      	movs	r0, #32
 80013e4:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d8f1      	bhi.n	80013d6 <_out_rev+0x7a>
    }
  }

  return idx;
 80013f2:	687b      	ldr	r3, [r7, #4]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	371c      	adds	r7, #28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd90      	pop	{r4, r7, pc}

080013fc <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af04      	add	r7, sp, #16
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800140a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d136      	bne.n	8001482 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001416:	2b00      	cmp	r3, #0
 8001418:	d018      	beq.n	800144c <_ntoa_format+0x50>
 800141a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d013      	beq.n	800144c <_ntoa_format+0x50>
 8001424:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d104      	bne.n	8001436 <_ntoa_format+0x3a>
 800142c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00a      	beq.n	800144c <_ntoa_format+0x50>
      width--;
 8001436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001438:	3b01      	subs	r3, #1
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800143c:	e006      	b.n	800144c <_ntoa_format+0x50>
      buf[len++] = '0';
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	61fa      	str	r2, [r7, #28]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4413      	add	r3, r2
 8001448:	2230      	movs	r2, #48	; 0x30
 800144a:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800144c:	69fa      	ldr	r2, [r7, #28]
 800144e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001450:	429a      	cmp	r2, r3
 8001452:	d20a      	bcs.n	800146a <_ntoa_format+0x6e>
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	2b1f      	cmp	r3, #31
 8001458:	d9f1      	bls.n	800143e <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800145a:	e006      	b.n	800146a <_ntoa_format+0x6e>
      buf[len++] = '0';
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	61fa      	str	r2, [r7, #28]
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4413      	add	r3, r2
 8001466:	2230      	movs	r2, #48	; 0x30
 8001468:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800146a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <_ntoa_format+0x86>
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001478:	429a      	cmp	r2, r3
 800147a:	d202      	bcs.n	8001482 <_ntoa_format+0x86>
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	2b1f      	cmp	r3, #31
 8001480:	d9ec      	bls.n	800145c <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8001482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001484:	f003 0310 	and.w	r3, r3, #16
 8001488:	2b00      	cmp	r3, #0
 800148a:	d058      	beq.n	800153e <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800148c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001492:	2b00      	cmp	r3, #0
 8001494:	d116      	bne.n	80014c4 <_ntoa_format+0xc8>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d013      	beq.n	80014c4 <_ntoa_format+0xc8>
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d003      	beq.n	80014ac <_ntoa_format+0xb0>
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d10b      	bne.n	80014c4 <_ntoa_format+0xc8>
      len--;
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <_ntoa_format+0xc8>
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	2b10      	cmp	r3, #16
 80014bc:	d102      	bne.n	80014c4 <_ntoa_format+0xc8>
        len--;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	2b10      	cmp	r3, #16
 80014c8:	d10f      	bne.n	80014ea <_ntoa_format+0xee>
 80014ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10a      	bne.n	80014ea <_ntoa_format+0xee>
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	2b1f      	cmp	r3, #31
 80014d8:	d807      	bhi.n	80014ea <_ntoa_format+0xee>
      buf[len++] = 'x';
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	1c5a      	adds	r2, r3, #1
 80014de:	61fa      	str	r2, [r7, #28]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4413      	add	r3, r2
 80014e4:	2278      	movs	r2, #120	; 0x78
 80014e6:	701a      	strb	r2, [r3, #0]
 80014e8:	e01f      	b.n	800152a <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	2b10      	cmp	r3, #16
 80014ee:	d10f      	bne.n	8001510 <_ntoa_format+0x114>
 80014f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <_ntoa_format+0x114>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	2b1f      	cmp	r3, #31
 80014fe:	d807      	bhi.n	8001510 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	61fa      	str	r2, [r7, #28]
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4413      	add	r3, r2
 800150a:	2258      	movs	r2, #88	; 0x58
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	e00c      	b.n	800152a <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	2b02      	cmp	r3, #2
 8001514:	d109      	bne.n	800152a <_ntoa_format+0x12e>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	2b1f      	cmp	r3, #31
 800151a:	d806      	bhi.n	800152a <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	61fa      	str	r2, [r7, #28]
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4413      	add	r3, r2
 8001526:	2262      	movs	r2, #98	; 0x62
 8001528:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	2b1f      	cmp	r3, #31
 800152e:	d806      	bhi.n	800153e <_ntoa_format+0x142>
      buf[len++] = '0';
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	61fa      	str	r2, [r7, #28]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4413      	add	r3, r2
 800153a:	2230      	movs	r2, #48	; 0x30
 800153c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	2b1f      	cmp	r3, #31
 8001542:	d824      	bhi.n	800158e <_ntoa_format+0x192>
    if (negative) {
 8001544:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d007      	beq.n	800155c <_ntoa_format+0x160>
      buf[len++] = '-';
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	61fa      	str	r2, [r7, #28]
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4413      	add	r3, r2
 8001556:	222d      	movs	r2, #45	; 0x2d
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	e018      	b.n	800158e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800155c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	61fa      	str	r2, [r7, #28]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4413      	add	r3, r2
 8001570:	222b      	movs	r2, #43	; 0x2b
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	e00b      	b.n	800158e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8001576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <_ntoa_format+0x192>
      buf[len++] = ' ';
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	61fa      	str	r2, [r7, #28]
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4413      	add	r3, r2
 800158a:	2220      	movs	r2, #32
 800158c:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800158e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001590:	9303      	str	r3, [sp, #12]
 8001592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001594:	9302      	str	r3, [sp, #8]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	68b9      	ldr	r1, [r7, #8]
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f7ff fed9 	bl	800135c <_out_rev>
 80015aa:	4603      	mov	r3, r0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b096      	sub	sp, #88	; 0x58
 80015b8:	af08      	add	r7, sp, #32
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80015c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d103      	bne.n	80015d4 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80015cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ce:	f023 0310 	bic.w	r3, r3, #16
 80015d2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80015d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <_ntoa_long+0x30>
 80015de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d033      	beq.n	800164c <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 80015e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80015e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80015ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80015ee:	fb01 f202 	mul.w	r2, r1, r2
 80015f2:	1a9b      	subs	r3, r3, r2
 80015f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80015f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015fc:	2b09      	cmp	r3, #9
 80015fe:	d804      	bhi.n	800160a <_ntoa_long+0x56>
 8001600:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001604:	3330      	adds	r3, #48	; 0x30
 8001606:	b2da      	uxtb	r2, r3
 8001608:	e00d      	b.n	8001626 <_ntoa_long+0x72>
 800160a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800160c:	f003 0320 	and.w	r3, r3, #32
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <_ntoa_long+0x64>
 8001614:	2241      	movs	r2, #65	; 0x41
 8001616:	e000      	b.n	800161a <_ntoa_long+0x66>
 8001618:	2261      	movs	r2, #97	; 0x61
 800161a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800161e:	4413      	add	r3, r2
 8001620:	b2db      	uxtb	r3, r3
 8001622:	3b0a      	subs	r3, #10
 8001624:	b2da      	uxtb	r2, r3
 8001626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001628:	1c59      	adds	r1, r3, #1
 800162a:	6379      	str	r1, [r7, #52]	; 0x34
 800162c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001630:	440b      	add	r3, r1
 8001632:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001636:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <_ntoa_long+0x98>
 8001646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001648:	2b1f      	cmp	r3, #31
 800164a:	d9cb      	bls.n	80015e4 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800164c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800164e:	9306      	str	r3, [sp, #24]
 8001650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001652:	9305      	str	r3, [sp, #20]
 8001654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001656:	9304      	str	r3, [sp, #16]
 8001658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800165a:	9303      	str	r3, [sp, #12]
 800165c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001660:	9302      	str	r3, [sp, #8]
 8001662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f7ff fec2 	bl	80013fc <_ntoa_format>
 8001678:	4603      	mov	r3, r0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3738      	adds	r7, #56	; 0x38
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b096      	sub	sp, #88	; 0x58
 8001686:	af08      	add	r7, sp, #32
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001694:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001698:	4313      	orrs	r3, r2
 800169a:	d103      	bne.n	80016a4 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800169c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800169e:	f023 0310 	bic.w	r3, r3, #16
 80016a2:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80016a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <_ntoa_long_long+0x34>
 80016ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80016b2:	4313      	orrs	r3, r2
 80016b4:	d038      	beq.n	8001728 <_ntoa_long_long+0xa6>
    do {
      const char digit = (char)(value % base);
 80016b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80016ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80016be:	f7ff fa2d 	bl	8000b1c <__aeabi_uldivmod>
 80016c2:	4613      	mov	r3, r2
 80016c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80016c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016cc:	2b09      	cmp	r3, #9
 80016ce:	d804      	bhi.n	80016da <_ntoa_long_long+0x58>
 80016d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016d4:	3330      	adds	r3, #48	; 0x30
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	e00d      	b.n	80016f6 <_ntoa_long_long+0x74>
 80016da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016dc:	f003 0320 	and.w	r3, r3, #32
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <_ntoa_long_long+0x66>
 80016e4:	2241      	movs	r2, #65	; 0x41
 80016e6:	e000      	b.n	80016ea <_ntoa_long_long+0x68>
 80016e8:	2261      	movs	r2, #97	; 0x61
 80016ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016ee:	4413      	add	r3, r2
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	3b0a      	subs	r3, #10
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f8:	1c59      	adds	r1, r3, #1
 80016fa:	6379      	str	r1, [r7, #52]	; 0x34
 80016fc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001700:	440b      	add	r3, r1
 8001702:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001706:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800170a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800170e:	f7ff fa05 	bl	8000b1c <__aeabi_uldivmod>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800171a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800171e:	4313      	orrs	r3, r2
 8001720:	d002      	beq.n	8001728 <_ntoa_long_long+0xa6>
 8001722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001724:	2b1f      	cmp	r3, #31
 8001726:	d9c6      	bls.n	80016b6 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800172a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800172c:	9206      	str	r2, [sp, #24]
 800172e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001730:	9205      	str	r2, [sp, #20]
 8001732:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001734:	9204      	str	r2, [sp, #16]
 8001736:	9303      	str	r3, [sp, #12]
 8001738:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800173c:	9302      	str	r3, [sp, #8]
 800173e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f7ff fe54 	bl	80013fc <_ntoa_format>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3738      	adds	r7, #56	; 0x38
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b09d      	sub	sp, #116	; 0x74
 8001764:	af04      	add	r7, sp, #16
 8001766:	6178      	str	r0, [r7, #20]
 8001768:	6139      	str	r1, [r7, #16]
 800176a:	60fa      	str	r2, [r7, #12]
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8001782:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800178a:	f7ff f94d 	bl	8000a28 <__aeabi_dcmpeq>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10f      	bne.n	80017b4 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8001794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001796:	9303      	str	r3, [sp, #12]
 8001798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800179a:	9302      	str	r3, [sp, #8]
 800179c:	2303      	movs	r3, #3
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	4ba9      	ldr	r3, [pc, #676]	; (8001a48 <_ftoa+0x2e8>)
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	6939      	ldr	r1, [r7, #16]
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f7ff fdd6 	bl	800135c <_out_rev>
 80017b0:	4603      	mov	r3, r0
 80017b2:	e22b      	b.n	8001c0c <_ftoa+0x4ac>
  if (value < -DBL_MAX)
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80017bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017c0:	f7ff f93c 	bl	8000a3c <__aeabi_dcmplt>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00f      	beq.n	80017ea <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80017ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017cc:	9303      	str	r3, [sp, #12]
 80017ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017d0:	9302      	str	r3, [sp, #8]
 80017d2:	2304      	movs	r3, #4
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	4b9d      	ldr	r3, [pc, #628]	; (8001a4c <_ftoa+0x2ec>)
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	6939      	ldr	r1, [r7, #16]
 80017e0:	6978      	ldr	r0, [r7, #20]
 80017e2:	f7ff fdbb 	bl	800135c <_out_rev>
 80017e6:	4603      	mov	r3, r0
 80017e8:	e210      	b.n	8001c0c <_ftoa+0x4ac>
  if (value > DBL_MAX)
 80017ea:	f04f 32ff 	mov.w	r2, #4294967295
 80017ee:	4b98      	ldr	r3, [pc, #608]	; (8001a50 <_ftoa+0x2f0>)
 80017f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017f4:	f7ff f940 	bl	8000a78 <__aeabi_dcmpgt>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d01d      	beq.n	800183a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80017fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <_ftoa+0xac>
 8001808:	4b92      	ldr	r3, [pc, #584]	; (8001a54 <_ftoa+0x2f4>)
 800180a:	e000      	b.n	800180e <_ftoa+0xae>
 800180c:	4b92      	ldr	r3, [pc, #584]	; (8001a58 <_ftoa+0x2f8>)
 800180e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001810:	f002 0204 	and.w	r2, r2, #4
 8001814:	2a00      	cmp	r2, #0
 8001816:	d001      	beq.n	800181c <_ftoa+0xbc>
 8001818:	2204      	movs	r2, #4
 800181a:	e000      	b.n	800181e <_ftoa+0xbe>
 800181c:	2203      	movs	r2, #3
 800181e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001820:	9103      	str	r1, [sp, #12]
 8001822:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001824:	9102      	str	r1, [sp, #8]
 8001826:	9201      	str	r2, [sp, #4]
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	6939      	ldr	r1, [r7, #16]
 8001830:	6978      	ldr	r0, [r7, #20]
 8001832:	f7ff fd93 	bl	800135c <_out_rev>
 8001836:	4603      	mov	r3, r0
 8001838:	e1e8      	b.n	8001c0c <_ftoa+0x4ac>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800183a:	a37f      	add	r3, pc, #508	; (adr r3, 8001a38 <_ftoa+0x2d8>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001844:	f7ff f918 	bl	8000a78 <__aeabi_dcmpgt>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <_ftoa+0x102>
 800184e:	a37c      	add	r3, pc, #496	; (adr r3, 8001a40 <_ftoa+0x2e0>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001858:	f7ff f8f0 	bl	8000a3c <__aeabi_dcmplt>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00f      	beq.n	8001882 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	ed97 0b00 	vldr	d0, [r7]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	6939      	ldr	r1, [r7, #16]
 8001878:	6978      	ldr	r0, [r7, #20]
 800187a:	f000 f9d1 	bl	8001c20 <_etoa>
 800187e:	4603      	mov	r3, r0
 8001880:	e1c4      	b.n	8001c0c <_ftoa+0x4ac>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8001882:	2300      	movs	r3, #0
 8001884:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001894:	f7ff f8d2 	bl	8000a3c <__aeabi_dcmplt>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00e      	beq.n	80018bc <_ftoa+0x15c>
    negative = true;
 800189e:	2301      	movs	r3, #1
 80018a0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 80018a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018a8:	f04f 0000 	mov.w	r0, #0
 80018ac:	f04f 0100 	mov.w	r1, #0
 80018b0:	f7fe fc9a 	bl	80001e8 <__aeabi_dsub>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80018bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10e      	bne.n	80018e4 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80018c6:	2306      	movs	r3, #6
 80018c8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80018ca:	e00b      	b.n	80018e4 <_ftoa+0x184>
    buf[len++] = '0';
 80018cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80018d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018d6:	4413      	add	r3, r2
 80018d8:	2230      	movs	r2, #48	; 0x30
 80018da:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80018de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018e0:	3b01      	subs	r3, #1
 80018e2:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80018e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018e6:	2b1f      	cmp	r3, #31
 80018e8:	d802      	bhi.n	80018f0 <_ftoa+0x190>
 80018ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018ec:	2b09      	cmp	r3, #9
 80018ee:	d8ed      	bhi.n	80018cc <_ftoa+0x16c>
  }

  int whole = (int)value;
 80018f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018f4:	f7ff f8ca 	bl	8000a8c <__aeabi_d2iz>
 80018f8:	4603      	mov	r3, r0
 80018fa:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 80018fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80018fe:	f7fe fdc1 	bl	8000484 <__aeabi_i2d>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800190a:	f7fe fc6d 	bl	80001e8 <__aeabi_dsub>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	4a51      	ldr	r2, [pc, #324]	; (8001a5c <_ftoa+0x2fc>)
 8001918:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	4413      	add	r3, r2
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	f7fe fe19 	bl	8000558 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800192e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001932:	f7ff f8d3 	bl	8000adc <__aeabi_d2uiz>
 8001936:	4603      	mov	r3, r0
 8001938:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800193a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800193c:	f7fe fd92 	bl	8000464 <__aeabi_ui2d>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001948:	f7fe fc4e 	bl	80001e8 <__aeabi_dsub>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <_ftoa+0x300>)
 800195a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800195e:	f7ff f88b 	bl	8000a78 <__aeabi_dcmpgt>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d016      	beq.n	8001996 <_ftoa+0x236>
    ++frac;
 8001968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800196a:	3301      	adds	r3, #1
 800196c:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800196e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001970:	f7fe fd78 	bl	8000464 <__aeabi_ui2d>
 8001974:	4a39      	ldr	r2, [pc, #228]	; (8001a5c <_ftoa+0x2fc>)
 8001976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4413      	add	r3, r2
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7ff f870 	bl	8000a64 <__aeabi_dcmpge>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d01a      	beq.n	80019c0 <_ftoa+0x260>
      frac = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800198e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001990:	3301      	adds	r3, #1
 8001992:	657b      	str	r3, [r7, #84]	; 0x54
 8001994:	e014      	b.n	80019c0 <_ftoa+0x260>
    }
  }
  else if (diff < 0.5) {
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <_ftoa+0x300>)
 800199c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80019a0:	f7ff f84c 	bl	8000a3c <__aeabi_dcmplt>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10a      	bne.n	80019c0 <_ftoa+0x260>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80019aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <_ftoa+0x25a>
 80019b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <_ftoa+0x260>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80019ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019bc:	3301      	adds	r3, #1
 80019be:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 80019c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d134      	bne.n	8001a30 <_ftoa+0x2d0>
    diff = value - (double)whole;
 80019c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80019c8:	f7fe fd5c 	bl	8000484 <__aeabi_i2d>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019d4:	f7fe fc08 	bl	80001e8 <__aeabi_dsub>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80019e0:	2301      	movs	r3, #1
 80019e2:	461c      	mov	r4, r3
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <_ftoa+0x300>)
 80019ea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80019ee:	f7ff f825 	bl	8000a3c <__aeabi_dcmplt>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <_ftoa+0x29c>
 80019f8:	2300      	movs	r3, #0
 80019fa:	461c      	mov	r4, r3
 80019fc:	b2e3      	uxtb	r3, r4
 80019fe:	f083 0301 	eor.w	r3, r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <_ftoa+0x2bc>
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <_ftoa+0x300>)
 8001a0e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001a12:	f7ff f831 	bl	8000a78 <__aeabi_dcmpgt>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d067      	beq.n	8001aec <_ftoa+0x38c>
 8001a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8085 	beq.w	8001b32 <_ftoa+0x3d2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8001a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	657b      	str	r3, [r7, #84]	; 0x54
 8001a2e:	e080      	b.n	8001b32 <_ftoa+0x3d2>
    }
  }
  else {
    unsigned int count = prec;
 8001a30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a32:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001a34:	e037      	b.n	8001aa6 <_ftoa+0x346>
 8001a36:	bf00      	nop
 8001a38:	00000000 	.word	0x00000000
 8001a3c:	41cdcd65 	.word	0x41cdcd65
 8001a40:	00000000 	.word	0x00000000
 8001a44:	c1cdcd65 	.word	0xc1cdcd65
 8001a48:	080093d8 	.word	0x080093d8
 8001a4c:	080093dc 	.word	0x080093dc
 8001a50:	7fefffff 	.word	0x7fefffff
 8001a54:	080093e4 	.word	0x080093e4
 8001a58:	080093ec 	.word	0x080093ec
 8001a5c:	08009430 	.word	0x08009430
 8001a60:	3fe00000 	.word	0x3fe00000
      --count;
 8001a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a66:	3b01      	subs	r3, #1
 8001a68:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8001a6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001a6c:	4b69      	ldr	r3, [pc, #420]	; (8001c14 <_ftoa+0x4b4>)
 8001a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8001a72:	08da      	lsrs	r2, r3, #3
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	1aca      	subs	r2, r1, r3
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a82:	1c59      	adds	r1, r3, #1
 8001a84:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001a86:	3230      	adds	r2, #48	; 0x30
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001a8e:	440b      	add	r3, r1
 8001a90:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8001a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a96:	4a5f      	ldr	r2, [pc, #380]	; (8001c14 <_ftoa+0x4b4>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	08db      	lsrs	r3, r3, #3
 8001a9e:	653b      	str	r3, [r7, #80]	; 0x50
 8001aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <_ftoa+0x34e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa8:	2b1f      	cmp	r3, #31
 8001aaa:	d9db      	bls.n	8001a64 <_ftoa+0x304>
 8001aac:	e00a      	b.n	8001ac4 <_ftoa+0x364>
        break;
 8001aae:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001ab0:	e008      	b.n	8001ac4 <_ftoa+0x364>
      buf[len++] = '0';
 8001ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001ab8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001abc:	4413      	add	r3, r2
 8001abe:	2230      	movs	r2, #48	; 0x30
 8001ac0:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ac6:	2b1f      	cmp	r3, #31
 8001ac8:	d804      	bhi.n	8001ad4 <_ftoa+0x374>
 8001aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001acc:	1e5a      	subs	r2, r3, #1
 8001ace:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ee      	bne.n	8001ab2 <_ftoa+0x352>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	d82b      	bhi.n	8001b32 <_ftoa+0x3d2>
      // add decimal
      buf[len++] = '.';
 8001ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001ae0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ae4:	4413      	add	r3, r2
 8001ae6:	222e      	movs	r2, #46	; 0x2e
 8001ae8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001aec:	e021      	b.n	8001b32 <_ftoa+0x3d2>
    buf[len++] = (char)(48 + (whole % 10));
 8001aee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001af0:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <_ftoa+0x4b8>)
 8001af2:	fb83 1302 	smull	r1, r3, r3, r2
 8001af6:	1099      	asrs	r1, r3, #2
 8001af8:	17d3      	asrs	r3, r2, #31
 8001afa:	1ac9      	subs	r1, r1, r3
 8001afc:	460b      	mov	r3, r1
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	1ad1      	subs	r1, r2, r3
 8001b06:	b2ca      	uxtb	r2, r1
 8001b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0a:	1c59      	adds	r1, r3, #1
 8001b0c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001b0e:	3230      	adds	r2, #48	; 0x30
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001b16:	440b      	add	r3, r1
 8001b18:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8001b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1e:	4a3e      	ldr	r2, [pc, #248]	; (8001c18 <_ftoa+0x4b8>)
 8001b20:	fb82 1203 	smull	r1, r2, r2, r3
 8001b24:	1092      	asrs	r2, r2, #2
 8001b26:	17db      	asrs	r3, r3, #31
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	657b      	str	r3, [r7, #84]	; 0x54
 8001b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <_ftoa+0x3da>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b34:	2b1f      	cmp	r3, #31
 8001b36:	d9da      	bls.n	8001aee <_ftoa+0x38e>
 8001b38:	e000      	b.n	8001b3c <_ftoa+0x3dc>
      break;
 8001b3a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8001b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d124      	bne.n	8001b90 <_ftoa+0x430>
 8001b46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01f      	beq.n	8001b90 <_ftoa+0x430>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d015      	beq.n	8001b82 <_ftoa+0x422>
 8001b56:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d104      	bne.n	8001b68 <_ftoa+0x408>
 8001b5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00c      	beq.n	8001b82 <_ftoa+0x422>
      width--;
 8001b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001b6e:	e008      	b.n	8001b82 <_ftoa+0x422>
      buf[len++] = '0';
 8001b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b76:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b7a:	4413      	add	r3, r2
 8001b7c:	2230      	movs	r2, #48	; 0x30
 8001b7e:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001b82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d202      	bcs.n	8001b90 <_ftoa+0x430>
 8001b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b8c:	2b1f      	cmp	r3, #31
 8001b8e:	d9ef      	bls.n	8001b70 <_ftoa+0x410>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b92:	2b1f      	cmp	r3, #31
 8001b94:	d82a      	bhi.n	8001bec <_ftoa+0x48c>
    if (negative) {
 8001b96:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <_ftoa+0x452>
      buf[len++] = '-';
 8001b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001ba4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ba8:	4413      	add	r3, r2
 8001baa:	222d      	movs	r2, #45	; 0x2d
 8001bac:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001bb0:	e01c      	b.n	8001bec <_ftoa+0x48c>
    }
    else if (flags & FLAGS_PLUS) {
 8001bb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d009      	beq.n	8001bd0 <_ftoa+0x470>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001bc2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bc6:	4413      	add	r3, r2
 8001bc8:	222b      	movs	r2, #43	; 0x2b
 8001bca:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001bce:	e00d      	b.n	8001bec <_ftoa+0x48c>
    }
    else if (flags & FLAGS_SPACE) {
 8001bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d008      	beq.n	8001bec <_ftoa+0x48c>
      buf[len++] = ' ';
 8001bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001be0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001be4:	4413      	add	r3, r2
 8001be6:	2220      	movs	r2, #32
 8001be8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bee:	9303      	str	r3, [sp, #12]
 8001bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	f107 0318 	add.w	r3, r7, #24
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	6939      	ldr	r1, [r7, #16]
 8001c04:	6978      	ldr	r0, [r7, #20]
 8001c06:	f7ff fba9 	bl	800135c <_out_rev>
 8001c0a:	4603      	mov	r3, r0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3764      	adds	r7, #100	; 0x64
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}
 8001c14:	cccccccd 	.word	0xcccccccd
 8001c18:	66666667 	.word	0x66666667
 8001c1c:	00000000 	.word	0x00000000

08001c20 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c24:	b09d      	sub	sp, #116	; 0x74
 8001c26:	af06      	add	r7, sp, #24
 8001c28:	61f8      	str	r0, [r7, #28]
 8001c2a:	61b9      	str	r1, [r7, #24]
 8001c2c:	617a      	str	r2, [r7, #20]
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8001c34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c3c:	f7fe fef4 	bl	8000a28 <__aeabi_dcmpeq>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d014      	beq.n	8001c70 <_etoa+0x50>
 8001c46:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4a:	4bc3      	ldr	r3, [pc, #780]	; (8001f58 <_etoa+0x338>)
 8001c4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c50:	f7fe ff12 	bl	8000a78 <__aeabi_dcmpgt>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10a      	bne.n	8001c70 <_etoa+0x50>
 8001c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001c62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c66:	f7fe fee9 	bl	8000a3c <__aeabi_dcmplt>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d012      	beq.n	8001c96 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c74:	9302      	str	r3, [sp, #8]
 8001c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	ed97 0b02 	vldr	d0, [r7, #8]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	69b9      	ldr	r1, [r7, #24]
 8001c8c:	69f8      	ldr	r0, [r7, #28]
 8001c8e:	f7ff fd67 	bl	8001760 <_ftoa>
 8001c92:	4603      	mov	r3, r0
 8001c94:	e245      	b.n	8002122 <_etoa+0x502>
  }

  // determine the sign
  const bool negative = value < 0;
 8001c96:	2301      	movs	r3, #1
 8001c98:	461e      	mov	r6, r3
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ca6:	f7fe fec9 	bl	8000a3c <__aeabi_dcmplt>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <_etoa+0x94>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	461e      	mov	r6, r3
 8001cb4:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8001cb8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <_etoa+0xac>
    value = -value;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001cca:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8001ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001cd8:	2306      	movs	r3, #6
 8001cda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8001cde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ce2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8001ce6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	0d0a      	lsrs	r2, r1, #20
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cfc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8001d00:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8001d02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d06:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0a:	4994      	ldr	r1, [pc, #592]	; (8001f5c <_etoa+0x33c>)
 8001d0c:	ea02 0400 	and.w	r4, r2, r0
 8001d10:	ea03 0501 	and.w	r5, r3, r1
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	4b91      	ldr	r3, [pc, #580]	; (8001f60 <_etoa+0x340>)
 8001d1a:	ea44 0802 	orr.w	r8, r4, r2
 8001d1e:	ea45 0903 	orr.w	r9, r5, r3
 8001d22:	e9c7 8908 	strd	r8, r9, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8001d26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001d28:	f7fe fbac 	bl	8000484 <__aeabi_i2d>
 8001d2c:	a37e      	add	r3, pc, #504	; (adr r3, 8001f28 <_etoa+0x308>)
 8001d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d32:	f7fe fc11 	bl	8000558 <__aeabi_dmul>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	a37c      	add	r3, pc, #496	; (adr r3, 8001f30 <_etoa+0x310>)
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	f7fe fa52 	bl	80001ec <__adddf3>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4614      	mov	r4, r2
 8001d4e:	461d      	mov	r5, r3
 8001d50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	4b82      	ldr	r3, [pc, #520]	; (8001f64 <_etoa+0x344>)
 8001d5a:	f7fe fa45 	bl	80001e8 <__aeabi_dsub>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	a374      	add	r3, pc, #464	; (adr r3, 8001f38 <_etoa+0x318>)
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	f7fe fbf4 	bl	8000558 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4620      	mov	r0, r4
 8001d76:	4629      	mov	r1, r5
 8001d78:	f7fe fa38 	bl	80001ec <__adddf3>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	f7fe fe82 	bl	8000a8c <__aeabi_d2iz>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8001d8c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001d8e:	f7fe fb79 	bl	8000484 <__aeabi_i2d>
 8001d92:	a36b      	add	r3, pc, #428	; (adr r3, 8001f40 <_etoa+0x320>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	f7fe fbde 	bl	8000558 <__aeabi_dmul>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	4b6f      	ldr	r3, [pc, #444]	; (8001f68 <_etoa+0x348>)
 8001daa:	f7fe fa1f 	bl	80001ec <__adddf3>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	f7fe fe69 	bl	8000a8c <__aeabi_d2iz>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8001dbe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001dc0:	f7fe fb60 	bl	8000484 <__aeabi_i2d>
 8001dc4:	a360      	add	r3, pc, #384	; (adr r3, 8001f48 <_etoa+0x328>)
 8001dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dca:	f7fe fbc5 	bl	8000558 <__aeabi_dmul>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4614      	mov	r4, r2
 8001dd4:	461d      	mov	r5, r3
 8001dd6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001dd8:	f7fe fb54 	bl	8000484 <__aeabi_i2d>
 8001ddc:	a35c      	add	r3, pc, #368	; (adr r3, 8001f50 <_etoa+0x330>)
 8001dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de2:	f7fe fbb9 	bl	8000558 <__aeabi_dmul>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4620      	mov	r0, r4
 8001dec:	4629      	mov	r1, r5
 8001dee:	f7fe f9fb 	bl	80001e8 <__aeabi_dsub>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 8001dfa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001dfe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e02:	f7fe fba9 	bl	8000558 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8001e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e10:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001e14:	4618      	mov	r0, r3
 8001e16:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	0503      	lsls	r3, r0, #20
 8001e24:	2200      	movs	r2, #0
 8001e26:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8001e2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e2e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	f7fe f9d9 	bl	80001ec <__adddf3>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4690      	mov	r8, r2
 8001e40:	4699      	mov	r9, r3
 8001e42:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e46:	f04f 0000 	mov.w	r0, #0
 8001e4a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e4e:	f7fe f9cb 	bl	80001e8 <__aeabi_dsub>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4692      	mov	sl, r2
 8001e58:	469b      	mov	fp, r3
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	4b43      	ldr	r3, [pc, #268]	; (8001f6c <_etoa+0x34c>)
 8001e60:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e64:	f7fe fca2 	bl	80007ac <__aeabi_ddiv>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	4b3e      	ldr	r3, [pc, #248]	; (8001f70 <_etoa+0x350>)
 8001e76:	f7fe f9b9 	bl	80001ec <__adddf3>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e82:	f7fe fc93 	bl	80007ac <__aeabi_ddiv>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <_etoa+0x354>)
 8001e94:	f7fe f9aa 	bl	80001ec <__adddf3>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001ea0:	f7fe fc84 	bl	80007ac <__aeabi_ddiv>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4650      	mov	r0, sl
 8001eaa:	4659      	mov	r1, fp
 8001eac:	f7fe f99e 	bl	80001ec <__adddf3>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4640      	mov	r0, r8
 8001eb6:	4649      	mov	r1, r9
 8001eb8:	f7fe fc78 	bl	80007ac <__aeabi_ddiv>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <_etoa+0x340>)
 8001eca:	f7fe f98f 	bl	80001ec <__adddf3>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	4629      	mov	r1, r5
 8001ed6:	f7fe fb3f 	bl	8000558 <__aeabi_dmul>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8001ee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ee6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001eea:	f7fe fda7 	bl	8000a3c <__aeabi_dcmplt>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00d      	beq.n	8001f10 <_etoa+0x2f0>
    expval--;
 8001ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8001efa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <_etoa+0x350>)
 8001f04:	f7fe fc52 	bl	80007ac <__aeabi_ddiv>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8001f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f12:	2b63      	cmp	r3, #99	; 0x63
 8001f14:	dc30      	bgt.n	8001f78 <_etoa+0x358>
 8001f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f18:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001f1c:	db2c      	blt.n	8001f78 <_etoa+0x358>
 8001f1e:	2304      	movs	r3, #4
 8001f20:	e02b      	b.n	8001f7a <_etoa+0x35a>
 8001f22:	bf00      	nop
 8001f24:	f3af 8000 	nop.w
 8001f28:	509f79fb 	.word	0x509f79fb
 8001f2c:	3fd34413 	.word	0x3fd34413
 8001f30:	8b60c8b3 	.word	0x8b60c8b3
 8001f34:	3fc68a28 	.word	0x3fc68a28
 8001f38:	636f4361 	.word	0x636f4361
 8001f3c:	3fd287a7 	.word	0x3fd287a7
 8001f40:	0979a371 	.word	0x0979a371
 8001f44:	400a934f 	.word	0x400a934f
 8001f48:	bbb55516 	.word	0xbbb55516
 8001f4c:	40026bb1 	.word	0x40026bb1
 8001f50:	fefa39ef 	.word	0xfefa39ef
 8001f54:	3fe62e42 	.word	0x3fe62e42
 8001f58:	7fefffff 	.word	0x7fefffff
 8001f5c:	000fffff 	.word	0x000fffff
 8001f60:	3ff00000 	.word	0x3ff00000
 8001f64:	3ff80000 	.word	0x3ff80000
 8001f68:	3fe00000 	.word	0x3fe00000
 8001f6c:	402c0000 	.word	0x402c0000
 8001f70:	40240000 	.word	0x40240000
 8001f74:	40180000 	.word	0x40180000
 8001f78:	2305      	movs	r3, #5
 8001f7a:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8001f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d03d      	beq.n	8002004 <_etoa+0x3e4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8001f88:	a369      	add	r3, pc, #420	; (adr r3, 8002130 <_etoa+0x510>)
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f92:	f7fe fd67 	bl	8000a64 <__aeabi_dcmpge>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d024      	beq.n	8001fe6 <_etoa+0x3c6>
 8001f9c:	a366      	add	r3, pc, #408	; (adr r3, 8002138 <_etoa+0x518>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fa6:	f7fe fd49 	bl	8000a3c <__aeabi_dcmplt>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01a      	beq.n	8001fe6 <_etoa+0x3c6>
      if ((int)prec > expval) {
 8001fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	da07      	bge.n	8001fca <_etoa+0x3aa>
        prec = (unsigned)((int)prec - expval - 1);
 8001fba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001fc8:	e002      	b.n	8001fd0 <_etoa+0x3b0>
      }
      else {
        prec = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8001fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8001fe4:	e00e      	b.n	8002004 <_etoa+0x3e4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8001fe6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00a      	beq.n	8002004 <_etoa+0x3e4>
 8001fee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d004      	beq.n	8002004 <_etoa+0x3e4>
        --prec;
 8001ffa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ffe:	3b01      	subs	r3, #1
 8002000:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002008:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 800200a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800200e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002010:	429a      	cmp	r2, r3
 8002012:	d904      	bls.n	800201e <_etoa+0x3fe>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002014:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800201c:	e001      	b.n	8002022 <_etoa+0x402>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002022:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d004      	beq.n	8002038 <_etoa+0x418>
 800202e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <_etoa+0x418>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8002038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203a:	2b00      	cmp	r3, #0
 800203c:	d009      	beq.n	8002052 <_etoa+0x432>
    value /= conv.F;
 800203e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002042:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002046:	f7fe fbb1 	bl	80007ac <__aeabi_ddiv>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002056:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800205a:	2b00      	cmp	r3, #0
 800205c:	d006      	beq.n	800206c <_etoa+0x44c>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	e003      	b.n	8002074 <_etoa+0x454>
 800206c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002070:	ed87 7b00 	vstr	d7, [r7]
 8002074:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002078:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800207c:	9302      	str	r3, [sp, #8]
 800207e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	ed97 0b00 	vldr	d0, [r7]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	69b9      	ldr	r1, [r7, #24]
 8002092:	69f8      	ldr	r0, [r7, #28]
 8002094:	f7ff fb64 	bl	8001760 <_ftoa>
 8002098:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 800209a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800209c:	2b00      	cmp	r3, #0
 800209e:	d03f      	beq.n	8002120 <_etoa+0x500>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80020a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <_etoa+0x490>
 80020ac:	2045      	movs	r0, #69	; 0x45
 80020ae:	e000      	b.n	80020b2 <_etoa+0x492>
 80020b0:	2065      	movs	r0, #101	; 0x65
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	1c53      	adds	r3, r2, #1
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	69fc      	ldr	r4, [r7, #28]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	69b9      	ldr	r1, [r7, #24]
 80020be:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80020c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bfb8      	it	lt
 80020c6:	425b      	neglt	r3, r3
 80020c8:	4618      	mov	r0, r3
 80020ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020cc:	0fdb      	lsrs	r3, r3, #31
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80020d2:	3a01      	subs	r2, #1
 80020d4:	2105      	movs	r1, #5
 80020d6:	9105      	str	r1, [sp, #20]
 80020d8:	9204      	str	r2, [sp, #16]
 80020da:	2200      	movs	r2, #0
 80020dc:	9203      	str	r2, [sp, #12]
 80020de:	220a      	movs	r2, #10
 80020e0:	9202      	str	r2, [sp, #8]
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	9000      	str	r0, [sp, #0]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	69b9      	ldr	r1, [r7, #24]
 80020ec:	69f8      	ldr	r0, [r7, #28]
 80020ee:	f7ff fa61 	bl	80015b4 <_ntoa_long>
 80020f2:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80020f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00f      	beq.n	8002120 <_etoa+0x500>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8002100:	e007      	b.n	8002112 <_etoa+0x4f2>
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	1c53      	adds	r3, r2, #1
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	69fc      	ldr	r4, [r7, #28]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	69b9      	ldr	r1, [r7, #24]
 800210e:	2020      	movs	r0, #32
 8002110:	47a0      	blx	r4
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800211c:	429a      	cmp	r2, r3
 800211e:	d8f0      	bhi.n	8002102 <_etoa+0x4e2>
    }
  }
  return idx;
 8002120:	697b      	ldr	r3, [r7, #20]
}
 8002122:	4618      	mov	r0, r3
 8002124:	375c      	adds	r7, #92	; 0x5c
 8002126:	46bd      	mov	sp, r7
 8002128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800212c:	f3af 8000 	nop.w
 8002130:	eb1c432d 	.word	0xeb1c432d
 8002134:	3f1a36e2 	.word	0x3f1a36e2
 8002138:	00000000 	.word	0x00000000
 800213c:	412e8480 	.word	0x412e8480

08002140 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002140:	b5b0      	push	{r4, r5, r7, lr}
 8002142:	b0a0      	sub	sp, #128	; 0x80
 8002144:	af0a      	add	r7, sp, #40	; 0x28
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	f040 8494 	bne.w	8002a82 <_vsnprintf+0x942>
    // use null output function
    out = _out_null;
 800215a:	4ba0      	ldr	r3, [pc, #640]	; (80023dc <_vsnprintf+0x29c>)
 800215c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800215e:	f000 bc90 	b.w	8002a82 <_vsnprintf+0x942>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b25      	cmp	r3, #37	; 0x25
 8002168:	d00d      	beq.n	8002186 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	7818      	ldrb	r0, [r3, #0]
 800216e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002170:	1c53      	adds	r3, r2, #1
 8002172:	647b      	str	r3, [r7, #68]	; 0x44
 8002174:	68fc      	ldr	r4, [r7, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	47a0      	blx	r4
      format++;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	3301      	adds	r3, #1
 8002180:	603b      	str	r3, [r7, #0]
      continue;
 8002182:	f000 bc7e 	b.w	8002a82 <_vsnprintf+0x942>
    }
    else {
      // yes, evaluate it
      format++;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	3b20      	subs	r3, #32
 8002196:	2b10      	cmp	r3, #16
 8002198:	d856      	bhi.n	8002248 <_vsnprintf+0x108>
 800219a:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <_vsnprintf+0x60>)
 800219c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a0:	08002221 	.word	0x08002221
 80021a4:	08002249 	.word	0x08002249
 80021a8:	08002249 	.word	0x08002249
 80021ac:	08002235 	.word	0x08002235
 80021b0:	08002249 	.word	0x08002249
 80021b4:	08002249 	.word	0x08002249
 80021b8:	08002249 	.word	0x08002249
 80021bc:	08002249 	.word	0x08002249
 80021c0:	08002249 	.word	0x08002249
 80021c4:	08002249 	.word	0x08002249
 80021c8:	08002249 	.word	0x08002249
 80021cc:	0800220d 	.word	0x0800220d
 80021d0:	08002249 	.word	0x08002249
 80021d4:	080021f9 	.word	0x080021f9
 80021d8:	08002249 	.word	0x08002249
 80021dc:	08002249 	.word	0x08002249
 80021e0:	080021e5 	.word	0x080021e5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80021e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	657b      	str	r3, [r7, #84]	; 0x54
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	3301      	adds	r3, #1
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	2301      	movs	r3, #1
 80021f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80021f6:	e02a      	b.n	800224e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80021f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	3301      	adds	r3, #1
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	2301      	movs	r3, #1
 8002208:	64bb      	str	r3, [r7, #72]	; 0x48
 800220a:	e020      	b.n	800224e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800220c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	657b      	str	r3, [r7, #84]	; 0x54
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	3301      	adds	r3, #1
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	2301      	movs	r3, #1
 800221c:	64bb      	str	r3, [r7, #72]	; 0x48
 800221e:	e016      	b.n	800224e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002222:	f043 0308 	orr.w	r3, r3, #8
 8002226:	657b      	str	r3, [r7, #84]	; 0x54
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	3301      	adds	r3, #1
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	2301      	movs	r3, #1
 8002230:	64bb      	str	r3, [r7, #72]	; 0x48
 8002232:	e00c      	b.n	800224e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002236:	f043 0310 	orr.w	r3, r3, #16
 800223a:	657b      	str	r3, [r7, #84]	; 0x54
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	3301      	adds	r3, #1
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	2301      	movs	r3, #1
 8002244:	64bb      	str	r3, [r7, #72]	; 0x48
 8002246:	e002      	b.n	800224e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8002248:	2300      	movs	r3, #0
 800224a:	64bb      	str	r3, [r7, #72]	; 0x48
 800224c:	bf00      	nop
      }
    } while (n);
 800224e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002250:	2b00      	cmp	r3, #0
 8002252:	d19d      	bne.n	8002190 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff f842 	bl	80012e6 <_is_digit>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <_vsnprintf+0x134>
      width = _atoi(&format);
 8002268:	463b      	mov	r3, r7
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f852 	bl	8001314 <_atoi>
 8002270:	6538      	str	r0, [r7, #80]	; 0x50
 8002272:	e018      	b.n	80022a6 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b2a      	cmp	r3, #42	; 0x2a
 800227a:	d114      	bne.n	80022a6 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800227c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800227e:	1d1a      	adds	r2, r3, #4
 8002280:	66ba      	str	r2, [r7, #104]	; 0x68
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8002286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002288:	2b00      	cmp	r3, #0
 800228a:	da07      	bge.n	800229c <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800228c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800228e:	f043 0302 	orr.w	r3, r3, #2
 8002292:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8002294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002296:	425b      	negs	r3, r3
 8002298:	653b      	str	r3, [r7, #80]	; 0x50
 800229a:	e001      	b.n	80022a0 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800229c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229e:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b2e      	cmp	r3, #46	; 0x2e
 80022b0:	d124      	bne.n	80022fc <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 80022b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022b8:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff f80e 	bl	80012e6 <_is_digit>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <_vsnprintf+0x19c>
        precision = _atoi(&format);
 80022d0:	463b      	mov	r3, r7
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff f81e 	bl	8001314 <_atoi>
 80022d8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80022da:	e00f      	b.n	80022fc <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b2a      	cmp	r3, #42	; 0x2a
 80022e2:	d10b      	bne.n	80022fc <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 80022e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022e6:	1d1a      	adds	r2, r3, #4
 80022e8:	66ba      	str	r2, [r7, #104]	; 0x68
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80022ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80022f4:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	3b68      	subs	r3, #104	; 0x68
 8002302:	2b12      	cmp	r3, #18
 8002304:	d866      	bhi.n	80023d4 <_vsnprintf+0x294>
 8002306:	a201      	add	r2, pc, #4	; (adr r2, 800230c <_vsnprintf+0x1cc>)
 8002308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230c:	0800237f 	.word	0x0800237f
 8002310:	080023d5 	.word	0x080023d5
 8002314:	080023b5 	.word	0x080023b5
 8002318:	080023d5 	.word	0x080023d5
 800231c:	08002359 	.word	0x08002359
 8002320:	080023d5 	.word	0x080023d5
 8002324:	080023d5 	.word	0x080023d5
 8002328:	080023d5 	.word	0x080023d5
 800232c:	080023d5 	.word	0x080023d5
 8002330:	080023d5 	.word	0x080023d5
 8002334:	080023d5 	.word	0x080023d5
 8002338:	080023d5 	.word	0x080023d5
 800233c:	080023a5 	.word	0x080023a5
 8002340:	080023d5 	.word	0x080023d5
 8002344:	080023d5 	.word	0x080023d5
 8002348:	080023d5 	.word	0x080023d5
 800234c:	080023d5 	.word	0x080023d5
 8002350:	080023d5 	.word	0x080023d5
 8002354:	080023c5 	.word	0x080023c5
      case 'l' :
        flags |= FLAGS_LONG;
 8002358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800235a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b6c      	cmp	r3, #108	; 0x6c
 800236c:	d134      	bne.n	80023d8 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800236e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002370:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002374:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	3301      	adds	r3, #1
 800237a:	603b      	str	r3, [r7, #0]
        }
        break;
 800237c:	e02c      	b.n	80023d8 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800237e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002384:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	3301      	adds	r3, #1
 800238a:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b68      	cmp	r3, #104	; 0x68
 8002392:	d125      	bne.n	80023e0 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8002394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800239a:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	3301      	adds	r3, #1
 80023a0:	603b      	str	r3, [r7, #0]
        }
        break;
 80023a2:	e01d      	b.n	80023e0 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80023a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023aa:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	3301      	adds	r3, #1
 80023b0:	603b      	str	r3, [r7, #0]
        break;
 80023b2:	e016      	b.n	80023e2 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80023b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ba:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	3301      	adds	r3, #1
 80023c0:	603b      	str	r3, [r7, #0]
        break;
 80023c2:	e00e      	b.n	80023e2 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80023c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ca:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	3301      	adds	r3, #1
 80023d0:	603b      	str	r3, [r7, #0]
        break;
 80023d2:	e006      	b.n	80023e2 <_vsnprintf+0x2a2>
      default :
        break;
 80023d4:	bf00      	nop
 80023d6:	e004      	b.n	80023e2 <_vsnprintf+0x2a2>
        break;
 80023d8:	bf00      	nop
 80023da:	e002      	b.n	80023e2 <_vsnprintf+0x2a2>
 80023dc:	0800126b 	.word	0x0800126b
        break;
 80023e0:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	3b25      	subs	r3, #37	; 0x25
 80023e8:	2b53      	cmp	r3, #83	; 0x53
 80023ea:	f200 833d 	bhi.w	8002a68 <_vsnprintf+0x928>
 80023ee:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <_vsnprintf+0x2b4>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	08002a51 	.word	0x08002a51
 80023f8:	08002a69 	.word	0x08002a69
 80023fc:	08002a69 	.word	0x08002a69
 8002400:	08002a69 	.word	0x08002a69
 8002404:	08002a69 	.word	0x08002a69
 8002408:	08002a69 	.word	0x08002a69
 800240c:	08002a69 	.word	0x08002a69
 8002410:	08002a69 	.word	0x08002a69
 8002414:	08002a69 	.word	0x08002a69
 8002418:	08002a69 	.word	0x08002a69
 800241c:	08002a69 	.word	0x08002a69
 8002420:	08002a69 	.word	0x08002a69
 8002424:	08002a69 	.word	0x08002a69
 8002428:	08002a69 	.word	0x08002a69
 800242c:	08002a69 	.word	0x08002a69
 8002430:	08002a69 	.word	0x08002a69
 8002434:	08002a69 	.word	0x08002a69
 8002438:	08002a69 	.word	0x08002a69
 800243c:	08002a69 	.word	0x08002a69
 8002440:	08002a69 	.word	0x08002a69
 8002444:	08002a69 	.word	0x08002a69
 8002448:	08002a69 	.word	0x08002a69
 800244c:	08002a69 	.word	0x08002a69
 8002450:	08002a69 	.word	0x08002a69
 8002454:	08002a69 	.word	0x08002a69
 8002458:	08002a69 	.word	0x08002a69
 800245c:	08002a69 	.word	0x08002a69
 8002460:	08002a69 	.word	0x08002a69
 8002464:	08002a69 	.word	0x08002a69
 8002468:	08002a69 	.word	0x08002a69
 800246c:	08002a69 	.word	0x08002a69
 8002470:	08002a69 	.word	0x08002a69
 8002474:	0800281f 	.word	0x0800281f
 8002478:	080027d3 	.word	0x080027d3
 800247c:	0800281f 	.word	0x0800281f
 8002480:	08002a69 	.word	0x08002a69
 8002484:	08002a69 	.word	0x08002a69
 8002488:	08002a69 	.word	0x08002a69
 800248c:	08002a69 	.word	0x08002a69
 8002490:	08002a69 	.word	0x08002a69
 8002494:	08002a69 	.word	0x08002a69
 8002498:	08002a69 	.word	0x08002a69
 800249c:	08002a69 	.word	0x08002a69
 80024a0:	08002a69 	.word	0x08002a69
 80024a4:	08002a69 	.word	0x08002a69
 80024a8:	08002a69 	.word	0x08002a69
 80024ac:	08002a69 	.word	0x08002a69
 80024b0:	08002a69 	.word	0x08002a69
 80024b4:	08002a69 	.word	0x08002a69
 80024b8:	08002a69 	.word	0x08002a69
 80024bc:	08002a69 	.word	0x08002a69
 80024c0:	08002545 	.word	0x08002545
 80024c4:	08002a69 	.word	0x08002a69
 80024c8:	08002a69 	.word	0x08002a69
 80024cc:	08002a69 	.word	0x08002a69
 80024d0:	08002a69 	.word	0x08002a69
 80024d4:	08002a69 	.word	0x08002a69
 80024d8:	08002a69 	.word	0x08002a69
 80024dc:	08002a69 	.word	0x08002a69
 80024e0:	08002a69 	.word	0x08002a69
 80024e4:	08002a69 	.word	0x08002a69
 80024e8:	08002545 	.word	0x08002545
 80024ec:	0800288b 	.word	0x0800288b
 80024f0:	08002545 	.word	0x08002545
 80024f4:	0800281f 	.word	0x0800281f
 80024f8:	080027d3 	.word	0x080027d3
 80024fc:	0800281f 	.word	0x0800281f
 8002500:	08002a69 	.word	0x08002a69
 8002504:	08002545 	.word	0x08002545
 8002508:	08002a69 	.word	0x08002a69
 800250c:	08002a69 	.word	0x08002a69
 8002510:	08002a69 	.word	0x08002a69
 8002514:	08002a69 	.word	0x08002a69
 8002518:	08002a69 	.word	0x08002a69
 800251c:	08002545 	.word	0x08002545
 8002520:	080029c3 	.word	0x080029c3
 8002524:	08002a69 	.word	0x08002a69
 8002528:	08002a69 	.word	0x08002a69
 800252c:	080028ff 	.word	0x080028ff
 8002530:	08002a69 	.word	0x08002a69
 8002534:	08002545 	.word	0x08002545
 8002538:	08002a69 	.word	0x08002a69
 800253c:	08002a69 	.word	0x08002a69
 8002540:	08002545 	.word	0x08002545
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b78      	cmp	r3, #120	; 0x78
 800254a:	d003      	beq.n	8002554 <_vsnprintf+0x414>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b58      	cmp	r3, #88	; 0x58
 8002552:	d102      	bne.n	800255a <_vsnprintf+0x41a>
          base = 16U;
 8002554:	2310      	movs	r3, #16
 8002556:	643b      	str	r3, [r7, #64]	; 0x40
 8002558:	e013      	b.n	8002582 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b6f      	cmp	r3, #111	; 0x6f
 8002560:	d102      	bne.n	8002568 <_vsnprintf+0x428>
          base =  8U;
 8002562:	2308      	movs	r3, #8
 8002564:	643b      	str	r3, [r7, #64]	; 0x40
 8002566:	e00c      	b.n	8002582 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b62      	cmp	r3, #98	; 0x62
 800256e:	d102      	bne.n	8002576 <_vsnprintf+0x436>
          base =  2U;
 8002570:	2302      	movs	r3, #2
 8002572:	643b      	str	r3, [r7, #64]	; 0x40
 8002574:	e005      	b.n	8002582 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8002576:	230a      	movs	r3, #10
 8002578:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800257a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257c:	f023 0310 	bic.w	r3, r3, #16
 8002580:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b58      	cmp	r3, #88	; 0x58
 8002588:	d103      	bne.n	8002592 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800258a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258c:	f043 0320 	orr.w	r3, r3, #32
 8002590:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b69      	cmp	r3, #105	; 0x69
 8002598:	d007      	beq.n	80025aa <_vsnprintf+0x46a>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b64      	cmp	r3, #100	; 0x64
 80025a0:	d003      	beq.n	80025aa <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80025a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a4:	f023 030c 	bic.w	r3, r3, #12
 80025a8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80025aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 80025b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b69      	cmp	r3, #105	; 0x69
 80025c2:	d004      	beq.n	80025ce <_vsnprintf+0x48e>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b64      	cmp	r3, #100	; 0x64
 80025ca:	f040 808e 	bne.w	80026ea <_vsnprintf+0x5aa>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80025ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d02f      	beq.n	8002638 <_vsnprintf+0x4f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80025d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025da:	3307      	adds	r3, #7
 80025dc:	f023 0307 	bic.w	r3, r3, #7
 80025e0:	f103 0208 	add.w	r2, r3, #8
 80025e4:	66ba      	str	r2, [r7, #104]	; 0x68
 80025e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80025ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025f2:	2a00      	cmp	r2, #0
 80025f4:	f173 0100 	sbcs.w	r1, r3, #0
 80025f8:	da02      	bge.n	8002600 <_vsnprintf+0x4c0>
 80025fa:	4252      	negs	r2, r2
 80025fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	0fdb      	lsrs	r3, r3, #31
 8002608:	b2dc      	uxtb	r4, r3
 800260a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800260c:	461a      	mov	r2, r3
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8002614:	9508      	str	r5, [sp, #32]
 8002616:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8002618:	9507      	str	r5, [sp, #28]
 800261a:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800261c:	9506      	str	r5, [sp, #24]
 800261e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002622:	9402      	str	r4, [sp, #8]
 8002624:	e9cd 0100 	strd	r0, r1, [sp]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f7ff f827 	bl	8001682 <_ntoa_long_long>
 8002634:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8002636:	e0c8      	b.n	80027ca <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d01e      	beq.n	8002680 <_vsnprintf+0x540>
            const long value = va_arg(va, long);
 8002642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002644:	1d1a      	adds	r2, r3, #4
 8002646:	66ba      	str	r2, [r7, #104]	; 0x68
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	bfb8      	it	lt
 8002652:	425b      	neglt	r3, r3
 8002654:	4619      	mov	r1, r3
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	0fdb      	lsrs	r3, r3, #31
 800265a:	b2db      	uxtb	r3, r3
 800265c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800265e:	9205      	str	r2, [sp, #20]
 8002660:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002662:	9204      	str	r2, [sp, #16]
 8002664:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002666:	9203      	str	r2, [sp, #12]
 8002668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800266a:	9202      	str	r2, [sp, #8]
 800266c:	9301      	str	r3, [sp, #4]
 800266e:	9100      	str	r1, [sp, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f7fe ff9c 	bl	80015b4 <_ntoa_long>
 800267c:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800267e:	e0a4      	b.n	80027ca <_vsnprintf+0x68a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <_vsnprintf+0x556>
 800268a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800268c:	1d1a      	adds	r2, r3, #4
 800268e:	66ba      	str	r2, [r7, #104]	; 0x68
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	e00e      	b.n	80026b4 <_vsnprintf+0x574>
 8002696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <_vsnprintf+0x56c>
 80026a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026a2:	1d1a      	adds	r2, r3, #4
 80026a4:	66ba      	str	r2, [r7, #104]	; 0x68
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	b21b      	sxth	r3, r3
 80026aa:	e003      	b.n	80026b4 <_vsnprintf+0x574>
 80026ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ae:	1d1a      	adds	r2, r3, #4
 80026b0:	66ba      	str	r2, [r7, #104]	; 0x68
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bfb8      	it	lt
 80026bc:	425b      	neglt	r3, r3
 80026be:	4619      	mov	r1, r3
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	0fdb      	lsrs	r3, r3, #31
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026c8:	9205      	str	r2, [sp, #20]
 80026ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026cc:	9204      	str	r2, [sp, #16]
 80026ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026d0:	9203      	str	r2, [sp, #12]
 80026d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026d4:	9202      	str	r2, [sp, #8]
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	9100      	str	r1, [sp, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026de:	68b9      	ldr	r1, [r7, #8]
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7fe ff67 	bl	80015b4 <_ntoa_long>
 80026e6:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80026e8:	e06f      	b.n	80027ca <_vsnprintf+0x68a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80026ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d020      	beq.n	8002736 <_vsnprintf+0x5f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80026f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026f6:	3307      	adds	r3, #7
 80026f8:	f023 0307 	bic.w	r3, r3, #7
 80026fc:	f103 0208 	add.w	r2, r3, #8
 8002700:	66ba      	str	r2, [r7, #104]	; 0x68
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002708:	4608      	mov	r0, r1
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8002710:	9408      	str	r4, [sp, #32]
 8002712:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002714:	9407      	str	r4, [sp, #28]
 8002716:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002718:	9406      	str	r4, [sp, #24]
 800271a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800271e:	2100      	movs	r1, #0
 8002720:	9102      	str	r1, [sp, #8]
 8002722:	e9cd 2300 	strd	r2, r3, [sp]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f7fe ffa8 	bl	8001682 <_ntoa_long_long>
 8002732:	6478      	str	r0, [r7, #68]	; 0x44
 8002734:	e049      	b.n	80027ca <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273c:	2b00      	cmp	r3, #0
 800273e:	d016      	beq.n	800276e <_vsnprintf+0x62e>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8002740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002742:	1d1a      	adds	r2, r3, #4
 8002744:	66ba      	str	r2, [r7, #104]	; 0x68
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800274a:	9205      	str	r2, [sp, #20]
 800274c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800274e:	9204      	str	r2, [sp, #16]
 8002750:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002752:	9203      	str	r2, [sp, #12]
 8002754:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002756:	9202      	str	r2, [sp, #8]
 8002758:	2200      	movs	r2, #0
 800275a:	9201      	str	r2, [sp, #4]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f7fe ff25 	bl	80015b4 <_ntoa_long>
 800276a:	6478      	str	r0, [r7, #68]	; 0x44
 800276c:	e02d      	b.n	80027ca <_vsnprintf+0x68a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800276e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <_vsnprintf+0x644>
 8002778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800277a:	1d1a      	adds	r2, r3, #4
 800277c:	66ba      	str	r2, [r7, #104]	; 0x68
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	e00e      	b.n	80027a2 <_vsnprintf+0x662>
 8002784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <_vsnprintf+0x65a>
 800278e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002790:	1d1a      	adds	r2, r3, #4
 8002792:	66ba      	str	r2, [r7, #104]	; 0x68
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	b29b      	uxth	r3, r3
 8002798:	e003      	b.n	80027a2 <_vsnprintf+0x662>
 800279a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800279c:	1d1a      	adds	r2, r3, #4
 800279e:	66ba      	str	r2, [r7, #104]	; 0x68
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80027a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a6:	9305      	str	r3, [sp, #20]
 80027a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027aa:	9304      	str	r3, [sp, #16]
 80027ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ae:	9303      	str	r3, [sp, #12]
 80027b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027b2:	9302      	str	r3, [sp, #8]
 80027b4:	2300      	movs	r3, #0
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f7fe fef6 	bl	80015b4 <_ntoa_long>
 80027c8:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	3301      	adds	r3, #1
 80027ce:	603b      	str	r3, [r7, #0]
        break;
 80027d0:	e157      	b.n	8002a82 <_vsnprintf+0x942>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b46      	cmp	r3, #70	; 0x46
 80027d8:	d103      	bne.n	80027e2 <_vsnprintf+0x6a2>
 80027da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027dc:	f043 0320 	orr.w	r3, r3, #32
 80027e0:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80027e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027e4:	3307      	adds	r3, #7
 80027e6:	f023 0307 	bic.w	r3, r3, #7
 80027ea:	f103 0208 	add.w	r2, r3, #8
 80027ee:	66ba      	str	r2, [r7, #104]	; 0x68
 80027f0:	ed93 7b00 	vldr	d7, [r3]
 80027f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f6:	9302      	str	r3, [sp, #8]
 80027f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	eeb0 0a47 	vmov.f32	s0, s14
 8002804:	eef0 0a67 	vmov.f32	s1, s15
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f7fe ffa6 	bl	8001760 <_ftoa>
 8002814:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	3301      	adds	r3, #1
 800281a:	603b      	str	r3, [r7, #0]
        break;
 800281c:	e131      	b.n	8002a82 <_vsnprintf+0x942>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b67      	cmp	r3, #103	; 0x67
 8002824:	d003      	beq.n	800282e <_vsnprintf+0x6ee>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b47      	cmp	r3, #71	; 0x47
 800282c:	d103      	bne.n	8002836 <_vsnprintf+0x6f6>
 800282e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002830:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002834:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b45      	cmp	r3, #69	; 0x45
 800283c:	d003      	beq.n	8002846 <_vsnprintf+0x706>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b47      	cmp	r3, #71	; 0x47
 8002844:	d103      	bne.n	800284e <_vsnprintf+0x70e>
 8002846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002848:	f043 0320 	orr.w	r3, r3, #32
 800284c:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800284e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002850:	3307      	adds	r3, #7
 8002852:	f023 0307 	bic.w	r3, r3, #7
 8002856:	f103 0208 	add.w	r2, r3, #8
 800285a:	66ba      	str	r2, [r7, #104]	; 0x68
 800285c:	ed93 7b00 	vldr	d7, [r3]
 8002860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002862:	9302      	str	r3, [sp, #8]
 8002864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	eeb0 0a47 	vmov.f32	s0, s14
 8002870:	eef0 0a67 	vmov.f32	s1, s15
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f7ff f9d0 	bl	8001c20 <_etoa>
 8002880:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	3301      	adds	r3, #1
 8002886:	603b      	str	r3, [r7, #0]
        break;
 8002888:	e0fb      	b.n	8002a82 <_vsnprintf+0x942>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800288a:	2301      	movs	r3, #1
 800288c:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800288e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10e      	bne.n	80028b6 <_vsnprintf+0x776>
          while (l++ < width) {
 8002898:	e007      	b.n	80028aa <_vsnprintf+0x76a>
            out(' ', buffer, idx++, maxlen);
 800289a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800289c:	1c53      	adds	r3, r2, #1
 800289e:	647b      	str	r3, [r7, #68]	; 0x44
 80028a0:	68fc      	ldr	r4, [r7, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68b9      	ldr	r1, [r7, #8]
 80028a6:	2020      	movs	r0, #32
 80028a8:	47a0      	blx	r4
          while (l++ < width) {
 80028aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d8f1      	bhi.n	800289a <_vsnprintf+0x75a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80028b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b8:	1d1a      	adds	r2, r3, #4
 80028ba:	66ba      	str	r2, [r7, #104]	; 0x68
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	b2d8      	uxtb	r0, r3
 80028c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028c2:	1c53      	adds	r3, r2, #1
 80028c4:	647b      	str	r3, [r7, #68]	; 0x44
 80028c6:	68fc      	ldr	r4, [r7, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80028ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00e      	beq.n	80028f6 <_vsnprintf+0x7b6>
          while (l++ < width) {
 80028d8:	e007      	b.n	80028ea <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 80028da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028dc:	1c53      	adds	r3, r2, #1
 80028de:	647b      	str	r3, [r7, #68]	; 0x44
 80028e0:	68fc      	ldr	r4, [r7, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	2020      	movs	r0, #32
 80028e8:	47a0      	blx	r4
          while (l++ < width) {
 80028ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d8f1      	bhi.n	80028da <_vsnprintf+0x79a>
          }
        }
        format++;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	603b      	str	r3, [r7, #0]
        break;
 80028fc:	e0c1      	b.n	8002a82 <_vsnprintf+0x942>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80028fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002900:	1d1a      	adds	r2, r3, #4
 8002902:	66ba      	str	r2, [r7, #104]	; 0x68
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8002908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <_vsnprintf+0x7d2>
 800290e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002910:	e001      	b.n	8002916 <_vsnprintf+0x7d6>
 8002912:	f04f 33ff 	mov.w	r3, #4294967295
 8002916:	4619      	mov	r1, r3
 8002918:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800291a:	f7fe fcc7 	bl	80012ac <_strnlen_s>
 800291e:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8002920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <_vsnprintf+0x7f6>
          l = (l < precision ? l : precision);
 800292a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800292c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800292e:	4293      	cmp	r3, r2
 8002930:	bf28      	it	cs
 8002932:	4613      	movcs	r3, r2
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8002936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d11a      	bne.n	8002976 <_vsnprintf+0x836>
          while (l++ < width) {
 8002940:	e007      	b.n	8002952 <_vsnprintf+0x812>
            out(' ', buffer, idx++, maxlen);
 8002942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002944:	1c53      	adds	r3, r2, #1
 8002946:	647b      	str	r3, [r7, #68]	; 0x44
 8002948:	68fc      	ldr	r4, [r7, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	2020      	movs	r0, #32
 8002950:	47a0      	blx	r4
          while (l++ < width) {
 8002952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	637a      	str	r2, [r7, #52]	; 0x34
 8002958:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800295a:	429a      	cmp	r2, r3
 800295c:	d8f1      	bhi.n	8002942 <_vsnprintf+0x802>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800295e:	e00a      	b.n	8002976 <_vsnprintf+0x836>
          out(*(p++), buffer, idx++, maxlen);
 8002960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	63ba      	str	r2, [r7, #56]	; 0x38
 8002966:	7818      	ldrb	r0, [r3, #0]
 8002968:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800296a:	1c53      	adds	r3, r2, #1
 800296c:	647b      	str	r3, [r7, #68]	; 0x44
 800296e:	68fc      	ldr	r4, [r7, #12]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <_vsnprintf+0x852>
 800297e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0eb      	beq.n	8002960 <_vsnprintf+0x820>
 8002988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800298a:	1e5a      	subs	r2, r3, #1
 800298c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e6      	bne.n	8002960 <_vsnprintf+0x820>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8002992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00e      	beq.n	80029ba <_vsnprintf+0x87a>
          while (l++ < width) {
 800299c:	e007      	b.n	80029ae <_vsnprintf+0x86e>
            out(' ', buffer, idx++, maxlen);
 800299e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029a0:	1c53      	adds	r3, r2, #1
 80029a2:	647b      	str	r3, [r7, #68]	; 0x44
 80029a4:	68fc      	ldr	r4, [r7, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	2020      	movs	r0, #32
 80029ac:	47a0      	blx	r4
          while (l++ < width) {
 80029ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	637a      	str	r2, [r7, #52]	; 0x34
 80029b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d8f1      	bhi.n	800299e <_vsnprintf+0x85e>
          }
        }
        format++;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	3301      	adds	r3, #1
 80029be:	603b      	str	r3, [r7, #0]
        break;
 80029c0:	e05f      	b.n	8002a82 <_vsnprintf+0x942>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80029c2:	2308      	movs	r3, #8
 80029c4:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80029c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80029cc:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80029ce:	2300      	movs	r3, #0
 80029d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 80029d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d01e      	beq.n	8002a1a <_vsnprintf+0x8da>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80029dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029de:	1d1a      	adds	r2, r3, #4
 80029e0:	66ba      	str	r2, [r7, #104]	; 0x68
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029ec:	9108      	str	r1, [sp, #32]
 80029ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80029f0:	9107      	str	r1, [sp, #28]
 80029f2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80029f4:	9106      	str	r1, [sp, #24]
 80029f6:	f04f 0010 	mov.w	r0, #16
 80029fa:	f04f 0100 	mov.w	r1, #0
 80029fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002a02:	2100      	movs	r1, #0
 8002a04:	9102      	str	r1, [sp, #8]
 8002a06:	e9cd 2300 	strd	r2, r3, [sp]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f7fe fe36 	bl	8001682 <_ntoa_long_long>
 8002a16:	6478      	str	r0, [r7, #68]	; 0x44
 8002a18:	e016      	b.n	8002a48 <_vsnprintf+0x908>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8002a1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a1c:	1d1a      	adds	r2, r3, #4
 8002a1e:	66ba      	str	r2, [r7, #104]	; 0x68
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a26:	9305      	str	r3, [sp, #20]
 8002a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a2a:	9304      	str	r3, [sp, #16]
 8002a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a2e:	9303      	str	r3, [sp, #12]
 8002a30:	2310      	movs	r3, #16
 8002a32:	9302      	str	r3, [sp, #8]
 8002a34:	2300      	movs	r3, #0
 8002a36:	9301      	str	r3, [sp, #4]
 8002a38:	9200      	str	r2, [sp, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a3e:	68b9      	ldr	r1, [r7, #8]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f7fe fdb7 	bl	80015b4 <_ntoa_long>
 8002a46:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	603b      	str	r3, [r7, #0]
        break;
 8002a4e:	e018      	b.n	8002a82 <_vsnprintf+0x942>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8002a50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a52:	1c53      	adds	r3, r2, #1
 8002a54:	647b      	str	r3, [r7, #68]	; 0x44
 8002a56:	68fc      	ldr	r4, [r7, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	2025      	movs	r0, #37	; 0x25
 8002a5e:	47a0      	blx	r4
        format++;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	603b      	str	r3, [r7, #0]
        break;
 8002a66:	e00c      	b.n	8002a82 <_vsnprintf+0x942>

      default :
        out(*format, buffer, idx++, maxlen);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	7818      	ldrb	r0, [r3, #0]
 8002a6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a6e:	1c53      	adds	r3, r2, #1
 8002a70:	647b      	str	r3, [r7, #68]	; 0x44
 8002a72:	68fc      	ldr	r4, [r7, #12]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	47a0      	blx	r4
        format++;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	603b      	str	r3, [r7, #0]
        break;
 8002a80:	bf00      	nop
  while (*format)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f47f ab6b 	bne.w	8002162 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8002a8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d302      	bcc.n	8002a9a <_vsnprintf+0x95a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	1e5a      	subs	r2, r3, #1
 8002a98:	e000      	b.n	8002a9c <_vsnprintf+0x95c>
 8002a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a9c:	68fc      	ldr	r4, [r7, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8002aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3758      	adds	r7, #88	; 0x58
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bdb0      	pop	{r4, r5, r7, pc}

08002ab0 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8002ab0:	b40f      	push	{r0, r1, r2, r3}
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b086      	sub	sp, #24
 8002ab6:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8002abe:	1d39      	adds	r1, r7, #4
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aca:	4806      	ldr	r0, [pc, #24]	; (8002ae4 <printf_+0x34>)
 8002acc:	f7ff fb38 	bl	8002140 <_vsnprintf>
 8002ad0:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ade:	b004      	add	sp, #16
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	08001287 	.word	0x08001287

08002ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <HAL_MspInit+0x4c>)
 8002af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af2:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <HAL_MspInit+0x4c>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6613      	str	r3, [r2, #96]	; 0x60
 8002afa:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <HAL_MspInit+0x4c>)
 8002afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_MspInit+0x4c>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <HAL_MspInit+0x4c>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6593      	str	r3, [r2, #88]	; 0x58
 8002b12:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <HAL_MspInit+0x4c>)
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	210f      	movs	r1, #15
 8002b22:	f06f 0001 	mvn.w	r0, #1
 8002b26:	f000 fab7 	bl	8003098 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000

08002b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08a      	sub	sp, #40	; 0x28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <HAL_UART_MspInit+0x7c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d128      	bne.n	8002bac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <HAL_UART_MspInit+0x80>)
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	4a16      	ldr	r2, [pc, #88]	; (8002bb8 <HAL_UART_MspInit+0x80>)
 8002b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b64:	6593      	str	r3, [r2, #88]	; 0x58
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <HAL_UART_MspInit+0x80>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_UART_MspInit+0x80>)
 8002b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b76:	4a10      	ldr	r2, [pc, #64]	; (8002bb8 <HAL_UART_MspInit+0x80>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <HAL_UART_MspInit+0x80>)
 8002b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b8a:	230c      	movs	r3, #12
 8002b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b96:	2303      	movs	r3, #3
 8002b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9e:	f107 0314 	add.w	r3, r7, #20
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba8:	f000 faa0 	bl	80030ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bac:	bf00      	nop
 8002bae:	3728      	adds	r7, #40	; 0x28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40004400 	.word	0x40004400
 8002bb8:	40021000 	.word	0x40021000

08002bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08c      	sub	sp, #48	; 0x30
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	2037      	movs	r0, #55	; 0x37
 8002bd2:	f000 fa61 	bl	8003098 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002bd6:	2037      	movs	r0, #55	; 0x37
 8002bd8:	f000 fa7a 	bl	80030d0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <HAL_InitTick+0x9c>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	4a1d      	ldr	r2, [pc, #116]	; (8002c58 <HAL_InitTick+0x9c>)
 8002be2:	f043 0320 	orr.w	r3, r3, #32
 8002be6:	6593      	str	r3, [r2, #88]	; 0x58
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <HAL_InitTick+0x9c>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bf4:	f107 0210 	add.w	r2, r7, #16
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f001 fa26 	bl	8004050 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c04:	f001 f9f8 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8002c08:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	4a13      	ldr	r2, [pc, #76]	; (8002c5c <HAL_InitTick+0xa0>)
 8002c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c12:	0c9b      	lsrs	r3, r3, #18
 8002c14:	3b01      	subs	r3, #1
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <HAL_InitTick+0xa4>)
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <HAL_InitTick+0xa8>)
 8002c1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_InitTick+0xa4>)
 8002c20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c24:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002c26:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <HAL_InitTick+0xa4>)
 8002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <HAL_InitTick+0xa4>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_InitTick+0xa4>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002c38:	4809      	ldr	r0, [pc, #36]	; (8002c60 <HAL_InitTick+0xa4>)
 8002c3a:	f001 ff57 	bl	8004aec <HAL_TIM_Base_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d104      	bne.n	8002c4e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002c44:	4806      	ldr	r0, [pc, #24]	; (8002c60 <HAL_InitTick+0xa4>)
 8002c46:	f001 ffb3 	bl	8004bb0 <HAL_TIM_Base_Start_IT>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	e000      	b.n	8002c50 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3730      	adds	r7, #48	; 0x30
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	431bde83 	.word	0x431bde83
 8002c60:	2000354c 	.word	0x2000354c
 8002c64:	40001400 	.word	0x40001400

08002c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <NMI_Handler+0x4>

08002c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c72:	e7fe      	b.n	8002c72 <HardFault_Handler+0x4>

08002c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <MemManage_Handler+0x4>

08002c7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c7e:	e7fe      	b.n	8002c7e <BusFault_Handler+0x4>

08002c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c84:	e7fe      	b.n	8002c84 <UsageFault_Handler+0x4>

08002c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <TIM7_IRQHandler+0x10>)
 8002c9a:	f001 fff9 	bl	8004c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	2000354c 	.word	0x2000354c

08002ca8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e00a      	b.n	8002cd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cba:	f3af 8000 	nop.w
 8002cbe:	4601      	mov	r1, r0
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	60ba      	str	r2, [r7, #8]
 8002cc6:	b2ca      	uxtb	r2, r1
 8002cc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	dbf0      	blt.n	8002cba <_read+0x12>
	}

return len;
 8002cd8:	687b      	ldr	r3, [r7, #4]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	e009      	b.n	8002d08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	60ba      	str	r2, [r7, #8]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3301      	adds	r3, #1
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	dbf1      	blt.n	8002cf4 <_write+0x12>
	}
	return len;
 8002d10:	687b      	ldr	r3, [r7, #4]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <_close>:

int _close(int file)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
	return -1;
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d42:	605a      	str	r2, [r3, #4]
	return 0;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <_isatty>:

int _isatty(int file)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
	return 1;
 8002d5a:	2301      	movs	r3, #1
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
	return 0;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <_sbrk+0x5c>)
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <_sbrk+0x60>)
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d98:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <_sbrk+0x64>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <_sbrk+0x64>)
 8002da2:	4a12      	ldr	r2, [pc, #72]	; (8002dec <_sbrk+0x68>)
 8002da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <_sbrk+0x64>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d207      	bcs.n	8002dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db4:	f005 fdc2 	bl	800893c <__errno>
 8002db8:	4603      	mov	r3, r0
 8002dba:	220c      	movs	r2, #12
 8002dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	e009      	b.n	8002dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <_sbrk+0x64>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <_sbrk+0x64>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	4a05      	ldr	r2, [pc, #20]	; (8002de8 <_sbrk+0x64>)
 8002dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20018000 	.word	0x20018000
 8002de4:	00000400 	.word	0x00000400
 8002de8:	20000094 	.word	0x20000094
 8002dec:	200035f0 	.word	0x200035f0

08002df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002df4:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <SystemInit+0x5c>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <SystemInit+0x5c>)
 8002dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e04:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <SystemInit+0x60>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a11      	ldr	r2, [pc, #68]	; (8002e50 <SystemInit+0x60>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002e10:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <SystemInit+0x60>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002e16:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <SystemInit+0x60>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a0d      	ldr	r2, [pc, #52]	; (8002e50 <SystemInit+0x60>)
 8002e1c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002e20:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002e24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002e26:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <SystemInit+0x60>)
 8002e28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e2c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e2e:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <SystemInit+0x60>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <SystemInit+0x60>)
 8002e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <SystemInit+0x60>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	619a      	str	r2, [r3, #24]
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	e000ed00 	.word	0xe000ed00
 8002e50:	40021000 	.word	0x40021000

08002e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e58:	f7ff ffca 	bl	8002df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002e5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002e5e:	e003      	b.n	8002e68 <LoopCopyDataInit>

08002e60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002e62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002e64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002e66:	3104      	adds	r1, #4

08002e68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002e68:	480a      	ldr	r0, [pc, #40]	; (8002e94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002e6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002e6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002e70:	d3f6      	bcc.n	8002e60 <CopyDataInit>
	ldr	r2, =_sbss
 8002e72:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002e74:	e002      	b.n	8002e7c <LoopFillZerobss>

08002e76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002e76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002e78:	f842 3b04 	str.w	r3, [r2], #4

08002e7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <LoopForever+0x16>)
	cmp	r2, r3
 8002e7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002e80:	d3f9      	bcc.n	8002e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e82:	f005 fd61 	bl	8008948 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e86:	f7fe f871 	bl	8000f6c <main>

08002e8a <LoopForever>:

LoopForever:
    b LoopForever
 8002e8a:	e7fe      	b.n	8002e8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e8c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002e90:	0800953c 	.word	0x0800953c
	ldr	r0, =_sdata
 8002e94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002e98:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8002e9c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8002ea0:	200035ec 	.word	0x200035ec

08002ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ea4:	e7fe      	b.n	8002ea4 <ADC1_2_IRQHandler>
	...

08002ea8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <HAL_Init+0x3c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <HAL_Init+0x3c>)
 8002eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ebc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ebe:	2003      	movs	r0, #3
 8002ec0:	f000 f8df 	bl	8003082 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7ff fe79 	bl	8002bbc <HAL_InitTick>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	71fb      	strb	r3, [r7, #7]
 8002ed4:	e001      	b.n	8002eda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ed6:	f7ff fe07 	bl	8002ae8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002eda:	79fb      	ldrb	r3, [r7, #7]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40022000 	.word	0x40022000

08002ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_IncTick+0x20>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_IncTick+0x24>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	4a04      	ldr	r2, [pc, #16]	; (8002f0c <HAL_IncTick+0x24>)
 8002efa:	6013      	str	r3, [r2, #0]
}
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	20000008 	.word	0x20000008
 8002f0c:	20003598 	.word	0x20003598

08002f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return uwTick;
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <HAL_GetTick+0x14>)
 8002f16:	681b      	ldr	r3, [r3, #0]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20003598 	.word	0x20003598

08002f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f44:	4013      	ands	r3, r2
 8002f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5a:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	60d3      	str	r3, [r2, #12]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <__NVIC_GetPriorityGrouping+0x18>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	f003 0307 	and.w	r3, r3, #7
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	db0b      	blt.n	8002fb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	f003 021f 	and.w	r2, r3, #31
 8002fa4:	4907      	ldr	r1, [pc, #28]	; (8002fc4 <__NVIC_EnableIRQ+0x38>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2001      	movs	r0, #1
 8002fae:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	e000e100 	.word	0xe000e100

08002fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	db0a      	blt.n	8002ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	490c      	ldr	r1, [pc, #48]	; (8003014 <__NVIC_SetPriority+0x4c>)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	0112      	lsls	r2, r2, #4
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	440b      	add	r3, r1
 8002fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff0:	e00a      	b.n	8003008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	4908      	ldr	r1, [pc, #32]	; (8003018 <__NVIC_SetPriority+0x50>)
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	3b04      	subs	r3, #4
 8003000:	0112      	lsls	r2, r2, #4
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	440b      	add	r3, r1
 8003006:	761a      	strb	r2, [r3, #24]
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000e100 	.word	0xe000e100
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	; 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f1c3 0307 	rsb	r3, r3, #7
 8003036:	2b04      	cmp	r3, #4
 8003038:	bf28      	it	cs
 800303a:	2304      	movcs	r3, #4
 800303c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3304      	adds	r3, #4
 8003042:	2b06      	cmp	r3, #6
 8003044:	d902      	bls.n	800304c <NVIC_EncodePriority+0x30>
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3b03      	subs	r3, #3
 800304a:	e000      	b.n	800304e <NVIC_EncodePriority+0x32>
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	f04f 32ff 	mov.w	r2, #4294967295
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43da      	mvns	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	401a      	ands	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003064:	f04f 31ff 	mov.w	r1, #4294967295
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	43d9      	mvns	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	4313      	orrs	r3, r2
         );
}
 8003076:	4618      	mov	r0, r3
 8003078:	3724      	adds	r7, #36	; 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff ff4c 	bl	8002f28 <__NVIC_SetPriorityGrouping>
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030aa:	f7ff ff61 	bl	8002f70 <__NVIC_GetPriorityGrouping>
 80030ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	6978      	ldr	r0, [r7, #20]
 80030b6:	f7ff ffb1 	bl	800301c <NVIC_EncodePriority>
 80030ba:	4602      	mov	r2, r0
 80030bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff ff80 	bl	8002fc8 <__NVIC_SetPriority>
}
 80030c8:	bf00      	nop
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff ff54 	bl	8002f8c <__NVIC_EnableIRQ>
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030fa:	e17f      	b.n	80033fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	4013      	ands	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 8171 	beq.w	80033f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d00b      	beq.n	8003134 <HAL_GPIO_Init+0x48>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d007      	beq.n	8003134 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003128:	2b11      	cmp	r3, #17
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b12      	cmp	r3, #18
 8003132:	d130      	bne.n	8003196 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	2203      	movs	r2, #3
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800316a:	2201      	movs	r2, #1
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	f003 0201 	and.w	r2, r3, #1
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d118      	bne.n	80031d4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80031a8:	2201      	movs	r2, #1
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4013      	ands	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	08db      	lsrs	r3, r3, #3
 80031be:	f003 0201 	and.w	r2, r3, #1
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	2203      	movs	r2, #3
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4013      	ands	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x128>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b12      	cmp	r3, #18
 8003212:	d123      	bne.n	800325c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	08da      	lsrs	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3208      	adds	r2, #8
 800321c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	220f      	movs	r2, #15
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	08da      	lsrs	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3208      	adds	r2, #8
 8003256:	6939      	ldr	r1, [r7, #16]
 8003258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	2203      	movs	r2, #3
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4013      	ands	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0203 	and.w	r2, r3, #3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80ac 	beq.w	80033f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800329e:	4b5f      	ldr	r3, [pc, #380]	; (800341c <HAL_GPIO_Init+0x330>)
 80032a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a2:	4a5e      	ldr	r2, [pc, #376]	; (800341c <HAL_GPIO_Init+0x330>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	6613      	str	r3, [r2, #96]	; 0x60
 80032aa:	4b5c      	ldr	r3, [pc, #368]	; (800341c <HAL_GPIO_Init+0x330>)
 80032ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032b6:	4a5a      	ldr	r2, [pc, #360]	; (8003420 <HAL_GPIO_Init+0x334>)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	089b      	lsrs	r3, r3, #2
 80032bc:	3302      	adds	r3, #2
 80032be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	220f      	movs	r2, #15
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032e0:	d025      	beq.n	800332e <HAL_GPIO_Init+0x242>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4f      	ldr	r2, [pc, #316]	; (8003424 <HAL_GPIO_Init+0x338>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d01f      	beq.n	800332a <HAL_GPIO_Init+0x23e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4e      	ldr	r2, [pc, #312]	; (8003428 <HAL_GPIO_Init+0x33c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d019      	beq.n	8003326 <HAL_GPIO_Init+0x23a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4d      	ldr	r2, [pc, #308]	; (800342c <HAL_GPIO_Init+0x340>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <HAL_GPIO_Init+0x236>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4c      	ldr	r2, [pc, #304]	; (8003430 <HAL_GPIO_Init+0x344>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00d      	beq.n	800331e <HAL_GPIO_Init+0x232>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a4b      	ldr	r2, [pc, #300]	; (8003434 <HAL_GPIO_Init+0x348>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d007      	beq.n	800331a <HAL_GPIO_Init+0x22e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a4a      	ldr	r2, [pc, #296]	; (8003438 <HAL_GPIO_Init+0x34c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d101      	bne.n	8003316 <HAL_GPIO_Init+0x22a>
 8003312:	2306      	movs	r3, #6
 8003314:	e00c      	b.n	8003330 <HAL_GPIO_Init+0x244>
 8003316:	2307      	movs	r3, #7
 8003318:	e00a      	b.n	8003330 <HAL_GPIO_Init+0x244>
 800331a:	2305      	movs	r3, #5
 800331c:	e008      	b.n	8003330 <HAL_GPIO_Init+0x244>
 800331e:	2304      	movs	r3, #4
 8003320:	e006      	b.n	8003330 <HAL_GPIO_Init+0x244>
 8003322:	2303      	movs	r3, #3
 8003324:	e004      	b.n	8003330 <HAL_GPIO_Init+0x244>
 8003326:	2302      	movs	r3, #2
 8003328:	e002      	b.n	8003330 <HAL_GPIO_Init+0x244>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_GPIO_Init+0x244>
 800332e:	2300      	movs	r3, #0
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	f002 0203 	and.w	r2, r2, #3
 8003336:	0092      	lsls	r2, r2, #2
 8003338:	4093      	lsls	r3, r2
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003340:	4937      	ldr	r1, [pc, #220]	; (8003420 <HAL_GPIO_Init+0x334>)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	089b      	lsrs	r3, r3, #2
 8003346:	3302      	adds	r3, #2
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800334e:	4b3b      	ldr	r3, [pc, #236]	; (800343c <HAL_GPIO_Init+0x350>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	43db      	mvns	r3, r3
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4013      	ands	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003372:	4a32      	ldr	r2, [pc, #200]	; (800343c <HAL_GPIO_Init+0x350>)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003378:	4b30      	ldr	r3, [pc, #192]	; (800343c <HAL_GPIO_Init+0x350>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	43db      	mvns	r3, r3
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800339c:	4a27      	ldr	r2, [pc, #156]	; (800343c <HAL_GPIO_Init+0x350>)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033a2:	4b26      	ldr	r3, [pc, #152]	; (800343c <HAL_GPIO_Init+0x350>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033c6:	4a1d      	ldr	r2, [pc, #116]	; (800343c <HAL_GPIO_Init+0x350>)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033cc:	4b1b      	ldr	r3, [pc, #108]	; (800343c <HAL_GPIO_Init+0x350>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033f0:	4a12      	ldr	r2, [pc, #72]	; (800343c <HAL_GPIO_Init+0x350>)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	3301      	adds	r3, #1
 80033fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	fa22 f303 	lsr.w	r3, r2, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	f47f ae78 	bne.w	80030fc <HAL_GPIO_Init+0x10>
  }
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
 8003420:	40010000 	.word	0x40010000
 8003424:	48000400 	.word	0x48000400
 8003428:	48000800 	.word	0x48000800
 800342c:	48000c00 	.word	0x48000c00
 8003430:	48001000 	.word	0x48001000
 8003434:	48001400 	.word	0x48001400
 8003438:	48001800 	.word	0x48001800
 800343c:	40010400 	.word	0x40010400

08003440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
 800344c:	4613      	mov	r3, r2
 800344e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003450:	787b      	ldrb	r3, [r7, #1]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800345c:	e002      	b.n	8003464 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <HAL_PWREx_GetVoltageRange+0x18>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800347c:	4618      	mov	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40007000 	.word	0x40007000

0800348c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800349a:	d130      	bne.n	80034fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800349c:	4b23      	ldr	r3, [pc, #140]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a8:	d038      	beq.n	800351c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034aa:	4b20      	ldr	r3, [pc, #128]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034b2:	4a1e      	ldr	r2, [pc, #120]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034ba:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2232      	movs	r2, #50	; 0x32
 80034c0:	fb02 f303 	mul.w	r3, r2, r3
 80034c4:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	0c9b      	lsrs	r3, r3, #18
 80034cc:	3301      	adds	r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d0:	e002      	b.n	80034d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d8:	4b14      	ldr	r3, [pc, #80]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e4:	d102      	bne.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f2      	bne.n	80034d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f8:	d110      	bne.n	800351c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e00f      	b.n	800351e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034fe:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350a:	d007      	beq.n	800351c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800350c:	4b07      	ldr	r3, [pc, #28]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003514:	4a05      	ldr	r2, [pc, #20]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800351a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40007000 	.word	0x40007000
 8003530:	20000000 	.word	0x20000000
 8003534:	431bde83 	.word	0x431bde83

08003538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e3d4      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800354a:	4ba1      	ldr	r3, [pc, #644]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003554:	4b9e      	ldr	r3, [pc, #632]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0310 	and.w	r3, r3, #16
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 80e4 	beq.w	8003734 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d007      	beq.n	8003582 <HAL_RCC_OscConfig+0x4a>
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b0c      	cmp	r3, #12
 8003576:	f040 808b 	bne.w	8003690 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b01      	cmp	r3, #1
 800357e:	f040 8087 	bne.w	8003690 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003582:	4b93      	ldr	r3, [pc, #588]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_RCC_OscConfig+0x62>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e3ac      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1a      	ldr	r2, [r3, #32]
 800359e:	4b8c      	ldr	r3, [pc, #560]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d004      	beq.n	80035b4 <HAL_RCC_OscConfig+0x7c>
 80035aa:	4b89      	ldr	r3, [pc, #548]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b2:	e005      	b.n	80035c0 <HAL_RCC_OscConfig+0x88>
 80035b4:	4b86      	ldr	r3, [pc, #536]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80035b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ba:	091b      	lsrs	r3, r3, #4
 80035bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d223      	bcs.n	800360c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fd73 	bl	80040b4 <RCC_SetFlashLatencyFromMSIRange>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e38d      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035d8:	4b7d      	ldr	r3, [pc, #500]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a7c      	ldr	r2, [pc, #496]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80035de:	f043 0308 	orr.w	r3, r3, #8
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4b7a      	ldr	r3, [pc, #488]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	4977      	ldr	r1, [pc, #476]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035f6:	4b76      	ldr	r3, [pc, #472]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	4972      	ldr	r1, [pc, #456]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 8003606:	4313      	orrs	r3, r2
 8003608:	604b      	str	r3, [r1, #4]
 800360a:	e025      	b.n	8003658 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800360c:	4b70      	ldr	r3, [pc, #448]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a6f      	ldr	r2, [pc, #444]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 8003612:	f043 0308 	orr.w	r3, r3, #8
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	4b6d      	ldr	r3, [pc, #436]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	496a      	ldr	r1, [pc, #424]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800362a:	4b69      	ldr	r3, [pc, #420]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	4965      	ldr	r1, [pc, #404]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fd33 	bl	80040b4 <RCC_SetFlashLatencyFromMSIRange>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e34d      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003658:	f000 fc36 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b5c      	ldr	r3, [pc, #368]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	495a      	ldr	r1, [pc, #360]	; (80037d4 <HAL_RCC_OscConfig+0x29c>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
 8003674:	4a58      	ldr	r2, [pc, #352]	; (80037d8 <HAL_RCC_OscConfig+0x2a0>)
 8003676:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003678:	4b58      	ldr	r3, [pc, #352]	; (80037dc <HAL_RCC_OscConfig+0x2a4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff fa9d 	bl	8002bbc <HAL_InitTick>
 8003682:	4603      	mov	r3, r0
 8003684:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d052      	beq.n	8003732 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	e331      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d032      	beq.n	80036fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003698:	4b4d      	ldr	r3, [pc, #308]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a4c      	ldr	r2, [pc, #304]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036a4:	f7ff fc34 	bl	8002f10 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036ac:	f7ff fc30 	bl	8002f10 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e31a      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036be:	4b44      	ldr	r3, [pc, #272]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036ca:	4b41      	ldr	r3, [pc, #260]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a40      	ldr	r2, [pc, #256]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80036d0:	f043 0308 	orr.w	r3, r3, #8
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b3e      	ldr	r3, [pc, #248]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	493b      	ldr	r1, [pc, #236]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036e8:	4b39      	ldr	r3, [pc, #228]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	4936      	ldr	r1, [pc, #216]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]
 80036fc:	e01a      	b.n	8003734 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036fe:	4b34      	ldr	r3, [pc, #208]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a33      	ldr	r2, [pc, #204]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800370a:	f7ff fc01 	bl	8002f10 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003712:	f7ff fbfd 	bl	8002f10 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e2e7      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003724:	4b2a      	ldr	r3, [pc, #168]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f0      	bne.n	8003712 <HAL_RCC_OscConfig+0x1da>
 8003730:	e000      	b.n	8003734 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003732:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d074      	beq.n	800382a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b08      	cmp	r3, #8
 8003744:	d005      	beq.n	8003752 <HAL_RCC_OscConfig+0x21a>
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2b0c      	cmp	r3, #12
 800374a:	d10e      	bne.n	800376a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b03      	cmp	r3, #3
 8003750:	d10b      	bne.n	800376a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003752:	4b1f      	ldr	r3, [pc, #124]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d064      	beq.n	8003828 <HAL_RCC_OscConfig+0x2f0>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d160      	bne.n	8003828 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e2c4      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003772:	d106      	bne.n	8003782 <HAL_RCC_OscConfig+0x24a>
 8003774:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a15      	ldr	r2, [pc, #84]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 800377a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	e01d      	b.n	80037be <HAL_RCC_OscConfig+0x286>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800378a:	d10c      	bne.n	80037a6 <HAL_RCC_OscConfig+0x26e>
 800378c:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0f      	ldr	r2, [pc, #60]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 8003792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0c      	ldr	r2, [pc, #48]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 800379e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	e00b      	b.n	80037be <HAL_RCC_OscConfig+0x286>
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a09      	ldr	r2, [pc, #36]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80037ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	4b07      	ldr	r3, [pc, #28]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a06      	ldr	r2, [pc, #24]	; (80037d0 <HAL_RCC_OscConfig+0x298>)
 80037b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01c      	beq.n	8003800 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c6:	f7ff fba3 	bl	8002f10 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037cc:	e011      	b.n	80037f2 <HAL_RCC_OscConfig+0x2ba>
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
 80037d4:	08009480 	.word	0x08009480
 80037d8:	20000000 	.word	0x20000000
 80037dc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e0:	f7ff fb96 	bl	8002f10 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e280      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f2:	4baf      	ldr	r3, [pc, #700]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x2a8>
 80037fe:	e014      	b.n	800382a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7ff fb86 	bl	8002f10 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003808:	f7ff fb82 	bl	8002f10 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e26c      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800381a:	4ba5      	ldr	r3, [pc, #660]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x2d0>
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d060      	beq.n	80038f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b04      	cmp	r3, #4
 800383a:	d005      	beq.n	8003848 <HAL_RCC_OscConfig+0x310>
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	2b0c      	cmp	r3, #12
 8003840:	d119      	bne.n	8003876 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d116      	bne.n	8003876 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003848:	4b99      	ldr	r3, [pc, #612]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_RCC_OscConfig+0x328>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e249      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003860:	4b93      	ldr	r3, [pc, #588]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	061b      	lsls	r3, r3, #24
 800386e:	4990      	ldr	r1, [pc, #576]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003870:	4313      	orrs	r3, r2
 8003872:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003874:	e040      	b.n	80038f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d023      	beq.n	80038c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800387e:	4b8c      	ldr	r3, [pc, #560]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a8b      	ldr	r2, [pc, #556]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388a:	f7ff fb41 	bl	8002f10 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003892:	f7ff fb3d 	bl	8002f10 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e227      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038a4:	4b82      	ldr	r3, [pc, #520]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b0:	4b7f      	ldr	r3, [pc, #508]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	061b      	lsls	r3, r3, #24
 80038be:	497c      	ldr	r1, [pc, #496]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]
 80038c4:	e018      	b.n	80038f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c6:	4b7a      	ldr	r3, [pc, #488]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a79      	ldr	r2, [pc, #484]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 80038cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d2:	f7ff fb1d 	bl	8002f10 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038da:	f7ff fb19 	bl	8002f10 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e203      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038ec:	4b70      	ldr	r3, [pc, #448]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f0      	bne.n	80038da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d03c      	beq.n	800397e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d01c      	beq.n	8003946 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390c:	4b68      	ldr	r3, [pc, #416]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 800390e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003912:	4a67      	ldr	r2, [pc, #412]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391c:	f7ff faf8 	bl	8002f10 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003924:	f7ff faf4 	bl	8002f10 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e1de      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003936:	4b5e      	ldr	r3, [pc, #376]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0ef      	beq.n	8003924 <HAL_RCC_OscConfig+0x3ec>
 8003944:	e01b      	b.n	800397e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003946:	4b5a      	ldr	r3, [pc, #360]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800394c:	4a58      	ldr	r2, [pc, #352]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003956:	f7ff fadb 	bl	8002f10 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395e:	f7ff fad7 	bl	8002f10 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e1c1      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003970:	4b4f      	ldr	r3, [pc, #316]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1ef      	bne.n	800395e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80a6 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398c:	2300      	movs	r3, #0
 800398e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003990:	4b47      	ldr	r3, [pc, #284]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10d      	bne.n	80039b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399c:	4b44      	ldr	r3, [pc, #272]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 800399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a0:	4a43      	ldr	r2, [pc, #268]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 80039a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a6:	6593      	str	r3, [r2, #88]	; 0x58
 80039a8:	4b41      	ldr	r3, [pc, #260]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 80039aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b4:	2301      	movs	r3, #1
 80039b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b8:	4b3e      	ldr	r3, [pc, #248]	; (8003ab4 <HAL_RCC_OscConfig+0x57c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d118      	bne.n	80039f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039c4:	4b3b      	ldr	r3, [pc, #236]	; (8003ab4 <HAL_RCC_OscConfig+0x57c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a3a      	ldr	r2, [pc, #232]	; (8003ab4 <HAL_RCC_OscConfig+0x57c>)
 80039ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d0:	f7ff fa9e 	bl	8002f10 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d8:	f7ff fa9a 	bl	8002f10 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e184      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ea:	4b32      	ldr	r3, [pc, #200]	; (8003ab4 <HAL_RCC_OscConfig+0x57c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d108      	bne.n	8003a10 <HAL_RCC_OscConfig+0x4d8>
 80039fe:	4b2c      	ldr	r3, [pc, #176]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a04:	4a2a      	ldr	r2, [pc, #168]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a0e:	e024      	b.n	8003a5a <HAL_RCC_OscConfig+0x522>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b05      	cmp	r3, #5
 8003a16:	d110      	bne.n	8003a3a <HAL_RCC_OscConfig+0x502>
 8003a18:	4b25      	ldr	r3, [pc, #148]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1e:	4a24      	ldr	r2, [pc, #144]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003a20:	f043 0304 	orr.w	r3, r3, #4
 8003a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a28:	4b21      	ldr	r3, [pc, #132]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2e:	4a20      	ldr	r2, [pc, #128]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a38:	e00f      	b.n	8003a5a <HAL_RCC_OscConfig+0x522>
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a40:	4a1b      	ldr	r2, [pc, #108]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003a42:	f023 0301 	bic.w	r3, r3, #1
 8003a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a4a:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a50:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003a52:	f023 0304 	bic.w	r3, r3, #4
 8003a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d016      	beq.n	8003a90 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a62:	f7ff fa55 	bl	8002f10 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a68:	e00a      	b.n	8003a80 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6a:	f7ff fa51 	bl	8002f10 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e139      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_RCC_OscConfig+0x578>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0ed      	beq.n	8003a6a <HAL_RCC_OscConfig+0x532>
 8003a8e:	e01a      	b.n	8003ac6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7ff fa3e 	bl	8002f10 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a96:	e00f      	b.n	8003ab8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7ff fa3a 	bl	8002f10 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d906      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e122      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
 8003aae:	bf00      	nop
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ab8:	4b90      	ldr	r3, [pc, #576]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e8      	bne.n	8003a98 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ac6:	7ffb      	ldrb	r3, [r7, #31]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003acc:	4b8b      	ldr	r3, [pc, #556]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	4a8a      	ldr	r2, [pc, #552]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8108 	beq.w	8003cf2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	f040 80d0 	bne.w	8003c8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003aec:	4b83      	ldr	r3, [pc, #524]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f003 0203 	and.w	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d130      	bne.n	8003b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d127      	bne.n	8003b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d11f      	bne.n	8003b62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b2c:	2a07      	cmp	r2, #7
 8003b2e:	bf14      	ite	ne
 8003b30:	2201      	movne	r2, #1
 8003b32:	2200      	moveq	r2, #0
 8003b34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d113      	bne.n	8003b62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	3b01      	subs	r3, #1
 8003b48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d109      	bne.n	8003b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d06e      	beq.n	8003c40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b0c      	cmp	r3, #12
 8003b66:	d069      	beq.n	8003c3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b68:	4b64      	ldr	r3, [pc, #400]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b74:	4b61      	ldr	r3, [pc, #388]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0b7      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b84:	4b5d      	ldr	r3, [pc, #372]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a5c      	ldr	r2, [pc, #368]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b90:	f7ff f9be 	bl	8002f10 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b98:	f7ff f9ba 	bl	8002f10 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e0a4      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003baa:	4b54      	ldr	r3, [pc, #336]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb6:	4b51      	ldr	r3, [pc, #324]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	4b51      	ldr	r3, [pc, #324]	; (8003d00 <HAL_RCC_OscConfig+0x7c8>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bc6:	3a01      	subs	r2, #1
 8003bc8:	0112      	lsls	r2, r2, #4
 8003bca:	4311      	orrs	r1, r2
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bd0:	0212      	lsls	r2, r2, #8
 8003bd2:	4311      	orrs	r1, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bd8:	0852      	lsrs	r2, r2, #1
 8003bda:	3a01      	subs	r2, #1
 8003bdc:	0552      	lsls	r2, r2, #21
 8003bde:	4311      	orrs	r1, r2
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003be4:	0852      	lsrs	r2, r2, #1
 8003be6:	3a01      	subs	r2, #1
 8003be8:	0652      	lsls	r2, r2, #25
 8003bea:	4311      	orrs	r1, r2
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bf0:	0912      	lsrs	r2, r2, #4
 8003bf2:	0452      	lsls	r2, r2, #17
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	4941      	ldr	r1, [pc, #260]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bfc:	4b3f      	ldr	r3, [pc, #252]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a3e      	ldr	r2, [pc, #248]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c08:	4b3c      	ldr	r3, [pc, #240]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4a3b      	ldr	r2, [pc, #236]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c14:	f7ff f97c 	bl	8002f10 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1c:	f7ff f978 	bl	8002f10 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e062      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2e:	4b33      	ldr	r3, [pc, #204]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c3a:	e05a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e059      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c40:	4b2e      	ldr	r3, [pc, #184]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d152      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c4c:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2a      	ldr	r2, [pc, #168]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c58:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4a27      	ldr	r2, [pc, #156]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c64:	f7ff f954 	bl	8002f10 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c6c:	f7ff f950 	bl	8002f10 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e03a      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7e:	4b1f      	ldr	r3, [pc, #124]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0x734>
 8003c8a:	e032      	b.n	8003cf2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2b0c      	cmp	r3, #12
 8003c90:	d02d      	beq.n	8003cee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c92:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003c9e:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d105      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003caa:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	4a13      	ldr	r2, [pc, #76]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003cb0:	f023 0303 	bic.w	r3, r3, #3
 8003cb4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003cb6:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	4a10      	ldr	r2, [pc, #64]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003cbc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc6:	f7ff f923 	bl	8002f10 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cce:	f7ff f91f 	bl	8002f10 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e009      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_RCC_OscConfig+0x7c4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f0      	bne.n	8003cce <HAL_RCC_OscConfig+0x796>
 8003cec:	e001      	b.n	8003cf2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	f99d808c 	.word	0xf99d808c

08003d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0c8      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d18:	4b66      	ldr	r3, [pc, #408]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d910      	bls.n	8003d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b63      	ldr	r3, [pc, #396]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 0207 	bic.w	r2, r3, #7
 8003d2e:	4961      	ldr	r1, [pc, #388]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d36:	4b5f      	ldr	r3, [pc, #380]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0b0      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d04c      	beq.n	8003dee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d107      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d5c:	4b56      	ldr	r3, [pc, #344]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d121      	bne.n	8003dac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e09e      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d107      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d74:	4b50      	ldr	r3, [pc, #320]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d115      	bne.n	8003dac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e092      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d107      	bne.n	8003d9c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d8c:	4b4a      	ldr	r3, [pc, #296]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d109      	bne.n	8003dac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e086      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d9c:	4b46      	ldr	r3, [pc, #280]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e07e      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dac:	4b42      	ldr	r3, [pc, #264]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f023 0203 	bic.w	r2, r3, #3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	493f      	ldr	r1, [pc, #252]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dbe:	f7ff f8a7 	bl	8002f10 <HAL_GetTick>
 8003dc2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc4:	e00a      	b.n	8003ddc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc6:	f7ff f8a3 	bl	8002f10 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e066      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ddc:	4b36      	ldr	r3, [pc, #216]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 020c 	and.w	r2, r3, #12
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d1eb      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dfa:	4b2f      	ldr	r3, [pc, #188]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	492c      	ldr	r1, [pc, #176]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e0c:	4b29      	ldr	r3, [pc, #164]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d210      	bcs.n	8003e3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	4b26      	ldr	r3, [pc, #152]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 0207 	bic.w	r2, r3, #7
 8003e22:	4924      	ldr	r1, [pc, #144]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2a:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e036      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e48:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4918      	ldr	r1, [pc, #96]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e66:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4910      	ldr	r1, [pc, #64]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e7a:	f000 f825 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	4b0d      	ldr	r3, [pc, #52]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	490c      	ldr	r1, [pc, #48]	; (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	5ccb      	ldrb	r3, [r1, r3]
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	fa22 f303 	lsr.w	r3, r2, r3
 8003e96:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fe fe8c 	bl	8002bbc <HAL_InitTick>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ea8:	7afb      	ldrb	r3, [r7, #11]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40022000 	.word	0x40022000
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	08009480 	.word	0x08009480
 8003ec0:	20000000 	.word	0x20000000
 8003ec4:	20000004 	.word	0x20000004

08003ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b089      	sub	sp, #36	; 0x24
 8003ecc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ed6:	4b3e      	ldr	r3, [pc, #248]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ee0:	4b3b      	ldr	r3, [pc, #236]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0x34>
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b0c      	cmp	r3, #12
 8003ef4:	d121      	bne.n	8003f3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d11e      	bne.n	8003f3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003efc:	4b34      	ldr	r3, [pc, #208]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d107      	bne.n	8003f18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f08:	4b31      	ldr	r3, [pc, #196]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f0e:	0a1b      	lsrs	r3, r3, #8
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	e005      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f18:	4b2d      	ldr	r3, [pc, #180]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f24:	4a2b      	ldr	r2, [pc, #172]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10d      	bne.n	8003f50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f38:	e00a      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d102      	bne.n	8003f46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f40:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	e004      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f4c:	4b23      	ldr	r3, [pc, #140]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x114>)
 8003f4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b0c      	cmp	r3, #12
 8003f54:	d134      	bne.n	8003fc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f56:	4b1e      	ldr	r3, [pc, #120]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d003      	beq.n	8003f6e <HAL_RCC_GetSysClockFreq+0xa6>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d003      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq+0xac>
 8003f6c:	e005      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f6e:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f70:	617b      	str	r3, [r7, #20]
      break;
 8003f72:	e005      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f74:	4b19      	ldr	r3, [pc, #100]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x114>)
 8003f76:	617b      	str	r3, [r7, #20]
      break;
 8003f78:	e002      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	617b      	str	r3, [r7, #20]
      break;
 8003f7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f80:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f8e:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	0a1b      	lsrs	r3, r3, #8
 8003f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	fb02 f203 	mul.w	r2, r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	0e5b      	lsrs	r3, r3, #25
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fc0:	69bb      	ldr	r3, [r7, #24]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3724      	adds	r7, #36	; 0x24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	08009498 	.word	0x08009498
 8003fd8:	00f42400 	.word	0x00f42400
 8003fdc:	007a1200 	.word	0x007a1200

08003fe0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe4:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000000 	.word	0x20000000

08003ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ffc:	f7ff fff0 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004000:	4602      	mov	r2, r0
 8004002:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	0a1b      	lsrs	r3, r3, #8
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	4904      	ldr	r1, [pc, #16]	; (8004020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800400e:	5ccb      	ldrb	r3, [r1, r3]
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004018:	4618      	mov	r0, r3
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000
 8004020:	08009490 	.word	0x08009490

08004024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004028:	f7ff ffda 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 800402c:	4602      	mov	r2, r0
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	0adb      	lsrs	r3, r3, #11
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	4904      	ldr	r1, [pc, #16]	; (800404c <HAL_RCC_GetPCLK2Freq+0x28>)
 800403a:	5ccb      	ldrb	r3, [r1, r3]
 800403c:	f003 031f 	and.w	r3, r3, #31
 8004040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004044:	4618      	mov	r0, r3
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40021000 	.word	0x40021000
 800404c:	08009490 	.word	0x08009490

08004050 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	220f      	movs	r2, #15
 800405e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004060:	4b12      	ldr	r3, [pc, #72]	; (80040ac <HAL_RCC_GetClockConfig+0x5c>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 0203 	and.w	r2, r3, #3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800406c:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <HAL_RCC_GetClockConfig+0x5c>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <HAL_RCC_GetClockConfig+0x5c>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <HAL_RCC_GetClockConfig+0x5c>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	08db      	lsrs	r3, r3, #3
 800408a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004092:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <HAL_RCC_GetClockConfig+0x60>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0207 	and.w	r2, r3, #7
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	601a      	str	r2, [r3, #0]
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40022000 	.word	0x40022000

080040b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040c0:	4b2a      	ldr	r3, [pc, #168]	; (800416c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040cc:	f7ff f9d0 	bl	8003470 <HAL_PWREx_GetVoltageRange>
 80040d0:	6178      	str	r0, [r7, #20]
 80040d2:	e014      	b.n	80040fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040d4:	4b25      	ldr	r3, [pc, #148]	; (800416c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d8:	4a24      	ldr	r2, [pc, #144]	; (800416c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040de:	6593      	str	r3, [r2, #88]	; 0x58
 80040e0:	4b22      	ldr	r3, [pc, #136]	; (800416c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040ec:	f7ff f9c0 	bl	8003470 <HAL_PWREx_GetVoltageRange>
 80040f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040f2:	4b1e      	ldr	r3, [pc, #120]	; (800416c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f6:	4a1d      	ldr	r2, [pc, #116]	; (800416c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004104:	d10b      	bne.n	800411e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b80      	cmp	r3, #128	; 0x80
 800410a:	d919      	bls.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2ba0      	cmp	r3, #160	; 0xa0
 8004110:	d902      	bls.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004112:	2302      	movs	r3, #2
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	e013      	b.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004118:	2301      	movs	r3, #1
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	e010      	b.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b80      	cmp	r3, #128	; 0x80
 8004122:	d902      	bls.n	800412a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004124:	2303      	movs	r3, #3
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	e00a      	b.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b80      	cmp	r3, #128	; 0x80
 800412e:	d102      	bne.n	8004136 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004130:	2302      	movs	r3, #2
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	e004      	b.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b70      	cmp	r3, #112	; 0x70
 800413a:	d101      	bne.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800413c:	2301      	movs	r3, #1
 800413e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f023 0207 	bic.w	r2, r3, #7
 8004148:	4909      	ldr	r1, [pc, #36]	; (8004170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	429a      	cmp	r2, r3
 800415c:	d001      	beq.n	8004162 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021000 	.word	0x40021000
 8004170:	40022000 	.word	0x40022000

08004174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800417c:	2300      	movs	r3, #0
 800417e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004180:	2300      	movs	r3, #0
 8004182:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800418c:	2b00      	cmp	r3, #0
 800418e:	d041      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004194:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004198:	d02a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800419a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800419e:	d824      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041a4:	d008      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041aa:	d81e      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b4:	d010      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041b6:	e018      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041b8:	4b86      	ldr	r3, [pc, #536]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4a85      	ldr	r2, [pc, #532]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041c4:	e015      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fabb 	bl	8004748 <RCCEx_PLLSAI1_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041d6:	e00c      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3320      	adds	r3, #32
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fba6 	bl	8004930 <RCCEx_PLLSAI2_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041e8:	e003      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	74fb      	strb	r3, [r7, #19]
      break;
 80041ee:	e000      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80041f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041f2:	7cfb      	ldrb	r3, [r7, #19]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10b      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041f8:	4b76      	ldr	r3, [pc, #472]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004206:	4973      	ldr	r1, [pc, #460]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800420e:	e001      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004210:	7cfb      	ldrb	r3, [r7, #19]
 8004212:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d041      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004224:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004228:	d02a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800422a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800422e:	d824      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004230:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004234:	d008      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004236:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800423a:	d81e      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004244:	d010      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004246:	e018      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004248:	4b62      	ldr	r3, [pc, #392]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a61      	ldr	r2, [pc, #388]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004252:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004254:	e015      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3304      	adds	r3, #4
 800425a:	2100      	movs	r1, #0
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fa73 	bl	8004748 <RCCEx_PLLSAI1_Config>
 8004262:	4603      	mov	r3, r0
 8004264:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004266:	e00c      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3320      	adds	r3, #32
 800426c:	2100      	movs	r1, #0
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fb5e 	bl	8004930 <RCCEx_PLLSAI2_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004278:	e003      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	74fb      	strb	r3, [r7, #19]
      break;
 800427e:	e000      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004282:	7cfb      	ldrb	r3, [r7, #19]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10b      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004288:	4b52      	ldr	r3, [pc, #328]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004296:	494f      	ldr	r1, [pc, #316]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800429e:	e001      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a0:	7cfb      	ldrb	r3, [r7, #19]
 80042a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 80a0 	beq.w	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042b2:	2300      	movs	r3, #0
 80042b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042b6:	4b47      	ldr	r3, [pc, #284]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80042c6:	2300      	movs	r3, #0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042cc:	4b41      	ldr	r3, [pc, #260]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	4a40      	ldr	r2, [pc, #256]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d6:	6593      	str	r3, [r2, #88]	; 0x58
 80042d8:	4b3e      	ldr	r3, [pc, #248]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e4:	2301      	movs	r3, #1
 80042e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042e8:	4b3b      	ldr	r3, [pc, #236]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a3a      	ldr	r2, [pc, #232]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042f4:	f7fe fe0c 	bl	8002f10 <HAL_GetTick>
 80042f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042fa:	e009      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fc:	f7fe fe08 	bl	8002f10 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d902      	bls.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	74fb      	strb	r3, [r7, #19]
        break;
 800430e:	e005      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004310:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0ef      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800431c:	7cfb      	ldrb	r3, [r7, #19]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d15c      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004322:	4b2c      	ldr	r3, [pc, #176]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01f      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	429a      	cmp	r2, r3
 800433e:	d019      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004340:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800434c:	4b21      	ldr	r3, [pc, #132]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004352:	4a20      	ldr	r2, [pc, #128]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800435c:	4b1d      	ldr	r3, [pc, #116]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004362:	4a1c      	ldr	r2, [pc, #112]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800436c:	4a19      	ldr	r2, [pc, #100]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d016      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437e:	f7fe fdc7 	bl	8002f10 <HAL_GetTick>
 8004382:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004384:	e00b      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004386:	f7fe fdc3 	bl	8002f10 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	f241 3288 	movw	r2, #5000	; 0x1388
 8004394:	4293      	cmp	r3, r2
 8004396:	d902      	bls.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	74fb      	strb	r3, [r7, #19]
            break;
 800439c:	e006      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800439e:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ec      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80043ac:	7cfb      	ldrb	r3, [r7, #19]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10c      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043b2:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c2:	4904      	ldr	r1, [pc, #16]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043ca:	e009      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	74bb      	strb	r3, [r7, #18]
 80043d0:	e006      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043dc:	7cfb      	ldrb	r3, [r7, #19]
 80043de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043e0:	7c7b      	ldrb	r3, [r7, #17]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d105      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e6:	4b9e      	ldr	r3, [pc, #632]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ea:	4a9d      	ldr	r2, [pc, #628]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043fe:	4b98      	ldr	r3, [pc, #608]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f023 0203 	bic.w	r2, r3, #3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	4994      	ldr	r1, [pc, #592]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004420:	4b8f      	ldr	r3, [pc, #572]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f023 020c 	bic.w	r2, r3, #12
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442e:	498c      	ldr	r1, [pc, #560]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0304 	and.w	r3, r3, #4
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004442:	4b87      	ldr	r3, [pc, #540]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	4983      	ldr	r1, [pc, #524]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004464:	4b7e      	ldr	r3, [pc, #504]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	497b      	ldr	r1, [pc, #492]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004486:	4b76      	ldr	r3, [pc, #472]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004494:	4972      	ldr	r1, [pc, #456]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044a8:	4b6d      	ldr	r3, [pc, #436]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b6:	496a      	ldr	r1, [pc, #424]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044ca:	4b65      	ldr	r3, [pc, #404]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d8:	4961      	ldr	r1, [pc, #388]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044ec:	4b5c      	ldr	r3, [pc, #368]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fa:	4959      	ldr	r1, [pc, #356]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800450e:	4b54      	ldr	r3, [pc, #336]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004514:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800451c:	4950      	ldr	r1, [pc, #320]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004530:	4b4b      	ldr	r3, [pc, #300]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	4948      	ldr	r1, [pc, #288]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004552:	4b43      	ldr	r3, [pc, #268]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004558:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004560:	493f      	ldr	r1, [pc, #252]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d028      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004574:	4b3a      	ldr	r3, [pc, #232]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004582:	4937      	ldr	r1, [pc, #220]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800458e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004592:	d106      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004594:	4b32      	ldr	r3, [pc, #200]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	4a31      	ldr	r2, [pc, #196]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800459e:	60d3      	str	r3, [r2, #12]
 80045a0:	e011      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045aa:	d10c      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3304      	adds	r3, #4
 80045b0:	2101      	movs	r1, #1
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 f8c8 	bl	8004748 <RCCEx_PLLSAI1_Config>
 80045b8:	4603      	mov	r3, r0
 80045ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045bc:	7cfb      	ldrb	r3, [r7, #19]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80045c2:	7cfb      	ldrb	r3, [r7, #19]
 80045c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d028      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045d2:	4b23      	ldr	r3, [pc, #140]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	491f      	ldr	r1, [pc, #124]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f0:	d106      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f2:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	4a1a      	ldr	r2, [pc, #104]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045fc:	60d3      	str	r3, [r2, #12]
 80045fe:	e011      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004608:	d10c      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3304      	adds	r3, #4
 800460e:	2101      	movs	r1, #1
 8004610:	4618      	mov	r0, r3
 8004612:	f000 f899 	bl	8004748 <RCCEx_PLLSAI1_Config>
 8004616:	4603      	mov	r3, r0
 8004618:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800461a:	7cfb      	ldrb	r3, [r7, #19]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d02b      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800463e:	4908      	ldr	r1, [pc, #32]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800464e:	d109      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004650:	4b03      	ldr	r3, [pc, #12]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	4a02      	ldr	r2, [pc, #8]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800465a:	60d3      	str	r3, [r2, #12]
 800465c:	e014      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004668:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800466c:	d10c      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3304      	adds	r3, #4
 8004672:	2101      	movs	r1, #1
 8004674:	4618      	mov	r0, r3
 8004676:	f000 f867 	bl	8004748 <RCCEx_PLLSAI1_Config>
 800467a:	4603      	mov	r3, r0
 800467c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800467e:	7cfb      	ldrb	r3, [r7, #19]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004684:	7cfb      	ldrb	r3, [r7, #19]
 8004686:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d02f      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004694:	4b2b      	ldr	r3, [pc, #172]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046a2:	4928      	ldr	r1, [pc, #160]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046b2:	d10d      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3304      	adds	r3, #4
 80046b8:	2102      	movs	r1, #2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 f844 	bl	8004748 <RCCEx_PLLSAI1_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d014      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046ca:	7cfb      	ldrb	r3, [r7, #19]
 80046cc:	74bb      	strb	r3, [r7, #18]
 80046ce:	e011      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046d8:	d10c      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3320      	adds	r3, #32
 80046de:	2102      	movs	r1, #2
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 f925 	bl	8004930 <RCCEx_PLLSAI2_Config>
 80046e6:	4603      	mov	r3, r0
 80046e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ea:	7cfb      	ldrb	r3, [r7, #19]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046f0:	7cfb      	ldrb	r3, [r7, #19]
 80046f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004700:	4b10      	ldr	r3, [pc, #64]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004706:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800470e:	490d      	ldr	r1, [pc, #52]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004710:	4313      	orrs	r3, r2
 8004712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004722:	4b08      	ldr	r3, [pc, #32]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004728:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004732:	4904      	ldr	r1, [pc, #16]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800473a:	7cbb      	ldrb	r3, [r7, #18]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40021000 	.word	0x40021000

08004748 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004756:	4b75      	ldr	r3, [pc, #468]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d018      	beq.n	8004794 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004762:	4b72      	ldr	r3, [pc, #456]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f003 0203 	and.w	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d10d      	bne.n	800478e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
       ||
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800477a:	4b6c      	ldr	r3, [pc, #432]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	091b      	lsrs	r3, r3, #4
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
       ||
 800478a:	429a      	cmp	r2, r3
 800478c:	d047      	beq.n	800481e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
 8004792:	e044      	b.n	800481e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b03      	cmp	r3, #3
 800479a:	d018      	beq.n	80047ce <RCCEx_PLLSAI1_Config+0x86>
 800479c:	2b03      	cmp	r3, #3
 800479e:	d825      	bhi.n	80047ec <RCCEx_PLLSAI1_Config+0xa4>
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d002      	beq.n	80047aa <RCCEx_PLLSAI1_Config+0x62>
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d009      	beq.n	80047bc <RCCEx_PLLSAI1_Config+0x74>
 80047a8:	e020      	b.n	80047ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047aa:	4b60      	ldr	r3, [pc, #384]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d11d      	bne.n	80047f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ba:	e01a      	b.n	80047f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047bc:	4b5b      	ldr	r3, [pc, #364]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d116      	bne.n	80047f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047cc:	e013      	b.n	80047f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047ce:	4b57      	ldr	r3, [pc, #348]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10f      	bne.n	80047fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047da:	4b54      	ldr	r3, [pc, #336]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d109      	bne.n	80047fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047ea:	e006      	b.n	80047fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
      break;
 80047f0:	e004      	b.n	80047fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047f2:	bf00      	nop
 80047f4:	e002      	b.n	80047fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047f6:	bf00      	nop
 80047f8:	e000      	b.n	80047fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10d      	bne.n	800481e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004802:	4b4a      	ldr	r3, [pc, #296]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6819      	ldr	r1, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	3b01      	subs	r3, #1
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	430b      	orrs	r3, r1
 8004818:	4944      	ldr	r1, [pc, #272]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 800481a:	4313      	orrs	r3, r2
 800481c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800481e:	7bfb      	ldrb	r3, [r7, #15]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d17d      	bne.n	8004920 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004824:	4b41      	ldr	r3, [pc, #260]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a40      	ldr	r2, [pc, #256]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 800482a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800482e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004830:	f7fe fb6e 	bl	8002f10 <HAL_GetTick>
 8004834:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004836:	e009      	b.n	800484c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004838:	f7fe fb6a 	bl	8002f10 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d902      	bls.n	800484c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	73fb      	strb	r3, [r7, #15]
        break;
 800484a:	e005      	b.n	8004858 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800484c:	4b37      	ldr	r3, [pc, #220]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1ef      	bne.n	8004838 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d160      	bne.n	8004920 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d111      	bne.n	8004888 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004864:	4b31      	ldr	r3, [pc, #196]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800486c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6892      	ldr	r2, [r2, #8]
 8004874:	0211      	lsls	r1, r2, #8
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	68d2      	ldr	r2, [r2, #12]
 800487a:	0912      	lsrs	r2, r2, #4
 800487c:	0452      	lsls	r2, r2, #17
 800487e:	430a      	orrs	r2, r1
 8004880:	492a      	ldr	r1, [pc, #168]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004882:	4313      	orrs	r3, r2
 8004884:	610b      	str	r3, [r1, #16]
 8004886:	e027      	b.n	80048d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d112      	bne.n	80048b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800488e:	4b27      	ldr	r3, [pc, #156]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004896:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6892      	ldr	r2, [r2, #8]
 800489e:	0211      	lsls	r1, r2, #8
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6912      	ldr	r2, [r2, #16]
 80048a4:	0852      	lsrs	r2, r2, #1
 80048a6:	3a01      	subs	r2, #1
 80048a8:	0552      	lsls	r2, r2, #21
 80048aa:	430a      	orrs	r2, r1
 80048ac:	491f      	ldr	r1, [pc, #124]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	610b      	str	r3, [r1, #16]
 80048b2:	e011      	b.n	80048d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048b4:	4b1d      	ldr	r3, [pc, #116]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6892      	ldr	r2, [r2, #8]
 80048c4:	0211      	lsls	r1, r2, #8
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6952      	ldr	r2, [r2, #20]
 80048ca:	0852      	lsrs	r2, r2, #1
 80048cc:	3a01      	subs	r2, #1
 80048ce:	0652      	lsls	r2, r2, #25
 80048d0:	430a      	orrs	r2, r1
 80048d2:	4916      	ldr	r1, [pc, #88]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048d8:	4b14      	ldr	r3, [pc, #80]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a13      	ldr	r2, [pc, #76]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e4:	f7fe fb14 	bl	8002f10 <HAL_GetTick>
 80048e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048ea:	e009      	b.n	8004900 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048ec:	f7fe fb10 	bl	8002f10 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d902      	bls.n	8004900 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	73fb      	strb	r3, [r7, #15]
          break;
 80048fe:	e005      	b.n	800490c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004900:	4b0a      	ldr	r3, [pc, #40]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0ef      	beq.n	80048ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004912:	4b06      	ldr	r3, [pc, #24]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	4904      	ldr	r1, [pc, #16]	; (800492c <RCCEx_PLLSAI1_Config+0x1e4>)
 800491c:	4313      	orrs	r3, r2
 800491e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004920:	7bfb      	ldrb	r3, [r7, #15]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40021000 	.word	0x40021000

08004930 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800493e:	4b6a      	ldr	r3, [pc, #424]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d018      	beq.n	800497c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800494a:	4b67      	ldr	r3, [pc, #412]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f003 0203 	and.w	r2, r3, #3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d10d      	bne.n	8004976 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
       ||
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004962:	4b61      	ldr	r3, [pc, #388]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	091b      	lsrs	r3, r3, #4
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
       ||
 8004972:	429a      	cmp	r2, r3
 8004974:	d047      	beq.n	8004a06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	73fb      	strb	r3, [r7, #15]
 800497a:	e044      	b.n	8004a06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b03      	cmp	r3, #3
 8004982:	d018      	beq.n	80049b6 <RCCEx_PLLSAI2_Config+0x86>
 8004984:	2b03      	cmp	r3, #3
 8004986:	d825      	bhi.n	80049d4 <RCCEx_PLLSAI2_Config+0xa4>
 8004988:	2b01      	cmp	r3, #1
 800498a:	d002      	beq.n	8004992 <RCCEx_PLLSAI2_Config+0x62>
 800498c:	2b02      	cmp	r3, #2
 800498e:	d009      	beq.n	80049a4 <RCCEx_PLLSAI2_Config+0x74>
 8004990:	e020      	b.n	80049d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004992:	4b55      	ldr	r3, [pc, #340]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d11d      	bne.n	80049da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a2:	e01a      	b.n	80049da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049a4:	4b50      	ldr	r3, [pc, #320]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d116      	bne.n	80049de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b4:	e013      	b.n	80049de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049b6:	4b4c      	ldr	r3, [pc, #304]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10f      	bne.n	80049e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049c2:	4b49      	ldr	r3, [pc, #292]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049d2:	e006      	b.n	80049e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
      break;
 80049d8:	e004      	b.n	80049e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049da:	bf00      	nop
 80049dc:	e002      	b.n	80049e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049de:	bf00      	nop
 80049e0:	e000      	b.n	80049e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10d      	bne.n	8004a06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049ea:	4b3f      	ldr	r3, [pc, #252]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6819      	ldr	r1, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	430b      	orrs	r3, r1
 8004a00:	4939      	ldr	r1, [pc, #228]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d167      	bne.n	8004adc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a0c:	4b36      	ldr	r3, [pc, #216]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a35      	ldr	r2, [pc, #212]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a18:	f7fe fa7a 	bl	8002f10 <HAL_GetTick>
 8004a1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a1e:	e009      	b.n	8004a34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a20:	f7fe fa76 	bl	8002f10 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d902      	bls.n	8004a34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	73fb      	strb	r3, [r7, #15]
        break;
 8004a32:	e005      	b.n	8004a40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a34:	4b2c      	ldr	r3, [pc, #176]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1ef      	bne.n	8004a20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d14a      	bne.n	8004adc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d111      	bne.n	8004a70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a4c:	4b26      	ldr	r3, [pc, #152]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6892      	ldr	r2, [r2, #8]
 8004a5c:	0211      	lsls	r1, r2, #8
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68d2      	ldr	r2, [r2, #12]
 8004a62:	0912      	lsrs	r2, r2, #4
 8004a64:	0452      	lsls	r2, r2, #17
 8004a66:	430a      	orrs	r2, r1
 8004a68:	491f      	ldr	r1, [pc, #124]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	614b      	str	r3, [r1, #20]
 8004a6e:	e011      	b.n	8004a94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a70:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6892      	ldr	r2, [r2, #8]
 8004a80:	0211      	lsls	r1, r2, #8
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6912      	ldr	r2, [r2, #16]
 8004a86:	0852      	lsrs	r2, r2, #1
 8004a88:	3a01      	subs	r2, #1
 8004a8a:	0652      	lsls	r2, r2, #25
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	4916      	ldr	r1, [pc, #88]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a94:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa0:	f7fe fa36 	bl	8002f10 <HAL_GetTick>
 8004aa4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aa6:	e009      	b.n	8004abc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004aa8:	f7fe fa32 	bl	8002f10 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d902      	bls.n	8004abc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	73fb      	strb	r3, [r7, #15]
          break;
 8004aba:	e005      	b.n	8004ac8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0ef      	beq.n	8004aa8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ace:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad0:	695a      	ldr	r2, [r3, #20]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	4904      	ldr	r1, [pc, #16]	; (8004ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40021000 	.word	0x40021000

08004aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e049      	b.n	8004b92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f841 	bl	8004b9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3304      	adds	r3, #4
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f000 f9f8 	bl	8004f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
	...

08004bb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d001      	beq.n	8004bc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e04f      	b.n	8004c68 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a23      	ldr	r2, [pc, #140]	; (8004c74 <HAL_TIM_Base_Start_IT+0xc4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d01d      	beq.n	8004c26 <HAL_TIM_Base_Start_IT+0x76>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf2:	d018      	beq.n	8004c26 <HAL_TIM_Base_Start_IT+0x76>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1f      	ldr	r2, [pc, #124]	; (8004c78 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d013      	beq.n	8004c26 <HAL_TIM_Base_Start_IT+0x76>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1e      	ldr	r2, [pc, #120]	; (8004c7c <HAL_TIM_Base_Start_IT+0xcc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_TIM_Base_Start_IT+0x76>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1c      	ldr	r2, [pc, #112]	; (8004c80 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d009      	beq.n	8004c26 <HAL_TIM_Base_Start_IT+0x76>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1b      	ldr	r2, [pc, #108]	; (8004c84 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_TIM_Base_Start_IT+0x76>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a19      	ldr	r2, [pc, #100]	; (8004c88 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d115      	bne.n	8004c52 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	4b17      	ldr	r3, [pc, #92]	; (8004c8c <HAL_TIM_Base_Start_IT+0xdc>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b06      	cmp	r3, #6
 8004c36:	d015      	beq.n	8004c64 <HAL_TIM_Base_Start_IT+0xb4>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3e:	d011      	beq.n	8004c64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c50:	e008      	b.n	8004c64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0201 	orr.w	r2, r2, #1
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	e000      	b.n	8004c66 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	40012c00 	.word	0x40012c00
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800
 8004c80:	40000c00 	.word	0x40000c00
 8004c84:	40013400 	.word	0x40013400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	00010007 	.word	0x00010007

08004c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d122      	bne.n	8004cec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d11b      	bne.n	8004cec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0202 	mvn.w	r2, #2
 8004cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f905 	bl	8004ee2 <HAL_TIM_IC_CaptureCallback>
 8004cd8:	e005      	b.n	8004ce6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f8f7 	bl	8004ece <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f908 	bl	8004ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d122      	bne.n	8004d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d11b      	bne.n	8004d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0204 	mvn.w	r2, #4
 8004d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f8db 	bl	8004ee2 <HAL_TIM_IC_CaptureCallback>
 8004d2c:	e005      	b.n	8004d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f8cd 	bl	8004ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f8de 	bl	8004ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d122      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d11b      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0208 	mvn.w	r2, #8
 8004d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2204      	movs	r2, #4
 8004d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f8b1 	bl	8004ee2 <HAL_TIM_IC_CaptureCallback>
 8004d80:	e005      	b.n	8004d8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f8a3 	bl	8004ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f8b4 	bl	8004ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0310 	and.w	r3, r3, #16
 8004d9e:	2b10      	cmp	r3, #16
 8004da0:	d122      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	2b10      	cmp	r3, #16
 8004dae:	d11b      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0210 	mvn.w	r2, #16
 8004db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2208      	movs	r2, #8
 8004dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f887 	bl	8004ee2 <HAL_TIM_IC_CaptureCallback>
 8004dd4:	e005      	b.n	8004de2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f879 	bl	8004ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f88a 	bl	8004ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d10e      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d107      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0201 	mvn.w	r2, #1
 8004e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fc fa14 	bl	800123c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1e:	2b80      	cmp	r3, #128	; 0x80
 8004e20:	d10e      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2c:	2b80      	cmp	r3, #128	; 0x80
 8004e2e:	d107      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f914 	bl	8005068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4e:	d10e      	bne.n	8004e6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5a:	2b80      	cmp	r3, #128	; 0x80
 8004e5c:	d107      	bne.n	8004e6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f907 	bl	800507c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b40      	cmp	r3, #64	; 0x40
 8004e7a:	d10e      	bne.n	8004e9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	2b40      	cmp	r3, #64	; 0x40
 8004e88:	d107      	bne.n	8004e9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f838 	bl	8004f0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	d10e      	bne.n	8004ec6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	d107      	bne.n	8004ec6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f06f 0220 	mvn.w	r2, #32
 8004ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f8c7 	bl	8005054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ec6:	bf00      	nop
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
	...

08004f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a40      	ldr	r2, [pc, #256]	; (8005034 <TIM_Base_SetConfig+0x114>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d013      	beq.n	8004f60 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3e:	d00f      	beq.n	8004f60 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a3d      	ldr	r2, [pc, #244]	; (8005038 <TIM_Base_SetConfig+0x118>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00b      	beq.n	8004f60 <TIM_Base_SetConfig+0x40>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a3c      	ldr	r2, [pc, #240]	; (800503c <TIM_Base_SetConfig+0x11c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d007      	beq.n	8004f60 <TIM_Base_SetConfig+0x40>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a3b      	ldr	r2, [pc, #236]	; (8005040 <TIM_Base_SetConfig+0x120>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d003      	beq.n	8004f60 <TIM_Base_SetConfig+0x40>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a3a      	ldr	r2, [pc, #232]	; (8005044 <TIM_Base_SetConfig+0x124>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d108      	bne.n	8004f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2f      	ldr	r2, [pc, #188]	; (8005034 <TIM_Base_SetConfig+0x114>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d01f      	beq.n	8004fba <TIM_Base_SetConfig+0x9a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f80:	d01b      	beq.n	8004fba <TIM_Base_SetConfig+0x9a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2c      	ldr	r2, [pc, #176]	; (8005038 <TIM_Base_SetConfig+0x118>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d017      	beq.n	8004fba <TIM_Base_SetConfig+0x9a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a2b      	ldr	r2, [pc, #172]	; (800503c <TIM_Base_SetConfig+0x11c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <TIM_Base_SetConfig+0x9a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a2a      	ldr	r2, [pc, #168]	; (8005040 <TIM_Base_SetConfig+0x120>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00f      	beq.n	8004fba <TIM_Base_SetConfig+0x9a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a29      	ldr	r2, [pc, #164]	; (8005044 <TIM_Base_SetConfig+0x124>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00b      	beq.n	8004fba <TIM_Base_SetConfig+0x9a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a28      	ldr	r2, [pc, #160]	; (8005048 <TIM_Base_SetConfig+0x128>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d007      	beq.n	8004fba <TIM_Base_SetConfig+0x9a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a27      	ldr	r2, [pc, #156]	; (800504c <TIM_Base_SetConfig+0x12c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_Base_SetConfig+0x9a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a26      	ldr	r2, [pc, #152]	; (8005050 <TIM_Base_SetConfig+0x130>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d108      	bne.n	8004fcc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a10      	ldr	r2, [pc, #64]	; (8005034 <TIM_Base_SetConfig+0x114>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00f      	beq.n	8005018 <TIM_Base_SetConfig+0xf8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a12      	ldr	r2, [pc, #72]	; (8005044 <TIM_Base_SetConfig+0x124>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d00b      	beq.n	8005018 <TIM_Base_SetConfig+0xf8>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a11      	ldr	r2, [pc, #68]	; (8005048 <TIM_Base_SetConfig+0x128>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d007      	beq.n	8005018 <TIM_Base_SetConfig+0xf8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a10      	ldr	r2, [pc, #64]	; (800504c <TIM_Base_SetConfig+0x12c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d003      	beq.n	8005018 <TIM_Base_SetConfig+0xf8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a0f      	ldr	r2, [pc, #60]	; (8005050 <TIM_Base_SetConfig+0x130>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d103      	bne.n	8005020 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	615a      	str	r2, [r3, #20]
}
 8005026:	bf00      	nop
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40012c00 	.word	0x40012c00
 8005038:	40000400 	.word	0x40000400
 800503c:	40000800 	.word	0x40000800
 8005040:	40000c00 	.word	0x40000c00
 8005044:	40013400 	.word	0x40013400
 8005048:	40014000 	.word	0x40014000
 800504c:	40014400 	.word	0x40014400
 8005050:	40014800 	.word	0x40014800

08005054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e040      	b.n	8005124 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fd fd40 	bl	8002b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2224      	movs	r2, #36	; 0x24
 80050bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0201 	bic.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f8c0 	bl	8005254 <UART_SetConfig>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e022      	b.n	8005124 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fb3e 	bl	8005768 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800510a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fbc5 	bl	80058ac <UART_CheckIdleState>
 8005122:	4603      	mov	r3, r0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08a      	sub	sp, #40	; 0x28
 8005130:	af02      	add	r7, sp, #8
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005140:	2b20      	cmp	r3, #32
 8005142:	f040 8082 	bne.w	800524a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <HAL_UART_Transmit+0x26>
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e07a      	b.n	800524c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_UART_Transmit+0x38>
 8005160:	2302      	movs	r3, #2
 8005162:	e073      	b.n	800524c <HAL_UART_Transmit+0x120>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2221      	movs	r2, #33	; 0x21
 8005178:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800517a:	f7fd fec9 	bl	8002f10 <HAL_GetTick>
 800517e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	88fa      	ldrh	r2, [r7, #6]
 8005184:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	88fa      	ldrh	r2, [r7, #6]
 800518c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005198:	d108      	bne.n	80051ac <HAL_UART_Transmit+0x80>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	e003      	b.n	80051b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80051bc:	e02d      	b.n	800521a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2200      	movs	r2, #0
 80051c6:	2180      	movs	r1, #128	; 0x80
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 fbb8 	bl	800593e <UART_WaitOnFlagUntilTimeout>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e039      	b.n	800524c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10b      	bne.n	80051f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	881a      	ldrh	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ea:	b292      	uxth	r2, r2
 80051ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	3302      	adds	r3, #2
 80051f2:	61bb      	str	r3, [r7, #24]
 80051f4:	e008      	b.n	8005208 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	781a      	ldrb	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	b292      	uxth	r2, r2
 8005200:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	3301      	adds	r3, #1
 8005206:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800520e:	b29b      	uxth	r3, r3
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1cb      	bne.n	80051be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2200      	movs	r2, #0
 800522e:	2140      	movs	r1, #64	; 0x40
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fb84 	bl	800593e <UART_WaitOnFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e005      	b.n	800524c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	e000      	b.n	800524c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800524a:	2302      	movs	r3, #2
  }
}
 800524c:	4618      	mov	r0, r3
 800524e:	3720      	adds	r7, #32
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005254:	b5b0      	push	{r4, r5, r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	4313      	orrs	r3, r2
 8005276:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4bad      	ldr	r3, [pc, #692]	; (8005534 <UART_SetConfig+0x2e0>)
 8005280:	4013      	ands	r3, r2
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6812      	ldr	r2, [r2, #0]
 8005286:	69f9      	ldr	r1, [r7, #28]
 8005288:	430b      	orrs	r3, r1
 800528a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4aa2      	ldr	r2, [pc, #648]	; (8005538 <UART_SetConfig+0x2e4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a99      	ldr	r2, [pc, #612]	; (800553c <UART_SetConfig+0x2e8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d121      	bne.n	800531e <UART_SetConfig+0xca>
 80052da:	4b99      	ldr	r3, [pc, #612]	; (8005540 <UART_SetConfig+0x2ec>)
 80052dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d817      	bhi.n	8005318 <UART_SetConfig+0xc4>
 80052e8:	a201      	add	r2, pc, #4	; (adr r2, 80052f0 <UART_SetConfig+0x9c>)
 80052ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ee:	bf00      	nop
 80052f0:	08005301 	.word	0x08005301
 80052f4:	0800530d 	.word	0x0800530d
 80052f8:	08005307 	.word	0x08005307
 80052fc:	08005313 	.word	0x08005313
 8005300:	2301      	movs	r3, #1
 8005302:	76fb      	strb	r3, [r7, #27]
 8005304:	e0e7      	b.n	80054d6 <UART_SetConfig+0x282>
 8005306:	2302      	movs	r3, #2
 8005308:	76fb      	strb	r3, [r7, #27]
 800530a:	e0e4      	b.n	80054d6 <UART_SetConfig+0x282>
 800530c:	2304      	movs	r3, #4
 800530e:	76fb      	strb	r3, [r7, #27]
 8005310:	e0e1      	b.n	80054d6 <UART_SetConfig+0x282>
 8005312:	2308      	movs	r3, #8
 8005314:	76fb      	strb	r3, [r7, #27]
 8005316:	e0de      	b.n	80054d6 <UART_SetConfig+0x282>
 8005318:	2310      	movs	r3, #16
 800531a:	76fb      	strb	r3, [r7, #27]
 800531c:	e0db      	b.n	80054d6 <UART_SetConfig+0x282>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a88      	ldr	r2, [pc, #544]	; (8005544 <UART_SetConfig+0x2f0>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d132      	bne.n	800538e <UART_SetConfig+0x13a>
 8005328:	4b85      	ldr	r3, [pc, #532]	; (8005540 <UART_SetConfig+0x2ec>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532e:	f003 030c 	and.w	r3, r3, #12
 8005332:	2b0c      	cmp	r3, #12
 8005334:	d828      	bhi.n	8005388 <UART_SetConfig+0x134>
 8005336:	a201      	add	r2, pc, #4	; (adr r2, 800533c <UART_SetConfig+0xe8>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	08005371 	.word	0x08005371
 8005340:	08005389 	.word	0x08005389
 8005344:	08005389 	.word	0x08005389
 8005348:	08005389 	.word	0x08005389
 800534c:	0800537d 	.word	0x0800537d
 8005350:	08005389 	.word	0x08005389
 8005354:	08005389 	.word	0x08005389
 8005358:	08005389 	.word	0x08005389
 800535c:	08005377 	.word	0x08005377
 8005360:	08005389 	.word	0x08005389
 8005364:	08005389 	.word	0x08005389
 8005368:	08005389 	.word	0x08005389
 800536c:	08005383 	.word	0x08005383
 8005370:	2300      	movs	r3, #0
 8005372:	76fb      	strb	r3, [r7, #27]
 8005374:	e0af      	b.n	80054d6 <UART_SetConfig+0x282>
 8005376:	2302      	movs	r3, #2
 8005378:	76fb      	strb	r3, [r7, #27]
 800537a:	e0ac      	b.n	80054d6 <UART_SetConfig+0x282>
 800537c:	2304      	movs	r3, #4
 800537e:	76fb      	strb	r3, [r7, #27]
 8005380:	e0a9      	b.n	80054d6 <UART_SetConfig+0x282>
 8005382:	2308      	movs	r3, #8
 8005384:	76fb      	strb	r3, [r7, #27]
 8005386:	e0a6      	b.n	80054d6 <UART_SetConfig+0x282>
 8005388:	2310      	movs	r3, #16
 800538a:	76fb      	strb	r3, [r7, #27]
 800538c:	e0a3      	b.n	80054d6 <UART_SetConfig+0x282>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a6d      	ldr	r2, [pc, #436]	; (8005548 <UART_SetConfig+0x2f4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d120      	bne.n	80053da <UART_SetConfig+0x186>
 8005398:	4b69      	ldr	r3, [pc, #420]	; (8005540 <UART_SetConfig+0x2ec>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053a2:	2b30      	cmp	r3, #48	; 0x30
 80053a4:	d013      	beq.n	80053ce <UART_SetConfig+0x17a>
 80053a6:	2b30      	cmp	r3, #48	; 0x30
 80053a8:	d814      	bhi.n	80053d4 <UART_SetConfig+0x180>
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d009      	beq.n	80053c2 <UART_SetConfig+0x16e>
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	d810      	bhi.n	80053d4 <UART_SetConfig+0x180>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <UART_SetConfig+0x168>
 80053b6:	2b10      	cmp	r3, #16
 80053b8:	d006      	beq.n	80053c8 <UART_SetConfig+0x174>
 80053ba:	e00b      	b.n	80053d4 <UART_SetConfig+0x180>
 80053bc:	2300      	movs	r3, #0
 80053be:	76fb      	strb	r3, [r7, #27]
 80053c0:	e089      	b.n	80054d6 <UART_SetConfig+0x282>
 80053c2:	2302      	movs	r3, #2
 80053c4:	76fb      	strb	r3, [r7, #27]
 80053c6:	e086      	b.n	80054d6 <UART_SetConfig+0x282>
 80053c8:	2304      	movs	r3, #4
 80053ca:	76fb      	strb	r3, [r7, #27]
 80053cc:	e083      	b.n	80054d6 <UART_SetConfig+0x282>
 80053ce:	2308      	movs	r3, #8
 80053d0:	76fb      	strb	r3, [r7, #27]
 80053d2:	e080      	b.n	80054d6 <UART_SetConfig+0x282>
 80053d4:	2310      	movs	r3, #16
 80053d6:	76fb      	strb	r3, [r7, #27]
 80053d8:	e07d      	b.n	80054d6 <UART_SetConfig+0x282>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a5b      	ldr	r2, [pc, #364]	; (800554c <UART_SetConfig+0x2f8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d120      	bne.n	8005426 <UART_SetConfig+0x1d2>
 80053e4:	4b56      	ldr	r3, [pc, #344]	; (8005540 <UART_SetConfig+0x2ec>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053ee:	2bc0      	cmp	r3, #192	; 0xc0
 80053f0:	d013      	beq.n	800541a <UART_SetConfig+0x1c6>
 80053f2:	2bc0      	cmp	r3, #192	; 0xc0
 80053f4:	d814      	bhi.n	8005420 <UART_SetConfig+0x1cc>
 80053f6:	2b80      	cmp	r3, #128	; 0x80
 80053f8:	d009      	beq.n	800540e <UART_SetConfig+0x1ba>
 80053fa:	2b80      	cmp	r3, #128	; 0x80
 80053fc:	d810      	bhi.n	8005420 <UART_SetConfig+0x1cc>
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <UART_SetConfig+0x1b4>
 8005402:	2b40      	cmp	r3, #64	; 0x40
 8005404:	d006      	beq.n	8005414 <UART_SetConfig+0x1c0>
 8005406:	e00b      	b.n	8005420 <UART_SetConfig+0x1cc>
 8005408:	2300      	movs	r3, #0
 800540a:	76fb      	strb	r3, [r7, #27]
 800540c:	e063      	b.n	80054d6 <UART_SetConfig+0x282>
 800540e:	2302      	movs	r3, #2
 8005410:	76fb      	strb	r3, [r7, #27]
 8005412:	e060      	b.n	80054d6 <UART_SetConfig+0x282>
 8005414:	2304      	movs	r3, #4
 8005416:	76fb      	strb	r3, [r7, #27]
 8005418:	e05d      	b.n	80054d6 <UART_SetConfig+0x282>
 800541a:	2308      	movs	r3, #8
 800541c:	76fb      	strb	r3, [r7, #27]
 800541e:	e05a      	b.n	80054d6 <UART_SetConfig+0x282>
 8005420:	2310      	movs	r3, #16
 8005422:	76fb      	strb	r3, [r7, #27]
 8005424:	e057      	b.n	80054d6 <UART_SetConfig+0x282>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a49      	ldr	r2, [pc, #292]	; (8005550 <UART_SetConfig+0x2fc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d125      	bne.n	800547c <UART_SetConfig+0x228>
 8005430:	4b43      	ldr	r3, [pc, #268]	; (8005540 <UART_SetConfig+0x2ec>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800543a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800543e:	d017      	beq.n	8005470 <UART_SetConfig+0x21c>
 8005440:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005444:	d817      	bhi.n	8005476 <UART_SetConfig+0x222>
 8005446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800544a:	d00b      	beq.n	8005464 <UART_SetConfig+0x210>
 800544c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005450:	d811      	bhi.n	8005476 <UART_SetConfig+0x222>
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <UART_SetConfig+0x20a>
 8005456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800545a:	d006      	beq.n	800546a <UART_SetConfig+0x216>
 800545c:	e00b      	b.n	8005476 <UART_SetConfig+0x222>
 800545e:	2300      	movs	r3, #0
 8005460:	76fb      	strb	r3, [r7, #27]
 8005462:	e038      	b.n	80054d6 <UART_SetConfig+0x282>
 8005464:	2302      	movs	r3, #2
 8005466:	76fb      	strb	r3, [r7, #27]
 8005468:	e035      	b.n	80054d6 <UART_SetConfig+0x282>
 800546a:	2304      	movs	r3, #4
 800546c:	76fb      	strb	r3, [r7, #27]
 800546e:	e032      	b.n	80054d6 <UART_SetConfig+0x282>
 8005470:	2308      	movs	r3, #8
 8005472:	76fb      	strb	r3, [r7, #27]
 8005474:	e02f      	b.n	80054d6 <UART_SetConfig+0x282>
 8005476:	2310      	movs	r3, #16
 8005478:	76fb      	strb	r3, [r7, #27]
 800547a:	e02c      	b.n	80054d6 <UART_SetConfig+0x282>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a2d      	ldr	r2, [pc, #180]	; (8005538 <UART_SetConfig+0x2e4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d125      	bne.n	80054d2 <UART_SetConfig+0x27e>
 8005486:	4b2e      	ldr	r3, [pc, #184]	; (8005540 <UART_SetConfig+0x2ec>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005490:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005494:	d017      	beq.n	80054c6 <UART_SetConfig+0x272>
 8005496:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800549a:	d817      	bhi.n	80054cc <UART_SetConfig+0x278>
 800549c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054a0:	d00b      	beq.n	80054ba <UART_SetConfig+0x266>
 80054a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054a6:	d811      	bhi.n	80054cc <UART_SetConfig+0x278>
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <UART_SetConfig+0x260>
 80054ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b0:	d006      	beq.n	80054c0 <UART_SetConfig+0x26c>
 80054b2:	e00b      	b.n	80054cc <UART_SetConfig+0x278>
 80054b4:	2300      	movs	r3, #0
 80054b6:	76fb      	strb	r3, [r7, #27]
 80054b8:	e00d      	b.n	80054d6 <UART_SetConfig+0x282>
 80054ba:	2302      	movs	r3, #2
 80054bc:	76fb      	strb	r3, [r7, #27]
 80054be:	e00a      	b.n	80054d6 <UART_SetConfig+0x282>
 80054c0:	2304      	movs	r3, #4
 80054c2:	76fb      	strb	r3, [r7, #27]
 80054c4:	e007      	b.n	80054d6 <UART_SetConfig+0x282>
 80054c6:	2308      	movs	r3, #8
 80054c8:	76fb      	strb	r3, [r7, #27]
 80054ca:	e004      	b.n	80054d6 <UART_SetConfig+0x282>
 80054cc:	2310      	movs	r3, #16
 80054ce:	76fb      	strb	r3, [r7, #27]
 80054d0:	e001      	b.n	80054d6 <UART_SetConfig+0x282>
 80054d2:	2310      	movs	r3, #16
 80054d4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a17      	ldr	r2, [pc, #92]	; (8005538 <UART_SetConfig+0x2e4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	f040 8087 	bne.w	80055f0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054e2:	7efb      	ldrb	r3, [r7, #27]
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d837      	bhi.n	8005558 <UART_SetConfig+0x304>
 80054e8:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <UART_SetConfig+0x29c>)
 80054ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ee:	bf00      	nop
 80054f0:	08005515 	.word	0x08005515
 80054f4:	08005559 	.word	0x08005559
 80054f8:	0800551d 	.word	0x0800551d
 80054fc:	08005559 	.word	0x08005559
 8005500:	08005523 	.word	0x08005523
 8005504:	08005559 	.word	0x08005559
 8005508:	08005559 	.word	0x08005559
 800550c:	08005559 	.word	0x08005559
 8005510:	0800552b 	.word	0x0800552b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005514:	f7fe fd70 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8005518:	6178      	str	r0, [r7, #20]
        break;
 800551a:	e022      	b.n	8005562 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800551c:	4b0d      	ldr	r3, [pc, #52]	; (8005554 <UART_SetConfig+0x300>)
 800551e:	617b      	str	r3, [r7, #20]
        break;
 8005520:	e01f      	b.n	8005562 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005522:	f7fe fcd1 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8005526:	6178      	str	r0, [r7, #20]
        break;
 8005528:	e01b      	b.n	8005562 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800552a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800552e:	617b      	str	r3, [r7, #20]
        break;
 8005530:	e017      	b.n	8005562 <UART_SetConfig+0x30e>
 8005532:	bf00      	nop
 8005534:	efff69f3 	.word	0xefff69f3
 8005538:	40008000 	.word	0x40008000
 800553c:	40013800 	.word	0x40013800
 8005540:	40021000 	.word	0x40021000
 8005544:	40004400 	.word	0x40004400
 8005548:	40004800 	.word	0x40004800
 800554c:	40004c00 	.word	0x40004c00
 8005550:	40005000 	.word	0x40005000
 8005554:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	76bb      	strb	r3, [r7, #26]
        break;
 8005560:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 80f1 	beq.w	800574c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	4413      	add	r3, r2
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	429a      	cmp	r2, r3
 8005578:	d305      	bcc.n	8005586 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	429a      	cmp	r2, r3
 8005584:	d902      	bls.n	800558c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	76bb      	strb	r3, [r7, #26]
 800558a:	e0df      	b.n	800574c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	4618      	mov	r0, r3
 8005590:	f04f 0100 	mov.w	r1, #0
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	020b      	lsls	r3, r1, #8
 800559e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055a2:	0202      	lsls	r2, r0, #8
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	6849      	ldr	r1, [r1, #4]
 80055a8:	0849      	lsrs	r1, r1, #1
 80055aa:	4608      	mov	r0, r1
 80055ac:	f04f 0100 	mov.w	r1, #0
 80055b0:	1814      	adds	r4, r2, r0
 80055b2:	eb43 0501 	adc.w	r5, r3, r1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	4620      	mov	r0, r4
 80055c2:	4629      	mov	r1, r5
 80055c4:	f7fb faaa 	bl	8000b1c <__aeabi_uldivmod>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4613      	mov	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d6:	d308      	bcc.n	80055ea <UART_SetConfig+0x396>
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055de:	d204      	bcs.n	80055ea <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	60da      	str	r2, [r3, #12]
 80055e8:	e0b0      	b.n	800574c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	76bb      	strb	r3, [r7, #26]
 80055ee:	e0ad      	b.n	800574c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f8:	d15c      	bne.n	80056b4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80055fa:	7efb      	ldrb	r3, [r7, #27]
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d828      	bhi.n	8005652 <UART_SetConfig+0x3fe>
 8005600:	a201      	add	r2, pc, #4	; (adr r2, 8005608 <UART_SetConfig+0x3b4>)
 8005602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005606:	bf00      	nop
 8005608:	0800562d 	.word	0x0800562d
 800560c:	08005635 	.word	0x08005635
 8005610:	0800563d 	.word	0x0800563d
 8005614:	08005653 	.word	0x08005653
 8005618:	08005643 	.word	0x08005643
 800561c:	08005653 	.word	0x08005653
 8005620:	08005653 	.word	0x08005653
 8005624:	08005653 	.word	0x08005653
 8005628:	0800564b 	.word	0x0800564b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800562c:	f7fe fce4 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8005630:	6178      	str	r0, [r7, #20]
        break;
 8005632:	e013      	b.n	800565c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005634:	f7fe fcf6 	bl	8004024 <HAL_RCC_GetPCLK2Freq>
 8005638:	6178      	str	r0, [r7, #20]
        break;
 800563a:	e00f      	b.n	800565c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800563c:	4b49      	ldr	r3, [pc, #292]	; (8005764 <UART_SetConfig+0x510>)
 800563e:	617b      	str	r3, [r7, #20]
        break;
 8005640:	e00c      	b.n	800565c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005642:	f7fe fc41 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8005646:	6178      	str	r0, [r7, #20]
        break;
 8005648:	e008      	b.n	800565c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800564a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800564e:	617b      	str	r3, [r7, #20]
        break;
 8005650:	e004      	b.n	800565c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	76bb      	strb	r3, [r7, #26]
        break;
 800565a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d074      	beq.n	800574c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	005a      	lsls	r2, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	085b      	lsrs	r3, r3, #1
 800566c:	441a      	add	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	fbb2 f3f3 	udiv	r3, r2, r3
 8005676:	b29b      	uxth	r3, r3
 8005678:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	2b0f      	cmp	r3, #15
 800567e:	d916      	bls.n	80056ae <UART_SetConfig+0x45a>
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005686:	d212      	bcs.n	80056ae <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f023 030f 	bic.w	r3, r3, #15
 8005690:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	085b      	lsrs	r3, r3, #1
 8005696:	b29b      	uxth	r3, r3
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	b29a      	uxth	r2, r3
 800569e:	89fb      	ldrh	r3, [r7, #14]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	89fa      	ldrh	r2, [r7, #14]
 80056aa:	60da      	str	r2, [r3, #12]
 80056ac:	e04e      	b.n	800574c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	76bb      	strb	r3, [r7, #26]
 80056b2:	e04b      	b.n	800574c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056b4:	7efb      	ldrb	r3, [r7, #27]
 80056b6:	2b08      	cmp	r3, #8
 80056b8:	d827      	bhi.n	800570a <UART_SetConfig+0x4b6>
 80056ba:	a201      	add	r2, pc, #4	; (adr r2, 80056c0 <UART_SetConfig+0x46c>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056e5 	.word	0x080056e5
 80056c4:	080056ed 	.word	0x080056ed
 80056c8:	080056f5 	.word	0x080056f5
 80056cc:	0800570b 	.word	0x0800570b
 80056d0:	080056fb 	.word	0x080056fb
 80056d4:	0800570b 	.word	0x0800570b
 80056d8:	0800570b 	.word	0x0800570b
 80056dc:	0800570b 	.word	0x0800570b
 80056e0:	08005703 	.word	0x08005703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e4:	f7fe fc88 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 80056e8:	6178      	str	r0, [r7, #20]
        break;
 80056ea:	e013      	b.n	8005714 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056ec:	f7fe fc9a 	bl	8004024 <HAL_RCC_GetPCLK2Freq>
 80056f0:	6178      	str	r0, [r7, #20]
        break;
 80056f2:	e00f      	b.n	8005714 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f4:	4b1b      	ldr	r3, [pc, #108]	; (8005764 <UART_SetConfig+0x510>)
 80056f6:	617b      	str	r3, [r7, #20]
        break;
 80056f8:	e00c      	b.n	8005714 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fa:	f7fe fbe5 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 80056fe:	6178      	str	r0, [r7, #20]
        break;
 8005700:	e008      	b.n	8005714 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005706:	617b      	str	r3, [r7, #20]
        break;
 8005708:	e004      	b.n	8005714 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	76bb      	strb	r3, [r7, #26]
        break;
 8005712:	bf00      	nop
    }

    if (pclk != 0U)
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d018      	beq.n	800574c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	085a      	lsrs	r2, r3, #1
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	441a      	add	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	fbb2 f3f3 	udiv	r3, r2, r3
 800572c:	b29b      	uxth	r3, r3
 800572e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	2b0f      	cmp	r3, #15
 8005734:	d908      	bls.n	8005748 <UART_SetConfig+0x4f4>
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800573c:	d204      	bcs.n	8005748 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	60da      	str	r2, [r3, #12]
 8005746:	e001      	b.n	800574c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005758:	7ebb      	ldrb	r3, [r7, #26]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3720      	adds	r7, #32
 800575e:	46bd      	mov	sp, r7
 8005760:	bdb0      	pop	{r4, r5, r7, pc}
 8005762:	bf00      	nop
 8005764:	00f42400 	.word	0x00f42400

08005768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00a      	beq.n	8005792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00a      	beq.n	800581a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01a      	beq.n	800587e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005866:	d10a      	bne.n	800587e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	605a      	str	r2, [r3, #4]
  }
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af02      	add	r7, sp, #8
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058bc:	f7fd fb28 	bl	8002f10 <HAL_GetTick>
 80058c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d10e      	bne.n	80058ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f82d 	bl	800593e <UART_WaitOnFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e023      	b.n	8005936 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d10e      	bne.n	800591a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f817 	bl	800593e <UART_WaitOnFlagUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e00d      	b.n	8005936 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2220      	movs	r2, #32
 800591e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	603b      	str	r3, [r7, #0]
 800594a:	4613      	mov	r3, r2
 800594c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800594e:	e05e      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005956:	d05a      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005958:	f7fd fada 	bl	8002f10 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	429a      	cmp	r2, r3
 8005966:	d302      	bcc.n	800596e <UART_WaitOnFlagUntilTimeout+0x30>
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d11b      	bne.n	80059a6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800597c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0201 	bic.w	r2, r2, #1
 800598c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2220      	movs	r2, #32
 8005992:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e043      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d02c      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059c2:	d124      	bne.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059cc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059dc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0201 	bic.w	r2, r2, #1
 80059ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2220      	movs	r2, #32
 80059f2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e00f      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4013      	ands	r3, r2
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	bf0c      	ite	eq
 8005a1e:	2301      	moveq	r3, #1
 8005a20:	2300      	movne	r3, #0
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d091      	beq.n	8005950 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <__NVIC_SetPriority>:
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	6039      	str	r1, [r7, #0]
 8005a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	db0a      	blt.n	8005a62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	490c      	ldr	r1, [pc, #48]	; (8005a84 <__NVIC_SetPriority+0x4c>)
 8005a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a56:	0112      	lsls	r2, r2, #4
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a60:	e00a      	b.n	8005a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	4908      	ldr	r1, [pc, #32]	; (8005a88 <__NVIC_SetPriority+0x50>)
 8005a68:	79fb      	ldrb	r3, [r7, #7]
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	3b04      	subs	r3, #4
 8005a70:	0112      	lsls	r2, r2, #4
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	440b      	add	r3, r1
 8005a76:	761a      	strb	r2, [r3, #24]
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	e000e100 	.word	0xe000e100
 8005a88:	e000ed00 	.word	0xe000ed00

08005a8c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <SysTick_Handler+0x1c>)
 8005a92:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005a94:	f001 fee8 	bl	8007868 <xTaskGetSchedulerState>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d001      	beq.n	8005aa2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005a9e:	f002 fcd3 	bl	8008448 <xPortSysTickHandler>
  }
}
 8005aa2:	bf00      	nop
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	e000e010 	.word	0xe000e010

08005aac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	f06f 0004 	mvn.w	r0, #4
 8005ab6:	f7ff ffbf 	bl	8005a38 <__NVIC_SetPriority>
#endif
}
 8005aba:	bf00      	nop
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ac6:	f3ef 8305 	mrs	r3, IPSR
 8005aca:	603b      	str	r3, [r7, #0]
  return(result);
 8005acc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005ad2:	f06f 0305 	mvn.w	r3, #5
 8005ad6:	607b      	str	r3, [r7, #4]
 8005ad8:	e00c      	b.n	8005af4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005ada:	4b0a      	ldr	r3, [pc, #40]	; (8005b04 <osKernelInitialize+0x44>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d105      	bne.n	8005aee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005ae2:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <osKernelInitialize+0x44>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	607b      	str	r3, [r7, #4]
 8005aec:	e002      	b.n	8005af4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005aee:	f04f 33ff 	mov.w	r3, #4294967295
 8005af2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005af4:	687b      	ldr	r3, [r7, #4]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	20000098 	.word	0x20000098

08005b08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b0e:	f3ef 8305 	mrs	r3, IPSR
 8005b12:	603b      	str	r3, [r7, #0]
  return(result);
 8005b14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005b1a:	f06f 0305 	mvn.w	r3, #5
 8005b1e:	607b      	str	r3, [r7, #4]
 8005b20:	e010      	b.n	8005b44 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b22:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <osKernelStart+0x48>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d109      	bne.n	8005b3e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005b2a:	f7ff ffbf 	bl	8005aac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005b2e:	4b08      	ldr	r3, [pc, #32]	; (8005b50 <osKernelStart+0x48>)
 8005b30:	2202      	movs	r2, #2
 8005b32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005b34:	f001 fa50 	bl	8006fd8 <vTaskStartScheduler>
      stat = osOK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	607b      	str	r3, [r7, #4]
 8005b3c:	e002      	b.n	8005b44 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b44:	687b      	ldr	r3, [r7, #4]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000098 	.word	0x20000098

08005b54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08e      	sub	sp, #56	; 0x38
 8005b58:	af04      	add	r7, sp, #16
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b60:	2300      	movs	r3, #0
 8005b62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b64:	f3ef 8305 	mrs	r3, IPSR
 8005b68:	617b      	str	r3, [r7, #20]
  return(result);
 8005b6a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d17e      	bne.n	8005c6e <osThreadNew+0x11a>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d07b      	beq.n	8005c6e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005b76:	2380      	movs	r3, #128	; 0x80
 8005b78:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005b7a:	2318      	movs	r3, #24
 8005b7c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005b82:	f04f 33ff 	mov.w	r3, #4294967295
 8005b86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d045      	beq.n	8005c1a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <osThreadNew+0x48>
        name = attr->name;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d008      	beq.n	8005bc2 <osThreadNew+0x6e>
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	2b38      	cmp	r3, #56	; 0x38
 8005bb4:	d805      	bhi.n	8005bc2 <osThreadNew+0x6e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <osThreadNew+0x72>
        return (NULL);
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e054      	b.n	8005c70 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	089b      	lsrs	r3, r3, #2
 8005bd4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00e      	beq.n	8005bfc <osThreadNew+0xa8>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	2b5b      	cmp	r3, #91	; 0x5b
 8005be4:	d90a      	bls.n	8005bfc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d006      	beq.n	8005bfc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <osThreadNew+0xa8>
        mem = 1;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	e010      	b.n	8005c1e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10c      	bne.n	8005c1e <osThreadNew+0xca>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d108      	bne.n	8005c1e <osThreadNew+0xca>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d104      	bne.n	8005c1e <osThreadNew+0xca>
          mem = 0;
 8005c14:	2300      	movs	r3, #0
 8005c16:	61bb      	str	r3, [r7, #24]
 8005c18:	e001      	b.n	8005c1e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d110      	bne.n	8005c46 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c2c:	9202      	str	r2, [sp, #8]
 8005c2e:	9301      	str	r3, [sp, #4]
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	6a3a      	ldr	r2, [r7, #32]
 8005c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 fff6 	bl	8006c2c <xTaskCreateStatic>
 8005c40:	4603      	mov	r3, r0
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	e013      	b.n	8005c6e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d110      	bne.n	8005c6e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	f107 0310 	add.w	r3, r7, #16
 8005c54:	9301      	str	r3, [sp, #4]
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f001 f841 	bl	8006ce6 <xTaskCreate>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d001      	beq.n	8005c6e <osThreadNew+0x11a>
            hTask = NULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c6e:	693b      	ldr	r3, [r7, #16]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3728      	adds	r7, #40	; 0x28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c80:	f3ef 8305 	mrs	r3, IPSR
 8005c84:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c86:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <osDelay+0x1c>
    stat = osErrorISR;
 8005c8c:	f06f 0305 	mvn.w	r3, #5
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	e007      	b.n	8005ca4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f001 f966 	bl	8006f70 <vTaskDelay>
    }
  }

  return (stat);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b08a      	sub	sp, #40	; 0x28
 8005cb2:	af02      	add	r7, sp, #8
 8005cb4:	60f8      	str	r0, [r7, #12]
 8005cb6:	60b9      	str	r1, [r7, #8]
 8005cb8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cbe:	f3ef 8305 	mrs	r3, IPSR
 8005cc2:	613b      	str	r3, [r7, #16]
  return(result);
 8005cc4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d15f      	bne.n	8005d8a <osMessageQueueNew+0xdc>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d05c      	beq.n	8005d8a <osMessageQueueNew+0xdc>
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d059      	beq.n	8005d8a <osMessageQueueNew+0xdc>
    mem = -1;
 8005cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d029      	beq.n	8005d36 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d012      	beq.n	8005d10 <osMessageQueueNew+0x62>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	2b4f      	cmp	r3, #79	; 0x4f
 8005cf0:	d90e      	bls.n	8005d10 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695a      	ldr	r2, [r3, #20]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d302      	bcc.n	8005d10 <osMessageQueueNew+0x62>
        mem = 1;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	e014      	b.n	8005d3a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d110      	bne.n	8005d3a <osMessageQueueNew+0x8c>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10c      	bne.n	8005d3a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d108      	bne.n	8005d3a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d104      	bne.n	8005d3a <osMessageQueueNew+0x8c>
          mem = 0;
 8005d30:	2300      	movs	r3, #0
 8005d32:	61bb      	str	r3, [r7, #24]
 8005d34:	e001      	b.n	8005d3a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d10b      	bne.n	8005d58 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	2100      	movs	r1, #0
 8005d4a:	9100      	str	r1, [sp, #0]
 8005d4c:	68b9      	ldr	r1, [r7, #8]
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 fa2e 	bl	80061b0 <xQueueGenericCreateStatic>
 8005d54:	61f8      	str	r0, [r7, #28]
 8005d56:	e008      	b.n	8005d6a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d105      	bne.n	8005d6a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005d5e:	2200      	movs	r2, #0
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 fa9c 	bl	80062a0 <xQueueGenericCreate>
 8005d68:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00c      	beq.n	8005d8a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <osMessageQueueNew+0xd0>
        name = attr->name;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	e001      	b.n	8005d82 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005d82:	6979      	ldr	r1, [r7, #20]
 8005d84:	69f8      	ldr	r0, [r7, #28]
 8005d86:	f000 fef3 	bl	8006b70 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005d8a:	69fb      	ldr	r3, [r7, #28]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3720      	adds	r7, #32
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	4613      	mov	r3, r2
 8005da2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dac:	f3ef 8305 	mrs	r3, IPSR
 8005db0:	617b      	str	r3, [r7, #20]
  return(result);
 8005db2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d028      	beq.n	8005e0a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <osMessageQueuePut+0x36>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <osMessageQueuePut+0x36>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005dca:	f06f 0303 	mvn.w	r3, #3
 8005dce:	61fb      	str	r3, [r7, #28]
 8005dd0:	e038      	b.n	8005e44 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005dd6:	f107 0210 	add.w	r2, r7, #16
 8005dda:	2300      	movs	r3, #0
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	69b8      	ldr	r0, [r7, #24]
 8005de0:	f000 fbba 	bl	8006558 <xQueueGenericSendFromISR>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d003      	beq.n	8005df2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005dea:	f06f 0302 	mvn.w	r3, #2
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	e028      	b.n	8005e44 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d025      	beq.n	8005e44 <osMessageQueuePut+0xb0>
 8005df8:	4b15      	ldr	r3, [pc, #84]	; (8005e50 <osMessageQueuePut+0xbc>)
 8005dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	e01c      	b.n	8005e44 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <osMessageQueuePut+0x82>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d103      	bne.n	8005e1e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005e16:	f06f 0303 	mvn.w	r3, #3
 8005e1a:	61fb      	str	r3, [r7, #28]
 8005e1c:	e012      	b.n	8005e44 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005e1e:	2300      	movs	r3, #0
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	69b8      	ldr	r0, [r7, #24]
 8005e26:	f000 fa99 	bl	800635c <xQueueGenericSend>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d009      	beq.n	8005e44 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005e36:	f06f 0301 	mvn.w	r3, #1
 8005e3a:	61fb      	str	r3, [r7, #28]
 8005e3c:	e002      	b.n	8005e44 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005e3e:	f06f 0302 	mvn.w	r3, #2
 8005e42:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005e44:	69fb      	ldr	r3, [r7, #28]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3720      	adds	r7, #32
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e6a:	f3ef 8305 	mrs	r3, IPSR
 8005e6e:	617b      	str	r3, [r7, #20]
  return(result);
 8005e70:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d028      	beq.n	8005ec8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <osMessageQueueGet+0x34>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <osMessageQueueGet+0x34>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005e88:	f06f 0303 	mvn.w	r3, #3
 8005e8c:	61fb      	str	r3, [r7, #28]
 8005e8e:	e037      	b.n	8005f00 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005e90:	2300      	movs	r3, #0
 8005e92:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005e94:	f107 0310 	add.w	r3, r7, #16
 8005e98:	461a      	mov	r2, r3
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	69b8      	ldr	r0, [r7, #24]
 8005e9e:	f000 fcd7 	bl	8006850 <xQueueReceiveFromISR>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d003      	beq.n	8005eb0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005ea8:	f06f 0302 	mvn.w	r3, #2
 8005eac:	61fb      	str	r3, [r7, #28]
 8005eae:	e027      	b.n	8005f00 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d024      	beq.n	8005f00 <osMessageQueueGet+0xac>
 8005eb6:	4b15      	ldr	r3, [pc, #84]	; (8005f0c <osMessageQueueGet+0xb8>)
 8005eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	e01b      	b.n	8005f00 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <osMessageQueueGet+0x80>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d103      	bne.n	8005edc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005ed4:	f06f 0303 	mvn.w	r3, #3
 8005ed8:	61fb      	str	r3, [r7, #28]
 8005eda:	e011      	b.n	8005f00 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	68b9      	ldr	r1, [r7, #8]
 8005ee0:	69b8      	ldr	r0, [r7, #24]
 8005ee2:	f000 fbd5 	bl	8006690 <xQueueReceive>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d009      	beq.n	8005f00 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005ef2:	f06f 0301 	mvn.w	r3, #1
 8005ef6:	61fb      	str	r3, [r7, #28]
 8005ef8:	e002      	b.n	8005f00 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005efa:	f06f 0302 	mvn.w	r3, #2
 8005efe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005f00:	69fb      	ldr	r3, [r7, #28]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3720      	adds	r7, #32
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	e000ed04 	.word	0xe000ed04

08005f10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4a07      	ldr	r2, [pc, #28]	; (8005f3c <vApplicationGetIdleTaskMemory+0x2c>)
 8005f20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	4a06      	ldr	r2, [pc, #24]	; (8005f40 <vApplicationGetIdleTaskMemory+0x30>)
 8005f26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2280      	movs	r2, #128	; 0x80
 8005f2c:	601a      	str	r2, [r3, #0]
}
 8005f2e:	bf00      	nop
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	2000009c 	.word	0x2000009c
 8005f40:	200000f8 	.word	0x200000f8

08005f44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4a07      	ldr	r2, [pc, #28]	; (8005f70 <vApplicationGetTimerTaskMemory+0x2c>)
 8005f54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	4a06      	ldr	r2, [pc, #24]	; (8005f74 <vApplicationGetTimerTaskMemory+0x30>)
 8005f5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f62:	601a      	str	r2, [r3, #0]
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	200002f8 	.word	0x200002f8
 8005f74:	20000354 	.word	0x20000354

08005f78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f103 0208 	add.w	r2, r3, #8
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f103 0208 	add.w	r2, r3, #8
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f103 0208 	add.w	r2, r3, #8
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800601a:	b480      	push	{r7}
 800601c:	b085      	sub	sp, #20
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006030:	d103      	bne.n	800603a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	e00c      	b.n	8006054 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3308      	adds	r3, #8
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	e002      	b.n	8006048 <vListInsert+0x2e>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	429a      	cmp	r2, r3
 8006052:	d2f6      	bcs.n	8006042 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	601a      	str	r2, [r3, #0]
}
 8006080:	bf00      	nop
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6892      	ldr	r2, [r2, #8]
 80060a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	6852      	ldr	r2, [r2, #4]
 80060ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d103      	bne.n	80060c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	1e5a      	subs	r2, r3, #1
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800610a:	f002 f90b 	bl	8008324 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006116:	68f9      	ldr	r1, [r7, #12]
 8006118:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800611a:	fb01 f303 	mul.w	r3, r1, r3
 800611e:	441a      	add	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613a:	3b01      	subs	r3, #1
 800613c:	68f9      	ldr	r1, [r7, #12]
 800613e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006140:	fb01 f303 	mul.w	r3, r1, r3
 8006144:	441a      	add	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	22ff      	movs	r2, #255	; 0xff
 800614e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	22ff      	movs	r2, #255	; 0xff
 8006156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d114      	bne.n	800618a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01a      	beq.n	800619e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3310      	adds	r3, #16
 800616c:	4618      	mov	r0, r3
 800616e:	f001 f9bd 	bl	80074ec <xTaskRemoveFromEventList>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d012      	beq.n	800619e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006178:	4b0c      	ldr	r3, [pc, #48]	; (80061ac <xQueueGenericReset+0xcc>)
 800617a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	e009      	b.n	800619e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	3310      	adds	r3, #16
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff fef2 	bl	8005f78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3324      	adds	r3, #36	; 0x24
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff feed 	bl	8005f78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800619e:	f002 f8f1 	bl	8008384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061a2:	2301      	movs	r3, #1
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	e000ed04 	.word	0xe000ed04

080061b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08e      	sub	sp, #56	; 0x38
 80061b4:	af02      	add	r7, sp, #8
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10a      	bne.n	80061da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061d6:	bf00      	nop
 80061d8:	e7fe      	b.n	80061d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061f2:	bf00      	nop
 80061f4:	e7fe      	b.n	80061f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <xQueueGenericCreateStatic+0x52>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <xQueueGenericCreateStatic+0x56>
 8006202:	2301      	movs	r3, #1
 8006204:	e000      	b.n	8006208 <xQueueGenericCreateStatic+0x58>
 8006206:	2300      	movs	r3, #0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	623b      	str	r3, [r7, #32]
}
 800621e:	bf00      	nop
 8006220:	e7fe      	b.n	8006220 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d102      	bne.n	800622e <xQueueGenericCreateStatic+0x7e>
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <xQueueGenericCreateStatic+0x82>
 800622e:	2301      	movs	r3, #1
 8006230:	e000      	b.n	8006234 <xQueueGenericCreateStatic+0x84>
 8006232:	2300      	movs	r3, #0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10a      	bne.n	800624e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	61fb      	str	r3, [r7, #28]
}
 800624a:	bf00      	nop
 800624c:	e7fe      	b.n	800624c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800624e:	2350      	movs	r3, #80	; 0x50
 8006250:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b50      	cmp	r3, #80	; 0x50
 8006256:	d00a      	beq.n	800626e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	61bb      	str	r3, [r7, #24]
}
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800626e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00d      	beq.n	8006296 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006282:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	4613      	mov	r3, r2
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 f83f 	bl	8006314 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006298:	4618      	mov	r0, r3
 800629a:	3730      	adds	r7, #48	; 0x30
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08a      	sub	sp, #40	; 0x28
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	4613      	mov	r3, r2
 80062ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10a      	bne.n	80062ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	613b      	str	r3, [r7, #16]
}
 80062c6:	bf00      	nop
 80062c8:	e7fe      	b.n	80062c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	fb02 f303 	mul.w	r3, r2, r3
 80062d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	3350      	adds	r3, #80	; 0x50
 80062d8:	4618      	mov	r0, r3
 80062da:	f002 f945 	bl	8008568 <pvPortMalloc>
 80062de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d011      	beq.n	800630a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	3350      	adds	r3, #80	; 0x50
 80062ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062f8:	79fa      	ldrb	r2, [r7, #7]
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	4613      	mov	r3, r2
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	68b9      	ldr	r1, [r7, #8]
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 f805 	bl	8006314 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800630a:	69bb      	ldr	r3, [r7, #24]
	}
 800630c:	4618      	mov	r0, r3
 800630e:	3720      	adds	r7, #32
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d103      	bne.n	8006330 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	e002      	b.n	8006336 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006342:	2101      	movs	r1, #1
 8006344:	69b8      	ldr	r0, [r7, #24]
 8006346:	f7ff fecb 	bl	80060e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	78fa      	ldrb	r2, [r7, #3]
 800634e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08e      	sub	sp, #56	; 0x38
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800636a:	2300      	movs	r3, #0
 800636c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <xQueueGenericSend+0x32>
	__asm volatile
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800638a:	bf00      	nop
 800638c:	e7fe      	b.n	800638c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d103      	bne.n	800639c <xQueueGenericSend+0x40>
 8006394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <xQueueGenericSend+0x44>
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <xQueueGenericSend+0x46>
 80063a0:	2300      	movs	r3, #0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <xQueueGenericSend+0x60>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063b8:	bf00      	nop
 80063ba:	e7fe      	b.n	80063ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d103      	bne.n	80063ca <xQueueGenericSend+0x6e>
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <xQueueGenericSend+0x72>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e000      	b.n	80063d0 <xQueueGenericSend+0x74>
 80063ce:	2300      	movs	r3, #0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10a      	bne.n	80063ea <xQueueGenericSend+0x8e>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	623b      	str	r3, [r7, #32]
}
 80063e6:	bf00      	nop
 80063e8:	e7fe      	b.n	80063e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063ea:	f001 fa3d 	bl	8007868 <xTaskGetSchedulerState>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d102      	bne.n	80063fa <xQueueGenericSend+0x9e>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <xQueueGenericSend+0xa2>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <xQueueGenericSend+0xa4>
 80063fe:	2300      	movs	r3, #0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10a      	bne.n	800641a <xQueueGenericSend+0xbe>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	61fb      	str	r3, [r7, #28]
}
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800641a:	f001 ff83 	bl	8008324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006426:	429a      	cmp	r2, r3
 8006428:	d302      	bcc.n	8006430 <xQueueGenericSend+0xd4>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b02      	cmp	r3, #2
 800642e:	d129      	bne.n	8006484 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006436:	f000 fa8b 	bl	8006950 <prvCopyDataToQueue>
 800643a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	2b00      	cmp	r3, #0
 8006442:	d010      	beq.n	8006466 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	3324      	adds	r3, #36	; 0x24
 8006448:	4618      	mov	r0, r3
 800644a:	f001 f84f 	bl	80074ec <xTaskRemoveFromEventList>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d013      	beq.n	800647c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006454:	4b3f      	ldr	r3, [pc, #252]	; (8006554 <xQueueGenericSend+0x1f8>)
 8006456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	e00a      	b.n	800647c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d007      	beq.n	800647c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800646c:	4b39      	ldr	r3, [pc, #228]	; (8006554 <xQueueGenericSend+0x1f8>)
 800646e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800647c:	f001 ff82 	bl	8008384 <vPortExitCritical>
				return pdPASS;
 8006480:	2301      	movs	r3, #1
 8006482:	e063      	b.n	800654c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d103      	bne.n	8006492 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800648a:	f001 ff7b 	bl	8008384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800648e:	2300      	movs	r3, #0
 8006490:	e05c      	b.n	800654c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006494:	2b00      	cmp	r3, #0
 8006496:	d106      	bne.n	80064a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006498:	f107 0314 	add.w	r3, r7, #20
 800649c:	4618      	mov	r0, r3
 800649e:	f001 f889 	bl	80075b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064a2:	2301      	movs	r3, #1
 80064a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064a6:	f001 ff6d 	bl	8008384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064aa:	f000 fdfb 	bl	80070a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064ae:	f001 ff39 	bl	8008324 <vPortEnterCritical>
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064b8:	b25b      	sxtb	r3, r3
 80064ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064be:	d103      	bne.n	80064c8 <xQueueGenericSend+0x16c>
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064ce:	b25b      	sxtb	r3, r3
 80064d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d4:	d103      	bne.n	80064de <xQueueGenericSend+0x182>
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064de:	f001 ff51 	bl	8008384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064e2:	1d3a      	adds	r2, r7, #4
 80064e4:	f107 0314 	add.w	r3, r7, #20
 80064e8:	4611      	mov	r1, r2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 f878 	bl	80075e0 <xTaskCheckForTimeOut>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d124      	bne.n	8006540 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064f8:	f000 fb22 	bl	8006b40 <prvIsQueueFull>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d018      	beq.n	8006534 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	3310      	adds	r3, #16
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	4611      	mov	r1, r2
 800650a:	4618      	mov	r0, r3
 800650c:	f000 ff9e 	bl	800744c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006512:	f000 faad 	bl	8006a70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006516:	f000 fdd3 	bl	80070c0 <xTaskResumeAll>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	f47f af7c 	bne.w	800641a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006522:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <xQueueGenericSend+0x1f8>)
 8006524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	e772      	b.n	800641a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006536:	f000 fa9b 	bl	8006a70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800653a:	f000 fdc1 	bl	80070c0 <xTaskResumeAll>
 800653e:	e76c      	b.n	800641a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006542:	f000 fa95 	bl	8006a70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006546:	f000 fdbb 	bl	80070c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800654a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800654c:	4618      	mov	r0, r3
 800654e:	3738      	adds	r7, #56	; 0x38
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	e000ed04 	.word	0xe000ed04

08006558 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b090      	sub	sp, #64	; 0x40
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d103      	bne.n	8006594 <xQueueGenericSendFromISR+0x3c>
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <xQueueGenericSendFromISR+0x40>
 8006594:	2301      	movs	r3, #1
 8006596:	e000      	b.n	800659a <xQueueGenericSendFromISR+0x42>
 8006598:	2300      	movs	r3, #0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065b0:	bf00      	nop
 80065b2:	e7fe      	b.n	80065b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d103      	bne.n	80065c2 <xQueueGenericSendFromISR+0x6a>
 80065ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <xQueueGenericSendFromISR+0x6e>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <xQueueGenericSendFromISR+0x70>
 80065c6:	2300      	movs	r3, #0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10a      	bne.n	80065e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	623b      	str	r3, [r7, #32]
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065e2:	f001 ff81 	bl	80084e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065e6:	f3ef 8211 	mrs	r2, BASEPRI
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	61fa      	str	r2, [r7, #28]
 80065fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006600:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660a:	429a      	cmp	r2, r3
 800660c:	d302      	bcc.n	8006614 <xQueueGenericSendFromISR+0xbc>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b02      	cmp	r3, #2
 8006612:	d12f      	bne.n	8006674 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800661a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800662a:	f000 f991 	bl	8006950 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800662e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d112      	bne.n	800665e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	2b00      	cmp	r3, #0
 800663e:	d016      	beq.n	800666e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006642:	3324      	adds	r3, #36	; 0x24
 8006644:	4618      	mov	r0, r3
 8006646:	f000 ff51 	bl	80074ec <xTaskRemoveFromEventList>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00e      	beq.n	800666e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	e007      	b.n	800666e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800665e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006662:	3301      	adds	r3, #1
 8006664:	b2db      	uxtb	r3, r3
 8006666:	b25a      	sxtb	r2, r3
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800666e:	2301      	movs	r3, #1
 8006670:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006672:	e001      	b.n	8006678 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006674:	2300      	movs	r3, #0
 8006676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006682:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006686:	4618      	mov	r0, r3
 8006688:	3740      	adds	r7, #64	; 0x40
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08c      	sub	sp, #48	; 0x30
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800669c:	2300      	movs	r3, #0
 800669e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10a      	bne.n	80066c0 <xQueueReceive+0x30>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	623b      	str	r3, [r7, #32]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d103      	bne.n	80066ce <xQueueReceive+0x3e>
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <xQueueReceive+0x42>
 80066ce:	2301      	movs	r3, #1
 80066d0:	e000      	b.n	80066d4 <xQueueReceive+0x44>
 80066d2:	2300      	movs	r3, #0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10a      	bne.n	80066ee <xQueueReceive+0x5e>
	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	61fb      	str	r3, [r7, #28]
}
 80066ea:	bf00      	nop
 80066ec:	e7fe      	b.n	80066ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066ee:	f001 f8bb 	bl	8007868 <xTaskGetSchedulerState>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d102      	bne.n	80066fe <xQueueReceive+0x6e>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <xQueueReceive+0x72>
 80066fe:	2301      	movs	r3, #1
 8006700:	e000      	b.n	8006704 <xQueueReceive+0x74>
 8006702:	2300      	movs	r3, #0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10a      	bne.n	800671e <xQueueReceive+0x8e>
	__asm volatile
 8006708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	61bb      	str	r3, [r7, #24]
}
 800671a:	bf00      	nop
 800671c:	e7fe      	b.n	800671c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800671e:	f001 fe01 	bl	8008324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006726:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	2b00      	cmp	r3, #0
 800672c:	d01f      	beq.n	800676e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006732:	f000 f977 	bl	8006a24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	1e5a      	subs	r2, r3, #1
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00f      	beq.n	8006766 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	3310      	adds	r3, #16
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fece 	bl	80074ec <xTaskRemoveFromEventList>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d007      	beq.n	8006766 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006756:	4b3d      	ldr	r3, [pc, #244]	; (800684c <xQueueReceive+0x1bc>)
 8006758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006766:	f001 fe0d 	bl	8008384 <vPortExitCritical>
				return pdPASS;
 800676a:	2301      	movs	r3, #1
 800676c:	e069      	b.n	8006842 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d103      	bne.n	800677c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006774:	f001 fe06 	bl	8008384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006778:	2300      	movs	r3, #0
 800677a:	e062      	b.n	8006842 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677e:	2b00      	cmp	r3, #0
 8006780:	d106      	bne.n	8006790 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006782:	f107 0310 	add.w	r3, r7, #16
 8006786:	4618      	mov	r0, r3
 8006788:	f000 ff14 	bl	80075b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800678c:	2301      	movs	r3, #1
 800678e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006790:	f001 fdf8 	bl	8008384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006794:	f000 fc86 	bl	80070a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006798:	f001 fdc4 	bl	8008324 <vPortEnterCritical>
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067a2:	b25b      	sxtb	r3, r3
 80067a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a8:	d103      	bne.n	80067b2 <xQueueReceive+0x122>
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067b8:	b25b      	sxtb	r3, r3
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	d103      	bne.n	80067c8 <xQueueReceive+0x138>
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067c8:	f001 fddc 	bl	8008384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067cc:	1d3a      	adds	r2, r7, #4
 80067ce:	f107 0310 	add.w	r3, r7, #16
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 ff03 	bl	80075e0 <xTaskCheckForTimeOut>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d123      	bne.n	8006828 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e2:	f000 f997 	bl	8006b14 <prvIsQueueEmpty>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d017      	beq.n	800681c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	3324      	adds	r3, #36	; 0x24
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	4611      	mov	r1, r2
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 fe29 	bl	800744c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067fc:	f000 f938 	bl	8006a70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006800:	f000 fc5e 	bl	80070c0 <xTaskResumeAll>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d189      	bne.n	800671e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800680a:	4b10      	ldr	r3, [pc, #64]	; (800684c <xQueueReceive+0x1bc>)
 800680c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	e780      	b.n	800671e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800681c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800681e:	f000 f927 	bl	8006a70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006822:	f000 fc4d 	bl	80070c0 <xTaskResumeAll>
 8006826:	e77a      	b.n	800671e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800682a:	f000 f921 	bl	8006a70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800682e:	f000 fc47 	bl	80070c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006834:	f000 f96e 	bl	8006b14 <prvIsQueueEmpty>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	f43f af6f 	beq.w	800671e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006840:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006842:	4618      	mov	r0, r3
 8006844:	3730      	adds	r7, #48	; 0x30
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	e000ed04 	.word	0xe000ed04

08006850 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08e      	sub	sp, #56	; 0x38
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	623b      	str	r3, [r7, #32]
}
 8006878:	bf00      	nop
 800687a:	e7fe      	b.n	800687a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d103      	bne.n	800688a <xQueueReceiveFromISR+0x3a>
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <xQueueReceiveFromISR+0x3e>
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <xQueueReceiveFromISR+0x40>
 800688e:	2300      	movs	r3, #0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10a      	bne.n	80068aa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	61fb      	str	r3, [r7, #28]
}
 80068a6:	bf00      	nop
 80068a8:	e7fe      	b.n	80068a8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068aa:	f001 fe1d 	bl	80084e8 <vPortValidateInterruptPriority>
	__asm volatile
 80068ae:	f3ef 8211 	mrs	r2, BASEPRI
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	61ba      	str	r2, [r7, #24]
 80068c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80068c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d02f      	beq.n	8006936 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068e0:	68b9      	ldr	r1, [r7, #8]
 80068e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068e4:	f000 f89e 	bl	8006a24 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	1e5a      	subs	r2, r3, #1
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80068f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80068f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f8:	d112      	bne.n	8006920 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d016      	beq.n	8006930 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	3310      	adds	r3, #16
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fdf0 	bl	80074ec <xTaskRemoveFromEventList>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00e      	beq.n	8006930 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00b      	beq.n	8006930 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	e007      	b.n	8006930 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006924:	3301      	adds	r3, #1
 8006926:	b2db      	uxtb	r3, r3
 8006928:	b25a      	sxtb	r2, r3
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006930:	2301      	movs	r3, #1
 8006932:	637b      	str	r3, [r7, #52]	; 0x34
 8006934:	e001      	b.n	800693a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006936:	2300      	movs	r3, #0
 8006938:	637b      	str	r3, [r7, #52]	; 0x34
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f383 8811 	msr	BASEPRI, r3
}
 8006944:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006948:	4618      	mov	r0, r3
 800694a:	3738      	adds	r7, #56	; 0x38
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800695c:	2300      	movs	r3, #0
 800695e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006964:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10d      	bne.n	800698a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d14d      	bne.n	8006a12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	4618      	mov	r0, r3
 800697c:	f000 ff92 	bl	80078a4 <xTaskPriorityDisinherit>
 8006980:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	609a      	str	r2, [r3, #8]
 8006988:	e043      	b.n	8006a12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d119      	bne.n	80069c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6858      	ldr	r0, [r3, #4]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	461a      	mov	r2, r3
 800699a:	68b9      	ldr	r1, [r7, #8]
 800699c:	f001 fff8 	bl	8008990 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a8:	441a      	add	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d32b      	bcc.n	8006a12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	605a      	str	r2, [r3, #4]
 80069c2:	e026      	b.n	8006a12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	68d8      	ldr	r0, [r3, #12]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	461a      	mov	r2, r3
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	f001 ffde 	bl	8008990 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069dc:	425b      	negs	r3, r3
 80069de:	441a      	add	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d207      	bcs.n	8006a00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f8:	425b      	negs	r3, r3
 80069fa:	441a      	add	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d105      	bne.n	8006a12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1c5a      	adds	r2, r3, #1
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006a1a:	697b      	ldr	r3, [r7, #20]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d018      	beq.n	8006a68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	441a      	add	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d303      	bcc.n	8006a58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68d9      	ldr	r1, [r3, #12]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	461a      	mov	r2, r3
 8006a62:	6838      	ldr	r0, [r7, #0]
 8006a64:	f001 ff94 	bl	8008990 <memcpy>
	}
}
 8006a68:	bf00      	nop
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a78:	f001 fc54 	bl	8008324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a84:	e011      	b.n	8006aaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d012      	beq.n	8006ab4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3324      	adds	r3, #36	; 0x24
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 fd2a 	bl	80074ec <xTaskRemoveFromEventList>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a9e:	f000 fe01 	bl	80076a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	dce9      	bgt.n	8006a86 <prvUnlockQueue+0x16>
 8006ab2:	e000      	b.n	8006ab6 <prvUnlockQueue+0x46>
					break;
 8006ab4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	22ff      	movs	r2, #255	; 0xff
 8006aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006abe:	f001 fc61 	bl	8008384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ac2:	f001 fc2f 	bl	8008324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006acc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ace:	e011      	b.n	8006af4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d012      	beq.n	8006afe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3310      	adds	r3, #16
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 fd05 	bl	80074ec <xTaskRemoveFromEventList>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ae8:	f000 fddc 	bl	80076a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006aec:	7bbb      	ldrb	r3, [r7, #14]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006af4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	dce9      	bgt.n	8006ad0 <prvUnlockQueue+0x60>
 8006afc:	e000      	b.n	8006b00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006afe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	22ff      	movs	r2, #255	; 0xff
 8006b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006b08:	f001 fc3c 	bl	8008384 <vPortExitCritical>
}
 8006b0c:	bf00      	nop
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b1c:	f001 fc02 	bl	8008324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d102      	bne.n	8006b2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	e001      	b.n	8006b32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b32:	f001 fc27 	bl	8008384 <vPortExitCritical>

	return xReturn;
 8006b36:	68fb      	ldr	r3, [r7, #12]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b48:	f001 fbec 	bl	8008324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d102      	bne.n	8006b5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	e001      	b.n	8006b62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b62:	f001 fc0f 	bl	8008384 <vPortExitCritical>

	return xReturn;
 8006b66:	68fb      	ldr	r3, [r7, #12]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	e014      	b.n	8006baa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b80:	4a0f      	ldr	r2, [pc, #60]	; (8006bc0 <vQueueAddToRegistry+0x50>)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10b      	bne.n	8006ba4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b8c:	490c      	ldr	r1, [pc, #48]	; (8006bc0 <vQueueAddToRegistry+0x50>)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b96:	4a0a      	ldr	r2, [pc, #40]	; (8006bc0 <vQueueAddToRegistry+0x50>)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	4413      	add	r3, r2
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ba2:	e006      	b.n	8006bb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b07      	cmp	r3, #7
 8006bae:	d9e7      	bls.n	8006b80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006bb0:	bf00      	nop
 8006bb2:	bf00      	nop
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	2000359c 	.word	0x2000359c

08006bc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006bd4:	f001 fba6 	bl	8008324 <vPortEnterCritical>
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bde:	b25b      	sxtb	r3, r3
 8006be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be4:	d103      	bne.n	8006bee <vQueueWaitForMessageRestricted+0x2a>
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bf4:	b25b      	sxtb	r3, r3
 8006bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfa:	d103      	bne.n	8006c04 <vQueueWaitForMessageRestricted+0x40>
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c04:	f001 fbbe 	bl	8008384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	3324      	adds	r3, #36	; 0x24
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fc3b 	bl	8007494 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006c1e:	6978      	ldr	r0, [r7, #20]
 8006c20:	f7ff ff26 	bl	8006a70 <prvUnlockQueue>
	}
 8006c24:	bf00      	nop
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08e      	sub	sp, #56	; 0x38
 8006c30:	af04      	add	r7, sp, #16
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10a      	bne.n	8006c56 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	623b      	str	r3, [r7, #32]
}
 8006c52:	bf00      	nop
 8006c54:	e7fe      	b.n	8006c54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10a      	bne.n	8006c72 <xTaskCreateStatic+0x46>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	61fb      	str	r3, [r7, #28]
}
 8006c6e:	bf00      	nop
 8006c70:	e7fe      	b.n	8006c70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c72:	235c      	movs	r3, #92	; 0x5c
 8006c74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b5c      	cmp	r3, #92	; 0x5c
 8006c7a:	d00a      	beq.n	8006c92 <xTaskCreateStatic+0x66>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	61bb      	str	r3, [r7, #24]
}
 8006c8e:	bf00      	nop
 8006c90:	e7fe      	b.n	8006c90 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d01e      	beq.n	8006cd8 <xTaskCreateStatic+0xac>
 8006c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01b      	beq.n	8006cd8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ca8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	2202      	movs	r2, #2
 8006cae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	9303      	str	r3, [sp, #12]
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	9302      	str	r3, [sp, #8]
 8006cba:	f107 0314 	add.w	r3, r7, #20
 8006cbe:	9301      	str	r3, [sp, #4]
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	68b9      	ldr	r1, [r7, #8]
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 f850 	bl	8006d70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cd2:	f000 f8dd 	bl	8006e90 <prvAddNewTaskToReadyList>
 8006cd6:	e001      	b.n	8006cdc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006cdc:	697b      	ldr	r3, [r7, #20]
	}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3728      	adds	r7, #40	; 0x28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b08c      	sub	sp, #48	; 0x30
 8006cea:	af04      	add	r7, sp, #16
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	603b      	str	r3, [r7, #0]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006cf6:	88fb      	ldrh	r3, [r7, #6]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f001 fc34 	bl	8008568 <pvPortMalloc>
 8006d00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00e      	beq.n	8006d26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d08:	205c      	movs	r0, #92	; 0x5c
 8006d0a:	f001 fc2d 	bl	8008568 <pvPortMalloc>
 8006d0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	631a      	str	r2, [r3, #48]	; 0x30
 8006d1c:	e005      	b.n	8006d2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d1e:	6978      	ldr	r0, [r7, #20]
 8006d20:	f001 fcee 	bl	8008700 <vPortFree>
 8006d24:	e001      	b.n	8006d2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d017      	beq.n	8006d60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d38:	88fa      	ldrh	r2, [r7, #6]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	9303      	str	r3, [sp, #12]
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	9302      	str	r3, [sp, #8]
 8006d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d44:	9301      	str	r3, [sp, #4]
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 f80e 	bl	8006d70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d54:	69f8      	ldr	r0, [r7, #28]
 8006d56:	f000 f89b 	bl	8006e90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	61bb      	str	r3, [r7, #24]
 8006d5e:	e002      	b.n	8006d66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d60:	f04f 33ff 	mov.w	r3, #4294967295
 8006d64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d66:	69bb      	ldr	r3, [r7, #24]
	}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3720      	adds	r7, #32
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
 8006d7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	461a      	mov	r2, r3
 8006d88:	21a5      	movs	r1, #165	; 0xa5
 8006d8a:	f001 fe0f 	bl	80089ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	f023 0307 	bic.w	r3, r3, #7
 8006da6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00a      	beq.n	8006dc8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	617b      	str	r3, [r7, #20]
}
 8006dc4:	bf00      	nop
 8006dc6:	e7fe      	b.n	8006dc6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d01f      	beq.n	8006e0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61fb      	str	r3, [r7, #28]
 8006dd2:	e012      	b.n	8006dfa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	4413      	add	r3, r2
 8006dda:	7819      	ldrb	r1, [r3, #0]
 8006ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	4413      	add	r3, r2
 8006de2:	3334      	adds	r3, #52	; 0x34
 8006de4:	460a      	mov	r2, r1
 8006de6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	4413      	add	r3, r2
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d006      	beq.n	8006e02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	3301      	adds	r3, #1
 8006df8:	61fb      	str	r3, [r7, #28]
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	2b0f      	cmp	r3, #15
 8006dfe:	d9e9      	bls.n	8006dd4 <prvInitialiseNewTask+0x64>
 8006e00:	e000      	b.n	8006e04 <prvInitialiseNewTask+0x94>
			{
				break;
 8006e02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e0c:	e003      	b.n	8006e16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e18:	2b37      	cmp	r3, #55	; 0x37
 8006e1a:	d901      	bls.n	8006e20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e1c:	2337      	movs	r3, #55	; 0x37
 8006e1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2e:	2200      	movs	r2, #0
 8006e30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	3304      	adds	r3, #4
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff f8be 	bl	8005fb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	3318      	adds	r3, #24
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff f8b9 	bl	8005fb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5e:	2200      	movs	r2, #0
 8006e60:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	68f9      	ldr	r1, [r7, #12]
 8006e6e:	69b8      	ldr	r0, [r7, #24]
 8006e70:	f001 f928 	bl	80080c4 <pxPortInitialiseStack>
 8006e74:	4602      	mov	r2, r0
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e86:	bf00      	nop
 8006e88:	3720      	adds	r7, #32
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e98:	f001 fa44 	bl	8008324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e9c:	4b2d      	ldr	r3, [pc, #180]	; (8006f54 <prvAddNewTaskToReadyList+0xc4>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	4a2c      	ldr	r2, [pc, #176]	; (8006f54 <prvAddNewTaskToReadyList+0xc4>)
 8006ea4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ea6:	4b2c      	ldr	r3, [pc, #176]	; (8006f58 <prvAddNewTaskToReadyList+0xc8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d109      	bne.n	8006ec2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006eae:	4a2a      	ldr	r2, [pc, #168]	; (8006f58 <prvAddNewTaskToReadyList+0xc8>)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006eb4:	4b27      	ldr	r3, [pc, #156]	; (8006f54 <prvAddNewTaskToReadyList+0xc4>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d110      	bne.n	8006ede <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ebc:	f000 fc16 	bl	80076ec <prvInitialiseTaskLists>
 8006ec0:	e00d      	b.n	8006ede <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ec2:	4b26      	ldr	r3, [pc, #152]	; (8006f5c <prvAddNewTaskToReadyList+0xcc>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d109      	bne.n	8006ede <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006eca:	4b23      	ldr	r3, [pc, #140]	; (8006f58 <prvAddNewTaskToReadyList+0xc8>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d802      	bhi.n	8006ede <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ed8:	4a1f      	ldr	r2, [pc, #124]	; (8006f58 <prvAddNewTaskToReadyList+0xc8>)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ede:	4b20      	ldr	r3, [pc, #128]	; (8006f60 <prvAddNewTaskToReadyList+0xd0>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	4a1e      	ldr	r2, [pc, #120]	; (8006f60 <prvAddNewTaskToReadyList+0xd0>)
 8006ee6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ee8:	4b1d      	ldr	r3, [pc, #116]	; (8006f60 <prvAddNewTaskToReadyList+0xd0>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef4:	4b1b      	ldr	r3, [pc, #108]	; (8006f64 <prvAddNewTaskToReadyList+0xd4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d903      	bls.n	8006f04 <prvAddNewTaskToReadyList+0x74>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f00:	4a18      	ldr	r2, [pc, #96]	; (8006f64 <prvAddNewTaskToReadyList+0xd4>)
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4a15      	ldr	r2, [pc, #84]	; (8006f68 <prvAddNewTaskToReadyList+0xd8>)
 8006f12:	441a      	add	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3304      	adds	r3, #4
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	f7ff f859 	bl	8005fd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f20:	f001 fa30 	bl	8008384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f24:	4b0d      	ldr	r3, [pc, #52]	; (8006f5c <prvAddNewTaskToReadyList+0xcc>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00e      	beq.n	8006f4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <prvAddNewTaskToReadyList+0xc8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d207      	bcs.n	8006f4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f3a:	4b0c      	ldr	r3, [pc, #48]	; (8006f6c <prvAddNewTaskToReadyList+0xdc>)
 8006f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f4a:	bf00      	nop
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20000c28 	.word	0x20000c28
 8006f58:	20000754 	.word	0x20000754
 8006f5c:	20000c34 	.word	0x20000c34
 8006f60:	20000c44 	.word	0x20000c44
 8006f64:	20000c30 	.word	0x20000c30
 8006f68:	20000758 	.word	0x20000758
 8006f6c:	e000ed04 	.word	0xe000ed04

08006f70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d017      	beq.n	8006fb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f82:	4b13      	ldr	r3, [pc, #76]	; (8006fd0 <vTaskDelay+0x60>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00a      	beq.n	8006fa0 <vTaskDelay+0x30>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	60bb      	str	r3, [r7, #8]
}
 8006f9c:	bf00      	nop
 8006f9e:	e7fe      	b.n	8006f9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006fa0:	f000 f880 	bl	80070a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fcea 	bl	8007980 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006fac:	f000 f888 	bl	80070c0 <xTaskResumeAll>
 8006fb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d107      	bne.n	8006fc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006fb8:	4b06      	ldr	r3, [pc, #24]	; (8006fd4 <vTaskDelay+0x64>)
 8006fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fbe:	601a      	str	r2, [r3, #0]
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fc8:	bf00      	nop
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	20000c50 	.word	0x20000c50
 8006fd4:	e000ed04 	.word	0xe000ed04

08006fd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08a      	sub	sp, #40	; 0x28
 8006fdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fe6:	463a      	mov	r2, r7
 8006fe8:	1d39      	adds	r1, r7, #4
 8006fea:	f107 0308 	add.w	r3, r7, #8
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fe ff8e 	bl	8005f10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	9202      	str	r2, [sp, #8]
 8006ffc:	9301      	str	r3, [sp, #4]
 8006ffe:	2300      	movs	r3, #0
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	2300      	movs	r3, #0
 8007004:	460a      	mov	r2, r1
 8007006:	4921      	ldr	r1, [pc, #132]	; (800708c <vTaskStartScheduler+0xb4>)
 8007008:	4821      	ldr	r0, [pc, #132]	; (8007090 <vTaskStartScheduler+0xb8>)
 800700a:	f7ff fe0f 	bl	8006c2c <xTaskCreateStatic>
 800700e:	4603      	mov	r3, r0
 8007010:	4a20      	ldr	r2, [pc, #128]	; (8007094 <vTaskStartScheduler+0xbc>)
 8007012:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007014:	4b1f      	ldr	r3, [pc, #124]	; (8007094 <vTaskStartScheduler+0xbc>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800701c:	2301      	movs	r3, #1
 800701e:	617b      	str	r3, [r7, #20]
 8007020:	e001      	b.n	8007026 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007022:	2300      	movs	r3, #0
 8007024:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d102      	bne.n	8007032 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800702c:	f000 fcfc 	bl	8007a28 <xTimerCreateTimerTask>
 8007030:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d116      	bne.n	8007066 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	613b      	str	r3, [r7, #16]
}
 800704a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800704c:	4b12      	ldr	r3, [pc, #72]	; (8007098 <vTaskStartScheduler+0xc0>)
 800704e:	f04f 32ff 	mov.w	r2, #4294967295
 8007052:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007054:	4b11      	ldr	r3, [pc, #68]	; (800709c <vTaskStartScheduler+0xc4>)
 8007056:	2201      	movs	r2, #1
 8007058:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800705a:	4b11      	ldr	r3, [pc, #68]	; (80070a0 <vTaskStartScheduler+0xc8>)
 800705c:	2200      	movs	r2, #0
 800705e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007060:	f001 f8be 	bl	80081e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007064:	e00e      	b.n	8007084 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706c:	d10a      	bne.n	8007084 <vTaskStartScheduler+0xac>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	60fb      	str	r3, [r7, #12]
}
 8007080:	bf00      	nop
 8007082:	e7fe      	b.n	8007082 <vTaskStartScheduler+0xaa>
}
 8007084:	bf00      	nop
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	080093f0 	.word	0x080093f0
 8007090:	080076bd 	.word	0x080076bd
 8007094:	20000c4c 	.word	0x20000c4c
 8007098:	20000c48 	.word	0x20000c48
 800709c:	20000c34 	.word	0x20000c34
 80070a0:	20000c2c 	.word	0x20000c2c

080070a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80070a4:	b480      	push	{r7}
 80070a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80070a8:	4b04      	ldr	r3, [pc, #16]	; (80070bc <vTaskSuspendAll+0x18>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3301      	adds	r3, #1
 80070ae:	4a03      	ldr	r2, [pc, #12]	; (80070bc <vTaskSuspendAll+0x18>)
 80070b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80070b2:	bf00      	nop
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	20000c50 	.word	0x20000c50

080070c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80070ce:	4b42      	ldr	r3, [pc, #264]	; (80071d8 <xTaskResumeAll+0x118>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10a      	bne.n	80070ec <xTaskResumeAll+0x2c>
	__asm volatile
 80070d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	603b      	str	r3, [r7, #0]
}
 80070e8:	bf00      	nop
 80070ea:	e7fe      	b.n	80070ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070ec:	f001 f91a 	bl	8008324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070f0:	4b39      	ldr	r3, [pc, #228]	; (80071d8 <xTaskResumeAll+0x118>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	4a38      	ldr	r2, [pc, #224]	; (80071d8 <xTaskResumeAll+0x118>)
 80070f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070fa:	4b37      	ldr	r3, [pc, #220]	; (80071d8 <xTaskResumeAll+0x118>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d162      	bne.n	80071c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007102:	4b36      	ldr	r3, [pc, #216]	; (80071dc <xTaskResumeAll+0x11c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d05e      	beq.n	80071c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800710a:	e02f      	b.n	800716c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800710c:	4b34      	ldr	r3, [pc, #208]	; (80071e0 <xTaskResumeAll+0x120>)
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	3318      	adds	r3, #24
 8007118:	4618      	mov	r0, r3
 800711a:	f7fe ffb7 	bl	800608c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3304      	adds	r3, #4
 8007122:	4618      	mov	r0, r3
 8007124:	f7fe ffb2 	bl	800608c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712c:	4b2d      	ldr	r3, [pc, #180]	; (80071e4 <xTaskResumeAll+0x124>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d903      	bls.n	800713c <xTaskResumeAll+0x7c>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	4a2a      	ldr	r2, [pc, #168]	; (80071e4 <xTaskResumeAll+0x124>)
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007140:	4613      	mov	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4a27      	ldr	r2, [pc, #156]	; (80071e8 <xTaskResumeAll+0x128>)
 800714a:	441a      	add	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3304      	adds	r3, #4
 8007150:	4619      	mov	r1, r3
 8007152:	4610      	mov	r0, r2
 8007154:	f7fe ff3d 	bl	8005fd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715c:	4b23      	ldr	r3, [pc, #140]	; (80071ec <xTaskResumeAll+0x12c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007162:	429a      	cmp	r2, r3
 8007164:	d302      	bcc.n	800716c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007166:	4b22      	ldr	r3, [pc, #136]	; (80071f0 <xTaskResumeAll+0x130>)
 8007168:	2201      	movs	r2, #1
 800716a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800716c:	4b1c      	ldr	r3, [pc, #112]	; (80071e0 <xTaskResumeAll+0x120>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1cb      	bne.n	800710c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800717a:	f000 fb55 	bl	8007828 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800717e:	4b1d      	ldr	r3, [pc, #116]	; (80071f4 <xTaskResumeAll+0x134>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d010      	beq.n	80071ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800718a:	f000 f847 	bl	800721c <xTaskIncrementTick>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007194:	4b16      	ldr	r3, [pc, #88]	; (80071f0 <xTaskResumeAll+0x130>)
 8007196:	2201      	movs	r2, #1
 8007198:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	3b01      	subs	r3, #1
 800719e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1f1      	bne.n	800718a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80071a6:	4b13      	ldr	r3, [pc, #76]	; (80071f4 <xTaskResumeAll+0x134>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80071ac:	4b10      	ldr	r3, [pc, #64]	; (80071f0 <xTaskResumeAll+0x130>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d009      	beq.n	80071c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80071b4:	2301      	movs	r3, #1
 80071b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80071b8:	4b0f      	ldr	r3, [pc, #60]	; (80071f8 <xTaskResumeAll+0x138>)
 80071ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071c8:	f001 f8dc 	bl	8008384 <vPortExitCritical>

	return xAlreadyYielded;
 80071cc:	68bb      	ldr	r3, [r7, #8]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000c50 	.word	0x20000c50
 80071dc:	20000c28 	.word	0x20000c28
 80071e0:	20000be8 	.word	0x20000be8
 80071e4:	20000c30 	.word	0x20000c30
 80071e8:	20000758 	.word	0x20000758
 80071ec:	20000754 	.word	0x20000754
 80071f0:	20000c3c 	.word	0x20000c3c
 80071f4:	20000c38 	.word	0x20000c38
 80071f8:	e000ed04 	.word	0xe000ed04

080071fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007202:	4b05      	ldr	r3, [pc, #20]	; (8007218 <xTaskGetTickCount+0x1c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007208:	687b      	ldr	r3, [r7, #4]
}
 800720a:	4618      	mov	r0, r3
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	20000c2c 	.word	0x20000c2c

0800721c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007222:	2300      	movs	r3, #0
 8007224:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007226:	4b4f      	ldr	r3, [pc, #316]	; (8007364 <xTaskIncrementTick+0x148>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	f040 808f 	bne.w	800734e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007230:	4b4d      	ldr	r3, [pc, #308]	; (8007368 <xTaskIncrementTick+0x14c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3301      	adds	r3, #1
 8007236:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007238:	4a4b      	ldr	r2, [pc, #300]	; (8007368 <xTaskIncrementTick+0x14c>)
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d120      	bne.n	8007286 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007244:	4b49      	ldr	r3, [pc, #292]	; (800736c <xTaskIncrementTick+0x150>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <xTaskIncrementTick+0x48>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	603b      	str	r3, [r7, #0]
}
 8007260:	bf00      	nop
 8007262:	e7fe      	b.n	8007262 <xTaskIncrementTick+0x46>
 8007264:	4b41      	ldr	r3, [pc, #260]	; (800736c <xTaskIncrementTick+0x150>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	60fb      	str	r3, [r7, #12]
 800726a:	4b41      	ldr	r3, [pc, #260]	; (8007370 <xTaskIncrementTick+0x154>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a3f      	ldr	r2, [pc, #252]	; (800736c <xTaskIncrementTick+0x150>)
 8007270:	6013      	str	r3, [r2, #0]
 8007272:	4a3f      	ldr	r2, [pc, #252]	; (8007370 <xTaskIncrementTick+0x154>)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	4b3e      	ldr	r3, [pc, #248]	; (8007374 <xTaskIncrementTick+0x158>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3301      	adds	r3, #1
 800727e:	4a3d      	ldr	r2, [pc, #244]	; (8007374 <xTaskIncrementTick+0x158>)
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	f000 fad1 	bl	8007828 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007286:	4b3c      	ldr	r3, [pc, #240]	; (8007378 <xTaskIncrementTick+0x15c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	429a      	cmp	r2, r3
 800728e:	d349      	bcc.n	8007324 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007290:	4b36      	ldr	r3, [pc, #216]	; (800736c <xTaskIncrementTick+0x150>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d104      	bne.n	80072a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800729a:	4b37      	ldr	r3, [pc, #220]	; (8007378 <xTaskIncrementTick+0x15c>)
 800729c:	f04f 32ff 	mov.w	r2, #4294967295
 80072a0:	601a      	str	r2, [r3, #0]
					break;
 80072a2:	e03f      	b.n	8007324 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072a4:	4b31      	ldr	r3, [pc, #196]	; (800736c <xTaskIncrementTick+0x150>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d203      	bcs.n	80072c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072bc:	4a2e      	ldr	r2, [pc, #184]	; (8007378 <xTaskIncrementTick+0x15c>)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80072c2:	e02f      	b.n	8007324 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	3304      	adds	r3, #4
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fe fedf 	bl	800608c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d004      	beq.n	80072e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	3318      	adds	r3, #24
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fe fed6 	bl	800608c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e4:	4b25      	ldr	r3, [pc, #148]	; (800737c <xTaskIncrementTick+0x160>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d903      	bls.n	80072f4 <xTaskIncrementTick+0xd8>
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	4a22      	ldr	r2, [pc, #136]	; (800737c <xTaskIncrementTick+0x160>)
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f8:	4613      	mov	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4a1f      	ldr	r2, [pc, #124]	; (8007380 <xTaskIncrementTick+0x164>)
 8007302:	441a      	add	r2, r3
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	3304      	adds	r3, #4
 8007308:	4619      	mov	r1, r3
 800730a:	4610      	mov	r0, r2
 800730c:	f7fe fe61 	bl	8005fd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007314:	4b1b      	ldr	r3, [pc, #108]	; (8007384 <xTaskIncrementTick+0x168>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731a:	429a      	cmp	r2, r3
 800731c:	d3b8      	bcc.n	8007290 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800731e:	2301      	movs	r3, #1
 8007320:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007322:	e7b5      	b.n	8007290 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007324:	4b17      	ldr	r3, [pc, #92]	; (8007384 <xTaskIncrementTick+0x168>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732a:	4915      	ldr	r1, [pc, #84]	; (8007380 <xTaskIncrementTick+0x164>)
 800732c:	4613      	mov	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	440b      	add	r3, r1
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d901      	bls.n	8007340 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800733c:	2301      	movs	r3, #1
 800733e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007340:	4b11      	ldr	r3, [pc, #68]	; (8007388 <xTaskIncrementTick+0x16c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d007      	beq.n	8007358 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007348:	2301      	movs	r3, #1
 800734a:	617b      	str	r3, [r7, #20]
 800734c:	e004      	b.n	8007358 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800734e:	4b0f      	ldr	r3, [pc, #60]	; (800738c <xTaskIncrementTick+0x170>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3301      	adds	r3, #1
 8007354:	4a0d      	ldr	r2, [pc, #52]	; (800738c <xTaskIncrementTick+0x170>)
 8007356:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007358:	697b      	ldr	r3, [r7, #20]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20000c50 	.word	0x20000c50
 8007368:	20000c2c 	.word	0x20000c2c
 800736c:	20000be0 	.word	0x20000be0
 8007370:	20000be4 	.word	0x20000be4
 8007374:	20000c40 	.word	0x20000c40
 8007378:	20000c48 	.word	0x20000c48
 800737c:	20000c30 	.word	0x20000c30
 8007380:	20000758 	.word	0x20000758
 8007384:	20000754 	.word	0x20000754
 8007388:	20000c3c 	.word	0x20000c3c
 800738c:	20000c38 	.word	0x20000c38

08007390 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007396:	4b28      	ldr	r3, [pc, #160]	; (8007438 <vTaskSwitchContext+0xa8>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800739e:	4b27      	ldr	r3, [pc, #156]	; (800743c <vTaskSwitchContext+0xac>)
 80073a0:	2201      	movs	r2, #1
 80073a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80073a4:	e041      	b.n	800742a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80073a6:	4b25      	ldr	r3, [pc, #148]	; (800743c <vTaskSwitchContext+0xac>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ac:	4b24      	ldr	r3, [pc, #144]	; (8007440 <vTaskSwitchContext+0xb0>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	e010      	b.n	80073d6 <vTaskSwitchContext+0x46>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10a      	bne.n	80073d0 <vTaskSwitchContext+0x40>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	607b      	str	r3, [r7, #4]
}
 80073cc:	bf00      	nop
 80073ce:	e7fe      	b.n	80073ce <vTaskSwitchContext+0x3e>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3b01      	subs	r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]
 80073d6:	491b      	ldr	r1, [pc, #108]	; (8007444 <vTaskSwitchContext+0xb4>)
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	4613      	mov	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	440b      	add	r3, r1
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0e4      	beq.n	80073b4 <vTaskSwitchContext+0x24>
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	4613      	mov	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4a13      	ldr	r2, [pc, #76]	; (8007444 <vTaskSwitchContext+0xb4>)
 80073f6:	4413      	add	r3, r2
 80073f8:	60bb      	str	r3, [r7, #8]
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	605a      	str	r2, [r3, #4]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	3308      	adds	r3, #8
 800740c:	429a      	cmp	r2, r3
 800740e:	d104      	bne.n	800741a <vTaskSwitchContext+0x8a>
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	605a      	str	r2, [r3, #4]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	4a09      	ldr	r2, [pc, #36]	; (8007448 <vTaskSwitchContext+0xb8>)
 8007422:	6013      	str	r3, [r2, #0]
 8007424:	4a06      	ldr	r2, [pc, #24]	; (8007440 <vTaskSwitchContext+0xb0>)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6013      	str	r3, [r2, #0]
}
 800742a:	bf00      	nop
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	20000c50 	.word	0x20000c50
 800743c:	20000c3c 	.word	0x20000c3c
 8007440:	20000c30 	.word	0x20000c30
 8007444:	20000758 	.word	0x20000758
 8007448:	20000754 	.word	0x20000754

0800744c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10a      	bne.n	8007472 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	60fb      	str	r3, [r7, #12]
}
 800746e:	bf00      	nop
 8007470:	e7fe      	b.n	8007470 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007472:	4b07      	ldr	r3, [pc, #28]	; (8007490 <vTaskPlaceOnEventList+0x44>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3318      	adds	r3, #24
 8007478:	4619      	mov	r1, r3
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7fe fdcd 	bl	800601a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007480:	2101      	movs	r1, #1
 8007482:	6838      	ldr	r0, [r7, #0]
 8007484:	f000 fa7c 	bl	8007980 <prvAddCurrentTaskToDelayedList>
}
 8007488:	bf00      	nop
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	20000754 	.word	0x20000754

08007494 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	617b      	str	r3, [r7, #20]
}
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074bc:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3318      	adds	r3, #24
 80074c2:	4619      	mov	r1, r3
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f7fe fd84 	bl	8005fd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80074d0:	f04f 33ff 	mov.w	r3, #4294967295
 80074d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80074d6:	6879      	ldr	r1, [r7, #4]
 80074d8:	68b8      	ldr	r0, [r7, #8]
 80074da:	f000 fa51 	bl	8007980 <prvAddCurrentTaskToDelayedList>
	}
 80074de:	bf00      	nop
 80074e0:	3718      	adds	r7, #24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20000754 	.word	0x20000754

080074ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10a      	bne.n	8007518 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	60fb      	str	r3, [r7, #12]
}
 8007514:	bf00      	nop
 8007516:	e7fe      	b.n	8007516 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	3318      	adds	r3, #24
 800751c:	4618      	mov	r0, r3
 800751e:	f7fe fdb5 	bl	800608c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007522:	4b1e      	ldr	r3, [pc, #120]	; (800759c <xTaskRemoveFromEventList+0xb0>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d11d      	bne.n	8007566 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	3304      	adds	r3, #4
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe fdac 	bl	800608c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007538:	4b19      	ldr	r3, [pc, #100]	; (80075a0 <xTaskRemoveFromEventList+0xb4>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	429a      	cmp	r2, r3
 800753e:	d903      	bls.n	8007548 <xTaskRemoveFromEventList+0x5c>
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007544:	4a16      	ldr	r2, [pc, #88]	; (80075a0 <xTaskRemoveFromEventList+0xb4>)
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754c:	4613      	mov	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4a13      	ldr	r2, [pc, #76]	; (80075a4 <xTaskRemoveFromEventList+0xb8>)
 8007556:	441a      	add	r2, r3
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	3304      	adds	r3, #4
 800755c:	4619      	mov	r1, r3
 800755e:	4610      	mov	r0, r2
 8007560:	f7fe fd37 	bl	8005fd2 <vListInsertEnd>
 8007564:	e005      	b.n	8007572 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	3318      	adds	r3, #24
 800756a:	4619      	mov	r1, r3
 800756c:	480e      	ldr	r0, [pc, #56]	; (80075a8 <xTaskRemoveFromEventList+0xbc>)
 800756e:	f7fe fd30 	bl	8005fd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007576:	4b0d      	ldr	r3, [pc, #52]	; (80075ac <xTaskRemoveFromEventList+0xc0>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757c:	429a      	cmp	r2, r3
 800757e:	d905      	bls.n	800758c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007580:	2301      	movs	r3, #1
 8007582:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007584:	4b0a      	ldr	r3, [pc, #40]	; (80075b0 <xTaskRemoveFromEventList+0xc4>)
 8007586:	2201      	movs	r2, #1
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	e001      	b.n	8007590 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800758c:	2300      	movs	r3, #0
 800758e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007590:	697b      	ldr	r3, [r7, #20]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20000c50 	.word	0x20000c50
 80075a0:	20000c30 	.word	0x20000c30
 80075a4:	20000758 	.word	0x20000758
 80075a8:	20000be8 	.word	0x20000be8
 80075ac:	20000754 	.word	0x20000754
 80075b0:	20000c3c 	.word	0x20000c3c

080075b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075bc:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <vTaskInternalSetTimeOutState+0x24>)
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075c4:	4b05      	ldr	r3, [pc, #20]	; (80075dc <vTaskInternalSetTimeOutState+0x28>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	605a      	str	r2, [r3, #4]
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	20000c40 	.word	0x20000c40
 80075dc:	20000c2c 	.word	0x20000c2c

080075e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10a      	bne.n	8007606 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	613b      	str	r3, [r7, #16]
}
 8007602:	bf00      	nop
 8007604:	e7fe      	b.n	8007604 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10a      	bne.n	8007622 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	60fb      	str	r3, [r7, #12]
}
 800761e:	bf00      	nop
 8007620:	e7fe      	b.n	8007620 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007622:	f000 fe7f 	bl	8008324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007626:	4b1d      	ldr	r3, [pc, #116]	; (800769c <xTaskCheckForTimeOut+0xbc>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763e:	d102      	bne.n	8007646 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007640:	2300      	movs	r3, #0
 8007642:	61fb      	str	r3, [r7, #28]
 8007644:	e023      	b.n	800768e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	4b15      	ldr	r3, [pc, #84]	; (80076a0 <xTaskCheckForTimeOut+0xc0>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	429a      	cmp	r2, r3
 8007650:	d007      	beq.n	8007662 <xTaskCheckForTimeOut+0x82>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	429a      	cmp	r2, r3
 800765a:	d302      	bcc.n	8007662 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800765c:	2301      	movs	r3, #1
 800765e:	61fb      	str	r3, [r7, #28]
 8007660:	e015      	b.n	800768e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	429a      	cmp	r2, r3
 800766a:	d20b      	bcs.n	8007684 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	1ad2      	subs	r2, r2, r3
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7ff ff9b 	bl	80075b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800767e:	2300      	movs	r3, #0
 8007680:	61fb      	str	r3, [r7, #28]
 8007682:	e004      	b.n	800768e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	2200      	movs	r2, #0
 8007688:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800768a:	2301      	movs	r3, #1
 800768c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800768e:	f000 fe79 	bl	8008384 <vPortExitCritical>

	return xReturn;
 8007692:	69fb      	ldr	r3, [r7, #28]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3720      	adds	r7, #32
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20000c2c 	.word	0x20000c2c
 80076a0:	20000c40 	.word	0x20000c40

080076a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076a8:	4b03      	ldr	r3, [pc, #12]	; (80076b8 <vTaskMissedYield+0x14>)
 80076aa:	2201      	movs	r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
}
 80076ae:	bf00      	nop
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	20000c3c 	.word	0x20000c3c

080076bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076c4:	f000 f852 	bl	800776c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076c8:	4b06      	ldr	r3, [pc, #24]	; (80076e4 <prvIdleTask+0x28>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d9f9      	bls.n	80076c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80076d0:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <prvIdleTask+0x2c>)
 80076d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076e0:	e7f0      	b.n	80076c4 <prvIdleTask+0x8>
 80076e2:	bf00      	nop
 80076e4:	20000758 	.word	0x20000758
 80076e8:	e000ed04 	.word	0xe000ed04

080076ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076f2:	2300      	movs	r3, #0
 80076f4:	607b      	str	r3, [r7, #4]
 80076f6:	e00c      	b.n	8007712 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4a12      	ldr	r2, [pc, #72]	; (800774c <prvInitialiseTaskLists+0x60>)
 8007704:	4413      	add	r3, r2
 8007706:	4618      	mov	r0, r3
 8007708:	f7fe fc36 	bl	8005f78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3301      	adds	r3, #1
 8007710:	607b      	str	r3, [r7, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b37      	cmp	r3, #55	; 0x37
 8007716:	d9ef      	bls.n	80076f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007718:	480d      	ldr	r0, [pc, #52]	; (8007750 <prvInitialiseTaskLists+0x64>)
 800771a:	f7fe fc2d 	bl	8005f78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800771e:	480d      	ldr	r0, [pc, #52]	; (8007754 <prvInitialiseTaskLists+0x68>)
 8007720:	f7fe fc2a 	bl	8005f78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007724:	480c      	ldr	r0, [pc, #48]	; (8007758 <prvInitialiseTaskLists+0x6c>)
 8007726:	f7fe fc27 	bl	8005f78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800772a:	480c      	ldr	r0, [pc, #48]	; (800775c <prvInitialiseTaskLists+0x70>)
 800772c:	f7fe fc24 	bl	8005f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007730:	480b      	ldr	r0, [pc, #44]	; (8007760 <prvInitialiseTaskLists+0x74>)
 8007732:	f7fe fc21 	bl	8005f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007736:	4b0b      	ldr	r3, [pc, #44]	; (8007764 <prvInitialiseTaskLists+0x78>)
 8007738:	4a05      	ldr	r2, [pc, #20]	; (8007750 <prvInitialiseTaskLists+0x64>)
 800773a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800773c:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <prvInitialiseTaskLists+0x7c>)
 800773e:	4a05      	ldr	r2, [pc, #20]	; (8007754 <prvInitialiseTaskLists+0x68>)
 8007740:	601a      	str	r2, [r3, #0]
}
 8007742:	bf00      	nop
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20000758 	.word	0x20000758
 8007750:	20000bb8 	.word	0x20000bb8
 8007754:	20000bcc 	.word	0x20000bcc
 8007758:	20000be8 	.word	0x20000be8
 800775c:	20000bfc 	.word	0x20000bfc
 8007760:	20000c14 	.word	0x20000c14
 8007764:	20000be0 	.word	0x20000be0
 8007768:	20000be4 	.word	0x20000be4

0800776c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007772:	e019      	b.n	80077a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007774:	f000 fdd6 	bl	8008324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007778:	4b10      	ldr	r3, [pc, #64]	; (80077bc <prvCheckTasksWaitingTermination+0x50>)
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3304      	adds	r3, #4
 8007784:	4618      	mov	r0, r3
 8007786:	f7fe fc81 	bl	800608c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800778a:	4b0d      	ldr	r3, [pc, #52]	; (80077c0 <prvCheckTasksWaitingTermination+0x54>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3b01      	subs	r3, #1
 8007790:	4a0b      	ldr	r2, [pc, #44]	; (80077c0 <prvCheckTasksWaitingTermination+0x54>)
 8007792:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007794:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <prvCheckTasksWaitingTermination+0x58>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3b01      	subs	r3, #1
 800779a:	4a0a      	ldr	r2, [pc, #40]	; (80077c4 <prvCheckTasksWaitingTermination+0x58>)
 800779c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800779e:	f000 fdf1 	bl	8008384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f810 	bl	80077c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077a8:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <prvCheckTasksWaitingTermination+0x58>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e1      	bne.n	8007774 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077b0:	bf00      	nop
 80077b2:	bf00      	nop
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	20000bfc 	.word	0x20000bfc
 80077c0:	20000c28 	.word	0x20000c28
 80077c4:	20000c10 	.word	0x20000c10

080077c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d108      	bne.n	80077ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 ff8e 	bl	8008700 <vPortFree>
				vPortFree( pxTCB );
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 ff8b 	bl	8008700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077ea:	e018      	b.n	800781e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d103      	bne.n	80077fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 ff82 	bl	8008700 <vPortFree>
	}
 80077fc:	e00f      	b.n	800781e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007804:	2b02      	cmp	r3, #2
 8007806:	d00a      	beq.n	800781e <prvDeleteTCB+0x56>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	60fb      	str	r3, [r7, #12]
}
 800781a:	bf00      	nop
 800781c:	e7fe      	b.n	800781c <prvDeleteTCB+0x54>
	}
 800781e:	bf00      	nop
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800782e:	4b0c      	ldr	r3, [pc, #48]	; (8007860 <prvResetNextTaskUnblockTime+0x38>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d104      	bne.n	8007842 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007838:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <prvResetNextTaskUnblockTime+0x3c>)
 800783a:	f04f 32ff 	mov.w	r2, #4294967295
 800783e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007840:	e008      	b.n	8007854 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007842:	4b07      	ldr	r3, [pc, #28]	; (8007860 <prvResetNextTaskUnblockTime+0x38>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	4a04      	ldr	r2, [pc, #16]	; (8007864 <prvResetNextTaskUnblockTime+0x3c>)
 8007852:	6013      	str	r3, [r2, #0]
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	20000be0 	.word	0x20000be0
 8007864:	20000c48 	.word	0x20000c48

08007868 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800786e:	4b0b      	ldr	r3, [pc, #44]	; (800789c <xTaskGetSchedulerState+0x34>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d102      	bne.n	800787c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007876:	2301      	movs	r3, #1
 8007878:	607b      	str	r3, [r7, #4]
 800787a:	e008      	b.n	800788e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800787c:	4b08      	ldr	r3, [pc, #32]	; (80078a0 <xTaskGetSchedulerState+0x38>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007884:	2302      	movs	r3, #2
 8007886:	607b      	str	r3, [r7, #4]
 8007888:	e001      	b.n	800788e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800788a:	2300      	movs	r3, #0
 800788c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800788e:	687b      	ldr	r3, [r7, #4]
	}
 8007890:	4618      	mov	r0, r3
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	20000c34 	.word	0x20000c34
 80078a0:	20000c50 	.word	0x20000c50

080078a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078b0:	2300      	movs	r3, #0
 80078b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d056      	beq.n	8007968 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078ba:	4b2e      	ldr	r3, [pc, #184]	; (8007974 <xTaskPriorityDisinherit+0xd0>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d00a      	beq.n	80078da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	60fb      	str	r3, [r7, #12]
}
 80078d6:	bf00      	nop
 80078d8:	e7fe      	b.n	80078d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	60bb      	str	r3, [r7, #8]
}
 80078f4:	bf00      	nop
 80078f6:	e7fe      	b.n	80078f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078fc:	1e5a      	subs	r2, r3, #1
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800790a:	429a      	cmp	r2, r3
 800790c:	d02c      	beq.n	8007968 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007912:	2b00      	cmp	r3, #0
 8007914:	d128      	bne.n	8007968 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	3304      	adds	r3, #4
 800791a:	4618      	mov	r0, r3
 800791c:	f7fe fbb6 	bl	800608c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007938:	4b0f      	ldr	r3, [pc, #60]	; (8007978 <xTaskPriorityDisinherit+0xd4>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	429a      	cmp	r2, r3
 800793e:	d903      	bls.n	8007948 <xTaskPriorityDisinherit+0xa4>
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	4a0c      	ldr	r2, [pc, #48]	; (8007978 <xTaskPriorityDisinherit+0xd4>)
 8007946:	6013      	str	r3, [r2, #0]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794c:	4613      	mov	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4a09      	ldr	r2, [pc, #36]	; (800797c <xTaskPriorityDisinherit+0xd8>)
 8007956:	441a      	add	r2, r3
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	3304      	adds	r3, #4
 800795c:	4619      	mov	r1, r3
 800795e:	4610      	mov	r0, r2
 8007960:	f7fe fb37 	bl	8005fd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007964:	2301      	movs	r3, #1
 8007966:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007968:	697b      	ldr	r3, [r7, #20]
	}
 800796a:	4618      	mov	r0, r3
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000754 	.word	0x20000754
 8007978:	20000c30 	.word	0x20000c30
 800797c:	20000758 	.word	0x20000758

08007980 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800798a:	4b21      	ldr	r3, [pc, #132]	; (8007a10 <prvAddCurrentTaskToDelayedList+0x90>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007990:	4b20      	ldr	r3, [pc, #128]	; (8007a14 <prvAddCurrentTaskToDelayedList+0x94>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3304      	adds	r3, #4
 8007996:	4618      	mov	r0, r3
 8007998:	f7fe fb78 	bl	800608c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a2:	d10a      	bne.n	80079ba <prvAddCurrentTaskToDelayedList+0x3a>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d007      	beq.n	80079ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079aa:	4b1a      	ldr	r3, [pc, #104]	; (8007a14 <prvAddCurrentTaskToDelayedList+0x94>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	3304      	adds	r3, #4
 80079b0:	4619      	mov	r1, r3
 80079b2:	4819      	ldr	r0, [pc, #100]	; (8007a18 <prvAddCurrentTaskToDelayedList+0x98>)
 80079b4:	f7fe fb0d 	bl	8005fd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079b8:	e026      	b.n	8007a08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4413      	add	r3, r2
 80079c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079c2:	4b14      	ldr	r3, [pc, #80]	; (8007a14 <prvAddCurrentTaskToDelayedList+0x94>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d209      	bcs.n	80079e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079d2:	4b12      	ldr	r3, [pc, #72]	; (8007a1c <prvAddCurrentTaskToDelayedList+0x9c>)
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	4b0f      	ldr	r3, [pc, #60]	; (8007a14 <prvAddCurrentTaskToDelayedList+0x94>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3304      	adds	r3, #4
 80079dc:	4619      	mov	r1, r3
 80079de:	4610      	mov	r0, r2
 80079e0:	f7fe fb1b 	bl	800601a <vListInsert>
}
 80079e4:	e010      	b.n	8007a08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079e6:	4b0e      	ldr	r3, [pc, #56]	; (8007a20 <prvAddCurrentTaskToDelayedList+0xa0>)
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <prvAddCurrentTaskToDelayedList+0x94>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3304      	adds	r3, #4
 80079f0:	4619      	mov	r1, r3
 80079f2:	4610      	mov	r0, r2
 80079f4:	f7fe fb11 	bl	800601a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079f8:	4b0a      	ldr	r3, [pc, #40]	; (8007a24 <prvAddCurrentTaskToDelayedList+0xa4>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d202      	bcs.n	8007a08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a02:	4a08      	ldr	r2, [pc, #32]	; (8007a24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	6013      	str	r3, [r2, #0]
}
 8007a08:	bf00      	nop
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	20000c2c 	.word	0x20000c2c
 8007a14:	20000754 	.word	0x20000754
 8007a18:	20000c14 	.word	0x20000c14
 8007a1c:	20000be4 	.word	0x20000be4
 8007a20:	20000be0 	.word	0x20000be0
 8007a24:	20000c48 	.word	0x20000c48

08007a28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08a      	sub	sp, #40	; 0x28
 8007a2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a32:	f000 fb07 	bl	8008044 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a36:	4b1c      	ldr	r3, [pc, #112]	; (8007aa8 <xTimerCreateTimerTask+0x80>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d021      	beq.n	8007a82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a46:	1d3a      	adds	r2, r7, #4
 8007a48:	f107 0108 	add.w	r1, r7, #8
 8007a4c:	f107 030c 	add.w	r3, r7, #12
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fe fa77 	bl	8005f44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	9202      	str	r2, [sp, #8]
 8007a5e:	9301      	str	r3, [sp, #4]
 8007a60:	2302      	movs	r3, #2
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	2300      	movs	r3, #0
 8007a66:	460a      	mov	r2, r1
 8007a68:	4910      	ldr	r1, [pc, #64]	; (8007aac <xTimerCreateTimerTask+0x84>)
 8007a6a:	4811      	ldr	r0, [pc, #68]	; (8007ab0 <xTimerCreateTimerTask+0x88>)
 8007a6c:	f7ff f8de 	bl	8006c2c <xTaskCreateStatic>
 8007a70:	4603      	mov	r3, r0
 8007a72:	4a10      	ldr	r2, [pc, #64]	; (8007ab4 <xTimerCreateTimerTask+0x8c>)
 8007a74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a76:	4b0f      	ldr	r3, [pc, #60]	; (8007ab4 <xTimerCreateTimerTask+0x8c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10a      	bne.n	8007a9e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8c:	f383 8811 	msr	BASEPRI, r3
 8007a90:	f3bf 8f6f 	isb	sy
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	613b      	str	r3, [r7, #16]
}
 8007a9a:	bf00      	nop
 8007a9c:	e7fe      	b.n	8007a9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007a9e:	697b      	ldr	r3, [r7, #20]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	20000c84 	.word	0x20000c84
 8007aac:	080093f8 	.word	0x080093f8
 8007ab0:	08007bed 	.word	0x08007bed
 8007ab4:	20000c88 	.word	0x20000c88

08007ab8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08a      	sub	sp, #40	; 0x28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10a      	bne.n	8007ae6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	623b      	str	r3, [r7, #32]
}
 8007ae2:	bf00      	nop
 8007ae4:	e7fe      	b.n	8007ae4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ae6:	4b1a      	ldr	r3, [pc, #104]	; (8007b50 <xTimerGenericCommand+0x98>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d02a      	beq.n	8007b44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	2b05      	cmp	r3, #5
 8007afe:	dc18      	bgt.n	8007b32 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b00:	f7ff feb2 	bl	8007868 <xTaskGetSchedulerState>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d109      	bne.n	8007b1e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b0a:	4b11      	ldr	r3, [pc, #68]	; (8007b50 <xTimerGenericCommand+0x98>)
 8007b0c:	6818      	ldr	r0, [r3, #0]
 8007b0e:	f107 0110 	add.w	r1, r7, #16
 8007b12:	2300      	movs	r3, #0
 8007b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b16:	f7fe fc21 	bl	800635c <xQueueGenericSend>
 8007b1a:	6278      	str	r0, [r7, #36]	; 0x24
 8007b1c:	e012      	b.n	8007b44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b1e:	4b0c      	ldr	r3, [pc, #48]	; (8007b50 <xTimerGenericCommand+0x98>)
 8007b20:	6818      	ldr	r0, [r3, #0]
 8007b22:	f107 0110 	add.w	r1, r7, #16
 8007b26:	2300      	movs	r3, #0
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f7fe fc17 	bl	800635c <xQueueGenericSend>
 8007b2e:	6278      	str	r0, [r7, #36]	; 0x24
 8007b30:	e008      	b.n	8007b44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b32:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <xTimerGenericCommand+0x98>)
 8007b34:	6818      	ldr	r0, [r3, #0]
 8007b36:	f107 0110 	add.w	r1, r7, #16
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	f7fe fd0b 	bl	8006558 <xQueueGenericSendFromISR>
 8007b42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3728      	adds	r7, #40	; 0x28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	20000c84 	.word	0x20000c84

08007b54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af02      	add	r7, sp, #8
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b5e:	4b22      	ldr	r3, [pc, #136]	; (8007be8 <prvProcessExpiredTimer+0x94>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7fe fa8d 	bl	800608c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b78:	f003 0304 	and.w	r3, r3, #4
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d022      	beq.n	8007bc6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	699a      	ldr	r2, [r3, #24]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	18d1      	adds	r1, r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	6978      	ldr	r0, [r7, #20]
 8007b8e:	f000 f8d1 	bl	8007d34 <prvInsertTimerInActiveList>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d01f      	beq.n	8007bd8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b98:	2300      	movs	r3, #0
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	6978      	ldr	r0, [r7, #20]
 8007ba4:	f7ff ff88 	bl	8007ab8 <xTimerGenericCommand>
 8007ba8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d113      	bne.n	8007bd8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	60fb      	str	r3, [r7, #12]
}
 8007bc2:	bf00      	nop
 8007bc4:	e7fe      	b.n	8007bc4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bcc:	f023 0301 	bic.w	r3, r3, #1
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	6978      	ldr	r0, [r7, #20]
 8007bde:	4798      	blx	r3
}
 8007be0:	bf00      	nop
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	20000c7c 	.word	0x20000c7c

08007bec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bf4:	f107 0308 	add.w	r3, r7, #8
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 f857 	bl	8007cac <prvGetNextExpireTime>
 8007bfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4619      	mov	r1, r3
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 f803 	bl	8007c10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007c0a:	f000 f8d5 	bl	8007db8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c0e:	e7f1      	b.n	8007bf4 <prvTimerTask+0x8>

08007c10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c1a:	f7ff fa43 	bl	80070a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c1e:	f107 0308 	add.w	r3, r7, #8
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 f866 	bl	8007cf4 <prvSampleTimeNow>
 8007c28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d130      	bne.n	8007c92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10a      	bne.n	8007c4c <prvProcessTimerOrBlockTask+0x3c>
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d806      	bhi.n	8007c4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c3e:	f7ff fa3f 	bl	80070c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c42:	68f9      	ldr	r1, [r7, #12]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7ff ff85 	bl	8007b54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c4a:	e024      	b.n	8007c96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d008      	beq.n	8007c64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c52:	4b13      	ldr	r3, [pc, #76]	; (8007ca0 <prvProcessTimerOrBlockTask+0x90>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <prvProcessTimerOrBlockTask+0x50>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e000      	b.n	8007c62 <prvProcessTimerOrBlockTask+0x52>
 8007c60:	2300      	movs	r3, #0
 8007c62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c64:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <prvProcessTimerOrBlockTask+0x94>)
 8007c66:	6818      	ldr	r0, [r3, #0]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	4619      	mov	r1, r3
 8007c72:	f7fe ffa7 	bl	8006bc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c76:	f7ff fa23 	bl	80070c0 <xTaskResumeAll>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c80:	4b09      	ldr	r3, [pc, #36]	; (8007ca8 <prvProcessTimerOrBlockTask+0x98>)
 8007c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	f3bf 8f6f 	isb	sy
}
 8007c90:	e001      	b.n	8007c96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c92:	f7ff fa15 	bl	80070c0 <xTaskResumeAll>
}
 8007c96:	bf00      	nop
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20000c80 	.word	0x20000c80
 8007ca4:	20000c84 	.word	0x20000c84
 8007ca8:	e000ed04 	.word	0xe000ed04

08007cac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007cb4:	4b0e      	ldr	r3, [pc, #56]	; (8007cf0 <prvGetNextExpireTime+0x44>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d101      	bne.n	8007cc2 <prvGetNextExpireTime+0x16>
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	e000      	b.n	8007cc4 <prvGetNextExpireTime+0x18>
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d105      	bne.n	8007cdc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cd0:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <prvGetNextExpireTime+0x44>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	e001      	b.n	8007ce0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	20000c7c 	.word	0x20000c7c

08007cf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007cfc:	f7ff fa7e 	bl	80071fc <xTaskGetTickCount>
 8007d00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d02:	4b0b      	ldr	r3, [pc, #44]	; (8007d30 <prvSampleTimeNow+0x3c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d205      	bcs.n	8007d18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d0c:	f000 f936 	bl	8007f7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	e002      	b.n	8007d1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d1e:	4a04      	ldr	r2, [pc, #16]	; (8007d30 <prvSampleTimeNow+0x3c>)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d24:	68fb      	ldr	r3, [r7, #12]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000c8c 	.word	0x20000c8c

08007d34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d42:	2300      	movs	r3, #0
 8007d44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d812      	bhi.n	8007d80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	1ad2      	subs	r2, r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d302      	bcc.n	8007d6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	617b      	str	r3, [r7, #20]
 8007d6c:	e01b      	b.n	8007da6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d6e:	4b10      	ldr	r3, [pc, #64]	; (8007db0 <prvInsertTimerInActiveList+0x7c>)
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3304      	adds	r3, #4
 8007d76:	4619      	mov	r1, r3
 8007d78:	4610      	mov	r0, r2
 8007d7a:	f7fe f94e 	bl	800601a <vListInsert>
 8007d7e:	e012      	b.n	8007da6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d206      	bcs.n	8007d96 <prvInsertTimerInActiveList+0x62>
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d302      	bcc.n	8007d96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d90:	2301      	movs	r3, #1
 8007d92:	617b      	str	r3, [r7, #20]
 8007d94:	e007      	b.n	8007da6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d96:	4b07      	ldr	r3, [pc, #28]	; (8007db4 <prvInsertTimerInActiveList+0x80>)
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4610      	mov	r0, r2
 8007da2:	f7fe f93a 	bl	800601a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007da6:	697b      	ldr	r3, [r7, #20]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3718      	adds	r7, #24
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	20000c80 	.word	0x20000c80
 8007db4:	20000c7c 	.word	0x20000c7c

08007db8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08e      	sub	sp, #56	; 0x38
 8007dbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dbe:	e0ca      	b.n	8007f56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	da18      	bge.n	8007df8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007dc6:	1d3b      	adds	r3, r7, #4
 8007dc8:	3304      	adds	r3, #4
 8007dca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10a      	bne.n	8007de8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	61fb      	str	r3, [r7, #28]
}
 8007de4:	bf00      	nop
 8007de6:	e7fe      	b.n	8007de6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dee:	6850      	ldr	r0, [r2, #4]
 8007df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007df2:	6892      	ldr	r2, [r2, #8]
 8007df4:	4611      	mov	r1, r2
 8007df6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f2c0 80aa 	blt.w	8007f54 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d004      	beq.n	8007e16 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0e:	3304      	adds	r3, #4
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fe f93b 	bl	800608c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e16:	463b      	mov	r3, r7
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7ff ff6b 	bl	8007cf4 <prvSampleTimeNow>
 8007e1e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b09      	cmp	r3, #9
 8007e24:	f200 8097 	bhi.w	8007f56 <prvProcessReceivedCommands+0x19e>
 8007e28:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <prvProcessReceivedCommands+0x78>)
 8007e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2e:	bf00      	nop
 8007e30:	08007e59 	.word	0x08007e59
 8007e34:	08007e59 	.word	0x08007e59
 8007e38:	08007e59 	.word	0x08007e59
 8007e3c:	08007ecd 	.word	0x08007ecd
 8007e40:	08007ee1 	.word	0x08007ee1
 8007e44:	08007f2b 	.word	0x08007f2b
 8007e48:	08007e59 	.word	0x08007e59
 8007e4c:	08007e59 	.word	0x08007e59
 8007e50:	08007ecd 	.word	0x08007ecd
 8007e54:	08007ee1 	.word	0x08007ee1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e5e:	f043 0301 	orr.w	r3, r3, #1
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	18d1      	adds	r1, r2, r3
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e78:	f7ff ff5c 	bl	8007d34 <prvInsertTimerInActiveList>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d069      	beq.n	8007f56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e90:	f003 0304 	and.w	r3, r3, #4
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d05e      	beq.n	8007f56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	441a      	add	r2, r3
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eaa:	f7ff fe05 	bl	8007ab8 <xTimerGenericCommand>
 8007eae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d14f      	bne.n	8007f56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	61bb      	str	r3, [r7, #24]
}
 8007ec8:	bf00      	nop
 8007eca:	e7fe      	b.n	8007eca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ed2:	f023 0301 	bic.w	r3, r3, #1
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007ede:	e03a      	b.n	8007f56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ee6:	f043 0301 	orr.w	r3, r3, #1
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10a      	bne.n	8007f16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	617b      	str	r3, [r7, #20]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	699a      	ldr	r2, [r3, #24]
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	18d1      	adds	r1, r2, r3
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f24:	f7ff ff06 	bl	8007d34 <prvInsertTimerInActiveList>
					break;
 8007f28:	e015      	b.n	8007f56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d103      	bne.n	8007f40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f3a:	f000 fbe1 	bl	8008700 <vPortFree>
 8007f3e:	e00a      	b.n	8007f56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f46:	f023 0301 	bic.w	r3, r3, #1
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f52:	e000      	b.n	8007f56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007f54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f56:	4b08      	ldr	r3, [pc, #32]	; (8007f78 <prvProcessReceivedCommands+0x1c0>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	1d39      	adds	r1, r7, #4
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe fb96 	bl	8006690 <xQueueReceive>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f47f af2a 	bne.w	8007dc0 <prvProcessReceivedCommands+0x8>
	}
}
 8007f6c:	bf00      	nop
 8007f6e:	bf00      	nop
 8007f70:	3730      	adds	r7, #48	; 0x30
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20000c84 	.word	0x20000c84

08007f7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b088      	sub	sp, #32
 8007f80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f82:	e048      	b.n	8008016 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f84:	4b2d      	ldr	r3, [pc, #180]	; (800803c <prvSwitchTimerLists+0xc0>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f8e:	4b2b      	ldr	r3, [pc, #172]	; (800803c <prvSwitchTimerLists+0xc0>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7fe f875 	bl	800608c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d02e      	beq.n	8008016 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d90e      	bls.n	8007fe8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007fd6:	4b19      	ldr	r3, [pc, #100]	; (800803c <prvSwitchTimerLists+0xc0>)
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3304      	adds	r3, #4
 8007fde:	4619      	mov	r1, r3
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	f7fe f81a 	bl	800601a <vListInsert>
 8007fe6:	e016      	b.n	8008016 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fe8:	2300      	movs	r3, #0
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	2300      	movs	r3, #0
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f7ff fd60 	bl	8007ab8 <xTimerGenericCommand>
 8007ff8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10a      	bne.n	8008016 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	603b      	str	r3, [r7, #0]
}
 8008012:	bf00      	nop
 8008014:	e7fe      	b.n	8008014 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008016:	4b09      	ldr	r3, [pc, #36]	; (800803c <prvSwitchTimerLists+0xc0>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1b1      	bne.n	8007f84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008020:	4b06      	ldr	r3, [pc, #24]	; (800803c <prvSwitchTimerLists+0xc0>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008026:	4b06      	ldr	r3, [pc, #24]	; (8008040 <prvSwitchTimerLists+0xc4>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a04      	ldr	r2, [pc, #16]	; (800803c <prvSwitchTimerLists+0xc0>)
 800802c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800802e:	4a04      	ldr	r2, [pc, #16]	; (8008040 <prvSwitchTimerLists+0xc4>)
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	6013      	str	r3, [r2, #0]
}
 8008034:	bf00      	nop
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	20000c7c 	.word	0x20000c7c
 8008040:	20000c80 	.word	0x20000c80

08008044 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800804a:	f000 f96b 	bl	8008324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800804e:	4b15      	ldr	r3, [pc, #84]	; (80080a4 <prvCheckForValidListAndQueue+0x60>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d120      	bne.n	8008098 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008056:	4814      	ldr	r0, [pc, #80]	; (80080a8 <prvCheckForValidListAndQueue+0x64>)
 8008058:	f7fd ff8e 	bl	8005f78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800805c:	4813      	ldr	r0, [pc, #76]	; (80080ac <prvCheckForValidListAndQueue+0x68>)
 800805e:	f7fd ff8b 	bl	8005f78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008062:	4b13      	ldr	r3, [pc, #76]	; (80080b0 <prvCheckForValidListAndQueue+0x6c>)
 8008064:	4a10      	ldr	r2, [pc, #64]	; (80080a8 <prvCheckForValidListAndQueue+0x64>)
 8008066:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008068:	4b12      	ldr	r3, [pc, #72]	; (80080b4 <prvCheckForValidListAndQueue+0x70>)
 800806a:	4a10      	ldr	r2, [pc, #64]	; (80080ac <prvCheckForValidListAndQueue+0x68>)
 800806c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800806e:	2300      	movs	r3, #0
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	4b11      	ldr	r3, [pc, #68]	; (80080b8 <prvCheckForValidListAndQueue+0x74>)
 8008074:	4a11      	ldr	r2, [pc, #68]	; (80080bc <prvCheckForValidListAndQueue+0x78>)
 8008076:	2110      	movs	r1, #16
 8008078:	200a      	movs	r0, #10
 800807a:	f7fe f899 	bl	80061b0 <xQueueGenericCreateStatic>
 800807e:	4603      	mov	r3, r0
 8008080:	4a08      	ldr	r2, [pc, #32]	; (80080a4 <prvCheckForValidListAndQueue+0x60>)
 8008082:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008084:	4b07      	ldr	r3, [pc, #28]	; (80080a4 <prvCheckForValidListAndQueue+0x60>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d005      	beq.n	8008098 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800808c:	4b05      	ldr	r3, [pc, #20]	; (80080a4 <prvCheckForValidListAndQueue+0x60>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	490b      	ldr	r1, [pc, #44]	; (80080c0 <prvCheckForValidListAndQueue+0x7c>)
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe fd6c 	bl	8006b70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008098:	f000 f974 	bl	8008384 <vPortExitCritical>
}
 800809c:	bf00      	nop
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	20000c84 	.word	0x20000c84
 80080a8:	20000c54 	.word	0x20000c54
 80080ac:	20000c68 	.word	0x20000c68
 80080b0:	20000c7c 	.word	0x20000c7c
 80080b4:	20000c80 	.word	0x20000c80
 80080b8:	20000d30 	.word	0x20000d30
 80080bc:	20000c90 	.word	0x20000c90
 80080c0:	08009400 	.word	0x08009400

080080c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	3b04      	subs	r3, #4
 80080d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80080dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3b04      	subs	r3, #4
 80080e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	f023 0201 	bic.w	r2, r3, #1
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3b04      	subs	r3, #4
 80080f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080f4:	4a0c      	ldr	r2, [pc, #48]	; (8008128 <pxPortInitialiseStack+0x64>)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	3b14      	subs	r3, #20
 80080fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3b04      	subs	r3, #4
 800810a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f06f 0202 	mvn.w	r2, #2
 8008112:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	3b20      	subs	r3, #32
 8008118:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800811a:	68fb      	ldr	r3, [r7, #12]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	0800812d 	.word	0x0800812d

0800812c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008136:	4b12      	ldr	r3, [pc, #72]	; (8008180 <prvTaskExitError+0x54>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813e:	d00a      	beq.n	8008156 <prvTaskExitError+0x2a>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	60fb      	str	r3, [r7, #12]
}
 8008152:	bf00      	nop
 8008154:	e7fe      	b.n	8008154 <prvTaskExitError+0x28>
	__asm volatile
 8008156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815a:	f383 8811 	msr	BASEPRI, r3
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	60bb      	str	r3, [r7, #8]
}
 8008168:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800816a:	bf00      	nop
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d0fc      	beq.n	800816c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008172:	bf00      	nop
 8008174:	bf00      	nop
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	2000000c 	.word	0x2000000c
	...

08008190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008190:	4b07      	ldr	r3, [pc, #28]	; (80081b0 <pxCurrentTCBConst2>)
 8008192:	6819      	ldr	r1, [r3, #0]
 8008194:	6808      	ldr	r0, [r1, #0]
 8008196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819a:	f380 8809 	msr	PSP, r0
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f04f 0000 	mov.w	r0, #0
 80081a6:	f380 8811 	msr	BASEPRI, r0
 80081aa:	4770      	bx	lr
 80081ac:	f3af 8000 	nop.w

080081b0 <pxCurrentTCBConst2>:
 80081b0:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081b4:	bf00      	nop
 80081b6:	bf00      	nop

080081b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081b8:	4808      	ldr	r0, [pc, #32]	; (80081dc <prvPortStartFirstTask+0x24>)
 80081ba:	6800      	ldr	r0, [r0, #0]
 80081bc:	6800      	ldr	r0, [r0, #0]
 80081be:	f380 8808 	msr	MSP, r0
 80081c2:	f04f 0000 	mov.w	r0, #0
 80081c6:	f380 8814 	msr	CONTROL, r0
 80081ca:	b662      	cpsie	i
 80081cc:	b661      	cpsie	f
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	df00      	svc	0
 80081d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081da:	bf00      	nop
 80081dc:	e000ed08 	.word	0xe000ed08

080081e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081e6:	4b46      	ldr	r3, [pc, #280]	; (8008300 <xPortStartScheduler+0x120>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a46      	ldr	r2, [pc, #280]	; (8008304 <xPortStartScheduler+0x124>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d10a      	bne.n	8008206 <xPortStartScheduler+0x26>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	613b      	str	r3, [r7, #16]
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008206:	4b3e      	ldr	r3, [pc, #248]	; (8008300 <xPortStartScheduler+0x120>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a3f      	ldr	r2, [pc, #252]	; (8008308 <xPortStartScheduler+0x128>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d10a      	bne.n	8008226 <xPortStartScheduler+0x46>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	60fb      	str	r3, [r7, #12]
}
 8008222:	bf00      	nop
 8008224:	e7fe      	b.n	8008224 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008226:	4b39      	ldr	r3, [pc, #228]	; (800830c <xPortStartScheduler+0x12c>)
 8008228:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	22ff      	movs	r2, #255	; 0xff
 8008236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008248:	b2da      	uxtb	r2, r3
 800824a:	4b31      	ldr	r3, [pc, #196]	; (8008310 <xPortStartScheduler+0x130>)
 800824c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800824e:	4b31      	ldr	r3, [pc, #196]	; (8008314 <xPortStartScheduler+0x134>)
 8008250:	2207      	movs	r2, #7
 8008252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008254:	e009      	b.n	800826a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008256:	4b2f      	ldr	r3, [pc, #188]	; (8008314 <xPortStartScheduler+0x134>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3b01      	subs	r3, #1
 800825c:	4a2d      	ldr	r2, [pc, #180]	; (8008314 <xPortStartScheduler+0x134>)
 800825e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	b2db      	uxtb	r3, r3
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	b2db      	uxtb	r3, r3
 8008268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008272:	2b80      	cmp	r3, #128	; 0x80
 8008274:	d0ef      	beq.n	8008256 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008276:	4b27      	ldr	r3, [pc, #156]	; (8008314 <xPortStartScheduler+0x134>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f1c3 0307 	rsb	r3, r3, #7
 800827e:	2b04      	cmp	r3, #4
 8008280:	d00a      	beq.n	8008298 <xPortStartScheduler+0xb8>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	60bb      	str	r3, [r7, #8]
}
 8008294:	bf00      	nop
 8008296:	e7fe      	b.n	8008296 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008298:	4b1e      	ldr	r3, [pc, #120]	; (8008314 <xPortStartScheduler+0x134>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	021b      	lsls	r3, r3, #8
 800829e:	4a1d      	ldr	r2, [pc, #116]	; (8008314 <xPortStartScheduler+0x134>)
 80082a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082a2:	4b1c      	ldr	r3, [pc, #112]	; (8008314 <xPortStartScheduler+0x134>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082aa:	4a1a      	ldr	r2, [pc, #104]	; (8008314 <xPortStartScheduler+0x134>)
 80082ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082b6:	4b18      	ldr	r3, [pc, #96]	; (8008318 <xPortStartScheduler+0x138>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a17      	ldr	r2, [pc, #92]	; (8008318 <xPortStartScheduler+0x138>)
 80082bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082c2:	4b15      	ldr	r3, [pc, #84]	; (8008318 <xPortStartScheduler+0x138>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a14      	ldr	r2, [pc, #80]	; (8008318 <xPortStartScheduler+0x138>)
 80082c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082ce:	f000 f8dd 	bl	800848c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082d2:	4b12      	ldr	r3, [pc, #72]	; (800831c <xPortStartScheduler+0x13c>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082d8:	f000 f8fc 	bl	80084d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082dc:	4b10      	ldr	r3, [pc, #64]	; (8008320 <xPortStartScheduler+0x140>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a0f      	ldr	r2, [pc, #60]	; (8008320 <xPortStartScheduler+0x140>)
 80082e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80082e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082e8:	f7ff ff66 	bl	80081b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082ec:	f7ff f850 	bl	8007390 <vTaskSwitchContext>
	prvTaskExitError();
 80082f0:	f7ff ff1c 	bl	800812c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	e000ed00 	.word	0xe000ed00
 8008304:	410fc271 	.word	0x410fc271
 8008308:	410fc270 	.word	0x410fc270
 800830c:	e000e400 	.word	0xe000e400
 8008310:	20000d80 	.word	0x20000d80
 8008314:	20000d84 	.word	0x20000d84
 8008318:	e000ed20 	.word	0xe000ed20
 800831c:	2000000c 	.word	0x2000000c
 8008320:	e000ef34 	.word	0xe000ef34

08008324 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	607b      	str	r3, [r7, #4]
}
 800833c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800833e:	4b0f      	ldr	r3, [pc, #60]	; (800837c <vPortEnterCritical+0x58>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3301      	adds	r3, #1
 8008344:	4a0d      	ldr	r2, [pc, #52]	; (800837c <vPortEnterCritical+0x58>)
 8008346:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008348:	4b0c      	ldr	r3, [pc, #48]	; (800837c <vPortEnterCritical+0x58>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d10f      	bne.n	8008370 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008350:	4b0b      	ldr	r3, [pc, #44]	; (8008380 <vPortEnterCritical+0x5c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <vPortEnterCritical+0x4c>
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	603b      	str	r3, [r7, #0]
}
 800836c:	bf00      	nop
 800836e:	e7fe      	b.n	800836e <vPortEnterCritical+0x4a>
	}
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	2000000c 	.word	0x2000000c
 8008380:	e000ed04 	.word	0xe000ed04

08008384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800838a:	4b12      	ldr	r3, [pc, #72]	; (80083d4 <vPortExitCritical+0x50>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10a      	bne.n	80083a8 <vPortExitCritical+0x24>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	607b      	str	r3, [r7, #4]
}
 80083a4:	bf00      	nop
 80083a6:	e7fe      	b.n	80083a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083a8:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <vPortExitCritical+0x50>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3b01      	subs	r3, #1
 80083ae:	4a09      	ldr	r2, [pc, #36]	; (80083d4 <vPortExitCritical+0x50>)
 80083b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083b2:	4b08      	ldr	r3, [pc, #32]	; (80083d4 <vPortExitCritical+0x50>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d105      	bne.n	80083c6 <vPortExitCritical+0x42>
 80083ba:	2300      	movs	r3, #0
 80083bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	f383 8811 	msr	BASEPRI, r3
}
 80083c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	2000000c 	.word	0x2000000c
	...

080083e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083e0:	f3ef 8009 	mrs	r0, PSP
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	4b15      	ldr	r3, [pc, #84]	; (8008440 <pxCurrentTCBConst>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	f01e 0f10 	tst.w	lr, #16
 80083f0:	bf08      	it	eq
 80083f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fa:	6010      	str	r0, [r2, #0]
 80083fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008404:	f380 8811 	msr	BASEPRI, r0
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f7fe ffbe 	bl	8007390 <vTaskSwitchContext>
 8008414:	f04f 0000 	mov.w	r0, #0
 8008418:	f380 8811 	msr	BASEPRI, r0
 800841c:	bc09      	pop	{r0, r3}
 800841e:	6819      	ldr	r1, [r3, #0]
 8008420:	6808      	ldr	r0, [r1, #0]
 8008422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008426:	f01e 0f10 	tst.w	lr, #16
 800842a:	bf08      	it	eq
 800842c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008430:	f380 8809 	msr	PSP, r0
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	f3af 8000 	nop.w

08008440 <pxCurrentTCBConst>:
 8008440:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop

08008448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	607b      	str	r3, [r7, #4]
}
 8008460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008462:	f7fe fedb 	bl	800721c <xTaskIncrementTick>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800846c:	4b06      	ldr	r3, [pc, #24]	; (8008488 <xPortSysTickHandler+0x40>)
 800846e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	2300      	movs	r3, #0
 8008476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	f383 8811 	msr	BASEPRI, r3
}
 800847e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008480:	bf00      	nop
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	e000ed04 	.word	0xe000ed04

0800848c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008490:	4b0b      	ldr	r3, [pc, #44]	; (80084c0 <vPortSetupTimerInterrupt+0x34>)
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008496:	4b0b      	ldr	r3, [pc, #44]	; (80084c4 <vPortSetupTimerInterrupt+0x38>)
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800849c:	4b0a      	ldr	r3, [pc, #40]	; (80084c8 <vPortSetupTimerInterrupt+0x3c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a0a      	ldr	r2, [pc, #40]	; (80084cc <vPortSetupTimerInterrupt+0x40>)
 80084a2:	fba2 2303 	umull	r2, r3, r2, r3
 80084a6:	099b      	lsrs	r3, r3, #6
 80084a8:	4a09      	ldr	r2, [pc, #36]	; (80084d0 <vPortSetupTimerInterrupt+0x44>)
 80084aa:	3b01      	subs	r3, #1
 80084ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084ae:	4b04      	ldr	r3, [pc, #16]	; (80084c0 <vPortSetupTimerInterrupt+0x34>)
 80084b0:	2207      	movs	r2, #7
 80084b2:	601a      	str	r2, [r3, #0]
}
 80084b4:	bf00      	nop
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	e000e010 	.word	0xe000e010
 80084c4:	e000e018 	.word	0xe000e018
 80084c8:	20000000 	.word	0x20000000
 80084cc:	10624dd3 	.word	0x10624dd3
 80084d0:	e000e014 	.word	0xe000e014

080084d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80084e4 <vPortEnableVFP+0x10>
 80084d8:	6801      	ldr	r1, [r0, #0]
 80084da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084de:	6001      	str	r1, [r0, #0]
 80084e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084e2:	bf00      	nop
 80084e4:	e000ed88 	.word	0xe000ed88

080084e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084ee:	f3ef 8305 	mrs	r3, IPSR
 80084f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b0f      	cmp	r3, #15
 80084f8:	d914      	bls.n	8008524 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084fa:	4a17      	ldr	r2, [pc, #92]	; (8008558 <vPortValidateInterruptPriority+0x70>)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4413      	add	r3, r2
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008504:	4b15      	ldr	r3, [pc, #84]	; (800855c <vPortValidateInterruptPriority+0x74>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	7afa      	ldrb	r2, [r7, #11]
 800850a:	429a      	cmp	r2, r3
 800850c:	d20a      	bcs.n	8008524 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	607b      	str	r3, [r7, #4]
}
 8008520:	bf00      	nop
 8008522:	e7fe      	b.n	8008522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008524:	4b0e      	ldr	r3, [pc, #56]	; (8008560 <vPortValidateInterruptPriority+0x78>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800852c:	4b0d      	ldr	r3, [pc, #52]	; (8008564 <vPortValidateInterruptPriority+0x7c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	429a      	cmp	r2, r3
 8008532:	d90a      	bls.n	800854a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	603b      	str	r3, [r7, #0]
}
 8008546:	bf00      	nop
 8008548:	e7fe      	b.n	8008548 <vPortValidateInterruptPriority+0x60>
	}
 800854a:	bf00      	nop
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	e000e3f0 	.word	0xe000e3f0
 800855c:	20000d80 	.word	0x20000d80
 8008560:	e000ed0c 	.word	0xe000ed0c
 8008564:	20000d84 	.word	0x20000d84

08008568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b08a      	sub	sp, #40	; 0x28
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008570:	2300      	movs	r3, #0
 8008572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008574:	f7fe fd96 	bl	80070a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008578:	4b5b      	ldr	r3, [pc, #364]	; (80086e8 <pvPortMalloc+0x180>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008580:	f000 f920 	bl	80087c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008584:	4b59      	ldr	r3, [pc, #356]	; (80086ec <pvPortMalloc+0x184>)
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4013      	ands	r3, r2
 800858c:	2b00      	cmp	r3, #0
 800858e:	f040 8093 	bne.w	80086b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d01d      	beq.n	80085d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008598:	2208      	movs	r2, #8
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4413      	add	r3, r2
 800859e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f003 0307 	and.w	r3, r3, #7
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d014      	beq.n	80085d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f023 0307 	bic.w	r3, r3, #7
 80085b0:	3308      	adds	r3, #8
 80085b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <pvPortMalloc+0x6c>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	617b      	str	r3, [r7, #20]
}
 80085d0:	bf00      	nop
 80085d2:	e7fe      	b.n	80085d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d06e      	beq.n	80086b8 <pvPortMalloc+0x150>
 80085da:	4b45      	ldr	r3, [pc, #276]	; (80086f0 <pvPortMalloc+0x188>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d869      	bhi.n	80086b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085e4:	4b43      	ldr	r3, [pc, #268]	; (80086f4 <pvPortMalloc+0x18c>)
 80085e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085e8:	4b42      	ldr	r3, [pc, #264]	; (80086f4 <pvPortMalloc+0x18c>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085ee:	e004      	b.n	80085fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	429a      	cmp	r2, r3
 8008602:	d903      	bls.n	800860c <pvPortMalloc+0xa4>
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1f1      	bne.n	80085f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800860c:	4b36      	ldr	r3, [pc, #216]	; (80086e8 <pvPortMalloc+0x180>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008612:	429a      	cmp	r2, r3
 8008614:	d050      	beq.n	80086b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2208      	movs	r2, #8
 800861c:	4413      	add	r3, r2
 800861e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	1ad2      	subs	r2, r2, r3
 8008630:	2308      	movs	r3, #8
 8008632:	005b      	lsls	r3, r3, #1
 8008634:	429a      	cmp	r2, r3
 8008636:	d91f      	bls.n	8008678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4413      	add	r3, r2
 800863e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	f003 0307 	and.w	r3, r3, #7
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00a      	beq.n	8008660 <pvPortMalloc+0xf8>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	613b      	str	r3, [r7, #16]
}
 800865c:	bf00      	nop
 800865e:	e7fe      	b.n	800865e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	1ad2      	subs	r2, r2, r3
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008672:	69b8      	ldr	r0, [r7, #24]
 8008674:	f000 f908 	bl	8008888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008678:	4b1d      	ldr	r3, [pc, #116]	; (80086f0 <pvPortMalloc+0x188>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	4a1b      	ldr	r2, [pc, #108]	; (80086f0 <pvPortMalloc+0x188>)
 8008684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008686:	4b1a      	ldr	r3, [pc, #104]	; (80086f0 <pvPortMalloc+0x188>)
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	4b1b      	ldr	r3, [pc, #108]	; (80086f8 <pvPortMalloc+0x190>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	429a      	cmp	r2, r3
 8008690:	d203      	bcs.n	800869a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008692:	4b17      	ldr	r3, [pc, #92]	; (80086f0 <pvPortMalloc+0x188>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a18      	ldr	r2, [pc, #96]	; (80086f8 <pvPortMalloc+0x190>)
 8008698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	4b13      	ldr	r3, [pc, #76]	; (80086ec <pvPortMalloc+0x184>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	431a      	orrs	r2, r3
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	2200      	movs	r2, #0
 80086ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80086ae:	4b13      	ldr	r3, [pc, #76]	; (80086fc <pvPortMalloc+0x194>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3301      	adds	r3, #1
 80086b4:	4a11      	ldr	r2, [pc, #68]	; (80086fc <pvPortMalloc+0x194>)
 80086b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086b8:	f7fe fd02 	bl	80070c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	f003 0307 	and.w	r3, r3, #7
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00a      	beq.n	80086dc <pvPortMalloc+0x174>
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	60fb      	str	r3, [r7, #12]
}
 80086d8:	bf00      	nop
 80086da:	e7fe      	b.n	80086da <pvPortMalloc+0x172>
	return pvReturn;
 80086dc:	69fb      	ldr	r3, [r7, #28]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3728      	adds	r7, #40	; 0x28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	200034a0 	.word	0x200034a0
 80086ec:	200034b4 	.word	0x200034b4
 80086f0:	200034a4 	.word	0x200034a4
 80086f4:	20003498 	.word	0x20003498
 80086f8:	200034a8 	.word	0x200034a8
 80086fc:	200034ac 	.word	0x200034ac

08008700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d04d      	beq.n	80087ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008712:	2308      	movs	r3, #8
 8008714:	425b      	negs	r3, r3
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	4413      	add	r3, r2
 800871a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	4b24      	ldr	r3, [pc, #144]	; (80087b8 <vPortFree+0xb8>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4013      	ands	r3, r2
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10a      	bne.n	8008744 <vPortFree+0x44>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	60fb      	str	r3, [r7, #12]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00a      	beq.n	8008762 <vPortFree+0x62>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	60bb      	str	r3, [r7, #8]
}
 800875e:	bf00      	nop
 8008760:	e7fe      	b.n	8008760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	4b14      	ldr	r3, [pc, #80]	; (80087b8 <vPortFree+0xb8>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4013      	ands	r3, r2
 800876c:	2b00      	cmp	r3, #0
 800876e:	d01e      	beq.n	80087ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d11a      	bne.n	80087ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	685a      	ldr	r2, [r3, #4]
 800877c:	4b0e      	ldr	r3, [pc, #56]	; (80087b8 <vPortFree+0xb8>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	43db      	mvns	r3, r3
 8008782:	401a      	ands	r2, r3
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008788:	f7fe fc8c 	bl	80070a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	4b0a      	ldr	r3, [pc, #40]	; (80087bc <vPortFree+0xbc>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4413      	add	r3, r2
 8008796:	4a09      	ldr	r2, [pc, #36]	; (80087bc <vPortFree+0xbc>)
 8008798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800879a:	6938      	ldr	r0, [r7, #16]
 800879c:	f000 f874 	bl	8008888 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80087a0:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <vPortFree+0xc0>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3301      	adds	r3, #1
 80087a6:	4a06      	ldr	r2, [pc, #24]	; (80087c0 <vPortFree+0xc0>)
 80087a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80087aa:	f7fe fc89 	bl	80070c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087ae:	bf00      	nop
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	200034b4 	.word	0x200034b4
 80087bc:	200034a4 	.word	0x200034a4
 80087c0:	200034b0 	.word	0x200034b0

080087c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80087ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087d0:	4b27      	ldr	r3, [pc, #156]	; (8008870 <prvHeapInit+0xac>)
 80087d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00c      	beq.n	80087f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3307      	adds	r3, #7
 80087e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 0307 	bic.w	r3, r3, #7
 80087ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	4a1f      	ldr	r2, [pc, #124]	; (8008870 <prvHeapInit+0xac>)
 80087f4:	4413      	add	r3, r2
 80087f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087fc:	4a1d      	ldr	r2, [pc, #116]	; (8008874 <prvHeapInit+0xb0>)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008802:	4b1c      	ldr	r3, [pc, #112]	; (8008874 <prvHeapInit+0xb0>)
 8008804:	2200      	movs	r2, #0
 8008806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	4413      	add	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008810:	2208      	movs	r2, #8
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	1a9b      	subs	r3, r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 0307 	bic.w	r3, r3, #7
 800881e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4a15      	ldr	r2, [pc, #84]	; (8008878 <prvHeapInit+0xb4>)
 8008824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008826:	4b14      	ldr	r3, [pc, #80]	; (8008878 <prvHeapInit+0xb4>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2200      	movs	r2, #0
 800882c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800882e:	4b12      	ldr	r3, [pc, #72]	; (8008878 <prvHeapInit+0xb4>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2200      	movs	r2, #0
 8008834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	1ad2      	subs	r2, r2, r3
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008844:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <prvHeapInit+0xb4>)
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	4a0a      	ldr	r2, [pc, #40]	; (800887c <prvHeapInit+0xb8>)
 8008852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	4a09      	ldr	r2, [pc, #36]	; (8008880 <prvHeapInit+0xbc>)
 800885a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800885c:	4b09      	ldr	r3, [pc, #36]	; (8008884 <prvHeapInit+0xc0>)
 800885e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008862:	601a      	str	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	20000d88 	.word	0x20000d88
 8008874:	20003498 	.word	0x20003498
 8008878:	200034a0 	.word	0x200034a0
 800887c:	200034a8 	.word	0x200034a8
 8008880:	200034a4 	.word	0x200034a4
 8008884:	200034b4 	.word	0x200034b4

08008888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008890:	4b28      	ldr	r3, [pc, #160]	; (8008934 <prvInsertBlockIntoFreeList+0xac>)
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	e002      	b.n	800889c <prvInsertBlockIntoFreeList+0x14>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d8f7      	bhi.n	8008896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	4413      	add	r3, r2
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d108      	bne.n	80088ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	441a      	add	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	441a      	add	r2, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d118      	bne.n	8008910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b15      	ldr	r3, [pc, #84]	; (8008938 <prvInsertBlockIntoFreeList+0xb0>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d00d      	beq.n	8008906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	441a      	add	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	e008      	b.n	8008918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008906:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <prvInsertBlockIntoFreeList+0xb0>)
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	e003      	b.n	8008918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	429a      	cmp	r2, r3
 800891e:	d002      	beq.n	8008926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	20003498 	.word	0x20003498
 8008938:	200034a0 	.word	0x200034a0

0800893c <__errno>:
 800893c:	4b01      	ldr	r3, [pc, #4]	; (8008944 <__errno+0x8>)
 800893e:	6818      	ldr	r0, [r3, #0]
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	20000010 	.word	0x20000010

08008948 <__libc_init_array>:
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	4d0d      	ldr	r5, [pc, #52]	; (8008980 <__libc_init_array+0x38>)
 800894c:	4c0d      	ldr	r4, [pc, #52]	; (8008984 <__libc_init_array+0x3c>)
 800894e:	1b64      	subs	r4, r4, r5
 8008950:	10a4      	asrs	r4, r4, #2
 8008952:	2600      	movs	r6, #0
 8008954:	42a6      	cmp	r6, r4
 8008956:	d109      	bne.n	800896c <__libc_init_array+0x24>
 8008958:	4d0b      	ldr	r5, [pc, #44]	; (8008988 <__libc_init_array+0x40>)
 800895a:	4c0c      	ldr	r4, [pc, #48]	; (800898c <__libc_init_array+0x44>)
 800895c:	f000 fcf4 	bl	8009348 <_init>
 8008960:	1b64      	subs	r4, r4, r5
 8008962:	10a4      	asrs	r4, r4, #2
 8008964:	2600      	movs	r6, #0
 8008966:	42a6      	cmp	r6, r4
 8008968:	d105      	bne.n	8008976 <__libc_init_array+0x2e>
 800896a:	bd70      	pop	{r4, r5, r6, pc}
 800896c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008970:	4798      	blx	r3
 8008972:	3601      	adds	r6, #1
 8008974:	e7ee      	b.n	8008954 <__libc_init_array+0xc>
 8008976:	f855 3b04 	ldr.w	r3, [r5], #4
 800897a:	4798      	blx	r3
 800897c:	3601      	adds	r6, #1
 800897e:	e7f2      	b.n	8008966 <__libc_init_array+0x1e>
 8008980:	08009534 	.word	0x08009534
 8008984:	08009534 	.word	0x08009534
 8008988:	08009534 	.word	0x08009534
 800898c:	08009538 	.word	0x08009538

08008990 <memcpy>:
 8008990:	440a      	add	r2, r1
 8008992:	4291      	cmp	r1, r2
 8008994:	f100 33ff 	add.w	r3, r0, #4294967295
 8008998:	d100      	bne.n	800899c <memcpy+0xc>
 800899a:	4770      	bx	lr
 800899c:	b510      	push	{r4, lr}
 800899e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089a6:	4291      	cmp	r1, r2
 80089a8:	d1f9      	bne.n	800899e <memcpy+0xe>
 80089aa:	bd10      	pop	{r4, pc}

080089ac <memset>:
 80089ac:	4402      	add	r2, r0
 80089ae:	4603      	mov	r3, r0
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d100      	bne.n	80089b6 <memset+0xa>
 80089b4:	4770      	bx	lr
 80089b6:	f803 1b01 	strb.w	r1, [r3], #1
 80089ba:	e7f9      	b.n	80089b0 <memset+0x4>

080089bc <_puts_r>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	460e      	mov	r6, r1
 80089c0:	4605      	mov	r5, r0
 80089c2:	b118      	cbz	r0, 80089cc <_puts_r+0x10>
 80089c4:	6983      	ldr	r3, [r0, #24]
 80089c6:	b90b      	cbnz	r3, 80089cc <_puts_r+0x10>
 80089c8:	f000 fa48 	bl	8008e5c <__sinit>
 80089cc:	69ab      	ldr	r3, [r5, #24]
 80089ce:	68ac      	ldr	r4, [r5, #8]
 80089d0:	b913      	cbnz	r3, 80089d8 <_puts_r+0x1c>
 80089d2:	4628      	mov	r0, r5
 80089d4:	f000 fa42 	bl	8008e5c <__sinit>
 80089d8:	4b2c      	ldr	r3, [pc, #176]	; (8008a8c <_puts_r+0xd0>)
 80089da:	429c      	cmp	r4, r3
 80089dc:	d120      	bne.n	8008a20 <_puts_r+0x64>
 80089de:	686c      	ldr	r4, [r5, #4]
 80089e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089e2:	07db      	lsls	r3, r3, #31
 80089e4:	d405      	bmi.n	80089f2 <_puts_r+0x36>
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	0598      	lsls	r0, r3, #22
 80089ea:	d402      	bmi.n	80089f2 <_puts_r+0x36>
 80089ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ee:	f000 fad3 	bl	8008f98 <__retarget_lock_acquire_recursive>
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	0719      	lsls	r1, r3, #28
 80089f6:	d51d      	bpl.n	8008a34 <_puts_r+0x78>
 80089f8:	6923      	ldr	r3, [r4, #16]
 80089fa:	b1db      	cbz	r3, 8008a34 <_puts_r+0x78>
 80089fc:	3e01      	subs	r6, #1
 80089fe:	68a3      	ldr	r3, [r4, #8]
 8008a00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008a04:	3b01      	subs	r3, #1
 8008a06:	60a3      	str	r3, [r4, #8]
 8008a08:	bb39      	cbnz	r1, 8008a5a <_puts_r+0x9e>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	da38      	bge.n	8008a80 <_puts_r+0xc4>
 8008a0e:	4622      	mov	r2, r4
 8008a10:	210a      	movs	r1, #10
 8008a12:	4628      	mov	r0, r5
 8008a14:	f000 f848 	bl	8008aa8 <__swbuf_r>
 8008a18:	3001      	adds	r0, #1
 8008a1a:	d011      	beq.n	8008a40 <_puts_r+0x84>
 8008a1c:	250a      	movs	r5, #10
 8008a1e:	e011      	b.n	8008a44 <_puts_r+0x88>
 8008a20:	4b1b      	ldr	r3, [pc, #108]	; (8008a90 <_puts_r+0xd4>)
 8008a22:	429c      	cmp	r4, r3
 8008a24:	d101      	bne.n	8008a2a <_puts_r+0x6e>
 8008a26:	68ac      	ldr	r4, [r5, #8]
 8008a28:	e7da      	b.n	80089e0 <_puts_r+0x24>
 8008a2a:	4b1a      	ldr	r3, [pc, #104]	; (8008a94 <_puts_r+0xd8>)
 8008a2c:	429c      	cmp	r4, r3
 8008a2e:	bf08      	it	eq
 8008a30:	68ec      	ldreq	r4, [r5, #12]
 8008a32:	e7d5      	b.n	80089e0 <_puts_r+0x24>
 8008a34:	4621      	mov	r1, r4
 8008a36:	4628      	mov	r0, r5
 8008a38:	f000 f888 	bl	8008b4c <__swsetup_r>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	d0dd      	beq.n	80089fc <_puts_r+0x40>
 8008a40:	f04f 35ff 	mov.w	r5, #4294967295
 8008a44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a46:	07da      	lsls	r2, r3, #31
 8008a48:	d405      	bmi.n	8008a56 <_puts_r+0x9a>
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	059b      	lsls	r3, r3, #22
 8008a4e:	d402      	bmi.n	8008a56 <_puts_r+0x9a>
 8008a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a52:	f000 faa2 	bl	8008f9a <__retarget_lock_release_recursive>
 8008a56:	4628      	mov	r0, r5
 8008a58:	bd70      	pop	{r4, r5, r6, pc}
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	da04      	bge.n	8008a68 <_puts_r+0xac>
 8008a5e:	69a2      	ldr	r2, [r4, #24]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	dc06      	bgt.n	8008a72 <_puts_r+0xb6>
 8008a64:	290a      	cmp	r1, #10
 8008a66:	d004      	beq.n	8008a72 <_puts_r+0xb6>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	1c5a      	adds	r2, r3, #1
 8008a6c:	6022      	str	r2, [r4, #0]
 8008a6e:	7019      	strb	r1, [r3, #0]
 8008a70:	e7c5      	b.n	80089fe <_puts_r+0x42>
 8008a72:	4622      	mov	r2, r4
 8008a74:	4628      	mov	r0, r5
 8008a76:	f000 f817 	bl	8008aa8 <__swbuf_r>
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	d1bf      	bne.n	80089fe <_puts_r+0x42>
 8008a7e:	e7df      	b.n	8008a40 <_puts_r+0x84>
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	250a      	movs	r5, #10
 8008a84:	1c5a      	adds	r2, r3, #1
 8008a86:	6022      	str	r2, [r4, #0]
 8008a88:	701d      	strb	r5, [r3, #0]
 8008a8a:	e7db      	b.n	8008a44 <_puts_r+0x88>
 8008a8c:	080094ec 	.word	0x080094ec
 8008a90:	0800950c 	.word	0x0800950c
 8008a94:	080094cc 	.word	0x080094cc

08008a98 <puts>:
 8008a98:	4b02      	ldr	r3, [pc, #8]	; (8008aa4 <puts+0xc>)
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	6818      	ldr	r0, [r3, #0]
 8008a9e:	f7ff bf8d 	b.w	80089bc <_puts_r>
 8008aa2:	bf00      	nop
 8008aa4:	20000010 	.word	0x20000010

08008aa8 <__swbuf_r>:
 8008aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aaa:	460e      	mov	r6, r1
 8008aac:	4614      	mov	r4, r2
 8008aae:	4605      	mov	r5, r0
 8008ab0:	b118      	cbz	r0, 8008aba <__swbuf_r+0x12>
 8008ab2:	6983      	ldr	r3, [r0, #24]
 8008ab4:	b90b      	cbnz	r3, 8008aba <__swbuf_r+0x12>
 8008ab6:	f000 f9d1 	bl	8008e5c <__sinit>
 8008aba:	4b21      	ldr	r3, [pc, #132]	; (8008b40 <__swbuf_r+0x98>)
 8008abc:	429c      	cmp	r4, r3
 8008abe:	d12b      	bne.n	8008b18 <__swbuf_r+0x70>
 8008ac0:	686c      	ldr	r4, [r5, #4]
 8008ac2:	69a3      	ldr	r3, [r4, #24]
 8008ac4:	60a3      	str	r3, [r4, #8]
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	071a      	lsls	r2, r3, #28
 8008aca:	d52f      	bpl.n	8008b2c <__swbuf_r+0x84>
 8008acc:	6923      	ldr	r3, [r4, #16]
 8008ace:	b36b      	cbz	r3, 8008b2c <__swbuf_r+0x84>
 8008ad0:	6923      	ldr	r3, [r4, #16]
 8008ad2:	6820      	ldr	r0, [r4, #0]
 8008ad4:	1ac0      	subs	r0, r0, r3
 8008ad6:	6963      	ldr	r3, [r4, #20]
 8008ad8:	b2f6      	uxtb	r6, r6
 8008ada:	4283      	cmp	r3, r0
 8008adc:	4637      	mov	r7, r6
 8008ade:	dc04      	bgt.n	8008aea <__swbuf_r+0x42>
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	f000 f926 	bl	8008d34 <_fflush_r>
 8008ae8:	bb30      	cbnz	r0, 8008b38 <__swbuf_r+0x90>
 8008aea:	68a3      	ldr	r3, [r4, #8]
 8008aec:	3b01      	subs	r3, #1
 8008aee:	60a3      	str	r3, [r4, #8]
 8008af0:	6823      	ldr	r3, [r4, #0]
 8008af2:	1c5a      	adds	r2, r3, #1
 8008af4:	6022      	str	r2, [r4, #0]
 8008af6:	701e      	strb	r6, [r3, #0]
 8008af8:	6963      	ldr	r3, [r4, #20]
 8008afa:	3001      	adds	r0, #1
 8008afc:	4283      	cmp	r3, r0
 8008afe:	d004      	beq.n	8008b0a <__swbuf_r+0x62>
 8008b00:	89a3      	ldrh	r3, [r4, #12]
 8008b02:	07db      	lsls	r3, r3, #31
 8008b04:	d506      	bpl.n	8008b14 <__swbuf_r+0x6c>
 8008b06:	2e0a      	cmp	r6, #10
 8008b08:	d104      	bne.n	8008b14 <__swbuf_r+0x6c>
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f000 f911 	bl	8008d34 <_fflush_r>
 8008b12:	b988      	cbnz	r0, 8008b38 <__swbuf_r+0x90>
 8008b14:	4638      	mov	r0, r7
 8008b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b18:	4b0a      	ldr	r3, [pc, #40]	; (8008b44 <__swbuf_r+0x9c>)
 8008b1a:	429c      	cmp	r4, r3
 8008b1c:	d101      	bne.n	8008b22 <__swbuf_r+0x7a>
 8008b1e:	68ac      	ldr	r4, [r5, #8]
 8008b20:	e7cf      	b.n	8008ac2 <__swbuf_r+0x1a>
 8008b22:	4b09      	ldr	r3, [pc, #36]	; (8008b48 <__swbuf_r+0xa0>)
 8008b24:	429c      	cmp	r4, r3
 8008b26:	bf08      	it	eq
 8008b28:	68ec      	ldreq	r4, [r5, #12]
 8008b2a:	e7ca      	b.n	8008ac2 <__swbuf_r+0x1a>
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	4628      	mov	r0, r5
 8008b30:	f000 f80c 	bl	8008b4c <__swsetup_r>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d0cb      	beq.n	8008ad0 <__swbuf_r+0x28>
 8008b38:	f04f 37ff 	mov.w	r7, #4294967295
 8008b3c:	e7ea      	b.n	8008b14 <__swbuf_r+0x6c>
 8008b3e:	bf00      	nop
 8008b40:	080094ec 	.word	0x080094ec
 8008b44:	0800950c 	.word	0x0800950c
 8008b48:	080094cc 	.word	0x080094cc

08008b4c <__swsetup_r>:
 8008b4c:	4b32      	ldr	r3, [pc, #200]	; (8008c18 <__swsetup_r+0xcc>)
 8008b4e:	b570      	push	{r4, r5, r6, lr}
 8008b50:	681d      	ldr	r5, [r3, #0]
 8008b52:	4606      	mov	r6, r0
 8008b54:	460c      	mov	r4, r1
 8008b56:	b125      	cbz	r5, 8008b62 <__swsetup_r+0x16>
 8008b58:	69ab      	ldr	r3, [r5, #24]
 8008b5a:	b913      	cbnz	r3, 8008b62 <__swsetup_r+0x16>
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f000 f97d 	bl	8008e5c <__sinit>
 8008b62:	4b2e      	ldr	r3, [pc, #184]	; (8008c1c <__swsetup_r+0xd0>)
 8008b64:	429c      	cmp	r4, r3
 8008b66:	d10f      	bne.n	8008b88 <__swsetup_r+0x3c>
 8008b68:	686c      	ldr	r4, [r5, #4]
 8008b6a:	89a3      	ldrh	r3, [r4, #12]
 8008b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b70:	0719      	lsls	r1, r3, #28
 8008b72:	d42c      	bmi.n	8008bce <__swsetup_r+0x82>
 8008b74:	06dd      	lsls	r5, r3, #27
 8008b76:	d411      	bmi.n	8008b9c <__swsetup_r+0x50>
 8008b78:	2309      	movs	r3, #9
 8008b7a:	6033      	str	r3, [r6, #0]
 8008b7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b80:	81a3      	strh	r3, [r4, #12]
 8008b82:	f04f 30ff 	mov.w	r0, #4294967295
 8008b86:	e03e      	b.n	8008c06 <__swsetup_r+0xba>
 8008b88:	4b25      	ldr	r3, [pc, #148]	; (8008c20 <__swsetup_r+0xd4>)
 8008b8a:	429c      	cmp	r4, r3
 8008b8c:	d101      	bne.n	8008b92 <__swsetup_r+0x46>
 8008b8e:	68ac      	ldr	r4, [r5, #8]
 8008b90:	e7eb      	b.n	8008b6a <__swsetup_r+0x1e>
 8008b92:	4b24      	ldr	r3, [pc, #144]	; (8008c24 <__swsetup_r+0xd8>)
 8008b94:	429c      	cmp	r4, r3
 8008b96:	bf08      	it	eq
 8008b98:	68ec      	ldreq	r4, [r5, #12]
 8008b9a:	e7e6      	b.n	8008b6a <__swsetup_r+0x1e>
 8008b9c:	0758      	lsls	r0, r3, #29
 8008b9e:	d512      	bpl.n	8008bc6 <__swsetup_r+0x7a>
 8008ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ba2:	b141      	cbz	r1, 8008bb6 <__swsetup_r+0x6a>
 8008ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ba8:	4299      	cmp	r1, r3
 8008baa:	d002      	beq.n	8008bb2 <__swsetup_r+0x66>
 8008bac:	4630      	mov	r0, r6
 8008bae:	f000 fa59 	bl	8009064 <_free_r>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	6363      	str	r3, [r4, #52]	; 0x34
 8008bb6:	89a3      	ldrh	r3, [r4, #12]
 8008bb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bbc:	81a3      	strh	r3, [r4, #12]
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	6063      	str	r3, [r4, #4]
 8008bc2:	6923      	ldr	r3, [r4, #16]
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	89a3      	ldrh	r3, [r4, #12]
 8008bc8:	f043 0308 	orr.w	r3, r3, #8
 8008bcc:	81a3      	strh	r3, [r4, #12]
 8008bce:	6923      	ldr	r3, [r4, #16]
 8008bd0:	b94b      	cbnz	r3, 8008be6 <__swsetup_r+0x9a>
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bdc:	d003      	beq.n	8008be6 <__swsetup_r+0x9a>
 8008bde:	4621      	mov	r1, r4
 8008be0:	4630      	mov	r0, r6
 8008be2:	f000 f9ff 	bl	8008fe4 <__smakebuf_r>
 8008be6:	89a0      	ldrh	r0, [r4, #12]
 8008be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bec:	f010 0301 	ands.w	r3, r0, #1
 8008bf0:	d00a      	beq.n	8008c08 <__swsetup_r+0xbc>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60a3      	str	r3, [r4, #8]
 8008bf6:	6963      	ldr	r3, [r4, #20]
 8008bf8:	425b      	negs	r3, r3
 8008bfa:	61a3      	str	r3, [r4, #24]
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	b943      	cbnz	r3, 8008c12 <__swsetup_r+0xc6>
 8008c00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c04:	d1ba      	bne.n	8008b7c <__swsetup_r+0x30>
 8008c06:	bd70      	pop	{r4, r5, r6, pc}
 8008c08:	0781      	lsls	r1, r0, #30
 8008c0a:	bf58      	it	pl
 8008c0c:	6963      	ldrpl	r3, [r4, #20]
 8008c0e:	60a3      	str	r3, [r4, #8]
 8008c10:	e7f4      	b.n	8008bfc <__swsetup_r+0xb0>
 8008c12:	2000      	movs	r0, #0
 8008c14:	e7f7      	b.n	8008c06 <__swsetup_r+0xba>
 8008c16:	bf00      	nop
 8008c18:	20000010 	.word	0x20000010
 8008c1c:	080094ec 	.word	0x080094ec
 8008c20:	0800950c 	.word	0x0800950c
 8008c24:	080094cc 	.word	0x080094cc

08008c28 <__sflush_r>:
 8008c28:	898a      	ldrh	r2, [r1, #12]
 8008c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c2e:	4605      	mov	r5, r0
 8008c30:	0710      	lsls	r0, r2, #28
 8008c32:	460c      	mov	r4, r1
 8008c34:	d458      	bmi.n	8008ce8 <__sflush_r+0xc0>
 8008c36:	684b      	ldr	r3, [r1, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	dc05      	bgt.n	8008c48 <__sflush_r+0x20>
 8008c3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	dc02      	bgt.n	8008c48 <__sflush_r+0x20>
 8008c42:	2000      	movs	r0, #0
 8008c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c4a:	2e00      	cmp	r6, #0
 8008c4c:	d0f9      	beq.n	8008c42 <__sflush_r+0x1a>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c54:	682f      	ldr	r7, [r5, #0]
 8008c56:	602b      	str	r3, [r5, #0]
 8008c58:	d032      	beq.n	8008cc0 <__sflush_r+0x98>
 8008c5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	075a      	lsls	r2, r3, #29
 8008c60:	d505      	bpl.n	8008c6e <__sflush_r+0x46>
 8008c62:	6863      	ldr	r3, [r4, #4]
 8008c64:	1ac0      	subs	r0, r0, r3
 8008c66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c68:	b10b      	cbz	r3, 8008c6e <__sflush_r+0x46>
 8008c6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c6c:	1ac0      	subs	r0, r0, r3
 8008c6e:	2300      	movs	r3, #0
 8008c70:	4602      	mov	r2, r0
 8008c72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c74:	6a21      	ldr	r1, [r4, #32]
 8008c76:	4628      	mov	r0, r5
 8008c78:	47b0      	blx	r6
 8008c7a:	1c43      	adds	r3, r0, #1
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	d106      	bne.n	8008c8e <__sflush_r+0x66>
 8008c80:	6829      	ldr	r1, [r5, #0]
 8008c82:	291d      	cmp	r1, #29
 8008c84:	d82c      	bhi.n	8008ce0 <__sflush_r+0xb8>
 8008c86:	4a2a      	ldr	r2, [pc, #168]	; (8008d30 <__sflush_r+0x108>)
 8008c88:	40ca      	lsrs	r2, r1
 8008c8a:	07d6      	lsls	r6, r2, #31
 8008c8c:	d528      	bpl.n	8008ce0 <__sflush_r+0xb8>
 8008c8e:	2200      	movs	r2, #0
 8008c90:	6062      	str	r2, [r4, #4]
 8008c92:	04d9      	lsls	r1, r3, #19
 8008c94:	6922      	ldr	r2, [r4, #16]
 8008c96:	6022      	str	r2, [r4, #0]
 8008c98:	d504      	bpl.n	8008ca4 <__sflush_r+0x7c>
 8008c9a:	1c42      	adds	r2, r0, #1
 8008c9c:	d101      	bne.n	8008ca2 <__sflush_r+0x7a>
 8008c9e:	682b      	ldr	r3, [r5, #0]
 8008ca0:	b903      	cbnz	r3, 8008ca4 <__sflush_r+0x7c>
 8008ca2:	6560      	str	r0, [r4, #84]	; 0x54
 8008ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ca6:	602f      	str	r7, [r5, #0]
 8008ca8:	2900      	cmp	r1, #0
 8008caa:	d0ca      	beq.n	8008c42 <__sflush_r+0x1a>
 8008cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cb0:	4299      	cmp	r1, r3
 8008cb2:	d002      	beq.n	8008cba <__sflush_r+0x92>
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	f000 f9d5 	bl	8009064 <_free_r>
 8008cba:	2000      	movs	r0, #0
 8008cbc:	6360      	str	r0, [r4, #52]	; 0x34
 8008cbe:	e7c1      	b.n	8008c44 <__sflush_r+0x1c>
 8008cc0:	6a21      	ldr	r1, [r4, #32]
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	47b0      	blx	r6
 8008cc8:	1c41      	adds	r1, r0, #1
 8008cca:	d1c7      	bne.n	8008c5c <__sflush_r+0x34>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d0c4      	beq.n	8008c5c <__sflush_r+0x34>
 8008cd2:	2b1d      	cmp	r3, #29
 8008cd4:	d001      	beq.n	8008cda <__sflush_r+0xb2>
 8008cd6:	2b16      	cmp	r3, #22
 8008cd8:	d101      	bne.n	8008cde <__sflush_r+0xb6>
 8008cda:	602f      	str	r7, [r5, #0]
 8008cdc:	e7b1      	b.n	8008c42 <__sflush_r+0x1a>
 8008cde:	89a3      	ldrh	r3, [r4, #12]
 8008ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ce4:	81a3      	strh	r3, [r4, #12]
 8008ce6:	e7ad      	b.n	8008c44 <__sflush_r+0x1c>
 8008ce8:	690f      	ldr	r7, [r1, #16]
 8008cea:	2f00      	cmp	r7, #0
 8008cec:	d0a9      	beq.n	8008c42 <__sflush_r+0x1a>
 8008cee:	0793      	lsls	r3, r2, #30
 8008cf0:	680e      	ldr	r6, [r1, #0]
 8008cf2:	bf08      	it	eq
 8008cf4:	694b      	ldreq	r3, [r1, #20]
 8008cf6:	600f      	str	r7, [r1, #0]
 8008cf8:	bf18      	it	ne
 8008cfa:	2300      	movne	r3, #0
 8008cfc:	eba6 0807 	sub.w	r8, r6, r7
 8008d00:	608b      	str	r3, [r1, #8]
 8008d02:	f1b8 0f00 	cmp.w	r8, #0
 8008d06:	dd9c      	ble.n	8008c42 <__sflush_r+0x1a>
 8008d08:	6a21      	ldr	r1, [r4, #32]
 8008d0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d0c:	4643      	mov	r3, r8
 8008d0e:	463a      	mov	r2, r7
 8008d10:	4628      	mov	r0, r5
 8008d12:	47b0      	blx	r6
 8008d14:	2800      	cmp	r0, #0
 8008d16:	dc06      	bgt.n	8008d26 <__sflush_r+0xfe>
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d1e:	81a3      	strh	r3, [r4, #12]
 8008d20:	f04f 30ff 	mov.w	r0, #4294967295
 8008d24:	e78e      	b.n	8008c44 <__sflush_r+0x1c>
 8008d26:	4407      	add	r7, r0
 8008d28:	eba8 0800 	sub.w	r8, r8, r0
 8008d2c:	e7e9      	b.n	8008d02 <__sflush_r+0xda>
 8008d2e:	bf00      	nop
 8008d30:	20400001 	.word	0x20400001

08008d34 <_fflush_r>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	690b      	ldr	r3, [r1, #16]
 8008d38:	4605      	mov	r5, r0
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	b913      	cbnz	r3, 8008d44 <_fflush_r+0x10>
 8008d3e:	2500      	movs	r5, #0
 8008d40:	4628      	mov	r0, r5
 8008d42:	bd38      	pop	{r3, r4, r5, pc}
 8008d44:	b118      	cbz	r0, 8008d4e <_fflush_r+0x1a>
 8008d46:	6983      	ldr	r3, [r0, #24]
 8008d48:	b90b      	cbnz	r3, 8008d4e <_fflush_r+0x1a>
 8008d4a:	f000 f887 	bl	8008e5c <__sinit>
 8008d4e:	4b14      	ldr	r3, [pc, #80]	; (8008da0 <_fflush_r+0x6c>)
 8008d50:	429c      	cmp	r4, r3
 8008d52:	d11b      	bne.n	8008d8c <_fflush_r+0x58>
 8008d54:	686c      	ldr	r4, [r5, #4]
 8008d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d0ef      	beq.n	8008d3e <_fflush_r+0xa>
 8008d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d60:	07d0      	lsls	r0, r2, #31
 8008d62:	d404      	bmi.n	8008d6e <_fflush_r+0x3a>
 8008d64:	0599      	lsls	r1, r3, #22
 8008d66:	d402      	bmi.n	8008d6e <_fflush_r+0x3a>
 8008d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d6a:	f000 f915 	bl	8008f98 <__retarget_lock_acquire_recursive>
 8008d6e:	4628      	mov	r0, r5
 8008d70:	4621      	mov	r1, r4
 8008d72:	f7ff ff59 	bl	8008c28 <__sflush_r>
 8008d76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d78:	07da      	lsls	r2, r3, #31
 8008d7a:	4605      	mov	r5, r0
 8008d7c:	d4e0      	bmi.n	8008d40 <_fflush_r+0xc>
 8008d7e:	89a3      	ldrh	r3, [r4, #12]
 8008d80:	059b      	lsls	r3, r3, #22
 8008d82:	d4dd      	bmi.n	8008d40 <_fflush_r+0xc>
 8008d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d86:	f000 f908 	bl	8008f9a <__retarget_lock_release_recursive>
 8008d8a:	e7d9      	b.n	8008d40 <_fflush_r+0xc>
 8008d8c:	4b05      	ldr	r3, [pc, #20]	; (8008da4 <_fflush_r+0x70>)
 8008d8e:	429c      	cmp	r4, r3
 8008d90:	d101      	bne.n	8008d96 <_fflush_r+0x62>
 8008d92:	68ac      	ldr	r4, [r5, #8]
 8008d94:	e7df      	b.n	8008d56 <_fflush_r+0x22>
 8008d96:	4b04      	ldr	r3, [pc, #16]	; (8008da8 <_fflush_r+0x74>)
 8008d98:	429c      	cmp	r4, r3
 8008d9a:	bf08      	it	eq
 8008d9c:	68ec      	ldreq	r4, [r5, #12]
 8008d9e:	e7da      	b.n	8008d56 <_fflush_r+0x22>
 8008da0:	080094ec 	.word	0x080094ec
 8008da4:	0800950c 	.word	0x0800950c
 8008da8:	080094cc 	.word	0x080094cc

08008dac <std>:
 8008dac:	2300      	movs	r3, #0
 8008dae:	b510      	push	{r4, lr}
 8008db0:	4604      	mov	r4, r0
 8008db2:	e9c0 3300 	strd	r3, r3, [r0]
 8008db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dba:	6083      	str	r3, [r0, #8]
 8008dbc:	8181      	strh	r1, [r0, #12]
 8008dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8008dc0:	81c2      	strh	r2, [r0, #14]
 8008dc2:	6183      	str	r3, [r0, #24]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	2208      	movs	r2, #8
 8008dc8:	305c      	adds	r0, #92	; 0x5c
 8008dca:	f7ff fdef 	bl	80089ac <memset>
 8008dce:	4b05      	ldr	r3, [pc, #20]	; (8008de4 <std+0x38>)
 8008dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8008dd2:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <std+0x3c>)
 8008dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008dd6:	4b05      	ldr	r3, [pc, #20]	; (8008dec <std+0x40>)
 8008dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dda:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <std+0x44>)
 8008ddc:	6224      	str	r4, [r4, #32]
 8008dde:	6323      	str	r3, [r4, #48]	; 0x30
 8008de0:	bd10      	pop	{r4, pc}
 8008de2:	bf00      	nop
 8008de4:	080091d9 	.word	0x080091d9
 8008de8:	080091fb 	.word	0x080091fb
 8008dec:	08009233 	.word	0x08009233
 8008df0:	08009257 	.word	0x08009257

08008df4 <_cleanup_r>:
 8008df4:	4901      	ldr	r1, [pc, #4]	; (8008dfc <_cleanup_r+0x8>)
 8008df6:	f000 b8af 	b.w	8008f58 <_fwalk_reent>
 8008dfa:	bf00      	nop
 8008dfc:	08008d35 	.word	0x08008d35

08008e00 <__sfmoreglue>:
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	1e4a      	subs	r2, r1, #1
 8008e04:	2568      	movs	r5, #104	; 0x68
 8008e06:	4355      	muls	r5, r2
 8008e08:	460e      	mov	r6, r1
 8008e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e0e:	f000 f979 	bl	8009104 <_malloc_r>
 8008e12:	4604      	mov	r4, r0
 8008e14:	b140      	cbz	r0, 8008e28 <__sfmoreglue+0x28>
 8008e16:	2100      	movs	r1, #0
 8008e18:	e9c0 1600 	strd	r1, r6, [r0]
 8008e1c:	300c      	adds	r0, #12
 8008e1e:	60a0      	str	r0, [r4, #8]
 8008e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e24:	f7ff fdc2 	bl	80089ac <memset>
 8008e28:	4620      	mov	r0, r4
 8008e2a:	bd70      	pop	{r4, r5, r6, pc}

08008e2c <__sfp_lock_acquire>:
 8008e2c:	4801      	ldr	r0, [pc, #4]	; (8008e34 <__sfp_lock_acquire+0x8>)
 8008e2e:	f000 b8b3 	b.w	8008f98 <__retarget_lock_acquire_recursive>
 8008e32:	bf00      	nop
 8008e34:	200035e4 	.word	0x200035e4

08008e38 <__sfp_lock_release>:
 8008e38:	4801      	ldr	r0, [pc, #4]	; (8008e40 <__sfp_lock_release+0x8>)
 8008e3a:	f000 b8ae 	b.w	8008f9a <__retarget_lock_release_recursive>
 8008e3e:	bf00      	nop
 8008e40:	200035e4 	.word	0x200035e4

08008e44 <__sinit_lock_acquire>:
 8008e44:	4801      	ldr	r0, [pc, #4]	; (8008e4c <__sinit_lock_acquire+0x8>)
 8008e46:	f000 b8a7 	b.w	8008f98 <__retarget_lock_acquire_recursive>
 8008e4a:	bf00      	nop
 8008e4c:	200035df 	.word	0x200035df

08008e50 <__sinit_lock_release>:
 8008e50:	4801      	ldr	r0, [pc, #4]	; (8008e58 <__sinit_lock_release+0x8>)
 8008e52:	f000 b8a2 	b.w	8008f9a <__retarget_lock_release_recursive>
 8008e56:	bf00      	nop
 8008e58:	200035df 	.word	0x200035df

08008e5c <__sinit>:
 8008e5c:	b510      	push	{r4, lr}
 8008e5e:	4604      	mov	r4, r0
 8008e60:	f7ff fff0 	bl	8008e44 <__sinit_lock_acquire>
 8008e64:	69a3      	ldr	r3, [r4, #24]
 8008e66:	b11b      	cbz	r3, 8008e70 <__sinit+0x14>
 8008e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e6c:	f7ff bff0 	b.w	8008e50 <__sinit_lock_release>
 8008e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e74:	6523      	str	r3, [r4, #80]	; 0x50
 8008e76:	4b13      	ldr	r3, [pc, #76]	; (8008ec4 <__sinit+0x68>)
 8008e78:	4a13      	ldr	r2, [pc, #76]	; (8008ec8 <__sinit+0x6c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e7e:	42a3      	cmp	r3, r4
 8008e80:	bf04      	itt	eq
 8008e82:	2301      	moveq	r3, #1
 8008e84:	61a3      	streq	r3, [r4, #24]
 8008e86:	4620      	mov	r0, r4
 8008e88:	f000 f820 	bl	8008ecc <__sfp>
 8008e8c:	6060      	str	r0, [r4, #4]
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 f81c 	bl	8008ecc <__sfp>
 8008e94:	60a0      	str	r0, [r4, #8]
 8008e96:	4620      	mov	r0, r4
 8008e98:	f000 f818 	bl	8008ecc <__sfp>
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	60e0      	str	r0, [r4, #12]
 8008ea0:	2104      	movs	r1, #4
 8008ea2:	6860      	ldr	r0, [r4, #4]
 8008ea4:	f7ff ff82 	bl	8008dac <std>
 8008ea8:	68a0      	ldr	r0, [r4, #8]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	2109      	movs	r1, #9
 8008eae:	f7ff ff7d 	bl	8008dac <std>
 8008eb2:	68e0      	ldr	r0, [r4, #12]
 8008eb4:	2202      	movs	r2, #2
 8008eb6:	2112      	movs	r1, #18
 8008eb8:	f7ff ff78 	bl	8008dac <std>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	61a3      	str	r3, [r4, #24]
 8008ec0:	e7d2      	b.n	8008e68 <__sinit+0xc>
 8008ec2:	bf00      	nop
 8008ec4:	080094c8 	.word	0x080094c8
 8008ec8:	08008df5 	.word	0x08008df5

08008ecc <__sfp>:
 8008ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ece:	4607      	mov	r7, r0
 8008ed0:	f7ff ffac 	bl	8008e2c <__sfp_lock_acquire>
 8008ed4:	4b1e      	ldr	r3, [pc, #120]	; (8008f50 <__sfp+0x84>)
 8008ed6:	681e      	ldr	r6, [r3, #0]
 8008ed8:	69b3      	ldr	r3, [r6, #24]
 8008eda:	b913      	cbnz	r3, 8008ee2 <__sfp+0x16>
 8008edc:	4630      	mov	r0, r6
 8008ede:	f7ff ffbd 	bl	8008e5c <__sinit>
 8008ee2:	3648      	adds	r6, #72	; 0x48
 8008ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	d503      	bpl.n	8008ef4 <__sfp+0x28>
 8008eec:	6833      	ldr	r3, [r6, #0]
 8008eee:	b30b      	cbz	r3, 8008f34 <__sfp+0x68>
 8008ef0:	6836      	ldr	r6, [r6, #0]
 8008ef2:	e7f7      	b.n	8008ee4 <__sfp+0x18>
 8008ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ef8:	b9d5      	cbnz	r5, 8008f30 <__sfp+0x64>
 8008efa:	4b16      	ldr	r3, [pc, #88]	; (8008f54 <__sfp+0x88>)
 8008efc:	60e3      	str	r3, [r4, #12]
 8008efe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f02:	6665      	str	r5, [r4, #100]	; 0x64
 8008f04:	f000 f847 	bl	8008f96 <__retarget_lock_init_recursive>
 8008f08:	f7ff ff96 	bl	8008e38 <__sfp_lock_release>
 8008f0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f14:	6025      	str	r5, [r4, #0]
 8008f16:	61a5      	str	r5, [r4, #24]
 8008f18:	2208      	movs	r2, #8
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f20:	f7ff fd44 	bl	80089ac <memset>
 8008f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f30:	3468      	adds	r4, #104	; 0x68
 8008f32:	e7d9      	b.n	8008ee8 <__sfp+0x1c>
 8008f34:	2104      	movs	r1, #4
 8008f36:	4638      	mov	r0, r7
 8008f38:	f7ff ff62 	bl	8008e00 <__sfmoreglue>
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	6030      	str	r0, [r6, #0]
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d1d5      	bne.n	8008ef0 <__sfp+0x24>
 8008f44:	f7ff ff78 	bl	8008e38 <__sfp_lock_release>
 8008f48:	230c      	movs	r3, #12
 8008f4a:	603b      	str	r3, [r7, #0]
 8008f4c:	e7ee      	b.n	8008f2c <__sfp+0x60>
 8008f4e:	bf00      	nop
 8008f50:	080094c8 	.word	0x080094c8
 8008f54:	ffff0001 	.word	0xffff0001

08008f58 <_fwalk_reent>:
 8008f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f5c:	4606      	mov	r6, r0
 8008f5e:	4688      	mov	r8, r1
 8008f60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f64:	2700      	movs	r7, #0
 8008f66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f6a:	f1b9 0901 	subs.w	r9, r9, #1
 8008f6e:	d505      	bpl.n	8008f7c <_fwalk_reent+0x24>
 8008f70:	6824      	ldr	r4, [r4, #0]
 8008f72:	2c00      	cmp	r4, #0
 8008f74:	d1f7      	bne.n	8008f66 <_fwalk_reent+0xe>
 8008f76:	4638      	mov	r0, r7
 8008f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f7c:	89ab      	ldrh	r3, [r5, #12]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d907      	bls.n	8008f92 <_fwalk_reent+0x3a>
 8008f82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f86:	3301      	adds	r3, #1
 8008f88:	d003      	beq.n	8008f92 <_fwalk_reent+0x3a>
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	47c0      	blx	r8
 8008f90:	4307      	orrs	r7, r0
 8008f92:	3568      	adds	r5, #104	; 0x68
 8008f94:	e7e9      	b.n	8008f6a <_fwalk_reent+0x12>

08008f96 <__retarget_lock_init_recursive>:
 8008f96:	4770      	bx	lr

08008f98 <__retarget_lock_acquire_recursive>:
 8008f98:	4770      	bx	lr

08008f9a <__retarget_lock_release_recursive>:
 8008f9a:	4770      	bx	lr

08008f9c <__swhatbuf_r>:
 8008f9c:	b570      	push	{r4, r5, r6, lr}
 8008f9e:	460e      	mov	r6, r1
 8008fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa4:	2900      	cmp	r1, #0
 8008fa6:	b096      	sub	sp, #88	; 0x58
 8008fa8:	4614      	mov	r4, r2
 8008faa:	461d      	mov	r5, r3
 8008fac:	da07      	bge.n	8008fbe <__swhatbuf_r+0x22>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	602b      	str	r3, [r5, #0]
 8008fb2:	89b3      	ldrh	r3, [r6, #12]
 8008fb4:	061a      	lsls	r2, r3, #24
 8008fb6:	d410      	bmi.n	8008fda <__swhatbuf_r+0x3e>
 8008fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fbc:	e00e      	b.n	8008fdc <__swhatbuf_r+0x40>
 8008fbe:	466a      	mov	r2, sp
 8008fc0:	f000 f970 	bl	80092a4 <_fstat_r>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	dbf2      	blt.n	8008fae <__swhatbuf_r+0x12>
 8008fc8:	9a01      	ldr	r2, [sp, #4]
 8008fca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008fce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008fd2:	425a      	negs	r2, r3
 8008fd4:	415a      	adcs	r2, r3
 8008fd6:	602a      	str	r2, [r5, #0]
 8008fd8:	e7ee      	b.n	8008fb8 <__swhatbuf_r+0x1c>
 8008fda:	2340      	movs	r3, #64	; 0x40
 8008fdc:	2000      	movs	r0, #0
 8008fde:	6023      	str	r3, [r4, #0]
 8008fe0:	b016      	add	sp, #88	; 0x58
 8008fe2:	bd70      	pop	{r4, r5, r6, pc}

08008fe4 <__smakebuf_r>:
 8008fe4:	898b      	ldrh	r3, [r1, #12]
 8008fe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fe8:	079d      	lsls	r5, r3, #30
 8008fea:	4606      	mov	r6, r0
 8008fec:	460c      	mov	r4, r1
 8008fee:	d507      	bpl.n	8009000 <__smakebuf_r+0x1c>
 8008ff0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ff4:	6023      	str	r3, [r4, #0]
 8008ff6:	6123      	str	r3, [r4, #16]
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	6163      	str	r3, [r4, #20]
 8008ffc:	b002      	add	sp, #8
 8008ffe:	bd70      	pop	{r4, r5, r6, pc}
 8009000:	ab01      	add	r3, sp, #4
 8009002:	466a      	mov	r2, sp
 8009004:	f7ff ffca 	bl	8008f9c <__swhatbuf_r>
 8009008:	9900      	ldr	r1, [sp, #0]
 800900a:	4605      	mov	r5, r0
 800900c:	4630      	mov	r0, r6
 800900e:	f000 f879 	bl	8009104 <_malloc_r>
 8009012:	b948      	cbnz	r0, 8009028 <__smakebuf_r+0x44>
 8009014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009018:	059a      	lsls	r2, r3, #22
 800901a:	d4ef      	bmi.n	8008ffc <__smakebuf_r+0x18>
 800901c:	f023 0303 	bic.w	r3, r3, #3
 8009020:	f043 0302 	orr.w	r3, r3, #2
 8009024:	81a3      	strh	r3, [r4, #12]
 8009026:	e7e3      	b.n	8008ff0 <__smakebuf_r+0xc>
 8009028:	4b0d      	ldr	r3, [pc, #52]	; (8009060 <__smakebuf_r+0x7c>)
 800902a:	62b3      	str	r3, [r6, #40]	; 0x28
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	6020      	str	r0, [r4, #0]
 8009030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009034:	81a3      	strh	r3, [r4, #12]
 8009036:	9b00      	ldr	r3, [sp, #0]
 8009038:	6163      	str	r3, [r4, #20]
 800903a:	9b01      	ldr	r3, [sp, #4]
 800903c:	6120      	str	r0, [r4, #16]
 800903e:	b15b      	cbz	r3, 8009058 <__smakebuf_r+0x74>
 8009040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009044:	4630      	mov	r0, r6
 8009046:	f000 f93f 	bl	80092c8 <_isatty_r>
 800904a:	b128      	cbz	r0, 8009058 <__smakebuf_r+0x74>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	f023 0303 	bic.w	r3, r3, #3
 8009052:	f043 0301 	orr.w	r3, r3, #1
 8009056:	81a3      	strh	r3, [r4, #12]
 8009058:	89a0      	ldrh	r0, [r4, #12]
 800905a:	4305      	orrs	r5, r0
 800905c:	81a5      	strh	r5, [r4, #12]
 800905e:	e7cd      	b.n	8008ffc <__smakebuf_r+0x18>
 8009060:	08008df5 	.word	0x08008df5

08009064 <_free_r>:
 8009064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009066:	2900      	cmp	r1, #0
 8009068:	d048      	beq.n	80090fc <_free_r+0x98>
 800906a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800906e:	9001      	str	r0, [sp, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	f1a1 0404 	sub.w	r4, r1, #4
 8009076:	bfb8      	it	lt
 8009078:	18e4      	addlt	r4, r4, r3
 800907a:	f000 f947 	bl	800930c <__malloc_lock>
 800907e:	4a20      	ldr	r2, [pc, #128]	; (8009100 <_free_r+0x9c>)
 8009080:	9801      	ldr	r0, [sp, #4]
 8009082:	6813      	ldr	r3, [r2, #0]
 8009084:	4615      	mov	r5, r2
 8009086:	b933      	cbnz	r3, 8009096 <_free_r+0x32>
 8009088:	6063      	str	r3, [r4, #4]
 800908a:	6014      	str	r4, [r2, #0]
 800908c:	b003      	add	sp, #12
 800908e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009092:	f000 b941 	b.w	8009318 <__malloc_unlock>
 8009096:	42a3      	cmp	r3, r4
 8009098:	d90b      	bls.n	80090b2 <_free_r+0x4e>
 800909a:	6821      	ldr	r1, [r4, #0]
 800909c:	1862      	adds	r2, r4, r1
 800909e:	4293      	cmp	r3, r2
 80090a0:	bf04      	itt	eq
 80090a2:	681a      	ldreq	r2, [r3, #0]
 80090a4:	685b      	ldreq	r3, [r3, #4]
 80090a6:	6063      	str	r3, [r4, #4]
 80090a8:	bf04      	itt	eq
 80090aa:	1852      	addeq	r2, r2, r1
 80090ac:	6022      	streq	r2, [r4, #0]
 80090ae:	602c      	str	r4, [r5, #0]
 80090b0:	e7ec      	b.n	800908c <_free_r+0x28>
 80090b2:	461a      	mov	r2, r3
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	b10b      	cbz	r3, 80090bc <_free_r+0x58>
 80090b8:	42a3      	cmp	r3, r4
 80090ba:	d9fa      	bls.n	80090b2 <_free_r+0x4e>
 80090bc:	6811      	ldr	r1, [r2, #0]
 80090be:	1855      	adds	r5, r2, r1
 80090c0:	42a5      	cmp	r5, r4
 80090c2:	d10b      	bne.n	80090dc <_free_r+0x78>
 80090c4:	6824      	ldr	r4, [r4, #0]
 80090c6:	4421      	add	r1, r4
 80090c8:	1854      	adds	r4, r2, r1
 80090ca:	42a3      	cmp	r3, r4
 80090cc:	6011      	str	r1, [r2, #0]
 80090ce:	d1dd      	bne.n	800908c <_free_r+0x28>
 80090d0:	681c      	ldr	r4, [r3, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	6053      	str	r3, [r2, #4]
 80090d6:	4421      	add	r1, r4
 80090d8:	6011      	str	r1, [r2, #0]
 80090da:	e7d7      	b.n	800908c <_free_r+0x28>
 80090dc:	d902      	bls.n	80090e4 <_free_r+0x80>
 80090de:	230c      	movs	r3, #12
 80090e0:	6003      	str	r3, [r0, #0]
 80090e2:	e7d3      	b.n	800908c <_free_r+0x28>
 80090e4:	6825      	ldr	r5, [r4, #0]
 80090e6:	1961      	adds	r1, r4, r5
 80090e8:	428b      	cmp	r3, r1
 80090ea:	bf04      	itt	eq
 80090ec:	6819      	ldreq	r1, [r3, #0]
 80090ee:	685b      	ldreq	r3, [r3, #4]
 80090f0:	6063      	str	r3, [r4, #4]
 80090f2:	bf04      	itt	eq
 80090f4:	1949      	addeq	r1, r1, r5
 80090f6:	6021      	streq	r1, [r4, #0]
 80090f8:	6054      	str	r4, [r2, #4]
 80090fa:	e7c7      	b.n	800908c <_free_r+0x28>
 80090fc:	b003      	add	sp, #12
 80090fe:	bd30      	pop	{r4, r5, pc}
 8009100:	200034b8 	.word	0x200034b8

08009104 <_malloc_r>:
 8009104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009106:	1ccd      	adds	r5, r1, #3
 8009108:	f025 0503 	bic.w	r5, r5, #3
 800910c:	3508      	adds	r5, #8
 800910e:	2d0c      	cmp	r5, #12
 8009110:	bf38      	it	cc
 8009112:	250c      	movcc	r5, #12
 8009114:	2d00      	cmp	r5, #0
 8009116:	4606      	mov	r6, r0
 8009118:	db01      	blt.n	800911e <_malloc_r+0x1a>
 800911a:	42a9      	cmp	r1, r5
 800911c:	d903      	bls.n	8009126 <_malloc_r+0x22>
 800911e:	230c      	movs	r3, #12
 8009120:	6033      	str	r3, [r6, #0]
 8009122:	2000      	movs	r0, #0
 8009124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009126:	f000 f8f1 	bl	800930c <__malloc_lock>
 800912a:	4921      	ldr	r1, [pc, #132]	; (80091b0 <_malloc_r+0xac>)
 800912c:	680a      	ldr	r2, [r1, #0]
 800912e:	4614      	mov	r4, r2
 8009130:	b99c      	cbnz	r4, 800915a <_malloc_r+0x56>
 8009132:	4f20      	ldr	r7, [pc, #128]	; (80091b4 <_malloc_r+0xb0>)
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	b923      	cbnz	r3, 8009142 <_malloc_r+0x3e>
 8009138:	4621      	mov	r1, r4
 800913a:	4630      	mov	r0, r6
 800913c:	f000 f83c 	bl	80091b8 <_sbrk_r>
 8009140:	6038      	str	r0, [r7, #0]
 8009142:	4629      	mov	r1, r5
 8009144:	4630      	mov	r0, r6
 8009146:	f000 f837 	bl	80091b8 <_sbrk_r>
 800914a:	1c43      	adds	r3, r0, #1
 800914c:	d123      	bne.n	8009196 <_malloc_r+0x92>
 800914e:	230c      	movs	r3, #12
 8009150:	6033      	str	r3, [r6, #0]
 8009152:	4630      	mov	r0, r6
 8009154:	f000 f8e0 	bl	8009318 <__malloc_unlock>
 8009158:	e7e3      	b.n	8009122 <_malloc_r+0x1e>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	1b5b      	subs	r3, r3, r5
 800915e:	d417      	bmi.n	8009190 <_malloc_r+0x8c>
 8009160:	2b0b      	cmp	r3, #11
 8009162:	d903      	bls.n	800916c <_malloc_r+0x68>
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	441c      	add	r4, r3
 8009168:	6025      	str	r5, [r4, #0]
 800916a:	e004      	b.n	8009176 <_malloc_r+0x72>
 800916c:	6863      	ldr	r3, [r4, #4]
 800916e:	42a2      	cmp	r2, r4
 8009170:	bf0c      	ite	eq
 8009172:	600b      	streq	r3, [r1, #0]
 8009174:	6053      	strne	r3, [r2, #4]
 8009176:	4630      	mov	r0, r6
 8009178:	f000 f8ce 	bl	8009318 <__malloc_unlock>
 800917c:	f104 000b 	add.w	r0, r4, #11
 8009180:	1d23      	adds	r3, r4, #4
 8009182:	f020 0007 	bic.w	r0, r0, #7
 8009186:	1ac2      	subs	r2, r0, r3
 8009188:	d0cc      	beq.n	8009124 <_malloc_r+0x20>
 800918a:	1a1b      	subs	r3, r3, r0
 800918c:	50a3      	str	r3, [r4, r2]
 800918e:	e7c9      	b.n	8009124 <_malloc_r+0x20>
 8009190:	4622      	mov	r2, r4
 8009192:	6864      	ldr	r4, [r4, #4]
 8009194:	e7cc      	b.n	8009130 <_malloc_r+0x2c>
 8009196:	1cc4      	adds	r4, r0, #3
 8009198:	f024 0403 	bic.w	r4, r4, #3
 800919c:	42a0      	cmp	r0, r4
 800919e:	d0e3      	beq.n	8009168 <_malloc_r+0x64>
 80091a0:	1a21      	subs	r1, r4, r0
 80091a2:	4630      	mov	r0, r6
 80091a4:	f000 f808 	bl	80091b8 <_sbrk_r>
 80091a8:	3001      	adds	r0, #1
 80091aa:	d1dd      	bne.n	8009168 <_malloc_r+0x64>
 80091ac:	e7cf      	b.n	800914e <_malloc_r+0x4a>
 80091ae:	bf00      	nop
 80091b0:	200034b8 	.word	0x200034b8
 80091b4:	200034bc 	.word	0x200034bc

080091b8 <_sbrk_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4d06      	ldr	r5, [pc, #24]	; (80091d4 <_sbrk_r+0x1c>)
 80091bc:	2300      	movs	r3, #0
 80091be:	4604      	mov	r4, r0
 80091c0:	4608      	mov	r0, r1
 80091c2:	602b      	str	r3, [r5, #0]
 80091c4:	f7f9 fdde 	bl	8002d84 <_sbrk>
 80091c8:	1c43      	adds	r3, r0, #1
 80091ca:	d102      	bne.n	80091d2 <_sbrk_r+0x1a>
 80091cc:	682b      	ldr	r3, [r5, #0]
 80091ce:	b103      	cbz	r3, 80091d2 <_sbrk_r+0x1a>
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	bd38      	pop	{r3, r4, r5, pc}
 80091d4:	200035e8 	.word	0x200035e8

080091d8 <__sread>:
 80091d8:	b510      	push	{r4, lr}
 80091da:	460c      	mov	r4, r1
 80091dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e0:	f000 f8a0 	bl	8009324 <_read_r>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	bfab      	itete	ge
 80091e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091ea:	89a3      	ldrhlt	r3, [r4, #12]
 80091ec:	181b      	addge	r3, r3, r0
 80091ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091f2:	bfac      	ite	ge
 80091f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80091f6:	81a3      	strhlt	r3, [r4, #12]
 80091f8:	bd10      	pop	{r4, pc}

080091fa <__swrite>:
 80091fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091fe:	461f      	mov	r7, r3
 8009200:	898b      	ldrh	r3, [r1, #12]
 8009202:	05db      	lsls	r3, r3, #23
 8009204:	4605      	mov	r5, r0
 8009206:	460c      	mov	r4, r1
 8009208:	4616      	mov	r6, r2
 800920a:	d505      	bpl.n	8009218 <__swrite+0x1e>
 800920c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009210:	2302      	movs	r3, #2
 8009212:	2200      	movs	r2, #0
 8009214:	f000 f868 	bl	80092e8 <_lseek_r>
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800921e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009222:	81a3      	strh	r3, [r4, #12]
 8009224:	4632      	mov	r2, r6
 8009226:	463b      	mov	r3, r7
 8009228:	4628      	mov	r0, r5
 800922a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800922e:	f000 b817 	b.w	8009260 <_write_r>

08009232 <__sseek>:
 8009232:	b510      	push	{r4, lr}
 8009234:	460c      	mov	r4, r1
 8009236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800923a:	f000 f855 	bl	80092e8 <_lseek_r>
 800923e:	1c43      	adds	r3, r0, #1
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	bf15      	itete	ne
 8009244:	6560      	strne	r0, [r4, #84]	; 0x54
 8009246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800924a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800924e:	81a3      	strheq	r3, [r4, #12]
 8009250:	bf18      	it	ne
 8009252:	81a3      	strhne	r3, [r4, #12]
 8009254:	bd10      	pop	{r4, pc}

08009256 <__sclose>:
 8009256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800925a:	f000 b813 	b.w	8009284 <_close_r>
	...

08009260 <_write_r>:
 8009260:	b538      	push	{r3, r4, r5, lr}
 8009262:	4d07      	ldr	r5, [pc, #28]	; (8009280 <_write_r+0x20>)
 8009264:	4604      	mov	r4, r0
 8009266:	4608      	mov	r0, r1
 8009268:	4611      	mov	r1, r2
 800926a:	2200      	movs	r2, #0
 800926c:	602a      	str	r2, [r5, #0]
 800926e:	461a      	mov	r2, r3
 8009270:	f7f9 fd37 	bl	8002ce2 <_write>
 8009274:	1c43      	adds	r3, r0, #1
 8009276:	d102      	bne.n	800927e <_write_r+0x1e>
 8009278:	682b      	ldr	r3, [r5, #0]
 800927a:	b103      	cbz	r3, 800927e <_write_r+0x1e>
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	bd38      	pop	{r3, r4, r5, pc}
 8009280:	200035e8 	.word	0x200035e8

08009284 <_close_r>:
 8009284:	b538      	push	{r3, r4, r5, lr}
 8009286:	4d06      	ldr	r5, [pc, #24]	; (80092a0 <_close_r+0x1c>)
 8009288:	2300      	movs	r3, #0
 800928a:	4604      	mov	r4, r0
 800928c:	4608      	mov	r0, r1
 800928e:	602b      	str	r3, [r5, #0]
 8009290:	f7f9 fd43 	bl	8002d1a <_close>
 8009294:	1c43      	adds	r3, r0, #1
 8009296:	d102      	bne.n	800929e <_close_r+0x1a>
 8009298:	682b      	ldr	r3, [r5, #0]
 800929a:	b103      	cbz	r3, 800929e <_close_r+0x1a>
 800929c:	6023      	str	r3, [r4, #0]
 800929e:	bd38      	pop	{r3, r4, r5, pc}
 80092a0:	200035e8 	.word	0x200035e8

080092a4 <_fstat_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	4d07      	ldr	r5, [pc, #28]	; (80092c4 <_fstat_r+0x20>)
 80092a8:	2300      	movs	r3, #0
 80092aa:	4604      	mov	r4, r0
 80092ac:	4608      	mov	r0, r1
 80092ae:	4611      	mov	r1, r2
 80092b0:	602b      	str	r3, [r5, #0]
 80092b2:	f7f9 fd3e 	bl	8002d32 <_fstat>
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	d102      	bne.n	80092c0 <_fstat_r+0x1c>
 80092ba:	682b      	ldr	r3, [r5, #0]
 80092bc:	b103      	cbz	r3, 80092c0 <_fstat_r+0x1c>
 80092be:	6023      	str	r3, [r4, #0]
 80092c0:	bd38      	pop	{r3, r4, r5, pc}
 80092c2:	bf00      	nop
 80092c4:	200035e8 	.word	0x200035e8

080092c8 <_isatty_r>:
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	4d06      	ldr	r5, [pc, #24]	; (80092e4 <_isatty_r+0x1c>)
 80092cc:	2300      	movs	r3, #0
 80092ce:	4604      	mov	r4, r0
 80092d0:	4608      	mov	r0, r1
 80092d2:	602b      	str	r3, [r5, #0]
 80092d4:	f7f9 fd3d 	bl	8002d52 <_isatty>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d102      	bne.n	80092e2 <_isatty_r+0x1a>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	b103      	cbz	r3, 80092e2 <_isatty_r+0x1a>
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	200035e8 	.word	0x200035e8

080092e8 <_lseek_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	4d07      	ldr	r5, [pc, #28]	; (8009308 <_lseek_r+0x20>)
 80092ec:	4604      	mov	r4, r0
 80092ee:	4608      	mov	r0, r1
 80092f0:	4611      	mov	r1, r2
 80092f2:	2200      	movs	r2, #0
 80092f4:	602a      	str	r2, [r5, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	f7f9 fd36 	bl	8002d68 <_lseek>
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	d102      	bne.n	8009306 <_lseek_r+0x1e>
 8009300:	682b      	ldr	r3, [r5, #0]
 8009302:	b103      	cbz	r3, 8009306 <_lseek_r+0x1e>
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	bd38      	pop	{r3, r4, r5, pc}
 8009308:	200035e8 	.word	0x200035e8

0800930c <__malloc_lock>:
 800930c:	4801      	ldr	r0, [pc, #4]	; (8009314 <__malloc_lock+0x8>)
 800930e:	f7ff be43 	b.w	8008f98 <__retarget_lock_acquire_recursive>
 8009312:	bf00      	nop
 8009314:	200035e0 	.word	0x200035e0

08009318 <__malloc_unlock>:
 8009318:	4801      	ldr	r0, [pc, #4]	; (8009320 <__malloc_unlock+0x8>)
 800931a:	f7ff be3e 	b.w	8008f9a <__retarget_lock_release_recursive>
 800931e:	bf00      	nop
 8009320:	200035e0 	.word	0x200035e0

08009324 <_read_r>:
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	4d07      	ldr	r5, [pc, #28]	; (8009344 <_read_r+0x20>)
 8009328:	4604      	mov	r4, r0
 800932a:	4608      	mov	r0, r1
 800932c:	4611      	mov	r1, r2
 800932e:	2200      	movs	r2, #0
 8009330:	602a      	str	r2, [r5, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	f7f9 fcb8 	bl	8002ca8 <_read>
 8009338:	1c43      	adds	r3, r0, #1
 800933a:	d102      	bne.n	8009342 <_read_r+0x1e>
 800933c:	682b      	ldr	r3, [r5, #0]
 800933e:	b103      	cbz	r3, 8009342 <_read_r+0x1e>
 8009340:	6023      	str	r3, [r4, #0]
 8009342:	bd38      	pop	{r3, r4, r5, pc}
 8009344:	200035e8 	.word	0x200035e8

08009348 <_init>:
 8009348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934a:	bf00      	nop
 800934c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800934e:	bc08      	pop	{r3}
 8009350:	469e      	mov	lr, r3
 8009352:	4770      	bx	lr

08009354 <_fini>:
 8009354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009356:	bf00      	nop
 8009358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935a:	bc08      	pop	{r3}
 800935c:	469e      	mov	lr, r3
 800935e:	4770      	bx	lr
