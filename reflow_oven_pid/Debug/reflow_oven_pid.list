
reflow_oven_pid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08008fe8  08008fe8  00018fe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094ac  080094ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080094ac  080094ac  000194ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094b4  080094b4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094b4  080094b4  000194b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094b8  080094b8  000194b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080094bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  200001dc  08009698  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08009698  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138ea  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002569  00000000  00000000  00033af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00036060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  00037160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028520  00000000  00000000  00038190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012627  00000000  00000000  000606b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f781f  00000000  00000000  00072cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016a4f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005980  00000000  00000000  0016a54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008fcc 	.word	0x08008fcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008fcc 	.word	0x08008fcc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <max31855k_read>:
 * @param cs_port Chip-select port letter.
 * @param cs_pin  Chip-select pin number.
 * @return Pointer to MAX31855K_t object with updated temperature and error values.
 */
MAX31855K_t *max31855k_read(SPI_HandleTypeDef *spi_handle, GPIO_TypeDef *cs_port, uint16_t cs_pin)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	80fb      	strh	r3, [r7, #6]
    static MAX31855K_t max_obj = {0};

    // Acquire data from MAX31855K
    uint8_t raw_data[4] = {0};
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
    HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET);              // Assert CS line.
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	2200      	movs	r2, #0
 8000f56:	4619      	mov	r1, r3
 8000f58:	68b8      	ldr	r0, [r7, #8]
 8000f5a:	f001 f9b5 	bl	80022c8 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(spi_handle, raw_data, sizeof(raw_data), HAL_MAX_DELAY); // Sample 4 bytes off MISO line.
 8000f5e:	f107 0110 	add.w	r1, r7, #16
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	2204      	movs	r2, #4
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f002 fd74 	bl	8003a56 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);                // Deassert CS line.
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	2201      	movs	r2, #1
 8000f72:	4619      	mov	r1, r3
 8000f74:	68b8      	ldr	r0, [r7, #8]
 8000f76:	f001 f9a7 	bl	80022c8 <HAL_GPIO_WritePin>
    uint32_t raw_data32 = raw_data[0] << 24 | (raw_data[1] << 16) | (raw_data[2] << 8) | raw_data[3];
 8000f7a:	7c3b      	ldrb	r3, [r7, #16]
 8000f7c:	061a      	lsls	r2, r3, #24
 8000f7e:	7c7b      	ldrb	r3, [r7, #17]
 8000f80:	041b      	lsls	r3, r3, #16
 8000f82:	431a      	orrs	r2, r3
 8000f84:	7cbb      	ldrb	r3, [r7, #18]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	7cfa      	ldrb	r2, [r7, #19]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	617b      	str	r3, [r7, #20]

    // Check for faults.
    error_check(&max_obj, raw_data32);
 8000f90:	6979      	ldr	r1, [r7, #20]
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <max31855k_read+0x6c>)
 8000f94:	f000 f80c 	bl	8000fb0 <error_check>
    
    // Parse data for HJ and CJ temperature.
    parse_data(&max_obj, raw_data32);
 8000f98:	6979      	ldr	r1, [r7, #20]
 8000f9a:	4804      	ldr	r0, [pc, #16]	; (8000fac <max31855k_read+0x6c>)
 8000f9c:	f000 f83e 	bl	800101c <parse_data>

    return &max_obj;
 8000fa0:	4b02      	ldr	r3, [pc, #8]	; (8000fac <max31855k_read+0x6c>)
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200001f8 	.word	0x200001f8

08000fb0 <error_check>:
 * 
 * @param[in] data32 32-bit data received from MAX31855K.
 * @param[out] max MAX31855K_t object to hold error value. 
 */
static void error_check(MAX31855K_t *max, uint32_t data32)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
    if (data32 == 0)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d103      	bne.n	8000fc8 <error_check+0x18>
    {
        max->err = THERMO_ZEROS;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	721a      	strb	r2, [r3, #8]
    }
    else
    {
        max->err = THERMO_OK;
    }
}
 8000fc6:	e022      	b.n	800100e <error_check+0x5e>
    else if (data32 & ((uint32_t)1 << 16))
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d018      	beq.n	8001004 <error_check+0x54>
        uint8_t fault = data32 & 0x7;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	73fb      	strb	r3, [r7, #15]
        switch (fault)
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	d006      	beq.n	8000ff0 <error_check+0x40>
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	dc12      	bgt.n	800100c <error_check+0x5c>
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d008      	beq.n	8000ffc <error_check+0x4c>
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d003      	beq.n	8000ff6 <error_check+0x46>
            break;
 8000fee:	e00d      	b.n	800100c <error_check+0x5c>
            max->err = THERMO_SHORT_VCC;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	721a      	strb	r2, [r3, #8]
            max->err = THERMO_SHORT_GND;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	721a      	strb	r2, [r3, #8]
            max->err = THERMO_OPEN;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2203      	movs	r2, #3
 8001000:	721a      	strb	r2, [r3, #8]
            break;
 8001002:	e003      	b.n	800100c <error_check+0x5c>
        max->err = THERMO_OK;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	721a      	strb	r2, [r3, #8]
}
 800100a:	e000      	b.n	800100e <error_check+0x5e>
            break;
 800100c:	bf00      	nop
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <parse_data>:
 * 
 * @param max MAX31855K_t object to store temperature readings.
 * @param data32 Raw data from MAX31885K device.
 */
static void parse_data(MAX31855K_t *max, uint32_t data32)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
    // Extract cold-junction compensated hot junction temperature.
    int16_t val = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	81fb      	strh	r3, [r7, #14]
    max->hj_temp = 0;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
    if (data32 & ((uint32_t)1 << 31)) // Perform sign-extension.
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	da09      	bge.n	800104c <parse_data+0x30>
    {
        val = 0xC000 | ((data32 >> 18) & 0x3FFF);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	0c9b      	lsrs	r3, r3, #18
 800103c:	b29b      	uxth	r3, r3
 800103e:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8001042:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8001046:	b29b      	uxth	r3, r3
 8001048:	81fb      	strh	r3, [r7, #14]
 800104a:	e002      	b.n	8001052 <parse_data+0x36>
    }
    else
    {
        val = data32 >> 18;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	0c9b      	lsrs	r3, r3, #18
 8001050:	81fb      	strh	r3, [r7, #14]
    }
    max->hj_temp = val * HJ_RES;
 8001052:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa64 	bl	8000524 <__aeabi_i2d>
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <parse_data+0xc0>)
 8001062:	f7ff fac9 	bl	80005f8 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f7ff fd9b 	bl	8000ba8 <__aeabi_d2f>
 8001072:	4602      	mov	r2, r0
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	601a      	str	r2, [r3, #0]

    // Extract cold junction temperature.
    val = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	81fb      	strh	r3, [r7, #14]
    max->cj_temp = 0;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
    if (data32 & ((uint32_t)1 << 15))
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d009      	beq.n	80010a2 <parse_data+0x86>
    {
        val = 0xF000 | ((data32 >> 4) & 0xFFF);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	091b      	lsrs	r3, r3, #4
 8001092:	b29b      	uxth	r3, r3
 8001094:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001098:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800109c:	b29b      	uxth	r3, r3
 800109e:	81fb      	strh	r3, [r7, #14]
 80010a0:	e005      	b.n	80010ae <parse_data+0x92>
    }
    else
    {
        val = (data32 >> 4) & 0xFFF;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ac:	81fb      	strh	r3, [r7, #14]
    }
    max->cj_temp = val * CJ_RES;
 80010ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fa36 	bl	8000524 <__aeabi_i2d>
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <parse_data+0xc4>)
 80010be:	f7ff fa9b 	bl	80005f8 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	f7ff fd6d 	bl	8000ba8 <__aeabi_d2f>
 80010ce:	4602      	mov	r2, r0
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	605a      	str	r2, [r3, #4]
}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	3fd00000 	.word	0x3fd00000
 80010e0:	3fb00000 	.word	0x3fb00000

080010e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e4:	b5b0      	push	{r4, r5, r7, lr}
 80010e6:	b09e      	sub	sp, #120	; 0x78
 80010e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ea:	f000 fd91 	bl	8001c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ee:	f000 f8e1 	bl	80012b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f2:	f000 fa63 	bl	80015bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010f6:	f000 fa31 	bl	800155c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80010fa:	f000 fa07 	bl	800150c <MX_TIM16_Init>
  MX_SPI2_Init();
 80010fe:	f000 f94f 	bl	80013a0 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001102:	f000 f98b 	bl	800141c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  __HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1); // Set OC1PE bit to enable output compare channel 1 preload.
 8001106:	4b5d      	ldr	r3, [pc, #372]	; (800127c <main+0x198>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	699a      	ldr	r2, [r3, #24]
 800110c:	4b5b      	ldr	r3, [pc, #364]	; (800127c <main+0x198>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f042 0208 	orr.w	r2, r2, #8
 8001114:	619a      	str	r2, [r3, #24]

  HAL_TIM_Base_Start_IT(&htim16); // Start 1 s timer interrupt.
 8001116:	485a      	ldr	r0, [pc, #360]	; (8001280 <main+0x19c>)
 8001118:	f003 f9f0 	bl	80044fc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

 // TODO: Update set point
  uint8_t set_point = 170; //
 800111c:	23aa      	movs	r3, #170	; 0xaa
 800111e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Duty cycle initialized to 0%.
 8001122:	2100      	movs	r1, #0
 8001124:	4855      	ldr	r0, [pc, #340]	; (800127c <main+0x198>)
 8001126:	f003 fabb 	bl	80046a0 <HAL_TIM_PWM_Start>
  char UART_buf[100] = {0};
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	2260      	movs	r2, #96	; 0x60
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f005 f8aa 	bl	8006290 <memset>

  while (1)
  {
	// Wait for timer interrupt.
	while(bin_sem == 0)
 800113c:	e002      	b.n	8001144 <main+0x60>
	{
		HAL_Delay(1);
 800113e:	2001      	movs	r0, #1
 8001140:	f000 fde2 	bl	8001d08 <HAL_Delay>
	while(bin_sem == 0)
 8001144:	4b4f      	ldr	r3, [pc, #316]	; (8001284 <main+0x1a0>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f7      	beq.n	800113e <main+0x5a>
	}
	bin_sem = 0;
 800114e:	4b4d      	ldr	r3, [pc, #308]	; (8001284 <main+0x1a0>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
	
	// Pseudo-state machine.
	switch(count)
 8001154:	4b4c      	ldr	r3, [pc, #304]	; (8001288 <main+0x1a4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800115c:	d023      	beq.n	80011a6 <main+0xc2>
 800115e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001162:	d826      	bhi.n	80011b2 <main+0xce>
 8001164:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001168:	4293      	cmp	r3, r2
 800116a:	d016      	beq.n	800119a <main+0xb6>
 800116c:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001170:	4293      	cmp	r3, r2
 8001172:	d81e      	bhi.n	80011b2 <main+0xce>
 8001174:	2b64      	cmp	r3, #100	; 0x64
 8001176:	d004      	beq.n	8001182 <main+0x9e>
 8001178:	f240 22ee 	movw	r2, #750	; 0x2ee
 800117c:	4293      	cmp	r3, r2
 800117e:	d006      	beq.n	800118e <main+0xaa>
		break;
	case 2000:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1023); // 25% Duty Cycle
		break;
	default:
		break;
 8001180:	e017      	b.n	80011b2 <main+0xce>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2047); // 50% Duty Cycle
 8001182:	4b3e      	ldr	r3, [pc, #248]	; (800127c <main+0x198>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800118a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800118c:	e012      	b.n	80011b4 <main+0xd0>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 4095); // 100% Duty Cycle
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <main+0x198>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001196:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001198:	e00c      	b.n	80011b4 <main+0xd0>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 3071); // 75% Duty Cycle
 800119a:	4b38      	ldr	r3, [pc, #224]	; (800127c <main+0x198>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f640 32ff 	movw	r2, #3071	; 0xbff
 80011a2:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80011a4:	e006      	b.n	80011b4 <main+0xd0>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1023); // 25% Duty Cycle
 80011a6:	4b35      	ldr	r3, [pc, #212]	; (800127c <main+0x198>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80011b0:	e000      	b.n	80011b4 <main+0xd0>
		break;
 80011b2:	bf00      	nop
	}

	// Transmit set point, MCU control signal and temperature reading.

	MAX31855K_t *max_ptr = max31855k_read(&hspi2, MAX_CS_GPIO_Port, MAX_CS_Pin);
 80011b4:	2210      	movs	r2, #16
 80011b6:	4935      	ldr	r1, [pc, #212]	; (800128c <main+0x1a8>)
 80011b8:	4835      	ldr	r0, [pc, #212]	; (8001290 <main+0x1ac>)
 80011ba:	f7ff fec1 	bl	8000f40 <max31855k_read>
 80011be:	66b8      	str	r0, [r7, #104]	; 0x68

	switch (max_ptr->err)
 80011c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011c2:	7a1b      	ldrb	r3, [r3, #8]
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	d846      	bhi.n	8001256 <main+0x172>
 80011c8:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <main+0xec>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	080011e5 	.word	0x080011e5
 80011d4:	08001227 	.word	0x08001227
 80011d8:	08001233 	.word	0x08001233
 80011dc:	0800123f 	.word	0x0800123f
 80011e0:	0800124b 	.word	0x0800124b
	{
	case THERMO_OK:
		sprintf(UART_buf, "%d %d %.2f\r\n", set_point, (uint16_t)__HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1)*100/4095, max_ptr->hj_temp);
 80011e4:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 80011e8:	4b24      	ldr	r3, [pc, #144]	; (800127c <main+0x198>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	2364      	movs	r3, #100	; 0x64
 80011f4:	fb03 f302 	mul.w	r3, r3, r2
 80011f8:	4a26      	ldr	r2, [pc, #152]	; (8001294 <main+0x1b0>)
 80011fa:	fb82 1203 	smull	r1, r2, r2, r3
 80011fe:	441a      	add	r2, r3
 8001200:	12d2      	asrs	r2, r2, #11
 8001202:	17db      	asrs	r3, r3, #31
 8001204:	1ad5      	subs	r5, r2, r3
 8001206:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f99c 	bl	8000548 <__aeabi_f2d>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	1d38      	adds	r0, r7, #4
 8001216:	e9cd 2300 	strd	r2, r3, [sp]
 800121a:	462b      	mov	r3, r5
 800121c:	4622      	mov	r2, r4
 800121e:	491e      	ldr	r1, [pc, #120]	; (8001298 <main+0x1b4>)
 8001220:	f005 fca8 	bl	8006b74 <siprintf>
		break;
 8001224:	e01d      	b.n	8001262 <main+0x17e>
	case THERMO_SHORT_VCC: // Thermocouple shorted to VCC.
		sprintf(UART_buf, "Thermocouple shorted to VCC\r\n");
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	491c      	ldr	r1, [pc, #112]	; (800129c <main+0x1b8>)
 800122a:	4618      	mov	r0, r3
 800122c:	f005 fca2 	bl	8006b74 <siprintf>
		break;
 8001230:	e017      	b.n	8001262 <main+0x17e>
	case THERMO_SHORT_GND: // Thermocouple shorted to GND.
		sprintf(UART_buf, "Thermocouple shorted to GND\r\n");
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	491a      	ldr	r1, [pc, #104]	; (80012a0 <main+0x1bc>)
 8001236:	4618      	mov	r0, r3
 8001238:	f005 fc9c 	bl	8006b74 <siprintf>
		break;
 800123c:	e011      	b.n	8001262 <main+0x17e>
	case THERMO_OPEN:      // Thermocouple connection is open.
		sprintf(UART_buf, "Thermocouple connection is open\r\n");
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4918      	ldr	r1, [pc, #96]	; (80012a4 <main+0x1c0>)
 8001242:	4618      	mov	r0, r3
 8001244:	f005 fc96 	bl	8006b74 <siprintf>
		break;
 8001248:	e00b      	b.n	8001262 <main+0x17e>
	case THERMO_ZEROS:      // SPI read only 0 s.
		sprintf(UART_buf, "SPI read only 0s\r\n");
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4916      	ldr	r1, [pc, #88]	; (80012a8 <main+0x1c4>)
 800124e:	4618      	mov	r0, r3
 8001250:	f005 fc90 	bl	8006b74 <siprintf>
		break;
 8001254:	e005      	b.n	8001262 <main+0x17e>
	default:
		sprintf(UART_buf, "Unknown error");
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4914      	ldr	r1, [pc, #80]	; (80012ac <main+0x1c8>)
 800125a:	4618      	mov	r0, r3
 800125c:	f005 fc8a 	bl	8006b74 <siprintf>
		break;
 8001260:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)UART_buf, strlen(UART_buf), HAL_MAX_DELAY);
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	4618      	mov	r0, r3
 8001266:	f7fe ffb3 	bl	80001d0 <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	b29a      	uxth	r2, r3
 800126e:	1d39      	adds	r1, r7, #4
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	480e      	ldr	r0, [pc, #56]	; (80012b0 <main+0x1cc>)
 8001276:	f004 fb5b 	bl	8005930 <HAL_UART_Transmit>
  {
 800127a:	e75f      	b.n	800113c <main+0x58>
 800127c:	2000027c 	.word	0x2000027c
 8001280:	2000034c 	.word	0x2000034c
 8001284:	20000204 	.word	0x20000204
 8001288:	20000208 	.word	0x20000208
 800128c:	48000800 	.word	0x48000800
 8001290:	20000218 	.word	0x20000218
 8001294:	80080081 	.word	0x80080081
 8001298:	08008fe8 	.word	0x08008fe8
 800129c:	08008ff8 	.word	0x08008ff8
 80012a0:	08009018 	.word	0x08009018
 80012a4:	08009038 	.word	0x08009038
 80012a8:	0800905c 	.word	0x0800905c
 80012ac:	08009070 	.word	0x08009070
 80012b0:	200002c8 	.word	0x200002c8

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0b8      	sub	sp, #224	; 0xe0
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012be:	2244      	movs	r2, #68	; 0x44
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 ffe4 	bl	8006290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d8:	463b      	mov	r3, r7
 80012da:	2288      	movs	r2, #136	; 0x88
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f004 ffd6 	bl	8006290 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e4:	2302      	movs	r3, #2
 80012e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f2:	2310      	movs	r3, #16
 80012f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f8:	2302      	movs	r3, #2
 80012fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012fe:	2302      	movs	r3, #2
 8001300:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001304:	2301      	movs	r3, #1
 8001306:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800130a:	230a      	movs	r3, #10
 800130c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001310:	2307      	movs	r3, #7
 8001312:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001316:	2302      	movs	r3, #2
 8001318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800131c:	2302      	movs	r3, #2
 800131e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001322:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001326:	4618      	mov	r0, r3
 8001328:	f001 f84a 	bl	80023c0 <HAL_RCC_OscConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001332:	f000 f9d9 	bl	80016e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001336:	230f      	movs	r3, #15
 8001338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133c:	2303      	movs	r3, #3
 800133e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001354:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001358:	2104      	movs	r1, #4
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fc16 	bl	8002b8c <HAL_RCC_ClockConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001366:	f000 f9bf 	bl	80016e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800136a:	2302      	movs	r3, #2
 800136c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800136e:	2300      	movs	r3, #0
 8001370:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001372:	463b      	mov	r3, r7
 8001374:	4618      	mov	r0, r3
 8001376:	f001 fe0f 	bl	8002f98 <HAL_RCCEx_PeriphCLKConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001380:	f000 f9b2 	bl	80016e8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001384:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001388:	f000 ffc4 	bl	8002314 <HAL_PWREx_ControlVoltageScaling>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001392:	f000 f9a9 	bl	80016e8 <Error_Handler>
  }
}
 8001396:	bf00      	nop
 8001398:	37e0      	adds	r7, #224	; 0xe0
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_SPI2_Init+0x74>)
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <MX_SPI2_Init+0x78>)
 80013a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_SPI2_Init+0x74>)
 80013ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_SPI2_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <MX_SPI2_Init+0x74>)
 80013ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_SPI2_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_SPI2_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_SPI2_Init+0x74>)
 80013ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_SPI2_Init+0x74>)
 80013d6:	2228      	movs	r2, #40	; 0x28
 80013d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_SPI2_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_SPI2_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_SPI2_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_SPI2_Init+0x74>)
 80013ee:	2207      	movs	r2, #7
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_SPI2_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_SPI2_Init+0x74>)
 80013fa:	2208      	movs	r2, #8
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_SPI2_Init+0x74>)
 8001400:	f002 fa86 	bl	8003910 <HAL_SPI_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800140a:	f000 f96d 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000218 	.word	0x20000218
 8001418:	40003800 	.word	0x40003800

0800141c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08e      	sub	sp, #56	; 0x38
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
 800144a:	615a      	str	r2, [r3, #20]
 800144c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <MX_TIM3_Init+0xe8>)
 8001450:	4a2d      	ldr	r2, [pc, #180]	; (8001508 <MX_TIM3_Init+0xec>)
 8001452:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9768 - 1;
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <MX_TIM3_Init+0xe8>)
 8001456:	f242 6227 	movw	r2, #9767	; 0x2627
 800145a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145c:	4b29      	ldr	r3, [pc, #164]	; (8001504 <MX_TIM3_Init+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4095 - 1;
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <MX_TIM3_Init+0xe8>)
 8001464:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001468:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <MX_TIM3_Init+0xe8>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <MX_TIM3_Init+0xe8>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001476:	4823      	ldr	r0, [pc, #140]	; (8001504 <MX_TIM3_Init+0xe8>)
 8001478:	f002 ffe8 	bl	800444c <HAL_TIM_Base_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001482:	f000 f931 	bl	80016e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800148c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001490:	4619      	mov	r1, r3
 8001492:	481c      	ldr	r0, [pc, #112]	; (8001504 <MX_TIM3_Init+0xe8>)
 8001494:	f003 fc3a 	bl	8004d0c <HAL_TIM_ConfigClockSource>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800149e:	f000 f923 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014a2:	4818      	ldr	r0, [pc, #96]	; (8001504 <MX_TIM3_Init+0xe8>)
 80014a4:	f003 f89a 	bl	80045dc <HAL_TIM_PWM_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80014ae:	f000 f91b 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	4810      	ldr	r0, [pc, #64]	; (8001504 <MX_TIM3_Init+0xe8>)
 80014c2:	f004 f941 	bl	8005748 <HAL_TIMEx_MasterConfigSynchronization>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80014cc:	f000 f90c 	bl	80016e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d0:	2360      	movs	r3, #96	; 0x60
 80014d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	2200      	movs	r2, #0
 80014e4:	4619      	mov	r1, r3
 80014e6:	4807      	ldr	r0, [pc, #28]	; (8001504 <MX_TIM3_Init+0xe8>)
 80014e8:	f003 fb00 	bl	8004aec <HAL_TIM_PWM_ConfigChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80014f2:	f000 f8f9 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014f6:	4803      	ldr	r0, [pc, #12]	; (8001504 <MX_TIM3_Init+0xe8>)
 80014f8:	f000 f9bc 	bl	8001874 <HAL_TIM_MspPostInit>

}
 80014fc:	bf00      	nop
 80014fe:	3738      	adds	r7, #56	; 0x38
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2000027c 	.word	0x2000027c
 8001508:	40000400 	.word	0x40000400

0800150c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_TIM16_Init+0x48>)
 8001512:	4a11      	ldr	r2, [pc, #68]	; (8001558 <MX_TIM16_Init+0x4c>)
 8001514:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000 - 1;
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <MX_TIM16_Init+0x48>)
 8001518:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800151c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <MX_TIM16_Init+0x48>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_TIM16_Init+0x48>)
 8001526:	f242 720f 	movw	r2, #9999	; 0x270f
 800152a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_TIM16_Init+0x48>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_TIM16_Init+0x48>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_TIM16_Init+0x48>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_TIM16_Init+0x48>)
 8001540:	f002 ff84 	bl	800444c <HAL_TIM_Base_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800154a:	f000 f8cd 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000034c 	.word	0x2000034c
 8001558:	40014400 	.word	0x40014400

0800155c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001562:	4a15      	ldr	r2, [pc, #84]	; (80015b8 <MX_USART2_UART_Init+0x5c>)
 8001564:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800156c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 80015a0:	f004 f978 	bl	8005894 <HAL_UART_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015aa:	f000 f89d 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200002c8 	.word	0x200002c8
 80015b8:	40004400 	.word	0x40004400

080015bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <MX_GPIO_Init+0xe8>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	4a33      	ldr	r2, [pc, #204]	; (80016a4 <MX_GPIO_Init+0xe8>)
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015de:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <MX_GPIO_Init+0xe8>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ea:	4b2e      	ldr	r3, [pc, #184]	; (80016a4 <MX_GPIO_Init+0xe8>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	4a2d      	ldr	r2, [pc, #180]	; (80016a4 <MX_GPIO_Init+0xe8>)
 80015f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f6:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <MX_GPIO_Init+0xe8>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <MX_GPIO_Init+0xe8>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <MX_GPIO_Init+0xe8>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160e:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <MX_GPIO_Init+0xe8>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <MX_GPIO_Init+0xe8>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4a21      	ldr	r2, [pc, #132]	; (80016a4 <MX_GPIO_Init+0xe8>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_GPIO_Init+0xe8>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	2120      	movs	r1, #32
 8001636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163a:	f000 fe45 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2110      	movs	r1, #16
 8001642:	4819      	ldr	r0, [pc, #100]	; (80016a8 <MX_GPIO_Init+0xec>)
 8001644:	f000 fe40 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_GPIO_Init+0xf0>)
 8001650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	4812      	ldr	r0, [pc, #72]	; (80016a8 <MX_GPIO_Init+0xec>)
 800165e:	f000 fc89 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001662:	2320      	movs	r3, #32
 8001664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	2301      	movs	r3, #1
 8001668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167c:	f000 fc7a 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_CS_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin;
 8001680:	2310      	movs	r3, #16
 8001682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAX_CS_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	4804      	ldr	r0, [pc, #16]	; (80016a8 <MX_GPIO_Init+0xec>)
 8001698:	f000 fc6c 	bl	8001f74 <HAL_GPIO_Init>

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000
 80016a8:	48000800 	.word	0x48000800
 80016ac:	10210000 	.word	0x10210000

080016b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback Function for TIM16 interrupt.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	if(htim == &htim16)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a08      	ldr	r2, [pc, #32]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d107      	bne.n	80016d0 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		bin_sem = 1;
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
		count++;
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80016ce:	6013      	str	r3, [r2, #0]
	}
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	2000034c 	.word	0x2000034c
 80016e0:	20000204 	.word	0x20000204
 80016e4:	20000208 	.word	0x20000208

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <Error_Handler+0x8>
	...

080016f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_MspInit+0x44>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fe:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <HAL_MspInit+0x44>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6613      	str	r3, [r2, #96]	; 0x60
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <HAL_MspInit+0x44>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_MspInit+0x44>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001716:	4a08      	ldr	r2, [pc, #32]	; (8001738 <HAL_MspInit+0x44>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	6593      	str	r3, [r2, #88]	; 0x58
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_MspInit+0x44>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000

0800173c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a25      	ldr	r2, [pc, #148]	; (80017f0 <HAL_SPI_MspInit+0xb4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d144      	bne.n	80017e8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800175e:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <HAL_SPI_MspInit+0xb8>)
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	4a24      	ldr	r2, [pc, #144]	; (80017f4 <HAL_SPI_MspInit+0xb8>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001768:	6593      	str	r3, [r2, #88]	; 0x58
 800176a:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <HAL_SPI_MspInit+0xb8>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <HAL_SPI_MspInit+0xb8>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <HAL_SPI_MspInit+0xb8>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <HAL_SPI_MspInit+0xb8>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_SPI_MspInit+0xb8>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	4a18      	ldr	r2, [pc, #96]	; (80017f4 <HAL_SPI_MspInit+0xb8>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <HAL_SPI_MspInit+0xb8>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017a6:	230c      	movs	r3, #12
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017b6:	2305      	movs	r3, #5
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <HAL_SPI_MspInit+0xbc>)
 80017c2:	f000 fbd7 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017d8:	2305      	movs	r3, #5
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4619      	mov	r1, r3
 80017e2:	4806      	ldr	r0, [pc, #24]	; (80017fc <HAL_SPI_MspInit+0xc0>)
 80017e4:	f000 fbc6 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	; 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40003800 	.word	0x40003800
 80017f4:	40021000 	.word	0x40021000
 80017f8:	48000800 	.word	0x48000800
 80017fc:	48000400 	.word	0x48000400

08001800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a16      	ldr	r2, [pc, #88]	; (8001868 <HAL_TIM_Base_MspInit+0x68>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d10c      	bne.n	800182c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_TIM_Base_MspInit+0x6c>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	4a15      	ldr	r2, [pc, #84]	; (800186c <HAL_TIM_Base_MspInit+0x6c>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	6593      	str	r3, [r2, #88]	; 0x58
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_TIM_Base_MspInit+0x6c>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800182a:	e018      	b.n	800185e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0f      	ldr	r2, [pc, #60]	; (8001870 <HAL_TIM_Base_MspInit+0x70>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d113      	bne.n	800185e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_TIM_Base_MspInit+0x6c>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183a:	4a0c      	ldr	r2, [pc, #48]	; (800186c <HAL_TIM_Base_MspInit+0x6c>)
 800183c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001840:	6613      	str	r3, [r2, #96]	; 0x60
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_TIM_Base_MspInit+0x6c>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	2019      	movs	r0, #25
 8001854:	f000 fb57 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001858:	2019      	movs	r0, #25
 800185a:	f000 fb70 	bl	8001f3e <HAL_NVIC_EnableIRQ>
}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40000400 	.word	0x40000400
 800186c:	40021000 	.word	0x40021000
 8001870:	40014400 	.word	0x40014400

08001874 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a11      	ldr	r2, [pc, #68]	; (80018d8 <HAL_TIM_MspPostInit+0x64>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d11c      	bne.n	80018d0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_TIM_MspPostInit+0x68>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	4a10      	ldr	r2, [pc, #64]	; (80018dc <HAL_TIM_MspPostInit+0x68>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <HAL_TIM_MspPostInit+0x68>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018ae:	2340      	movs	r3, #64	; 0x40
 80018b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018be:	2302      	movs	r3, #2
 80018c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	4619      	mov	r1, r3
 80018c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018cc:	f000 fb52 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018d0:	bf00      	nop
 80018d2:	3720      	adds	r7, #32
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40000400 	.word	0x40000400
 80018dc:	40021000 	.word	0x40021000

080018e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a17      	ldr	r2, [pc, #92]	; (800195c <HAL_UART_MspInit+0x7c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d128      	bne.n	8001954 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_UART_MspInit+0x80>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	4a16      	ldr	r2, [pc, #88]	; (8001960 <HAL_UART_MspInit+0x80>)
 8001908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190c:	6593      	str	r3, [r2, #88]	; 0x58
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <HAL_UART_MspInit+0x80>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_UART_MspInit+0x80>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	4a10      	ldr	r2, [pc, #64]	; (8001960 <HAL_UART_MspInit+0x80>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <HAL_UART_MspInit+0x80>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001932:	230c      	movs	r3, #12
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193e:	2303      	movs	r3, #3
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001942:	2307      	movs	r3, #7
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001950:	f000 fb10 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001954:	bf00      	nop
 8001956:	3728      	adds	r7, #40	; 0x28
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40004400 	.word	0x40004400
 8001960:	40021000 	.word	0x40021000

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <NMI_Handler+0x4>

0800196a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <MemManage_Handler+0x4>

08001976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <UsageFault_Handler+0x4>

08001982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b0:	f000 f98a 	bl	8001cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80019be:	f002 ff75 	bl	80048ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000034c 	.word	0x2000034c

080019cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
	return 1;
 80019d0:	2301      	movs	r3, #1
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_kill>:

int _kill(int pid, int sig)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019e6:	f004 fc29 	bl	800623c <__errno>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2216      	movs	r2, #22
 80019ee:	601a      	str	r2, [r3, #0]
	return -1;
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_exit>:

void _exit (int status)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ffe7 	bl	80019dc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a0e:	e7fe      	b.n	8001a0e <_exit+0x12>

08001a10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e00a      	b.n	8001a38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a22:	f3af 8000 	nop.w
 8001a26:	4601      	mov	r1, r0
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	60ba      	str	r2, [r7, #8]
 8001a2e:	b2ca      	uxtb	r2, r1
 8001a30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf0      	blt.n	8001a22 <_read+0x12>
	}

return len;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e009      	b.n	8001a70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	60ba      	str	r2, [r7, #8]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	dbf1      	blt.n	8001a5c <_write+0x12>
	}
	return len;
 8001a78:	687b      	ldr	r3, [r7, #4]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <_close>:

int _close(int file)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
	return -1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aaa:	605a      	str	r2, [r3, #4]
	return 0;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <_isatty>:

int _isatty(int file)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
	return 0;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af4:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <_sbrk+0x5c>)
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <_sbrk+0x60>)
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <_sbrk+0x64>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <_sbrk+0x68>)
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d207      	bcs.n	8001b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b1c:	f004 fb8e 	bl	800623c <__errno>
 8001b20:	4603      	mov	r3, r0
 8001b22:	220c      	movs	r2, #12
 8001b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	e009      	b.n	8001b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <_sbrk+0x64>)
 8001b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20018000 	.word	0x20018000
 8001b4c:	00000400 	.word	0x00000400
 8001b50:	2000020c 	.word	0x2000020c
 8001b54:	200003b0 	.word	0x200003b0

08001b58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <SystemInit+0x5c>)
 8001b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b62:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <SystemInit+0x5c>)
 8001b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <SystemInit+0x60>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a11      	ldr	r2, [pc, #68]	; (8001bb8 <SystemInit+0x60>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <SystemInit+0x60>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <SystemInit+0x60>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <SystemInit+0x60>)
 8001b84:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b88:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <SystemInit+0x60>)
 8001b90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b94:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <SystemInit+0x60>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <SystemInit+0x60>)
 8001b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <SystemInit+0x60>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00
 8001bb8:	40021000 	.word	0x40021000

08001bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc0:	f7ff ffca 	bl	8001b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bc4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bc6:	e003      	b.n	8001bd0 <LoopCopyDataInit>

08001bc8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bcc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bce:	3104      	adds	r1, #4

08001bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bd0:	480a      	ldr	r0, [pc, #40]	; (8001bfc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bd4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bd6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bd8:	d3f6      	bcc.n	8001bc8 <CopyDataInit>
	ldr	r2, =_sbss
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bdc:	e002      	b.n	8001be4 <LoopFillZerobss>

08001bde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bde:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001be0:	f842 3b04 	str.w	r3, [r2], #4

08001be4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <LoopForever+0x16>)
	cmp	r2, r3
 8001be6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001be8:	d3f9      	bcc.n	8001bde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bea:	f004 fb2d 	bl	8006248 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bee:	f7ff fa79 	bl	80010e4 <main>

08001bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bf2:	e7fe      	b.n	8001bf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bf4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001bf8:	080094bc 	.word	0x080094bc
	ldr	r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c00:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001c04:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001c08:	200003ac 	.word	0x200003ac

08001c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC1_2_IRQHandler>
	...

08001c10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <HAL_Init+0x3c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <HAL_Init+0x3c>)
 8001c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c26:	2003      	movs	r0, #3
 8001c28:	f000 f962 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f000 f80f 	bl	8001c50 <HAL_InitTick>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	71fb      	strb	r3, [r7, #7]
 8001c3c:	e001      	b.n	8001c42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c3e:	f7ff fd59 	bl	80016f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c42:	79fb      	ldrb	r3, [r7, #7]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40022000 	.word	0x40022000

08001c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_InitTick+0x6c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d023      	beq.n	8001cac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_InitTick+0x70>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_InitTick+0x6c>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f96d 	bl	8001f5a <HAL_SYSTICK_Config>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10f      	bne.n	8001ca6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b0f      	cmp	r3, #15
 8001c8a:	d809      	bhi.n	8001ca0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f000 f937 	bl	8001f06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c98:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <HAL_InitTick+0x74>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e007      	b.n	8001cb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	e004      	b.n	8001cb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
 8001caa:	e001      	b.n	8001cb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x20>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_IncTick+0x24>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_IncTick+0x24>)
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	20000398 	.word	0x20000398

08001cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <HAL_GetTick+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000398 	.word	0x20000398

08001d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff ffee 	bl	8001cf0 <HAL_GetTick>
 8001d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d005      	beq.n	8001d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_Delay+0x44>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d2e:	bf00      	nop
 8001d30:	f7ff ffde 	bl	8001cf0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d8f7      	bhi.n	8001d30 <HAL_Delay+0x28>
  {
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000008 	.word	0x20000008

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60d3      	str	r3, [r2, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4907      	ldr	r1, [pc, #28]	; (8001dec <__NVIC_EnableIRQ+0x38>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	; (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	; (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ebc:	d301      	bcc.n	8001ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00f      	b.n	8001ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <SysTick_Config+0x40>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eca:	210f      	movs	r1, #15
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f7ff ff8e 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <SysTick_Config+0x40>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <SysTick_Config+0x40>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff29 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f18:	f7ff ff3e 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f7ff ff8e 	bl	8001e44 <NVIC_EncodePriority>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff5d 	bl	8001df0 <__NVIC_SetPriority>
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff31 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffa2 	bl	8001eac <SysTick_Config>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f82:	e17f      	b.n	8002284 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2101      	movs	r1, #1
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	4013      	ands	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8171 	beq.w	800227e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d00b      	beq.n	8001fbc <HAL_GPIO_Init+0x48>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d007      	beq.n	8001fbc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fb0:	2b11      	cmp	r3, #17
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b12      	cmp	r3, #18
 8001fba:	d130      	bne.n	800201e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	091b      	lsrs	r3, r3, #4
 8002008:	f003 0201 	and.w	r2, r3, #1
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b03      	cmp	r3, #3
 8002028:	d118      	bne.n	800205c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002030:	2201      	movs	r2, #1
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	08db      	lsrs	r3, r3, #3
 8002046:	f003 0201 	and.w	r2, r3, #1
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x128>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b12      	cmp	r3, #18
 800209a:	d123      	bne.n	80020e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	08da      	lsrs	r2, r3, #3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3208      	adds	r2, #8
 80020a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	220f      	movs	r2, #15
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	08da      	lsrs	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3208      	adds	r2, #8
 80020de:	6939      	ldr	r1, [r7, #16]
 80020e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0203 	and.w	r2, r3, #3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80ac 	beq.w	800227e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	4b5f      	ldr	r3, [pc, #380]	; (80022a4 <HAL_GPIO_Init+0x330>)
 8002128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212a:	4a5e      	ldr	r2, [pc, #376]	; (80022a4 <HAL_GPIO_Init+0x330>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6613      	str	r3, [r2, #96]	; 0x60
 8002132:	4b5c      	ldr	r3, [pc, #368]	; (80022a4 <HAL_GPIO_Init+0x330>)
 8002134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800213e:	4a5a      	ldr	r2, [pc, #360]	; (80022a8 <HAL_GPIO_Init+0x334>)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	220f      	movs	r2, #15
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002168:	d025      	beq.n	80021b6 <HAL_GPIO_Init+0x242>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4f      	ldr	r2, [pc, #316]	; (80022ac <HAL_GPIO_Init+0x338>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01f      	beq.n	80021b2 <HAL_GPIO_Init+0x23e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4e      	ldr	r2, [pc, #312]	; (80022b0 <HAL_GPIO_Init+0x33c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d019      	beq.n	80021ae <HAL_GPIO_Init+0x23a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4d      	ldr	r2, [pc, #308]	; (80022b4 <HAL_GPIO_Init+0x340>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d013      	beq.n	80021aa <HAL_GPIO_Init+0x236>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4c      	ldr	r2, [pc, #304]	; (80022b8 <HAL_GPIO_Init+0x344>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00d      	beq.n	80021a6 <HAL_GPIO_Init+0x232>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4b      	ldr	r2, [pc, #300]	; (80022bc <HAL_GPIO_Init+0x348>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d007      	beq.n	80021a2 <HAL_GPIO_Init+0x22e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4a      	ldr	r2, [pc, #296]	; (80022c0 <HAL_GPIO_Init+0x34c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d101      	bne.n	800219e <HAL_GPIO_Init+0x22a>
 800219a:	2306      	movs	r3, #6
 800219c:	e00c      	b.n	80021b8 <HAL_GPIO_Init+0x244>
 800219e:	2307      	movs	r3, #7
 80021a0:	e00a      	b.n	80021b8 <HAL_GPIO_Init+0x244>
 80021a2:	2305      	movs	r3, #5
 80021a4:	e008      	b.n	80021b8 <HAL_GPIO_Init+0x244>
 80021a6:	2304      	movs	r3, #4
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_Init+0x244>
 80021aa:	2303      	movs	r3, #3
 80021ac:	e004      	b.n	80021b8 <HAL_GPIO_Init+0x244>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e002      	b.n	80021b8 <HAL_GPIO_Init+0x244>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_GPIO_Init+0x244>
 80021b6:	2300      	movs	r3, #0
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	f002 0203 	and.w	r2, r2, #3
 80021be:	0092      	lsls	r2, r2, #2
 80021c0:	4093      	lsls	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021c8:	4937      	ldr	r1, [pc, #220]	; (80022a8 <HAL_GPIO_Init+0x334>)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	3302      	adds	r3, #2
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021d6:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <HAL_GPIO_Init+0x350>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	43db      	mvns	r3, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021fa:	4a32      	ldr	r2, [pc, #200]	; (80022c4 <HAL_GPIO_Init+0x350>)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002200:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <HAL_GPIO_Init+0x350>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	43db      	mvns	r3, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002224:	4a27      	ldr	r2, [pc, #156]	; (80022c4 <HAL_GPIO_Init+0x350>)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <HAL_GPIO_Init+0x350>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800224e:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_GPIO_Init+0x350>)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_GPIO_Init+0x350>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	43db      	mvns	r3, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002278:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <HAL_GPIO_Init+0x350>)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3301      	adds	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	f47f ae78 	bne.w	8001f84 <HAL_GPIO_Init+0x10>
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	371c      	adds	r7, #28
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40010000 	.word	0x40010000
 80022ac:	48000400 	.word	0x48000400
 80022b0:	48000800 	.word	0x48000800
 80022b4:	48000c00 	.word	0x48000c00
 80022b8:	48001000 	.word	0x48001000
 80022bc:	48001400 	.word	0x48001400
 80022c0:	48001800 	.word	0x48001800
 80022c4:	40010400 	.word	0x40010400

080022c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
 80022d4:	4613      	mov	r3, r2
 80022d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d8:	787b      	ldrb	r3, [r7, #1]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022de:	887a      	ldrh	r2, [r7, #2]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022e4:	e002      	b.n	80022ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <HAL_PWREx_GetVoltageRange+0x18>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40007000 	.word	0x40007000

08002314 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002322:	d130      	bne.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002324:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800232c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002330:	d038      	beq.n	80023a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800233a:	4a1e      	ldr	r2, [pc, #120]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800233c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002340:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2232      	movs	r2, #50	; 0x32
 8002348:	fb02 f303 	mul.w	r3, r2, r3
 800234c:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0c9b      	lsrs	r3, r3, #18
 8002354:	3301      	adds	r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002358:	e002      	b.n	8002360 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3b01      	subs	r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002360:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236c:	d102      	bne.n	8002374 <HAL_PWREx_ControlVoltageScaling+0x60>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f2      	bne.n	800235a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002380:	d110      	bne.n	80023a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e00f      	b.n	80023a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800238e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002392:	d007      	beq.n	80023a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002394:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800239c:	4a05      	ldr	r2, [pc, #20]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40007000 	.word	0x40007000
 80023b8:	20000000 	.word	0x20000000
 80023bc:	431bde83 	.word	0x431bde83

080023c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e3d4      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d2:	4ba1      	ldr	r3, [pc, #644]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023dc:	4b9e      	ldr	r3, [pc, #632]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 80e4 	beq.w	80025bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <HAL_RCC_OscConfig+0x4a>
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	2b0c      	cmp	r3, #12
 80023fe:	f040 808b 	bne.w	8002518 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2b01      	cmp	r3, #1
 8002406:	f040 8087 	bne.w	8002518 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800240a:	4b93      	ldr	r3, [pc, #588]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <HAL_RCC_OscConfig+0x62>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e3ac      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1a      	ldr	r2, [r3, #32]
 8002426:	4b8c      	ldr	r3, [pc, #560]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d004      	beq.n	800243c <HAL_RCC_OscConfig+0x7c>
 8002432:	4b89      	ldr	r3, [pc, #548]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800243a:	e005      	b.n	8002448 <HAL_RCC_OscConfig+0x88>
 800243c:	4b86      	ldr	r3, [pc, #536]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 800243e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002442:	091b      	lsrs	r3, r3, #4
 8002444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002448:	4293      	cmp	r3, r2
 800244a:	d223      	bcs.n	8002494 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fd41 	bl	8002ed8 <RCC_SetFlashLatencyFromMSIRange>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e38d      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002460:	4b7d      	ldr	r3, [pc, #500]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a7c      	ldr	r2, [pc, #496]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002466:	f043 0308 	orr.w	r3, r3, #8
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	4b7a      	ldr	r3, [pc, #488]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4977      	ldr	r1, [pc, #476]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800247e:	4b76      	ldr	r3, [pc, #472]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	4972      	ldr	r1, [pc, #456]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
 8002492:	e025      	b.n	80024e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002494:	4b70      	ldr	r3, [pc, #448]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a6f      	ldr	r2, [pc, #444]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 800249a:	f043 0308 	orr.w	r3, r3, #8
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b6d      	ldr	r3, [pc, #436]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	496a      	ldr	r1, [pc, #424]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b2:	4b69      	ldr	r3, [pc, #420]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	4965      	ldr	r1, [pc, #404]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d109      	bne.n	80024e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 fd01 	bl	8002ed8 <RCC_SetFlashLatencyFromMSIRange>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e34d      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024e0:	f000 fc36 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4b5c      	ldr	r3, [pc, #368]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	495a      	ldr	r1, [pc, #360]	; (800265c <HAL_RCC_OscConfig+0x29c>)
 80024f2:	5ccb      	ldrb	r3, [r1, r3]
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
 80024fc:	4a58      	ldr	r2, [pc, #352]	; (8002660 <HAL_RCC_OscConfig+0x2a0>)
 80024fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002500:	4b58      	ldr	r3, [pc, #352]	; (8002664 <HAL_RCC_OscConfig+0x2a4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fba3 	bl	8001c50 <HAL_InitTick>
 800250a:	4603      	mov	r3, r0
 800250c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d052      	beq.n	80025ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	e331      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d032      	beq.n	8002586 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002520:	4b4d      	ldr	r3, [pc, #308]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a4c      	ldr	r2, [pc, #304]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800252c:	f7ff fbe0 	bl	8001cf0 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002534:	f7ff fbdc 	bl	8001cf0 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e31a      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002546:	4b44      	ldr	r3, [pc, #272]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002552:	4b41      	ldr	r3, [pc, #260]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a40      	ldr	r2, [pc, #256]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002558:	f043 0308 	orr.w	r3, r3, #8
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b3e      	ldr	r3, [pc, #248]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	493b      	ldr	r1, [pc, #236]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002570:	4b39      	ldr	r3, [pc, #228]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	021b      	lsls	r3, r3, #8
 800257e:	4936      	ldr	r1, [pc, #216]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
 8002584:	e01a      	b.n	80025bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002586:	4b34      	ldr	r3, [pc, #208]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a33      	ldr	r2, [pc, #204]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002592:	f7ff fbad 	bl	8001cf0 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800259a:	f7ff fba9 	bl	8001cf0 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e2e7      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025ac:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x1da>
 80025b8:	e000      	b.n	80025bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d074      	beq.n	80026b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d005      	beq.n	80025da <HAL_RCC_OscConfig+0x21a>
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	2b0c      	cmp	r3, #12
 80025d2:	d10e      	bne.n	80025f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d10b      	bne.n	80025f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025da:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d064      	beq.n	80026b0 <HAL_RCC_OscConfig+0x2f0>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d160      	bne.n	80026b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e2c4      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fa:	d106      	bne.n	800260a <HAL_RCC_OscConfig+0x24a>
 80025fc:	4b16      	ldr	r3, [pc, #88]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a15      	ldr	r2, [pc, #84]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	e01d      	b.n	8002646 <HAL_RCC_OscConfig+0x286>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002612:	d10c      	bne.n	800262e <HAL_RCC_OscConfig+0x26e>
 8002614:	4b10      	ldr	r3, [pc, #64]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0f      	ldr	r2, [pc, #60]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 800261a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0c      	ldr	r2, [pc, #48]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	e00b      	b.n	8002646 <HAL_RCC_OscConfig+0x286>
 800262e:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a09      	ldr	r2, [pc, #36]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	4b07      	ldr	r3, [pc, #28]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a06      	ldr	r2, [pc, #24]	; (8002658 <HAL_RCC_OscConfig+0x298>)
 8002640:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002644:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d01c      	beq.n	8002688 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264e:	f7ff fb4f 	bl	8001cf0 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002654:	e011      	b.n	800267a <HAL_RCC_OscConfig+0x2ba>
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	08009080 	.word	0x08009080
 8002660:	20000000 	.word	0x20000000
 8002664:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002668:	f7ff fb42 	bl	8001cf0 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	; 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e280      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800267a:	4baf      	ldr	r3, [pc, #700]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x2a8>
 8002686:	e014      	b.n	80026b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7ff fb32 	bl	8001cf0 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002690:	f7ff fb2e 	bl	8001cf0 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	; 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e26c      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026a2:	4ba5      	ldr	r3, [pc, #660]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x2d0>
 80026ae:	e000      	b.n	80026b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d060      	beq.n	8002780 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_OscConfig+0x310>
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d119      	bne.n	80026fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d116      	bne.n	80026fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d0:	4b99      	ldr	r3, [pc, #612]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_OscConfig+0x328>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e249      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e8:	4b93      	ldr	r3, [pc, #588]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	4990      	ldr	r1, [pc, #576]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026fc:	e040      	b.n	8002780 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d023      	beq.n	800274e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002706:	4b8c      	ldr	r3, [pc, #560]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a8b      	ldr	r2, [pc, #556]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 800270c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7ff faed 	bl	8001cf0 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271a:	f7ff fae9 	bl	8001cf0 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e227      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800272c:	4b82      	ldr	r3, [pc, #520]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002738:	4b7f      	ldr	r3, [pc, #508]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	061b      	lsls	r3, r3, #24
 8002746:	497c      	ldr	r1, [pc, #496]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
 800274c:	e018      	b.n	8002780 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274e:	4b7a      	ldr	r3, [pc, #488]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a79      	ldr	r2, [pc, #484]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 8002754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275a:	f7ff fac9 	bl	8001cf0 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002762:	f7ff fac5 	bl	8001cf0 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e203      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002774:	4b70      	ldr	r3, [pc, #448]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f0      	bne.n	8002762 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d03c      	beq.n	8002806 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01c      	beq.n	80027ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002794:	4b68      	ldr	r3, [pc, #416]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 8002796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800279a:	4a67      	ldr	r2, [pc, #412]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a4:	f7ff faa4 	bl	8001cf0 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ac:	f7ff faa0 	bl	8001cf0 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e1de      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027be:	4b5e      	ldr	r3, [pc, #376]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 80027c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0ef      	beq.n	80027ac <HAL_RCC_OscConfig+0x3ec>
 80027cc:	e01b      	b.n	8002806 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ce:	4b5a      	ldr	r3, [pc, #360]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 80027d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d4:	4a58      	ldr	r2, [pc, #352]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027de:	f7ff fa87 	bl	8001cf0 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e6:	f7ff fa83 	bl	8001cf0 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e1c1      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027f8:	4b4f      	ldr	r3, [pc, #316]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 80027fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1ef      	bne.n	80027e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 80a6 	beq.w	8002960 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002814:	2300      	movs	r3, #0
 8002816:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002818:	4b47      	ldr	r3, [pc, #284]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10d      	bne.n	8002840 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002824:	4b44      	ldr	r3, [pc, #272]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	4a43      	ldr	r2, [pc, #268]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 800282a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282e:	6593      	str	r3, [r2, #88]	; 0x58
 8002830:	4b41      	ldr	r3, [pc, #260]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283c:	2301      	movs	r3, #1
 800283e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002840:	4b3e      	ldr	r3, [pc, #248]	; (800293c <HAL_RCC_OscConfig+0x57c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d118      	bne.n	800287e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800284c:	4b3b      	ldr	r3, [pc, #236]	; (800293c <HAL_RCC_OscConfig+0x57c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a3a      	ldr	r2, [pc, #232]	; (800293c <HAL_RCC_OscConfig+0x57c>)
 8002852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002856:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002858:	f7ff fa4a 	bl	8001cf0 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002860:	f7ff fa46 	bl	8001cf0 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e184      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002872:	4b32      	ldr	r3, [pc, #200]	; (800293c <HAL_RCC_OscConfig+0x57c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d108      	bne.n	8002898 <HAL_RCC_OscConfig+0x4d8>
 8002886:	4b2c      	ldr	r3, [pc, #176]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 8002888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288c:	4a2a      	ldr	r2, [pc, #168]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002896:	e024      	b.n	80028e2 <HAL_RCC_OscConfig+0x522>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b05      	cmp	r3, #5
 800289e:	d110      	bne.n	80028c2 <HAL_RCC_OscConfig+0x502>
 80028a0:	4b25      	ldr	r3, [pc, #148]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a6:	4a24      	ldr	r2, [pc, #144]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 80028b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b6:	4a20      	ldr	r2, [pc, #128]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028c0:	e00f      	b.n	80028e2 <HAL_RCC_OscConfig+0x522>
 80028c2:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c8:	4a1b      	ldr	r2, [pc, #108]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 80028ca:	f023 0301 	bic.w	r3, r3, #1
 80028ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028d2:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 80028d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d8:	4a17      	ldr	r2, [pc, #92]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 80028da:	f023 0304 	bic.w	r3, r3, #4
 80028de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d016      	beq.n	8002918 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ea:	f7ff fa01 	bl	8001cf0 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f2:	f7ff f9fd 	bl	8001cf0 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e139      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCC_OscConfig+0x578>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0ed      	beq.n	80028f2 <HAL_RCC_OscConfig+0x532>
 8002916:	e01a      	b.n	800294e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002918:	f7ff f9ea 	bl	8001cf0 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800291e:	e00f      	b.n	8002940 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002920:	f7ff f9e6 	bl	8001cf0 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	; 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d906      	bls.n	8002940 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e122      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000
 800293c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002940:	4b90      	ldr	r3, [pc, #576]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1e8      	bne.n	8002920 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800294e:	7ffb      	ldrb	r3, [r7, #31]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d105      	bne.n	8002960 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002954:	4b8b      	ldr	r3, [pc, #556]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	4a8a      	ldr	r2, [pc, #552]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 800295a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8108 	beq.w	8002b7a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	2b02      	cmp	r3, #2
 8002970:	f040 80d0 	bne.w	8002b14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002974:	4b83      	ldr	r3, [pc, #524]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f003 0203 	and.w	r2, r3, #3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	429a      	cmp	r2, r3
 8002986:	d130      	bne.n	80029ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	3b01      	subs	r3, #1
 8002994:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002996:	429a      	cmp	r2, r3
 8002998:	d127      	bne.n	80029ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d11f      	bne.n	80029ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029b4:	2a07      	cmp	r2, #7
 80029b6:	bf14      	ite	ne
 80029b8:	2201      	movne	r2, #1
 80029ba:	2200      	moveq	r2, #0
 80029bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029be:	4293      	cmp	r3, r2
 80029c0:	d113      	bne.n	80029ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	3b01      	subs	r3, #1
 80029d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	085b      	lsrs	r3, r3, #1
 80029e2:	3b01      	subs	r3, #1
 80029e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d06e      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b0c      	cmp	r3, #12
 80029ee:	d069      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029f0:	4b64      	ldr	r3, [pc, #400]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d105      	bne.n	8002a08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029fc:	4b61      	ldr	r3, [pc, #388]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0b7      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a0c:	4b5d      	ldr	r3, [pc, #372]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a5c      	ldr	r2, [pc, #368]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a18:	f7ff f96a 	bl	8001cf0 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a20:	f7ff f966 	bl	8001cf0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e0a4      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a32:	4b54      	ldr	r3, [pc, #336]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a3e:	4b51      	ldr	r3, [pc, #324]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	4b51      	ldr	r3, [pc, #324]	; (8002b88 <HAL_RCC_OscConfig+0x7c8>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a4e:	3a01      	subs	r2, #1
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	4311      	orrs	r1, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a58:	0212      	lsls	r2, r2, #8
 8002a5a:	4311      	orrs	r1, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a60:	0852      	lsrs	r2, r2, #1
 8002a62:	3a01      	subs	r2, #1
 8002a64:	0552      	lsls	r2, r2, #21
 8002a66:	4311      	orrs	r1, r2
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a6c:	0852      	lsrs	r2, r2, #1
 8002a6e:	3a01      	subs	r2, #1
 8002a70:	0652      	lsls	r2, r2, #25
 8002a72:	4311      	orrs	r1, r2
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a78:	0912      	lsrs	r2, r2, #4
 8002a7a:	0452      	lsls	r2, r2, #17
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	4941      	ldr	r1, [pc, #260]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a84:	4b3f      	ldr	r3, [pc, #252]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a3e      	ldr	r2, [pc, #248]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a90:	4b3c      	ldr	r3, [pc, #240]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4a3b      	ldr	r2, [pc, #236]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a9c:	f7ff f928 	bl	8001cf0 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7ff f924 	bl	8001cf0 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e062      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab6:	4b33      	ldr	r3, [pc, #204]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ac2:	e05a      	b.n	8002b7a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e059      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d152      	bne.n	8002b7a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ad4:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a2a      	ldr	r2, [pc, #168]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ade:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ae0:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a27      	ldr	r2, [pc, #156]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aec:	f7ff f900 	bl	8001cf0 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af4:	f7ff f8fc 	bl	8001cf0 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e03a      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b06:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x734>
 8002b12:	e032      	b.n	8002b7a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2b0c      	cmp	r3, #12
 8002b18:	d02d      	beq.n	8002b76 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1a:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a19      	ldr	r2, [pc, #100]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002b20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b24:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d105      	bne.n	8002b3e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002b38:	f023 0303 	bic.w	r3, r3, #3
 8002b3c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	4a10      	ldr	r2, [pc, #64]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002b44:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4e:	f7ff f8cf 	bl	8001cf0 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b56:	f7ff f8cb 	bl	8001cf0 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e009      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_RCC_OscConfig+0x7c4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x796>
 8002b74:	e001      	b.n	8002b7a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3720      	adds	r7, #32
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000
 8002b88:	f99d808c 	.word	0xf99d808c

08002b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0c8      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba0:	4b66      	ldr	r3, [pc, #408]	; (8002d3c <HAL_RCC_ClockConfig+0x1b0>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d910      	bls.n	8002bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bae:	4b63      	ldr	r3, [pc, #396]	; (8002d3c <HAL_RCC_ClockConfig+0x1b0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 0207 	bic.w	r2, r3, #7
 8002bb6:	4961      	ldr	r1, [pc, #388]	; (8002d3c <HAL_RCC_ClockConfig+0x1b0>)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	4b5f      	ldr	r3, [pc, #380]	; (8002d3c <HAL_RCC_ClockConfig+0x1b0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0b0      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d04c      	beq.n	8002c76 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be4:	4b56      	ldr	r3, [pc, #344]	; (8002d40 <HAL_RCC_ClockConfig+0x1b4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d121      	bne.n	8002c34 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e09e      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfc:	4b50      	ldr	r3, [pc, #320]	; (8002d40 <HAL_RCC_ClockConfig+0x1b4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d115      	bne.n	8002c34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e092      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d107      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c14:	4b4a      	ldr	r3, [pc, #296]	; (8002d40 <HAL_RCC_ClockConfig+0x1b4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e086      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c24:	4b46      	ldr	r3, [pc, #280]	; (8002d40 <HAL_RCC_ClockConfig+0x1b4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e07e      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c34:	4b42      	ldr	r3, [pc, #264]	; (8002d40 <HAL_RCC_ClockConfig+0x1b4>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f023 0203 	bic.w	r2, r3, #3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	493f      	ldr	r1, [pc, #252]	; (8002d40 <HAL_RCC_ClockConfig+0x1b4>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c46:	f7ff f853 	bl	8001cf0 <HAL_GetTick>
 8002c4a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4c:	e00a      	b.n	8002c64 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c4e:	f7ff f84f 	bl	8001cf0 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e066      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c64:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <HAL_RCC_ClockConfig+0x1b4>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 020c 	and.w	r2, r3, #12
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d1eb      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c82:	4b2f      	ldr	r3, [pc, #188]	; (8002d40 <HAL_RCC_ClockConfig+0x1b4>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	492c      	ldr	r1, [pc, #176]	; (8002d40 <HAL_RCC_ClockConfig+0x1b4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c94:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <HAL_RCC_ClockConfig+0x1b0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d210      	bcs.n	8002cc4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	4b26      	ldr	r3, [pc, #152]	; (8002d3c <HAL_RCC_ClockConfig+0x1b0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 0207 	bic.w	r2, r3, #7
 8002caa:	4924      	ldr	r1, [pc, #144]	; (8002d3c <HAL_RCC_ClockConfig+0x1b0>)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <HAL_RCC_ClockConfig+0x1b0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e036      	b.n	8002d32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <HAL_RCC_ClockConfig+0x1b4>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4918      	ldr	r1, [pc, #96]	; (8002d40 <HAL_RCC_ClockConfig+0x1b4>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cee:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <HAL_RCC_ClockConfig+0x1b4>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4910      	ldr	r1, [pc, #64]	; (8002d40 <HAL_RCC_ClockConfig+0x1b4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d02:	f000 f825 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8002d06:	4602      	mov	r2, r0
 8002d08:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <HAL_RCC_ClockConfig+0x1b4>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	490c      	ldr	r1, [pc, #48]	; (8002d44 <HAL_RCC_ClockConfig+0x1b8>)
 8002d14:	5ccb      	ldrb	r3, [r1, r3]
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d22:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <HAL_RCC_ClockConfig+0x1c0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe ff92 	bl	8001c50 <HAL_InitTick>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d30:	7afb      	ldrb	r3, [r7, #11]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40022000 	.word	0x40022000
 8002d40:	40021000 	.word	0x40021000
 8002d44:	08009080 	.word	0x08009080
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	20000004 	.word	0x20000004

08002d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5e:	4b3e      	ldr	r3, [pc, #248]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d68:	4b3b      	ldr	r3, [pc, #236]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x34>
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	2b0c      	cmp	r3, #12
 8002d7c:	d121      	bne.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d11e      	bne.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d84:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d90:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	e005      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002da0:	4b2d      	ldr	r3, [pc, #180]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dac:	4a2b      	ldr	r2, [pc, #172]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10d      	bne.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d102      	bne.n	8002dce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dc8:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dca:	61bb      	str	r3, [r7, #24]
 8002dcc:	e004      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dd4:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	2b0c      	cmp	r3, #12
 8002ddc:	d134      	bne.n	8002e48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d003      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0xac>
 8002df4:	e005      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002df8:	617b      	str	r3, [r7, #20]
      break;
 8002dfa:	e005      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dfe:	617b      	str	r3, [r7, #20]
      break;
 8002e00:	e002      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	617b      	str	r3, [r7, #20]
      break;
 8002e06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e08:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	3301      	adds	r3, #1
 8002e14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	0a1b      	lsrs	r3, r3, #8
 8002e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	fb02 f203 	mul.w	r2, r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	0e5b      	lsrs	r3, r3, #25
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	3301      	adds	r3, #1
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e48:	69bb      	ldr	r3, [r7, #24]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3724      	adds	r7, #36	; 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	08009098 	.word	0x08009098
 8002e60:	00f42400 	.word	0x00f42400
 8002e64:	007a1200 	.word	0x007a1200

08002e68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e6c:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	20000000 	.word	0x20000000

08002e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e84:	f7ff fff0 	bl	8002e68 <HAL_RCC_GetHCLKFreq>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	0a1b      	lsrs	r3, r3, #8
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	4904      	ldr	r1, [pc, #16]	; (8002ea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e96:	5ccb      	ldrb	r3, [r1, r3]
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	08009090 	.word	0x08009090

08002eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002eb0:	f7ff ffda 	bl	8002e68 <HAL_RCC_GetHCLKFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	0adb      	lsrs	r3, r3, #11
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	4904      	ldr	r1, [pc, #16]	; (8002ed4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	08009090 	.word	0x08009090

08002ed8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ee4:	4b2a      	ldr	r3, [pc, #168]	; (8002f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ef0:	f7ff fa02 	bl	80022f8 <HAL_PWREx_GetVoltageRange>
 8002ef4:	6178      	str	r0, [r7, #20]
 8002ef6:	e014      	b.n	8002f22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efc:	4a24      	ldr	r2, [pc, #144]	; (8002f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f02:	6593      	str	r3, [r2, #88]	; 0x58
 8002f04:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f10:	f7ff f9f2 	bl	80022f8 <HAL_PWREx_GetVoltageRange>
 8002f14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f16:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1a:	4a1d      	ldr	r2, [pc, #116]	; (8002f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f28:	d10b      	bne.n	8002f42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b80      	cmp	r3, #128	; 0x80
 8002f2e:	d919      	bls.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2ba0      	cmp	r3, #160	; 0xa0
 8002f34:	d902      	bls.n	8002f3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f36:	2302      	movs	r3, #2
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	e013      	b.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	e010      	b.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b80      	cmp	r3, #128	; 0x80
 8002f46:	d902      	bls.n	8002f4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f48:	2303      	movs	r3, #3
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	e00a      	b.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b80      	cmp	r3, #128	; 0x80
 8002f52:	d102      	bne.n	8002f5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f54:	2302      	movs	r3, #2
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	e004      	b.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b70      	cmp	r3, #112	; 0x70
 8002f5e:	d101      	bne.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f60:	2301      	movs	r3, #1
 8002f62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f023 0207 	bic.w	r2, r3, #7
 8002f6c:	4909      	ldr	r1, [pc, #36]	; (8002f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f74:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d001      	beq.n	8002f86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40022000 	.word	0x40022000

08002f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d041      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fbc:	d02a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fc2:	d824      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fc8:	d008      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fce:	d81e      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd8:	d010      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fda:	e018      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fdc:	4b86      	ldr	r3, [pc, #536]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4a85      	ldr	r2, [pc, #532]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fe8:	e015      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3304      	adds	r3, #4
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fabb 	bl	800356c <RCCEx_PLLSAI1_Config>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ffa:	e00c      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3320      	adds	r3, #32
 8003000:	2100      	movs	r1, #0
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fba6 	bl	8003754 <RCCEx_PLLSAI2_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800300c:	e003      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	74fb      	strb	r3, [r7, #19]
      break;
 8003012:	e000      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003016:	7cfb      	ldrb	r3, [r7, #19]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10b      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800301c:	4b76      	ldr	r3, [pc, #472]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003022:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800302a:	4973      	ldr	r1, [pc, #460]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003032:	e001      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003034:	7cfb      	ldrb	r3, [r7, #19]
 8003036:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d041      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003048:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800304c:	d02a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800304e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003052:	d824      	bhi.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003054:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003058:	d008      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800305a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800305e:	d81e      	bhi.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003068:	d010      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800306a:	e018      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800306c:	4b62      	ldr	r3, [pc, #392]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4a61      	ldr	r2, [pc, #388]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003076:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003078:	e015      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3304      	adds	r3, #4
 800307e:	2100      	movs	r1, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fa73 	bl	800356c <RCCEx_PLLSAI1_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800308a:	e00c      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3320      	adds	r3, #32
 8003090:	2100      	movs	r1, #0
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fb5e 	bl	8003754 <RCCEx_PLLSAI2_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800309c:	e003      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	74fb      	strb	r3, [r7, #19]
      break;
 80030a2:	e000      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a6:	7cfb      	ldrb	r3, [r7, #19]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10b      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030ac:	4b52      	ldr	r3, [pc, #328]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ba:	494f      	ldr	r1, [pc, #316]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030c2:	e001      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c4:	7cfb      	ldrb	r3, [r7, #19]
 80030c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80a0 	beq.w	8003216 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d6:	2300      	movs	r3, #0
 80030d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030da:	4b47      	ldr	r3, [pc, #284]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030ea:	2300      	movs	r3, #0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00d      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f0:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	4a40      	ldr	r2, [pc, #256]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030fa:	6593      	str	r3, [r2, #88]	; 0x58
 80030fc:	4b3e      	ldr	r3, [pc, #248]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003108:	2301      	movs	r3, #1
 800310a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800310c:	4b3b      	ldr	r3, [pc, #236]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a3a      	ldr	r2, [pc, #232]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003116:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003118:	f7fe fdea 	bl	8001cf0 <HAL_GetTick>
 800311c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800311e:	e009      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003120:	f7fe fde6 	bl	8001cf0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d902      	bls.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	74fb      	strb	r3, [r7, #19]
        break;
 8003132:	e005      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003134:	4b31      	ldr	r3, [pc, #196]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0ef      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003140:	7cfb      	ldrb	r3, [r7, #19]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d15c      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003146:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003150:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01f      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	429a      	cmp	r2, r3
 8003162:	d019      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003164:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003170:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	4a20      	ldr	r2, [pc, #128]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003180:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003190:	4a19      	ldr	r2, [pc, #100]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d016      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a2:	f7fe fda5 	bl	8001cf0 <HAL_GetTick>
 80031a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a8:	e00b      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031aa:	f7fe fda1 	bl	8001cf0 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d902      	bls.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	74fb      	strb	r3, [r7, #19]
            break;
 80031c0:	e006      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031c2:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0ec      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d6:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e6:	4904      	ldr	r1, [pc, #16]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031ee:	e009      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031f0:	7cfb      	ldrb	r3, [r7, #19]
 80031f2:	74bb      	strb	r3, [r7, #18]
 80031f4:	e006      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003200:	7cfb      	ldrb	r3, [r7, #19]
 8003202:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003204:	7c7b      	ldrb	r3, [r7, #17]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d105      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320a:	4b9e      	ldr	r3, [pc, #632]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320e:	4a9d      	ldr	r2, [pc, #628]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003214:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003222:	4b98      	ldr	r3, [pc, #608]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003228:	f023 0203 	bic.w	r2, r3, #3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	4994      	ldr	r1, [pc, #592]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003244:	4b8f      	ldr	r3, [pc, #572]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	f023 020c 	bic.w	r2, r3, #12
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003252:	498c      	ldr	r1, [pc, #560]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003266:	4b87      	ldr	r3, [pc, #540]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	4983      	ldr	r1, [pc, #524]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003288:	4b7e      	ldr	r3, [pc, #504]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	497b      	ldr	r1, [pc, #492]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032aa:	4b76      	ldr	r3, [pc, #472]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b8:	4972      	ldr	r1, [pc, #456]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032cc:	4b6d      	ldr	r3, [pc, #436]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032da:	496a      	ldr	r1, [pc, #424]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ee:	4b65      	ldr	r3, [pc, #404]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fc:	4961      	ldr	r1, [pc, #388]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003310:	4b5c      	ldr	r3, [pc, #368]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331e:	4959      	ldr	r1, [pc, #356]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003332:	4b54      	ldr	r3, [pc, #336]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003338:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003340:	4950      	ldr	r1, [pc, #320]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003354:	4b4b      	ldr	r3, [pc, #300]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	4948      	ldr	r1, [pc, #288]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003376:	4b43      	ldr	r3, [pc, #268]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003384:	493f      	ldr	r1, [pc, #252]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d028      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003398:	4b3a      	ldr	r3, [pc, #232]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a6:	4937      	ldr	r1, [pc, #220]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033b6:	d106      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b8:	4b32      	ldr	r3, [pc, #200]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4a31      	ldr	r2, [pc, #196]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033c2:	60d3      	str	r3, [r2, #12]
 80033c4:	e011      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ce:	d10c      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	2101      	movs	r1, #1
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f8c8 	bl	800356c <RCCEx_PLLSAI1_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033e0:	7cfb      	ldrb	r3, [r7, #19]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033e6:	7cfb      	ldrb	r3, [r7, #19]
 80033e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d028      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033f6:	4b23      	ldr	r3, [pc, #140]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	491f      	ldr	r1, [pc, #124]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003414:	d106      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003416:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	4a1a      	ldr	r2, [pc, #104]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003420:	60d3      	str	r3, [r2, #12]
 8003422:	e011      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800342c:	d10c      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3304      	adds	r3, #4
 8003432:	2101      	movs	r1, #1
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f899 	bl	800356c <RCCEx_PLLSAI1_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800343e:	7cfb      	ldrb	r3, [r7, #19]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d02b      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003462:	4908      	ldr	r1, [pc, #32]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003472:	d109      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4a02      	ldr	r2, [pc, #8]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800347e:	60d3      	str	r3, [r2, #12]
 8003480:	e014      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003490:	d10c      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3304      	adds	r3, #4
 8003496:	2101      	movs	r1, #1
 8003498:	4618      	mov	r0, r3
 800349a:	f000 f867 	bl	800356c <RCCEx_PLLSAI1_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034a2:	7cfb      	ldrb	r3, [r7, #19]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d02f      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034b8:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034c6:	4928      	ldr	r1, [pc, #160]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034d6:	d10d      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3304      	adds	r3, #4
 80034dc:	2102      	movs	r1, #2
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f844 	bl	800356c <RCCEx_PLLSAI1_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d014      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034ee:	7cfb      	ldrb	r3, [r7, #19]
 80034f0:	74bb      	strb	r3, [r7, #18]
 80034f2:	e011      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034fc:	d10c      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3320      	adds	r3, #32
 8003502:	2102      	movs	r1, #2
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f925 	bl	8003754 <RCCEx_PLLSAI2_Config>
 800350a:	4603      	mov	r3, r0
 800350c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800350e:	7cfb      	ldrb	r3, [r7, #19]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003524:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003532:	490d      	ldr	r1, [pc, #52]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00b      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003546:	4b08      	ldr	r3, [pc, #32]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003556:	4904      	ldr	r1, [pc, #16]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800355e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000

0800356c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800357a:	4b75      	ldr	r3, [pc, #468]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d018      	beq.n	80035b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003586:	4b72      	ldr	r3, [pc, #456]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0203 	and.w	r2, r3, #3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d10d      	bne.n	80035b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
       ||
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800359e:	4b6c      	ldr	r3, [pc, #432]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
       ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d047      	beq.n	8003642 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
 80035b6:	e044      	b.n	8003642 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d018      	beq.n	80035f2 <RCCEx_PLLSAI1_Config+0x86>
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d825      	bhi.n	8003610 <RCCEx_PLLSAI1_Config+0xa4>
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d002      	beq.n	80035ce <RCCEx_PLLSAI1_Config+0x62>
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d009      	beq.n	80035e0 <RCCEx_PLLSAI1_Config+0x74>
 80035cc:	e020      	b.n	8003610 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035ce:	4b60      	ldr	r3, [pc, #384]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d11d      	bne.n	8003616 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035de:	e01a      	b.n	8003616 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035e0:	4b5b      	ldr	r3, [pc, #364]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d116      	bne.n	800361a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f0:	e013      	b.n	800361a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035f2:	4b57      	ldr	r3, [pc, #348]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10f      	bne.n	800361e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035fe:	4b54      	ldr	r3, [pc, #336]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800360e:	e006      	b.n	800361e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
      break;
 8003614:	e004      	b.n	8003620 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003616:	bf00      	nop
 8003618:	e002      	b.n	8003620 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800361a:	bf00      	nop
 800361c:	e000      	b.n	8003620 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800361e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10d      	bne.n	8003642 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003626:	4b4a      	ldr	r3, [pc, #296]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6819      	ldr	r1, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	3b01      	subs	r3, #1
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	430b      	orrs	r3, r1
 800363c:	4944      	ldr	r1, [pc, #272]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363e:	4313      	orrs	r3, r2
 8003640:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d17d      	bne.n	8003744 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003648:	4b41      	ldr	r3, [pc, #260]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a40      	ldr	r2, [pc, #256]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800364e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003654:	f7fe fb4c 	bl	8001cf0 <HAL_GetTick>
 8003658:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800365a:	e009      	b.n	8003670 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800365c:	f7fe fb48 	bl	8001cf0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d902      	bls.n	8003670 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	73fb      	strb	r3, [r7, #15]
        break;
 800366e:	e005      	b.n	800367c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003670:	4b37      	ldr	r3, [pc, #220]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1ef      	bne.n	800365c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d160      	bne.n	8003744 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d111      	bne.n	80036ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003688:	4b31      	ldr	r3, [pc, #196]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6892      	ldr	r2, [r2, #8]
 8003698:	0211      	lsls	r1, r2, #8
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68d2      	ldr	r2, [r2, #12]
 800369e:	0912      	lsrs	r2, r2, #4
 80036a0:	0452      	lsls	r2, r2, #17
 80036a2:	430a      	orrs	r2, r1
 80036a4:	492a      	ldr	r1, [pc, #168]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	610b      	str	r3, [r1, #16]
 80036aa:	e027      	b.n	80036fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d112      	bne.n	80036d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036b2:	4b27      	ldr	r3, [pc, #156]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6892      	ldr	r2, [r2, #8]
 80036c2:	0211      	lsls	r1, r2, #8
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6912      	ldr	r2, [r2, #16]
 80036c8:	0852      	lsrs	r2, r2, #1
 80036ca:	3a01      	subs	r2, #1
 80036cc:	0552      	lsls	r2, r2, #21
 80036ce:	430a      	orrs	r2, r1
 80036d0:	491f      	ldr	r1, [pc, #124]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	610b      	str	r3, [r1, #16]
 80036d6:	e011      	b.n	80036fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6892      	ldr	r2, [r2, #8]
 80036e8:	0211      	lsls	r1, r2, #8
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6952      	ldr	r2, [r2, #20]
 80036ee:	0852      	lsrs	r2, r2, #1
 80036f0:	3a01      	subs	r2, #1
 80036f2:	0652      	lsls	r2, r2, #25
 80036f4:	430a      	orrs	r2, r1
 80036f6:	4916      	ldr	r1, [pc, #88]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036fc:	4b14      	ldr	r3, [pc, #80]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a13      	ldr	r2, [pc, #76]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003702:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003706:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003708:	f7fe faf2 	bl	8001cf0 <HAL_GetTick>
 800370c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800370e:	e009      	b.n	8003724 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003710:	f7fe faee 	bl	8001cf0 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d902      	bls.n	8003724 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	73fb      	strb	r3, [r7, #15]
          break;
 8003722:	e005      	b.n	8003730 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003724:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0ef      	beq.n	8003710 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	4904      	ldr	r1, [pc, #16]	; (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003740:	4313      	orrs	r3, r2
 8003742:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003744:	7bfb      	ldrb	r3, [r7, #15]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000

08003754 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003762:	4b6a      	ldr	r3, [pc, #424]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d018      	beq.n	80037a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800376e:	4b67      	ldr	r3, [pc, #412]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f003 0203 	and.w	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d10d      	bne.n	800379a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
       ||
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003786:	4b61      	ldr	r3, [pc, #388]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
       ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d047      	beq.n	800382a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
 800379e:	e044      	b.n	800382a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d018      	beq.n	80037da <RCCEx_PLLSAI2_Config+0x86>
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d825      	bhi.n	80037f8 <RCCEx_PLLSAI2_Config+0xa4>
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d002      	beq.n	80037b6 <RCCEx_PLLSAI2_Config+0x62>
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d009      	beq.n	80037c8 <RCCEx_PLLSAI2_Config+0x74>
 80037b4:	e020      	b.n	80037f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037b6:	4b55      	ldr	r3, [pc, #340]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d11d      	bne.n	80037fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c6:	e01a      	b.n	80037fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037c8:	4b50      	ldr	r3, [pc, #320]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d116      	bne.n	8003802 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d8:	e013      	b.n	8003802 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037da:	4b4c      	ldr	r3, [pc, #304]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10f      	bne.n	8003806 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037e6:	4b49      	ldr	r3, [pc, #292]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037f6:	e006      	b.n	8003806 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
      break;
 80037fc:	e004      	b.n	8003808 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037fe:	bf00      	nop
 8003800:	e002      	b.n	8003808 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003802:	bf00      	nop
 8003804:	e000      	b.n	8003808 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003806:	bf00      	nop
    }

    if(status == HAL_OK)
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10d      	bne.n	800382a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800380e:	4b3f      	ldr	r3, [pc, #252]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6819      	ldr	r1, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	3b01      	subs	r3, #1
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	430b      	orrs	r3, r1
 8003824:	4939      	ldr	r1, [pc, #228]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003826:	4313      	orrs	r3, r2
 8003828:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d167      	bne.n	8003900 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003830:	4b36      	ldr	r3, [pc, #216]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a35      	ldr	r2, [pc, #212]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800383a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800383c:	f7fe fa58 	bl	8001cf0 <HAL_GetTick>
 8003840:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003842:	e009      	b.n	8003858 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003844:	f7fe fa54 	bl	8001cf0 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d902      	bls.n	8003858 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	73fb      	strb	r3, [r7, #15]
        break;
 8003856:	e005      	b.n	8003864 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003858:	4b2c      	ldr	r3, [pc, #176]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1ef      	bne.n	8003844 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d14a      	bne.n	8003900 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d111      	bne.n	8003894 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003870:	4b26      	ldr	r3, [pc, #152]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6892      	ldr	r2, [r2, #8]
 8003880:	0211      	lsls	r1, r2, #8
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68d2      	ldr	r2, [r2, #12]
 8003886:	0912      	lsrs	r2, r2, #4
 8003888:	0452      	lsls	r2, r2, #17
 800388a:	430a      	orrs	r2, r1
 800388c:	491f      	ldr	r1, [pc, #124]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 800388e:	4313      	orrs	r3, r2
 8003890:	614b      	str	r3, [r1, #20]
 8003892:	e011      	b.n	80038b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003894:	4b1d      	ldr	r3, [pc, #116]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800389c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6892      	ldr	r2, [r2, #8]
 80038a4:	0211      	lsls	r1, r2, #8
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6912      	ldr	r2, [r2, #16]
 80038aa:	0852      	lsrs	r2, r2, #1
 80038ac:	3a01      	subs	r2, #1
 80038ae:	0652      	lsls	r2, r2, #25
 80038b0:	430a      	orrs	r2, r1
 80038b2:	4916      	ldr	r1, [pc, #88]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038b8:	4b14      	ldr	r3, [pc, #80]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a13      	ldr	r2, [pc, #76]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fe fa14 	bl	8001cf0 <HAL_GetTick>
 80038c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038ca:	e009      	b.n	80038e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038cc:	f7fe fa10 	bl	8001cf0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d902      	bls.n	80038e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	73fb      	strb	r3, [r7, #15]
          break;
 80038de:	e005      	b.n	80038ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0ef      	beq.n	80038cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	4904      	ldr	r1, [pc, #16]	; (800390c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003900:	7bfb      	ldrb	r3, [r7, #15]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000

08003910 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e095      	b.n	8003a4e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	2b00      	cmp	r3, #0
 8003928:	d108      	bne.n	800393c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003932:	d009      	beq.n	8003948 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	61da      	str	r2, [r3, #28]
 800393a:	e005      	b.n	8003948 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fd feea 	bl	800173c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800397e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003988:	d902      	bls.n	8003990 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	e002      	b.n	8003996 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003994:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800399e:	d007      	beq.n	80039b0 <HAL_SPI_Init+0xa0>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039a8:	d002      	beq.n	80039b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f2:	ea42 0103 	orr.w	r1, r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	0c1b      	lsrs	r3, r3, #16
 8003a0c:	f003 0204 	and.w	r2, r3, #4
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a2c:	ea42 0103 	orr.w	r1, r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b088      	sub	sp, #32
 8003a5a:	af02      	add	r7, sp, #8
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	4613      	mov	r3, r2
 8003a64:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a72:	d112      	bne.n	8003a9a <HAL_SPI_Receive+0x44>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10e      	bne.n	8003a9a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2204      	movs	r2, #4
 8003a80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a84:	88fa      	ldrh	r2, [r7, #6]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f910 	bl	8003cb6 <HAL_SPI_TransmitReceive>
 8003a96:	4603      	mov	r3, r0
 8003a98:	e109      	b.n	8003cae <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_SPI_Receive+0x52>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e102      	b.n	8003cae <HAL_SPI_Receive+0x258>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ab0:	f7fe f91e 	bl	8001cf0 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d002      	beq.n	8003ac8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ac6:	e0e9      	b.n	8003c9c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_SPI_Receive+0x7e>
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d102      	bne.n	8003ada <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ad8:	e0e0      	b.n	8003c9c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2204      	movs	r2, #4
 8003ade:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	88fa      	ldrh	r2, [r7, #6]
 8003af2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	88fa      	ldrh	r2, [r7, #6]
 8003afa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b24:	d908      	bls.n	8003b38 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	e007      	b.n	8003b48 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b46:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b50:	d10f      	bne.n	8003b72 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b70:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7c:	2b40      	cmp	r3, #64	; 0x40
 8003b7e:	d007      	beq.n	8003b90 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b8e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b98:	d867      	bhi.n	8003c6a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b9a:	e030      	b.n	8003bfe <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d117      	bne.n	8003bda <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f103 020c 	add.w	r2, r3, #12
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	7812      	ldrb	r2, [r2, #0]
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003bd8:	e011      	b.n	8003bfe <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bda:	f7fe f889 	bl	8001cf0 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d803      	bhi.n	8003bf2 <HAL_SPI_Receive+0x19c>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d102      	bne.n	8003bf8 <HAL_SPI_Receive+0x1a2>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d102      	bne.n	8003bfe <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003bfc:	e04e      	b.n	8003c9c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1c8      	bne.n	8003b9c <HAL_SPI_Receive+0x146>
 8003c0a:	e034      	b.n	8003c76 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d115      	bne.n	8003c46 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	b292      	uxth	r2, r2
 8003c26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	1c9a      	adds	r2, r3, #2
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003c44:	e011      	b.n	8003c6a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c46:	f7fe f853 	bl	8001cf0 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d803      	bhi.n	8003c5e <HAL_SPI_Receive+0x208>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d102      	bne.n	8003c64 <HAL_SPI_Receive+0x20e>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d102      	bne.n	8003c6a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c68:	e018      	b.n	8003c9c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1ca      	bne.n	8003c0c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	6839      	ldr	r1, [r7, #0]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fb48 	bl	8004310 <SPI_EndRxTransaction>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	75fb      	strb	r3, [r7, #23]
 8003c98:	e000      	b.n	8003c9c <HAL_SPI_Receive+0x246>
  }

error :
 8003c9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b08a      	sub	sp, #40	; 0x28
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	607a      	str	r2, [r7, #4]
 8003cc2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_SPI_TransmitReceive+0x26>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e1fb      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x41e>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ce4:	f7fe f804 	bl	8001cf0 <HAL_GetTick>
 8003ce8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cf0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003cf8:	887b      	ldrh	r3, [r7, #2]
 8003cfa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003cfc:	887b      	ldrh	r3, [r7, #2]
 8003cfe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d00:	7efb      	ldrb	r3, [r7, #27]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d00e      	beq.n	8003d24 <HAL_SPI_TransmitReceive+0x6e>
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d0c:	d106      	bne.n	8003d1c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d102      	bne.n	8003d1c <HAL_SPI_TransmitReceive+0x66>
 8003d16:	7efb      	ldrb	r3, [r7, #27]
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d003      	beq.n	8003d24 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d22:	e1cd      	b.n	80040c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_SPI_TransmitReceive+0x80>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_SPI_TransmitReceive+0x80>
 8003d30:	887b      	ldrh	r3, [r7, #2]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d3c:	e1c0      	b.n	80040c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d003      	beq.n	8003d52 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2205      	movs	r2, #5
 8003d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	887a      	ldrh	r2, [r7, #2]
 8003d62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	887a      	ldrh	r2, [r7, #2]
 8003d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	887a      	ldrh	r2, [r7, #2]
 8003d78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	887a      	ldrh	r2, [r7, #2]
 8003d7e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d94:	d802      	bhi.n	8003d9c <HAL_SPI_TransmitReceive+0xe6>
 8003d96:	8a3b      	ldrh	r3, [r7, #16]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d908      	bls.n	8003dae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003daa:	605a      	str	r2, [r3, #4]
 8003dac:	e007      	b.n	8003dbe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dbc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc8:	2b40      	cmp	r3, #64	; 0x40
 8003dca:	d007      	beq.n	8003ddc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003de4:	d97c      	bls.n	8003ee0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_SPI_TransmitReceive+0x13e>
 8003dee:	8a7b      	ldrh	r3, [r7, #18]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d169      	bne.n	8003ec8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df8:	881a      	ldrh	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	1c9a      	adds	r2, r3, #2
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e18:	e056      	b.n	8003ec8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d11b      	bne.n	8003e60 <HAL_SPI_TransmitReceive+0x1aa>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d016      	beq.n	8003e60 <HAL_SPI_TransmitReceive+0x1aa>
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d113      	bne.n	8003e60 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	881a      	ldrh	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	1c9a      	adds	r2, r3, #2
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d11c      	bne.n	8003ea8 <HAL_SPI_TransmitReceive+0x1f2>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d016      	beq.n	8003ea8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	b292      	uxth	r2, r2
 8003e86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	1c9a      	adds	r2, r3, #2
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ea8:	f7fd ff22 	bl	8001cf0 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d807      	bhi.n	8003ec8 <HAL_SPI_TransmitReceive+0x212>
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d003      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003ec6:	e0fb      	b.n	80040c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1a3      	bne.n	8003e1a <HAL_SPI_TransmitReceive+0x164>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d19d      	bne.n	8003e1a <HAL_SPI_TransmitReceive+0x164>
 8003ede:	e0df      	b.n	80040a0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_SPI_TransmitReceive+0x23a>
 8003ee8:	8a7b      	ldrh	r3, [r7, #18]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	f040 80cb 	bne.w	8004086 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d912      	bls.n	8003f20 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	881a      	ldrh	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	1c9a      	adds	r2, r3, #2
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b02      	subs	r3, #2
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f1e:	e0b2      	b.n	8004086 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	7812      	ldrb	r2, [r2, #0]
 8003f2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f46:	e09e      	b.n	8004086 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d134      	bne.n	8003fc0 <HAL_SPI_TransmitReceive+0x30a>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d02f      	beq.n	8003fc0 <HAL_SPI_TransmitReceive+0x30a>
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d12c      	bne.n	8003fc0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d912      	bls.n	8003f96 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	881a      	ldrh	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	1c9a      	adds	r2, r3, #2
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b02      	subs	r3, #2
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f94:	e012      	b.n	8003fbc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	330c      	adds	r3, #12
 8003fa0:	7812      	ldrb	r2, [r2, #0]
 8003fa2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d148      	bne.n	8004060 <HAL_SPI_TransmitReceive+0x3aa>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d042      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d923      	bls.n	800402e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	1c9a      	adds	r2, r3, #2
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b02      	subs	r3, #2
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	d81f      	bhi.n	800405c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800402a:	605a      	str	r2, [r3, #4]
 800402c:	e016      	b.n	800405c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f103 020c 	add.w	r2, r3, #12
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	7812      	ldrb	r2, [r2, #0]
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800405c:	2301      	movs	r3, #1
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004060:	f7fd fe46 	bl	8001cf0 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800406c:	429a      	cmp	r2, r3
 800406e:	d803      	bhi.n	8004078 <HAL_SPI_TransmitReceive+0x3c2>
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004076:	d102      	bne.n	800407e <HAL_SPI_TransmitReceive+0x3c8>
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	2b00      	cmp	r3, #0
 800407c:	d103      	bne.n	8004086 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004084:	e01c      	b.n	80040c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	f47f af5b 	bne.w	8003f48 <HAL_SPI_TransmitReceive+0x292>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	f47f af54 	bne.w	8003f48 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f98b 	bl	80043c0 <SPI_EndRxTxTransaction>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d006      	beq.n	80040be <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	661a      	str	r2, [r3, #96]	; 0x60
 80040bc:	e000      	b.n	80040c0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80040be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3728      	adds	r7, #40	; 0x28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	4613      	mov	r3, r2
 80040ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040ec:	f7fd fe00 	bl	8001cf0 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	4413      	add	r3, r2
 80040fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040fc:	f7fd fdf8 	bl	8001cf0 <HAL_GetTick>
 8004100:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004102:	4b39      	ldr	r3, [pc, #228]	; (80041e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	015b      	lsls	r3, r3, #5
 8004108:	0d1b      	lsrs	r3, r3, #20
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	fb02 f303 	mul.w	r3, r2, r3
 8004110:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004112:	e054      	b.n	80041be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411a:	d050      	beq.n	80041be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800411c:	f7fd fde8 	bl	8001cf0 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	429a      	cmp	r2, r3
 800412a:	d902      	bls.n	8004132 <SPI_WaitFlagStateUntilTimeout+0x56>
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d13d      	bne.n	80041ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004140:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800414a:	d111      	bne.n	8004170 <SPI_WaitFlagStateUntilTimeout+0x94>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004154:	d004      	beq.n	8004160 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415e:	d107      	bne.n	8004170 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800416e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004178:	d10f      	bne.n	800419a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004198:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e017      	b.n	80041de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4013      	ands	r3, r2
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	bf0c      	ite	eq
 80041ce:	2301      	moveq	r3, #1
 80041d0:	2300      	movne	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d19b      	bne.n	8004114 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3720      	adds	r7, #32
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000000 	.word	0x20000000

080041ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80041fa:	f7fd fd79 	bl	8001cf0 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	4413      	add	r3, r2
 8004208:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800420a:	f7fd fd71 	bl	8001cf0 <HAL_GetTick>
 800420e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004210:	4b3e      	ldr	r3, [pc, #248]	; (800430c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	00da      	lsls	r2, r3, #3
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	0d1b      	lsrs	r3, r3, #20
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	fb02 f303 	mul.w	r3, r2, r3
 8004226:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004228:	e062      	b.n	80042f0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004230:	d109      	bne.n	8004246 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d106      	bne.n	8004246 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	330c      	adds	r3, #12
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004244:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424c:	d050      	beq.n	80042f0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800424e:	f7fd fd4f 	bl	8001cf0 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	429a      	cmp	r2, r3
 800425c:	d902      	bls.n	8004264 <SPI_WaitFifoStateUntilTimeout+0x78>
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d13d      	bne.n	80042e0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004272:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800427c:	d111      	bne.n	80042a2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004286:	d004      	beq.n	8004292 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004290:	d107      	bne.n	80042a2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042aa:	d10f      	bne.n	80042cc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e010      	b.n	8004302 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	4013      	ands	r3, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d194      	bne.n	800422a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000000 	.word	0x20000000

08004310 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004324:	d111      	bne.n	800434a <SPI_EndRxTransaction+0x3a>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800432e:	d004      	beq.n	800433a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004338:	d107      	bne.n	800434a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004348:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2200      	movs	r2, #0
 8004352:	2180      	movs	r1, #128	; 0x80
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7ff fec1 	bl	80040dc <SPI_WaitFlagStateUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d007      	beq.n	8004370 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004364:	f043 0220 	orr.w	r2, r3, #32
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e023      	b.n	80043b8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004378:	d11d      	bne.n	80043b6 <SPI_EndRxTransaction+0xa6>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004382:	d004      	beq.n	800438e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438c:	d113      	bne.n	80043b6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2200      	movs	r2, #0
 8004396:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f7ff ff26 	bl	80041ec <SPI_WaitFifoStateUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043aa:	f043 0220 	orr.w	r2, r3, #32
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e000      	b.n	80043b8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f7ff ff07 	bl	80041ec <SPI_WaitFifoStateUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e8:	f043 0220 	orr.w	r2, r3, #32
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e027      	b.n	8004444 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2200      	movs	r2, #0
 80043fc:	2180      	movs	r1, #128	; 0x80
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f7ff fe6c 	bl	80040dc <SPI_WaitFlagStateUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d007      	beq.n	800441a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440e:	f043 0220 	orr.w	r2, r3, #32
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e014      	b.n	8004444 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2200      	movs	r2, #0
 8004422:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f7ff fee0 	bl	80041ec <SPI_WaitFifoStateUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004436:	f043 0220 	orr.w	r2, r3, #32
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e000      	b.n	8004444 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e049      	b.n	80044f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fd f9c4 	bl	8001800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f000 fd2c 	bl	8004ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d001      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e04f      	b.n	80045b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a23      	ldr	r2, [pc, #140]	; (80045c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d01d      	beq.n	8004572 <HAL_TIM_Base_Start_IT+0x76>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453e:	d018      	beq.n	8004572 <HAL_TIM_Base_Start_IT+0x76>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a1f      	ldr	r2, [pc, #124]	; (80045c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d013      	beq.n	8004572 <HAL_TIM_Base_Start_IT+0x76>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a1e      	ldr	r2, [pc, #120]	; (80045c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00e      	beq.n	8004572 <HAL_TIM_Base_Start_IT+0x76>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1c      	ldr	r2, [pc, #112]	; (80045cc <HAL_TIM_Base_Start_IT+0xd0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d009      	beq.n	8004572 <HAL_TIM_Base_Start_IT+0x76>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1b      	ldr	r2, [pc, #108]	; (80045d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d004      	beq.n	8004572 <HAL_TIM_Base_Start_IT+0x76>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a19      	ldr	r2, [pc, #100]	; (80045d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d115      	bne.n	800459e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	4b17      	ldr	r3, [pc, #92]	; (80045d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800457a:	4013      	ands	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b06      	cmp	r3, #6
 8004582:	d015      	beq.n	80045b0 <HAL_TIM_Base_Start_IT+0xb4>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458a:	d011      	beq.n	80045b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459c:	e008      	b.n	80045b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f042 0201 	orr.w	r2, r2, #1
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	e000      	b.n	80045b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40000400 	.word	0x40000400
 80045c8:	40000800 	.word	0x40000800
 80045cc:	40000c00 	.word	0x40000c00
 80045d0:	40013400 	.word	0x40013400
 80045d4:	40014000 	.word	0x40014000
 80045d8:	00010007 	.word	0x00010007

080045dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e049      	b.n	8004682 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f841 	bl	800468a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3304      	adds	r3, #4
 8004618:	4619      	mov	r1, r3
 800461a:	4610      	mov	r0, r2
 800461c:	f000 fc64 	bl	8004ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d109      	bne.n	80046c4 <HAL_TIM_PWM_Start+0x24>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e03c      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d109      	bne.n	80046de <HAL_TIM_PWM_Start+0x3e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	bf14      	ite	ne
 80046d6:	2301      	movne	r3, #1
 80046d8:	2300      	moveq	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	e02f      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d109      	bne.n	80046f8 <HAL_TIM_PWM_Start+0x58>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	e022      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b0c      	cmp	r3, #12
 80046fc:	d109      	bne.n	8004712 <HAL_TIM_PWM_Start+0x72>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	bf14      	ite	ne
 800470a:	2301      	movne	r3, #1
 800470c:	2300      	moveq	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	e015      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b10      	cmp	r3, #16
 8004716:	d109      	bne.n	800472c <HAL_TIM_PWM_Start+0x8c>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	bf14      	ite	ne
 8004724:	2301      	movne	r3, #1
 8004726:	2300      	moveq	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	e008      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	bf14      	ite	ne
 8004738:	2301      	movne	r3, #1
 800473a:	2300      	moveq	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e09c      	b.n	8004880 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d104      	bne.n	8004756 <HAL_TIM_PWM_Start+0xb6>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004754:	e023      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b04      	cmp	r3, #4
 800475a:	d104      	bne.n	8004766 <HAL_TIM_PWM_Start+0xc6>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004764:	e01b      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d104      	bne.n	8004776 <HAL_TIM_PWM_Start+0xd6>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004774:	e013      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b0c      	cmp	r3, #12
 800477a:	d104      	bne.n	8004786 <HAL_TIM_PWM_Start+0xe6>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004784:	e00b      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b10      	cmp	r3, #16
 800478a:	d104      	bne.n	8004796 <HAL_TIM_PWM_Start+0xf6>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004794:	e003      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2202      	movs	r2, #2
 800479a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2201      	movs	r2, #1
 80047a4:	6839      	ldr	r1, [r7, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 ffa8 	bl	80056fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a35      	ldr	r2, [pc, #212]	; (8004888 <HAL_TIM_PWM_Start+0x1e8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <HAL_TIM_PWM_Start+0x13e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a34      	ldr	r2, [pc, #208]	; (800488c <HAL_TIM_PWM_Start+0x1ec>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00e      	beq.n	80047de <HAL_TIM_PWM_Start+0x13e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a32      	ldr	r2, [pc, #200]	; (8004890 <HAL_TIM_PWM_Start+0x1f0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d009      	beq.n	80047de <HAL_TIM_PWM_Start+0x13e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a31      	ldr	r2, [pc, #196]	; (8004894 <HAL_TIM_PWM_Start+0x1f4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d004      	beq.n	80047de <HAL_TIM_PWM_Start+0x13e>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a2f      	ldr	r2, [pc, #188]	; (8004898 <HAL_TIM_PWM_Start+0x1f8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d101      	bne.n	80047e2 <HAL_TIM_PWM_Start+0x142>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <HAL_TIM_PWM_Start+0x144>
 80047e2:	2300      	movs	r3, #0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a22      	ldr	r2, [pc, #136]	; (8004888 <HAL_TIM_PWM_Start+0x1e8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d01d      	beq.n	800483e <HAL_TIM_PWM_Start+0x19e>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480a:	d018      	beq.n	800483e <HAL_TIM_PWM_Start+0x19e>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a22      	ldr	r2, [pc, #136]	; (800489c <HAL_TIM_PWM_Start+0x1fc>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <HAL_TIM_PWM_Start+0x19e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a21      	ldr	r2, [pc, #132]	; (80048a0 <HAL_TIM_PWM_Start+0x200>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00e      	beq.n	800483e <HAL_TIM_PWM_Start+0x19e>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1f      	ldr	r2, [pc, #124]	; (80048a4 <HAL_TIM_PWM_Start+0x204>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d009      	beq.n	800483e <HAL_TIM_PWM_Start+0x19e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a17      	ldr	r2, [pc, #92]	; (800488c <HAL_TIM_PWM_Start+0x1ec>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d004      	beq.n	800483e <HAL_TIM_PWM_Start+0x19e>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a15      	ldr	r2, [pc, #84]	; (8004890 <HAL_TIM_PWM_Start+0x1f0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d115      	bne.n	800486a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	4b18      	ldr	r3, [pc, #96]	; (80048a8 <HAL_TIM_PWM_Start+0x208>)
 8004846:	4013      	ands	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b06      	cmp	r3, #6
 800484e:	d015      	beq.n	800487c <HAL_TIM_PWM_Start+0x1dc>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004856:	d011      	beq.n	800487c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004868:	e008      	b.n	800487c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0201 	orr.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e000      	b.n	800487e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40012c00 	.word	0x40012c00
 800488c:	40013400 	.word	0x40013400
 8004890:	40014000 	.word	0x40014000
 8004894:	40014400 	.word	0x40014400
 8004898:	40014800 	.word	0x40014800
 800489c:	40000400 	.word	0x40000400
 80048a0:	40000800 	.word	0x40000800
 80048a4:	40000c00 	.word	0x40000c00
 80048a8:	00010007 	.word	0x00010007

080048ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d122      	bne.n	8004908 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d11b      	bne.n	8004908 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0202 	mvn.w	r2, #2
 80048d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fadc 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
 80048f4:	e005      	b.n	8004902 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 face 	bl	8004e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fadf 	bl	8004ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b04      	cmp	r3, #4
 8004914:	d122      	bne.n	800495c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b04      	cmp	r3, #4
 8004922:	d11b      	bne.n	800495c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0204 	mvn.w	r2, #4
 800492c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fab2 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 faa4 	bl	8004e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fab5 	bl	8004ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b08      	cmp	r3, #8
 8004968:	d122      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b08      	cmp	r3, #8
 8004976:	d11b      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0208 	mvn.w	r2, #8
 8004980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2204      	movs	r2, #4
 8004986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa88 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
 800499c:	e005      	b.n	80049aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fa7a 	bl	8004e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fa8b 	bl	8004ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d122      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b10      	cmp	r3, #16
 80049ca:	d11b      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0210 	mvn.w	r2, #16
 80049d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2208      	movs	r2, #8
 80049da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fa5e 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
 80049f0:	e005      	b.n	80049fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fa50 	bl	8004e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fa61 	bl	8004ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d10e      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d107      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0201 	mvn.w	r2, #1
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fc fe40 	bl	80016b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3a:	2b80      	cmp	r3, #128	; 0x80
 8004a3c:	d10e      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a48:	2b80      	cmp	r3, #128	; 0x80
 8004a4a:	d107      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 ff08 	bl	800586c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a6a:	d10e      	bne.n	8004a8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a76:	2b80      	cmp	r3, #128	; 0x80
 8004a78:	d107      	bne.n	8004a8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fefb 	bl	8005880 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d10e      	bne.n	8004ab6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa2:	2b40      	cmp	r3, #64	; 0x40
 8004aa4:	d107      	bne.n	8004ab6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fa0f 	bl	8004ed4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	f003 0320 	and.w	r3, r3, #32
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	d10e      	bne.n	8004ae2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f003 0320 	and.w	r3, r3, #32
 8004ace:	2b20      	cmp	r3, #32
 8004ad0:	d107      	bne.n	8004ae2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f06f 0220 	mvn.w	r2, #32
 8004ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 febb 	bl	8005858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ae2:	bf00      	nop
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
	...

08004aec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e0fd      	b.n	8004d02 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b14      	cmp	r3, #20
 8004b12:	f200 80f0 	bhi.w	8004cf6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004b16:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b71 	.word	0x08004b71
 8004b20:	08004cf7 	.word	0x08004cf7
 8004b24:	08004cf7 	.word	0x08004cf7
 8004b28:	08004cf7 	.word	0x08004cf7
 8004b2c:	08004bb1 	.word	0x08004bb1
 8004b30:	08004cf7 	.word	0x08004cf7
 8004b34:	08004cf7 	.word	0x08004cf7
 8004b38:	08004cf7 	.word	0x08004cf7
 8004b3c:	08004bf3 	.word	0x08004bf3
 8004b40:	08004cf7 	.word	0x08004cf7
 8004b44:	08004cf7 	.word	0x08004cf7
 8004b48:	08004cf7 	.word	0x08004cf7
 8004b4c:	08004c33 	.word	0x08004c33
 8004b50:	08004cf7 	.word	0x08004cf7
 8004b54:	08004cf7 	.word	0x08004cf7
 8004b58:	08004cf7 	.word	0x08004cf7
 8004b5c:	08004c75 	.word	0x08004c75
 8004b60:	08004cf7 	.word	0x08004cf7
 8004b64:	08004cf7 	.word	0x08004cf7
 8004b68:	08004cf7 	.word	0x08004cf7
 8004b6c:	08004cb5 	.word	0x08004cb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fa50 	bl	800501c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0208 	orr.w	r2, r2, #8
 8004b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0204 	bic.w	r2, r2, #4
 8004b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6999      	ldr	r1, [r3, #24]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	619a      	str	r2, [r3, #24]
      break;
 8004bae:	e0a3      	b.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fac0 	bl	800513c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6999      	ldr	r1, [r3, #24]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	021a      	lsls	r2, r3, #8
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	619a      	str	r2, [r3, #24]
      break;
 8004bf0:	e082      	b.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fb29 	bl	8005250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0208 	orr.w	r2, r2, #8
 8004c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0204 	bic.w	r2, r2, #4
 8004c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69d9      	ldr	r1, [r3, #28]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	61da      	str	r2, [r3, #28]
      break;
 8004c30:	e062      	b.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fb91 	bl	8005360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69d9      	ldr	r1, [r3, #28]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	021a      	lsls	r2, r3, #8
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	61da      	str	r2, [r3, #28]
      break;
 8004c72:	e041      	b.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68b9      	ldr	r1, [r7, #8]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fbda 	bl	8005434 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0208 	orr.w	r2, r2, #8
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0204 	bic.w	r2, r2, #4
 8004c9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cb2:	e021      	b.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fc1e 	bl	80054fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	021a      	lsls	r2, r3, #8
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cf4:	e000      	b.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004cf6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop

08004d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <HAL_TIM_ConfigClockSource+0x18>
 8004d20:	2302      	movs	r3, #2
 8004d22:	e0b5      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x184>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d60:	d03e      	beq.n	8004de0 <HAL_TIM_ConfigClockSource+0xd4>
 8004d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d66:	f200 8087 	bhi.w	8004e78 <HAL_TIM_ConfigClockSource+0x16c>
 8004d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6e:	f000 8085 	beq.w	8004e7c <HAL_TIM_ConfigClockSource+0x170>
 8004d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d76:	d87f      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x16c>
 8004d78:	2b70      	cmp	r3, #112	; 0x70
 8004d7a:	d01a      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0xa6>
 8004d7c:	2b70      	cmp	r3, #112	; 0x70
 8004d7e:	d87b      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x16c>
 8004d80:	2b60      	cmp	r3, #96	; 0x60
 8004d82:	d050      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0x11a>
 8004d84:	2b60      	cmp	r3, #96	; 0x60
 8004d86:	d877      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x16c>
 8004d88:	2b50      	cmp	r3, #80	; 0x50
 8004d8a:	d03c      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0xfa>
 8004d8c:	2b50      	cmp	r3, #80	; 0x50
 8004d8e:	d873      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x16c>
 8004d90:	2b40      	cmp	r3, #64	; 0x40
 8004d92:	d058      	beq.n	8004e46 <HAL_TIM_ConfigClockSource+0x13a>
 8004d94:	2b40      	cmp	r3, #64	; 0x40
 8004d96:	d86f      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x16c>
 8004d98:	2b30      	cmp	r3, #48	; 0x30
 8004d9a:	d064      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0x15a>
 8004d9c:	2b30      	cmp	r3, #48	; 0x30
 8004d9e:	d86b      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x16c>
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d060      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0x15a>
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	d867      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x16c>
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d05c      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0x15a>
 8004dac:	2b10      	cmp	r3, #16
 8004dae:	d05a      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004db0:	e062      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6899      	ldr	r1, [r3, #8]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f000 fc7b 	bl	80056bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	609a      	str	r2, [r3, #8]
      break;
 8004dde:	e04e      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	6899      	ldr	r1, [r3, #8]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f000 fc64 	bl	80056bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e02:	609a      	str	r2, [r3, #8]
      break;
 8004e04:	e03b      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	6859      	ldr	r1, [r3, #4]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	461a      	mov	r2, r3
 8004e14:	f000 fbd8 	bl	80055c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2150      	movs	r1, #80	; 0x50
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fc31 	bl	8005686 <TIM_ITRx_SetConfig>
      break;
 8004e24:	e02b      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	6859      	ldr	r1, [r3, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	461a      	mov	r2, r3
 8004e34:	f000 fbf7 	bl	8005626 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2160      	movs	r1, #96	; 0x60
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fc21 	bl	8005686 <TIM_ITRx_SetConfig>
      break;
 8004e44:	e01b      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6818      	ldr	r0, [r3, #0]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	6859      	ldr	r1, [r3, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	461a      	mov	r2, r3
 8004e54:	f000 fbb8 	bl	80055c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2140      	movs	r1, #64	; 0x40
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fc11 	bl	8005686 <TIM_ITRx_SetConfig>
      break;
 8004e64:	e00b      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4610      	mov	r0, r2
 8004e72:	f000 fc08 	bl	8005686 <TIM_ITRx_SetConfig>
        break;
 8004e76:	e002      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004e78:	bf00      	nop
 8004e7a:	e000      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004e7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a40      	ldr	r2, [pc, #256]	; (8004ffc <TIM_Base_SetConfig+0x114>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d013      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f06:	d00f      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a3d      	ldr	r2, [pc, #244]	; (8005000 <TIM_Base_SetConfig+0x118>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00b      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a3c      	ldr	r2, [pc, #240]	; (8005004 <TIM_Base_SetConfig+0x11c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d007      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a3b      	ldr	r2, [pc, #236]	; (8005008 <TIM_Base_SetConfig+0x120>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a3a      	ldr	r2, [pc, #232]	; (800500c <TIM_Base_SetConfig+0x124>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d108      	bne.n	8004f3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2f      	ldr	r2, [pc, #188]	; (8004ffc <TIM_Base_SetConfig+0x114>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d01f      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f48:	d01b      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a2c      	ldr	r2, [pc, #176]	; (8005000 <TIM_Base_SetConfig+0x118>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d017      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2b      	ldr	r2, [pc, #172]	; (8005004 <TIM_Base_SetConfig+0x11c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2a      	ldr	r2, [pc, #168]	; (8005008 <TIM_Base_SetConfig+0x120>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00f      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a29      	ldr	r2, [pc, #164]	; (800500c <TIM_Base_SetConfig+0x124>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00b      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a28      	ldr	r2, [pc, #160]	; (8005010 <TIM_Base_SetConfig+0x128>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d007      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a27      	ldr	r2, [pc, #156]	; (8005014 <TIM_Base_SetConfig+0x12c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d003      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a26      	ldr	r2, [pc, #152]	; (8005018 <TIM_Base_SetConfig+0x130>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d108      	bne.n	8004f94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a10      	ldr	r2, [pc, #64]	; (8004ffc <TIM_Base_SetConfig+0x114>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00f      	beq.n	8004fe0 <TIM_Base_SetConfig+0xf8>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a12      	ldr	r2, [pc, #72]	; (800500c <TIM_Base_SetConfig+0x124>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00b      	beq.n	8004fe0 <TIM_Base_SetConfig+0xf8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a11      	ldr	r2, [pc, #68]	; (8005010 <TIM_Base_SetConfig+0x128>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d007      	beq.n	8004fe0 <TIM_Base_SetConfig+0xf8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a10      	ldr	r2, [pc, #64]	; (8005014 <TIM_Base_SetConfig+0x12c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d003      	beq.n	8004fe0 <TIM_Base_SetConfig+0xf8>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a0f      	ldr	r2, [pc, #60]	; (8005018 <TIM_Base_SetConfig+0x130>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d103      	bne.n	8004fe8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	615a      	str	r2, [r3, #20]
}
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	40000400 	.word	0x40000400
 8005004:	40000800 	.word	0x40000800
 8005008:	40000c00 	.word	0x40000c00
 800500c:	40013400 	.word	0x40013400
 8005010:	40014000 	.word	0x40014000
 8005014:	40014400 	.word	0x40014400
 8005018:	40014800 	.word	0x40014800

0800501c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f023 0201 	bic.w	r2, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0303 	bic.w	r3, r3, #3
 8005056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f023 0302 	bic.w	r3, r3, #2
 8005068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a2c      	ldr	r2, [pc, #176]	; (8005128 <TIM_OC1_SetConfig+0x10c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00f      	beq.n	800509c <TIM_OC1_SetConfig+0x80>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a2b      	ldr	r2, [pc, #172]	; (800512c <TIM_OC1_SetConfig+0x110>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00b      	beq.n	800509c <TIM_OC1_SetConfig+0x80>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a2a      	ldr	r2, [pc, #168]	; (8005130 <TIM_OC1_SetConfig+0x114>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d007      	beq.n	800509c <TIM_OC1_SetConfig+0x80>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a29      	ldr	r2, [pc, #164]	; (8005134 <TIM_OC1_SetConfig+0x118>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_OC1_SetConfig+0x80>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a28      	ldr	r2, [pc, #160]	; (8005138 <TIM_OC1_SetConfig+0x11c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d10c      	bne.n	80050b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f023 0308 	bic.w	r3, r3, #8
 80050a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f023 0304 	bic.w	r3, r3, #4
 80050b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a1b      	ldr	r2, [pc, #108]	; (8005128 <TIM_OC1_SetConfig+0x10c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00f      	beq.n	80050de <TIM_OC1_SetConfig+0xc2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a1a      	ldr	r2, [pc, #104]	; (800512c <TIM_OC1_SetConfig+0x110>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00b      	beq.n	80050de <TIM_OC1_SetConfig+0xc2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a19      	ldr	r2, [pc, #100]	; (8005130 <TIM_OC1_SetConfig+0x114>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d007      	beq.n	80050de <TIM_OC1_SetConfig+0xc2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a18      	ldr	r2, [pc, #96]	; (8005134 <TIM_OC1_SetConfig+0x118>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d003      	beq.n	80050de <TIM_OC1_SetConfig+0xc2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a17      	ldr	r2, [pc, #92]	; (8005138 <TIM_OC1_SetConfig+0x11c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d111      	bne.n	8005102 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	621a      	str	r2, [r3, #32]
}
 800511c:	bf00      	nop
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40012c00 	.word	0x40012c00
 800512c:	40013400 	.word	0x40013400
 8005130:	40014000 	.word	0x40014000
 8005134:	40014400 	.word	0x40014400
 8005138:	40014800 	.word	0x40014800

0800513c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	f023 0210 	bic.w	r2, r3, #16
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800516a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800516e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	021b      	lsls	r3, r3, #8
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f023 0320 	bic.w	r3, r3, #32
 800518a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a28      	ldr	r2, [pc, #160]	; (800523c <TIM_OC2_SetConfig+0x100>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d003      	beq.n	80051a8 <TIM_OC2_SetConfig+0x6c>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a27      	ldr	r2, [pc, #156]	; (8005240 <TIM_OC2_SetConfig+0x104>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d10d      	bne.n	80051c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a1d      	ldr	r2, [pc, #116]	; (800523c <TIM_OC2_SetConfig+0x100>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00f      	beq.n	80051ec <TIM_OC2_SetConfig+0xb0>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a1c      	ldr	r2, [pc, #112]	; (8005240 <TIM_OC2_SetConfig+0x104>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00b      	beq.n	80051ec <TIM_OC2_SetConfig+0xb0>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a1b      	ldr	r2, [pc, #108]	; (8005244 <TIM_OC2_SetConfig+0x108>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d007      	beq.n	80051ec <TIM_OC2_SetConfig+0xb0>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a1a      	ldr	r2, [pc, #104]	; (8005248 <TIM_OC2_SetConfig+0x10c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_OC2_SetConfig+0xb0>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a19      	ldr	r2, [pc, #100]	; (800524c <TIM_OC2_SetConfig+0x110>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d113      	bne.n	8005214 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	621a      	str	r2, [r3, #32]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40012c00 	.word	0x40012c00
 8005240:	40013400 	.word	0x40013400
 8005244:	40014000 	.word	0x40014000
 8005248:	40014400 	.word	0x40014400
 800524c:	40014800 	.word	0x40014800

08005250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800527e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0303 	bic.w	r3, r3, #3
 800528a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800529c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a27      	ldr	r2, [pc, #156]	; (800534c <TIM_OC3_SetConfig+0xfc>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d003      	beq.n	80052ba <TIM_OC3_SetConfig+0x6a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a26      	ldr	r2, [pc, #152]	; (8005350 <TIM_OC3_SetConfig+0x100>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d10d      	bne.n	80052d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a1c      	ldr	r2, [pc, #112]	; (800534c <TIM_OC3_SetConfig+0xfc>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00f      	beq.n	80052fe <TIM_OC3_SetConfig+0xae>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a1b      	ldr	r2, [pc, #108]	; (8005350 <TIM_OC3_SetConfig+0x100>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00b      	beq.n	80052fe <TIM_OC3_SetConfig+0xae>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a1a      	ldr	r2, [pc, #104]	; (8005354 <TIM_OC3_SetConfig+0x104>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <TIM_OC3_SetConfig+0xae>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a19      	ldr	r2, [pc, #100]	; (8005358 <TIM_OC3_SetConfig+0x108>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d003      	beq.n	80052fe <TIM_OC3_SetConfig+0xae>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a18      	ldr	r2, [pc, #96]	; (800535c <TIM_OC3_SetConfig+0x10c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d113      	bne.n	8005326 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800530c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	621a      	str	r2, [r3, #32]
}
 8005340:	bf00      	nop
 8005342:	371c      	adds	r7, #28
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	40012c00 	.word	0x40012c00
 8005350:	40013400 	.word	0x40013400
 8005354:	40014000 	.word	0x40014000
 8005358:	40014400 	.word	0x40014400
 800535c:	40014800 	.word	0x40014800

08005360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800538e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	031b      	lsls	r3, r3, #12
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a18      	ldr	r2, [pc, #96]	; (8005420 <TIM_OC4_SetConfig+0xc0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00f      	beq.n	80053e4 <TIM_OC4_SetConfig+0x84>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a17      	ldr	r2, [pc, #92]	; (8005424 <TIM_OC4_SetConfig+0xc4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00b      	beq.n	80053e4 <TIM_OC4_SetConfig+0x84>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a16      	ldr	r2, [pc, #88]	; (8005428 <TIM_OC4_SetConfig+0xc8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d007      	beq.n	80053e4 <TIM_OC4_SetConfig+0x84>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a15      	ldr	r2, [pc, #84]	; (800542c <TIM_OC4_SetConfig+0xcc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_OC4_SetConfig+0x84>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a14      	ldr	r2, [pc, #80]	; (8005430 <TIM_OC4_SetConfig+0xd0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d109      	bne.n	80053f8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	019b      	lsls	r3, r3, #6
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40012c00 	.word	0x40012c00
 8005424:	40013400 	.word	0x40013400
 8005428:	40014000 	.word	0x40014000
 800542c:	40014400 	.word	0x40014400
 8005430:	40014800 	.word	0x40014800

08005434 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005478:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	041b      	lsls	r3, r3, #16
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a17      	ldr	r2, [pc, #92]	; (80054e8 <TIM_OC5_SetConfig+0xb4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00f      	beq.n	80054ae <TIM_OC5_SetConfig+0x7a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a16      	ldr	r2, [pc, #88]	; (80054ec <TIM_OC5_SetConfig+0xb8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00b      	beq.n	80054ae <TIM_OC5_SetConfig+0x7a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a15      	ldr	r2, [pc, #84]	; (80054f0 <TIM_OC5_SetConfig+0xbc>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d007      	beq.n	80054ae <TIM_OC5_SetConfig+0x7a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a14      	ldr	r2, [pc, #80]	; (80054f4 <TIM_OC5_SetConfig+0xc0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d003      	beq.n	80054ae <TIM_OC5_SetConfig+0x7a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a13      	ldr	r2, [pc, #76]	; (80054f8 <TIM_OC5_SetConfig+0xc4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d109      	bne.n	80054c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	621a      	str	r2, [r3, #32]
}
 80054dc:	bf00      	nop
 80054de:	371c      	adds	r7, #28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	40012c00 	.word	0x40012c00
 80054ec:	40013400 	.word	0x40013400
 80054f0:	40014000 	.word	0x40014000
 80054f4:	40014400 	.word	0x40014400
 80054f8:	40014800 	.word	0x40014800

080054fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800552a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	021b      	lsls	r3, r3, #8
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	051b      	lsls	r3, r3, #20
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a18      	ldr	r2, [pc, #96]	; (80055b4 <TIM_OC6_SetConfig+0xb8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00f      	beq.n	8005578 <TIM_OC6_SetConfig+0x7c>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a17      	ldr	r2, [pc, #92]	; (80055b8 <TIM_OC6_SetConfig+0xbc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00b      	beq.n	8005578 <TIM_OC6_SetConfig+0x7c>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a16      	ldr	r2, [pc, #88]	; (80055bc <TIM_OC6_SetConfig+0xc0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d007      	beq.n	8005578 <TIM_OC6_SetConfig+0x7c>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a15      	ldr	r2, [pc, #84]	; (80055c0 <TIM_OC6_SetConfig+0xc4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d003      	beq.n	8005578 <TIM_OC6_SetConfig+0x7c>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a14      	ldr	r2, [pc, #80]	; (80055c4 <TIM_OC6_SetConfig+0xc8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d109      	bne.n	800558c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800557e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	029b      	lsls	r3, r3, #10
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	621a      	str	r2, [r3, #32]
}
 80055a6:	bf00      	nop
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40012c00 	.word	0x40012c00
 80055b8:	40013400 	.word	0x40013400
 80055bc:	40014000 	.word	0x40014000
 80055c0:	40014400 	.word	0x40014400
 80055c4:	40014800 	.word	0x40014800

080055c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f023 0201 	bic.w	r2, r3, #1
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f023 030a 	bic.w	r3, r3, #10
 8005604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	621a      	str	r2, [r3, #32]
}
 800561a:	bf00      	nop
 800561c:	371c      	adds	r7, #28
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005626:	b480      	push	{r7}
 8005628:	b087      	sub	sp, #28
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	f023 0210 	bic.w	r2, r3, #16
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005650:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	031b      	lsls	r3, r3, #12
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005662:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	621a      	str	r2, [r3, #32]
}
 800567a:	bf00      	nop
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005686:	b480      	push	{r7}
 8005688:	b085      	sub	sp, #20
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f043 0307 	orr.w	r3, r3, #7
 80056a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	609a      	str	r2, [r3, #8]
}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	021a      	lsls	r2, r3, #8
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	431a      	orrs	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	609a      	str	r2, [r3, #8]
}
 80056f0:	bf00      	nop
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 031f 	and.w	r3, r3, #31
 800570e:	2201      	movs	r2, #1
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a1a      	ldr	r2, [r3, #32]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	43db      	mvns	r3, r3
 800571e:	401a      	ands	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a1a      	ldr	r2, [r3, #32]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	fa01 f303 	lsl.w	r3, r1, r3
 8005734:	431a      	orrs	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
	...

08005748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800575c:	2302      	movs	r3, #2
 800575e:	e068      	b.n	8005832 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a2e      	ldr	r2, [pc, #184]	; (8005840 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d004      	beq.n	8005794 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a2d      	ldr	r2, [pc, #180]	; (8005844 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d108      	bne.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800579a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1e      	ldr	r2, [pc, #120]	; (8005840 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d01d      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d2:	d018      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1b      	ldr	r2, [pc, #108]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d013      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a1a      	ldr	r2, [pc, #104]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00e      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a18      	ldr	r2, [pc, #96]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d009      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a13      	ldr	r2, [pc, #76]	; (8005844 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d004      	beq.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a14      	ldr	r2, [pc, #80]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d10c      	bne.n	8005820 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800580c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	4313      	orrs	r3, r2
 8005816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40012c00 	.word	0x40012c00
 8005844:	40013400 	.word	0x40013400
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800
 8005850:	40000c00 	.word	0x40000c00
 8005854:	40014000 	.word	0x40014000

08005858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e040      	b.n	8005928 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fc f812 	bl	80018e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2224      	movs	r2, #36	; 0x24
 80058c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0201 	bic.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f8c0 	bl	8005a58 <UART_SetConfig>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e022      	b.n	8005928 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fb3e 	bl	8005f6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800590e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0201 	orr.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fbc5 	bl	80060b0 <UART_CheckIdleState>
 8005926:	4603      	mov	r3, r0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08a      	sub	sp, #40	; 0x28
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	4613      	mov	r3, r2
 800593e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005944:	2b20      	cmp	r3, #32
 8005946:	f040 8082 	bne.w	8005a4e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <HAL_UART_Transmit+0x26>
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e07a      	b.n	8005a50 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_UART_Transmit+0x38>
 8005964:	2302      	movs	r3, #2
 8005966:	e073      	b.n	8005a50 <HAL_UART_Transmit+0x120>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2221      	movs	r2, #33	; 0x21
 800597c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800597e:	f7fc f9b7 	bl	8001cf0 <HAL_GetTick>
 8005982:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	88fa      	ldrh	r2, [r7, #6]
 8005988:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	88fa      	ldrh	r2, [r7, #6]
 8005990:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599c:	d108      	bne.n	80059b0 <HAL_UART_Transmit+0x80>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d104      	bne.n	80059b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80059a6:	2300      	movs	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	61bb      	str	r3, [r7, #24]
 80059ae:	e003      	b.n	80059b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059b4:	2300      	movs	r3, #0
 80059b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80059c0:	e02d      	b.n	8005a1e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2200      	movs	r2, #0
 80059ca:	2180      	movs	r1, #128	; 0x80
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 fbb8 	bl	8006142 <UART_WaitOnFlagUntilTimeout>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e039      	b.n	8005a50 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10b      	bne.n	80059fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	881a      	ldrh	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059ee:	b292      	uxth	r2, r2
 80059f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	3302      	adds	r3, #2
 80059f6:	61bb      	str	r3, [r7, #24]
 80059f8:	e008      	b.n	8005a0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	781a      	ldrb	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	b292      	uxth	r2, r2
 8005a04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1cb      	bne.n	80059c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2200      	movs	r2, #0
 8005a32:	2140      	movs	r1, #64	; 0x40
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 fb84 	bl	8006142 <UART_WaitOnFlagUntilTimeout>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e005      	b.n	8005a50 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2220      	movs	r2, #32
 8005a48:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e000      	b.n	8005a50 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005a4e:	2302      	movs	r3, #2
  }
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3720      	adds	r7, #32
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a58:	b5b0      	push	{r4, r5, r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	4bad      	ldr	r3, [pc, #692]	; (8005d38 <UART_SetConfig+0x2e0>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6812      	ldr	r2, [r2, #0]
 8005a8a:	69f9      	ldr	r1, [r7, #28]
 8005a8c:	430b      	orrs	r3, r1
 8005a8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68da      	ldr	r2, [r3, #12]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4aa2      	ldr	r2, [pc, #648]	; (8005d3c <UART_SetConfig+0x2e4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d004      	beq.n	8005ac0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a99      	ldr	r2, [pc, #612]	; (8005d40 <UART_SetConfig+0x2e8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d121      	bne.n	8005b22 <UART_SetConfig+0xca>
 8005ade:	4b99      	ldr	r3, [pc, #612]	; (8005d44 <UART_SetConfig+0x2ec>)
 8005ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae4:	f003 0303 	and.w	r3, r3, #3
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d817      	bhi.n	8005b1c <UART_SetConfig+0xc4>
 8005aec:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <UART_SetConfig+0x9c>)
 8005aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af2:	bf00      	nop
 8005af4:	08005b05 	.word	0x08005b05
 8005af8:	08005b11 	.word	0x08005b11
 8005afc:	08005b0b 	.word	0x08005b0b
 8005b00:	08005b17 	.word	0x08005b17
 8005b04:	2301      	movs	r3, #1
 8005b06:	76fb      	strb	r3, [r7, #27]
 8005b08:	e0e7      	b.n	8005cda <UART_SetConfig+0x282>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	76fb      	strb	r3, [r7, #27]
 8005b0e:	e0e4      	b.n	8005cda <UART_SetConfig+0x282>
 8005b10:	2304      	movs	r3, #4
 8005b12:	76fb      	strb	r3, [r7, #27]
 8005b14:	e0e1      	b.n	8005cda <UART_SetConfig+0x282>
 8005b16:	2308      	movs	r3, #8
 8005b18:	76fb      	strb	r3, [r7, #27]
 8005b1a:	e0de      	b.n	8005cda <UART_SetConfig+0x282>
 8005b1c:	2310      	movs	r3, #16
 8005b1e:	76fb      	strb	r3, [r7, #27]
 8005b20:	e0db      	b.n	8005cda <UART_SetConfig+0x282>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a88      	ldr	r2, [pc, #544]	; (8005d48 <UART_SetConfig+0x2f0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d132      	bne.n	8005b92 <UART_SetConfig+0x13a>
 8005b2c:	4b85      	ldr	r3, [pc, #532]	; (8005d44 <UART_SetConfig+0x2ec>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b32:	f003 030c 	and.w	r3, r3, #12
 8005b36:	2b0c      	cmp	r3, #12
 8005b38:	d828      	bhi.n	8005b8c <UART_SetConfig+0x134>
 8005b3a:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <UART_SetConfig+0xe8>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b75 	.word	0x08005b75
 8005b44:	08005b8d 	.word	0x08005b8d
 8005b48:	08005b8d 	.word	0x08005b8d
 8005b4c:	08005b8d 	.word	0x08005b8d
 8005b50:	08005b81 	.word	0x08005b81
 8005b54:	08005b8d 	.word	0x08005b8d
 8005b58:	08005b8d 	.word	0x08005b8d
 8005b5c:	08005b8d 	.word	0x08005b8d
 8005b60:	08005b7b 	.word	0x08005b7b
 8005b64:	08005b8d 	.word	0x08005b8d
 8005b68:	08005b8d 	.word	0x08005b8d
 8005b6c:	08005b8d 	.word	0x08005b8d
 8005b70:	08005b87 	.word	0x08005b87
 8005b74:	2300      	movs	r3, #0
 8005b76:	76fb      	strb	r3, [r7, #27]
 8005b78:	e0af      	b.n	8005cda <UART_SetConfig+0x282>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	76fb      	strb	r3, [r7, #27]
 8005b7e:	e0ac      	b.n	8005cda <UART_SetConfig+0x282>
 8005b80:	2304      	movs	r3, #4
 8005b82:	76fb      	strb	r3, [r7, #27]
 8005b84:	e0a9      	b.n	8005cda <UART_SetConfig+0x282>
 8005b86:	2308      	movs	r3, #8
 8005b88:	76fb      	strb	r3, [r7, #27]
 8005b8a:	e0a6      	b.n	8005cda <UART_SetConfig+0x282>
 8005b8c:	2310      	movs	r3, #16
 8005b8e:	76fb      	strb	r3, [r7, #27]
 8005b90:	e0a3      	b.n	8005cda <UART_SetConfig+0x282>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a6d      	ldr	r2, [pc, #436]	; (8005d4c <UART_SetConfig+0x2f4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d120      	bne.n	8005bde <UART_SetConfig+0x186>
 8005b9c:	4b69      	ldr	r3, [pc, #420]	; (8005d44 <UART_SetConfig+0x2ec>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ba6:	2b30      	cmp	r3, #48	; 0x30
 8005ba8:	d013      	beq.n	8005bd2 <UART_SetConfig+0x17a>
 8005baa:	2b30      	cmp	r3, #48	; 0x30
 8005bac:	d814      	bhi.n	8005bd8 <UART_SetConfig+0x180>
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d009      	beq.n	8005bc6 <UART_SetConfig+0x16e>
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d810      	bhi.n	8005bd8 <UART_SetConfig+0x180>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <UART_SetConfig+0x168>
 8005bba:	2b10      	cmp	r3, #16
 8005bbc:	d006      	beq.n	8005bcc <UART_SetConfig+0x174>
 8005bbe:	e00b      	b.n	8005bd8 <UART_SetConfig+0x180>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	76fb      	strb	r3, [r7, #27]
 8005bc4:	e089      	b.n	8005cda <UART_SetConfig+0x282>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	76fb      	strb	r3, [r7, #27]
 8005bca:	e086      	b.n	8005cda <UART_SetConfig+0x282>
 8005bcc:	2304      	movs	r3, #4
 8005bce:	76fb      	strb	r3, [r7, #27]
 8005bd0:	e083      	b.n	8005cda <UART_SetConfig+0x282>
 8005bd2:	2308      	movs	r3, #8
 8005bd4:	76fb      	strb	r3, [r7, #27]
 8005bd6:	e080      	b.n	8005cda <UART_SetConfig+0x282>
 8005bd8:	2310      	movs	r3, #16
 8005bda:	76fb      	strb	r3, [r7, #27]
 8005bdc:	e07d      	b.n	8005cda <UART_SetConfig+0x282>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a5b      	ldr	r2, [pc, #364]	; (8005d50 <UART_SetConfig+0x2f8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d120      	bne.n	8005c2a <UART_SetConfig+0x1d2>
 8005be8:	4b56      	ldr	r3, [pc, #344]	; (8005d44 <UART_SetConfig+0x2ec>)
 8005bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005bf2:	2bc0      	cmp	r3, #192	; 0xc0
 8005bf4:	d013      	beq.n	8005c1e <UART_SetConfig+0x1c6>
 8005bf6:	2bc0      	cmp	r3, #192	; 0xc0
 8005bf8:	d814      	bhi.n	8005c24 <UART_SetConfig+0x1cc>
 8005bfa:	2b80      	cmp	r3, #128	; 0x80
 8005bfc:	d009      	beq.n	8005c12 <UART_SetConfig+0x1ba>
 8005bfe:	2b80      	cmp	r3, #128	; 0x80
 8005c00:	d810      	bhi.n	8005c24 <UART_SetConfig+0x1cc>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <UART_SetConfig+0x1b4>
 8005c06:	2b40      	cmp	r3, #64	; 0x40
 8005c08:	d006      	beq.n	8005c18 <UART_SetConfig+0x1c0>
 8005c0a:	e00b      	b.n	8005c24 <UART_SetConfig+0x1cc>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	76fb      	strb	r3, [r7, #27]
 8005c10:	e063      	b.n	8005cda <UART_SetConfig+0x282>
 8005c12:	2302      	movs	r3, #2
 8005c14:	76fb      	strb	r3, [r7, #27]
 8005c16:	e060      	b.n	8005cda <UART_SetConfig+0x282>
 8005c18:	2304      	movs	r3, #4
 8005c1a:	76fb      	strb	r3, [r7, #27]
 8005c1c:	e05d      	b.n	8005cda <UART_SetConfig+0x282>
 8005c1e:	2308      	movs	r3, #8
 8005c20:	76fb      	strb	r3, [r7, #27]
 8005c22:	e05a      	b.n	8005cda <UART_SetConfig+0x282>
 8005c24:	2310      	movs	r3, #16
 8005c26:	76fb      	strb	r3, [r7, #27]
 8005c28:	e057      	b.n	8005cda <UART_SetConfig+0x282>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a49      	ldr	r2, [pc, #292]	; (8005d54 <UART_SetConfig+0x2fc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d125      	bne.n	8005c80 <UART_SetConfig+0x228>
 8005c34:	4b43      	ldr	r3, [pc, #268]	; (8005d44 <UART_SetConfig+0x2ec>)
 8005c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c42:	d017      	beq.n	8005c74 <UART_SetConfig+0x21c>
 8005c44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c48:	d817      	bhi.n	8005c7a <UART_SetConfig+0x222>
 8005c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c4e:	d00b      	beq.n	8005c68 <UART_SetConfig+0x210>
 8005c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c54:	d811      	bhi.n	8005c7a <UART_SetConfig+0x222>
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <UART_SetConfig+0x20a>
 8005c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c5e:	d006      	beq.n	8005c6e <UART_SetConfig+0x216>
 8005c60:	e00b      	b.n	8005c7a <UART_SetConfig+0x222>
 8005c62:	2300      	movs	r3, #0
 8005c64:	76fb      	strb	r3, [r7, #27]
 8005c66:	e038      	b.n	8005cda <UART_SetConfig+0x282>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	76fb      	strb	r3, [r7, #27]
 8005c6c:	e035      	b.n	8005cda <UART_SetConfig+0x282>
 8005c6e:	2304      	movs	r3, #4
 8005c70:	76fb      	strb	r3, [r7, #27]
 8005c72:	e032      	b.n	8005cda <UART_SetConfig+0x282>
 8005c74:	2308      	movs	r3, #8
 8005c76:	76fb      	strb	r3, [r7, #27]
 8005c78:	e02f      	b.n	8005cda <UART_SetConfig+0x282>
 8005c7a:	2310      	movs	r3, #16
 8005c7c:	76fb      	strb	r3, [r7, #27]
 8005c7e:	e02c      	b.n	8005cda <UART_SetConfig+0x282>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a2d      	ldr	r2, [pc, #180]	; (8005d3c <UART_SetConfig+0x2e4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d125      	bne.n	8005cd6 <UART_SetConfig+0x27e>
 8005c8a:	4b2e      	ldr	r3, [pc, #184]	; (8005d44 <UART_SetConfig+0x2ec>)
 8005c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c98:	d017      	beq.n	8005cca <UART_SetConfig+0x272>
 8005c9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c9e:	d817      	bhi.n	8005cd0 <UART_SetConfig+0x278>
 8005ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca4:	d00b      	beq.n	8005cbe <UART_SetConfig+0x266>
 8005ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005caa:	d811      	bhi.n	8005cd0 <UART_SetConfig+0x278>
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <UART_SetConfig+0x260>
 8005cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb4:	d006      	beq.n	8005cc4 <UART_SetConfig+0x26c>
 8005cb6:	e00b      	b.n	8005cd0 <UART_SetConfig+0x278>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	76fb      	strb	r3, [r7, #27]
 8005cbc:	e00d      	b.n	8005cda <UART_SetConfig+0x282>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	76fb      	strb	r3, [r7, #27]
 8005cc2:	e00a      	b.n	8005cda <UART_SetConfig+0x282>
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	76fb      	strb	r3, [r7, #27]
 8005cc8:	e007      	b.n	8005cda <UART_SetConfig+0x282>
 8005cca:	2308      	movs	r3, #8
 8005ccc:	76fb      	strb	r3, [r7, #27]
 8005cce:	e004      	b.n	8005cda <UART_SetConfig+0x282>
 8005cd0:	2310      	movs	r3, #16
 8005cd2:	76fb      	strb	r3, [r7, #27]
 8005cd4:	e001      	b.n	8005cda <UART_SetConfig+0x282>
 8005cd6:	2310      	movs	r3, #16
 8005cd8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a17      	ldr	r2, [pc, #92]	; (8005d3c <UART_SetConfig+0x2e4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	f040 8087 	bne.w	8005df4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ce6:	7efb      	ldrb	r3, [r7, #27]
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d837      	bhi.n	8005d5c <UART_SetConfig+0x304>
 8005cec:	a201      	add	r2, pc, #4	; (adr r2, 8005cf4 <UART_SetConfig+0x29c>)
 8005cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf2:	bf00      	nop
 8005cf4:	08005d19 	.word	0x08005d19
 8005cf8:	08005d5d 	.word	0x08005d5d
 8005cfc:	08005d21 	.word	0x08005d21
 8005d00:	08005d5d 	.word	0x08005d5d
 8005d04:	08005d27 	.word	0x08005d27
 8005d08:	08005d5d 	.word	0x08005d5d
 8005d0c:	08005d5d 	.word	0x08005d5d
 8005d10:	08005d5d 	.word	0x08005d5d
 8005d14:	08005d2f 	.word	0x08005d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d18:	f7fd f8b2 	bl	8002e80 <HAL_RCC_GetPCLK1Freq>
 8005d1c:	6178      	str	r0, [r7, #20]
        break;
 8005d1e:	e022      	b.n	8005d66 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d20:	4b0d      	ldr	r3, [pc, #52]	; (8005d58 <UART_SetConfig+0x300>)
 8005d22:	617b      	str	r3, [r7, #20]
        break;
 8005d24:	e01f      	b.n	8005d66 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d26:	f7fd f813 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8005d2a:	6178      	str	r0, [r7, #20]
        break;
 8005d2c:	e01b      	b.n	8005d66 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d32:	617b      	str	r3, [r7, #20]
        break;
 8005d34:	e017      	b.n	8005d66 <UART_SetConfig+0x30e>
 8005d36:	bf00      	nop
 8005d38:	efff69f3 	.word	0xefff69f3
 8005d3c:	40008000 	.word	0x40008000
 8005d40:	40013800 	.word	0x40013800
 8005d44:	40021000 	.word	0x40021000
 8005d48:	40004400 	.word	0x40004400
 8005d4c:	40004800 	.word	0x40004800
 8005d50:	40004c00 	.word	0x40004c00
 8005d54:	40005000 	.word	0x40005000
 8005d58:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	76bb      	strb	r3, [r7, #26]
        break;
 8005d64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 80f1 	beq.w	8005f50 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	4413      	add	r3, r2
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d305      	bcc.n	8005d8a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d902      	bls.n	8005d90 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	76bb      	strb	r3, [r7, #26]
 8005d8e:	e0df      	b.n	8005f50 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f04f 0100 	mov.w	r1, #0
 8005d98:	f04f 0200 	mov.w	r2, #0
 8005d9c:	f04f 0300 	mov.w	r3, #0
 8005da0:	020b      	lsls	r3, r1, #8
 8005da2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005da6:	0202      	lsls	r2, r0, #8
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	6849      	ldr	r1, [r1, #4]
 8005dac:	0849      	lsrs	r1, r1, #1
 8005dae:	4608      	mov	r0, r1
 8005db0:	f04f 0100 	mov.w	r1, #0
 8005db4:	1814      	adds	r4, r2, r0
 8005db6:	eb43 0501 	adc.w	r5, r3, r1
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f04f 0300 	mov.w	r3, #0
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	f7fa ff3e 	bl	8000c48 <__aeabi_uldivmod>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dda:	d308      	bcc.n	8005dee <UART_SetConfig+0x396>
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005de2:	d204      	bcs.n	8005dee <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	60da      	str	r2, [r3, #12]
 8005dec:	e0b0      	b.n	8005f50 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	76bb      	strb	r3, [r7, #26]
 8005df2:	e0ad      	b.n	8005f50 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dfc:	d15c      	bne.n	8005eb8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005dfe:	7efb      	ldrb	r3, [r7, #27]
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d828      	bhi.n	8005e56 <UART_SetConfig+0x3fe>
 8005e04:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <UART_SetConfig+0x3b4>)
 8005e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0a:	bf00      	nop
 8005e0c:	08005e31 	.word	0x08005e31
 8005e10:	08005e39 	.word	0x08005e39
 8005e14:	08005e41 	.word	0x08005e41
 8005e18:	08005e57 	.word	0x08005e57
 8005e1c:	08005e47 	.word	0x08005e47
 8005e20:	08005e57 	.word	0x08005e57
 8005e24:	08005e57 	.word	0x08005e57
 8005e28:	08005e57 	.word	0x08005e57
 8005e2c:	08005e4f 	.word	0x08005e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e30:	f7fd f826 	bl	8002e80 <HAL_RCC_GetPCLK1Freq>
 8005e34:	6178      	str	r0, [r7, #20]
        break;
 8005e36:	e013      	b.n	8005e60 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e38:	f7fd f838 	bl	8002eac <HAL_RCC_GetPCLK2Freq>
 8005e3c:	6178      	str	r0, [r7, #20]
        break;
 8005e3e:	e00f      	b.n	8005e60 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e40:	4b49      	ldr	r3, [pc, #292]	; (8005f68 <UART_SetConfig+0x510>)
 8005e42:	617b      	str	r3, [r7, #20]
        break;
 8005e44:	e00c      	b.n	8005e60 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e46:	f7fc ff83 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8005e4a:	6178      	str	r0, [r7, #20]
        break;
 8005e4c:	e008      	b.n	8005e60 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e52:	617b      	str	r3, [r7, #20]
        break;
 8005e54:	e004      	b.n	8005e60 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	76bb      	strb	r3, [r7, #26]
        break;
 8005e5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d074      	beq.n	8005f50 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	005a      	lsls	r2, r3, #1
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	085b      	lsrs	r3, r3, #1
 8005e70:	441a      	add	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b0f      	cmp	r3, #15
 8005e82:	d916      	bls.n	8005eb2 <UART_SetConfig+0x45a>
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e8a:	d212      	bcs.n	8005eb2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f023 030f 	bic.w	r3, r3, #15
 8005e94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	f003 0307 	and.w	r3, r3, #7
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	89fb      	ldrh	r3, [r7, #14]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	89fa      	ldrh	r2, [r7, #14]
 8005eae:	60da      	str	r2, [r3, #12]
 8005eb0:	e04e      	b.n	8005f50 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	76bb      	strb	r3, [r7, #26]
 8005eb6:	e04b      	b.n	8005f50 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005eb8:	7efb      	ldrb	r3, [r7, #27]
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d827      	bhi.n	8005f0e <UART_SetConfig+0x4b6>
 8005ebe:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <UART_SetConfig+0x46c>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005ee9 	.word	0x08005ee9
 8005ec8:	08005ef1 	.word	0x08005ef1
 8005ecc:	08005ef9 	.word	0x08005ef9
 8005ed0:	08005f0f 	.word	0x08005f0f
 8005ed4:	08005eff 	.word	0x08005eff
 8005ed8:	08005f0f 	.word	0x08005f0f
 8005edc:	08005f0f 	.word	0x08005f0f
 8005ee0:	08005f0f 	.word	0x08005f0f
 8005ee4:	08005f07 	.word	0x08005f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee8:	f7fc ffca 	bl	8002e80 <HAL_RCC_GetPCLK1Freq>
 8005eec:	6178      	str	r0, [r7, #20]
        break;
 8005eee:	e013      	b.n	8005f18 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef0:	f7fc ffdc 	bl	8002eac <HAL_RCC_GetPCLK2Freq>
 8005ef4:	6178      	str	r0, [r7, #20]
        break;
 8005ef6:	e00f      	b.n	8005f18 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef8:	4b1b      	ldr	r3, [pc, #108]	; (8005f68 <UART_SetConfig+0x510>)
 8005efa:	617b      	str	r3, [r7, #20]
        break;
 8005efc:	e00c      	b.n	8005f18 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005efe:	f7fc ff27 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8005f02:	6178      	str	r0, [r7, #20]
        break;
 8005f04:	e008      	b.n	8005f18 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f0a:	617b      	str	r3, [r7, #20]
        break;
 8005f0c:	e004      	b.n	8005f18 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	76bb      	strb	r3, [r7, #26]
        break;
 8005f16:	bf00      	nop
    }

    if (pclk != 0U)
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d018      	beq.n	8005f50 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	085a      	lsrs	r2, r3, #1
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	441a      	add	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	2b0f      	cmp	r3, #15
 8005f38:	d908      	bls.n	8005f4c <UART_SetConfig+0x4f4>
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f40:	d204      	bcs.n	8005f4c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	60da      	str	r2, [r3, #12]
 8005f4a:	e001      	b.n	8005f50 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f5c:	7ebb      	ldrb	r3, [r7, #26]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3720      	adds	r7, #32
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bdb0      	pop	{r4, r5, r7, pc}
 8005f66:	bf00      	nop
 8005f68:	00f42400 	.word	0x00f42400

08005f6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	f003 0310 	and.w	r3, r3, #16
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	f003 0320 	and.w	r3, r3, #32
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01a      	beq.n	8006082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800606a:	d10a      	bne.n	8006082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	605a      	str	r2, [r3, #4]
  }
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060c0:	f7fb fe16 	bl	8001cf0 <HAL_GetTick>
 80060c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d10e      	bne.n	80060f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f82d 	bl	8006142 <UART_WaitOnFlagUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e023      	b.n	800613a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d10e      	bne.n	800611e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f817 	bl	8006142 <UART_WaitOnFlagUntilTimeout>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e00d      	b.n	800613a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2220      	movs	r2, #32
 8006122:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	603b      	str	r3, [r7, #0]
 800614e:	4613      	mov	r3, r2
 8006150:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006152:	e05e      	b.n	8006212 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615a:	d05a      	beq.n	8006212 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800615c:	f7fb fdc8 	bl	8001cf0 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	429a      	cmp	r2, r3
 800616a:	d302      	bcc.n	8006172 <UART_WaitOnFlagUntilTimeout+0x30>
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d11b      	bne.n	80061aa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006180:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0201 	bic.w	r2, r2, #1
 8006190:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2220      	movs	r2, #32
 8006196:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2220      	movs	r2, #32
 800619c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e043      	b.n	8006232 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d02c      	beq.n	8006212 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c6:	d124      	bne.n	8006212 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061d0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0201 	bic.w	r2, r2, #1
 80061f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2220      	movs	r2, #32
 80061f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2220      	movs	r2, #32
 80061fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2220      	movs	r2, #32
 8006202:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e00f      	b.n	8006232 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4013      	ands	r3, r2
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	429a      	cmp	r2, r3
 8006220:	bf0c      	ite	eq
 8006222:	2301      	moveq	r3, #1
 8006224:	2300      	movne	r3, #0
 8006226:	b2db      	uxtb	r3, r3
 8006228:	461a      	mov	r2, r3
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	429a      	cmp	r2, r3
 800622e:	d091      	beq.n	8006154 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <__errno>:
 800623c:	4b01      	ldr	r3, [pc, #4]	; (8006244 <__errno+0x8>)
 800623e:	6818      	ldr	r0, [r3, #0]
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	2000000c 	.word	0x2000000c

08006248 <__libc_init_array>:
 8006248:	b570      	push	{r4, r5, r6, lr}
 800624a:	4d0d      	ldr	r5, [pc, #52]	; (8006280 <__libc_init_array+0x38>)
 800624c:	4c0d      	ldr	r4, [pc, #52]	; (8006284 <__libc_init_array+0x3c>)
 800624e:	1b64      	subs	r4, r4, r5
 8006250:	10a4      	asrs	r4, r4, #2
 8006252:	2600      	movs	r6, #0
 8006254:	42a6      	cmp	r6, r4
 8006256:	d109      	bne.n	800626c <__libc_init_array+0x24>
 8006258:	4d0b      	ldr	r5, [pc, #44]	; (8006288 <__libc_init_array+0x40>)
 800625a:	4c0c      	ldr	r4, [pc, #48]	; (800628c <__libc_init_array+0x44>)
 800625c:	f002 feb6 	bl	8008fcc <_init>
 8006260:	1b64      	subs	r4, r4, r5
 8006262:	10a4      	asrs	r4, r4, #2
 8006264:	2600      	movs	r6, #0
 8006266:	42a6      	cmp	r6, r4
 8006268:	d105      	bne.n	8006276 <__libc_init_array+0x2e>
 800626a:	bd70      	pop	{r4, r5, r6, pc}
 800626c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006270:	4798      	blx	r3
 8006272:	3601      	adds	r6, #1
 8006274:	e7ee      	b.n	8006254 <__libc_init_array+0xc>
 8006276:	f855 3b04 	ldr.w	r3, [r5], #4
 800627a:	4798      	blx	r3
 800627c:	3601      	adds	r6, #1
 800627e:	e7f2      	b.n	8006266 <__libc_init_array+0x1e>
 8006280:	080094b4 	.word	0x080094b4
 8006284:	080094b4 	.word	0x080094b4
 8006288:	080094b4 	.word	0x080094b4
 800628c:	080094b8 	.word	0x080094b8

08006290 <memset>:
 8006290:	4402      	add	r2, r0
 8006292:	4603      	mov	r3, r0
 8006294:	4293      	cmp	r3, r2
 8006296:	d100      	bne.n	800629a <memset+0xa>
 8006298:	4770      	bx	lr
 800629a:	f803 1b01 	strb.w	r1, [r3], #1
 800629e:	e7f9      	b.n	8006294 <memset+0x4>

080062a0 <__cvt>:
 80062a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a4:	ec55 4b10 	vmov	r4, r5, d0
 80062a8:	2d00      	cmp	r5, #0
 80062aa:	460e      	mov	r6, r1
 80062ac:	4619      	mov	r1, r3
 80062ae:	462b      	mov	r3, r5
 80062b0:	bfbb      	ittet	lt
 80062b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062b6:	461d      	movlt	r5, r3
 80062b8:	2300      	movge	r3, #0
 80062ba:	232d      	movlt	r3, #45	; 0x2d
 80062bc:	700b      	strb	r3, [r1, #0]
 80062be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062c4:	4691      	mov	r9, r2
 80062c6:	f023 0820 	bic.w	r8, r3, #32
 80062ca:	bfbc      	itt	lt
 80062cc:	4622      	movlt	r2, r4
 80062ce:	4614      	movlt	r4, r2
 80062d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062d4:	d005      	beq.n	80062e2 <__cvt+0x42>
 80062d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062da:	d100      	bne.n	80062de <__cvt+0x3e>
 80062dc:	3601      	adds	r6, #1
 80062de:	2102      	movs	r1, #2
 80062e0:	e000      	b.n	80062e4 <__cvt+0x44>
 80062e2:	2103      	movs	r1, #3
 80062e4:	ab03      	add	r3, sp, #12
 80062e6:	9301      	str	r3, [sp, #4]
 80062e8:	ab02      	add	r3, sp, #8
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	ec45 4b10 	vmov	d0, r4, r5
 80062f0:	4653      	mov	r3, sl
 80062f2:	4632      	mov	r2, r6
 80062f4:	f000 fcec 	bl	8006cd0 <_dtoa_r>
 80062f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062fc:	4607      	mov	r7, r0
 80062fe:	d102      	bne.n	8006306 <__cvt+0x66>
 8006300:	f019 0f01 	tst.w	r9, #1
 8006304:	d022      	beq.n	800634c <__cvt+0xac>
 8006306:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800630a:	eb07 0906 	add.w	r9, r7, r6
 800630e:	d110      	bne.n	8006332 <__cvt+0x92>
 8006310:	783b      	ldrb	r3, [r7, #0]
 8006312:	2b30      	cmp	r3, #48	; 0x30
 8006314:	d10a      	bne.n	800632c <__cvt+0x8c>
 8006316:	2200      	movs	r2, #0
 8006318:	2300      	movs	r3, #0
 800631a:	4620      	mov	r0, r4
 800631c:	4629      	mov	r1, r5
 800631e:	f7fa fbd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006322:	b918      	cbnz	r0, 800632c <__cvt+0x8c>
 8006324:	f1c6 0601 	rsb	r6, r6, #1
 8006328:	f8ca 6000 	str.w	r6, [sl]
 800632c:	f8da 3000 	ldr.w	r3, [sl]
 8006330:	4499      	add	r9, r3
 8006332:	2200      	movs	r2, #0
 8006334:	2300      	movs	r3, #0
 8006336:	4620      	mov	r0, r4
 8006338:	4629      	mov	r1, r5
 800633a:	f7fa fbc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800633e:	b108      	cbz	r0, 8006344 <__cvt+0xa4>
 8006340:	f8cd 900c 	str.w	r9, [sp, #12]
 8006344:	2230      	movs	r2, #48	; 0x30
 8006346:	9b03      	ldr	r3, [sp, #12]
 8006348:	454b      	cmp	r3, r9
 800634a:	d307      	bcc.n	800635c <__cvt+0xbc>
 800634c:	9b03      	ldr	r3, [sp, #12]
 800634e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006350:	1bdb      	subs	r3, r3, r7
 8006352:	4638      	mov	r0, r7
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	b004      	add	sp, #16
 8006358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800635c:	1c59      	adds	r1, r3, #1
 800635e:	9103      	str	r1, [sp, #12]
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	e7f0      	b.n	8006346 <__cvt+0xa6>

08006364 <__exponent>:
 8006364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006366:	4603      	mov	r3, r0
 8006368:	2900      	cmp	r1, #0
 800636a:	bfb8      	it	lt
 800636c:	4249      	neglt	r1, r1
 800636e:	f803 2b02 	strb.w	r2, [r3], #2
 8006372:	bfb4      	ite	lt
 8006374:	222d      	movlt	r2, #45	; 0x2d
 8006376:	222b      	movge	r2, #43	; 0x2b
 8006378:	2909      	cmp	r1, #9
 800637a:	7042      	strb	r2, [r0, #1]
 800637c:	dd2a      	ble.n	80063d4 <__exponent+0x70>
 800637e:	f10d 0407 	add.w	r4, sp, #7
 8006382:	46a4      	mov	ip, r4
 8006384:	270a      	movs	r7, #10
 8006386:	46a6      	mov	lr, r4
 8006388:	460a      	mov	r2, r1
 800638a:	fb91 f6f7 	sdiv	r6, r1, r7
 800638e:	fb07 1516 	mls	r5, r7, r6, r1
 8006392:	3530      	adds	r5, #48	; 0x30
 8006394:	2a63      	cmp	r2, #99	; 0x63
 8006396:	f104 34ff 	add.w	r4, r4, #4294967295
 800639a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800639e:	4631      	mov	r1, r6
 80063a0:	dcf1      	bgt.n	8006386 <__exponent+0x22>
 80063a2:	3130      	adds	r1, #48	; 0x30
 80063a4:	f1ae 0502 	sub.w	r5, lr, #2
 80063a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80063ac:	1c44      	adds	r4, r0, #1
 80063ae:	4629      	mov	r1, r5
 80063b0:	4561      	cmp	r1, ip
 80063b2:	d30a      	bcc.n	80063ca <__exponent+0x66>
 80063b4:	f10d 0209 	add.w	r2, sp, #9
 80063b8:	eba2 020e 	sub.w	r2, r2, lr
 80063bc:	4565      	cmp	r5, ip
 80063be:	bf88      	it	hi
 80063c0:	2200      	movhi	r2, #0
 80063c2:	4413      	add	r3, r2
 80063c4:	1a18      	subs	r0, r3, r0
 80063c6:	b003      	add	sp, #12
 80063c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063d2:	e7ed      	b.n	80063b0 <__exponent+0x4c>
 80063d4:	2330      	movs	r3, #48	; 0x30
 80063d6:	3130      	adds	r1, #48	; 0x30
 80063d8:	7083      	strb	r3, [r0, #2]
 80063da:	70c1      	strb	r1, [r0, #3]
 80063dc:	1d03      	adds	r3, r0, #4
 80063de:	e7f1      	b.n	80063c4 <__exponent+0x60>

080063e0 <_printf_float>:
 80063e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e4:	ed2d 8b02 	vpush	{d8}
 80063e8:	b08d      	sub	sp, #52	; 0x34
 80063ea:	460c      	mov	r4, r1
 80063ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80063f0:	4616      	mov	r6, r2
 80063f2:	461f      	mov	r7, r3
 80063f4:	4605      	mov	r5, r0
 80063f6:	f001 fa57 	bl	80078a8 <_localeconv_r>
 80063fa:	f8d0 a000 	ldr.w	sl, [r0]
 80063fe:	4650      	mov	r0, sl
 8006400:	f7f9 fee6 	bl	80001d0 <strlen>
 8006404:	2300      	movs	r3, #0
 8006406:	930a      	str	r3, [sp, #40]	; 0x28
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	9305      	str	r3, [sp, #20]
 800640c:	f8d8 3000 	ldr.w	r3, [r8]
 8006410:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006414:	3307      	adds	r3, #7
 8006416:	f023 0307 	bic.w	r3, r3, #7
 800641a:	f103 0208 	add.w	r2, r3, #8
 800641e:	f8c8 2000 	str.w	r2, [r8]
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800642a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800642e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006432:	9307      	str	r3, [sp, #28]
 8006434:	f8cd 8018 	str.w	r8, [sp, #24]
 8006438:	ee08 0a10 	vmov	s16, r0
 800643c:	4b9f      	ldr	r3, [pc, #636]	; (80066bc <_printf_float+0x2dc>)
 800643e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006442:	f04f 32ff 	mov.w	r2, #4294967295
 8006446:	f7fa fb71 	bl	8000b2c <__aeabi_dcmpun>
 800644a:	bb88      	cbnz	r0, 80064b0 <_printf_float+0xd0>
 800644c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006450:	4b9a      	ldr	r3, [pc, #616]	; (80066bc <_printf_float+0x2dc>)
 8006452:	f04f 32ff 	mov.w	r2, #4294967295
 8006456:	f7fa fb4b 	bl	8000af0 <__aeabi_dcmple>
 800645a:	bb48      	cbnz	r0, 80064b0 <_printf_float+0xd0>
 800645c:	2200      	movs	r2, #0
 800645e:	2300      	movs	r3, #0
 8006460:	4640      	mov	r0, r8
 8006462:	4649      	mov	r1, r9
 8006464:	f7fa fb3a 	bl	8000adc <__aeabi_dcmplt>
 8006468:	b110      	cbz	r0, 8006470 <_printf_float+0x90>
 800646a:	232d      	movs	r3, #45	; 0x2d
 800646c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006470:	4b93      	ldr	r3, [pc, #588]	; (80066c0 <_printf_float+0x2e0>)
 8006472:	4894      	ldr	r0, [pc, #592]	; (80066c4 <_printf_float+0x2e4>)
 8006474:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006478:	bf94      	ite	ls
 800647a:	4698      	movls	r8, r3
 800647c:	4680      	movhi	r8, r0
 800647e:	2303      	movs	r3, #3
 8006480:	6123      	str	r3, [r4, #16]
 8006482:	9b05      	ldr	r3, [sp, #20]
 8006484:	f023 0204 	bic.w	r2, r3, #4
 8006488:	6022      	str	r2, [r4, #0]
 800648a:	f04f 0900 	mov.w	r9, #0
 800648e:	9700      	str	r7, [sp, #0]
 8006490:	4633      	mov	r3, r6
 8006492:	aa0b      	add	r2, sp, #44	; 0x2c
 8006494:	4621      	mov	r1, r4
 8006496:	4628      	mov	r0, r5
 8006498:	f000 f9d8 	bl	800684c <_printf_common>
 800649c:	3001      	adds	r0, #1
 800649e:	f040 8090 	bne.w	80065c2 <_printf_float+0x1e2>
 80064a2:	f04f 30ff 	mov.w	r0, #4294967295
 80064a6:	b00d      	add	sp, #52	; 0x34
 80064a8:	ecbd 8b02 	vpop	{d8}
 80064ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b0:	4642      	mov	r2, r8
 80064b2:	464b      	mov	r3, r9
 80064b4:	4640      	mov	r0, r8
 80064b6:	4649      	mov	r1, r9
 80064b8:	f7fa fb38 	bl	8000b2c <__aeabi_dcmpun>
 80064bc:	b140      	cbz	r0, 80064d0 <_printf_float+0xf0>
 80064be:	464b      	mov	r3, r9
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	bfbc      	itt	lt
 80064c4:	232d      	movlt	r3, #45	; 0x2d
 80064c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064ca:	487f      	ldr	r0, [pc, #508]	; (80066c8 <_printf_float+0x2e8>)
 80064cc:	4b7f      	ldr	r3, [pc, #508]	; (80066cc <_printf_float+0x2ec>)
 80064ce:	e7d1      	b.n	8006474 <_printf_float+0x94>
 80064d0:	6863      	ldr	r3, [r4, #4]
 80064d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80064d6:	9206      	str	r2, [sp, #24]
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	d13f      	bne.n	800655c <_printf_float+0x17c>
 80064dc:	2306      	movs	r3, #6
 80064de:	6063      	str	r3, [r4, #4]
 80064e0:	9b05      	ldr	r3, [sp, #20]
 80064e2:	6861      	ldr	r1, [r4, #4]
 80064e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80064e8:	2300      	movs	r3, #0
 80064ea:	9303      	str	r3, [sp, #12]
 80064ec:	ab0a      	add	r3, sp, #40	; 0x28
 80064ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80064f2:	ab09      	add	r3, sp, #36	; 0x24
 80064f4:	ec49 8b10 	vmov	d0, r8, r9
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	6022      	str	r2, [r4, #0]
 80064fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006500:	4628      	mov	r0, r5
 8006502:	f7ff fecd 	bl	80062a0 <__cvt>
 8006506:	9b06      	ldr	r3, [sp, #24]
 8006508:	9909      	ldr	r1, [sp, #36]	; 0x24
 800650a:	2b47      	cmp	r3, #71	; 0x47
 800650c:	4680      	mov	r8, r0
 800650e:	d108      	bne.n	8006522 <_printf_float+0x142>
 8006510:	1cc8      	adds	r0, r1, #3
 8006512:	db02      	blt.n	800651a <_printf_float+0x13a>
 8006514:	6863      	ldr	r3, [r4, #4]
 8006516:	4299      	cmp	r1, r3
 8006518:	dd41      	ble.n	800659e <_printf_float+0x1be>
 800651a:	f1ab 0b02 	sub.w	fp, fp, #2
 800651e:	fa5f fb8b 	uxtb.w	fp, fp
 8006522:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006526:	d820      	bhi.n	800656a <_printf_float+0x18a>
 8006528:	3901      	subs	r1, #1
 800652a:	465a      	mov	r2, fp
 800652c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006530:	9109      	str	r1, [sp, #36]	; 0x24
 8006532:	f7ff ff17 	bl	8006364 <__exponent>
 8006536:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006538:	1813      	adds	r3, r2, r0
 800653a:	2a01      	cmp	r2, #1
 800653c:	4681      	mov	r9, r0
 800653e:	6123      	str	r3, [r4, #16]
 8006540:	dc02      	bgt.n	8006548 <_printf_float+0x168>
 8006542:	6822      	ldr	r2, [r4, #0]
 8006544:	07d2      	lsls	r2, r2, #31
 8006546:	d501      	bpl.n	800654c <_printf_float+0x16c>
 8006548:	3301      	adds	r3, #1
 800654a:	6123      	str	r3, [r4, #16]
 800654c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006550:	2b00      	cmp	r3, #0
 8006552:	d09c      	beq.n	800648e <_printf_float+0xae>
 8006554:	232d      	movs	r3, #45	; 0x2d
 8006556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800655a:	e798      	b.n	800648e <_printf_float+0xae>
 800655c:	9a06      	ldr	r2, [sp, #24]
 800655e:	2a47      	cmp	r2, #71	; 0x47
 8006560:	d1be      	bne.n	80064e0 <_printf_float+0x100>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1bc      	bne.n	80064e0 <_printf_float+0x100>
 8006566:	2301      	movs	r3, #1
 8006568:	e7b9      	b.n	80064de <_printf_float+0xfe>
 800656a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800656e:	d118      	bne.n	80065a2 <_printf_float+0x1c2>
 8006570:	2900      	cmp	r1, #0
 8006572:	6863      	ldr	r3, [r4, #4]
 8006574:	dd0b      	ble.n	800658e <_printf_float+0x1ae>
 8006576:	6121      	str	r1, [r4, #16]
 8006578:	b913      	cbnz	r3, 8006580 <_printf_float+0x1a0>
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	07d0      	lsls	r0, r2, #31
 800657e:	d502      	bpl.n	8006586 <_printf_float+0x1a6>
 8006580:	3301      	adds	r3, #1
 8006582:	440b      	add	r3, r1
 8006584:	6123      	str	r3, [r4, #16]
 8006586:	65a1      	str	r1, [r4, #88]	; 0x58
 8006588:	f04f 0900 	mov.w	r9, #0
 800658c:	e7de      	b.n	800654c <_printf_float+0x16c>
 800658e:	b913      	cbnz	r3, 8006596 <_printf_float+0x1b6>
 8006590:	6822      	ldr	r2, [r4, #0]
 8006592:	07d2      	lsls	r2, r2, #31
 8006594:	d501      	bpl.n	800659a <_printf_float+0x1ba>
 8006596:	3302      	adds	r3, #2
 8006598:	e7f4      	b.n	8006584 <_printf_float+0x1a4>
 800659a:	2301      	movs	r3, #1
 800659c:	e7f2      	b.n	8006584 <_printf_float+0x1a4>
 800659e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80065a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065a4:	4299      	cmp	r1, r3
 80065a6:	db05      	blt.n	80065b4 <_printf_float+0x1d4>
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	6121      	str	r1, [r4, #16]
 80065ac:	07d8      	lsls	r0, r3, #31
 80065ae:	d5ea      	bpl.n	8006586 <_printf_float+0x1a6>
 80065b0:	1c4b      	adds	r3, r1, #1
 80065b2:	e7e7      	b.n	8006584 <_printf_float+0x1a4>
 80065b4:	2900      	cmp	r1, #0
 80065b6:	bfd4      	ite	le
 80065b8:	f1c1 0202 	rsble	r2, r1, #2
 80065bc:	2201      	movgt	r2, #1
 80065be:	4413      	add	r3, r2
 80065c0:	e7e0      	b.n	8006584 <_printf_float+0x1a4>
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	055a      	lsls	r2, r3, #21
 80065c6:	d407      	bmi.n	80065d8 <_printf_float+0x1f8>
 80065c8:	6923      	ldr	r3, [r4, #16]
 80065ca:	4642      	mov	r2, r8
 80065cc:	4631      	mov	r1, r6
 80065ce:	4628      	mov	r0, r5
 80065d0:	47b8      	blx	r7
 80065d2:	3001      	adds	r0, #1
 80065d4:	d12c      	bne.n	8006630 <_printf_float+0x250>
 80065d6:	e764      	b.n	80064a2 <_printf_float+0xc2>
 80065d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065dc:	f240 80e0 	bls.w	80067a0 <_printf_float+0x3c0>
 80065e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065e4:	2200      	movs	r2, #0
 80065e6:	2300      	movs	r3, #0
 80065e8:	f7fa fa6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d034      	beq.n	800665a <_printf_float+0x27a>
 80065f0:	4a37      	ldr	r2, [pc, #220]	; (80066d0 <_printf_float+0x2f0>)
 80065f2:	2301      	movs	r3, #1
 80065f4:	4631      	mov	r1, r6
 80065f6:	4628      	mov	r0, r5
 80065f8:	47b8      	blx	r7
 80065fa:	3001      	adds	r0, #1
 80065fc:	f43f af51 	beq.w	80064a2 <_printf_float+0xc2>
 8006600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006604:	429a      	cmp	r2, r3
 8006606:	db02      	blt.n	800660e <_printf_float+0x22e>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	07d8      	lsls	r0, r3, #31
 800660c:	d510      	bpl.n	8006630 <_printf_float+0x250>
 800660e:	ee18 3a10 	vmov	r3, s16
 8006612:	4652      	mov	r2, sl
 8006614:	4631      	mov	r1, r6
 8006616:	4628      	mov	r0, r5
 8006618:	47b8      	blx	r7
 800661a:	3001      	adds	r0, #1
 800661c:	f43f af41 	beq.w	80064a2 <_printf_float+0xc2>
 8006620:	f04f 0800 	mov.w	r8, #0
 8006624:	f104 091a 	add.w	r9, r4, #26
 8006628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800662a:	3b01      	subs	r3, #1
 800662c:	4543      	cmp	r3, r8
 800662e:	dc09      	bgt.n	8006644 <_printf_float+0x264>
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	079b      	lsls	r3, r3, #30
 8006634:	f100 8105 	bmi.w	8006842 <_printf_float+0x462>
 8006638:	68e0      	ldr	r0, [r4, #12]
 800663a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800663c:	4298      	cmp	r0, r3
 800663e:	bfb8      	it	lt
 8006640:	4618      	movlt	r0, r3
 8006642:	e730      	b.n	80064a6 <_printf_float+0xc6>
 8006644:	2301      	movs	r3, #1
 8006646:	464a      	mov	r2, r9
 8006648:	4631      	mov	r1, r6
 800664a:	4628      	mov	r0, r5
 800664c:	47b8      	blx	r7
 800664e:	3001      	adds	r0, #1
 8006650:	f43f af27 	beq.w	80064a2 <_printf_float+0xc2>
 8006654:	f108 0801 	add.w	r8, r8, #1
 8006658:	e7e6      	b.n	8006628 <_printf_float+0x248>
 800665a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800665c:	2b00      	cmp	r3, #0
 800665e:	dc39      	bgt.n	80066d4 <_printf_float+0x2f4>
 8006660:	4a1b      	ldr	r2, [pc, #108]	; (80066d0 <_printf_float+0x2f0>)
 8006662:	2301      	movs	r3, #1
 8006664:	4631      	mov	r1, r6
 8006666:	4628      	mov	r0, r5
 8006668:	47b8      	blx	r7
 800666a:	3001      	adds	r0, #1
 800666c:	f43f af19 	beq.w	80064a2 <_printf_float+0xc2>
 8006670:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006674:	4313      	orrs	r3, r2
 8006676:	d102      	bne.n	800667e <_printf_float+0x29e>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	07d9      	lsls	r1, r3, #31
 800667c:	d5d8      	bpl.n	8006630 <_printf_float+0x250>
 800667e:	ee18 3a10 	vmov	r3, s16
 8006682:	4652      	mov	r2, sl
 8006684:	4631      	mov	r1, r6
 8006686:	4628      	mov	r0, r5
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	f43f af09 	beq.w	80064a2 <_printf_float+0xc2>
 8006690:	f04f 0900 	mov.w	r9, #0
 8006694:	f104 0a1a 	add.w	sl, r4, #26
 8006698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800669a:	425b      	negs	r3, r3
 800669c:	454b      	cmp	r3, r9
 800669e:	dc01      	bgt.n	80066a4 <_printf_float+0x2c4>
 80066a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a2:	e792      	b.n	80065ca <_printf_float+0x1ea>
 80066a4:	2301      	movs	r3, #1
 80066a6:	4652      	mov	r2, sl
 80066a8:	4631      	mov	r1, r6
 80066aa:	4628      	mov	r0, r5
 80066ac:	47b8      	blx	r7
 80066ae:	3001      	adds	r0, #1
 80066b0:	f43f aef7 	beq.w	80064a2 <_printf_float+0xc2>
 80066b4:	f109 0901 	add.w	r9, r9, #1
 80066b8:	e7ee      	b.n	8006698 <_printf_float+0x2b8>
 80066ba:	bf00      	nop
 80066bc:	7fefffff 	.word	0x7fefffff
 80066c0:	080090cc 	.word	0x080090cc
 80066c4:	080090d0 	.word	0x080090d0
 80066c8:	080090d8 	.word	0x080090d8
 80066cc:	080090d4 	.word	0x080090d4
 80066d0:	080090dc 	.word	0x080090dc
 80066d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066d8:	429a      	cmp	r2, r3
 80066da:	bfa8      	it	ge
 80066dc:	461a      	movge	r2, r3
 80066de:	2a00      	cmp	r2, #0
 80066e0:	4691      	mov	r9, r2
 80066e2:	dc37      	bgt.n	8006754 <_printf_float+0x374>
 80066e4:	f04f 0b00 	mov.w	fp, #0
 80066e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066ec:	f104 021a 	add.w	r2, r4, #26
 80066f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066f2:	9305      	str	r3, [sp, #20]
 80066f4:	eba3 0309 	sub.w	r3, r3, r9
 80066f8:	455b      	cmp	r3, fp
 80066fa:	dc33      	bgt.n	8006764 <_printf_float+0x384>
 80066fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006700:	429a      	cmp	r2, r3
 8006702:	db3b      	blt.n	800677c <_printf_float+0x39c>
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	07da      	lsls	r2, r3, #31
 8006708:	d438      	bmi.n	800677c <_printf_float+0x39c>
 800670a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800670c:	9b05      	ldr	r3, [sp, #20]
 800670e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	eba2 0901 	sub.w	r9, r2, r1
 8006716:	4599      	cmp	r9, r3
 8006718:	bfa8      	it	ge
 800671a:	4699      	movge	r9, r3
 800671c:	f1b9 0f00 	cmp.w	r9, #0
 8006720:	dc35      	bgt.n	800678e <_printf_float+0x3ae>
 8006722:	f04f 0800 	mov.w	r8, #0
 8006726:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800672a:	f104 0a1a 	add.w	sl, r4, #26
 800672e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	eba3 0309 	sub.w	r3, r3, r9
 8006738:	4543      	cmp	r3, r8
 800673a:	f77f af79 	ble.w	8006630 <_printf_float+0x250>
 800673e:	2301      	movs	r3, #1
 8006740:	4652      	mov	r2, sl
 8006742:	4631      	mov	r1, r6
 8006744:	4628      	mov	r0, r5
 8006746:	47b8      	blx	r7
 8006748:	3001      	adds	r0, #1
 800674a:	f43f aeaa 	beq.w	80064a2 <_printf_float+0xc2>
 800674e:	f108 0801 	add.w	r8, r8, #1
 8006752:	e7ec      	b.n	800672e <_printf_float+0x34e>
 8006754:	4613      	mov	r3, r2
 8006756:	4631      	mov	r1, r6
 8006758:	4642      	mov	r2, r8
 800675a:	4628      	mov	r0, r5
 800675c:	47b8      	blx	r7
 800675e:	3001      	adds	r0, #1
 8006760:	d1c0      	bne.n	80066e4 <_printf_float+0x304>
 8006762:	e69e      	b.n	80064a2 <_printf_float+0xc2>
 8006764:	2301      	movs	r3, #1
 8006766:	4631      	mov	r1, r6
 8006768:	4628      	mov	r0, r5
 800676a:	9205      	str	r2, [sp, #20]
 800676c:	47b8      	blx	r7
 800676e:	3001      	adds	r0, #1
 8006770:	f43f ae97 	beq.w	80064a2 <_printf_float+0xc2>
 8006774:	9a05      	ldr	r2, [sp, #20]
 8006776:	f10b 0b01 	add.w	fp, fp, #1
 800677a:	e7b9      	b.n	80066f0 <_printf_float+0x310>
 800677c:	ee18 3a10 	vmov	r3, s16
 8006780:	4652      	mov	r2, sl
 8006782:	4631      	mov	r1, r6
 8006784:	4628      	mov	r0, r5
 8006786:	47b8      	blx	r7
 8006788:	3001      	adds	r0, #1
 800678a:	d1be      	bne.n	800670a <_printf_float+0x32a>
 800678c:	e689      	b.n	80064a2 <_printf_float+0xc2>
 800678e:	9a05      	ldr	r2, [sp, #20]
 8006790:	464b      	mov	r3, r9
 8006792:	4442      	add	r2, r8
 8006794:	4631      	mov	r1, r6
 8006796:	4628      	mov	r0, r5
 8006798:	47b8      	blx	r7
 800679a:	3001      	adds	r0, #1
 800679c:	d1c1      	bne.n	8006722 <_printf_float+0x342>
 800679e:	e680      	b.n	80064a2 <_printf_float+0xc2>
 80067a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067a2:	2a01      	cmp	r2, #1
 80067a4:	dc01      	bgt.n	80067aa <_printf_float+0x3ca>
 80067a6:	07db      	lsls	r3, r3, #31
 80067a8:	d538      	bpl.n	800681c <_printf_float+0x43c>
 80067aa:	2301      	movs	r3, #1
 80067ac:	4642      	mov	r2, r8
 80067ae:	4631      	mov	r1, r6
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	f43f ae74 	beq.w	80064a2 <_printf_float+0xc2>
 80067ba:	ee18 3a10 	vmov	r3, s16
 80067be:	4652      	mov	r2, sl
 80067c0:	4631      	mov	r1, r6
 80067c2:	4628      	mov	r0, r5
 80067c4:	47b8      	blx	r7
 80067c6:	3001      	adds	r0, #1
 80067c8:	f43f ae6b 	beq.w	80064a2 <_printf_float+0xc2>
 80067cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067d0:	2200      	movs	r2, #0
 80067d2:	2300      	movs	r3, #0
 80067d4:	f7fa f978 	bl	8000ac8 <__aeabi_dcmpeq>
 80067d8:	b9d8      	cbnz	r0, 8006812 <_printf_float+0x432>
 80067da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067dc:	f108 0201 	add.w	r2, r8, #1
 80067e0:	3b01      	subs	r3, #1
 80067e2:	4631      	mov	r1, r6
 80067e4:	4628      	mov	r0, r5
 80067e6:	47b8      	blx	r7
 80067e8:	3001      	adds	r0, #1
 80067ea:	d10e      	bne.n	800680a <_printf_float+0x42a>
 80067ec:	e659      	b.n	80064a2 <_printf_float+0xc2>
 80067ee:	2301      	movs	r3, #1
 80067f0:	4652      	mov	r2, sl
 80067f2:	4631      	mov	r1, r6
 80067f4:	4628      	mov	r0, r5
 80067f6:	47b8      	blx	r7
 80067f8:	3001      	adds	r0, #1
 80067fa:	f43f ae52 	beq.w	80064a2 <_printf_float+0xc2>
 80067fe:	f108 0801 	add.w	r8, r8, #1
 8006802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006804:	3b01      	subs	r3, #1
 8006806:	4543      	cmp	r3, r8
 8006808:	dcf1      	bgt.n	80067ee <_printf_float+0x40e>
 800680a:	464b      	mov	r3, r9
 800680c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006810:	e6dc      	b.n	80065cc <_printf_float+0x1ec>
 8006812:	f04f 0800 	mov.w	r8, #0
 8006816:	f104 0a1a 	add.w	sl, r4, #26
 800681a:	e7f2      	b.n	8006802 <_printf_float+0x422>
 800681c:	2301      	movs	r3, #1
 800681e:	4642      	mov	r2, r8
 8006820:	e7df      	b.n	80067e2 <_printf_float+0x402>
 8006822:	2301      	movs	r3, #1
 8006824:	464a      	mov	r2, r9
 8006826:	4631      	mov	r1, r6
 8006828:	4628      	mov	r0, r5
 800682a:	47b8      	blx	r7
 800682c:	3001      	adds	r0, #1
 800682e:	f43f ae38 	beq.w	80064a2 <_printf_float+0xc2>
 8006832:	f108 0801 	add.w	r8, r8, #1
 8006836:	68e3      	ldr	r3, [r4, #12]
 8006838:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800683a:	1a5b      	subs	r3, r3, r1
 800683c:	4543      	cmp	r3, r8
 800683e:	dcf0      	bgt.n	8006822 <_printf_float+0x442>
 8006840:	e6fa      	b.n	8006638 <_printf_float+0x258>
 8006842:	f04f 0800 	mov.w	r8, #0
 8006846:	f104 0919 	add.w	r9, r4, #25
 800684a:	e7f4      	b.n	8006836 <_printf_float+0x456>

0800684c <_printf_common>:
 800684c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006850:	4616      	mov	r6, r2
 8006852:	4699      	mov	r9, r3
 8006854:	688a      	ldr	r2, [r1, #8]
 8006856:	690b      	ldr	r3, [r1, #16]
 8006858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800685c:	4293      	cmp	r3, r2
 800685e:	bfb8      	it	lt
 8006860:	4613      	movlt	r3, r2
 8006862:	6033      	str	r3, [r6, #0]
 8006864:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006868:	4607      	mov	r7, r0
 800686a:	460c      	mov	r4, r1
 800686c:	b10a      	cbz	r2, 8006872 <_printf_common+0x26>
 800686e:	3301      	adds	r3, #1
 8006870:	6033      	str	r3, [r6, #0]
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	0699      	lsls	r1, r3, #26
 8006876:	bf42      	ittt	mi
 8006878:	6833      	ldrmi	r3, [r6, #0]
 800687a:	3302      	addmi	r3, #2
 800687c:	6033      	strmi	r3, [r6, #0]
 800687e:	6825      	ldr	r5, [r4, #0]
 8006880:	f015 0506 	ands.w	r5, r5, #6
 8006884:	d106      	bne.n	8006894 <_printf_common+0x48>
 8006886:	f104 0a19 	add.w	sl, r4, #25
 800688a:	68e3      	ldr	r3, [r4, #12]
 800688c:	6832      	ldr	r2, [r6, #0]
 800688e:	1a9b      	subs	r3, r3, r2
 8006890:	42ab      	cmp	r3, r5
 8006892:	dc26      	bgt.n	80068e2 <_printf_common+0x96>
 8006894:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006898:	1e13      	subs	r3, r2, #0
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	bf18      	it	ne
 800689e:	2301      	movne	r3, #1
 80068a0:	0692      	lsls	r2, r2, #26
 80068a2:	d42b      	bmi.n	80068fc <_printf_common+0xb0>
 80068a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068a8:	4649      	mov	r1, r9
 80068aa:	4638      	mov	r0, r7
 80068ac:	47c0      	blx	r8
 80068ae:	3001      	adds	r0, #1
 80068b0:	d01e      	beq.n	80068f0 <_printf_common+0xa4>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	68e5      	ldr	r5, [r4, #12]
 80068b6:	6832      	ldr	r2, [r6, #0]
 80068b8:	f003 0306 	and.w	r3, r3, #6
 80068bc:	2b04      	cmp	r3, #4
 80068be:	bf08      	it	eq
 80068c0:	1aad      	subeq	r5, r5, r2
 80068c2:	68a3      	ldr	r3, [r4, #8]
 80068c4:	6922      	ldr	r2, [r4, #16]
 80068c6:	bf0c      	ite	eq
 80068c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068cc:	2500      	movne	r5, #0
 80068ce:	4293      	cmp	r3, r2
 80068d0:	bfc4      	itt	gt
 80068d2:	1a9b      	subgt	r3, r3, r2
 80068d4:	18ed      	addgt	r5, r5, r3
 80068d6:	2600      	movs	r6, #0
 80068d8:	341a      	adds	r4, #26
 80068da:	42b5      	cmp	r5, r6
 80068dc:	d11a      	bne.n	8006914 <_printf_common+0xc8>
 80068de:	2000      	movs	r0, #0
 80068e0:	e008      	b.n	80068f4 <_printf_common+0xa8>
 80068e2:	2301      	movs	r3, #1
 80068e4:	4652      	mov	r2, sl
 80068e6:	4649      	mov	r1, r9
 80068e8:	4638      	mov	r0, r7
 80068ea:	47c0      	blx	r8
 80068ec:	3001      	adds	r0, #1
 80068ee:	d103      	bne.n	80068f8 <_printf_common+0xac>
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295
 80068f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f8:	3501      	adds	r5, #1
 80068fa:	e7c6      	b.n	800688a <_printf_common+0x3e>
 80068fc:	18e1      	adds	r1, r4, r3
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	2030      	movs	r0, #48	; 0x30
 8006902:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006906:	4422      	add	r2, r4
 8006908:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800690c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006910:	3302      	adds	r3, #2
 8006912:	e7c7      	b.n	80068a4 <_printf_common+0x58>
 8006914:	2301      	movs	r3, #1
 8006916:	4622      	mov	r2, r4
 8006918:	4649      	mov	r1, r9
 800691a:	4638      	mov	r0, r7
 800691c:	47c0      	blx	r8
 800691e:	3001      	adds	r0, #1
 8006920:	d0e6      	beq.n	80068f0 <_printf_common+0xa4>
 8006922:	3601      	adds	r6, #1
 8006924:	e7d9      	b.n	80068da <_printf_common+0x8e>
	...

08006928 <_printf_i>:
 8006928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800692c:	460c      	mov	r4, r1
 800692e:	4691      	mov	r9, r2
 8006930:	7e27      	ldrb	r7, [r4, #24]
 8006932:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006934:	2f78      	cmp	r7, #120	; 0x78
 8006936:	4680      	mov	r8, r0
 8006938:	469a      	mov	sl, r3
 800693a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800693e:	d807      	bhi.n	8006950 <_printf_i+0x28>
 8006940:	2f62      	cmp	r7, #98	; 0x62
 8006942:	d80a      	bhi.n	800695a <_printf_i+0x32>
 8006944:	2f00      	cmp	r7, #0
 8006946:	f000 80d8 	beq.w	8006afa <_printf_i+0x1d2>
 800694a:	2f58      	cmp	r7, #88	; 0x58
 800694c:	f000 80a3 	beq.w	8006a96 <_printf_i+0x16e>
 8006950:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006958:	e03a      	b.n	80069d0 <_printf_i+0xa8>
 800695a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800695e:	2b15      	cmp	r3, #21
 8006960:	d8f6      	bhi.n	8006950 <_printf_i+0x28>
 8006962:	a001      	add	r0, pc, #4	; (adr r0, 8006968 <_printf_i+0x40>)
 8006964:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006968:	080069c1 	.word	0x080069c1
 800696c:	080069d5 	.word	0x080069d5
 8006970:	08006951 	.word	0x08006951
 8006974:	08006951 	.word	0x08006951
 8006978:	08006951 	.word	0x08006951
 800697c:	08006951 	.word	0x08006951
 8006980:	080069d5 	.word	0x080069d5
 8006984:	08006951 	.word	0x08006951
 8006988:	08006951 	.word	0x08006951
 800698c:	08006951 	.word	0x08006951
 8006990:	08006951 	.word	0x08006951
 8006994:	08006ae1 	.word	0x08006ae1
 8006998:	08006a05 	.word	0x08006a05
 800699c:	08006ac3 	.word	0x08006ac3
 80069a0:	08006951 	.word	0x08006951
 80069a4:	08006951 	.word	0x08006951
 80069a8:	08006b03 	.word	0x08006b03
 80069ac:	08006951 	.word	0x08006951
 80069b0:	08006a05 	.word	0x08006a05
 80069b4:	08006951 	.word	0x08006951
 80069b8:	08006951 	.word	0x08006951
 80069bc:	08006acb 	.word	0x08006acb
 80069c0:	680b      	ldr	r3, [r1, #0]
 80069c2:	1d1a      	adds	r2, r3, #4
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	600a      	str	r2, [r1, #0]
 80069c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80069cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069d0:	2301      	movs	r3, #1
 80069d2:	e0a3      	b.n	8006b1c <_printf_i+0x1f4>
 80069d4:	6825      	ldr	r5, [r4, #0]
 80069d6:	6808      	ldr	r0, [r1, #0]
 80069d8:	062e      	lsls	r6, r5, #24
 80069da:	f100 0304 	add.w	r3, r0, #4
 80069de:	d50a      	bpl.n	80069f6 <_printf_i+0xce>
 80069e0:	6805      	ldr	r5, [r0, #0]
 80069e2:	600b      	str	r3, [r1, #0]
 80069e4:	2d00      	cmp	r5, #0
 80069e6:	da03      	bge.n	80069f0 <_printf_i+0xc8>
 80069e8:	232d      	movs	r3, #45	; 0x2d
 80069ea:	426d      	negs	r5, r5
 80069ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069f0:	485e      	ldr	r0, [pc, #376]	; (8006b6c <_printf_i+0x244>)
 80069f2:	230a      	movs	r3, #10
 80069f4:	e019      	b.n	8006a2a <_printf_i+0x102>
 80069f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80069fa:	6805      	ldr	r5, [r0, #0]
 80069fc:	600b      	str	r3, [r1, #0]
 80069fe:	bf18      	it	ne
 8006a00:	b22d      	sxthne	r5, r5
 8006a02:	e7ef      	b.n	80069e4 <_printf_i+0xbc>
 8006a04:	680b      	ldr	r3, [r1, #0]
 8006a06:	6825      	ldr	r5, [r4, #0]
 8006a08:	1d18      	adds	r0, r3, #4
 8006a0a:	6008      	str	r0, [r1, #0]
 8006a0c:	0628      	lsls	r0, r5, #24
 8006a0e:	d501      	bpl.n	8006a14 <_printf_i+0xec>
 8006a10:	681d      	ldr	r5, [r3, #0]
 8006a12:	e002      	b.n	8006a1a <_printf_i+0xf2>
 8006a14:	0669      	lsls	r1, r5, #25
 8006a16:	d5fb      	bpl.n	8006a10 <_printf_i+0xe8>
 8006a18:	881d      	ldrh	r5, [r3, #0]
 8006a1a:	4854      	ldr	r0, [pc, #336]	; (8006b6c <_printf_i+0x244>)
 8006a1c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a1e:	bf0c      	ite	eq
 8006a20:	2308      	moveq	r3, #8
 8006a22:	230a      	movne	r3, #10
 8006a24:	2100      	movs	r1, #0
 8006a26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a2a:	6866      	ldr	r6, [r4, #4]
 8006a2c:	60a6      	str	r6, [r4, #8]
 8006a2e:	2e00      	cmp	r6, #0
 8006a30:	bfa2      	ittt	ge
 8006a32:	6821      	ldrge	r1, [r4, #0]
 8006a34:	f021 0104 	bicge.w	r1, r1, #4
 8006a38:	6021      	strge	r1, [r4, #0]
 8006a3a:	b90d      	cbnz	r5, 8006a40 <_printf_i+0x118>
 8006a3c:	2e00      	cmp	r6, #0
 8006a3e:	d04d      	beq.n	8006adc <_printf_i+0x1b4>
 8006a40:	4616      	mov	r6, r2
 8006a42:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a46:	fb03 5711 	mls	r7, r3, r1, r5
 8006a4a:	5dc7      	ldrb	r7, [r0, r7]
 8006a4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a50:	462f      	mov	r7, r5
 8006a52:	42bb      	cmp	r3, r7
 8006a54:	460d      	mov	r5, r1
 8006a56:	d9f4      	bls.n	8006a42 <_printf_i+0x11a>
 8006a58:	2b08      	cmp	r3, #8
 8006a5a:	d10b      	bne.n	8006a74 <_printf_i+0x14c>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	07df      	lsls	r7, r3, #31
 8006a60:	d508      	bpl.n	8006a74 <_printf_i+0x14c>
 8006a62:	6923      	ldr	r3, [r4, #16]
 8006a64:	6861      	ldr	r1, [r4, #4]
 8006a66:	4299      	cmp	r1, r3
 8006a68:	bfde      	ittt	le
 8006a6a:	2330      	movle	r3, #48	; 0x30
 8006a6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a74:	1b92      	subs	r2, r2, r6
 8006a76:	6122      	str	r2, [r4, #16]
 8006a78:	f8cd a000 	str.w	sl, [sp]
 8006a7c:	464b      	mov	r3, r9
 8006a7e:	aa03      	add	r2, sp, #12
 8006a80:	4621      	mov	r1, r4
 8006a82:	4640      	mov	r0, r8
 8006a84:	f7ff fee2 	bl	800684c <_printf_common>
 8006a88:	3001      	adds	r0, #1
 8006a8a:	d14c      	bne.n	8006b26 <_printf_i+0x1fe>
 8006a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a90:	b004      	add	sp, #16
 8006a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a96:	4835      	ldr	r0, [pc, #212]	; (8006b6c <_printf_i+0x244>)
 8006a98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	680e      	ldr	r6, [r1, #0]
 8006aa0:	061f      	lsls	r7, r3, #24
 8006aa2:	f856 5b04 	ldr.w	r5, [r6], #4
 8006aa6:	600e      	str	r6, [r1, #0]
 8006aa8:	d514      	bpl.n	8006ad4 <_printf_i+0x1ac>
 8006aaa:	07d9      	lsls	r1, r3, #31
 8006aac:	bf44      	itt	mi
 8006aae:	f043 0320 	orrmi.w	r3, r3, #32
 8006ab2:	6023      	strmi	r3, [r4, #0]
 8006ab4:	b91d      	cbnz	r5, 8006abe <_printf_i+0x196>
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	f023 0320 	bic.w	r3, r3, #32
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	2310      	movs	r3, #16
 8006ac0:	e7b0      	b.n	8006a24 <_printf_i+0xfc>
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	f043 0320 	orr.w	r3, r3, #32
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	2378      	movs	r3, #120	; 0x78
 8006acc:	4828      	ldr	r0, [pc, #160]	; (8006b70 <_printf_i+0x248>)
 8006ace:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ad2:	e7e3      	b.n	8006a9c <_printf_i+0x174>
 8006ad4:	065e      	lsls	r6, r3, #25
 8006ad6:	bf48      	it	mi
 8006ad8:	b2ad      	uxthmi	r5, r5
 8006ada:	e7e6      	b.n	8006aaa <_printf_i+0x182>
 8006adc:	4616      	mov	r6, r2
 8006ade:	e7bb      	b.n	8006a58 <_printf_i+0x130>
 8006ae0:	680b      	ldr	r3, [r1, #0]
 8006ae2:	6826      	ldr	r6, [r4, #0]
 8006ae4:	6960      	ldr	r0, [r4, #20]
 8006ae6:	1d1d      	adds	r5, r3, #4
 8006ae8:	600d      	str	r5, [r1, #0]
 8006aea:	0635      	lsls	r5, r6, #24
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	d501      	bpl.n	8006af4 <_printf_i+0x1cc>
 8006af0:	6018      	str	r0, [r3, #0]
 8006af2:	e002      	b.n	8006afa <_printf_i+0x1d2>
 8006af4:	0671      	lsls	r1, r6, #25
 8006af6:	d5fb      	bpl.n	8006af0 <_printf_i+0x1c8>
 8006af8:	8018      	strh	r0, [r3, #0]
 8006afa:	2300      	movs	r3, #0
 8006afc:	6123      	str	r3, [r4, #16]
 8006afe:	4616      	mov	r6, r2
 8006b00:	e7ba      	b.n	8006a78 <_printf_i+0x150>
 8006b02:	680b      	ldr	r3, [r1, #0]
 8006b04:	1d1a      	adds	r2, r3, #4
 8006b06:	600a      	str	r2, [r1, #0]
 8006b08:	681e      	ldr	r6, [r3, #0]
 8006b0a:	6862      	ldr	r2, [r4, #4]
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	4630      	mov	r0, r6
 8006b10:	f7f9 fb66 	bl	80001e0 <memchr>
 8006b14:	b108      	cbz	r0, 8006b1a <_printf_i+0x1f2>
 8006b16:	1b80      	subs	r0, r0, r6
 8006b18:	6060      	str	r0, [r4, #4]
 8006b1a:	6863      	ldr	r3, [r4, #4]
 8006b1c:	6123      	str	r3, [r4, #16]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b24:	e7a8      	b.n	8006a78 <_printf_i+0x150>
 8006b26:	6923      	ldr	r3, [r4, #16]
 8006b28:	4632      	mov	r2, r6
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	4640      	mov	r0, r8
 8006b2e:	47d0      	blx	sl
 8006b30:	3001      	adds	r0, #1
 8006b32:	d0ab      	beq.n	8006a8c <_printf_i+0x164>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	079b      	lsls	r3, r3, #30
 8006b38:	d413      	bmi.n	8006b62 <_printf_i+0x23a>
 8006b3a:	68e0      	ldr	r0, [r4, #12]
 8006b3c:	9b03      	ldr	r3, [sp, #12]
 8006b3e:	4298      	cmp	r0, r3
 8006b40:	bfb8      	it	lt
 8006b42:	4618      	movlt	r0, r3
 8006b44:	e7a4      	b.n	8006a90 <_printf_i+0x168>
 8006b46:	2301      	movs	r3, #1
 8006b48:	4632      	mov	r2, r6
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	4640      	mov	r0, r8
 8006b4e:	47d0      	blx	sl
 8006b50:	3001      	adds	r0, #1
 8006b52:	d09b      	beq.n	8006a8c <_printf_i+0x164>
 8006b54:	3501      	adds	r5, #1
 8006b56:	68e3      	ldr	r3, [r4, #12]
 8006b58:	9903      	ldr	r1, [sp, #12]
 8006b5a:	1a5b      	subs	r3, r3, r1
 8006b5c:	42ab      	cmp	r3, r5
 8006b5e:	dcf2      	bgt.n	8006b46 <_printf_i+0x21e>
 8006b60:	e7eb      	b.n	8006b3a <_printf_i+0x212>
 8006b62:	2500      	movs	r5, #0
 8006b64:	f104 0619 	add.w	r6, r4, #25
 8006b68:	e7f5      	b.n	8006b56 <_printf_i+0x22e>
 8006b6a:	bf00      	nop
 8006b6c:	080090de 	.word	0x080090de
 8006b70:	080090ef 	.word	0x080090ef

08006b74 <siprintf>:
 8006b74:	b40e      	push	{r1, r2, r3}
 8006b76:	b500      	push	{lr}
 8006b78:	b09c      	sub	sp, #112	; 0x70
 8006b7a:	ab1d      	add	r3, sp, #116	; 0x74
 8006b7c:	9002      	str	r0, [sp, #8]
 8006b7e:	9006      	str	r0, [sp, #24]
 8006b80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b84:	4809      	ldr	r0, [pc, #36]	; (8006bac <siprintf+0x38>)
 8006b86:	9107      	str	r1, [sp, #28]
 8006b88:	9104      	str	r1, [sp, #16]
 8006b8a:	4909      	ldr	r1, [pc, #36]	; (8006bb0 <siprintf+0x3c>)
 8006b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b90:	9105      	str	r1, [sp, #20]
 8006b92:	6800      	ldr	r0, [r0, #0]
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	a902      	add	r1, sp, #8
 8006b98:	f001 fb34 	bl	8008204 <_svfiprintf_r>
 8006b9c:	9b02      	ldr	r3, [sp, #8]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	701a      	strb	r2, [r3, #0]
 8006ba2:	b01c      	add	sp, #112	; 0x70
 8006ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ba8:	b003      	add	sp, #12
 8006baa:	4770      	bx	lr
 8006bac:	2000000c 	.word	0x2000000c
 8006bb0:	ffff0208 	.word	0xffff0208

08006bb4 <quorem>:
 8006bb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	6903      	ldr	r3, [r0, #16]
 8006bba:	690c      	ldr	r4, [r1, #16]
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	4607      	mov	r7, r0
 8006bc0:	f2c0 8081 	blt.w	8006cc6 <quorem+0x112>
 8006bc4:	3c01      	subs	r4, #1
 8006bc6:	f101 0814 	add.w	r8, r1, #20
 8006bca:	f100 0514 	add.w	r5, r0, #20
 8006bce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006bd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	429a      	cmp	r2, r3
 8006be0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006be4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006be8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006bec:	d331      	bcc.n	8006c52 <quorem+0x9e>
 8006bee:	f04f 0e00 	mov.w	lr, #0
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	46ac      	mov	ip, r5
 8006bf6:	46f2      	mov	sl, lr
 8006bf8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006bfc:	b293      	uxth	r3, r2
 8006bfe:	fb06 e303 	mla	r3, r6, r3, lr
 8006c02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	ebaa 0303 	sub.w	r3, sl, r3
 8006c0c:	0c12      	lsrs	r2, r2, #16
 8006c0e:	f8dc a000 	ldr.w	sl, [ip]
 8006c12:	fb06 e202 	mla	r2, r6, r2, lr
 8006c16:	fa13 f38a 	uxtah	r3, r3, sl
 8006c1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c1e:	fa1f fa82 	uxth.w	sl, r2
 8006c22:	f8dc 2000 	ldr.w	r2, [ip]
 8006c26:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006c2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c34:	4581      	cmp	r9, r0
 8006c36:	f84c 3b04 	str.w	r3, [ip], #4
 8006c3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c3e:	d2db      	bcs.n	8006bf8 <quorem+0x44>
 8006c40:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c44:	b92b      	cbnz	r3, 8006c52 <quorem+0x9e>
 8006c46:	9b01      	ldr	r3, [sp, #4]
 8006c48:	3b04      	subs	r3, #4
 8006c4a:	429d      	cmp	r5, r3
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	d32e      	bcc.n	8006cae <quorem+0xfa>
 8006c50:	613c      	str	r4, [r7, #16]
 8006c52:	4638      	mov	r0, r7
 8006c54:	f001 f8c0 	bl	8007dd8 <__mcmp>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	db24      	blt.n	8006ca6 <quorem+0xf2>
 8006c5c:	3601      	adds	r6, #1
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f04f 0c00 	mov.w	ip, #0
 8006c64:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c68:	f8d0 e000 	ldr.w	lr, [r0]
 8006c6c:	b293      	uxth	r3, r2
 8006c6e:	ebac 0303 	sub.w	r3, ip, r3
 8006c72:	0c12      	lsrs	r2, r2, #16
 8006c74:	fa13 f38e 	uxtah	r3, r3, lr
 8006c78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006c7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c86:	45c1      	cmp	r9, r8
 8006c88:	f840 3b04 	str.w	r3, [r0], #4
 8006c8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006c90:	d2e8      	bcs.n	8006c64 <quorem+0xb0>
 8006c92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c9a:	b922      	cbnz	r2, 8006ca6 <quorem+0xf2>
 8006c9c:	3b04      	subs	r3, #4
 8006c9e:	429d      	cmp	r5, r3
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	d30a      	bcc.n	8006cba <quorem+0x106>
 8006ca4:	613c      	str	r4, [r7, #16]
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	b003      	add	sp, #12
 8006caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cae:	6812      	ldr	r2, [r2, #0]
 8006cb0:	3b04      	subs	r3, #4
 8006cb2:	2a00      	cmp	r2, #0
 8006cb4:	d1cc      	bne.n	8006c50 <quorem+0x9c>
 8006cb6:	3c01      	subs	r4, #1
 8006cb8:	e7c7      	b.n	8006c4a <quorem+0x96>
 8006cba:	6812      	ldr	r2, [r2, #0]
 8006cbc:	3b04      	subs	r3, #4
 8006cbe:	2a00      	cmp	r2, #0
 8006cc0:	d1f0      	bne.n	8006ca4 <quorem+0xf0>
 8006cc2:	3c01      	subs	r4, #1
 8006cc4:	e7eb      	b.n	8006c9e <quorem+0xea>
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	e7ee      	b.n	8006ca8 <quorem+0xf4>
 8006cca:	0000      	movs	r0, r0
 8006ccc:	0000      	movs	r0, r0
	...

08006cd0 <_dtoa_r>:
 8006cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	ed2d 8b02 	vpush	{d8}
 8006cd8:	ec57 6b10 	vmov	r6, r7, d0
 8006cdc:	b095      	sub	sp, #84	; 0x54
 8006cde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ce0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ce4:	9105      	str	r1, [sp, #20]
 8006ce6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006cea:	4604      	mov	r4, r0
 8006cec:	9209      	str	r2, [sp, #36]	; 0x24
 8006cee:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cf0:	b975      	cbnz	r5, 8006d10 <_dtoa_r+0x40>
 8006cf2:	2010      	movs	r0, #16
 8006cf4:	f000 fddc 	bl	80078b0 <malloc>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	6260      	str	r0, [r4, #36]	; 0x24
 8006cfc:	b920      	cbnz	r0, 8006d08 <_dtoa_r+0x38>
 8006cfe:	4bb2      	ldr	r3, [pc, #712]	; (8006fc8 <_dtoa_r+0x2f8>)
 8006d00:	21ea      	movs	r1, #234	; 0xea
 8006d02:	48b2      	ldr	r0, [pc, #712]	; (8006fcc <_dtoa_r+0x2fc>)
 8006d04:	f001 fb8e 	bl	8008424 <__assert_func>
 8006d08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d0c:	6005      	str	r5, [r0, #0]
 8006d0e:	60c5      	str	r5, [r0, #12]
 8006d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d12:	6819      	ldr	r1, [r3, #0]
 8006d14:	b151      	cbz	r1, 8006d2c <_dtoa_r+0x5c>
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	604a      	str	r2, [r1, #4]
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	4093      	lsls	r3, r2
 8006d1e:	608b      	str	r3, [r1, #8]
 8006d20:	4620      	mov	r0, r4
 8006d22:	f000 fe1b 	bl	800795c <_Bfree>
 8006d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	1e3b      	subs	r3, r7, #0
 8006d2e:	bfb9      	ittee	lt
 8006d30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d34:	9303      	strlt	r3, [sp, #12]
 8006d36:	2300      	movge	r3, #0
 8006d38:	f8c8 3000 	strge.w	r3, [r8]
 8006d3c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006d40:	4ba3      	ldr	r3, [pc, #652]	; (8006fd0 <_dtoa_r+0x300>)
 8006d42:	bfbc      	itt	lt
 8006d44:	2201      	movlt	r2, #1
 8006d46:	f8c8 2000 	strlt.w	r2, [r8]
 8006d4a:	ea33 0309 	bics.w	r3, r3, r9
 8006d4e:	d11b      	bne.n	8006d88 <_dtoa_r+0xb8>
 8006d50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d52:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d5c:	4333      	orrs	r3, r6
 8006d5e:	f000 857a 	beq.w	8007856 <_dtoa_r+0xb86>
 8006d62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d64:	b963      	cbnz	r3, 8006d80 <_dtoa_r+0xb0>
 8006d66:	4b9b      	ldr	r3, [pc, #620]	; (8006fd4 <_dtoa_r+0x304>)
 8006d68:	e024      	b.n	8006db4 <_dtoa_r+0xe4>
 8006d6a:	4b9b      	ldr	r3, [pc, #620]	; (8006fd8 <_dtoa_r+0x308>)
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	3308      	adds	r3, #8
 8006d70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	9800      	ldr	r0, [sp, #0]
 8006d76:	b015      	add	sp, #84	; 0x54
 8006d78:	ecbd 8b02 	vpop	{d8}
 8006d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d80:	4b94      	ldr	r3, [pc, #592]	; (8006fd4 <_dtoa_r+0x304>)
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	3303      	adds	r3, #3
 8006d86:	e7f3      	b.n	8006d70 <_dtoa_r+0xa0>
 8006d88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	ec51 0b17 	vmov	r0, r1, d7
 8006d92:	2300      	movs	r3, #0
 8006d94:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006d98:	f7f9 fe96 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d9c:	4680      	mov	r8, r0
 8006d9e:	b158      	cbz	r0, 8006db8 <_dtoa_r+0xe8>
 8006da0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006da2:	2301      	movs	r3, #1
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 8551 	beq.w	8007850 <_dtoa_r+0xb80>
 8006dae:	488b      	ldr	r0, [pc, #556]	; (8006fdc <_dtoa_r+0x30c>)
 8006db0:	6018      	str	r0, [r3, #0]
 8006db2:	1e43      	subs	r3, r0, #1
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	e7dd      	b.n	8006d74 <_dtoa_r+0xa4>
 8006db8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006dbc:	aa12      	add	r2, sp, #72	; 0x48
 8006dbe:	a913      	add	r1, sp, #76	; 0x4c
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f001 f8ad 	bl	8007f20 <__d2b>
 8006dc6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006dca:	4683      	mov	fp, r0
 8006dcc:	2d00      	cmp	r5, #0
 8006dce:	d07c      	beq.n	8006eca <_dtoa_r+0x1fa>
 8006dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dd2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006dd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dda:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006dde:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006de2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006de6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006dea:	4b7d      	ldr	r3, [pc, #500]	; (8006fe0 <_dtoa_r+0x310>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	4630      	mov	r0, r6
 8006df0:	4639      	mov	r1, r7
 8006df2:	f7f9 fa49 	bl	8000288 <__aeabi_dsub>
 8006df6:	a36e      	add	r3, pc, #440	; (adr r3, 8006fb0 <_dtoa_r+0x2e0>)
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	f7f9 fbfc 	bl	80005f8 <__aeabi_dmul>
 8006e00:	a36d      	add	r3, pc, #436	; (adr r3, 8006fb8 <_dtoa_r+0x2e8>)
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	f7f9 fa41 	bl	800028c <__adddf3>
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	460f      	mov	r7, r1
 8006e10:	f7f9 fb88 	bl	8000524 <__aeabi_i2d>
 8006e14:	a36a      	add	r3, pc, #424	; (adr r3, 8006fc0 <_dtoa_r+0x2f0>)
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	f7f9 fbed 	bl	80005f8 <__aeabi_dmul>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	4630      	mov	r0, r6
 8006e24:	4639      	mov	r1, r7
 8006e26:	f7f9 fa31 	bl	800028c <__adddf3>
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460f      	mov	r7, r1
 8006e2e:	f7f9 fe93 	bl	8000b58 <__aeabi_d2iz>
 8006e32:	2200      	movs	r2, #0
 8006e34:	4682      	mov	sl, r0
 8006e36:	2300      	movs	r3, #0
 8006e38:	4630      	mov	r0, r6
 8006e3a:	4639      	mov	r1, r7
 8006e3c:	f7f9 fe4e 	bl	8000adc <__aeabi_dcmplt>
 8006e40:	b148      	cbz	r0, 8006e56 <_dtoa_r+0x186>
 8006e42:	4650      	mov	r0, sl
 8006e44:	f7f9 fb6e 	bl	8000524 <__aeabi_i2d>
 8006e48:	4632      	mov	r2, r6
 8006e4a:	463b      	mov	r3, r7
 8006e4c:	f7f9 fe3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e50:	b908      	cbnz	r0, 8006e56 <_dtoa_r+0x186>
 8006e52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e56:	f1ba 0f16 	cmp.w	sl, #22
 8006e5a:	d854      	bhi.n	8006f06 <_dtoa_r+0x236>
 8006e5c:	4b61      	ldr	r3, [pc, #388]	; (8006fe4 <_dtoa_r+0x314>)
 8006e5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e6a:	f7f9 fe37 	bl	8000adc <__aeabi_dcmplt>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d04b      	beq.n	8006f0a <_dtoa_r+0x23a>
 8006e72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e76:	2300      	movs	r3, #0
 8006e78:	930e      	str	r3, [sp, #56]	; 0x38
 8006e7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e7c:	1b5d      	subs	r5, r3, r5
 8006e7e:	1e6b      	subs	r3, r5, #1
 8006e80:	9304      	str	r3, [sp, #16]
 8006e82:	bf43      	ittte	mi
 8006e84:	2300      	movmi	r3, #0
 8006e86:	f1c5 0801 	rsbmi	r8, r5, #1
 8006e8a:	9304      	strmi	r3, [sp, #16]
 8006e8c:	f04f 0800 	movpl.w	r8, #0
 8006e90:	f1ba 0f00 	cmp.w	sl, #0
 8006e94:	db3b      	blt.n	8006f0e <_dtoa_r+0x23e>
 8006e96:	9b04      	ldr	r3, [sp, #16]
 8006e98:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006e9c:	4453      	add	r3, sl
 8006e9e:	9304      	str	r3, [sp, #16]
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	9306      	str	r3, [sp, #24]
 8006ea4:	9b05      	ldr	r3, [sp, #20]
 8006ea6:	2b09      	cmp	r3, #9
 8006ea8:	d869      	bhi.n	8006f7e <_dtoa_r+0x2ae>
 8006eaa:	2b05      	cmp	r3, #5
 8006eac:	bfc4      	itt	gt
 8006eae:	3b04      	subgt	r3, #4
 8006eb0:	9305      	strgt	r3, [sp, #20]
 8006eb2:	9b05      	ldr	r3, [sp, #20]
 8006eb4:	f1a3 0302 	sub.w	r3, r3, #2
 8006eb8:	bfcc      	ite	gt
 8006eba:	2500      	movgt	r5, #0
 8006ebc:	2501      	movle	r5, #1
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d869      	bhi.n	8006f96 <_dtoa_r+0x2c6>
 8006ec2:	e8df f003 	tbb	[pc, r3]
 8006ec6:	4e2c      	.short	0x4e2c
 8006ec8:	5a4c      	.short	0x5a4c
 8006eca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006ece:	441d      	add	r5, r3
 8006ed0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	bfc1      	itttt	gt
 8006ed8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006edc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006ee0:	fa09 f303 	lslgt.w	r3, r9, r3
 8006ee4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006ee8:	bfda      	itte	le
 8006eea:	f1c3 0320 	rsble	r3, r3, #32
 8006eee:	fa06 f003 	lslle.w	r0, r6, r3
 8006ef2:	4318      	orrgt	r0, r3
 8006ef4:	f7f9 fb06 	bl	8000504 <__aeabi_ui2d>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	4606      	mov	r6, r0
 8006efc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006f00:	3d01      	subs	r5, #1
 8006f02:	9310      	str	r3, [sp, #64]	; 0x40
 8006f04:	e771      	b.n	8006dea <_dtoa_r+0x11a>
 8006f06:	2301      	movs	r3, #1
 8006f08:	e7b6      	b.n	8006e78 <_dtoa_r+0x1a8>
 8006f0a:	900e      	str	r0, [sp, #56]	; 0x38
 8006f0c:	e7b5      	b.n	8006e7a <_dtoa_r+0x1aa>
 8006f0e:	f1ca 0300 	rsb	r3, sl, #0
 8006f12:	9306      	str	r3, [sp, #24]
 8006f14:	2300      	movs	r3, #0
 8006f16:	eba8 080a 	sub.w	r8, r8, sl
 8006f1a:	930d      	str	r3, [sp, #52]	; 0x34
 8006f1c:	e7c2      	b.n	8006ea4 <_dtoa_r+0x1d4>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	9308      	str	r3, [sp, #32]
 8006f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	dc39      	bgt.n	8006f9c <_dtoa_r+0x2cc>
 8006f28:	f04f 0901 	mov.w	r9, #1
 8006f2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f30:	464b      	mov	r3, r9
 8006f32:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006f36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006f38:	2200      	movs	r2, #0
 8006f3a:	6042      	str	r2, [r0, #4]
 8006f3c:	2204      	movs	r2, #4
 8006f3e:	f102 0614 	add.w	r6, r2, #20
 8006f42:	429e      	cmp	r6, r3
 8006f44:	6841      	ldr	r1, [r0, #4]
 8006f46:	d92f      	bls.n	8006fa8 <_dtoa_r+0x2d8>
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f000 fcc7 	bl	80078dc <_Balloc>
 8006f4e:	9000      	str	r0, [sp, #0]
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d14b      	bne.n	8006fec <_dtoa_r+0x31c>
 8006f54:	4b24      	ldr	r3, [pc, #144]	; (8006fe8 <_dtoa_r+0x318>)
 8006f56:	4602      	mov	r2, r0
 8006f58:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006f5c:	e6d1      	b.n	8006d02 <_dtoa_r+0x32>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e7de      	b.n	8006f20 <_dtoa_r+0x250>
 8006f62:	2300      	movs	r3, #0
 8006f64:	9308      	str	r3, [sp, #32]
 8006f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f68:	eb0a 0903 	add.w	r9, sl, r3
 8006f6c:	f109 0301 	add.w	r3, r9, #1
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	9301      	str	r3, [sp, #4]
 8006f74:	bfb8      	it	lt
 8006f76:	2301      	movlt	r3, #1
 8006f78:	e7dd      	b.n	8006f36 <_dtoa_r+0x266>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e7f2      	b.n	8006f64 <_dtoa_r+0x294>
 8006f7e:	2501      	movs	r5, #1
 8006f80:	2300      	movs	r3, #0
 8006f82:	9305      	str	r3, [sp, #20]
 8006f84:	9508      	str	r5, [sp, #32]
 8006f86:	f04f 39ff 	mov.w	r9, #4294967295
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f90:	2312      	movs	r3, #18
 8006f92:	9209      	str	r2, [sp, #36]	; 0x24
 8006f94:	e7cf      	b.n	8006f36 <_dtoa_r+0x266>
 8006f96:	2301      	movs	r3, #1
 8006f98:	9308      	str	r3, [sp, #32]
 8006f9a:	e7f4      	b.n	8006f86 <_dtoa_r+0x2b6>
 8006f9c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006fa0:	f8cd 9004 	str.w	r9, [sp, #4]
 8006fa4:	464b      	mov	r3, r9
 8006fa6:	e7c6      	b.n	8006f36 <_dtoa_r+0x266>
 8006fa8:	3101      	adds	r1, #1
 8006faa:	6041      	str	r1, [r0, #4]
 8006fac:	0052      	lsls	r2, r2, #1
 8006fae:	e7c6      	b.n	8006f3e <_dtoa_r+0x26e>
 8006fb0:	636f4361 	.word	0x636f4361
 8006fb4:	3fd287a7 	.word	0x3fd287a7
 8006fb8:	8b60c8b3 	.word	0x8b60c8b3
 8006fbc:	3fc68a28 	.word	0x3fc68a28
 8006fc0:	509f79fb 	.word	0x509f79fb
 8006fc4:	3fd34413 	.word	0x3fd34413
 8006fc8:	0800910d 	.word	0x0800910d
 8006fcc:	08009124 	.word	0x08009124
 8006fd0:	7ff00000 	.word	0x7ff00000
 8006fd4:	08009109 	.word	0x08009109
 8006fd8:	08009100 	.word	0x08009100
 8006fdc:	080090dd 	.word	0x080090dd
 8006fe0:	3ff80000 	.word	0x3ff80000
 8006fe4:	08009220 	.word	0x08009220
 8006fe8:	08009183 	.word	0x08009183
 8006fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fee:	9a00      	ldr	r2, [sp, #0]
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	9b01      	ldr	r3, [sp, #4]
 8006ff4:	2b0e      	cmp	r3, #14
 8006ff6:	f200 80ad 	bhi.w	8007154 <_dtoa_r+0x484>
 8006ffa:	2d00      	cmp	r5, #0
 8006ffc:	f000 80aa 	beq.w	8007154 <_dtoa_r+0x484>
 8007000:	f1ba 0f00 	cmp.w	sl, #0
 8007004:	dd36      	ble.n	8007074 <_dtoa_r+0x3a4>
 8007006:	4ac3      	ldr	r2, [pc, #780]	; (8007314 <_dtoa_r+0x644>)
 8007008:	f00a 030f 	and.w	r3, sl, #15
 800700c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007010:	ed93 7b00 	vldr	d7, [r3]
 8007014:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007018:	ea4f 172a 	mov.w	r7, sl, asr #4
 800701c:	eeb0 8a47 	vmov.f32	s16, s14
 8007020:	eef0 8a67 	vmov.f32	s17, s15
 8007024:	d016      	beq.n	8007054 <_dtoa_r+0x384>
 8007026:	4bbc      	ldr	r3, [pc, #752]	; (8007318 <_dtoa_r+0x648>)
 8007028:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800702c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007030:	f7f9 fc0c 	bl	800084c <__aeabi_ddiv>
 8007034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007038:	f007 070f 	and.w	r7, r7, #15
 800703c:	2503      	movs	r5, #3
 800703e:	4eb6      	ldr	r6, [pc, #728]	; (8007318 <_dtoa_r+0x648>)
 8007040:	b957      	cbnz	r7, 8007058 <_dtoa_r+0x388>
 8007042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007046:	ec53 2b18 	vmov	r2, r3, d8
 800704a:	f7f9 fbff 	bl	800084c <__aeabi_ddiv>
 800704e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007052:	e029      	b.n	80070a8 <_dtoa_r+0x3d8>
 8007054:	2502      	movs	r5, #2
 8007056:	e7f2      	b.n	800703e <_dtoa_r+0x36e>
 8007058:	07f9      	lsls	r1, r7, #31
 800705a:	d508      	bpl.n	800706e <_dtoa_r+0x39e>
 800705c:	ec51 0b18 	vmov	r0, r1, d8
 8007060:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007064:	f7f9 fac8 	bl	80005f8 <__aeabi_dmul>
 8007068:	ec41 0b18 	vmov	d8, r0, r1
 800706c:	3501      	adds	r5, #1
 800706e:	107f      	asrs	r7, r7, #1
 8007070:	3608      	adds	r6, #8
 8007072:	e7e5      	b.n	8007040 <_dtoa_r+0x370>
 8007074:	f000 80a6 	beq.w	80071c4 <_dtoa_r+0x4f4>
 8007078:	f1ca 0600 	rsb	r6, sl, #0
 800707c:	4ba5      	ldr	r3, [pc, #660]	; (8007314 <_dtoa_r+0x644>)
 800707e:	4fa6      	ldr	r7, [pc, #664]	; (8007318 <_dtoa_r+0x648>)
 8007080:	f006 020f 	and.w	r2, r6, #15
 8007084:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007090:	f7f9 fab2 	bl	80005f8 <__aeabi_dmul>
 8007094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007098:	1136      	asrs	r6, r6, #4
 800709a:	2300      	movs	r3, #0
 800709c:	2502      	movs	r5, #2
 800709e:	2e00      	cmp	r6, #0
 80070a0:	f040 8085 	bne.w	80071ae <_dtoa_r+0x4de>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1d2      	bne.n	800704e <_dtoa_r+0x37e>
 80070a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 808c 	beq.w	80071c8 <_dtoa_r+0x4f8>
 80070b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80070b4:	4b99      	ldr	r3, [pc, #612]	; (800731c <_dtoa_r+0x64c>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	4630      	mov	r0, r6
 80070ba:	4639      	mov	r1, r7
 80070bc:	f7f9 fd0e 	bl	8000adc <__aeabi_dcmplt>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	f000 8081 	beq.w	80071c8 <_dtoa_r+0x4f8>
 80070c6:	9b01      	ldr	r3, [sp, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d07d      	beq.n	80071c8 <_dtoa_r+0x4f8>
 80070cc:	f1b9 0f00 	cmp.w	r9, #0
 80070d0:	dd3c      	ble.n	800714c <_dtoa_r+0x47c>
 80070d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80070d6:	9307      	str	r3, [sp, #28]
 80070d8:	2200      	movs	r2, #0
 80070da:	4b91      	ldr	r3, [pc, #580]	; (8007320 <_dtoa_r+0x650>)
 80070dc:	4630      	mov	r0, r6
 80070de:	4639      	mov	r1, r7
 80070e0:	f7f9 fa8a 	bl	80005f8 <__aeabi_dmul>
 80070e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070e8:	3501      	adds	r5, #1
 80070ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80070ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80070f2:	4628      	mov	r0, r5
 80070f4:	f7f9 fa16 	bl	8000524 <__aeabi_i2d>
 80070f8:	4632      	mov	r2, r6
 80070fa:	463b      	mov	r3, r7
 80070fc:	f7f9 fa7c 	bl	80005f8 <__aeabi_dmul>
 8007100:	4b88      	ldr	r3, [pc, #544]	; (8007324 <_dtoa_r+0x654>)
 8007102:	2200      	movs	r2, #0
 8007104:	f7f9 f8c2 	bl	800028c <__adddf3>
 8007108:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800710c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007110:	9303      	str	r3, [sp, #12]
 8007112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007114:	2b00      	cmp	r3, #0
 8007116:	d15c      	bne.n	80071d2 <_dtoa_r+0x502>
 8007118:	4b83      	ldr	r3, [pc, #524]	; (8007328 <_dtoa_r+0x658>)
 800711a:	2200      	movs	r2, #0
 800711c:	4630      	mov	r0, r6
 800711e:	4639      	mov	r1, r7
 8007120:	f7f9 f8b2 	bl	8000288 <__aeabi_dsub>
 8007124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007128:	4606      	mov	r6, r0
 800712a:	460f      	mov	r7, r1
 800712c:	f7f9 fcf4 	bl	8000b18 <__aeabi_dcmpgt>
 8007130:	2800      	cmp	r0, #0
 8007132:	f040 8296 	bne.w	8007662 <_dtoa_r+0x992>
 8007136:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800713a:	4630      	mov	r0, r6
 800713c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007140:	4639      	mov	r1, r7
 8007142:	f7f9 fccb 	bl	8000adc <__aeabi_dcmplt>
 8007146:	2800      	cmp	r0, #0
 8007148:	f040 8288 	bne.w	800765c <_dtoa_r+0x98c>
 800714c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007150:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007154:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007156:	2b00      	cmp	r3, #0
 8007158:	f2c0 8158 	blt.w	800740c <_dtoa_r+0x73c>
 800715c:	f1ba 0f0e 	cmp.w	sl, #14
 8007160:	f300 8154 	bgt.w	800740c <_dtoa_r+0x73c>
 8007164:	4b6b      	ldr	r3, [pc, #428]	; (8007314 <_dtoa_r+0x644>)
 8007166:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800716a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800716e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007170:	2b00      	cmp	r3, #0
 8007172:	f280 80e3 	bge.w	800733c <_dtoa_r+0x66c>
 8007176:	9b01      	ldr	r3, [sp, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	f300 80df 	bgt.w	800733c <_dtoa_r+0x66c>
 800717e:	f040 826d 	bne.w	800765c <_dtoa_r+0x98c>
 8007182:	4b69      	ldr	r3, [pc, #420]	; (8007328 <_dtoa_r+0x658>)
 8007184:	2200      	movs	r2, #0
 8007186:	4640      	mov	r0, r8
 8007188:	4649      	mov	r1, r9
 800718a:	f7f9 fa35 	bl	80005f8 <__aeabi_dmul>
 800718e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007192:	f7f9 fcb7 	bl	8000b04 <__aeabi_dcmpge>
 8007196:	9e01      	ldr	r6, [sp, #4]
 8007198:	4637      	mov	r7, r6
 800719a:	2800      	cmp	r0, #0
 800719c:	f040 8243 	bne.w	8007626 <_dtoa_r+0x956>
 80071a0:	9d00      	ldr	r5, [sp, #0]
 80071a2:	2331      	movs	r3, #49	; 0x31
 80071a4:	f805 3b01 	strb.w	r3, [r5], #1
 80071a8:	f10a 0a01 	add.w	sl, sl, #1
 80071ac:	e23f      	b.n	800762e <_dtoa_r+0x95e>
 80071ae:	07f2      	lsls	r2, r6, #31
 80071b0:	d505      	bpl.n	80071be <_dtoa_r+0x4ee>
 80071b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071b6:	f7f9 fa1f 	bl	80005f8 <__aeabi_dmul>
 80071ba:	3501      	adds	r5, #1
 80071bc:	2301      	movs	r3, #1
 80071be:	1076      	asrs	r6, r6, #1
 80071c0:	3708      	adds	r7, #8
 80071c2:	e76c      	b.n	800709e <_dtoa_r+0x3ce>
 80071c4:	2502      	movs	r5, #2
 80071c6:	e76f      	b.n	80070a8 <_dtoa_r+0x3d8>
 80071c8:	9b01      	ldr	r3, [sp, #4]
 80071ca:	f8cd a01c 	str.w	sl, [sp, #28]
 80071ce:	930c      	str	r3, [sp, #48]	; 0x30
 80071d0:	e78d      	b.n	80070ee <_dtoa_r+0x41e>
 80071d2:	9900      	ldr	r1, [sp, #0]
 80071d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80071d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071d8:	4b4e      	ldr	r3, [pc, #312]	; (8007314 <_dtoa_r+0x644>)
 80071da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071de:	4401      	add	r1, r0
 80071e0:	9102      	str	r1, [sp, #8]
 80071e2:	9908      	ldr	r1, [sp, #32]
 80071e4:	eeb0 8a47 	vmov.f32	s16, s14
 80071e8:	eef0 8a67 	vmov.f32	s17, s15
 80071ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80071f4:	2900      	cmp	r1, #0
 80071f6:	d045      	beq.n	8007284 <_dtoa_r+0x5b4>
 80071f8:	494c      	ldr	r1, [pc, #304]	; (800732c <_dtoa_r+0x65c>)
 80071fa:	2000      	movs	r0, #0
 80071fc:	f7f9 fb26 	bl	800084c <__aeabi_ddiv>
 8007200:	ec53 2b18 	vmov	r2, r3, d8
 8007204:	f7f9 f840 	bl	8000288 <__aeabi_dsub>
 8007208:	9d00      	ldr	r5, [sp, #0]
 800720a:	ec41 0b18 	vmov	d8, r0, r1
 800720e:	4639      	mov	r1, r7
 8007210:	4630      	mov	r0, r6
 8007212:	f7f9 fca1 	bl	8000b58 <__aeabi_d2iz>
 8007216:	900c      	str	r0, [sp, #48]	; 0x30
 8007218:	f7f9 f984 	bl	8000524 <__aeabi_i2d>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	4630      	mov	r0, r6
 8007222:	4639      	mov	r1, r7
 8007224:	f7f9 f830 	bl	8000288 <__aeabi_dsub>
 8007228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800722a:	3330      	adds	r3, #48	; 0x30
 800722c:	f805 3b01 	strb.w	r3, [r5], #1
 8007230:	ec53 2b18 	vmov	r2, r3, d8
 8007234:	4606      	mov	r6, r0
 8007236:	460f      	mov	r7, r1
 8007238:	f7f9 fc50 	bl	8000adc <__aeabi_dcmplt>
 800723c:	2800      	cmp	r0, #0
 800723e:	d165      	bne.n	800730c <_dtoa_r+0x63c>
 8007240:	4632      	mov	r2, r6
 8007242:	463b      	mov	r3, r7
 8007244:	4935      	ldr	r1, [pc, #212]	; (800731c <_dtoa_r+0x64c>)
 8007246:	2000      	movs	r0, #0
 8007248:	f7f9 f81e 	bl	8000288 <__aeabi_dsub>
 800724c:	ec53 2b18 	vmov	r2, r3, d8
 8007250:	f7f9 fc44 	bl	8000adc <__aeabi_dcmplt>
 8007254:	2800      	cmp	r0, #0
 8007256:	f040 80b9 	bne.w	80073cc <_dtoa_r+0x6fc>
 800725a:	9b02      	ldr	r3, [sp, #8]
 800725c:	429d      	cmp	r5, r3
 800725e:	f43f af75 	beq.w	800714c <_dtoa_r+0x47c>
 8007262:	4b2f      	ldr	r3, [pc, #188]	; (8007320 <_dtoa_r+0x650>)
 8007264:	ec51 0b18 	vmov	r0, r1, d8
 8007268:	2200      	movs	r2, #0
 800726a:	f7f9 f9c5 	bl	80005f8 <__aeabi_dmul>
 800726e:	4b2c      	ldr	r3, [pc, #176]	; (8007320 <_dtoa_r+0x650>)
 8007270:	ec41 0b18 	vmov	d8, r0, r1
 8007274:	2200      	movs	r2, #0
 8007276:	4630      	mov	r0, r6
 8007278:	4639      	mov	r1, r7
 800727a:	f7f9 f9bd 	bl	80005f8 <__aeabi_dmul>
 800727e:	4606      	mov	r6, r0
 8007280:	460f      	mov	r7, r1
 8007282:	e7c4      	b.n	800720e <_dtoa_r+0x53e>
 8007284:	ec51 0b17 	vmov	r0, r1, d7
 8007288:	f7f9 f9b6 	bl	80005f8 <__aeabi_dmul>
 800728c:	9b02      	ldr	r3, [sp, #8]
 800728e:	9d00      	ldr	r5, [sp, #0]
 8007290:	930c      	str	r3, [sp, #48]	; 0x30
 8007292:	ec41 0b18 	vmov	d8, r0, r1
 8007296:	4639      	mov	r1, r7
 8007298:	4630      	mov	r0, r6
 800729a:	f7f9 fc5d 	bl	8000b58 <__aeabi_d2iz>
 800729e:	9011      	str	r0, [sp, #68]	; 0x44
 80072a0:	f7f9 f940 	bl	8000524 <__aeabi_i2d>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4630      	mov	r0, r6
 80072aa:	4639      	mov	r1, r7
 80072ac:	f7f8 ffec 	bl	8000288 <__aeabi_dsub>
 80072b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072b2:	3330      	adds	r3, #48	; 0x30
 80072b4:	f805 3b01 	strb.w	r3, [r5], #1
 80072b8:	9b02      	ldr	r3, [sp, #8]
 80072ba:	429d      	cmp	r5, r3
 80072bc:	4606      	mov	r6, r0
 80072be:	460f      	mov	r7, r1
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	d134      	bne.n	8007330 <_dtoa_r+0x660>
 80072c6:	4b19      	ldr	r3, [pc, #100]	; (800732c <_dtoa_r+0x65c>)
 80072c8:	ec51 0b18 	vmov	r0, r1, d8
 80072cc:	f7f8 ffde 	bl	800028c <__adddf3>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4630      	mov	r0, r6
 80072d6:	4639      	mov	r1, r7
 80072d8:	f7f9 fc1e 	bl	8000b18 <__aeabi_dcmpgt>
 80072dc:	2800      	cmp	r0, #0
 80072de:	d175      	bne.n	80073cc <_dtoa_r+0x6fc>
 80072e0:	ec53 2b18 	vmov	r2, r3, d8
 80072e4:	4911      	ldr	r1, [pc, #68]	; (800732c <_dtoa_r+0x65c>)
 80072e6:	2000      	movs	r0, #0
 80072e8:	f7f8 ffce 	bl	8000288 <__aeabi_dsub>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4630      	mov	r0, r6
 80072f2:	4639      	mov	r1, r7
 80072f4:	f7f9 fbf2 	bl	8000adc <__aeabi_dcmplt>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	f43f af27 	beq.w	800714c <_dtoa_r+0x47c>
 80072fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007300:	1e6b      	subs	r3, r5, #1
 8007302:	930c      	str	r3, [sp, #48]	; 0x30
 8007304:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007308:	2b30      	cmp	r3, #48	; 0x30
 800730a:	d0f8      	beq.n	80072fe <_dtoa_r+0x62e>
 800730c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007310:	e04a      	b.n	80073a8 <_dtoa_r+0x6d8>
 8007312:	bf00      	nop
 8007314:	08009220 	.word	0x08009220
 8007318:	080091f8 	.word	0x080091f8
 800731c:	3ff00000 	.word	0x3ff00000
 8007320:	40240000 	.word	0x40240000
 8007324:	401c0000 	.word	0x401c0000
 8007328:	40140000 	.word	0x40140000
 800732c:	3fe00000 	.word	0x3fe00000
 8007330:	4baf      	ldr	r3, [pc, #700]	; (80075f0 <_dtoa_r+0x920>)
 8007332:	f7f9 f961 	bl	80005f8 <__aeabi_dmul>
 8007336:	4606      	mov	r6, r0
 8007338:	460f      	mov	r7, r1
 800733a:	e7ac      	b.n	8007296 <_dtoa_r+0x5c6>
 800733c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007340:	9d00      	ldr	r5, [sp, #0]
 8007342:	4642      	mov	r2, r8
 8007344:	464b      	mov	r3, r9
 8007346:	4630      	mov	r0, r6
 8007348:	4639      	mov	r1, r7
 800734a:	f7f9 fa7f 	bl	800084c <__aeabi_ddiv>
 800734e:	f7f9 fc03 	bl	8000b58 <__aeabi_d2iz>
 8007352:	9002      	str	r0, [sp, #8]
 8007354:	f7f9 f8e6 	bl	8000524 <__aeabi_i2d>
 8007358:	4642      	mov	r2, r8
 800735a:	464b      	mov	r3, r9
 800735c:	f7f9 f94c 	bl	80005f8 <__aeabi_dmul>
 8007360:	4602      	mov	r2, r0
 8007362:	460b      	mov	r3, r1
 8007364:	4630      	mov	r0, r6
 8007366:	4639      	mov	r1, r7
 8007368:	f7f8 ff8e 	bl	8000288 <__aeabi_dsub>
 800736c:	9e02      	ldr	r6, [sp, #8]
 800736e:	9f01      	ldr	r7, [sp, #4]
 8007370:	3630      	adds	r6, #48	; 0x30
 8007372:	f805 6b01 	strb.w	r6, [r5], #1
 8007376:	9e00      	ldr	r6, [sp, #0]
 8007378:	1bae      	subs	r6, r5, r6
 800737a:	42b7      	cmp	r7, r6
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	d137      	bne.n	80073f2 <_dtoa_r+0x722>
 8007382:	f7f8 ff83 	bl	800028c <__adddf3>
 8007386:	4642      	mov	r2, r8
 8007388:	464b      	mov	r3, r9
 800738a:	4606      	mov	r6, r0
 800738c:	460f      	mov	r7, r1
 800738e:	f7f9 fbc3 	bl	8000b18 <__aeabi_dcmpgt>
 8007392:	b9c8      	cbnz	r0, 80073c8 <_dtoa_r+0x6f8>
 8007394:	4642      	mov	r2, r8
 8007396:	464b      	mov	r3, r9
 8007398:	4630      	mov	r0, r6
 800739a:	4639      	mov	r1, r7
 800739c:	f7f9 fb94 	bl	8000ac8 <__aeabi_dcmpeq>
 80073a0:	b110      	cbz	r0, 80073a8 <_dtoa_r+0x6d8>
 80073a2:	9b02      	ldr	r3, [sp, #8]
 80073a4:	07d9      	lsls	r1, r3, #31
 80073a6:	d40f      	bmi.n	80073c8 <_dtoa_r+0x6f8>
 80073a8:	4620      	mov	r0, r4
 80073aa:	4659      	mov	r1, fp
 80073ac:	f000 fad6 	bl	800795c <_Bfree>
 80073b0:	2300      	movs	r3, #0
 80073b2:	702b      	strb	r3, [r5, #0]
 80073b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073b6:	f10a 0001 	add.w	r0, sl, #1
 80073ba:	6018      	str	r0, [r3, #0]
 80073bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f43f acd8 	beq.w	8006d74 <_dtoa_r+0xa4>
 80073c4:	601d      	str	r5, [r3, #0]
 80073c6:	e4d5      	b.n	8006d74 <_dtoa_r+0xa4>
 80073c8:	f8cd a01c 	str.w	sl, [sp, #28]
 80073cc:	462b      	mov	r3, r5
 80073ce:	461d      	mov	r5, r3
 80073d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073d4:	2a39      	cmp	r2, #57	; 0x39
 80073d6:	d108      	bne.n	80073ea <_dtoa_r+0x71a>
 80073d8:	9a00      	ldr	r2, [sp, #0]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d1f7      	bne.n	80073ce <_dtoa_r+0x6fe>
 80073de:	9a07      	ldr	r2, [sp, #28]
 80073e0:	9900      	ldr	r1, [sp, #0]
 80073e2:	3201      	adds	r2, #1
 80073e4:	9207      	str	r2, [sp, #28]
 80073e6:	2230      	movs	r2, #48	; 0x30
 80073e8:	700a      	strb	r2, [r1, #0]
 80073ea:	781a      	ldrb	r2, [r3, #0]
 80073ec:	3201      	adds	r2, #1
 80073ee:	701a      	strb	r2, [r3, #0]
 80073f0:	e78c      	b.n	800730c <_dtoa_r+0x63c>
 80073f2:	4b7f      	ldr	r3, [pc, #508]	; (80075f0 <_dtoa_r+0x920>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	f7f9 f8ff 	bl	80005f8 <__aeabi_dmul>
 80073fa:	2200      	movs	r2, #0
 80073fc:	2300      	movs	r3, #0
 80073fe:	4606      	mov	r6, r0
 8007400:	460f      	mov	r7, r1
 8007402:	f7f9 fb61 	bl	8000ac8 <__aeabi_dcmpeq>
 8007406:	2800      	cmp	r0, #0
 8007408:	d09b      	beq.n	8007342 <_dtoa_r+0x672>
 800740a:	e7cd      	b.n	80073a8 <_dtoa_r+0x6d8>
 800740c:	9a08      	ldr	r2, [sp, #32]
 800740e:	2a00      	cmp	r2, #0
 8007410:	f000 80c4 	beq.w	800759c <_dtoa_r+0x8cc>
 8007414:	9a05      	ldr	r2, [sp, #20]
 8007416:	2a01      	cmp	r2, #1
 8007418:	f300 80a8 	bgt.w	800756c <_dtoa_r+0x89c>
 800741c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800741e:	2a00      	cmp	r2, #0
 8007420:	f000 80a0 	beq.w	8007564 <_dtoa_r+0x894>
 8007424:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007428:	9e06      	ldr	r6, [sp, #24]
 800742a:	4645      	mov	r5, r8
 800742c:	9a04      	ldr	r2, [sp, #16]
 800742e:	2101      	movs	r1, #1
 8007430:	441a      	add	r2, r3
 8007432:	4620      	mov	r0, r4
 8007434:	4498      	add	r8, r3
 8007436:	9204      	str	r2, [sp, #16]
 8007438:	f000 fb4c 	bl	8007ad4 <__i2b>
 800743c:	4607      	mov	r7, r0
 800743e:	2d00      	cmp	r5, #0
 8007440:	dd0b      	ble.n	800745a <_dtoa_r+0x78a>
 8007442:	9b04      	ldr	r3, [sp, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	dd08      	ble.n	800745a <_dtoa_r+0x78a>
 8007448:	42ab      	cmp	r3, r5
 800744a:	9a04      	ldr	r2, [sp, #16]
 800744c:	bfa8      	it	ge
 800744e:	462b      	movge	r3, r5
 8007450:	eba8 0803 	sub.w	r8, r8, r3
 8007454:	1aed      	subs	r5, r5, r3
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	9304      	str	r3, [sp, #16]
 800745a:	9b06      	ldr	r3, [sp, #24]
 800745c:	b1fb      	cbz	r3, 800749e <_dtoa_r+0x7ce>
 800745e:	9b08      	ldr	r3, [sp, #32]
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 809f 	beq.w	80075a4 <_dtoa_r+0x8d4>
 8007466:	2e00      	cmp	r6, #0
 8007468:	dd11      	ble.n	800748e <_dtoa_r+0x7be>
 800746a:	4639      	mov	r1, r7
 800746c:	4632      	mov	r2, r6
 800746e:	4620      	mov	r0, r4
 8007470:	f000 fbec 	bl	8007c4c <__pow5mult>
 8007474:	465a      	mov	r2, fp
 8007476:	4601      	mov	r1, r0
 8007478:	4607      	mov	r7, r0
 800747a:	4620      	mov	r0, r4
 800747c:	f000 fb40 	bl	8007b00 <__multiply>
 8007480:	4659      	mov	r1, fp
 8007482:	9007      	str	r0, [sp, #28]
 8007484:	4620      	mov	r0, r4
 8007486:	f000 fa69 	bl	800795c <_Bfree>
 800748a:	9b07      	ldr	r3, [sp, #28]
 800748c:	469b      	mov	fp, r3
 800748e:	9b06      	ldr	r3, [sp, #24]
 8007490:	1b9a      	subs	r2, r3, r6
 8007492:	d004      	beq.n	800749e <_dtoa_r+0x7ce>
 8007494:	4659      	mov	r1, fp
 8007496:	4620      	mov	r0, r4
 8007498:	f000 fbd8 	bl	8007c4c <__pow5mult>
 800749c:	4683      	mov	fp, r0
 800749e:	2101      	movs	r1, #1
 80074a0:	4620      	mov	r0, r4
 80074a2:	f000 fb17 	bl	8007ad4 <__i2b>
 80074a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	4606      	mov	r6, r0
 80074ac:	dd7c      	ble.n	80075a8 <_dtoa_r+0x8d8>
 80074ae:	461a      	mov	r2, r3
 80074b0:	4601      	mov	r1, r0
 80074b2:	4620      	mov	r0, r4
 80074b4:	f000 fbca 	bl	8007c4c <__pow5mult>
 80074b8:	9b05      	ldr	r3, [sp, #20]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	4606      	mov	r6, r0
 80074be:	dd76      	ble.n	80075ae <_dtoa_r+0x8de>
 80074c0:	2300      	movs	r3, #0
 80074c2:	9306      	str	r3, [sp, #24]
 80074c4:	6933      	ldr	r3, [r6, #16]
 80074c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80074ca:	6918      	ldr	r0, [r3, #16]
 80074cc:	f000 fab2 	bl	8007a34 <__hi0bits>
 80074d0:	f1c0 0020 	rsb	r0, r0, #32
 80074d4:	9b04      	ldr	r3, [sp, #16]
 80074d6:	4418      	add	r0, r3
 80074d8:	f010 001f 	ands.w	r0, r0, #31
 80074dc:	f000 8086 	beq.w	80075ec <_dtoa_r+0x91c>
 80074e0:	f1c0 0320 	rsb	r3, r0, #32
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	dd7f      	ble.n	80075e8 <_dtoa_r+0x918>
 80074e8:	f1c0 001c 	rsb	r0, r0, #28
 80074ec:	9b04      	ldr	r3, [sp, #16]
 80074ee:	4403      	add	r3, r0
 80074f0:	4480      	add	r8, r0
 80074f2:	4405      	add	r5, r0
 80074f4:	9304      	str	r3, [sp, #16]
 80074f6:	f1b8 0f00 	cmp.w	r8, #0
 80074fa:	dd05      	ble.n	8007508 <_dtoa_r+0x838>
 80074fc:	4659      	mov	r1, fp
 80074fe:	4642      	mov	r2, r8
 8007500:	4620      	mov	r0, r4
 8007502:	f000 fbfd 	bl	8007d00 <__lshift>
 8007506:	4683      	mov	fp, r0
 8007508:	9b04      	ldr	r3, [sp, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	dd05      	ble.n	800751a <_dtoa_r+0x84a>
 800750e:	4631      	mov	r1, r6
 8007510:	461a      	mov	r2, r3
 8007512:	4620      	mov	r0, r4
 8007514:	f000 fbf4 	bl	8007d00 <__lshift>
 8007518:	4606      	mov	r6, r0
 800751a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800751c:	2b00      	cmp	r3, #0
 800751e:	d069      	beq.n	80075f4 <_dtoa_r+0x924>
 8007520:	4631      	mov	r1, r6
 8007522:	4658      	mov	r0, fp
 8007524:	f000 fc58 	bl	8007dd8 <__mcmp>
 8007528:	2800      	cmp	r0, #0
 800752a:	da63      	bge.n	80075f4 <_dtoa_r+0x924>
 800752c:	2300      	movs	r3, #0
 800752e:	4659      	mov	r1, fp
 8007530:	220a      	movs	r2, #10
 8007532:	4620      	mov	r0, r4
 8007534:	f000 fa34 	bl	80079a0 <__multadd>
 8007538:	9b08      	ldr	r3, [sp, #32]
 800753a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800753e:	4683      	mov	fp, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 818f 	beq.w	8007864 <_dtoa_r+0xb94>
 8007546:	4639      	mov	r1, r7
 8007548:	2300      	movs	r3, #0
 800754a:	220a      	movs	r2, #10
 800754c:	4620      	mov	r0, r4
 800754e:	f000 fa27 	bl	80079a0 <__multadd>
 8007552:	f1b9 0f00 	cmp.w	r9, #0
 8007556:	4607      	mov	r7, r0
 8007558:	f300 808e 	bgt.w	8007678 <_dtoa_r+0x9a8>
 800755c:	9b05      	ldr	r3, [sp, #20]
 800755e:	2b02      	cmp	r3, #2
 8007560:	dc50      	bgt.n	8007604 <_dtoa_r+0x934>
 8007562:	e089      	b.n	8007678 <_dtoa_r+0x9a8>
 8007564:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007566:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800756a:	e75d      	b.n	8007428 <_dtoa_r+0x758>
 800756c:	9b01      	ldr	r3, [sp, #4]
 800756e:	1e5e      	subs	r6, r3, #1
 8007570:	9b06      	ldr	r3, [sp, #24]
 8007572:	42b3      	cmp	r3, r6
 8007574:	bfbf      	itttt	lt
 8007576:	9b06      	ldrlt	r3, [sp, #24]
 8007578:	9606      	strlt	r6, [sp, #24]
 800757a:	1af2      	sublt	r2, r6, r3
 800757c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800757e:	bfb6      	itet	lt
 8007580:	189b      	addlt	r3, r3, r2
 8007582:	1b9e      	subge	r6, r3, r6
 8007584:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007586:	9b01      	ldr	r3, [sp, #4]
 8007588:	bfb8      	it	lt
 800758a:	2600      	movlt	r6, #0
 800758c:	2b00      	cmp	r3, #0
 800758e:	bfb5      	itete	lt
 8007590:	eba8 0503 	sublt.w	r5, r8, r3
 8007594:	9b01      	ldrge	r3, [sp, #4]
 8007596:	2300      	movlt	r3, #0
 8007598:	4645      	movge	r5, r8
 800759a:	e747      	b.n	800742c <_dtoa_r+0x75c>
 800759c:	9e06      	ldr	r6, [sp, #24]
 800759e:	9f08      	ldr	r7, [sp, #32]
 80075a0:	4645      	mov	r5, r8
 80075a2:	e74c      	b.n	800743e <_dtoa_r+0x76e>
 80075a4:	9a06      	ldr	r2, [sp, #24]
 80075a6:	e775      	b.n	8007494 <_dtoa_r+0x7c4>
 80075a8:	9b05      	ldr	r3, [sp, #20]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	dc18      	bgt.n	80075e0 <_dtoa_r+0x910>
 80075ae:	9b02      	ldr	r3, [sp, #8]
 80075b0:	b9b3      	cbnz	r3, 80075e0 <_dtoa_r+0x910>
 80075b2:	9b03      	ldr	r3, [sp, #12]
 80075b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075b8:	b9a3      	cbnz	r3, 80075e4 <_dtoa_r+0x914>
 80075ba:	9b03      	ldr	r3, [sp, #12]
 80075bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075c0:	0d1b      	lsrs	r3, r3, #20
 80075c2:	051b      	lsls	r3, r3, #20
 80075c4:	b12b      	cbz	r3, 80075d2 <_dtoa_r+0x902>
 80075c6:	9b04      	ldr	r3, [sp, #16]
 80075c8:	3301      	adds	r3, #1
 80075ca:	9304      	str	r3, [sp, #16]
 80075cc:	f108 0801 	add.w	r8, r8, #1
 80075d0:	2301      	movs	r3, #1
 80075d2:	9306      	str	r3, [sp, #24]
 80075d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f47f af74 	bne.w	80074c4 <_dtoa_r+0x7f4>
 80075dc:	2001      	movs	r0, #1
 80075de:	e779      	b.n	80074d4 <_dtoa_r+0x804>
 80075e0:	2300      	movs	r3, #0
 80075e2:	e7f6      	b.n	80075d2 <_dtoa_r+0x902>
 80075e4:	9b02      	ldr	r3, [sp, #8]
 80075e6:	e7f4      	b.n	80075d2 <_dtoa_r+0x902>
 80075e8:	d085      	beq.n	80074f6 <_dtoa_r+0x826>
 80075ea:	4618      	mov	r0, r3
 80075ec:	301c      	adds	r0, #28
 80075ee:	e77d      	b.n	80074ec <_dtoa_r+0x81c>
 80075f0:	40240000 	.word	0x40240000
 80075f4:	9b01      	ldr	r3, [sp, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	dc38      	bgt.n	800766c <_dtoa_r+0x99c>
 80075fa:	9b05      	ldr	r3, [sp, #20]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	dd35      	ble.n	800766c <_dtoa_r+0x99c>
 8007600:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007604:	f1b9 0f00 	cmp.w	r9, #0
 8007608:	d10d      	bne.n	8007626 <_dtoa_r+0x956>
 800760a:	4631      	mov	r1, r6
 800760c:	464b      	mov	r3, r9
 800760e:	2205      	movs	r2, #5
 8007610:	4620      	mov	r0, r4
 8007612:	f000 f9c5 	bl	80079a0 <__multadd>
 8007616:	4601      	mov	r1, r0
 8007618:	4606      	mov	r6, r0
 800761a:	4658      	mov	r0, fp
 800761c:	f000 fbdc 	bl	8007dd8 <__mcmp>
 8007620:	2800      	cmp	r0, #0
 8007622:	f73f adbd 	bgt.w	80071a0 <_dtoa_r+0x4d0>
 8007626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007628:	9d00      	ldr	r5, [sp, #0]
 800762a:	ea6f 0a03 	mvn.w	sl, r3
 800762e:	f04f 0800 	mov.w	r8, #0
 8007632:	4631      	mov	r1, r6
 8007634:	4620      	mov	r0, r4
 8007636:	f000 f991 	bl	800795c <_Bfree>
 800763a:	2f00      	cmp	r7, #0
 800763c:	f43f aeb4 	beq.w	80073a8 <_dtoa_r+0x6d8>
 8007640:	f1b8 0f00 	cmp.w	r8, #0
 8007644:	d005      	beq.n	8007652 <_dtoa_r+0x982>
 8007646:	45b8      	cmp	r8, r7
 8007648:	d003      	beq.n	8007652 <_dtoa_r+0x982>
 800764a:	4641      	mov	r1, r8
 800764c:	4620      	mov	r0, r4
 800764e:	f000 f985 	bl	800795c <_Bfree>
 8007652:	4639      	mov	r1, r7
 8007654:	4620      	mov	r0, r4
 8007656:	f000 f981 	bl	800795c <_Bfree>
 800765a:	e6a5      	b.n	80073a8 <_dtoa_r+0x6d8>
 800765c:	2600      	movs	r6, #0
 800765e:	4637      	mov	r7, r6
 8007660:	e7e1      	b.n	8007626 <_dtoa_r+0x956>
 8007662:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007664:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007668:	4637      	mov	r7, r6
 800766a:	e599      	b.n	80071a0 <_dtoa_r+0x4d0>
 800766c:	9b08      	ldr	r3, [sp, #32]
 800766e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 80fd 	beq.w	8007872 <_dtoa_r+0xba2>
 8007678:	2d00      	cmp	r5, #0
 800767a:	dd05      	ble.n	8007688 <_dtoa_r+0x9b8>
 800767c:	4639      	mov	r1, r7
 800767e:	462a      	mov	r2, r5
 8007680:	4620      	mov	r0, r4
 8007682:	f000 fb3d 	bl	8007d00 <__lshift>
 8007686:	4607      	mov	r7, r0
 8007688:	9b06      	ldr	r3, [sp, #24]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d05c      	beq.n	8007748 <_dtoa_r+0xa78>
 800768e:	6879      	ldr	r1, [r7, #4]
 8007690:	4620      	mov	r0, r4
 8007692:	f000 f923 	bl	80078dc <_Balloc>
 8007696:	4605      	mov	r5, r0
 8007698:	b928      	cbnz	r0, 80076a6 <_dtoa_r+0x9d6>
 800769a:	4b80      	ldr	r3, [pc, #512]	; (800789c <_dtoa_r+0xbcc>)
 800769c:	4602      	mov	r2, r0
 800769e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80076a2:	f7ff bb2e 	b.w	8006d02 <_dtoa_r+0x32>
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	3202      	adds	r2, #2
 80076aa:	0092      	lsls	r2, r2, #2
 80076ac:	f107 010c 	add.w	r1, r7, #12
 80076b0:	300c      	adds	r0, #12
 80076b2:	f000 f905 	bl	80078c0 <memcpy>
 80076b6:	2201      	movs	r2, #1
 80076b8:	4629      	mov	r1, r5
 80076ba:	4620      	mov	r0, r4
 80076bc:	f000 fb20 	bl	8007d00 <__lshift>
 80076c0:	9b00      	ldr	r3, [sp, #0]
 80076c2:	3301      	adds	r3, #1
 80076c4:	9301      	str	r3, [sp, #4]
 80076c6:	9b00      	ldr	r3, [sp, #0]
 80076c8:	444b      	add	r3, r9
 80076ca:	9307      	str	r3, [sp, #28]
 80076cc:	9b02      	ldr	r3, [sp, #8]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	46b8      	mov	r8, r7
 80076d4:	9306      	str	r3, [sp, #24]
 80076d6:	4607      	mov	r7, r0
 80076d8:	9b01      	ldr	r3, [sp, #4]
 80076da:	4631      	mov	r1, r6
 80076dc:	3b01      	subs	r3, #1
 80076de:	4658      	mov	r0, fp
 80076e0:	9302      	str	r3, [sp, #8]
 80076e2:	f7ff fa67 	bl	8006bb4 <quorem>
 80076e6:	4603      	mov	r3, r0
 80076e8:	3330      	adds	r3, #48	; 0x30
 80076ea:	9004      	str	r0, [sp, #16]
 80076ec:	4641      	mov	r1, r8
 80076ee:	4658      	mov	r0, fp
 80076f0:	9308      	str	r3, [sp, #32]
 80076f2:	f000 fb71 	bl	8007dd8 <__mcmp>
 80076f6:	463a      	mov	r2, r7
 80076f8:	4681      	mov	r9, r0
 80076fa:	4631      	mov	r1, r6
 80076fc:	4620      	mov	r0, r4
 80076fe:	f000 fb87 	bl	8007e10 <__mdiff>
 8007702:	68c2      	ldr	r2, [r0, #12]
 8007704:	9b08      	ldr	r3, [sp, #32]
 8007706:	4605      	mov	r5, r0
 8007708:	bb02      	cbnz	r2, 800774c <_dtoa_r+0xa7c>
 800770a:	4601      	mov	r1, r0
 800770c:	4658      	mov	r0, fp
 800770e:	f000 fb63 	bl	8007dd8 <__mcmp>
 8007712:	9b08      	ldr	r3, [sp, #32]
 8007714:	4602      	mov	r2, r0
 8007716:	4629      	mov	r1, r5
 8007718:	4620      	mov	r0, r4
 800771a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800771e:	f000 f91d 	bl	800795c <_Bfree>
 8007722:	9b05      	ldr	r3, [sp, #20]
 8007724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007726:	9d01      	ldr	r5, [sp, #4]
 8007728:	ea43 0102 	orr.w	r1, r3, r2
 800772c:	9b06      	ldr	r3, [sp, #24]
 800772e:	430b      	orrs	r3, r1
 8007730:	9b08      	ldr	r3, [sp, #32]
 8007732:	d10d      	bne.n	8007750 <_dtoa_r+0xa80>
 8007734:	2b39      	cmp	r3, #57	; 0x39
 8007736:	d029      	beq.n	800778c <_dtoa_r+0xabc>
 8007738:	f1b9 0f00 	cmp.w	r9, #0
 800773c:	dd01      	ble.n	8007742 <_dtoa_r+0xa72>
 800773e:	9b04      	ldr	r3, [sp, #16]
 8007740:	3331      	adds	r3, #49	; 0x31
 8007742:	9a02      	ldr	r2, [sp, #8]
 8007744:	7013      	strb	r3, [r2, #0]
 8007746:	e774      	b.n	8007632 <_dtoa_r+0x962>
 8007748:	4638      	mov	r0, r7
 800774a:	e7b9      	b.n	80076c0 <_dtoa_r+0x9f0>
 800774c:	2201      	movs	r2, #1
 800774e:	e7e2      	b.n	8007716 <_dtoa_r+0xa46>
 8007750:	f1b9 0f00 	cmp.w	r9, #0
 8007754:	db06      	blt.n	8007764 <_dtoa_r+0xa94>
 8007756:	9905      	ldr	r1, [sp, #20]
 8007758:	ea41 0909 	orr.w	r9, r1, r9
 800775c:	9906      	ldr	r1, [sp, #24]
 800775e:	ea59 0101 	orrs.w	r1, r9, r1
 8007762:	d120      	bne.n	80077a6 <_dtoa_r+0xad6>
 8007764:	2a00      	cmp	r2, #0
 8007766:	ddec      	ble.n	8007742 <_dtoa_r+0xa72>
 8007768:	4659      	mov	r1, fp
 800776a:	2201      	movs	r2, #1
 800776c:	4620      	mov	r0, r4
 800776e:	9301      	str	r3, [sp, #4]
 8007770:	f000 fac6 	bl	8007d00 <__lshift>
 8007774:	4631      	mov	r1, r6
 8007776:	4683      	mov	fp, r0
 8007778:	f000 fb2e 	bl	8007dd8 <__mcmp>
 800777c:	2800      	cmp	r0, #0
 800777e:	9b01      	ldr	r3, [sp, #4]
 8007780:	dc02      	bgt.n	8007788 <_dtoa_r+0xab8>
 8007782:	d1de      	bne.n	8007742 <_dtoa_r+0xa72>
 8007784:	07da      	lsls	r2, r3, #31
 8007786:	d5dc      	bpl.n	8007742 <_dtoa_r+0xa72>
 8007788:	2b39      	cmp	r3, #57	; 0x39
 800778a:	d1d8      	bne.n	800773e <_dtoa_r+0xa6e>
 800778c:	9a02      	ldr	r2, [sp, #8]
 800778e:	2339      	movs	r3, #57	; 0x39
 8007790:	7013      	strb	r3, [r2, #0]
 8007792:	462b      	mov	r3, r5
 8007794:	461d      	mov	r5, r3
 8007796:	3b01      	subs	r3, #1
 8007798:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800779c:	2a39      	cmp	r2, #57	; 0x39
 800779e:	d050      	beq.n	8007842 <_dtoa_r+0xb72>
 80077a0:	3201      	adds	r2, #1
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	e745      	b.n	8007632 <_dtoa_r+0x962>
 80077a6:	2a00      	cmp	r2, #0
 80077a8:	dd03      	ble.n	80077b2 <_dtoa_r+0xae2>
 80077aa:	2b39      	cmp	r3, #57	; 0x39
 80077ac:	d0ee      	beq.n	800778c <_dtoa_r+0xabc>
 80077ae:	3301      	adds	r3, #1
 80077b0:	e7c7      	b.n	8007742 <_dtoa_r+0xa72>
 80077b2:	9a01      	ldr	r2, [sp, #4]
 80077b4:	9907      	ldr	r1, [sp, #28]
 80077b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80077ba:	428a      	cmp	r2, r1
 80077bc:	d02a      	beq.n	8007814 <_dtoa_r+0xb44>
 80077be:	4659      	mov	r1, fp
 80077c0:	2300      	movs	r3, #0
 80077c2:	220a      	movs	r2, #10
 80077c4:	4620      	mov	r0, r4
 80077c6:	f000 f8eb 	bl	80079a0 <__multadd>
 80077ca:	45b8      	cmp	r8, r7
 80077cc:	4683      	mov	fp, r0
 80077ce:	f04f 0300 	mov.w	r3, #0
 80077d2:	f04f 020a 	mov.w	r2, #10
 80077d6:	4641      	mov	r1, r8
 80077d8:	4620      	mov	r0, r4
 80077da:	d107      	bne.n	80077ec <_dtoa_r+0xb1c>
 80077dc:	f000 f8e0 	bl	80079a0 <__multadd>
 80077e0:	4680      	mov	r8, r0
 80077e2:	4607      	mov	r7, r0
 80077e4:	9b01      	ldr	r3, [sp, #4]
 80077e6:	3301      	adds	r3, #1
 80077e8:	9301      	str	r3, [sp, #4]
 80077ea:	e775      	b.n	80076d8 <_dtoa_r+0xa08>
 80077ec:	f000 f8d8 	bl	80079a0 <__multadd>
 80077f0:	4639      	mov	r1, r7
 80077f2:	4680      	mov	r8, r0
 80077f4:	2300      	movs	r3, #0
 80077f6:	220a      	movs	r2, #10
 80077f8:	4620      	mov	r0, r4
 80077fa:	f000 f8d1 	bl	80079a0 <__multadd>
 80077fe:	4607      	mov	r7, r0
 8007800:	e7f0      	b.n	80077e4 <_dtoa_r+0xb14>
 8007802:	f1b9 0f00 	cmp.w	r9, #0
 8007806:	9a00      	ldr	r2, [sp, #0]
 8007808:	bfcc      	ite	gt
 800780a:	464d      	movgt	r5, r9
 800780c:	2501      	movle	r5, #1
 800780e:	4415      	add	r5, r2
 8007810:	f04f 0800 	mov.w	r8, #0
 8007814:	4659      	mov	r1, fp
 8007816:	2201      	movs	r2, #1
 8007818:	4620      	mov	r0, r4
 800781a:	9301      	str	r3, [sp, #4]
 800781c:	f000 fa70 	bl	8007d00 <__lshift>
 8007820:	4631      	mov	r1, r6
 8007822:	4683      	mov	fp, r0
 8007824:	f000 fad8 	bl	8007dd8 <__mcmp>
 8007828:	2800      	cmp	r0, #0
 800782a:	dcb2      	bgt.n	8007792 <_dtoa_r+0xac2>
 800782c:	d102      	bne.n	8007834 <_dtoa_r+0xb64>
 800782e:	9b01      	ldr	r3, [sp, #4]
 8007830:	07db      	lsls	r3, r3, #31
 8007832:	d4ae      	bmi.n	8007792 <_dtoa_r+0xac2>
 8007834:	462b      	mov	r3, r5
 8007836:	461d      	mov	r5, r3
 8007838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800783c:	2a30      	cmp	r2, #48	; 0x30
 800783e:	d0fa      	beq.n	8007836 <_dtoa_r+0xb66>
 8007840:	e6f7      	b.n	8007632 <_dtoa_r+0x962>
 8007842:	9a00      	ldr	r2, [sp, #0]
 8007844:	429a      	cmp	r2, r3
 8007846:	d1a5      	bne.n	8007794 <_dtoa_r+0xac4>
 8007848:	f10a 0a01 	add.w	sl, sl, #1
 800784c:	2331      	movs	r3, #49	; 0x31
 800784e:	e779      	b.n	8007744 <_dtoa_r+0xa74>
 8007850:	4b13      	ldr	r3, [pc, #76]	; (80078a0 <_dtoa_r+0xbd0>)
 8007852:	f7ff baaf 	b.w	8006db4 <_dtoa_r+0xe4>
 8007856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007858:	2b00      	cmp	r3, #0
 800785a:	f47f aa86 	bne.w	8006d6a <_dtoa_r+0x9a>
 800785e:	4b11      	ldr	r3, [pc, #68]	; (80078a4 <_dtoa_r+0xbd4>)
 8007860:	f7ff baa8 	b.w	8006db4 <_dtoa_r+0xe4>
 8007864:	f1b9 0f00 	cmp.w	r9, #0
 8007868:	dc03      	bgt.n	8007872 <_dtoa_r+0xba2>
 800786a:	9b05      	ldr	r3, [sp, #20]
 800786c:	2b02      	cmp	r3, #2
 800786e:	f73f aec9 	bgt.w	8007604 <_dtoa_r+0x934>
 8007872:	9d00      	ldr	r5, [sp, #0]
 8007874:	4631      	mov	r1, r6
 8007876:	4658      	mov	r0, fp
 8007878:	f7ff f99c 	bl	8006bb4 <quorem>
 800787c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007880:	f805 3b01 	strb.w	r3, [r5], #1
 8007884:	9a00      	ldr	r2, [sp, #0]
 8007886:	1aaa      	subs	r2, r5, r2
 8007888:	4591      	cmp	r9, r2
 800788a:	ddba      	ble.n	8007802 <_dtoa_r+0xb32>
 800788c:	4659      	mov	r1, fp
 800788e:	2300      	movs	r3, #0
 8007890:	220a      	movs	r2, #10
 8007892:	4620      	mov	r0, r4
 8007894:	f000 f884 	bl	80079a0 <__multadd>
 8007898:	4683      	mov	fp, r0
 800789a:	e7eb      	b.n	8007874 <_dtoa_r+0xba4>
 800789c:	08009183 	.word	0x08009183
 80078a0:	080090dc 	.word	0x080090dc
 80078a4:	08009100 	.word	0x08009100

080078a8 <_localeconv_r>:
 80078a8:	4800      	ldr	r0, [pc, #0]	; (80078ac <_localeconv_r+0x4>)
 80078aa:	4770      	bx	lr
 80078ac:	20000160 	.word	0x20000160

080078b0 <malloc>:
 80078b0:	4b02      	ldr	r3, [pc, #8]	; (80078bc <malloc+0xc>)
 80078b2:	4601      	mov	r1, r0
 80078b4:	6818      	ldr	r0, [r3, #0]
 80078b6:	f000 bbef 	b.w	8008098 <_malloc_r>
 80078ba:	bf00      	nop
 80078bc:	2000000c 	.word	0x2000000c

080078c0 <memcpy>:
 80078c0:	440a      	add	r2, r1
 80078c2:	4291      	cmp	r1, r2
 80078c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80078c8:	d100      	bne.n	80078cc <memcpy+0xc>
 80078ca:	4770      	bx	lr
 80078cc:	b510      	push	{r4, lr}
 80078ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078d6:	4291      	cmp	r1, r2
 80078d8:	d1f9      	bne.n	80078ce <memcpy+0xe>
 80078da:	bd10      	pop	{r4, pc}

080078dc <_Balloc>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078e0:	4604      	mov	r4, r0
 80078e2:	460d      	mov	r5, r1
 80078e4:	b976      	cbnz	r6, 8007904 <_Balloc+0x28>
 80078e6:	2010      	movs	r0, #16
 80078e8:	f7ff ffe2 	bl	80078b0 <malloc>
 80078ec:	4602      	mov	r2, r0
 80078ee:	6260      	str	r0, [r4, #36]	; 0x24
 80078f0:	b920      	cbnz	r0, 80078fc <_Balloc+0x20>
 80078f2:	4b18      	ldr	r3, [pc, #96]	; (8007954 <_Balloc+0x78>)
 80078f4:	4818      	ldr	r0, [pc, #96]	; (8007958 <_Balloc+0x7c>)
 80078f6:	2166      	movs	r1, #102	; 0x66
 80078f8:	f000 fd94 	bl	8008424 <__assert_func>
 80078fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007900:	6006      	str	r6, [r0, #0]
 8007902:	60c6      	str	r6, [r0, #12]
 8007904:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007906:	68f3      	ldr	r3, [r6, #12]
 8007908:	b183      	cbz	r3, 800792c <_Balloc+0x50>
 800790a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007912:	b9b8      	cbnz	r0, 8007944 <_Balloc+0x68>
 8007914:	2101      	movs	r1, #1
 8007916:	fa01 f605 	lsl.w	r6, r1, r5
 800791a:	1d72      	adds	r2, r6, #5
 800791c:	0092      	lsls	r2, r2, #2
 800791e:	4620      	mov	r0, r4
 8007920:	f000 fb5a 	bl	8007fd8 <_calloc_r>
 8007924:	b160      	cbz	r0, 8007940 <_Balloc+0x64>
 8007926:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800792a:	e00e      	b.n	800794a <_Balloc+0x6e>
 800792c:	2221      	movs	r2, #33	; 0x21
 800792e:	2104      	movs	r1, #4
 8007930:	4620      	mov	r0, r4
 8007932:	f000 fb51 	bl	8007fd8 <_calloc_r>
 8007936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007938:	60f0      	str	r0, [r6, #12]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e4      	bne.n	800790a <_Balloc+0x2e>
 8007940:	2000      	movs	r0, #0
 8007942:	bd70      	pop	{r4, r5, r6, pc}
 8007944:	6802      	ldr	r2, [r0, #0]
 8007946:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800794a:	2300      	movs	r3, #0
 800794c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007950:	e7f7      	b.n	8007942 <_Balloc+0x66>
 8007952:	bf00      	nop
 8007954:	0800910d 	.word	0x0800910d
 8007958:	08009194 	.word	0x08009194

0800795c <_Bfree>:
 800795c:	b570      	push	{r4, r5, r6, lr}
 800795e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007960:	4605      	mov	r5, r0
 8007962:	460c      	mov	r4, r1
 8007964:	b976      	cbnz	r6, 8007984 <_Bfree+0x28>
 8007966:	2010      	movs	r0, #16
 8007968:	f7ff ffa2 	bl	80078b0 <malloc>
 800796c:	4602      	mov	r2, r0
 800796e:	6268      	str	r0, [r5, #36]	; 0x24
 8007970:	b920      	cbnz	r0, 800797c <_Bfree+0x20>
 8007972:	4b09      	ldr	r3, [pc, #36]	; (8007998 <_Bfree+0x3c>)
 8007974:	4809      	ldr	r0, [pc, #36]	; (800799c <_Bfree+0x40>)
 8007976:	218a      	movs	r1, #138	; 0x8a
 8007978:	f000 fd54 	bl	8008424 <__assert_func>
 800797c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007980:	6006      	str	r6, [r0, #0]
 8007982:	60c6      	str	r6, [r0, #12]
 8007984:	b13c      	cbz	r4, 8007996 <_Bfree+0x3a>
 8007986:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007988:	6862      	ldr	r2, [r4, #4]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007990:	6021      	str	r1, [r4, #0]
 8007992:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	0800910d 	.word	0x0800910d
 800799c:	08009194 	.word	0x08009194

080079a0 <__multadd>:
 80079a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a4:	690e      	ldr	r6, [r1, #16]
 80079a6:	4607      	mov	r7, r0
 80079a8:	4698      	mov	r8, r3
 80079aa:	460c      	mov	r4, r1
 80079ac:	f101 0014 	add.w	r0, r1, #20
 80079b0:	2300      	movs	r3, #0
 80079b2:	6805      	ldr	r5, [r0, #0]
 80079b4:	b2a9      	uxth	r1, r5
 80079b6:	fb02 8101 	mla	r1, r2, r1, r8
 80079ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80079be:	0c2d      	lsrs	r5, r5, #16
 80079c0:	fb02 c505 	mla	r5, r2, r5, ip
 80079c4:	b289      	uxth	r1, r1
 80079c6:	3301      	adds	r3, #1
 80079c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80079cc:	429e      	cmp	r6, r3
 80079ce:	f840 1b04 	str.w	r1, [r0], #4
 80079d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80079d6:	dcec      	bgt.n	80079b2 <__multadd+0x12>
 80079d8:	f1b8 0f00 	cmp.w	r8, #0
 80079dc:	d022      	beq.n	8007a24 <__multadd+0x84>
 80079de:	68a3      	ldr	r3, [r4, #8]
 80079e0:	42b3      	cmp	r3, r6
 80079e2:	dc19      	bgt.n	8007a18 <__multadd+0x78>
 80079e4:	6861      	ldr	r1, [r4, #4]
 80079e6:	4638      	mov	r0, r7
 80079e8:	3101      	adds	r1, #1
 80079ea:	f7ff ff77 	bl	80078dc <_Balloc>
 80079ee:	4605      	mov	r5, r0
 80079f0:	b928      	cbnz	r0, 80079fe <__multadd+0x5e>
 80079f2:	4602      	mov	r2, r0
 80079f4:	4b0d      	ldr	r3, [pc, #52]	; (8007a2c <__multadd+0x8c>)
 80079f6:	480e      	ldr	r0, [pc, #56]	; (8007a30 <__multadd+0x90>)
 80079f8:	21b5      	movs	r1, #181	; 0xb5
 80079fa:	f000 fd13 	bl	8008424 <__assert_func>
 80079fe:	6922      	ldr	r2, [r4, #16]
 8007a00:	3202      	adds	r2, #2
 8007a02:	f104 010c 	add.w	r1, r4, #12
 8007a06:	0092      	lsls	r2, r2, #2
 8007a08:	300c      	adds	r0, #12
 8007a0a:	f7ff ff59 	bl	80078c0 <memcpy>
 8007a0e:	4621      	mov	r1, r4
 8007a10:	4638      	mov	r0, r7
 8007a12:	f7ff ffa3 	bl	800795c <_Bfree>
 8007a16:	462c      	mov	r4, r5
 8007a18:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007a1c:	3601      	adds	r6, #1
 8007a1e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007a22:	6126      	str	r6, [r4, #16]
 8007a24:	4620      	mov	r0, r4
 8007a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a2a:	bf00      	nop
 8007a2c:	08009183 	.word	0x08009183
 8007a30:	08009194 	.word	0x08009194

08007a34 <__hi0bits>:
 8007a34:	0c03      	lsrs	r3, r0, #16
 8007a36:	041b      	lsls	r3, r3, #16
 8007a38:	b9d3      	cbnz	r3, 8007a70 <__hi0bits+0x3c>
 8007a3a:	0400      	lsls	r0, r0, #16
 8007a3c:	2310      	movs	r3, #16
 8007a3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a42:	bf04      	itt	eq
 8007a44:	0200      	lsleq	r0, r0, #8
 8007a46:	3308      	addeq	r3, #8
 8007a48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007a4c:	bf04      	itt	eq
 8007a4e:	0100      	lsleq	r0, r0, #4
 8007a50:	3304      	addeq	r3, #4
 8007a52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a56:	bf04      	itt	eq
 8007a58:	0080      	lsleq	r0, r0, #2
 8007a5a:	3302      	addeq	r3, #2
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	db05      	blt.n	8007a6c <__hi0bits+0x38>
 8007a60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a64:	f103 0301 	add.w	r3, r3, #1
 8007a68:	bf08      	it	eq
 8007a6a:	2320      	moveq	r3, #32
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	4770      	bx	lr
 8007a70:	2300      	movs	r3, #0
 8007a72:	e7e4      	b.n	8007a3e <__hi0bits+0xa>

08007a74 <__lo0bits>:
 8007a74:	6803      	ldr	r3, [r0, #0]
 8007a76:	f013 0207 	ands.w	r2, r3, #7
 8007a7a:	4601      	mov	r1, r0
 8007a7c:	d00b      	beq.n	8007a96 <__lo0bits+0x22>
 8007a7e:	07da      	lsls	r2, r3, #31
 8007a80:	d424      	bmi.n	8007acc <__lo0bits+0x58>
 8007a82:	0798      	lsls	r0, r3, #30
 8007a84:	bf49      	itett	mi
 8007a86:	085b      	lsrmi	r3, r3, #1
 8007a88:	089b      	lsrpl	r3, r3, #2
 8007a8a:	2001      	movmi	r0, #1
 8007a8c:	600b      	strmi	r3, [r1, #0]
 8007a8e:	bf5c      	itt	pl
 8007a90:	600b      	strpl	r3, [r1, #0]
 8007a92:	2002      	movpl	r0, #2
 8007a94:	4770      	bx	lr
 8007a96:	b298      	uxth	r0, r3
 8007a98:	b9b0      	cbnz	r0, 8007ac8 <__lo0bits+0x54>
 8007a9a:	0c1b      	lsrs	r3, r3, #16
 8007a9c:	2010      	movs	r0, #16
 8007a9e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007aa2:	bf04      	itt	eq
 8007aa4:	0a1b      	lsreq	r3, r3, #8
 8007aa6:	3008      	addeq	r0, #8
 8007aa8:	071a      	lsls	r2, r3, #28
 8007aaa:	bf04      	itt	eq
 8007aac:	091b      	lsreq	r3, r3, #4
 8007aae:	3004      	addeq	r0, #4
 8007ab0:	079a      	lsls	r2, r3, #30
 8007ab2:	bf04      	itt	eq
 8007ab4:	089b      	lsreq	r3, r3, #2
 8007ab6:	3002      	addeq	r0, #2
 8007ab8:	07da      	lsls	r2, r3, #31
 8007aba:	d403      	bmi.n	8007ac4 <__lo0bits+0x50>
 8007abc:	085b      	lsrs	r3, r3, #1
 8007abe:	f100 0001 	add.w	r0, r0, #1
 8007ac2:	d005      	beq.n	8007ad0 <__lo0bits+0x5c>
 8007ac4:	600b      	str	r3, [r1, #0]
 8007ac6:	4770      	bx	lr
 8007ac8:	4610      	mov	r0, r2
 8007aca:	e7e8      	b.n	8007a9e <__lo0bits+0x2a>
 8007acc:	2000      	movs	r0, #0
 8007ace:	4770      	bx	lr
 8007ad0:	2020      	movs	r0, #32
 8007ad2:	4770      	bx	lr

08007ad4 <__i2b>:
 8007ad4:	b510      	push	{r4, lr}
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	2101      	movs	r1, #1
 8007ada:	f7ff feff 	bl	80078dc <_Balloc>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	b928      	cbnz	r0, 8007aee <__i2b+0x1a>
 8007ae2:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <__i2b+0x24>)
 8007ae4:	4805      	ldr	r0, [pc, #20]	; (8007afc <__i2b+0x28>)
 8007ae6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007aea:	f000 fc9b 	bl	8008424 <__assert_func>
 8007aee:	2301      	movs	r3, #1
 8007af0:	6144      	str	r4, [r0, #20]
 8007af2:	6103      	str	r3, [r0, #16]
 8007af4:	bd10      	pop	{r4, pc}
 8007af6:	bf00      	nop
 8007af8:	08009183 	.word	0x08009183
 8007afc:	08009194 	.word	0x08009194

08007b00 <__multiply>:
 8007b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b04:	4614      	mov	r4, r2
 8007b06:	690a      	ldr	r2, [r1, #16]
 8007b08:	6923      	ldr	r3, [r4, #16]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	bfb8      	it	lt
 8007b0e:	460b      	movlt	r3, r1
 8007b10:	460d      	mov	r5, r1
 8007b12:	bfbc      	itt	lt
 8007b14:	4625      	movlt	r5, r4
 8007b16:	461c      	movlt	r4, r3
 8007b18:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007b1c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007b20:	68ab      	ldr	r3, [r5, #8]
 8007b22:	6869      	ldr	r1, [r5, #4]
 8007b24:	eb0a 0709 	add.w	r7, sl, r9
 8007b28:	42bb      	cmp	r3, r7
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	bfb8      	it	lt
 8007b2e:	3101      	addlt	r1, #1
 8007b30:	f7ff fed4 	bl	80078dc <_Balloc>
 8007b34:	b930      	cbnz	r0, 8007b44 <__multiply+0x44>
 8007b36:	4602      	mov	r2, r0
 8007b38:	4b42      	ldr	r3, [pc, #264]	; (8007c44 <__multiply+0x144>)
 8007b3a:	4843      	ldr	r0, [pc, #268]	; (8007c48 <__multiply+0x148>)
 8007b3c:	f240 115d 	movw	r1, #349	; 0x15d
 8007b40:	f000 fc70 	bl	8008424 <__assert_func>
 8007b44:	f100 0614 	add.w	r6, r0, #20
 8007b48:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007b4c:	4633      	mov	r3, r6
 8007b4e:	2200      	movs	r2, #0
 8007b50:	4543      	cmp	r3, r8
 8007b52:	d31e      	bcc.n	8007b92 <__multiply+0x92>
 8007b54:	f105 0c14 	add.w	ip, r5, #20
 8007b58:	f104 0314 	add.w	r3, r4, #20
 8007b5c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007b60:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007b64:	9202      	str	r2, [sp, #8]
 8007b66:	ebac 0205 	sub.w	r2, ip, r5
 8007b6a:	3a15      	subs	r2, #21
 8007b6c:	f022 0203 	bic.w	r2, r2, #3
 8007b70:	3204      	adds	r2, #4
 8007b72:	f105 0115 	add.w	r1, r5, #21
 8007b76:	458c      	cmp	ip, r1
 8007b78:	bf38      	it	cc
 8007b7a:	2204      	movcc	r2, #4
 8007b7c:	9201      	str	r2, [sp, #4]
 8007b7e:	9a02      	ldr	r2, [sp, #8]
 8007b80:	9303      	str	r3, [sp, #12]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d808      	bhi.n	8007b98 <__multiply+0x98>
 8007b86:	2f00      	cmp	r7, #0
 8007b88:	dc55      	bgt.n	8007c36 <__multiply+0x136>
 8007b8a:	6107      	str	r7, [r0, #16]
 8007b8c:	b005      	add	sp, #20
 8007b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b92:	f843 2b04 	str.w	r2, [r3], #4
 8007b96:	e7db      	b.n	8007b50 <__multiply+0x50>
 8007b98:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b9c:	f1ba 0f00 	cmp.w	sl, #0
 8007ba0:	d020      	beq.n	8007be4 <__multiply+0xe4>
 8007ba2:	f105 0e14 	add.w	lr, r5, #20
 8007ba6:	46b1      	mov	r9, r6
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007bae:	f8d9 b000 	ldr.w	fp, [r9]
 8007bb2:	b2a1      	uxth	r1, r4
 8007bb4:	fa1f fb8b 	uxth.w	fp, fp
 8007bb8:	fb0a b101 	mla	r1, sl, r1, fp
 8007bbc:	4411      	add	r1, r2
 8007bbe:	f8d9 2000 	ldr.w	r2, [r9]
 8007bc2:	0c24      	lsrs	r4, r4, #16
 8007bc4:	0c12      	lsrs	r2, r2, #16
 8007bc6:	fb0a 2404 	mla	r4, sl, r4, r2
 8007bca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007bce:	b289      	uxth	r1, r1
 8007bd0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007bd4:	45f4      	cmp	ip, lr
 8007bd6:	f849 1b04 	str.w	r1, [r9], #4
 8007bda:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007bde:	d8e4      	bhi.n	8007baa <__multiply+0xaa>
 8007be0:	9901      	ldr	r1, [sp, #4]
 8007be2:	5072      	str	r2, [r6, r1]
 8007be4:	9a03      	ldr	r2, [sp, #12]
 8007be6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007bea:	3304      	adds	r3, #4
 8007bec:	f1b9 0f00 	cmp.w	r9, #0
 8007bf0:	d01f      	beq.n	8007c32 <__multiply+0x132>
 8007bf2:	6834      	ldr	r4, [r6, #0]
 8007bf4:	f105 0114 	add.w	r1, r5, #20
 8007bf8:	46b6      	mov	lr, r6
 8007bfa:	f04f 0a00 	mov.w	sl, #0
 8007bfe:	880a      	ldrh	r2, [r1, #0]
 8007c00:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007c04:	fb09 b202 	mla	r2, r9, r2, fp
 8007c08:	4492      	add	sl, r2
 8007c0a:	b2a4      	uxth	r4, r4
 8007c0c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007c10:	f84e 4b04 	str.w	r4, [lr], #4
 8007c14:	f851 4b04 	ldr.w	r4, [r1], #4
 8007c18:	f8be 2000 	ldrh.w	r2, [lr]
 8007c1c:	0c24      	lsrs	r4, r4, #16
 8007c1e:	fb09 2404 	mla	r4, r9, r4, r2
 8007c22:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007c26:	458c      	cmp	ip, r1
 8007c28:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007c2c:	d8e7      	bhi.n	8007bfe <__multiply+0xfe>
 8007c2e:	9a01      	ldr	r2, [sp, #4]
 8007c30:	50b4      	str	r4, [r6, r2]
 8007c32:	3604      	adds	r6, #4
 8007c34:	e7a3      	b.n	8007b7e <__multiply+0x7e>
 8007c36:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1a5      	bne.n	8007b8a <__multiply+0x8a>
 8007c3e:	3f01      	subs	r7, #1
 8007c40:	e7a1      	b.n	8007b86 <__multiply+0x86>
 8007c42:	bf00      	nop
 8007c44:	08009183 	.word	0x08009183
 8007c48:	08009194 	.word	0x08009194

08007c4c <__pow5mult>:
 8007c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c50:	4615      	mov	r5, r2
 8007c52:	f012 0203 	ands.w	r2, r2, #3
 8007c56:	4606      	mov	r6, r0
 8007c58:	460f      	mov	r7, r1
 8007c5a:	d007      	beq.n	8007c6c <__pow5mult+0x20>
 8007c5c:	4c25      	ldr	r4, [pc, #148]	; (8007cf4 <__pow5mult+0xa8>)
 8007c5e:	3a01      	subs	r2, #1
 8007c60:	2300      	movs	r3, #0
 8007c62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c66:	f7ff fe9b 	bl	80079a0 <__multadd>
 8007c6a:	4607      	mov	r7, r0
 8007c6c:	10ad      	asrs	r5, r5, #2
 8007c6e:	d03d      	beq.n	8007cec <__pow5mult+0xa0>
 8007c70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c72:	b97c      	cbnz	r4, 8007c94 <__pow5mult+0x48>
 8007c74:	2010      	movs	r0, #16
 8007c76:	f7ff fe1b 	bl	80078b0 <malloc>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	6270      	str	r0, [r6, #36]	; 0x24
 8007c7e:	b928      	cbnz	r0, 8007c8c <__pow5mult+0x40>
 8007c80:	4b1d      	ldr	r3, [pc, #116]	; (8007cf8 <__pow5mult+0xac>)
 8007c82:	481e      	ldr	r0, [pc, #120]	; (8007cfc <__pow5mult+0xb0>)
 8007c84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007c88:	f000 fbcc 	bl	8008424 <__assert_func>
 8007c8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c90:	6004      	str	r4, [r0, #0]
 8007c92:	60c4      	str	r4, [r0, #12]
 8007c94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c9c:	b94c      	cbnz	r4, 8007cb2 <__pow5mult+0x66>
 8007c9e:	f240 2171 	movw	r1, #625	; 0x271
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f7ff ff16 	bl	8007ad4 <__i2b>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cae:	4604      	mov	r4, r0
 8007cb0:	6003      	str	r3, [r0, #0]
 8007cb2:	f04f 0900 	mov.w	r9, #0
 8007cb6:	07eb      	lsls	r3, r5, #31
 8007cb8:	d50a      	bpl.n	8007cd0 <__pow5mult+0x84>
 8007cba:	4639      	mov	r1, r7
 8007cbc:	4622      	mov	r2, r4
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7ff ff1e 	bl	8007b00 <__multiply>
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	4680      	mov	r8, r0
 8007cc8:	4630      	mov	r0, r6
 8007cca:	f7ff fe47 	bl	800795c <_Bfree>
 8007cce:	4647      	mov	r7, r8
 8007cd0:	106d      	asrs	r5, r5, #1
 8007cd2:	d00b      	beq.n	8007cec <__pow5mult+0xa0>
 8007cd4:	6820      	ldr	r0, [r4, #0]
 8007cd6:	b938      	cbnz	r0, 8007ce8 <__pow5mult+0x9c>
 8007cd8:	4622      	mov	r2, r4
 8007cda:	4621      	mov	r1, r4
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f7ff ff0f 	bl	8007b00 <__multiply>
 8007ce2:	6020      	str	r0, [r4, #0]
 8007ce4:	f8c0 9000 	str.w	r9, [r0]
 8007ce8:	4604      	mov	r4, r0
 8007cea:	e7e4      	b.n	8007cb6 <__pow5mult+0x6a>
 8007cec:	4638      	mov	r0, r7
 8007cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cf2:	bf00      	nop
 8007cf4:	080092e8 	.word	0x080092e8
 8007cf8:	0800910d 	.word	0x0800910d
 8007cfc:	08009194 	.word	0x08009194

08007d00 <__lshift>:
 8007d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d04:	460c      	mov	r4, r1
 8007d06:	6849      	ldr	r1, [r1, #4]
 8007d08:	6923      	ldr	r3, [r4, #16]
 8007d0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	4607      	mov	r7, r0
 8007d12:	4691      	mov	r9, r2
 8007d14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d18:	f108 0601 	add.w	r6, r8, #1
 8007d1c:	42b3      	cmp	r3, r6
 8007d1e:	db0b      	blt.n	8007d38 <__lshift+0x38>
 8007d20:	4638      	mov	r0, r7
 8007d22:	f7ff fddb 	bl	80078dc <_Balloc>
 8007d26:	4605      	mov	r5, r0
 8007d28:	b948      	cbnz	r0, 8007d3e <__lshift+0x3e>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	4b28      	ldr	r3, [pc, #160]	; (8007dd0 <__lshift+0xd0>)
 8007d2e:	4829      	ldr	r0, [pc, #164]	; (8007dd4 <__lshift+0xd4>)
 8007d30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d34:	f000 fb76 	bl	8008424 <__assert_func>
 8007d38:	3101      	adds	r1, #1
 8007d3a:	005b      	lsls	r3, r3, #1
 8007d3c:	e7ee      	b.n	8007d1c <__lshift+0x1c>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f100 0114 	add.w	r1, r0, #20
 8007d44:	f100 0210 	add.w	r2, r0, #16
 8007d48:	4618      	mov	r0, r3
 8007d4a:	4553      	cmp	r3, sl
 8007d4c:	db33      	blt.n	8007db6 <__lshift+0xb6>
 8007d4e:	6920      	ldr	r0, [r4, #16]
 8007d50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d54:	f104 0314 	add.w	r3, r4, #20
 8007d58:	f019 091f 	ands.w	r9, r9, #31
 8007d5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d64:	d02b      	beq.n	8007dbe <__lshift+0xbe>
 8007d66:	f1c9 0e20 	rsb	lr, r9, #32
 8007d6a:	468a      	mov	sl, r1
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	6818      	ldr	r0, [r3, #0]
 8007d70:	fa00 f009 	lsl.w	r0, r0, r9
 8007d74:	4302      	orrs	r2, r0
 8007d76:	f84a 2b04 	str.w	r2, [sl], #4
 8007d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d7e:	459c      	cmp	ip, r3
 8007d80:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d84:	d8f3      	bhi.n	8007d6e <__lshift+0x6e>
 8007d86:	ebac 0304 	sub.w	r3, ip, r4
 8007d8a:	3b15      	subs	r3, #21
 8007d8c:	f023 0303 	bic.w	r3, r3, #3
 8007d90:	3304      	adds	r3, #4
 8007d92:	f104 0015 	add.w	r0, r4, #21
 8007d96:	4584      	cmp	ip, r0
 8007d98:	bf38      	it	cc
 8007d9a:	2304      	movcc	r3, #4
 8007d9c:	50ca      	str	r2, [r1, r3]
 8007d9e:	b10a      	cbz	r2, 8007da4 <__lshift+0xa4>
 8007da0:	f108 0602 	add.w	r6, r8, #2
 8007da4:	3e01      	subs	r6, #1
 8007da6:	4638      	mov	r0, r7
 8007da8:	612e      	str	r6, [r5, #16]
 8007daa:	4621      	mov	r1, r4
 8007dac:	f7ff fdd6 	bl	800795c <_Bfree>
 8007db0:	4628      	mov	r0, r5
 8007db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007dba:	3301      	adds	r3, #1
 8007dbc:	e7c5      	b.n	8007d4a <__lshift+0x4a>
 8007dbe:	3904      	subs	r1, #4
 8007dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007dc8:	459c      	cmp	ip, r3
 8007dca:	d8f9      	bhi.n	8007dc0 <__lshift+0xc0>
 8007dcc:	e7ea      	b.n	8007da4 <__lshift+0xa4>
 8007dce:	bf00      	nop
 8007dd0:	08009183 	.word	0x08009183
 8007dd4:	08009194 	.word	0x08009194

08007dd8 <__mcmp>:
 8007dd8:	b530      	push	{r4, r5, lr}
 8007dda:	6902      	ldr	r2, [r0, #16]
 8007ddc:	690c      	ldr	r4, [r1, #16]
 8007dde:	1b12      	subs	r2, r2, r4
 8007de0:	d10e      	bne.n	8007e00 <__mcmp+0x28>
 8007de2:	f100 0314 	add.w	r3, r0, #20
 8007de6:	3114      	adds	r1, #20
 8007de8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007dec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007df0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007df4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007df8:	42a5      	cmp	r5, r4
 8007dfa:	d003      	beq.n	8007e04 <__mcmp+0x2c>
 8007dfc:	d305      	bcc.n	8007e0a <__mcmp+0x32>
 8007dfe:	2201      	movs	r2, #1
 8007e00:	4610      	mov	r0, r2
 8007e02:	bd30      	pop	{r4, r5, pc}
 8007e04:	4283      	cmp	r3, r0
 8007e06:	d3f3      	bcc.n	8007df0 <__mcmp+0x18>
 8007e08:	e7fa      	b.n	8007e00 <__mcmp+0x28>
 8007e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0e:	e7f7      	b.n	8007e00 <__mcmp+0x28>

08007e10 <__mdiff>:
 8007e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	460c      	mov	r4, r1
 8007e16:	4606      	mov	r6, r0
 8007e18:	4611      	mov	r1, r2
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	4617      	mov	r7, r2
 8007e1e:	f7ff ffdb 	bl	8007dd8 <__mcmp>
 8007e22:	1e05      	subs	r5, r0, #0
 8007e24:	d110      	bne.n	8007e48 <__mdiff+0x38>
 8007e26:	4629      	mov	r1, r5
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f7ff fd57 	bl	80078dc <_Balloc>
 8007e2e:	b930      	cbnz	r0, 8007e3e <__mdiff+0x2e>
 8007e30:	4b39      	ldr	r3, [pc, #228]	; (8007f18 <__mdiff+0x108>)
 8007e32:	4602      	mov	r2, r0
 8007e34:	f240 2132 	movw	r1, #562	; 0x232
 8007e38:	4838      	ldr	r0, [pc, #224]	; (8007f1c <__mdiff+0x10c>)
 8007e3a:	f000 faf3 	bl	8008424 <__assert_func>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e48:	bfa4      	itt	ge
 8007e4a:	463b      	movge	r3, r7
 8007e4c:	4627      	movge	r7, r4
 8007e4e:	4630      	mov	r0, r6
 8007e50:	6879      	ldr	r1, [r7, #4]
 8007e52:	bfa6      	itte	ge
 8007e54:	461c      	movge	r4, r3
 8007e56:	2500      	movge	r5, #0
 8007e58:	2501      	movlt	r5, #1
 8007e5a:	f7ff fd3f 	bl	80078dc <_Balloc>
 8007e5e:	b920      	cbnz	r0, 8007e6a <__mdiff+0x5a>
 8007e60:	4b2d      	ldr	r3, [pc, #180]	; (8007f18 <__mdiff+0x108>)
 8007e62:	4602      	mov	r2, r0
 8007e64:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e68:	e7e6      	b.n	8007e38 <__mdiff+0x28>
 8007e6a:	693e      	ldr	r6, [r7, #16]
 8007e6c:	60c5      	str	r5, [r0, #12]
 8007e6e:	6925      	ldr	r5, [r4, #16]
 8007e70:	f107 0114 	add.w	r1, r7, #20
 8007e74:	f104 0914 	add.w	r9, r4, #20
 8007e78:	f100 0e14 	add.w	lr, r0, #20
 8007e7c:	f107 0210 	add.w	r2, r7, #16
 8007e80:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007e84:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007e88:	46f2      	mov	sl, lr
 8007e8a:	2700      	movs	r7, #0
 8007e8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e94:	fa1f f883 	uxth.w	r8, r3
 8007e98:	fa17 f78b 	uxtah	r7, r7, fp
 8007e9c:	0c1b      	lsrs	r3, r3, #16
 8007e9e:	eba7 0808 	sub.w	r8, r7, r8
 8007ea2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ea6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007eaa:	fa1f f888 	uxth.w	r8, r8
 8007eae:	141f      	asrs	r7, r3, #16
 8007eb0:	454d      	cmp	r5, r9
 8007eb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007eb6:	f84a 3b04 	str.w	r3, [sl], #4
 8007eba:	d8e7      	bhi.n	8007e8c <__mdiff+0x7c>
 8007ebc:	1b2b      	subs	r3, r5, r4
 8007ebe:	3b15      	subs	r3, #21
 8007ec0:	f023 0303 	bic.w	r3, r3, #3
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	3415      	adds	r4, #21
 8007ec8:	42a5      	cmp	r5, r4
 8007eca:	bf38      	it	cc
 8007ecc:	2304      	movcc	r3, #4
 8007ece:	4419      	add	r1, r3
 8007ed0:	4473      	add	r3, lr
 8007ed2:	469e      	mov	lr, r3
 8007ed4:	460d      	mov	r5, r1
 8007ed6:	4565      	cmp	r5, ip
 8007ed8:	d30e      	bcc.n	8007ef8 <__mdiff+0xe8>
 8007eda:	f10c 0203 	add.w	r2, ip, #3
 8007ede:	1a52      	subs	r2, r2, r1
 8007ee0:	f022 0203 	bic.w	r2, r2, #3
 8007ee4:	3903      	subs	r1, #3
 8007ee6:	458c      	cmp	ip, r1
 8007ee8:	bf38      	it	cc
 8007eea:	2200      	movcc	r2, #0
 8007eec:	441a      	add	r2, r3
 8007eee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007ef2:	b17b      	cbz	r3, 8007f14 <__mdiff+0x104>
 8007ef4:	6106      	str	r6, [r0, #16]
 8007ef6:	e7a5      	b.n	8007e44 <__mdiff+0x34>
 8007ef8:	f855 8b04 	ldr.w	r8, [r5], #4
 8007efc:	fa17 f488 	uxtah	r4, r7, r8
 8007f00:	1422      	asrs	r2, r4, #16
 8007f02:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007f06:	b2a4      	uxth	r4, r4
 8007f08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007f0c:	f84e 4b04 	str.w	r4, [lr], #4
 8007f10:	1417      	asrs	r7, r2, #16
 8007f12:	e7e0      	b.n	8007ed6 <__mdiff+0xc6>
 8007f14:	3e01      	subs	r6, #1
 8007f16:	e7ea      	b.n	8007eee <__mdiff+0xde>
 8007f18:	08009183 	.word	0x08009183
 8007f1c:	08009194 	.word	0x08009194

08007f20 <__d2b>:
 8007f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f24:	4689      	mov	r9, r1
 8007f26:	2101      	movs	r1, #1
 8007f28:	ec57 6b10 	vmov	r6, r7, d0
 8007f2c:	4690      	mov	r8, r2
 8007f2e:	f7ff fcd5 	bl	80078dc <_Balloc>
 8007f32:	4604      	mov	r4, r0
 8007f34:	b930      	cbnz	r0, 8007f44 <__d2b+0x24>
 8007f36:	4602      	mov	r2, r0
 8007f38:	4b25      	ldr	r3, [pc, #148]	; (8007fd0 <__d2b+0xb0>)
 8007f3a:	4826      	ldr	r0, [pc, #152]	; (8007fd4 <__d2b+0xb4>)
 8007f3c:	f240 310a 	movw	r1, #778	; 0x30a
 8007f40:	f000 fa70 	bl	8008424 <__assert_func>
 8007f44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007f48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f4c:	bb35      	cbnz	r5, 8007f9c <__d2b+0x7c>
 8007f4e:	2e00      	cmp	r6, #0
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	d028      	beq.n	8007fa6 <__d2b+0x86>
 8007f54:	4668      	mov	r0, sp
 8007f56:	9600      	str	r6, [sp, #0]
 8007f58:	f7ff fd8c 	bl	8007a74 <__lo0bits>
 8007f5c:	9900      	ldr	r1, [sp, #0]
 8007f5e:	b300      	cbz	r0, 8007fa2 <__d2b+0x82>
 8007f60:	9a01      	ldr	r2, [sp, #4]
 8007f62:	f1c0 0320 	rsb	r3, r0, #32
 8007f66:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6a:	430b      	orrs	r3, r1
 8007f6c:	40c2      	lsrs	r2, r0
 8007f6e:	6163      	str	r3, [r4, #20]
 8007f70:	9201      	str	r2, [sp, #4]
 8007f72:	9b01      	ldr	r3, [sp, #4]
 8007f74:	61a3      	str	r3, [r4, #24]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	bf14      	ite	ne
 8007f7a:	2202      	movne	r2, #2
 8007f7c:	2201      	moveq	r2, #1
 8007f7e:	6122      	str	r2, [r4, #16]
 8007f80:	b1d5      	cbz	r5, 8007fb8 <__d2b+0x98>
 8007f82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f86:	4405      	add	r5, r0
 8007f88:	f8c9 5000 	str.w	r5, [r9]
 8007f8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f90:	f8c8 0000 	str.w	r0, [r8]
 8007f94:	4620      	mov	r0, r4
 8007f96:	b003      	add	sp, #12
 8007f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fa0:	e7d5      	b.n	8007f4e <__d2b+0x2e>
 8007fa2:	6161      	str	r1, [r4, #20]
 8007fa4:	e7e5      	b.n	8007f72 <__d2b+0x52>
 8007fa6:	a801      	add	r0, sp, #4
 8007fa8:	f7ff fd64 	bl	8007a74 <__lo0bits>
 8007fac:	9b01      	ldr	r3, [sp, #4]
 8007fae:	6163      	str	r3, [r4, #20]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	6122      	str	r2, [r4, #16]
 8007fb4:	3020      	adds	r0, #32
 8007fb6:	e7e3      	b.n	8007f80 <__d2b+0x60>
 8007fb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007fc0:	f8c9 0000 	str.w	r0, [r9]
 8007fc4:	6918      	ldr	r0, [r3, #16]
 8007fc6:	f7ff fd35 	bl	8007a34 <__hi0bits>
 8007fca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fce:	e7df      	b.n	8007f90 <__d2b+0x70>
 8007fd0:	08009183 	.word	0x08009183
 8007fd4:	08009194 	.word	0x08009194

08007fd8 <_calloc_r>:
 8007fd8:	b513      	push	{r0, r1, r4, lr}
 8007fda:	434a      	muls	r2, r1
 8007fdc:	4611      	mov	r1, r2
 8007fde:	9201      	str	r2, [sp, #4]
 8007fe0:	f000 f85a 	bl	8008098 <_malloc_r>
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	b118      	cbz	r0, 8007ff0 <_calloc_r+0x18>
 8007fe8:	9a01      	ldr	r2, [sp, #4]
 8007fea:	2100      	movs	r1, #0
 8007fec:	f7fe f950 	bl	8006290 <memset>
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	b002      	add	sp, #8
 8007ff4:	bd10      	pop	{r4, pc}
	...

08007ff8 <_free_r>:
 8007ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ffa:	2900      	cmp	r1, #0
 8007ffc:	d048      	beq.n	8008090 <_free_r+0x98>
 8007ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008002:	9001      	str	r0, [sp, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	f1a1 0404 	sub.w	r4, r1, #4
 800800a:	bfb8      	it	lt
 800800c:	18e4      	addlt	r4, r4, r3
 800800e:	f000 fa65 	bl	80084dc <__malloc_lock>
 8008012:	4a20      	ldr	r2, [pc, #128]	; (8008094 <_free_r+0x9c>)
 8008014:	9801      	ldr	r0, [sp, #4]
 8008016:	6813      	ldr	r3, [r2, #0]
 8008018:	4615      	mov	r5, r2
 800801a:	b933      	cbnz	r3, 800802a <_free_r+0x32>
 800801c:	6063      	str	r3, [r4, #4]
 800801e:	6014      	str	r4, [r2, #0]
 8008020:	b003      	add	sp, #12
 8008022:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008026:	f000 ba5f 	b.w	80084e8 <__malloc_unlock>
 800802a:	42a3      	cmp	r3, r4
 800802c:	d90b      	bls.n	8008046 <_free_r+0x4e>
 800802e:	6821      	ldr	r1, [r4, #0]
 8008030:	1862      	adds	r2, r4, r1
 8008032:	4293      	cmp	r3, r2
 8008034:	bf04      	itt	eq
 8008036:	681a      	ldreq	r2, [r3, #0]
 8008038:	685b      	ldreq	r3, [r3, #4]
 800803a:	6063      	str	r3, [r4, #4]
 800803c:	bf04      	itt	eq
 800803e:	1852      	addeq	r2, r2, r1
 8008040:	6022      	streq	r2, [r4, #0]
 8008042:	602c      	str	r4, [r5, #0]
 8008044:	e7ec      	b.n	8008020 <_free_r+0x28>
 8008046:	461a      	mov	r2, r3
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	b10b      	cbz	r3, 8008050 <_free_r+0x58>
 800804c:	42a3      	cmp	r3, r4
 800804e:	d9fa      	bls.n	8008046 <_free_r+0x4e>
 8008050:	6811      	ldr	r1, [r2, #0]
 8008052:	1855      	adds	r5, r2, r1
 8008054:	42a5      	cmp	r5, r4
 8008056:	d10b      	bne.n	8008070 <_free_r+0x78>
 8008058:	6824      	ldr	r4, [r4, #0]
 800805a:	4421      	add	r1, r4
 800805c:	1854      	adds	r4, r2, r1
 800805e:	42a3      	cmp	r3, r4
 8008060:	6011      	str	r1, [r2, #0]
 8008062:	d1dd      	bne.n	8008020 <_free_r+0x28>
 8008064:	681c      	ldr	r4, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	6053      	str	r3, [r2, #4]
 800806a:	4421      	add	r1, r4
 800806c:	6011      	str	r1, [r2, #0]
 800806e:	e7d7      	b.n	8008020 <_free_r+0x28>
 8008070:	d902      	bls.n	8008078 <_free_r+0x80>
 8008072:	230c      	movs	r3, #12
 8008074:	6003      	str	r3, [r0, #0]
 8008076:	e7d3      	b.n	8008020 <_free_r+0x28>
 8008078:	6825      	ldr	r5, [r4, #0]
 800807a:	1961      	adds	r1, r4, r5
 800807c:	428b      	cmp	r3, r1
 800807e:	bf04      	itt	eq
 8008080:	6819      	ldreq	r1, [r3, #0]
 8008082:	685b      	ldreq	r3, [r3, #4]
 8008084:	6063      	str	r3, [r4, #4]
 8008086:	bf04      	itt	eq
 8008088:	1949      	addeq	r1, r1, r5
 800808a:	6021      	streq	r1, [r4, #0]
 800808c:	6054      	str	r4, [r2, #4]
 800808e:	e7c7      	b.n	8008020 <_free_r+0x28>
 8008090:	b003      	add	sp, #12
 8008092:	bd30      	pop	{r4, r5, pc}
 8008094:	20000210 	.word	0x20000210

08008098 <_malloc_r>:
 8008098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809a:	1ccd      	adds	r5, r1, #3
 800809c:	f025 0503 	bic.w	r5, r5, #3
 80080a0:	3508      	adds	r5, #8
 80080a2:	2d0c      	cmp	r5, #12
 80080a4:	bf38      	it	cc
 80080a6:	250c      	movcc	r5, #12
 80080a8:	2d00      	cmp	r5, #0
 80080aa:	4606      	mov	r6, r0
 80080ac:	db01      	blt.n	80080b2 <_malloc_r+0x1a>
 80080ae:	42a9      	cmp	r1, r5
 80080b0:	d903      	bls.n	80080ba <_malloc_r+0x22>
 80080b2:	230c      	movs	r3, #12
 80080b4:	6033      	str	r3, [r6, #0]
 80080b6:	2000      	movs	r0, #0
 80080b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ba:	f000 fa0f 	bl	80084dc <__malloc_lock>
 80080be:	4921      	ldr	r1, [pc, #132]	; (8008144 <_malloc_r+0xac>)
 80080c0:	680a      	ldr	r2, [r1, #0]
 80080c2:	4614      	mov	r4, r2
 80080c4:	b99c      	cbnz	r4, 80080ee <_malloc_r+0x56>
 80080c6:	4f20      	ldr	r7, [pc, #128]	; (8008148 <_malloc_r+0xb0>)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	b923      	cbnz	r3, 80080d6 <_malloc_r+0x3e>
 80080cc:	4621      	mov	r1, r4
 80080ce:	4630      	mov	r0, r6
 80080d0:	f000 f998 	bl	8008404 <_sbrk_r>
 80080d4:	6038      	str	r0, [r7, #0]
 80080d6:	4629      	mov	r1, r5
 80080d8:	4630      	mov	r0, r6
 80080da:	f000 f993 	bl	8008404 <_sbrk_r>
 80080de:	1c43      	adds	r3, r0, #1
 80080e0:	d123      	bne.n	800812a <_malloc_r+0x92>
 80080e2:	230c      	movs	r3, #12
 80080e4:	6033      	str	r3, [r6, #0]
 80080e6:	4630      	mov	r0, r6
 80080e8:	f000 f9fe 	bl	80084e8 <__malloc_unlock>
 80080ec:	e7e3      	b.n	80080b6 <_malloc_r+0x1e>
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	1b5b      	subs	r3, r3, r5
 80080f2:	d417      	bmi.n	8008124 <_malloc_r+0x8c>
 80080f4:	2b0b      	cmp	r3, #11
 80080f6:	d903      	bls.n	8008100 <_malloc_r+0x68>
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	441c      	add	r4, r3
 80080fc:	6025      	str	r5, [r4, #0]
 80080fe:	e004      	b.n	800810a <_malloc_r+0x72>
 8008100:	6863      	ldr	r3, [r4, #4]
 8008102:	42a2      	cmp	r2, r4
 8008104:	bf0c      	ite	eq
 8008106:	600b      	streq	r3, [r1, #0]
 8008108:	6053      	strne	r3, [r2, #4]
 800810a:	4630      	mov	r0, r6
 800810c:	f000 f9ec 	bl	80084e8 <__malloc_unlock>
 8008110:	f104 000b 	add.w	r0, r4, #11
 8008114:	1d23      	adds	r3, r4, #4
 8008116:	f020 0007 	bic.w	r0, r0, #7
 800811a:	1ac2      	subs	r2, r0, r3
 800811c:	d0cc      	beq.n	80080b8 <_malloc_r+0x20>
 800811e:	1a1b      	subs	r3, r3, r0
 8008120:	50a3      	str	r3, [r4, r2]
 8008122:	e7c9      	b.n	80080b8 <_malloc_r+0x20>
 8008124:	4622      	mov	r2, r4
 8008126:	6864      	ldr	r4, [r4, #4]
 8008128:	e7cc      	b.n	80080c4 <_malloc_r+0x2c>
 800812a:	1cc4      	adds	r4, r0, #3
 800812c:	f024 0403 	bic.w	r4, r4, #3
 8008130:	42a0      	cmp	r0, r4
 8008132:	d0e3      	beq.n	80080fc <_malloc_r+0x64>
 8008134:	1a21      	subs	r1, r4, r0
 8008136:	4630      	mov	r0, r6
 8008138:	f000 f964 	bl	8008404 <_sbrk_r>
 800813c:	3001      	adds	r0, #1
 800813e:	d1dd      	bne.n	80080fc <_malloc_r+0x64>
 8008140:	e7cf      	b.n	80080e2 <_malloc_r+0x4a>
 8008142:	bf00      	nop
 8008144:	20000210 	.word	0x20000210
 8008148:	20000214 	.word	0x20000214

0800814c <__ssputs_r>:
 800814c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008150:	688e      	ldr	r6, [r1, #8]
 8008152:	429e      	cmp	r6, r3
 8008154:	4682      	mov	sl, r0
 8008156:	460c      	mov	r4, r1
 8008158:	4690      	mov	r8, r2
 800815a:	461f      	mov	r7, r3
 800815c:	d838      	bhi.n	80081d0 <__ssputs_r+0x84>
 800815e:	898a      	ldrh	r2, [r1, #12]
 8008160:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008164:	d032      	beq.n	80081cc <__ssputs_r+0x80>
 8008166:	6825      	ldr	r5, [r4, #0]
 8008168:	6909      	ldr	r1, [r1, #16]
 800816a:	eba5 0901 	sub.w	r9, r5, r1
 800816e:	6965      	ldr	r5, [r4, #20]
 8008170:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008174:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008178:	3301      	adds	r3, #1
 800817a:	444b      	add	r3, r9
 800817c:	106d      	asrs	r5, r5, #1
 800817e:	429d      	cmp	r5, r3
 8008180:	bf38      	it	cc
 8008182:	461d      	movcc	r5, r3
 8008184:	0553      	lsls	r3, r2, #21
 8008186:	d531      	bpl.n	80081ec <__ssputs_r+0xa0>
 8008188:	4629      	mov	r1, r5
 800818a:	f7ff ff85 	bl	8008098 <_malloc_r>
 800818e:	4606      	mov	r6, r0
 8008190:	b950      	cbnz	r0, 80081a8 <__ssputs_r+0x5c>
 8008192:	230c      	movs	r3, #12
 8008194:	f8ca 3000 	str.w	r3, [sl]
 8008198:	89a3      	ldrh	r3, [r4, #12]
 800819a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800819e:	81a3      	strh	r3, [r4, #12]
 80081a0:	f04f 30ff 	mov.w	r0, #4294967295
 80081a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a8:	6921      	ldr	r1, [r4, #16]
 80081aa:	464a      	mov	r2, r9
 80081ac:	f7ff fb88 	bl	80078c0 <memcpy>
 80081b0:	89a3      	ldrh	r3, [r4, #12]
 80081b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ba:	81a3      	strh	r3, [r4, #12]
 80081bc:	6126      	str	r6, [r4, #16]
 80081be:	6165      	str	r5, [r4, #20]
 80081c0:	444e      	add	r6, r9
 80081c2:	eba5 0509 	sub.w	r5, r5, r9
 80081c6:	6026      	str	r6, [r4, #0]
 80081c8:	60a5      	str	r5, [r4, #8]
 80081ca:	463e      	mov	r6, r7
 80081cc:	42be      	cmp	r6, r7
 80081ce:	d900      	bls.n	80081d2 <__ssputs_r+0x86>
 80081d0:	463e      	mov	r6, r7
 80081d2:	4632      	mov	r2, r6
 80081d4:	6820      	ldr	r0, [r4, #0]
 80081d6:	4641      	mov	r1, r8
 80081d8:	f000 f966 	bl	80084a8 <memmove>
 80081dc:	68a3      	ldr	r3, [r4, #8]
 80081de:	6822      	ldr	r2, [r4, #0]
 80081e0:	1b9b      	subs	r3, r3, r6
 80081e2:	4432      	add	r2, r6
 80081e4:	60a3      	str	r3, [r4, #8]
 80081e6:	6022      	str	r2, [r4, #0]
 80081e8:	2000      	movs	r0, #0
 80081ea:	e7db      	b.n	80081a4 <__ssputs_r+0x58>
 80081ec:	462a      	mov	r2, r5
 80081ee:	f000 f981 	bl	80084f4 <_realloc_r>
 80081f2:	4606      	mov	r6, r0
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d1e1      	bne.n	80081bc <__ssputs_r+0x70>
 80081f8:	6921      	ldr	r1, [r4, #16]
 80081fa:	4650      	mov	r0, sl
 80081fc:	f7ff fefc 	bl	8007ff8 <_free_r>
 8008200:	e7c7      	b.n	8008192 <__ssputs_r+0x46>
	...

08008204 <_svfiprintf_r>:
 8008204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008208:	4698      	mov	r8, r3
 800820a:	898b      	ldrh	r3, [r1, #12]
 800820c:	061b      	lsls	r3, r3, #24
 800820e:	b09d      	sub	sp, #116	; 0x74
 8008210:	4607      	mov	r7, r0
 8008212:	460d      	mov	r5, r1
 8008214:	4614      	mov	r4, r2
 8008216:	d50e      	bpl.n	8008236 <_svfiprintf_r+0x32>
 8008218:	690b      	ldr	r3, [r1, #16]
 800821a:	b963      	cbnz	r3, 8008236 <_svfiprintf_r+0x32>
 800821c:	2140      	movs	r1, #64	; 0x40
 800821e:	f7ff ff3b 	bl	8008098 <_malloc_r>
 8008222:	6028      	str	r0, [r5, #0]
 8008224:	6128      	str	r0, [r5, #16]
 8008226:	b920      	cbnz	r0, 8008232 <_svfiprintf_r+0x2e>
 8008228:	230c      	movs	r3, #12
 800822a:	603b      	str	r3, [r7, #0]
 800822c:	f04f 30ff 	mov.w	r0, #4294967295
 8008230:	e0d1      	b.n	80083d6 <_svfiprintf_r+0x1d2>
 8008232:	2340      	movs	r3, #64	; 0x40
 8008234:	616b      	str	r3, [r5, #20]
 8008236:	2300      	movs	r3, #0
 8008238:	9309      	str	r3, [sp, #36]	; 0x24
 800823a:	2320      	movs	r3, #32
 800823c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008240:	f8cd 800c 	str.w	r8, [sp, #12]
 8008244:	2330      	movs	r3, #48	; 0x30
 8008246:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80083f0 <_svfiprintf_r+0x1ec>
 800824a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800824e:	f04f 0901 	mov.w	r9, #1
 8008252:	4623      	mov	r3, r4
 8008254:	469a      	mov	sl, r3
 8008256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800825a:	b10a      	cbz	r2, 8008260 <_svfiprintf_r+0x5c>
 800825c:	2a25      	cmp	r2, #37	; 0x25
 800825e:	d1f9      	bne.n	8008254 <_svfiprintf_r+0x50>
 8008260:	ebba 0b04 	subs.w	fp, sl, r4
 8008264:	d00b      	beq.n	800827e <_svfiprintf_r+0x7a>
 8008266:	465b      	mov	r3, fp
 8008268:	4622      	mov	r2, r4
 800826a:	4629      	mov	r1, r5
 800826c:	4638      	mov	r0, r7
 800826e:	f7ff ff6d 	bl	800814c <__ssputs_r>
 8008272:	3001      	adds	r0, #1
 8008274:	f000 80aa 	beq.w	80083cc <_svfiprintf_r+0x1c8>
 8008278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800827a:	445a      	add	r2, fp
 800827c:	9209      	str	r2, [sp, #36]	; 0x24
 800827e:	f89a 3000 	ldrb.w	r3, [sl]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 80a2 	beq.w	80083cc <_svfiprintf_r+0x1c8>
 8008288:	2300      	movs	r3, #0
 800828a:	f04f 32ff 	mov.w	r2, #4294967295
 800828e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008292:	f10a 0a01 	add.w	sl, sl, #1
 8008296:	9304      	str	r3, [sp, #16]
 8008298:	9307      	str	r3, [sp, #28]
 800829a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800829e:	931a      	str	r3, [sp, #104]	; 0x68
 80082a0:	4654      	mov	r4, sl
 80082a2:	2205      	movs	r2, #5
 80082a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a8:	4851      	ldr	r0, [pc, #324]	; (80083f0 <_svfiprintf_r+0x1ec>)
 80082aa:	f7f7 ff99 	bl	80001e0 <memchr>
 80082ae:	9a04      	ldr	r2, [sp, #16]
 80082b0:	b9d8      	cbnz	r0, 80082ea <_svfiprintf_r+0xe6>
 80082b2:	06d0      	lsls	r0, r2, #27
 80082b4:	bf44      	itt	mi
 80082b6:	2320      	movmi	r3, #32
 80082b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082bc:	0711      	lsls	r1, r2, #28
 80082be:	bf44      	itt	mi
 80082c0:	232b      	movmi	r3, #43	; 0x2b
 80082c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082c6:	f89a 3000 	ldrb.w	r3, [sl]
 80082ca:	2b2a      	cmp	r3, #42	; 0x2a
 80082cc:	d015      	beq.n	80082fa <_svfiprintf_r+0xf6>
 80082ce:	9a07      	ldr	r2, [sp, #28]
 80082d0:	4654      	mov	r4, sl
 80082d2:	2000      	movs	r0, #0
 80082d4:	f04f 0c0a 	mov.w	ip, #10
 80082d8:	4621      	mov	r1, r4
 80082da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082de:	3b30      	subs	r3, #48	; 0x30
 80082e0:	2b09      	cmp	r3, #9
 80082e2:	d94e      	bls.n	8008382 <_svfiprintf_r+0x17e>
 80082e4:	b1b0      	cbz	r0, 8008314 <_svfiprintf_r+0x110>
 80082e6:	9207      	str	r2, [sp, #28]
 80082e8:	e014      	b.n	8008314 <_svfiprintf_r+0x110>
 80082ea:	eba0 0308 	sub.w	r3, r0, r8
 80082ee:	fa09 f303 	lsl.w	r3, r9, r3
 80082f2:	4313      	orrs	r3, r2
 80082f4:	9304      	str	r3, [sp, #16]
 80082f6:	46a2      	mov	sl, r4
 80082f8:	e7d2      	b.n	80082a0 <_svfiprintf_r+0x9c>
 80082fa:	9b03      	ldr	r3, [sp, #12]
 80082fc:	1d19      	adds	r1, r3, #4
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	9103      	str	r1, [sp, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	bfbb      	ittet	lt
 8008306:	425b      	neglt	r3, r3
 8008308:	f042 0202 	orrlt.w	r2, r2, #2
 800830c:	9307      	strge	r3, [sp, #28]
 800830e:	9307      	strlt	r3, [sp, #28]
 8008310:	bfb8      	it	lt
 8008312:	9204      	strlt	r2, [sp, #16]
 8008314:	7823      	ldrb	r3, [r4, #0]
 8008316:	2b2e      	cmp	r3, #46	; 0x2e
 8008318:	d10c      	bne.n	8008334 <_svfiprintf_r+0x130>
 800831a:	7863      	ldrb	r3, [r4, #1]
 800831c:	2b2a      	cmp	r3, #42	; 0x2a
 800831e:	d135      	bne.n	800838c <_svfiprintf_r+0x188>
 8008320:	9b03      	ldr	r3, [sp, #12]
 8008322:	1d1a      	adds	r2, r3, #4
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	9203      	str	r2, [sp, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	bfb8      	it	lt
 800832c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008330:	3402      	adds	r4, #2
 8008332:	9305      	str	r3, [sp, #20]
 8008334:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008400 <_svfiprintf_r+0x1fc>
 8008338:	7821      	ldrb	r1, [r4, #0]
 800833a:	2203      	movs	r2, #3
 800833c:	4650      	mov	r0, sl
 800833e:	f7f7 ff4f 	bl	80001e0 <memchr>
 8008342:	b140      	cbz	r0, 8008356 <_svfiprintf_r+0x152>
 8008344:	2340      	movs	r3, #64	; 0x40
 8008346:	eba0 000a 	sub.w	r0, r0, sl
 800834a:	fa03 f000 	lsl.w	r0, r3, r0
 800834e:	9b04      	ldr	r3, [sp, #16]
 8008350:	4303      	orrs	r3, r0
 8008352:	3401      	adds	r4, #1
 8008354:	9304      	str	r3, [sp, #16]
 8008356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800835a:	4826      	ldr	r0, [pc, #152]	; (80083f4 <_svfiprintf_r+0x1f0>)
 800835c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008360:	2206      	movs	r2, #6
 8008362:	f7f7 ff3d 	bl	80001e0 <memchr>
 8008366:	2800      	cmp	r0, #0
 8008368:	d038      	beq.n	80083dc <_svfiprintf_r+0x1d8>
 800836a:	4b23      	ldr	r3, [pc, #140]	; (80083f8 <_svfiprintf_r+0x1f4>)
 800836c:	bb1b      	cbnz	r3, 80083b6 <_svfiprintf_r+0x1b2>
 800836e:	9b03      	ldr	r3, [sp, #12]
 8008370:	3307      	adds	r3, #7
 8008372:	f023 0307 	bic.w	r3, r3, #7
 8008376:	3308      	adds	r3, #8
 8008378:	9303      	str	r3, [sp, #12]
 800837a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800837c:	4433      	add	r3, r6
 800837e:	9309      	str	r3, [sp, #36]	; 0x24
 8008380:	e767      	b.n	8008252 <_svfiprintf_r+0x4e>
 8008382:	fb0c 3202 	mla	r2, ip, r2, r3
 8008386:	460c      	mov	r4, r1
 8008388:	2001      	movs	r0, #1
 800838a:	e7a5      	b.n	80082d8 <_svfiprintf_r+0xd4>
 800838c:	2300      	movs	r3, #0
 800838e:	3401      	adds	r4, #1
 8008390:	9305      	str	r3, [sp, #20]
 8008392:	4619      	mov	r1, r3
 8008394:	f04f 0c0a 	mov.w	ip, #10
 8008398:	4620      	mov	r0, r4
 800839a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800839e:	3a30      	subs	r2, #48	; 0x30
 80083a0:	2a09      	cmp	r2, #9
 80083a2:	d903      	bls.n	80083ac <_svfiprintf_r+0x1a8>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d0c5      	beq.n	8008334 <_svfiprintf_r+0x130>
 80083a8:	9105      	str	r1, [sp, #20]
 80083aa:	e7c3      	b.n	8008334 <_svfiprintf_r+0x130>
 80083ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80083b0:	4604      	mov	r4, r0
 80083b2:	2301      	movs	r3, #1
 80083b4:	e7f0      	b.n	8008398 <_svfiprintf_r+0x194>
 80083b6:	ab03      	add	r3, sp, #12
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	462a      	mov	r2, r5
 80083bc:	4b0f      	ldr	r3, [pc, #60]	; (80083fc <_svfiprintf_r+0x1f8>)
 80083be:	a904      	add	r1, sp, #16
 80083c0:	4638      	mov	r0, r7
 80083c2:	f7fe f80d 	bl	80063e0 <_printf_float>
 80083c6:	1c42      	adds	r2, r0, #1
 80083c8:	4606      	mov	r6, r0
 80083ca:	d1d6      	bne.n	800837a <_svfiprintf_r+0x176>
 80083cc:	89ab      	ldrh	r3, [r5, #12]
 80083ce:	065b      	lsls	r3, r3, #25
 80083d0:	f53f af2c 	bmi.w	800822c <_svfiprintf_r+0x28>
 80083d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083d6:	b01d      	add	sp, #116	; 0x74
 80083d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083dc:	ab03      	add	r3, sp, #12
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	462a      	mov	r2, r5
 80083e2:	4b06      	ldr	r3, [pc, #24]	; (80083fc <_svfiprintf_r+0x1f8>)
 80083e4:	a904      	add	r1, sp, #16
 80083e6:	4638      	mov	r0, r7
 80083e8:	f7fe fa9e 	bl	8006928 <_printf_i>
 80083ec:	e7eb      	b.n	80083c6 <_svfiprintf_r+0x1c2>
 80083ee:	bf00      	nop
 80083f0:	080092f4 	.word	0x080092f4
 80083f4:	080092fe 	.word	0x080092fe
 80083f8:	080063e1 	.word	0x080063e1
 80083fc:	0800814d 	.word	0x0800814d
 8008400:	080092fa 	.word	0x080092fa

08008404 <_sbrk_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	4d06      	ldr	r5, [pc, #24]	; (8008420 <_sbrk_r+0x1c>)
 8008408:	2300      	movs	r3, #0
 800840a:	4604      	mov	r4, r0
 800840c:	4608      	mov	r0, r1
 800840e:	602b      	str	r3, [r5, #0]
 8008410:	f7f9 fb6c 	bl	8001aec <_sbrk>
 8008414:	1c43      	adds	r3, r0, #1
 8008416:	d102      	bne.n	800841e <_sbrk_r+0x1a>
 8008418:	682b      	ldr	r3, [r5, #0]
 800841a:	b103      	cbz	r3, 800841e <_sbrk_r+0x1a>
 800841c:	6023      	str	r3, [r4, #0]
 800841e:	bd38      	pop	{r3, r4, r5, pc}
 8008420:	2000039c 	.word	0x2000039c

08008424 <__assert_func>:
 8008424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008426:	4614      	mov	r4, r2
 8008428:	461a      	mov	r2, r3
 800842a:	4b09      	ldr	r3, [pc, #36]	; (8008450 <__assert_func+0x2c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4605      	mov	r5, r0
 8008430:	68d8      	ldr	r0, [r3, #12]
 8008432:	b14c      	cbz	r4, 8008448 <__assert_func+0x24>
 8008434:	4b07      	ldr	r3, [pc, #28]	; (8008454 <__assert_func+0x30>)
 8008436:	9100      	str	r1, [sp, #0]
 8008438:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800843c:	4906      	ldr	r1, [pc, #24]	; (8008458 <__assert_func+0x34>)
 800843e:	462b      	mov	r3, r5
 8008440:	f000 f80e 	bl	8008460 <fiprintf>
 8008444:	f000 faa4 	bl	8008990 <abort>
 8008448:	4b04      	ldr	r3, [pc, #16]	; (800845c <__assert_func+0x38>)
 800844a:	461c      	mov	r4, r3
 800844c:	e7f3      	b.n	8008436 <__assert_func+0x12>
 800844e:	bf00      	nop
 8008450:	2000000c 	.word	0x2000000c
 8008454:	08009305 	.word	0x08009305
 8008458:	08009312 	.word	0x08009312
 800845c:	08009340 	.word	0x08009340

08008460 <fiprintf>:
 8008460:	b40e      	push	{r1, r2, r3}
 8008462:	b503      	push	{r0, r1, lr}
 8008464:	4601      	mov	r1, r0
 8008466:	ab03      	add	r3, sp, #12
 8008468:	4805      	ldr	r0, [pc, #20]	; (8008480 <fiprintf+0x20>)
 800846a:	f853 2b04 	ldr.w	r2, [r3], #4
 800846e:	6800      	ldr	r0, [r0, #0]
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	f000 f88f 	bl	8008594 <_vfiprintf_r>
 8008476:	b002      	add	sp, #8
 8008478:	f85d eb04 	ldr.w	lr, [sp], #4
 800847c:	b003      	add	sp, #12
 800847e:	4770      	bx	lr
 8008480:	2000000c 	.word	0x2000000c

08008484 <__ascii_mbtowc>:
 8008484:	b082      	sub	sp, #8
 8008486:	b901      	cbnz	r1, 800848a <__ascii_mbtowc+0x6>
 8008488:	a901      	add	r1, sp, #4
 800848a:	b142      	cbz	r2, 800849e <__ascii_mbtowc+0x1a>
 800848c:	b14b      	cbz	r3, 80084a2 <__ascii_mbtowc+0x1e>
 800848e:	7813      	ldrb	r3, [r2, #0]
 8008490:	600b      	str	r3, [r1, #0]
 8008492:	7812      	ldrb	r2, [r2, #0]
 8008494:	1e10      	subs	r0, r2, #0
 8008496:	bf18      	it	ne
 8008498:	2001      	movne	r0, #1
 800849a:	b002      	add	sp, #8
 800849c:	4770      	bx	lr
 800849e:	4610      	mov	r0, r2
 80084a0:	e7fb      	b.n	800849a <__ascii_mbtowc+0x16>
 80084a2:	f06f 0001 	mvn.w	r0, #1
 80084a6:	e7f8      	b.n	800849a <__ascii_mbtowc+0x16>

080084a8 <memmove>:
 80084a8:	4288      	cmp	r0, r1
 80084aa:	b510      	push	{r4, lr}
 80084ac:	eb01 0402 	add.w	r4, r1, r2
 80084b0:	d902      	bls.n	80084b8 <memmove+0x10>
 80084b2:	4284      	cmp	r4, r0
 80084b4:	4623      	mov	r3, r4
 80084b6:	d807      	bhi.n	80084c8 <memmove+0x20>
 80084b8:	1e43      	subs	r3, r0, #1
 80084ba:	42a1      	cmp	r1, r4
 80084bc:	d008      	beq.n	80084d0 <memmove+0x28>
 80084be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084c6:	e7f8      	b.n	80084ba <memmove+0x12>
 80084c8:	4402      	add	r2, r0
 80084ca:	4601      	mov	r1, r0
 80084cc:	428a      	cmp	r2, r1
 80084ce:	d100      	bne.n	80084d2 <memmove+0x2a>
 80084d0:	bd10      	pop	{r4, pc}
 80084d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084da:	e7f7      	b.n	80084cc <memmove+0x24>

080084dc <__malloc_lock>:
 80084dc:	4801      	ldr	r0, [pc, #4]	; (80084e4 <__malloc_lock+0x8>)
 80084de:	f000 bc17 	b.w	8008d10 <__retarget_lock_acquire_recursive>
 80084e2:	bf00      	nop
 80084e4:	200003a4 	.word	0x200003a4

080084e8 <__malloc_unlock>:
 80084e8:	4801      	ldr	r0, [pc, #4]	; (80084f0 <__malloc_unlock+0x8>)
 80084ea:	f000 bc12 	b.w	8008d12 <__retarget_lock_release_recursive>
 80084ee:	bf00      	nop
 80084f0:	200003a4 	.word	0x200003a4

080084f4 <_realloc_r>:
 80084f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f6:	4607      	mov	r7, r0
 80084f8:	4614      	mov	r4, r2
 80084fa:	460e      	mov	r6, r1
 80084fc:	b921      	cbnz	r1, 8008508 <_realloc_r+0x14>
 80084fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008502:	4611      	mov	r1, r2
 8008504:	f7ff bdc8 	b.w	8008098 <_malloc_r>
 8008508:	b922      	cbnz	r2, 8008514 <_realloc_r+0x20>
 800850a:	f7ff fd75 	bl	8007ff8 <_free_r>
 800850e:	4625      	mov	r5, r4
 8008510:	4628      	mov	r0, r5
 8008512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008514:	f000 fc62 	bl	8008ddc <_malloc_usable_size_r>
 8008518:	42a0      	cmp	r0, r4
 800851a:	d20f      	bcs.n	800853c <_realloc_r+0x48>
 800851c:	4621      	mov	r1, r4
 800851e:	4638      	mov	r0, r7
 8008520:	f7ff fdba 	bl	8008098 <_malloc_r>
 8008524:	4605      	mov	r5, r0
 8008526:	2800      	cmp	r0, #0
 8008528:	d0f2      	beq.n	8008510 <_realloc_r+0x1c>
 800852a:	4631      	mov	r1, r6
 800852c:	4622      	mov	r2, r4
 800852e:	f7ff f9c7 	bl	80078c0 <memcpy>
 8008532:	4631      	mov	r1, r6
 8008534:	4638      	mov	r0, r7
 8008536:	f7ff fd5f 	bl	8007ff8 <_free_r>
 800853a:	e7e9      	b.n	8008510 <_realloc_r+0x1c>
 800853c:	4635      	mov	r5, r6
 800853e:	e7e7      	b.n	8008510 <_realloc_r+0x1c>

08008540 <__sfputc_r>:
 8008540:	6893      	ldr	r3, [r2, #8]
 8008542:	3b01      	subs	r3, #1
 8008544:	2b00      	cmp	r3, #0
 8008546:	b410      	push	{r4}
 8008548:	6093      	str	r3, [r2, #8]
 800854a:	da08      	bge.n	800855e <__sfputc_r+0x1e>
 800854c:	6994      	ldr	r4, [r2, #24]
 800854e:	42a3      	cmp	r3, r4
 8008550:	db01      	blt.n	8008556 <__sfputc_r+0x16>
 8008552:	290a      	cmp	r1, #10
 8008554:	d103      	bne.n	800855e <__sfputc_r+0x1e>
 8008556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800855a:	f000 b94b 	b.w	80087f4 <__swbuf_r>
 800855e:	6813      	ldr	r3, [r2, #0]
 8008560:	1c58      	adds	r0, r3, #1
 8008562:	6010      	str	r0, [r2, #0]
 8008564:	7019      	strb	r1, [r3, #0]
 8008566:	4608      	mov	r0, r1
 8008568:	f85d 4b04 	ldr.w	r4, [sp], #4
 800856c:	4770      	bx	lr

0800856e <__sfputs_r>:
 800856e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008570:	4606      	mov	r6, r0
 8008572:	460f      	mov	r7, r1
 8008574:	4614      	mov	r4, r2
 8008576:	18d5      	adds	r5, r2, r3
 8008578:	42ac      	cmp	r4, r5
 800857a:	d101      	bne.n	8008580 <__sfputs_r+0x12>
 800857c:	2000      	movs	r0, #0
 800857e:	e007      	b.n	8008590 <__sfputs_r+0x22>
 8008580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008584:	463a      	mov	r2, r7
 8008586:	4630      	mov	r0, r6
 8008588:	f7ff ffda 	bl	8008540 <__sfputc_r>
 800858c:	1c43      	adds	r3, r0, #1
 800858e:	d1f3      	bne.n	8008578 <__sfputs_r+0xa>
 8008590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008594 <_vfiprintf_r>:
 8008594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008598:	460d      	mov	r5, r1
 800859a:	b09d      	sub	sp, #116	; 0x74
 800859c:	4614      	mov	r4, r2
 800859e:	4698      	mov	r8, r3
 80085a0:	4606      	mov	r6, r0
 80085a2:	b118      	cbz	r0, 80085ac <_vfiprintf_r+0x18>
 80085a4:	6983      	ldr	r3, [r0, #24]
 80085a6:	b90b      	cbnz	r3, 80085ac <_vfiprintf_r+0x18>
 80085a8:	f000 fb14 	bl	8008bd4 <__sinit>
 80085ac:	4b89      	ldr	r3, [pc, #548]	; (80087d4 <_vfiprintf_r+0x240>)
 80085ae:	429d      	cmp	r5, r3
 80085b0:	d11b      	bne.n	80085ea <_vfiprintf_r+0x56>
 80085b2:	6875      	ldr	r5, [r6, #4]
 80085b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085b6:	07d9      	lsls	r1, r3, #31
 80085b8:	d405      	bmi.n	80085c6 <_vfiprintf_r+0x32>
 80085ba:	89ab      	ldrh	r3, [r5, #12]
 80085bc:	059a      	lsls	r2, r3, #22
 80085be:	d402      	bmi.n	80085c6 <_vfiprintf_r+0x32>
 80085c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085c2:	f000 fba5 	bl	8008d10 <__retarget_lock_acquire_recursive>
 80085c6:	89ab      	ldrh	r3, [r5, #12]
 80085c8:	071b      	lsls	r3, r3, #28
 80085ca:	d501      	bpl.n	80085d0 <_vfiprintf_r+0x3c>
 80085cc:	692b      	ldr	r3, [r5, #16]
 80085ce:	b9eb      	cbnz	r3, 800860c <_vfiprintf_r+0x78>
 80085d0:	4629      	mov	r1, r5
 80085d2:	4630      	mov	r0, r6
 80085d4:	f000 f96e 	bl	80088b4 <__swsetup_r>
 80085d8:	b1c0      	cbz	r0, 800860c <_vfiprintf_r+0x78>
 80085da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085dc:	07dc      	lsls	r4, r3, #31
 80085de:	d50e      	bpl.n	80085fe <_vfiprintf_r+0x6a>
 80085e0:	f04f 30ff 	mov.w	r0, #4294967295
 80085e4:	b01d      	add	sp, #116	; 0x74
 80085e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ea:	4b7b      	ldr	r3, [pc, #492]	; (80087d8 <_vfiprintf_r+0x244>)
 80085ec:	429d      	cmp	r5, r3
 80085ee:	d101      	bne.n	80085f4 <_vfiprintf_r+0x60>
 80085f0:	68b5      	ldr	r5, [r6, #8]
 80085f2:	e7df      	b.n	80085b4 <_vfiprintf_r+0x20>
 80085f4:	4b79      	ldr	r3, [pc, #484]	; (80087dc <_vfiprintf_r+0x248>)
 80085f6:	429d      	cmp	r5, r3
 80085f8:	bf08      	it	eq
 80085fa:	68f5      	ldreq	r5, [r6, #12]
 80085fc:	e7da      	b.n	80085b4 <_vfiprintf_r+0x20>
 80085fe:	89ab      	ldrh	r3, [r5, #12]
 8008600:	0598      	lsls	r0, r3, #22
 8008602:	d4ed      	bmi.n	80085e0 <_vfiprintf_r+0x4c>
 8008604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008606:	f000 fb84 	bl	8008d12 <__retarget_lock_release_recursive>
 800860a:	e7e9      	b.n	80085e0 <_vfiprintf_r+0x4c>
 800860c:	2300      	movs	r3, #0
 800860e:	9309      	str	r3, [sp, #36]	; 0x24
 8008610:	2320      	movs	r3, #32
 8008612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008616:	f8cd 800c 	str.w	r8, [sp, #12]
 800861a:	2330      	movs	r3, #48	; 0x30
 800861c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80087e0 <_vfiprintf_r+0x24c>
 8008620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008624:	f04f 0901 	mov.w	r9, #1
 8008628:	4623      	mov	r3, r4
 800862a:	469a      	mov	sl, r3
 800862c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008630:	b10a      	cbz	r2, 8008636 <_vfiprintf_r+0xa2>
 8008632:	2a25      	cmp	r2, #37	; 0x25
 8008634:	d1f9      	bne.n	800862a <_vfiprintf_r+0x96>
 8008636:	ebba 0b04 	subs.w	fp, sl, r4
 800863a:	d00b      	beq.n	8008654 <_vfiprintf_r+0xc0>
 800863c:	465b      	mov	r3, fp
 800863e:	4622      	mov	r2, r4
 8008640:	4629      	mov	r1, r5
 8008642:	4630      	mov	r0, r6
 8008644:	f7ff ff93 	bl	800856e <__sfputs_r>
 8008648:	3001      	adds	r0, #1
 800864a:	f000 80aa 	beq.w	80087a2 <_vfiprintf_r+0x20e>
 800864e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008650:	445a      	add	r2, fp
 8008652:	9209      	str	r2, [sp, #36]	; 0x24
 8008654:	f89a 3000 	ldrb.w	r3, [sl]
 8008658:	2b00      	cmp	r3, #0
 800865a:	f000 80a2 	beq.w	80087a2 <_vfiprintf_r+0x20e>
 800865e:	2300      	movs	r3, #0
 8008660:	f04f 32ff 	mov.w	r2, #4294967295
 8008664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008668:	f10a 0a01 	add.w	sl, sl, #1
 800866c:	9304      	str	r3, [sp, #16]
 800866e:	9307      	str	r3, [sp, #28]
 8008670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008674:	931a      	str	r3, [sp, #104]	; 0x68
 8008676:	4654      	mov	r4, sl
 8008678:	2205      	movs	r2, #5
 800867a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800867e:	4858      	ldr	r0, [pc, #352]	; (80087e0 <_vfiprintf_r+0x24c>)
 8008680:	f7f7 fdae 	bl	80001e0 <memchr>
 8008684:	9a04      	ldr	r2, [sp, #16]
 8008686:	b9d8      	cbnz	r0, 80086c0 <_vfiprintf_r+0x12c>
 8008688:	06d1      	lsls	r1, r2, #27
 800868a:	bf44      	itt	mi
 800868c:	2320      	movmi	r3, #32
 800868e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008692:	0713      	lsls	r3, r2, #28
 8008694:	bf44      	itt	mi
 8008696:	232b      	movmi	r3, #43	; 0x2b
 8008698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800869c:	f89a 3000 	ldrb.w	r3, [sl]
 80086a0:	2b2a      	cmp	r3, #42	; 0x2a
 80086a2:	d015      	beq.n	80086d0 <_vfiprintf_r+0x13c>
 80086a4:	9a07      	ldr	r2, [sp, #28]
 80086a6:	4654      	mov	r4, sl
 80086a8:	2000      	movs	r0, #0
 80086aa:	f04f 0c0a 	mov.w	ip, #10
 80086ae:	4621      	mov	r1, r4
 80086b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086b4:	3b30      	subs	r3, #48	; 0x30
 80086b6:	2b09      	cmp	r3, #9
 80086b8:	d94e      	bls.n	8008758 <_vfiprintf_r+0x1c4>
 80086ba:	b1b0      	cbz	r0, 80086ea <_vfiprintf_r+0x156>
 80086bc:	9207      	str	r2, [sp, #28]
 80086be:	e014      	b.n	80086ea <_vfiprintf_r+0x156>
 80086c0:	eba0 0308 	sub.w	r3, r0, r8
 80086c4:	fa09 f303 	lsl.w	r3, r9, r3
 80086c8:	4313      	orrs	r3, r2
 80086ca:	9304      	str	r3, [sp, #16]
 80086cc:	46a2      	mov	sl, r4
 80086ce:	e7d2      	b.n	8008676 <_vfiprintf_r+0xe2>
 80086d0:	9b03      	ldr	r3, [sp, #12]
 80086d2:	1d19      	adds	r1, r3, #4
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	9103      	str	r1, [sp, #12]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	bfbb      	ittet	lt
 80086dc:	425b      	neglt	r3, r3
 80086de:	f042 0202 	orrlt.w	r2, r2, #2
 80086e2:	9307      	strge	r3, [sp, #28]
 80086e4:	9307      	strlt	r3, [sp, #28]
 80086e6:	bfb8      	it	lt
 80086e8:	9204      	strlt	r2, [sp, #16]
 80086ea:	7823      	ldrb	r3, [r4, #0]
 80086ec:	2b2e      	cmp	r3, #46	; 0x2e
 80086ee:	d10c      	bne.n	800870a <_vfiprintf_r+0x176>
 80086f0:	7863      	ldrb	r3, [r4, #1]
 80086f2:	2b2a      	cmp	r3, #42	; 0x2a
 80086f4:	d135      	bne.n	8008762 <_vfiprintf_r+0x1ce>
 80086f6:	9b03      	ldr	r3, [sp, #12]
 80086f8:	1d1a      	adds	r2, r3, #4
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	9203      	str	r2, [sp, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	bfb8      	it	lt
 8008702:	f04f 33ff 	movlt.w	r3, #4294967295
 8008706:	3402      	adds	r4, #2
 8008708:	9305      	str	r3, [sp, #20]
 800870a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087f0 <_vfiprintf_r+0x25c>
 800870e:	7821      	ldrb	r1, [r4, #0]
 8008710:	2203      	movs	r2, #3
 8008712:	4650      	mov	r0, sl
 8008714:	f7f7 fd64 	bl	80001e0 <memchr>
 8008718:	b140      	cbz	r0, 800872c <_vfiprintf_r+0x198>
 800871a:	2340      	movs	r3, #64	; 0x40
 800871c:	eba0 000a 	sub.w	r0, r0, sl
 8008720:	fa03 f000 	lsl.w	r0, r3, r0
 8008724:	9b04      	ldr	r3, [sp, #16]
 8008726:	4303      	orrs	r3, r0
 8008728:	3401      	adds	r4, #1
 800872a:	9304      	str	r3, [sp, #16]
 800872c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008730:	482c      	ldr	r0, [pc, #176]	; (80087e4 <_vfiprintf_r+0x250>)
 8008732:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008736:	2206      	movs	r2, #6
 8008738:	f7f7 fd52 	bl	80001e0 <memchr>
 800873c:	2800      	cmp	r0, #0
 800873e:	d03f      	beq.n	80087c0 <_vfiprintf_r+0x22c>
 8008740:	4b29      	ldr	r3, [pc, #164]	; (80087e8 <_vfiprintf_r+0x254>)
 8008742:	bb1b      	cbnz	r3, 800878c <_vfiprintf_r+0x1f8>
 8008744:	9b03      	ldr	r3, [sp, #12]
 8008746:	3307      	adds	r3, #7
 8008748:	f023 0307 	bic.w	r3, r3, #7
 800874c:	3308      	adds	r3, #8
 800874e:	9303      	str	r3, [sp, #12]
 8008750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008752:	443b      	add	r3, r7
 8008754:	9309      	str	r3, [sp, #36]	; 0x24
 8008756:	e767      	b.n	8008628 <_vfiprintf_r+0x94>
 8008758:	fb0c 3202 	mla	r2, ip, r2, r3
 800875c:	460c      	mov	r4, r1
 800875e:	2001      	movs	r0, #1
 8008760:	e7a5      	b.n	80086ae <_vfiprintf_r+0x11a>
 8008762:	2300      	movs	r3, #0
 8008764:	3401      	adds	r4, #1
 8008766:	9305      	str	r3, [sp, #20]
 8008768:	4619      	mov	r1, r3
 800876a:	f04f 0c0a 	mov.w	ip, #10
 800876e:	4620      	mov	r0, r4
 8008770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008774:	3a30      	subs	r2, #48	; 0x30
 8008776:	2a09      	cmp	r2, #9
 8008778:	d903      	bls.n	8008782 <_vfiprintf_r+0x1ee>
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0c5      	beq.n	800870a <_vfiprintf_r+0x176>
 800877e:	9105      	str	r1, [sp, #20]
 8008780:	e7c3      	b.n	800870a <_vfiprintf_r+0x176>
 8008782:	fb0c 2101 	mla	r1, ip, r1, r2
 8008786:	4604      	mov	r4, r0
 8008788:	2301      	movs	r3, #1
 800878a:	e7f0      	b.n	800876e <_vfiprintf_r+0x1da>
 800878c:	ab03      	add	r3, sp, #12
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	462a      	mov	r2, r5
 8008792:	4b16      	ldr	r3, [pc, #88]	; (80087ec <_vfiprintf_r+0x258>)
 8008794:	a904      	add	r1, sp, #16
 8008796:	4630      	mov	r0, r6
 8008798:	f7fd fe22 	bl	80063e0 <_printf_float>
 800879c:	4607      	mov	r7, r0
 800879e:	1c78      	adds	r0, r7, #1
 80087a0:	d1d6      	bne.n	8008750 <_vfiprintf_r+0x1bc>
 80087a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087a4:	07d9      	lsls	r1, r3, #31
 80087a6:	d405      	bmi.n	80087b4 <_vfiprintf_r+0x220>
 80087a8:	89ab      	ldrh	r3, [r5, #12]
 80087aa:	059a      	lsls	r2, r3, #22
 80087ac:	d402      	bmi.n	80087b4 <_vfiprintf_r+0x220>
 80087ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087b0:	f000 faaf 	bl	8008d12 <__retarget_lock_release_recursive>
 80087b4:	89ab      	ldrh	r3, [r5, #12]
 80087b6:	065b      	lsls	r3, r3, #25
 80087b8:	f53f af12 	bmi.w	80085e0 <_vfiprintf_r+0x4c>
 80087bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087be:	e711      	b.n	80085e4 <_vfiprintf_r+0x50>
 80087c0:	ab03      	add	r3, sp, #12
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	462a      	mov	r2, r5
 80087c6:	4b09      	ldr	r3, [pc, #36]	; (80087ec <_vfiprintf_r+0x258>)
 80087c8:	a904      	add	r1, sp, #16
 80087ca:	4630      	mov	r0, r6
 80087cc:	f7fe f8ac 	bl	8006928 <_printf_i>
 80087d0:	e7e4      	b.n	800879c <_vfiprintf_r+0x208>
 80087d2:	bf00      	nop
 80087d4:	0800946c 	.word	0x0800946c
 80087d8:	0800948c 	.word	0x0800948c
 80087dc:	0800944c 	.word	0x0800944c
 80087e0:	080092f4 	.word	0x080092f4
 80087e4:	080092fe 	.word	0x080092fe
 80087e8:	080063e1 	.word	0x080063e1
 80087ec:	0800856f 	.word	0x0800856f
 80087f0:	080092fa 	.word	0x080092fa

080087f4 <__swbuf_r>:
 80087f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f6:	460e      	mov	r6, r1
 80087f8:	4614      	mov	r4, r2
 80087fa:	4605      	mov	r5, r0
 80087fc:	b118      	cbz	r0, 8008806 <__swbuf_r+0x12>
 80087fe:	6983      	ldr	r3, [r0, #24]
 8008800:	b90b      	cbnz	r3, 8008806 <__swbuf_r+0x12>
 8008802:	f000 f9e7 	bl	8008bd4 <__sinit>
 8008806:	4b21      	ldr	r3, [pc, #132]	; (800888c <__swbuf_r+0x98>)
 8008808:	429c      	cmp	r4, r3
 800880a:	d12b      	bne.n	8008864 <__swbuf_r+0x70>
 800880c:	686c      	ldr	r4, [r5, #4]
 800880e:	69a3      	ldr	r3, [r4, #24]
 8008810:	60a3      	str	r3, [r4, #8]
 8008812:	89a3      	ldrh	r3, [r4, #12]
 8008814:	071a      	lsls	r2, r3, #28
 8008816:	d52f      	bpl.n	8008878 <__swbuf_r+0x84>
 8008818:	6923      	ldr	r3, [r4, #16]
 800881a:	b36b      	cbz	r3, 8008878 <__swbuf_r+0x84>
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	6820      	ldr	r0, [r4, #0]
 8008820:	1ac0      	subs	r0, r0, r3
 8008822:	6963      	ldr	r3, [r4, #20]
 8008824:	b2f6      	uxtb	r6, r6
 8008826:	4283      	cmp	r3, r0
 8008828:	4637      	mov	r7, r6
 800882a:	dc04      	bgt.n	8008836 <__swbuf_r+0x42>
 800882c:	4621      	mov	r1, r4
 800882e:	4628      	mov	r0, r5
 8008830:	f000 f93c 	bl	8008aac <_fflush_r>
 8008834:	bb30      	cbnz	r0, 8008884 <__swbuf_r+0x90>
 8008836:	68a3      	ldr	r3, [r4, #8]
 8008838:	3b01      	subs	r3, #1
 800883a:	60a3      	str	r3, [r4, #8]
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	6022      	str	r2, [r4, #0]
 8008842:	701e      	strb	r6, [r3, #0]
 8008844:	6963      	ldr	r3, [r4, #20]
 8008846:	3001      	adds	r0, #1
 8008848:	4283      	cmp	r3, r0
 800884a:	d004      	beq.n	8008856 <__swbuf_r+0x62>
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	07db      	lsls	r3, r3, #31
 8008850:	d506      	bpl.n	8008860 <__swbuf_r+0x6c>
 8008852:	2e0a      	cmp	r6, #10
 8008854:	d104      	bne.n	8008860 <__swbuf_r+0x6c>
 8008856:	4621      	mov	r1, r4
 8008858:	4628      	mov	r0, r5
 800885a:	f000 f927 	bl	8008aac <_fflush_r>
 800885e:	b988      	cbnz	r0, 8008884 <__swbuf_r+0x90>
 8008860:	4638      	mov	r0, r7
 8008862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008864:	4b0a      	ldr	r3, [pc, #40]	; (8008890 <__swbuf_r+0x9c>)
 8008866:	429c      	cmp	r4, r3
 8008868:	d101      	bne.n	800886e <__swbuf_r+0x7a>
 800886a:	68ac      	ldr	r4, [r5, #8]
 800886c:	e7cf      	b.n	800880e <__swbuf_r+0x1a>
 800886e:	4b09      	ldr	r3, [pc, #36]	; (8008894 <__swbuf_r+0xa0>)
 8008870:	429c      	cmp	r4, r3
 8008872:	bf08      	it	eq
 8008874:	68ec      	ldreq	r4, [r5, #12]
 8008876:	e7ca      	b.n	800880e <__swbuf_r+0x1a>
 8008878:	4621      	mov	r1, r4
 800887a:	4628      	mov	r0, r5
 800887c:	f000 f81a 	bl	80088b4 <__swsetup_r>
 8008880:	2800      	cmp	r0, #0
 8008882:	d0cb      	beq.n	800881c <__swbuf_r+0x28>
 8008884:	f04f 37ff 	mov.w	r7, #4294967295
 8008888:	e7ea      	b.n	8008860 <__swbuf_r+0x6c>
 800888a:	bf00      	nop
 800888c:	0800946c 	.word	0x0800946c
 8008890:	0800948c 	.word	0x0800948c
 8008894:	0800944c 	.word	0x0800944c

08008898 <__ascii_wctomb>:
 8008898:	b149      	cbz	r1, 80088ae <__ascii_wctomb+0x16>
 800889a:	2aff      	cmp	r2, #255	; 0xff
 800889c:	bf85      	ittet	hi
 800889e:	238a      	movhi	r3, #138	; 0x8a
 80088a0:	6003      	strhi	r3, [r0, #0]
 80088a2:	700a      	strbls	r2, [r1, #0]
 80088a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80088a8:	bf98      	it	ls
 80088aa:	2001      	movls	r0, #1
 80088ac:	4770      	bx	lr
 80088ae:	4608      	mov	r0, r1
 80088b0:	4770      	bx	lr
	...

080088b4 <__swsetup_r>:
 80088b4:	4b32      	ldr	r3, [pc, #200]	; (8008980 <__swsetup_r+0xcc>)
 80088b6:	b570      	push	{r4, r5, r6, lr}
 80088b8:	681d      	ldr	r5, [r3, #0]
 80088ba:	4606      	mov	r6, r0
 80088bc:	460c      	mov	r4, r1
 80088be:	b125      	cbz	r5, 80088ca <__swsetup_r+0x16>
 80088c0:	69ab      	ldr	r3, [r5, #24]
 80088c2:	b913      	cbnz	r3, 80088ca <__swsetup_r+0x16>
 80088c4:	4628      	mov	r0, r5
 80088c6:	f000 f985 	bl	8008bd4 <__sinit>
 80088ca:	4b2e      	ldr	r3, [pc, #184]	; (8008984 <__swsetup_r+0xd0>)
 80088cc:	429c      	cmp	r4, r3
 80088ce:	d10f      	bne.n	80088f0 <__swsetup_r+0x3c>
 80088d0:	686c      	ldr	r4, [r5, #4]
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088d8:	0719      	lsls	r1, r3, #28
 80088da:	d42c      	bmi.n	8008936 <__swsetup_r+0x82>
 80088dc:	06dd      	lsls	r5, r3, #27
 80088de:	d411      	bmi.n	8008904 <__swsetup_r+0x50>
 80088e0:	2309      	movs	r3, #9
 80088e2:	6033      	str	r3, [r6, #0]
 80088e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088e8:	81a3      	strh	r3, [r4, #12]
 80088ea:	f04f 30ff 	mov.w	r0, #4294967295
 80088ee:	e03e      	b.n	800896e <__swsetup_r+0xba>
 80088f0:	4b25      	ldr	r3, [pc, #148]	; (8008988 <__swsetup_r+0xd4>)
 80088f2:	429c      	cmp	r4, r3
 80088f4:	d101      	bne.n	80088fa <__swsetup_r+0x46>
 80088f6:	68ac      	ldr	r4, [r5, #8]
 80088f8:	e7eb      	b.n	80088d2 <__swsetup_r+0x1e>
 80088fa:	4b24      	ldr	r3, [pc, #144]	; (800898c <__swsetup_r+0xd8>)
 80088fc:	429c      	cmp	r4, r3
 80088fe:	bf08      	it	eq
 8008900:	68ec      	ldreq	r4, [r5, #12]
 8008902:	e7e6      	b.n	80088d2 <__swsetup_r+0x1e>
 8008904:	0758      	lsls	r0, r3, #29
 8008906:	d512      	bpl.n	800892e <__swsetup_r+0x7a>
 8008908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800890a:	b141      	cbz	r1, 800891e <__swsetup_r+0x6a>
 800890c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008910:	4299      	cmp	r1, r3
 8008912:	d002      	beq.n	800891a <__swsetup_r+0x66>
 8008914:	4630      	mov	r0, r6
 8008916:	f7ff fb6f 	bl	8007ff8 <_free_r>
 800891a:	2300      	movs	r3, #0
 800891c:	6363      	str	r3, [r4, #52]	; 0x34
 800891e:	89a3      	ldrh	r3, [r4, #12]
 8008920:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008924:	81a3      	strh	r3, [r4, #12]
 8008926:	2300      	movs	r3, #0
 8008928:	6063      	str	r3, [r4, #4]
 800892a:	6923      	ldr	r3, [r4, #16]
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	f043 0308 	orr.w	r3, r3, #8
 8008934:	81a3      	strh	r3, [r4, #12]
 8008936:	6923      	ldr	r3, [r4, #16]
 8008938:	b94b      	cbnz	r3, 800894e <__swsetup_r+0x9a>
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008944:	d003      	beq.n	800894e <__swsetup_r+0x9a>
 8008946:	4621      	mov	r1, r4
 8008948:	4630      	mov	r0, r6
 800894a:	f000 fa07 	bl	8008d5c <__smakebuf_r>
 800894e:	89a0      	ldrh	r0, [r4, #12]
 8008950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008954:	f010 0301 	ands.w	r3, r0, #1
 8008958:	d00a      	beq.n	8008970 <__swsetup_r+0xbc>
 800895a:	2300      	movs	r3, #0
 800895c:	60a3      	str	r3, [r4, #8]
 800895e:	6963      	ldr	r3, [r4, #20]
 8008960:	425b      	negs	r3, r3
 8008962:	61a3      	str	r3, [r4, #24]
 8008964:	6923      	ldr	r3, [r4, #16]
 8008966:	b943      	cbnz	r3, 800897a <__swsetup_r+0xc6>
 8008968:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800896c:	d1ba      	bne.n	80088e4 <__swsetup_r+0x30>
 800896e:	bd70      	pop	{r4, r5, r6, pc}
 8008970:	0781      	lsls	r1, r0, #30
 8008972:	bf58      	it	pl
 8008974:	6963      	ldrpl	r3, [r4, #20]
 8008976:	60a3      	str	r3, [r4, #8]
 8008978:	e7f4      	b.n	8008964 <__swsetup_r+0xb0>
 800897a:	2000      	movs	r0, #0
 800897c:	e7f7      	b.n	800896e <__swsetup_r+0xba>
 800897e:	bf00      	nop
 8008980:	2000000c 	.word	0x2000000c
 8008984:	0800946c 	.word	0x0800946c
 8008988:	0800948c 	.word	0x0800948c
 800898c:	0800944c 	.word	0x0800944c

08008990 <abort>:
 8008990:	b508      	push	{r3, lr}
 8008992:	2006      	movs	r0, #6
 8008994:	f000 fa52 	bl	8008e3c <raise>
 8008998:	2001      	movs	r0, #1
 800899a:	f7f9 f82f 	bl	80019fc <_exit>
	...

080089a0 <__sflush_r>:
 80089a0:	898a      	ldrh	r2, [r1, #12]
 80089a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a6:	4605      	mov	r5, r0
 80089a8:	0710      	lsls	r0, r2, #28
 80089aa:	460c      	mov	r4, r1
 80089ac:	d458      	bmi.n	8008a60 <__sflush_r+0xc0>
 80089ae:	684b      	ldr	r3, [r1, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	dc05      	bgt.n	80089c0 <__sflush_r+0x20>
 80089b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	dc02      	bgt.n	80089c0 <__sflush_r+0x20>
 80089ba:	2000      	movs	r0, #0
 80089bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089c2:	2e00      	cmp	r6, #0
 80089c4:	d0f9      	beq.n	80089ba <__sflush_r+0x1a>
 80089c6:	2300      	movs	r3, #0
 80089c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089cc:	682f      	ldr	r7, [r5, #0]
 80089ce:	602b      	str	r3, [r5, #0]
 80089d0:	d032      	beq.n	8008a38 <__sflush_r+0x98>
 80089d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089d4:	89a3      	ldrh	r3, [r4, #12]
 80089d6:	075a      	lsls	r2, r3, #29
 80089d8:	d505      	bpl.n	80089e6 <__sflush_r+0x46>
 80089da:	6863      	ldr	r3, [r4, #4]
 80089dc:	1ac0      	subs	r0, r0, r3
 80089de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089e0:	b10b      	cbz	r3, 80089e6 <__sflush_r+0x46>
 80089e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089e4:	1ac0      	subs	r0, r0, r3
 80089e6:	2300      	movs	r3, #0
 80089e8:	4602      	mov	r2, r0
 80089ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089ec:	6a21      	ldr	r1, [r4, #32]
 80089ee:	4628      	mov	r0, r5
 80089f0:	47b0      	blx	r6
 80089f2:	1c43      	adds	r3, r0, #1
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	d106      	bne.n	8008a06 <__sflush_r+0x66>
 80089f8:	6829      	ldr	r1, [r5, #0]
 80089fa:	291d      	cmp	r1, #29
 80089fc:	d82c      	bhi.n	8008a58 <__sflush_r+0xb8>
 80089fe:	4a2a      	ldr	r2, [pc, #168]	; (8008aa8 <__sflush_r+0x108>)
 8008a00:	40ca      	lsrs	r2, r1
 8008a02:	07d6      	lsls	r6, r2, #31
 8008a04:	d528      	bpl.n	8008a58 <__sflush_r+0xb8>
 8008a06:	2200      	movs	r2, #0
 8008a08:	6062      	str	r2, [r4, #4]
 8008a0a:	04d9      	lsls	r1, r3, #19
 8008a0c:	6922      	ldr	r2, [r4, #16]
 8008a0e:	6022      	str	r2, [r4, #0]
 8008a10:	d504      	bpl.n	8008a1c <__sflush_r+0x7c>
 8008a12:	1c42      	adds	r2, r0, #1
 8008a14:	d101      	bne.n	8008a1a <__sflush_r+0x7a>
 8008a16:	682b      	ldr	r3, [r5, #0]
 8008a18:	b903      	cbnz	r3, 8008a1c <__sflush_r+0x7c>
 8008a1a:	6560      	str	r0, [r4, #84]	; 0x54
 8008a1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a1e:	602f      	str	r7, [r5, #0]
 8008a20:	2900      	cmp	r1, #0
 8008a22:	d0ca      	beq.n	80089ba <__sflush_r+0x1a>
 8008a24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a28:	4299      	cmp	r1, r3
 8008a2a:	d002      	beq.n	8008a32 <__sflush_r+0x92>
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f7ff fae3 	bl	8007ff8 <_free_r>
 8008a32:	2000      	movs	r0, #0
 8008a34:	6360      	str	r0, [r4, #52]	; 0x34
 8008a36:	e7c1      	b.n	80089bc <__sflush_r+0x1c>
 8008a38:	6a21      	ldr	r1, [r4, #32]
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	47b0      	blx	r6
 8008a40:	1c41      	adds	r1, r0, #1
 8008a42:	d1c7      	bne.n	80089d4 <__sflush_r+0x34>
 8008a44:	682b      	ldr	r3, [r5, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0c4      	beq.n	80089d4 <__sflush_r+0x34>
 8008a4a:	2b1d      	cmp	r3, #29
 8008a4c:	d001      	beq.n	8008a52 <__sflush_r+0xb2>
 8008a4e:	2b16      	cmp	r3, #22
 8008a50:	d101      	bne.n	8008a56 <__sflush_r+0xb6>
 8008a52:	602f      	str	r7, [r5, #0]
 8008a54:	e7b1      	b.n	80089ba <__sflush_r+0x1a>
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a5c:	81a3      	strh	r3, [r4, #12]
 8008a5e:	e7ad      	b.n	80089bc <__sflush_r+0x1c>
 8008a60:	690f      	ldr	r7, [r1, #16]
 8008a62:	2f00      	cmp	r7, #0
 8008a64:	d0a9      	beq.n	80089ba <__sflush_r+0x1a>
 8008a66:	0793      	lsls	r3, r2, #30
 8008a68:	680e      	ldr	r6, [r1, #0]
 8008a6a:	bf08      	it	eq
 8008a6c:	694b      	ldreq	r3, [r1, #20]
 8008a6e:	600f      	str	r7, [r1, #0]
 8008a70:	bf18      	it	ne
 8008a72:	2300      	movne	r3, #0
 8008a74:	eba6 0807 	sub.w	r8, r6, r7
 8008a78:	608b      	str	r3, [r1, #8]
 8008a7a:	f1b8 0f00 	cmp.w	r8, #0
 8008a7e:	dd9c      	ble.n	80089ba <__sflush_r+0x1a>
 8008a80:	6a21      	ldr	r1, [r4, #32]
 8008a82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a84:	4643      	mov	r3, r8
 8008a86:	463a      	mov	r2, r7
 8008a88:	4628      	mov	r0, r5
 8008a8a:	47b0      	blx	r6
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	dc06      	bgt.n	8008a9e <__sflush_r+0xfe>
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a96:	81a3      	strh	r3, [r4, #12]
 8008a98:	f04f 30ff 	mov.w	r0, #4294967295
 8008a9c:	e78e      	b.n	80089bc <__sflush_r+0x1c>
 8008a9e:	4407      	add	r7, r0
 8008aa0:	eba8 0800 	sub.w	r8, r8, r0
 8008aa4:	e7e9      	b.n	8008a7a <__sflush_r+0xda>
 8008aa6:	bf00      	nop
 8008aa8:	20400001 	.word	0x20400001

08008aac <_fflush_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	690b      	ldr	r3, [r1, #16]
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	b913      	cbnz	r3, 8008abc <_fflush_r+0x10>
 8008ab6:	2500      	movs	r5, #0
 8008ab8:	4628      	mov	r0, r5
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	b118      	cbz	r0, 8008ac6 <_fflush_r+0x1a>
 8008abe:	6983      	ldr	r3, [r0, #24]
 8008ac0:	b90b      	cbnz	r3, 8008ac6 <_fflush_r+0x1a>
 8008ac2:	f000 f887 	bl	8008bd4 <__sinit>
 8008ac6:	4b14      	ldr	r3, [pc, #80]	; (8008b18 <_fflush_r+0x6c>)
 8008ac8:	429c      	cmp	r4, r3
 8008aca:	d11b      	bne.n	8008b04 <_fflush_r+0x58>
 8008acc:	686c      	ldr	r4, [r5, #4]
 8008ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d0ef      	beq.n	8008ab6 <_fflush_r+0xa>
 8008ad6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ad8:	07d0      	lsls	r0, r2, #31
 8008ada:	d404      	bmi.n	8008ae6 <_fflush_r+0x3a>
 8008adc:	0599      	lsls	r1, r3, #22
 8008ade:	d402      	bmi.n	8008ae6 <_fflush_r+0x3a>
 8008ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ae2:	f000 f915 	bl	8008d10 <__retarget_lock_acquire_recursive>
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	4621      	mov	r1, r4
 8008aea:	f7ff ff59 	bl	80089a0 <__sflush_r>
 8008aee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008af0:	07da      	lsls	r2, r3, #31
 8008af2:	4605      	mov	r5, r0
 8008af4:	d4e0      	bmi.n	8008ab8 <_fflush_r+0xc>
 8008af6:	89a3      	ldrh	r3, [r4, #12]
 8008af8:	059b      	lsls	r3, r3, #22
 8008afa:	d4dd      	bmi.n	8008ab8 <_fflush_r+0xc>
 8008afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008afe:	f000 f908 	bl	8008d12 <__retarget_lock_release_recursive>
 8008b02:	e7d9      	b.n	8008ab8 <_fflush_r+0xc>
 8008b04:	4b05      	ldr	r3, [pc, #20]	; (8008b1c <_fflush_r+0x70>)
 8008b06:	429c      	cmp	r4, r3
 8008b08:	d101      	bne.n	8008b0e <_fflush_r+0x62>
 8008b0a:	68ac      	ldr	r4, [r5, #8]
 8008b0c:	e7df      	b.n	8008ace <_fflush_r+0x22>
 8008b0e:	4b04      	ldr	r3, [pc, #16]	; (8008b20 <_fflush_r+0x74>)
 8008b10:	429c      	cmp	r4, r3
 8008b12:	bf08      	it	eq
 8008b14:	68ec      	ldreq	r4, [r5, #12]
 8008b16:	e7da      	b.n	8008ace <_fflush_r+0x22>
 8008b18:	0800946c 	.word	0x0800946c
 8008b1c:	0800948c 	.word	0x0800948c
 8008b20:	0800944c 	.word	0x0800944c

08008b24 <std>:
 8008b24:	2300      	movs	r3, #0
 8008b26:	b510      	push	{r4, lr}
 8008b28:	4604      	mov	r4, r0
 8008b2a:	e9c0 3300 	strd	r3, r3, [r0]
 8008b2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b32:	6083      	str	r3, [r0, #8]
 8008b34:	8181      	strh	r1, [r0, #12]
 8008b36:	6643      	str	r3, [r0, #100]	; 0x64
 8008b38:	81c2      	strh	r2, [r0, #14]
 8008b3a:	6183      	str	r3, [r0, #24]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	2208      	movs	r2, #8
 8008b40:	305c      	adds	r0, #92	; 0x5c
 8008b42:	f7fd fba5 	bl	8006290 <memset>
 8008b46:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <std+0x38>)
 8008b48:	6263      	str	r3, [r4, #36]	; 0x24
 8008b4a:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <std+0x3c>)
 8008b4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b4e:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <std+0x40>)
 8008b50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b52:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <std+0x44>)
 8008b54:	6224      	str	r4, [r4, #32]
 8008b56:	6323      	str	r3, [r4, #48]	; 0x30
 8008b58:	bd10      	pop	{r4, pc}
 8008b5a:	bf00      	nop
 8008b5c:	08008e75 	.word	0x08008e75
 8008b60:	08008e97 	.word	0x08008e97
 8008b64:	08008ecf 	.word	0x08008ecf
 8008b68:	08008ef3 	.word	0x08008ef3

08008b6c <_cleanup_r>:
 8008b6c:	4901      	ldr	r1, [pc, #4]	; (8008b74 <_cleanup_r+0x8>)
 8008b6e:	f000 b8af 	b.w	8008cd0 <_fwalk_reent>
 8008b72:	bf00      	nop
 8008b74:	08008aad 	.word	0x08008aad

08008b78 <__sfmoreglue>:
 8008b78:	b570      	push	{r4, r5, r6, lr}
 8008b7a:	1e4a      	subs	r2, r1, #1
 8008b7c:	2568      	movs	r5, #104	; 0x68
 8008b7e:	4355      	muls	r5, r2
 8008b80:	460e      	mov	r6, r1
 8008b82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b86:	f7ff fa87 	bl	8008098 <_malloc_r>
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	b140      	cbz	r0, 8008ba0 <__sfmoreglue+0x28>
 8008b8e:	2100      	movs	r1, #0
 8008b90:	e9c0 1600 	strd	r1, r6, [r0]
 8008b94:	300c      	adds	r0, #12
 8008b96:	60a0      	str	r0, [r4, #8]
 8008b98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b9c:	f7fd fb78 	bl	8006290 <memset>
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	bd70      	pop	{r4, r5, r6, pc}

08008ba4 <__sfp_lock_acquire>:
 8008ba4:	4801      	ldr	r0, [pc, #4]	; (8008bac <__sfp_lock_acquire+0x8>)
 8008ba6:	f000 b8b3 	b.w	8008d10 <__retarget_lock_acquire_recursive>
 8008baa:	bf00      	nop
 8008bac:	200003a8 	.word	0x200003a8

08008bb0 <__sfp_lock_release>:
 8008bb0:	4801      	ldr	r0, [pc, #4]	; (8008bb8 <__sfp_lock_release+0x8>)
 8008bb2:	f000 b8ae 	b.w	8008d12 <__retarget_lock_release_recursive>
 8008bb6:	bf00      	nop
 8008bb8:	200003a8 	.word	0x200003a8

08008bbc <__sinit_lock_acquire>:
 8008bbc:	4801      	ldr	r0, [pc, #4]	; (8008bc4 <__sinit_lock_acquire+0x8>)
 8008bbe:	f000 b8a7 	b.w	8008d10 <__retarget_lock_acquire_recursive>
 8008bc2:	bf00      	nop
 8008bc4:	200003a3 	.word	0x200003a3

08008bc8 <__sinit_lock_release>:
 8008bc8:	4801      	ldr	r0, [pc, #4]	; (8008bd0 <__sinit_lock_release+0x8>)
 8008bca:	f000 b8a2 	b.w	8008d12 <__retarget_lock_release_recursive>
 8008bce:	bf00      	nop
 8008bd0:	200003a3 	.word	0x200003a3

08008bd4 <__sinit>:
 8008bd4:	b510      	push	{r4, lr}
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	f7ff fff0 	bl	8008bbc <__sinit_lock_acquire>
 8008bdc:	69a3      	ldr	r3, [r4, #24]
 8008bde:	b11b      	cbz	r3, 8008be8 <__sinit+0x14>
 8008be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008be4:	f7ff bff0 	b.w	8008bc8 <__sinit_lock_release>
 8008be8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008bec:	6523      	str	r3, [r4, #80]	; 0x50
 8008bee:	4b13      	ldr	r3, [pc, #76]	; (8008c3c <__sinit+0x68>)
 8008bf0:	4a13      	ldr	r2, [pc, #76]	; (8008c40 <__sinit+0x6c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008bf6:	42a3      	cmp	r3, r4
 8008bf8:	bf04      	itt	eq
 8008bfa:	2301      	moveq	r3, #1
 8008bfc:	61a3      	streq	r3, [r4, #24]
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f000 f820 	bl	8008c44 <__sfp>
 8008c04:	6060      	str	r0, [r4, #4]
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 f81c 	bl	8008c44 <__sfp>
 8008c0c:	60a0      	str	r0, [r4, #8]
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f000 f818 	bl	8008c44 <__sfp>
 8008c14:	2200      	movs	r2, #0
 8008c16:	60e0      	str	r0, [r4, #12]
 8008c18:	2104      	movs	r1, #4
 8008c1a:	6860      	ldr	r0, [r4, #4]
 8008c1c:	f7ff ff82 	bl	8008b24 <std>
 8008c20:	68a0      	ldr	r0, [r4, #8]
 8008c22:	2201      	movs	r2, #1
 8008c24:	2109      	movs	r1, #9
 8008c26:	f7ff ff7d 	bl	8008b24 <std>
 8008c2a:	68e0      	ldr	r0, [r4, #12]
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	2112      	movs	r1, #18
 8008c30:	f7ff ff78 	bl	8008b24 <std>
 8008c34:	2301      	movs	r3, #1
 8008c36:	61a3      	str	r3, [r4, #24]
 8008c38:	e7d2      	b.n	8008be0 <__sinit+0xc>
 8008c3a:	bf00      	nop
 8008c3c:	080090c8 	.word	0x080090c8
 8008c40:	08008b6d 	.word	0x08008b6d

08008c44 <__sfp>:
 8008c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c46:	4607      	mov	r7, r0
 8008c48:	f7ff ffac 	bl	8008ba4 <__sfp_lock_acquire>
 8008c4c:	4b1e      	ldr	r3, [pc, #120]	; (8008cc8 <__sfp+0x84>)
 8008c4e:	681e      	ldr	r6, [r3, #0]
 8008c50:	69b3      	ldr	r3, [r6, #24]
 8008c52:	b913      	cbnz	r3, 8008c5a <__sfp+0x16>
 8008c54:	4630      	mov	r0, r6
 8008c56:	f7ff ffbd 	bl	8008bd4 <__sinit>
 8008c5a:	3648      	adds	r6, #72	; 0x48
 8008c5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c60:	3b01      	subs	r3, #1
 8008c62:	d503      	bpl.n	8008c6c <__sfp+0x28>
 8008c64:	6833      	ldr	r3, [r6, #0]
 8008c66:	b30b      	cbz	r3, 8008cac <__sfp+0x68>
 8008c68:	6836      	ldr	r6, [r6, #0]
 8008c6a:	e7f7      	b.n	8008c5c <__sfp+0x18>
 8008c6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c70:	b9d5      	cbnz	r5, 8008ca8 <__sfp+0x64>
 8008c72:	4b16      	ldr	r3, [pc, #88]	; (8008ccc <__sfp+0x88>)
 8008c74:	60e3      	str	r3, [r4, #12]
 8008c76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c7a:	6665      	str	r5, [r4, #100]	; 0x64
 8008c7c:	f000 f847 	bl	8008d0e <__retarget_lock_init_recursive>
 8008c80:	f7ff ff96 	bl	8008bb0 <__sfp_lock_release>
 8008c84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c8c:	6025      	str	r5, [r4, #0]
 8008c8e:	61a5      	str	r5, [r4, #24]
 8008c90:	2208      	movs	r2, #8
 8008c92:	4629      	mov	r1, r5
 8008c94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c98:	f7fd fafa 	bl	8006290 <memset>
 8008c9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ca0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ca8:	3468      	adds	r4, #104	; 0x68
 8008caa:	e7d9      	b.n	8008c60 <__sfp+0x1c>
 8008cac:	2104      	movs	r1, #4
 8008cae:	4638      	mov	r0, r7
 8008cb0:	f7ff ff62 	bl	8008b78 <__sfmoreglue>
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	6030      	str	r0, [r6, #0]
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d1d5      	bne.n	8008c68 <__sfp+0x24>
 8008cbc:	f7ff ff78 	bl	8008bb0 <__sfp_lock_release>
 8008cc0:	230c      	movs	r3, #12
 8008cc2:	603b      	str	r3, [r7, #0]
 8008cc4:	e7ee      	b.n	8008ca4 <__sfp+0x60>
 8008cc6:	bf00      	nop
 8008cc8:	080090c8 	.word	0x080090c8
 8008ccc:	ffff0001 	.word	0xffff0001

08008cd0 <_fwalk_reent>:
 8008cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd4:	4606      	mov	r6, r0
 8008cd6:	4688      	mov	r8, r1
 8008cd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008cdc:	2700      	movs	r7, #0
 8008cde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ce2:	f1b9 0901 	subs.w	r9, r9, #1
 8008ce6:	d505      	bpl.n	8008cf4 <_fwalk_reent+0x24>
 8008ce8:	6824      	ldr	r4, [r4, #0]
 8008cea:	2c00      	cmp	r4, #0
 8008cec:	d1f7      	bne.n	8008cde <_fwalk_reent+0xe>
 8008cee:	4638      	mov	r0, r7
 8008cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cf4:	89ab      	ldrh	r3, [r5, #12]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d907      	bls.n	8008d0a <_fwalk_reent+0x3a>
 8008cfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	d003      	beq.n	8008d0a <_fwalk_reent+0x3a>
 8008d02:	4629      	mov	r1, r5
 8008d04:	4630      	mov	r0, r6
 8008d06:	47c0      	blx	r8
 8008d08:	4307      	orrs	r7, r0
 8008d0a:	3568      	adds	r5, #104	; 0x68
 8008d0c:	e7e9      	b.n	8008ce2 <_fwalk_reent+0x12>

08008d0e <__retarget_lock_init_recursive>:
 8008d0e:	4770      	bx	lr

08008d10 <__retarget_lock_acquire_recursive>:
 8008d10:	4770      	bx	lr

08008d12 <__retarget_lock_release_recursive>:
 8008d12:	4770      	bx	lr

08008d14 <__swhatbuf_r>:
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	460e      	mov	r6, r1
 8008d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1c:	2900      	cmp	r1, #0
 8008d1e:	b096      	sub	sp, #88	; 0x58
 8008d20:	4614      	mov	r4, r2
 8008d22:	461d      	mov	r5, r3
 8008d24:	da07      	bge.n	8008d36 <__swhatbuf_r+0x22>
 8008d26:	2300      	movs	r3, #0
 8008d28:	602b      	str	r3, [r5, #0]
 8008d2a:	89b3      	ldrh	r3, [r6, #12]
 8008d2c:	061a      	lsls	r2, r3, #24
 8008d2e:	d410      	bmi.n	8008d52 <__swhatbuf_r+0x3e>
 8008d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d34:	e00e      	b.n	8008d54 <__swhatbuf_r+0x40>
 8008d36:	466a      	mov	r2, sp
 8008d38:	f000 f902 	bl	8008f40 <_fstat_r>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	dbf2      	blt.n	8008d26 <__swhatbuf_r+0x12>
 8008d40:	9a01      	ldr	r2, [sp, #4]
 8008d42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d4a:	425a      	negs	r2, r3
 8008d4c:	415a      	adcs	r2, r3
 8008d4e:	602a      	str	r2, [r5, #0]
 8008d50:	e7ee      	b.n	8008d30 <__swhatbuf_r+0x1c>
 8008d52:	2340      	movs	r3, #64	; 0x40
 8008d54:	2000      	movs	r0, #0
 8008d56:	6023      	str	r3, [r4, #0]
 8008d58:	b016      	add	sp, #88	; 0x58
 8008d5a:	bd70      	pop	{r4, r5, r6, pc}

08008d5c <__smakebuf_r>:
 8008d5c:	898b      	ldrh	r3, [r1, #12]
 8008d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d60:	079d      	lsls	r5, r3, #30
 8008d62:	4606      	mov	r6, r0
 8008d64:	460c      	mov	r4, r1
 8008d66:	d507      	bpl.n	8008d78 <__smakebuf_r+0x1c>
 8008d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	6123      	str	r3, [r4, #16]
 8008d70:	2301      	movs	r3, #1
 8008d72:	6163      	str	r3, [r4, #20]
 8008d74:	b002      	add	sp, #8
 8008d76:	bd70      	pop	{r4, r5, r6, pc}
 8008d78:	ab01      	add	r3, sp, #4
 8008d7a:	466a      	mov	r2, sp
 8008d7c:	f7ff ffca 	bl	8008d14 <__swhatbuf_r>
 8008d80:	9900      	ldr	r1, [sp, #0]
 8008d82:	4605      	mov	r5, r0
 8008d84:	4630      	mov	r0, r6
 8008d86:	f7ff f987 	bl	8008098 <_malloc_r>
 8008d8a:	b948      	cbnz	r0, 8008da0 <__smakebuf_r+0x44>
 8008d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d90:	059a      	lsls	r2, r3, #22
 8008d92:	d4ef      	bmi.n	8008d74 <__smakebuf_r+0x18>
 8008d94:	f023 0303 	bic.w	r3, r3, #3
 8008d98:	f043 0302 	orr.w	r3, r3, #2
 8008d9c:	81a3      	strh	r3, [r4, #12]
 8008d9e:	e7e3      	b.n	8008d68 <__smakebuf_r+0xc>
 8008da0:	4b0d      	ldr	r3, [pc, #52]	; (8008dd8 <__smakebuf_r+0x7c>)
 8008da2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008da4:	89a3      	ldrh	r3, [r4, #12]
 8008da6:	6020      	str	r0, [r4, #0]
 8008da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dac:	81a3      	strh	r3, [r4, #12]
 8008dae:	9b00      	ldr	r3, [sp, #0]
 8008db0:	6163      	str	r3, [r4, #20]
 8008db2:	9b01      	ldr	r3, [sp, #4]
 8008db4:	6120      	str	r0, [r4, #16]
 8008db6:	b15b      	cbz	r3, 8008dd0 <__smakebuf_r+0x74>
 8008db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	f000 f8d1 	bl	8008f64 <_isatty_r>
 8008dc2:	b128      	cbz	r0, 8008dd0 <__smakebuf_r+0x74>
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	f023 0303 	bic.w	r3, r3, #3
 8008dca:	f043 0301 	orr.w	r3, r3, #1
 8008dce:	81a3      	strh	r3, [r4, #12]
 8008dd0:	89a0      	ldrh	r0, [r4, #12]
 8008dd2:	4305      	orrs	r5, r0
 8008dd4:	81a5      	strh	r5, [r4, #12]
 8008dd6:	e7cd      	b.n	8008d74 <__smakebuf_r+0x18>
 8008dd8:	08008b6d 	.word	0x08008b6d

08008ddc <_malloc_usable_size_r>:
 8008ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008de0:	1f18      	subs	r0, r3, #4
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	bfbc      	itt	lt
 8008de6:	580b      	ldrlt	r3, [r1, r0]
 8008de8:	18c0      	addlt	r0, r0, r3
 8008dea:	4770      	bx	lr

08008dec <_raise_r>:
 8008dec:	291f      	cmp	r1, #31
 8008dee:	b538      	push	{r3, r4, r5, lr}
 8008df0:	4604      	mov	r4, r0
 8008df2:	460d      	mov	r5, r1
 8008df4:	d904      	bls.n	8008e00 <_raise_r+0x14>
 8008df6:	2316      	movs	r3, #22
 8008df8:	6003      	str	r3, [r0, #0]
 8008dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e02:	b112      	cbz	r2, 8008e0a <_raise_r+0x1e>
 8008e04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e08:	b94b      	cbnz	r3, 8008e1e <_raise_r+0x32>
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f000 f830 	bl	8008e70 <_getpid_r>
 8008e10:	462a      	mov	r2, r5
 8008e12:	4601      	mov	r1, r0
 8008e14:	4620      	mov	r0, r4
 8008e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e1a:	f000 b817 	b.w	8008e4c <_kill_r>
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d00a      	beq.n	8008e38 <_raise_r+0x4c>
 8008e22:	1c59      	adds	r1, r3, #1
 8008e24:	d103      	bne.n	8008e2e <_raise_r+0x42>
 8008e26:	2316      	movs	r3, #22
 8008e28:	6003      	str	r3, [r0, #0]
 8008e2a:	2001      	movs	r0, #1
 8008e2c:	e7e7      	b.n	8008dfe <_raise_r+0x12>
 8008e2e:	2400      	movs	r4, #0
 8008e30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e34:	4628      	mov	r0, r5
 8008e36:	4798      	blx	r3
 8008e38:	2000      	movs	r0, #0
 8008e3a:	e7e0      	b.n	8008dfe <_raise_r+0x12>

08008e3c <raise>:
 8008e3c:	4b02      	ldr	r3, [pc, #8]	; (8008e48 <raise+0xc>)
 8008e3e:	4601      	mov	r1, r0
 8008e40:	6818      	ldr	r0, [r3, #0]
 8008e42:	f7ff bfd3 	b.w	8008dec <_raise_r>
 8008e46:	bf00      	nop
 8008e48:	2000000c 	.word	0x2000000c

08008e4c <_kill_r>:
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	4d07      	ldr	r5, [pc, #28]	; (8008e6c <_kill_r+0x20>)
 8008e50:	2300      	movs	r3, #0
 8008e52:	4604      	mov	r4, r0
 8008e54:	4608      	mov	r0, r1
 8008e56:	4611      	mov	r1, r2
 8008e58:	602b      	str	r3, [r5, #0]
 8008e5a:	f7f8 fdbf 	bl	80019dc <_kill>
 8008e5e:	1c43      	adds	r3, r0, #1
 8008e60:	d102      	bne.n	8008e68 <_kill_r+0x1c>
 8008e62:	682b      	ldr	r3, [r5, #0]
 8008e64:	b103      	cbz	r3, 8008e68 <_kill_r+0x1c>
 8008e66:	6023      	str	r3, [r4, #0]
 8008e68:	bd38      	pop	{r3, r4, r5, pc}
 8008e6a:	bf00      	nop
 8008e6c:	2000039c 	.word	0x2000039c

08008e70 <_getpid_r>:
 8008e70:	f7f8 bdac 	b.w	80019cc <_getpid>

08008e74 <__sread>:
 8008e74:	b510      	push	{r4, lr}
 8008e76:	460c      	mov	r4, r1
 8008e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e7c:	f000 f894 	bl	8008fa8 <_read_r>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	bfab      	itete	ge
 8008e84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e86:	89a3      	ldrhlt	r3, [r4, #12]
 8008e88:	181b      	addge	r3, r3, r0
 8008e8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e8e:	bfac      	ite	ge
 8008e90:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e92:	81a3      	strhlt	r3, [r4, #12]
 8008e94:	bd10      	pop	{r4, pc}

08008e96 <__swrite>:
 8008e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e9a:	461f      	mov	r7, r3
 8008e9c:	898b      	ldrh	r3, [r1, #12]
 8008e9e:	05db      	lsls	r3, r3, #23
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	460c      	mov	r4, r1
 8008ea4:	4616      	mov	r6, r2
 8008ea6:	d505      	bpl.n	8008eb4 <__swrite+0x1e>
 8008ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eac:	2302      	movs	r3, #2
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f000 f868 	bl	8008f84 <_lseek_r>
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ebe:	81a3      	strh	r3, [r4, #12]
 8008ec0:	4632      	mov	r2, r6
 8008ec2:	463b      	mov	r3, r7
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eca:	f000 b817 	b.w	8008efc <_write_r>

08008ece <__sseek>:
 8008ece:	b510      	push	{r4, lr}
 8008ed0:	460c      	mov	r4, r1
 8008ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed6:	f000 f855 	bl	8008f84 <_lseek_r>
 8008eda:	1c43      	adds	r3, r0, #1
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	bf15      	itete	ne
 8008ee0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ee2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ee6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008eea:	81a3      	strheq	r3, [r4, #12]
 8008eec:	bf18      	it	ne
 8008eee:	81a3      	strhne	r3, [r4, #12]
 8008ef0:	bd10      	pop	{r4, pc}

08008ef2 <__sclose>:
 8008ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef6:	f000 b813 	b.w	8008f20 <_close_r>
	...

08008efc <_write_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4d07      	ldr	r5, [pc, #28]	; (8008f1c <_write_r+0x20>)
 8008f00:	4604      	mov	r4, r0
 8008f02:	4608      	mov	r0, r1
 8008f04:	4611      	mov	r1, r2
 8008f06:	2200      	movs	r2, #0
 8008f08:	602a      	str	r2, [r5, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	f7f8 fd9d 	bl	8001a4a <_write>
 8008f10:	1c43      	adds	r3, r0, #1
 8008f12:	d102      	bne.n	8008f1a <_write_r+0x1e>
 8008f14:	682b      	ldr	r3, [r5, #0]
 8008f16:	b103      	cbz	r3, 8008f1a <_write_r+0x1e>
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
 8008f1c:	2000039c 	.word	0x2000039c

08008f20 <_close_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4d06      	ldr	r5, [pc, #24]	; (8008f3c <_close_r+0x1c>)
 8008f24:	2300      	movs	r3, #0
 8008f26:	4604      	mov	r4, r0
 8008f28:	4608      	mov	r0, r1
 8008f2a:	602b      	str	r3, [r5, #0]
 8008f2c:	f7f8 fda9 	bl	8001a82 <_close>
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	d102      	bne.n	8008f3a <_close_r+0x1a>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	b103      	cbz	r3, 8008f3a <_close_r+0x1a>
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
 8008f3c:	2000039c 	.word	0x2000039c

08008f40 <_fstat_r>:
 8008f40:	b538      	push	{r3, r4, r5, lr}
 8008f42:	4d07      	ldr	r5, [pc, #28]	; (8008f60 <_fstat_r+0x20>)
 8008f44:	2300      	movs	r3, #0
 8008f46:	4604      	mov	r4, r0
 8008f48:	4608      	mov	r0, r1
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	602b      	str	r3, [r5, #0]
 8008f4e:	f7f8 fda4 	bl	8001a9a <_fstat>
 8008f52:	1c43      	adds	r3, r0, #1
 8008f54:	d102      	bne.n	8008f5c <_fstat_r+0x1c>
 8008f56:	682b      	ldr	r3, [r5, #0]
 8008f58:	b103      	cbz	r3, 8008f5c <_fstat_r+0x1c>
 8008f5a:	6023      	str	r3, [r4, #0]
 8008f5c:	bd38      	pop	{r3, r4, r5, pc}
 8008f5e:	bf00      	nop
 8008f60:	2000039c 	.word	0x2000039c

08008f64 <_isatty_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	4d06      	ldr	r5, [pc, #24]	; (8008f80 <_isatty_r+0x1c>)
 8008f68:	2300      	movs	r3, #0
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	602b      	str	r3, [r5, #0]
 8008f70:	f7f8 fda3 	bl	8001aba <_isatty>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d102      	bne.n	8008f7e <_isatty_r+0x1a>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	b103      	cbz	r3, 8008f7e <_isatty_r+0x1a>
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
 8008f80:	2000039c 	.word	0x2000039c

08008f84 <_lseek_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	4d07      	ldr	r5, [pc, #28]	; (8008fa4 <_lseek_r+0x20>)
 8008f88:	4604      	mov	r4, r0
 8008f8a:	4608      	mov	r0, r1
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	2200      	movs	r2, #0
 8008f90:	602a      	str	r2, [r5, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	f7f8 fd9c 	bl	8001ad0 <_lseek>
 8008f98:	1c43      	adds	r3, r0, #1
 8008f9a:	d102      	bne.n	8008fa2 <_lseek_r+0x1e>
 8008f9c:	682b      	ldr	r3, [r5, #0]
 8008f9e:	b103      	cbz	r3, 8008fa2 <_lseek_r+0x1e>
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	bd38      	pop	{r3, r4, r5, pc}
 8008fa4:	2000039c 	.word	0x2000039c

08008fa8 <_read_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	4d07      	ldr	r5, [pc, #28]	; (8008fc8 <_read_r+0x20>)
 8008fac:	4604      	mov	r4, r0
 8008fae:	4608      	mov	r0, r1
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	602a      	str	r2, [r5, #0]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f7f8 fd2a 	bl	8001a10 <_read>
 8008fbc:	1c43      	adds	r3, r0, #1
 8008fbe:	d102      	bne.n	8008fc6 <_read_r+0x1e>
 8008fc0:	682b      	ldr	r3, [r5, #0]
 8008fc2:	b103      	cbz	r3, 8008fc6 <_read_r+0x1e>
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	bd38      	pop	{r3, r4, r5, pc}
 8008fc8:	2000039c 	.word	0x2000039c

08008fcc <_init>:
 8008fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fce:	bf00      	nop
 8008fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fd2:	bc08      	pop	{r3}
 8008fd4:	469e      	mov	lr, r3
 8008fd6:	4770      	bx	lr

08008fd8 <_fini>:
 8008fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fda:	bf00      	nop
 8008fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fde:	bc08      	pop	{r3}
 8008fe0:	469e      	mov	lr, r3
 8008fe2:	4770      	bx	lr
