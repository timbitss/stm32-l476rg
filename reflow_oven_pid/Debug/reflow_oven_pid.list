
reflow_oven_pid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800aa78  0800aa78  0001aa78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afbc  0800afbc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800afbc  0800afbc  0001afbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afc4  0800afc4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afc4  0800afc4  0001afc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afc8  0800afc8  0001afc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800afcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  200001dc  0800b1a8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  0800b1a8  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016114  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a93  00000000  00000000  00036320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00038db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  0003a050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d8b  00000000  00000000  0003b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149c0  00000000  00000000  00063f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f863c  00000000  00000000  00078943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170f7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f34  00000000  00000000  00170fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa5c 	.word	0x0800aa5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800aa5c 	.word	0x0800aa5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <MAX31855K_Init>:

// Helper function declarations:
static void MAX31855K_error_check(MAX31855K_t *max); // Check data for device faults or SPI read error.

void MAX31855K_Init(MAX31855K_t *max, SPI_HandleTypeDef *hspi, GPIO_TypeDef *max_cs_port, uint16_t max_cs_pin)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	807b      	strh	r3, [r7, #2]
    max->spi_handle = hspi;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	601a      	str	r2, [r3, #0]
    max->cs_port = max_cs_port;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	605a      	str	r2, [r3, #4]
    max->cs_pin = max_cs_pin;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	887a      	ldrh	r2, [r7, #2]
 8000f9e:	811a      	strh	r2, [r3, #8]
    memset(max->tx_buf, 0, sizeof(max->tx_buf));
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	330a      	adds	r3, #10
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f007 f87f 	bl	80080ac <memset>
    memset(max->rx_buf, 0, sizeof(max->rx_buf));
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	330e      	adds	r3, #14
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f007 f878 	bl	80080ac <memset>
    max->data32 = 0;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	615a      	str	r2, [r3, #20]
    max->err = MAX_OK;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <MAX31855K_RxDMA>:

    return max->err;
}

void MAX31855K_RxDMA(MAX31855K_t *max)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    /* Pull CS line low */
    HAL_GPIO_WritePin(max->cs_port, max->cs_pin, GPIO_PIN_RESET);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6858      	ldr	r0, [r3, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	891b      	ldrh	r3, [r3, #8]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f003 f93e 	bl	8004264 <HAL_GPIO_WritePin>

    /* Execute DMA transfer */
    HAL_StatusTypeDef err = HAL_SPI_TransmitReceive_DMA(max->spi_handle, max->tx_buf, max->rx_buf, sizeof(max->rx_buf));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f103 010a 	add.w	r1, r3, #10
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f103 020e 	add.w	r2, r3, #14
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	f004 fcfb 	bl	80059f4 <HAL_SPI_TransmitReceive_DMA>
 8000ffe:	4603      	mov	r3, r0
 8001000:	73fb      	strb	r3, [r7, #15]
    if (err != HAL_OK)
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00a      	beq.n	800101e <MAX31855K_RxDMA+0x4e>
    {
        HAL_GPIO_WritePin(max->cs_port, max->cs_pin, GPIO_PIN_SET);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6858      	ldr	r0, [r3, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	891b      	ldrh	r3, [r3, #8]
 8001010:	2201      	movs	r2, #1
 8001012:	4619      	mov	r1, r3
 8001014:	f003 f926 	bl	8004264 <HAL_GPIO_WritePin>
        max->err = MAX_SPI_DMA_FAIL;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2205      	movs	r2, #5
 800101c:	761a      	strb	r2, [r3, #24]
    }
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <MAX31885K_RxDMA_Complete>:

void MAX31885K_RxDMA_Complete(MAX31855K_t *max)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(max->cs_port, max->cs_pin, GPIO_PIN_SET);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6858      	ldr	r0, [r3, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	891b      	ldrh	r3, [r3, #8]
 8001036:	2201      	movs	r2, #1
 8001038:	4619      	mov	r1, r3
 800103a:	f003 f913 	bl	8004264 <HAL_GPIO_WritePin>
    max->data32 = max->rx_buf[0] << 24 | (max->rx_buf[1] << 16) | (max->rx_buf[2] << 8) | max->rx_buf[3];
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7b9b      	ldrb	r3, [r3, #14]
 8001042:	061a      	lsls	r2, r3, #24
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7bdb      	ldrb	r3, [r3, #15]
 8001048:	041b      	lsls	r3, r3, #16
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7c1b      	ldrb	r3, [r3, #16]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	4313      	orrs	r3, r2
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	7c52      	ldrb	r2, [r2, #17]
 8001058:	4313      	orrs	r3, r2
 800105a:	461a      	mov	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	615a      	str	r2, [r3, #20]
    MAX31855K_error_check(max);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f871 	bl	8001148 <MAX31855K_error_check>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <MAX31855K_Get_HJ>:

float MAX31855K_Get_HJ(MAX31855K_t *max)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    /* Extract HJ temperature. */
    uint32_t data = max->data32;    // Capture latest data reading.
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	60bb      	str	r3, [r7, #8]
    int16_t val = 0;                // Value prior to temperature conversion.
 800107e:	2300      	movs	r3, #0
 8001080:	81fb      	strh	r3, [r7, #14]
    if (data & ((uint32_t)1 << 31)) // Perform sign-extension.
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	2b00      	cmp	r3, #0
 8001086:	da09      	bge.n	800109c <MAX31855K_Get_HJ+0x2c>
    {
        val = 0xC000 | ((data >> 18) & 0x3FFF);
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	0c9b      	lsrs	r3, r3, #18
 800108c:	b29b      	uxth	r3, r3
 800108e:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8001092:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8001096:	b29b      	uxth	r3, r3
 8001098:	81fb      	strh	r3, [r7, #14]
 800109a:	e002      	b.n	80010a2 <MAX31855K_Get_HJ+0x32>
    }
    else
    {
        val = data >> 18;
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	0c9b      	lsrs	r3, r3, #18
 80010a0:	81fb      	strh	r3, [r7, #14]
    }
    return val * HJ_RES;
 80010a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa3c 	bl	8000524 <__aeabi_i2d>
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MAX31855K_Get_HJ+0x64>)
 80010b2:	f7ff faa1 	bl	80005f8 <__aeabi_dmul>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fd93 	bl	8000be8 <__aeabi_d2f>
 80010c2:	4603      	mov	r3, r0
 80010c4:	ee07 3a90 	vmov	s15, r3
}
 80010c8:	eeb0 0a67 	vmov.f32	s0, s15
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	3fd00000 	.word	0x3fd00000

080010d8 <MAX31855K_Get_CJ>:

float MAX31855K_Get_CJ(MAX31855K_t *max)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
    /* Extract CJ temperature. */
    uint32_t data = max->data32;    // Capture latest data reading.
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	60bb      	str	r3, [r7, #8]
    int16_t val = 0;                // Value prior to temperature conversion.
 80010e6:	2300      	movs	r3, #0
 80010e8:	81fb      	strh	r3, [r7, #14]
    if (data & ((uint32_t)1 << 15)) // Perform sign-extension.
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d009      	beq.n	8001108 <MAX31855K_Get_CJ+0x30>
    {
        val = 0xF000 | ((data >> 4) & 0xFFF);
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80010fe:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001102:	b29b      	uxth	r3, r3
 8001104:	81fb      	strh	r3, [r7, #14]
 8001106:	e005      	b.n	8001114 <MAX31855K_Get_CJ+0x3c>
    }
    else
    {
        val = (data >> 4) & 0xFFF;
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	091b      	lsrs	r3, r3, #4
 800110c:	b21b      	sxth	r3, r3
 800110e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001112:	81fb      	strh	r3, [r7, #14]
    }
    return val * CJ_RES;
 8001114:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fa03 	bl	8000524 <__aeabi_i2d>
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MAX31855K_Get_CJ+0x6c>)
 8001124:	f7ff fa68 	bl	80005f8 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fd5a 	bl	8000be8 <__aeabi_d2f>
 8001134:	4603      	mov	r3, r0
 8001136:	ee07 3a90 	vmov	s15, r3
}
 800113a:	eeb0 0a67 	vmov.f32	s0, s15
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	3fb00000 	.word	0x3fb00000

08001148 <MAX31855K_error_check>:


static void MAX31855K_error_check(MAX31855K_t *max)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    if (max->data32 == 0)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d103      	bne.n	8001160 <MAX31855K_error_check+0x18>
    {
        max->err = MAX_ZEROS;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2204      	movs	r2, #4
 800115c:	761a      	strb	r2, [r3, #24]
    }
    else
    {
        max->err = MAX_OK;
    }
 800115e:	e024      	b.n	80011aa <MAX31855K_error_check+0x62>
    else if (max->data32 & ((uint32_t)1 << 16))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d019      	beq.n	80011a0 <MAX31855K_error_check+0x58>
        uint8_t fault = max->data32 & 0x7;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	73fb      	strb	r3, [r7, #15]
        switch (fault)
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	2b04      	cmp	r3, #4
 800117c:	d006      	beq.n	800118c <MAX31855K_error_check+0x44>
 800117e:	2b04      	cmp	r3, #4
 8001180:	dc12      	bgt.n	80011a8 <MAX31855K_error_check+0x60>
 8001182:	2b01      	cmp	r3, #1
 8001184:	d008      	beq.n	8001198 <MAX31855K_error_check+0x50>
 8001186:	2b02      	cmp	r3, #2
 8001188:	d003      	beq.n	8001192 <MAX31855K_error_check+0x4a>
            break;
 800118a:	e00d      	b.n	80011a8 <MAX31855K_error_check+0x60>
            max->err = MAX_SHORT_VCC;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	761a      	strb	r2, [r3, #24]
            max->err = MAX_SHORT_GND;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2202      	movs	r2, #2
 8001196:	761a      	strb	r2, [r3, #24]
            max->err = MAX_OPEN;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2203      	movs	r2, #3
 800119c:	761a      	strb	r2, [r3, #24]
            break;
 800119e:	e003      	b.n	80011a8 <MAX31855K_error_check+0x60>
        max->err = MAX_OK;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	761a      	strb	r2, [r3, #24]
 80011a6:	e000      	b.n	80011aa <MAX31855K_error_check+0x62>
            break;
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Custom putchar() function required for "tiny" printf()
void _putchar(char character)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, HAL_MAX_DELAY);
 80011c2:	1df9      	adds	r1, r7, #7
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	2201      	movs	r2, #1
 80011ca:	4803      	ldr	r0, [pc, #12]	; (80011d8 <_putchar+0x20>)
 80011cc:	f006 fabe 	bl	800774c <HAL_UART_Transmit>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	2000039c 	.word	0x2000039c

080011dc <HAL_TIM_PeriodElapsedCallback>:

// Callback Function for TIM16 and TIM17 interrupt.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    if (htim == &htim16) // Every 1 s.
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d108      	bne.n	80011fe <HAL_TIM_PeriodElapsedCallback+0x22>
    {
        bin_sem = 1;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
        count++;
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80011fa:	6013      	str	r3, [r2, #0]
    }
    else if (htim == &htim17) // Every 0.07 s.
    {
        MAX31855K_RxDMA(&max31855K);
    }
}
 80011fc:	e006      	b.n	800120c <HAL_TIM_PeriodElapsedCallback+0x30>
    else if (htim == &htim17) // Every 0.07 s.
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d102      	bne.n	800120c <HAL_TIM_PeriodElapsedCallback+0x30>
        MAX31855K_RxDMA(&max31855K);
 8001206:	4807      	ldr	r0, [pc, #28]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001208:	f7ff fee2 	bl	8000fd0 <MAX31855K_RxDMA>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000468 	.word	0x20000468
 8001218:	200001f8 	.word	0x200001f8
 800121c:	200001fc 	.word	0x200001fc
 8001220:	200002e8 	.word	0x200002e8
 8001224:	20000334 	.word	0x20000334

08001228 <HAL_SPI_TxRxCpltCallback>:

// Callback once DMA receive from MAX31855K is completed.
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <HAL_SPI_TxRxCpltCallback+0x20>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d102      	bne.n	800123e <HAL_SPI_TxRxCpltCallback+0x16>
    {
        MAX31885K_RxDMA_Complete(&max31855K);
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <HAL_SPI_TxRxCpltCallback+0x24>)
 800123a:	f7ff fef4 	bl	8001026 <MAX31885K_RxDMA_Complete>
    }
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000020c 	.word	0x2000020c
 800124c:	20000334 	.word	0x20000334

08001250 <HAL_SPI_ErrorCallback>:

// Callback if error occurred during DMA receive from MAX31855K.
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi2)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a06      	ldr	r2, [pc, #24]	; (8001274 <HAL_SPI_ErrorCallback+0x24>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d102      	bne.n	8001266 <HAL_SPI_ErrorCallback+0x16>
    {
        max31855K.err = MAX_SPI_DMA_FAIL;
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_SPI_ErrorCallback+0x28>)
 8001262:	2205      	movs	r2, #5
 8001264:	761a      	strb	r2, [r3, #24]
    }
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	2000020c 	.word	0x2000020c
 8001278:	20000334 	.word	0x20000334

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af04      	add	r7, sp, #16
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001284:	f002 fa9a 	bl	80037bc <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001288:	f000 f8e0 	bl	800144c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800128c:	f000 fab0 	bl	80017f0 <MX_GPIO_Init>
    MX_DMA_Init();
 8001290:	f000 fa88 	bl	80017a4 <MX_DMA_Init>
    MX_USART2_UART_Init();
 8001294:	f000 fa56 	bl	8001744 <MX_USART2_UART_Init>
    MX_TIM16_Init();
 8001298:	f000 fa04 	bl	80016a4 <MX_TIM16_Init>
    MX_SPI2_Init();
 800129c:	f000 f94c 	bl	8001538 <MX_SPI2_Init>
    MX_TIM3_Init();
 80012a0:	f000 f988 	bl	80015b4 <MX_TIM3_Init>
    MX_TIM17_Init();
 80012a4:	f000 fa26 	bl	80016f4 <MX_TIM17_Init>
    /* USER CODE BEGIN 2 */

    __HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1); // Set OC1PE bit to preload PWM value.
 80012a8:	4b58      	ldr	r3, [pc, #352]	; (800140c <main+0x190>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	699a      	ldr	r2, [r3, #24]
 80012ae:	4b57      	ldr	r3, [pc, #348]	; (800140c <main+0x190>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0208 	orr.w	r2, r2, #8
 80012b6:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Start_IT(&htim16);                     // Start 1 s timer interrupt.
 80012b8:	4855      	ldr	r0, [pc, #340]	; (8001410 <main+0x194>)
 80012ba:	f005 f82d 	bl	8006318 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim17);                     // Start 0.07 s timer interrupt.
 80012be:	4855      	ldr	r0, [pc, #340]	; (8001414 <main+0x198>)
 80012c0:	f005 f82a 	bl	8006318 <HAL_TIM_Base_Start_IT>

    MAX31855K_Init(&max31855K, &hspi2, MAX_CS_GPIO_Port, MAX_CS_Pin);
 80012c4:	2310      	movs	r3, #16
 80012c6:	4a54      	ldr	r2, [pc, #336]	; (8001418 <main+0x19c>)
 80012c8:	4954      	ldr	r1, [pc, #336]	; (800141c <main+0x1a0>)
 80012ca:	4855      	ldr	r0, [pc, #340]	; (8001420 <main+0x1a4>)
 80012cc:	f7ff fe58 	bl	8000f80 <MAX31855K_Init>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    // Create local variables:
    uint8_t set_point = 170;                  // TODO: Update set point
 80012d0:	23aa      	movs	r3, #170	; 0xaa
 80012d2:	71fb      	strb	r3, [r7, #7]
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Duty cycle initialized to 0%.
 80012d4:	2100      	movs	r1, #0
 80012d6:	484d      	ldr	r0, [pc, #308]	; (800140c <main+0x190>)
 80012d8:	f005 f8f0 	bl	80064bc <HAL_TIM_PWM_Start>
    */

    while (1)
    {
        // Wait for timer interrupt.
        while (bin_sem == 0)
 80012dc:	e002      	b.n	80012e4 <main+0x68>
        {
            HAL_Delay(1);
 80012de:	2001      	movs	r0, #1
 80012e0:	f002 fae8 	bl	80038b4 <HAL_Delay>
        while (bin_sem == 0)
 80012e4:	4b4f      	ldr	r3, [pc, #316]	; (8001424 <main+0x1a8>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f7      	beq.n	80012de <main+0x62>
        }
        bin_sem = 0;
 80012ee:	4b4d      	ldr	r3, [pc, #308]	; (8001424 <main+0x1a8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]

        // Pseudo-state machine.
        switch (count)
 80012f4:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <main+0x1ac>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012fc:	d023      	beq.n	8001346 <main+0xca>
 80012fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001302:	d826      	bhi.n	8001352 <main+0xd6>
 8001304:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001308:	4293      	cmp	r3, r2
 800130a:	d016      	beq.n	800133a <main+0xbe>
 800130c:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001310:	4293      	cmp	r3, r2
 8001312:	d81e      	bhi.n	8001352 <main+0xd6>
 8001314:	2b64      	cmp	r3, #100	; 0x64
 8001316:	d004      	beq.n	8001322 <main+0xa6>
 8001318:	f240 22ee 	movw	r2, #750	; 0x2ee
 800131c:	4293      	cmp	r3, r2
 800131e:	d006      	beq.n	800132e <main+0xb2>
            break;
        case 2000:
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1023); // 25% Duty Cycle
            break;
        default:
            break;
 8001320:	e017      	b.n	8001352 <main+0xd6>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2047); // 50% Duty Cycle
 8001322:	4b3a      	ldr	r3, [pc, #232]	; (800140c <main+0x190>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800132a:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 800132c:	e012      	b.n	8001354 <main+0xd8>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 4095); // 100% Duty Cycle
 800132e:	4b37      	ldr	r3, [pc, #220]	; (800140c <main+0x190>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001336:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 8001338:	e00c      	b.n	8001354 <main+0xd8>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 3071); // 75% Duty Cycle
 800133a:	4b34      	ldr	r3, [pc, #208]	; (800140c <main+0x190>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f640 32ff 	movw	r2, #3071	; 0xbff
 8001342:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 8001344:	e006      	b.n	8001354 <main+0xd8>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1023); // 25% Duty Cycle
 8001346:	4b31      	ldr	r3, [pc, #196]	; (800140c <main+0x190>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 8001350:	e000      	b.n	8001354 <main+0xd8>
            break;
 8001352:	bf00      	nop
        }

        // Transmit set point, MCU control signal and temperature reading.

        switch (max31855K.err) // Automatically updated every ~0.07 s
 8001354:	4b32      	ldr	r3, [pc, #200]	; (8001420 <main+0x1a4>)
 8001356:	7e1b      	ldrb	r3, [r3, #24]
 8001358:	2b05      	cmp	r3, #5
 800135a:	d852      	bhi.n	8001402 <main+0x186>
 800135c:	a201      	add	r2, pc, #4	; (adr r2, 8001364 <main+0xe8>)
 800135e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001362:	bf00      	nop
 8001364:	0800137d 	.word	0x0800137d
 8001368:	080013db 	.word	0x080013db
 800136c:	080013e3 	.word	0x080013e3
 8001370:	080013eb 	.word	0x080013eb
 8001374:	080013f3 	.word	0x080013f3
 8001378:	080013fb 	.word	0x080013fb
        {
        case MAX_OK:
        					 /* SP, PWM, HJ, CJ */
            printf("%d %d %.2f %.2f\r\n", set_point,
 800137c:	79fe      	ldrb	r6, [r7, #7]
                    (uint16_t)__HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1) * 100 / 4095,
 800137e:	4b23      	ldr	r3, [pc, #140]	; (800140c <main+0x190>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001384:	b29b      	uxth	r3, r3
 8001386:	461a      	mov	r2, r3
 8001388:	2364      	movs	r3, #100	; 0x64
 800138a:	fb03 f302 	mul.w	r3, r3, r2
            printf("%d %d %.2f %.2f\r\n", set_point,
 800138e:	4a27      	ldr	r2, [pc, #156]	; (800142c <main+0x1b0>)
 8001390:	fb82 1203 	smull	r1, r2, r2, r3
 8001394:	441a      	add	r2, r3
 8001396:	12d2      	asrs	r2, r2, #11
 8001398:	17db      	asrs	r3, r3, #31
 800139a:	eba2 0803 	sub.w	r8, r2, r3
                    MAX31855K_Get_HJ(&max31855K),
 800139e:	4820      	ldr	r0, [pc, #128]	; (8001420 <main+0x1a4>)
 80013a0:	f7ff fe66 	bl	8001070 <MAX31855K_Get_HJ>
 80013a4:	ee10 3a10 	vmov	r3, s0
            printf("%d %d %.2f %.2f\r\n", set_point,
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8cd 	bl	8000548 <__aeabi_f2d>
 80013ae:	4604      	mov	r4, r0
 80013b0:	460d      	mov	r5, r1
                    MAX31855K_Get_CJ(&max31855K));
 80013b2:	481b      	ldr	r0, [pc, #108]	; (8001420 <main+0x1a4>)
 80013b4:	f7ff fe90 	bl	80010d8 <MAX31855K_Get_CJ>
 80013b8:	ee10 3a10 	vmov	r3, s0
            printf("%d %d %.2f %.2f\r\n", set_point,
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f8c3 	bl	8000548 <__aeabi_f2d>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013ca:	e9cd 4500 	strd	r4, r5, [sp]
 80013ce:	4642      	mov	r2, r8
 80013d0:	4631      	mov	r1, r6
 80013d2:	4817      	ldr	r0, [pc, #92]	; (8001430 <main+0x1b4>)
 80013d4:	f001 feb0 	bl	8003138 <printf_>
            break;
 80013d8:	e017      	b.n	800140a <main+0x18e>
        case MAX_SHORT_VCC:
            printf("Thermocouple shorted to VCC\r\n");
 80013da:	4816      	ldr	r0, [pc, #88]	; (8001434 <main+0x1b8>)
 80013dc:	f001 feac 	bl	8003138 <printf_>
            break;
 80013e0:	e013      	b.n	800140a <main+0x18e>
        case MAX_SHORT_GND:
            printf("Thermocouple shorted to GND\r\n");
 80013e2:	4815      	ldr	r0, [pc, #84]	; (8001438 <main+0x1bc>)
 80013e4:	f001 fea8 	bl	8003138 <printf_>
            break;
 80013e8:	e00f      	b.n	800140a <main+0x18e>
        case MAX_OPEN:
            printf("Thermocouple connection is open\r\n");
 80013ea:	4814      	ldr	r0, [pc, #80]	; (800143c <main+0x1c0>)
 80013ec:	f001 fea4 	bl	8003138 <printf_>
            break;
 80013f0:	e00b      	b.n	800140a <main+0x18e>
        case MAX_ZEROS:
            printf("SPI read only 0s\r\n");
 80013f2:	4813      	ldr	r0, [pc, #76]	; (8001440 <main+0x1c4>)
 80013f4:	f001 fea0 	bl	8003138 <printf_>
            break;
 80013f8:	e007      	b.n	800140a <main+0x18e>
        case MAX_SPI_DMA_FAIL:
            printf("SPI DMA Fail\r\n");
 80013fa:	4812      	ldr	r0, [pc, #72]	; (8001444 <main+0x1c8>)
 80013fc:	f001 fe9c 	bl	8003138 <printf_>
            break;
 8001400:	e003      	b.n	800140a <main+0x18e>
        default:
            printf("Unknown error");
 8001402:	4811      	ldr	r0, [pc, #68]	; (8001448 <main+0x1cc>)
 8001404:	f001 fe98 	bl	8003138 <printf_>
            break;
 8001408:	bf00      	nop
        while (bin_sem == 0)
 800140a:	e76b      	b.n	80012e4 <main+0x68>
 800140c:	20000350 	.word	0x20000350
 8001410:	20000468 	.word	0x20000468
 8001414:	200002e8 	.word	0x200002e8
 8001418:	48000800 	.word	0x48000800
 800141c:	2000020c 	.word	0x2000020c
 8001420:	20000334 	.word	0x20000334
 8001424:	200001f8 	.word	0x200001f8
 8001428:	200001fc 	.word	0x200001fc
 800142c:	80080081 	.word	0x80080081
 8001430:	0800aa78 	.word	0x0800aa78
 8001434:	0800aa8c 	.word	0x0800aa8c
 8001438:	0800aaac 	.word	0x0800aaac
 800143c:	0800aacc 	.word	0x0800aacc
 8001440:	0800aaf0 	.word	0x0800aaf0
 8001444:	0800ab04 	.word	0x0800ab04
 8001448:	0800ab14 	.word	0x0800ab14

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0b8      	sub	sp, #224	; 0xe0
 8001450:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001456:	2244      	movs	r2, #68	; 0x44
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f006 fe26 	bl	80080ac <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001470:	463b      	mov	r3, r7
 8001472:	2288      	movs	r2, #136	; 0x88
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f006 fe18 	bl	80080ac <memset>

    /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800147c:	2302      	movs	r3, #2
 800147e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001486:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800148a:	2310      	movs	r3, #16
 800148c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001490:	2302      	movs	r3, #2
 8001492:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001496:	2302      	movs	r3, #2
 8001498:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_OscInitStruct.PLL.PLLM = 1;
 800149c:	2301      	movs	r3, #1
 800149e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_OscInitStruct.PLL.PLLN = 10;
 80014a2:	230a      	movs	r3, #10
 80014a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014a8:	2307      	movs	r3, #7
 80014aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014be:	4618      	mov	r0, r3
 80014c0:	f002 ff4c 	bl	800435c <HAL_RCC_OscConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0x82>
    {
        Error_Handler();
 80014ca:	f000 fa0b 	bl	80018e4 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
  */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ce:	230f      	movs	r3, #15
 80014d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d4:	2303      	movs	r3, #3
 80014d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014ec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80014f0:	2104      	movs	r1, #4
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 fb18 	bl	8004b28 <HAL_RCC_ClockConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0xb6>
    {
        Error_Handler();
 80014fe:	f000 f9f1 	bl	80018e4 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001502:	2302      	movs	r3, #2
 8001504:	603b      	str	r3, [r7, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001506:	2300      	movs	r3, #0
 8001508:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800150a:	463b      	mov	r3, r7
 800150c:	4618      	mov	r0, r3
 800150e:	f003 fd11 	bl	8004f34 <HAL_RCCEx_PeriphCLKConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0xd0>
    {
        Error_Handler();
 8001518:	f000 f9e4 	bl	80018e4 <Error_Handler>
    }
    /** Configure the main internal regulator output voltage
  */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800151c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001520:	f002 fec6 	bl	80042b0 <HAL_PWREx_ControlVoltageScaling>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0xe2>
    {
        Error_Handler();
 800152a:	f000 f9db 	bl	80018e4 <Error_Handler>
    }
}
 800152e:	bf00      	nop
 8001530:	37e0      	adds	r7, #224	; 0xe0
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI2_Init 1 */

    /* USER CODE END SPI2_Init 1 */
    /* SPI2 parameter configuration*/
    hspi2.Instance = SPI2;
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <MX_SPI2_Init+0x74>)
 800153e:	4a1c      	ldr	r2, [pc, #112]	; (80015b0 <MX_SPI2_Init+0x78>)
 8001540:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <MX_SPI2_Init+0x74>)
 8001544:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001548:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <MX_SPI2_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <MX_SPI2_Init+0x74>)
 8001552:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001556:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_SPI2_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <MX_SPI2_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_SPI2_Init+0x74>)
 8001566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156a:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_SPI2_Init+0x74>)
 800156e:	2228      	movs	r2, #40	; 0x28
 8001570:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_SPI2_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_SPI2_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	625a      	str	r2, [r3, #36]	; 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_SPI2_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	629a      	str	r2, [r3, #40]	; 0x28
    hspi2.Init.CRCPolynomial = 7;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_SPI2_Init+0x74>)
 8001586:	2207      	movs	r2, #7
 8001588:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_SPI2_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_SPI2_Init+0x74>)
 8001592:	2208      	movs	r2, #8
 8001594:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_SPI2_Init+0x74>)
 8001598:	f004 f988 	bl	80058ac <HAL_SPI_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_SPI2_Init+0x6e>
    {
        Error_Handler();
 80015a2:	f000 f99f 	bl	80018e4 <Error_Handler>
    }
    /* USER CODE BEGIN SPI2_Init 2 */

    /* USER CODE END SPI2_Init 2 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000020c 	.word	0x2000020c
 80015b0:	40003800 	.word	0x40003800

080015b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08e      	sub	sp, #56	; 0x38
 80015b8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80015d4:	463b      	mov	r3, r7
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	615a      	str	r2, [r3, #20]
 80015e4:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <MX_TIM3_Init+0xe8>)
 80015e8:	4a2d      	ldr	r2, [pc, #180]	; (80016a0 <MX_TIM3_Init+0xec>)
 80015ea:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 9768 - 1;
 80015ec:	4b2b      	ldr	r3, [pc, #172]	; (800169c <MX_TIM3_Init+0xe8>)
 80015ee:	f242 6227 	movw	r2, #9767	; 0x2627
 80015f2:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f4:	4b29      	ldr	r3, [pc, #164]	; (800169c <MX_TIM3_Init+0xe8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 4095 - 1;
 80015fa:	4b28      	ldr	r3, [pc, #160]	; (800169c <MX_TIM3_Init+0xe8>)
 80015fc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001600:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <MX_TIM3_Init+0xe8>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <MX_TIM3_Init+0xe8>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800160e:	4823      	ldr	r0, [pc, #140]	; (800169c <MX_TIM3_Init+0xe8>)
 8001610:	f004 fe2a 	bl	8006268 <HAL_TIM_Base_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM3_Init+0x6a>
    {
        Error_Handler();
 800161a:	f000 f963 	bl	80018e4 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001624:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001628:	4619      	mov	r1, r3
 800162a:	481c      	ldr	r0, [pc, #112]	; (800169c <MX_TIM3_Init+0xe8>)
 800162c:	f005 fa7c 	bl	8006b28 <HAL_TIM_ConfigClockSource>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM3_Init+0x86>
    {
        Error_Handler();
 8001636:	f000 f955 	bl	80018e4 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800163a:	4818      	ldr	r0, [pc, #96]	; (800169c <MX_TIM3_Init+0xe8>)
 800163c:	f004 fedc 	bl	80063f8 <HAL_TIM_PWM_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM3_Init+0x96>
    {
        Error_Handler();
 8001646:	f000 f94d 	bl	80018e4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	4619      	mov	r1, r3
 8001658:	4810      	ldr	r0, [pc, #64]	; (800169c <MX_TIM3_Init+0xe8>)
 800165a:	f005 ff83 	bl	8007564 <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM3_Init+0xb4>
    {
        Error_Handler();
 8001664:	f000 f93e 	bl	80018e4 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001668:	2360      	movs	r3, #96	; 0x60
 800166a:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001678:	463b      	mov	r3, r7
 800167a:	2200      	movs	r2, #0
 800167c:	4619      	mov	r1, r3
 800167e:	4807      	ldr	r0, [pc, #28]	; (800169c <MX_TIM3_Init+0xe8>)
 8001680:	f005 f942 	bl	8006908 <HAL_TIM_PWM_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM3_Init+0xda>
    {
        Error_Handler();
 800168a:	f000 f92b 	bl	80018e4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 800168e:	4803      	ldr	r0, [pc, #12]	; (800169c <MX_TIM3_Init+0xe8>)
 8001690:	f001 fea8 	bl	80033e4 <HAL_TIM_MspPostInit>
}
 8001694:	bf00      	nop
 8001696:	3738      	adds	r7, #56	; 0x38
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000350 	.word	0x20000350
 80016a0:	40000400 	.word	0x40000400

080016a4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
    /* USER CODE END TIM16_Init 0 */

    /* USER CODE BEGIN TIM16_Init 1 */

    /* USER CODE END TIM16_Init 1 */
    htim16.Instance = TIM16;
 80016a8:	4b10      	ldr	r3, [pc, #64]	; (80016ec <MX_TIM16_Init+0x48>)
 80016aa:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <MX_TIM16_Init+0x4c>)
 80016ac:	601a      	str	r2, [r3, #0]
    htim16.Init.Prescaler = 8000 - 1;
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_TIM16_Init+0x48>)
 80016b0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80016b4:	605a      	str	r2, [r3, #4]
    htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <MX_TIM16_Init+0x48>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
    htim16.Init.Period = 10000 - 1;
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_TIM16_Init+0x48>)
 80016be:	f242 720f 	movw	r2, #9999	; 0x270f
 80016c2:	60da      	str	r2, [r3, #12]
    htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_TIM16_Init+0x48>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
    htim16.Init.RepetitionCounter = 0;
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_TIM16_Init+0x48>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
    htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_TIM16_Init+0x48>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_TIM16_Init+0x48>)
 80016d8:	f004 fdc6 	bl	8006268 <HAL_TIM_Base_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM16_Init+0x42>
    {
        Error_Handler();
 80016e2:	f000 f8ff 	bl	80018e4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM16_Init 2 */

    /* USER CODE END TIM16_Init 2 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000468 	.word	0x20000468
 80016f0:	40014400 	.word	0x40014400

080016f4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
    /* USER CODE END TIM17_Init 0 */

    /* USER CODE BEGIN TIM17_Init 1 */

    /* USER CODE END TIM17_Init 1 */
    htim17.Instance = TIM17;
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <MX_TIM17_Init+0x48>)
 80016fa:	4a11      	ldr	r2, [pc, #68]	; (8001740 <MX_TIM17_Init+0x4c>)
 80016fc:	601a      	str	r2, [r3, #0]
    htim17.Init.Prescaler = 8000 - 1;
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <MX_TIM17_Init+0x48>)
 8001700:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001704:	605a      	str	r2, [r3, #4]
    htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <MX_TIM17_Init+0x48>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
    htim17.Init.Period = 700 - 1;
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <MX_TIM17_Init+0x48>)
 800170e:	f240 22bb 	movw	r2, #699	; 0x2bb
 8001712:	60da      	str	r2, [r3, #12]
    htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_TIM17_Init+0x48>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
    htim17.Init.RepetitionCounter = 0;
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <MX_TIM17_Init+0x48>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
    htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_TIM17_Init+0x48>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_TIM17_Init+0x48>)
 8001728:	f004 fd9e 	bl	8006268 <HAL_TIM_Base_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM17_Init+0x42>
    {
        Error_Handler();
 8001732:	f000 f8d7 	bl	80018e4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM17_Init 2 */

    /* USER CODE END TIM17_Init 2 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200002e8 	.word	0x200002e8
 8001740:	40014800 	.word	0x40014800

08001744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <MX_USART2_UART_Init+0x58>)
 800174a:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <MX_USART2_UART_Init+0x5c>)
 800174c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <MX_USART2_UART_Init+0x58>)
 8001750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001754:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_USART2_UART_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_USART2_UART_Init+0x58>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_USART2_UART_Init+0x58>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_USART2_UART_Init+0x58>)
 800176a:	220c      	movs	r2, #12
 800176c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <MX_USART2_UART_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_USART2_UART_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <MX_USART2_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_USART2_UART_Init+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_USART2_UART_Init+0x58>)
 8001788:	f005 ff92 	bl	80076b0 <HAL_UART_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USART2_UART_Init+0x52>
    {
        Error_Handler();
 8001792:	f000 f8a7 	bl	80018e4 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000039c 	.word	0x2000039c
 80017a0:	40004400 	.word	0x40004400

080017a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <MX_DMA_Init+0x48>)
 80017ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ae:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <MX_DMA_Init+0x48>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6493      	str	r3, [r2, #72]	; 0x48
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <MX_DMA_Init+0x48>)
 80017b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Channel4_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	200e      	movs	r0, #14
 80017c8:	f002 f973 	bl	8003ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80017cc:	200e      	movs	r0, #14
 80017ce:	f002 f98c 	bl	8003aea <HAL_NVIC_EnableIRQ>
    /* DMA1_Channel5_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	200f      	movs	r0, #15
 80017d8:	f002 f96b 	bl	8003ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80017dc:	200f      	movs	r0, #15
 80017de:	f002 f984 	bl	8003aea <HAL_NVIC_EnableIRQ>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000

080017f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	4b34      	ldr	r3, [pc, #208]	; (80018d8 <MX_GPIO_Init+0xe8>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	4a33      	ldr	r2, [pc, #204]	; (80018d8 <MX_GPIO_Init+0xe8>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001812:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <MX_GPIO_Init+0xe8>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800181e:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <MX_GPIO_Init+0xe8>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a2d      	ldr	r2, [pc, #180]	; (80018d8 <MX_GPIO_Init+0xe8>)
 8001824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <MX_GPIO_Init+0xe8>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <MX_GPIO_Init+0xe8>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <MX_GPIO_Init+0xe8>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <MX_GPIO_Init+0xe8>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <MX_GPIO_Init+0xe8>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	4a21      	ldr	r2, [pc, #132]	; (80018d8 <MX_GPIO_Init+0xe8>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185a:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <MX_GPIO_Init+0xe8>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2120      	movs	r1, #32
 800186a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186e:	f002 fcf9 	bl	8004264 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	2110      	movs	r1, #16
 8001876:	4819      	ldr	r0, [pc, #100]	; (80018dc <MX_GPIO_Init+0xec>)
 8001878:	f002 fcf4 	bl	8004264 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 800187c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_GPIO_Init+0xf0>)
 8001884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	4812      	ldr	r0, [pc, #72]	; (80018dc <MX_GPIO_Init+0xec>)
 8001892:	f002 fb3d 	bl	8003f10 <HAL_GPIO_Init>

    /*Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 8001896:	2320      	movs	r3, #32
 8001898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2301      	movs	r3, #1
 800189c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b0:	f002 fb2e 	bl	8003f10 <HAL_GPIO_Init>

    /*Configure GPIO pin : MAX_CS_Pin */
    GPIO_InitStruct.Pin = MAX_CS_Pin;
 80018b4:	2310      	movs	r3, #16
 80018b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MAX_CS_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4804      	ldr	r0, [pc, #16]	; (80018dc <MX_GPIO_Init+0xec>)
 80018cc:	f002 fb20 	bl	8003f10 <HAL_GPIO_Init>
}
 80018d0:	bf00      	nop
 80018d2:	3728      	adds	r7, #40	; 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000
 80018dc:	48000800 	.word	0x48000800
 80018e0:	10210000 	.word	0x10210000

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80018ec:	e7fe      	b.n	80018ec <Error_Handler+0x8>

080018ee <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b085      	sub	sp, #20
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4603      	mov	r3, r0
 80018fc:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b084      	sub	sp, #16
 800190e:	af00      	add	r7, sp, #0
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	4603      	mov	r3, r0
 8001918:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <_out_char+0x1e>
    _putchar(character);
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fc48 	bl	80011b8 <_putchar>
  }
}
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	e002      	b.n	8001946 <_strnlen_s+0x16>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3301      	adds	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d004      	beq.n	8001958 <_strnlen_s+0x28>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	1e5a      	subs	r2, r3, #1
 8001952:	603a      	str	r2, [r7, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f3      	bne.n	8001940 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	1ad3      	subs	r3, r2, r3
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	2b2f      	cmp	r3, #47	; 0x2f
 8001978:	d904      	bls.n	8001984 <_is_digit+0x1a>
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	2b39      	cmp	r3, #57	; 0x39
 800197e:	d801      	bhi.n	8001984 <_is_digit+0x1a>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <_is_digit+0x1c>
 8001984:	2300      	movs	r3, #0
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	b2db      	uxtb	r3, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80019a4:	e00e      	b.n	80019c4 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4618      	mov	r0, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	1c59      	adds	r1, r3, #1
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6011      	str	r1, [r2, #0]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	4403      	add	r3, r0
 80019c0:	3b30      	subs	r3, #48	; 0x30
 80019c2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ffcd 	bl	800196a <_is_digit>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1e7      	bne.n	80019a6 <_atoi+0xe>
  }
  return i;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80019f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d125      	bne.n	8001a48 <_out_rev+0x68>
 80019fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d120      	bne.n	8001a48 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8001a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e00a      	b.n	8001a22 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	1c53      	adds	r3, r2, #1
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	68fc      	ldr	r4, [r7, #12]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68b9      	ldr	r1, [r7, #8]
 8001a18:	2020      	movs	r0, #32
 8001a1a:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d3f0      	bcc.n	8001a0c <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8001a2a:	e00d      	b.n	8001a48 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8001a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a36:	4413      	add	r3, r2
 8001a38:	7818      	ldrb	r0, [r3, #0]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	1c53      	adds	r3, r2, #1
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	68fc      	ldr	r4, [r7, #12]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	47a0      	blx	r4
  while (len) {
 8001a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1ee      	bne.n	8001a2c <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00e      	beq.n	8001a76 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8001a58:	e007      	b.n	8001a6a <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	1c53      	adds	r3, r2, #1
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	68fc      	ldr	r4, [r7, #12]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	2020      	movs	r0, #32
 8001a68:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d8f1      	bhi.n	8001a5a <_out_rev+0x7a>
    }
  }

  return idx;
 8001a76:	687b      	ldr	r3, [r7, #4]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd90      	pop	{r4, r7, pc}

08001a80 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af04      	add	r7, sp, #16
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d136      	bne.n	8001b06 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d018      	beq.n	8001ad0 <_ntoa_format+0x50>
 8001a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d013      	beq.n	8001ad0 <_ntoa_format+0x50>
 8001aa8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d104      	bne.n	8001aba <_ntoa_format+0x3a>
 8001ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00a      	beq.n	8001ad0 <_ntoa_format+0x50>
      width--;
 8001aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abc:	3b01      	subs	r3, #1
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001ac0:	e006      	b.n	8001ad0 <_ntoa_format+0x50>
      buf[len++] = '0';
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	61fa      	str	r2, [r7, #28]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4413      	add	r3, r2
 8001acc:	2230      	movs	r2, #48	; 0x30
 8001ace:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d20a      	bcs.n	8001aee <_ntoa_format+0x6e>
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	2b1f      	cmp	r3, #31
 8001adc:	d9f1      	bls.n	8001ac2 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001ade:	e006      	b.n	8001aee <_ntoa_format+0x6e>
      buf[len++] = '0';
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	61fa      	str	r2, [r7, #28]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4413      	add	r3, r2
 8001aea:	2230      	movs	r2, #48	; 0x30
 8001aec:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <_ntoa_format+0x86>
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d202      	bcs.n	8001b06 <_ntoa_format+0x86>
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	2b1f      	cmp	r3, #31
 8001b04:	d9ec      	bls.n	8001ae0 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8001b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d058      	beq.n	8001bc2 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8001b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d116      	bne.n	8001b48 <_ntoa_format+0xc8>
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d013      	beq.n	8001b48 <_ntoa_format+0xc8>
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d003      	beq.n	8001b30 <_ntoa_format+0xb0>
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d10b      	bne.n	8001b48 <_ntoa_format+0xc8>
      len--;
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <_ntoa_format+0xc8>
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d102      	bne.n	8001b48 <_ntoa_format+0xc8>
        len--;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	2b10      	cmp	r3, #16
 8001b4c:	d10f      	bne.n	8001b6e <_ntoa_format+0xee>
 8001b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b50:	f003 0320 	and.w	r3, r3, #32
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10a      	bne.n	8001b6e <_ntoa_format+0xee>
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	2b1f      	cmp	r3, #31
 8001b5c:	d807      	bhi.n	8001b6e <_ntoa_format+0xee>
      buf[len++] = 'x';
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	61fa      	str	r2, [r7, #28]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4413      	add	r3, r2
 8001b68:	2278      	movs	r2, #120	; 0x78
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	e01f      	b.n	8001bae <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	2b10      	cmp	r3, #16
 8001b72:	d10f      	bne.n	8001b94 <_ntoa_format+0x114>
 8001b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00a      	beq.n	8001b94 <_ntoa_format+0x114>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	2b1f      	cmp	r3, #31
 8001b82:	d807      	bhi.n	8001b94 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	61fa      	str	r2, [r7, #28]
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	2258      	movs	r2, #88	; 0x58
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	e00c      	b.n	8001bae <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d109      	bne.n	8001bae <_ntoa_format+0x12e>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	2b1f      	cmp	r3, #31
 8001b9e:	d806      	bhi.n	8001bae <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	61fa      	str	r2, [r7, #28]
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4413      	add	r3, r2
 8001baa:	2262      	movs	r2, #98	; 0x62
 8001bac:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	2b1f      	cmp	r3, #31
 8001bb2:	d806      	bhi.n	8001bc2 <_ntoa_format+0x142>
      buf[len++] = '0';
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	61fa      	str	r2, [r7, #28]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	2230      	movs	r2, #48	; 0x30
 8001bc0:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	2b1f      	cmp	r3, #31
 8001bc6:	d824      	bhi.n	8001c12 <_ntoa_format+0x192>
    if (negative) {
 8001bc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d007      	beq.n	8001be0 <_ntoa_format+0x160>
      buf[len++] = '-';
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	61fa      	str	r2, [r7, #28]
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4413      	add	r3, r2
 8001bda:	222d      	movs	r2, #45	; 0x2d
 8001bdc:	701a      	strb	r2, [r3, #0]
 8001bde:	e018      	b.n	8001c12 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8001be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d007      	beq.n	8001bfa <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	61fa      	str	r2, [r7, #28]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	222b      	movs	r2, #43	; 0x2b
 8001bf6:	701a      	strb	r2, [r3, #0]
 8001bf8:	e00b      	b.n	8001c12 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8001bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	61fa      	str	r2, [r7, #28]
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	2220      	movs	r2, #32
 8001c10:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c14:	9303      	str	r3, [sp, #12]
 8001c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c18:	9302      	str	r3, [sp, #8]
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	68b9      	ldr	r1, [r7, #8]
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f7ff fed9 	bl	80019e0 <_out_rev>
 8001c2e:	4603      	mov	r3, r0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b096      	sub	sp, #88	; 0x58
 8001c3c:	af08      	add	r7, sp, #32
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d103      	bne.n	8001c58 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8001c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c52:	f023 0310 	bic.w	r3, r3, #16
 8001c56:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <_ntoa_long+0x30>
 8001c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d033      	beq.n	8001cd0 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8001c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c70:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001c72:	fb01 f202 	mul.w	r2, r1, r2
 8001c76:	1a9b      	subs	r3, r3, r2
 8001c78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001c7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c80:	2b09      	cmp	r3, #9
 8001c82:	d804      	bhi.n	8001c8e <_ntoa_long+0x56>
 8001c84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c88:	3330      	adds	r3, #48	; 0x30
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	e00d      	b.n	8001caa <_ntoa_long+0x72>
 8001c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c90:	f003 0320 	and.w	r3, r3, #32
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <_ntoa_long+0x64>
 8001c98:	2241      	movs	r2, #65	; 0x41
 8001c9a:	e000      	b.n	8001c9e <_ntoa_long+0x66>
 8001c9c:	2261      	movs	r2, #97	; 0x61
 8001c9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ca2:	4413      	add	r3, r2
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	3b0a      	subs	r3, #10
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cac:	1c59      	adds	r1, r3, #1
 8001cae:	6379      	str	r1, [r7, #52]	; 0x34
 8001cb0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001cb4:	440b      	add	r3, r1
 8001cb6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001cba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <_ntoa_long+0x98>
 8001cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ccc:	2b1f      	cmp	r3, #31
 8001cce:	d9cb      	bls.n	8001c68 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd2:	9306      	str	r3, [sp, #24]
 8001cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cd6:	9305      	str	r3, [sp, #20]
 8001cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cda:	9304      	str	r3, [sp, #16]
 8001cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cde:	9303      	str	r3, [sp, #12]
 8001ce0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001ce4:	9302      	str	r3, [sp, #8]
 8001ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	f107 0310 	add.w	r3, r7, #16
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f7ff fec2 	bl	8001a80 <_ntoa_format>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3738      	adds	r7, #56	; 0x38
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b096      	sub	sp, #88	; 0x58
 8001d0a:	af08      	add	r7, sp, #32
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001d18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	d103      	bne.n	8001d28 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8001d20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d22:	f023 0310 	bic.w	r3, r3, #16
 8001d26:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <_ntoa_long_long+0x34>
 8001d32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d36:	4313      	orrs	r3, r2
 8001d38:	d038      	beq.n	8001dac <_ntoa_long_long+0xa6>
    do {
      const char digit = (char)(value % base);
 8001d3a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001d3e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d42:	f7fe ffa1 	bl	8000c88 <__aeabi_uldivmod>
 8001d46:	4613      	mov	r3, r2
 8001d48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001d4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d50:	2b09      	cmp	r3, #9
 8001d52:	d804      	bhi.n	8001d5e <_ntoa_long_long+0x58>
 8001d54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d58:	3330      	adds	r3, #48	; 0x30
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	e00d      	b.n	8001d7a <_ntoa_long_long+0x74>
 8001d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <_ntoa_long_long+0x66>
 8001d68:	2241      	movs	r2, #65	; 0x41
 8001d6a:	e000      	b.n	8001d6e <_ntoa_long_long+0x68>
 8001d6c:	2261      	movs	r2, #97	; 0x61
 8001d6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d72:	4413      	add	r3, r2
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	3b0a      	subs	r3, #10
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7c:	1c59      	adds	r1, r3, #1
 8001d7e:	6379      	str	r1, [r7, #52]	; 0x34
 8001d80:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001d84:	440b      	add	r3, r1
 8001d86:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001d8a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d8e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001d92:	f7fe ff79 	bl	8000c88 <__aeabi_uldivmod>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001d9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001da2:	4313      	orrs	r3, r2
 8001da4:	d002      	beq.n	8001dac <_ntoa_long_long+0xa6>
 8001da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da8:	2b1f      	cmp	r3, #31
 8001daa:	d9c6      	bls.n	8001d3a <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001db0:	9206      	str	r2, [sp, #24]
 8001db2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001db4:	9205      	str	r2, [sp, #20]
 8001db6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001db8:	9204      	str	r2, [sp, #16]
 8001dba:	9303      	str	r3, [sp, #12]
 8001dbc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001dc0:	9302      	str	r3, [sp, #8]
 8001dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	f107 0310 	add.w	r3, r7, #16
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff fe54 	bl	8001a80 <_ntoa_format>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3738      	adds	r7, #56	; 0x38
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	0000      	movs	r0, r0
 8001de4:	0000      	movs	r0, r0
	...

08001de8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b09d      	sub	sp, #116	; 0x74
 8001dec:	af04      	add	r7, sp, #16
 8001dee:	6178      	str	r0, [r7, #20]
 8001df0:	6139      	str	r1, [r7, #16]
 8001df2:	60fa      	str	r2, [r7, #12]
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8001e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e12:	f7fe fe59 	bl	8000ac8 <__aeabi_dcmpeq>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10f      	bne.n	8001e3c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8001e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e1e:	9303      	str	r3, [sp, #12]
 8001e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e22:	9302      	str	r3, [sp, #8]
 8001e24:	2303      	movs	r3, #3
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	4ba9      	ldr	r3, [pc, #676]	; (80020d0 <_ftoa+0x2e8>)
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	6939      	ldr	r1, [r7, #16]
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f7ff fdd4 	bl	80019e0 <_out_rev>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	e22b      	b.n	8002294 <_ftoa+0x4ac>
  if (value < -DBL_MAX)
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e48:	f7fe fe48 	bl	8000adc <__aeabi_dcmplt>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00f      	beq.n	8001e72 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e54:	9303      	str	r3, [sp, #12]
 8001e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e58:	9302      	str	r3, [sp, #8]
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	9301      	str	r3, [sp, #4]
 8001e5e:	4b9d      	ldr	r3, [pc, #628]	; (80020d4 <_ftoa+0x2ec>)
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	6939      	ldr	r1, [r7, #16]
 8001e68:	6978      	ldr	r0, [r7, #20]
 8001e6a:	f7ff fdb9 	bl	80019e0 <_out_rev>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	e210      	b.n	8002294 <_ftoa+0x4ac>
  if (value > DBL_MAX)
 8001e72:	f04f 32ff 	mov.w	r2, #4294967295
 8001e76:	4b98      	ldr	r3, [pc, #608]	; (80020d8 <_ftoa+0x2f0>)
 8001e78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e7c:	f7fe fe4c 	bl	8000b18 <__aeabi_dcmpgt>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d01d      	beq.n	8001ec2 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001e86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <_ftoa+0xac>
 8001e90:	4b92      	ldr	r3, [pc, #584]	; (80020dc <_ftoa+0x2f4>)
 8001e92:	e000      	b.n	8001e96 <_ftoa+0xae>
 8001e94:	4b92      	ldr	r3, [pc, #584]	; (80020e0 <_ftoa+0x2f8>)
 8001e96:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e98:	f002 0204 	and.w	r2, r2, #4
 8001e9c:	2a00      	cmp	r2, #0
 8001e9e:	d001      	beq.n	8001ea4 <_ftoa+0xbc>
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	e000      	b.n	8001ea6 <_ftoa+0xbe>
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001ea8:	9103      	str	r1, [sp, #12]
 8001eaa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001eac:	9102      	str	r1, [sp, #8]
 8001eae:	9201      	str	r2, [sp, #4]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	6939      	ldr	r1, [r7, #16]
 8001eb8:	6978      	ldr	r0, [r7, #20]
 8001eba:	f7ff fd91 	bl	80019e0 <_out_rev>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	e1e8      	b.n	8002294 <_ftoa+0x4ac>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8001ec2:	a37f      	add	r3, pc, #508	; (adr r3, 80020c0 <_ftoa+0x2d8>)
 8001ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ecc:	f7fe fe24 	bl	8000b18 <__aeabi_dcmpgt>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <_ftoa+0x102>
 8001ed6:	a37c      	add	r3, pc, #496	; (adr r3, 80020c8 <_ftoa+0x2e0>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ee0:	f7fe fdfc 	bl	8000adc <__aeabi_dcmplt>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00f      	beq.n	8001f0a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001eea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eec:	9302      	str	r3, [sp, #8]
 8001eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	ed97 0b00 	vldr	d0, [r7]
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	6939      	ldr	r1, [r7, #16]
 8001f00:	6978      	ldr	r0, [r7, #20]
 8001f02:	f000 f9d1 	bl	80022a8 <_etoa>
 8001f06:	4603      	mov	r3, r0
 8001f08:	e1c4      	b.n	8002294 <_ftoa+0x4ac>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f1c:	f7fe fdde 	bl	8000adc <__aeabi_dcmplt>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00e      	beq.n	8001f44 <_ftoa+0x15c>
    negative = true;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8001f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f30:	f04f 0000 	mov.w	r0, #0
 8001f34:	f04f 0100 	mov.w	r1, #0
 8001f38:	f7fe f9a6 	bl	8000288 <__aeabi_dsub>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8001f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10e      	bne.n	8001f6c <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001f4e:	2306      	movs	r3, #6
 8001f50:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001f52:	e00b      	b.n	8001f6c <_ftoa+0x184>
    buf[len++] = '0';
 8001f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001f5a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f5e:	4413      	add	r3, r2
 8001f60:	2230      	movs	r2, #48	; 0x30
 8001f62:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8001f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f6e:	2b1f      	cmp	r3, #31
 8001f70:	d802      	bhi.n	8001f78 <_ftoa+0x190>
 8001f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f74:	2b09      	cmp	r3, #9
 8001f76:	d8ed      	bhi.n	8001f54 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8001f78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f7c:	f7fe fdec 	bl	8000b58 <__aeabi_d2iz>
 8001f80:	4603      	mov	r3, r0
 8001f82:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8001f84:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001f86:	f7fe facd 	bl	8000524 <__aeabi_i2d>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f92:	f7fe f979 	bl	8000288 <__aeabi_dsub>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4a51      	ldr	r2, [pc, #324]	; (80020e4 <_ftoa+0x2fc>)
 8001fa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	f7fe fb25 	bl	80005f8 <__aeabi_dmul>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8001fb6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001fba:	f7fe fdf5 	bl	8000ba8 <__aeabi_d2uiz>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8001fc2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001fc4:	f7fe fa9e 	bl	8000504 <__aeabi_ui2d>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001fd0:	f7fe f95a 	bl	8000288 <__aeabi_dsub>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <_ftoa+0x300>)
 8001fe2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001fe6:	f7fe fd97 	bl	8000b18 <__aeabi_dcmpgt>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d016      	beq.n	800201e <_ftoa+0x236>
    ++frac;
 8001ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8001ff6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001ff8:	f7fe fa84 	bl	8000504 <__aeabi_ui2d>
 8001ffc:	4a39      	ldr	r2, [pc, #228]	; (80020e4 <_ftoa+0x2fc>)
 8001ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002008:	f7fe fd7c 	bl	8000b04 <__aeabi_dcmpge>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d01a      	beq.n	8002048 <_ftoa+0x260>
      frac = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8002016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002018:	3301      	adds	r3, #1
 800201a:	657b      	str	r3, [r7, #84]	; 0x54
 800201c:	e014      	b.n	8002048 <_ftoa+0x260>
    }
  }
  else if (diff < 0.5) {
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <_ftoa+0x300>)
 8002024:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002028:	f7fe fd58 	bl	8000adc <__aeabi_dcmplt>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10a      	bne.n	8002048 <_ftoa+0x260>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002034:	2b00      	cmp	r3, #0
 8002036:	d004      	beq.n	8002042 <_ftoa+0x25a>
 8002038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <_ftoa+0x260>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002044:	3301      	adds	r3, #1
 8002046:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8002048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800204a:	2b00      	cmp	r3, #0
 800204c:	d134      	bne.n	80020b8 <_ftoa+0x2d0>
    diff = value - (double)whole;
 800204e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002050:	f7fe fa68 	bl	8000524 <__aeabi_i2d>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800205c:	f7fe f914 	bl	8000288 <__aeabi_dsub>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002068:	2301      	movs	r3, #1
 800206a:	461c      	mov	r4, r3
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <_ftoa+0x300>)
 8002072:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002076:	f7fe fd31 	bl	8000adc <__aeabi_dcmplt>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <_ftoa+0x29c>
 8002080:	2300      	movs	r3, #0
 8002082:	461c      	mov	r4, r3
 8002084:	b2e3      	uxtb	r3, r4
 8002086:	f083 0301 	eor.w	r3, r3, #1
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d109      	bne.n	80020a4 <_ftoa+0x2bc>
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <_ftoa+0x300>)
 8002096:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800209a:	f7fe fd3d 	bl	8000b18 <__aeabi_dcmpgt>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d067      	beq.n	8002174 <_ftoa+0x38c>
 80020a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8085 	beq.w	80021ba <_ftoa+0x3d2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80020b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b2:	3301      	adds	r3, #1
 80020b4:	657b      	str	r3, [r7, #84]	; 0x54
 80020b6:	e080      	b.n	80021ba <_ftoa+0x3d2>
    }
  }
  else {
    unsigned int count = prec;
 80020b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80020bc:	e037      	b.n	800212e <_ftoa+0x346>
 80020be:	bf00      	nop
 80020c0:	00000000 	.word	0x00000000
 80020c4:	41cdcd65 	.word	0x41cdcd65
 80020c8:	00000000 	.word	0x00000000
 80020cc:	c1cdcd65 	.word	0xc1cdcd65
 80020d0:	0800ab24 	.word	0x0800ab24
 80020d4:	0800ab28 	.word	0x0800ab28
 80020d8:	7fefffff 	.word	0x7fefffff
 80020dc:	0800ab30 	.word	0x0800ab30
 80020e0:	0800ab38 	.word	0x0800ab38
 80020e4:	0800ab40 	.word	0x0800ab40
 80020e8:	3fe00000 	.word	0x3fe00000
      --count;
 80020ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ee:	3b01      	subs	r3, #1
 80020f0:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80020f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80020f4:	4b69      	ldr	r3, [pc, #420]	; (800229c <_ftoa+0x4b4>)
 80020f6:	fba3 2301 	umull	r2, r3, r3, r1
 80020fa:	08da      	lsrs	r2, r3, #3
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	1aca      	subs	r2, r1, r3
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800210a:	1c59      	adds	r1, r3, #1
 800210c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800210e:	3230      	adds	r2, #48	; 0x30
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002116:	440b      	add	r3, r1
 8002118:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800211c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800211e:	4a5f      	ldr	r2, [pc, #380]	; (800229c <_ftoa+0x4b4>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	653b      	str	r3, [r7, #80]	; 0x50
 8002128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <_ftoa+0x34e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800212e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002130:	2b1f      	cmp	r3, #31
 8002132:	d9db      	bls.n	80020ec <_ftoa+0x304>
 8002134:	e00a      	b.n	800214c <_ftoa+0x364>
        break;
 8002136:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002138:	e008      	b.n	800214c <_ftoa+0x364>
      buf[len++] = '0';
 800213a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002140:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002144:	4413      	add	r3, r2
 8002146:	2230      	movs	r2, #48	; 0x30
 8002148:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800214c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800214e:	2b1f      	cmp	r3, #31
 8002150:	d804      	bhi.n	800215c <_ftoa+0x374>
 8002152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002154:	1e5a      	subs	r2, r3, #1
 8002156:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1ee      	bne.n	800213a <_ftoa+0x352>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800215c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800215e:	2b1f      	cmp	r3, #31
 8002160:	d82b      	bhi.n	80021ba <_ftoa+0x3d2>
      // add decimal
      buf[len++] = '.';
 8002162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002168:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800216c:	4413      	add	r3, r2
 800216e:	222e      	movs	r2, #46	; 0x2e
 8002170:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002174:	e021      	b.n	80021ba <_ftoa+0x3d2>
    buf[len++] = (char)(48 + (whole % 10));
 8002176:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002178:	4b49      	ldr	r3, [pc, #292]	; (80022a0 <_ftoa+0x4b8>)
 800217a:	fb83 1302 	smull	r1, r3, r3, r2
 800217e:	1099      	asrs	r1, r3, #2
 8002180:	17d3      	asrs	r3, r2, #31
 8002182:	1ac9      	subs	r1, r1, r3
 8002184:	460b      	mov	r3, r1
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	1ad1      	subs	r1, r2, r3
 800218e:	b2ca      	uxtb	r2, r1
 8002190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002192:	1c59      	adds	r1, r3, #1
 8002194:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002196:	3230      	adds	r2, #48	; 0x30
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800219e:	440b      	add	r3, r1
 80021a0:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80021a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a6:	4a3e      	ldr	r2, [pc, #248]	; (80022a0 <_ftoa+0x4b8>)
 80021a8:	fb82 1203 	smull	r1, r2, r2, r3
 80021ac:	1092      	asrs	r2, r2, #2
 80021ae:	17db      	asrs	r3, r3, #31
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	657b      	str	r3, [r7, #84]	; 0x54
 80021b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <_ftoa+0x3da>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80021ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021bc:	2b1f      	cmp	r3, #31
 80021be:	d9da      	bls.n	8002176 <_ftoa+0x38e>
 80021c0:	e000      	b.n	80021c4 <_ftoa+0x3dc>
      break;
 80021c2:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80021c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d124      	bne.n	8002218 <_ftoa+0x430>
 80021ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d01f      	beq.n	8002218 <_ftoa+0x430>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80021d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d015      	beq.n	800220a <_ftoa+0x422>
 80021de:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d104      	bne.n	80021f0 <_ftoa+0x408>
 80021e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00c      	beq.n	800220a <_ftoa+0x422>
      width--;
 80021f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021f2:	3b01      	subs	r3, #1
 80021f4:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80021f6:	e008      	b.n	800220a <_ftoa+0x422>
      buf[len++] = '0';
 80021f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	65fa      	str	r2, [r7, #92]	; 0x5c
 80021fe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002202:	4413      	add	r3, r2
 8002204:	2230      	movs	r2, #48	; 0x30
 8002206:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800220a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800220c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800220e:	429a      	cmp	r2, r3
 8002210:	d202      	bcs.n	8002218 <_ftoa+0x430>
 8002212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002214:	2b1f      	cmp	r3, #31
 8002216:	d9ef      	bls.n	80021f8 <_ftoa+0x410>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800221a:	2b1f      	cmp	r3, #31
 800221c:	d82a      	bhi.n	8002274 <_ftoa+0x48c>
    if (negative) {
 800221e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <_ftoa+0x452>
      buf[len++] = '-';
 8002226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800222c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002230:	4413      	add	r3, r2
 8002232:	222d      	movs	r2, #45	; 0x2d
 8002234:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002238:	e01c      	b.n	8002274 <_ftoa+0x48c>
    }
    else if (flags & FLAGS_PLUS) {
 800223a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d009      	beq.n	8002258 <_ftoa+0x470>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	65fa      	str	r2, [r7, #92]	; 0x5c
 800224a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800224e:	4413      	add	r3, r2
 8002250:	222b      	movs	r2, #43	; 0x2b
 8002252:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002256:	e00d      	b.n	8002274 <_ftoa+0x48c>
    }
    else if (flags & FLAGS_SPACE) {
 8002258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d008      	beq.n	8002274 <_ftoa+0x48c>
      buf[len++] = ' ';
 8002262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002268:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800226c:	4413      	add	r3, r2
 800226e:	2220      	movs	r2, #32
 8002270:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002276:	9303      	str	r3, [sp, #12]
 8002278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800227a:	9302      	str	r3, [sp, #8]
 800227c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	f107 0318 	add.w	r3, r7, #24
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	6939      	ldr	r1, [r7, #16]
 800228c:	6978      	ldr	r0, [r7, #20]
 800228e:	f7ff fba7 	bl	80019e0 <_out_rev>
 8002292:	4603      	mov	r3, r0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3764      	adds	r7, #100	; 0x64
 8002298:	46bd      	mov	sp, r7
 800229a:	bd90      	pop	{r4, r7, pc}
 800229c:	cccccccd 	.word	0xcccccccd
 80022a0:	66666667 	.word	0x66666667
 80022a4:	00000000 	.word	0x00000000

080022a8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80022a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022ac:	b09d      	sub	sp, #116	; 0x74
 80022ae:	af06      	add	r7, sp, #24
 80022b0:	61f8      	str	r0, [r7, #28]
 80022b2:	61b9      	str	r1, [r7, #24]
 80022b4:	617a      	str	r2, [r7, #20]
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80022bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022c4:	f7fe fc00 	bl	8000ac8 <__aeabi_dcmpeq>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d014      	beq.n	80022f8 <_etoa+0x50>
 80022ce:	f04f 32ff 	mov.w	r2, #4294967295
 80022d2:	4bc3      	ldr	r3, [pc, #780]	; (80025e0 <_etoa+0x338>)
 80022d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022d8:	f7fe fc1e 	bl	8000b18 <__aeabi_dcmpgt>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10a      	bne.n	80022f8 <_etoa+0x50>
 80022e2:	f04f 32ff 	mov.w	r2, #4294967295
 80022e6:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80022ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022ee:	f7fe fbf5 	bl	8000adc <__aeabi_dcmplt>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d012      	beq.n	800231e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80022f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022fc:	9302      	str	r3, [sp, #8]
 80022fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	ed97 0b02 	vldr	d0, [r7, #8]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	69f8      	ldr	r0, [r7, #28]
 8002316:	f7ff fd67 	bl	8001de8 <_ftoa>
 800231a:	4603      	mov	r3, r0
 800231c:	e245      	b.n	80027aa <_etoa+0x502>
  }

  // determine the sign
  const bool negative = value < 0;
 800231e:	2301      	movs	r3, #1
 8002320:	461e      	mov	r6, r3
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800232e:	f7fe fbd5 	bl	8000adc <__aeabi_dcmplt>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <_etoa+0x94>
 8002338:	2300      	movs	r3, #0
 800233a:	461e      	mov	r6, r3
 800233c:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8002340:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <_etoa+0xac>
    value = -value;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002352:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8002354:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235c:	2b00      	cmp	r3, #0
 800235e:	d102      	bne.n	8002366 <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002360:	2306      	movs	r3, #6
 8002362:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8002366:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800236a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800236e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	0d0a      	lsrs	r2, r1, #20
 800237c:	2300      	movs	r3, #0
 800237e:	4613      	mov	r3, r2
 8002380:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002384:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002388:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800238a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800238e:	f04f 30ff 	mov.w	r0, #4294967295
 8002392:	4994      	ldr	r1, [pc, #592]	; (80025e4 <_etoa+0x33c>)
 8002394:	ea02 0400 	and.w	r4, r2, r0
 8002398:	ea03 0501 	and.w	r5, r3, r1
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	4b91      	ldr	r3, [pc, #580]	; (80025e8 <_etoa+0x340>)
 80023a2:	ea44 0802 	orr.w	r8, r4, r2
 80023a6:	ea45 0903 	orr.w	r9, r5, r3
 80023aa:	e9c7 8908 	strd	r8, r9, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80023ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80023b0:	f7fe f8b8 	bl	8000524 <__aeabi_i2d>
 80023b4:	a37e      	add	r3, pc, #504	; (adr r3, 80025b0 <_etoa+0x308>)
 80023b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ba:	f7fe f91d 	bl	80005f8 <__aeabi_dmul>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	a37c      	add	r3, pc, #496	; (adr r3, 80025b8 <_etoa+0x310>)
 80023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023cc:	f7fd ff5e 	bl	800028c <__adddf3>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4614      	mov	r4, r2
 80023d6:	461d      	mov	r5, r3
 80023d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	4b82      	ldr	r3, [pc, #520]	; (80025ec <_etoa+0x344>)
 80023e2:	f7fd ff51 	bl	8000288 <__aeabi_dsub>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	a374      	add	r3, pc, #464	; (adr r3, 80025c0 <_etoa+0x318>)
 80023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f4:	f7fe f900 	bl	80005f8 <__aeabi_dmul>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4620      	mov	r0, r4
 80023fe:	4629      	mov	r1, r5
 8002400:	f7fd ff44 	bl	800028c <__adddf3>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	f7fe fba4 	bl	8000b58 <__aeabi_d2iz>
 8002410:	4603      	mov	r3, r0
 8002412:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002414:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002416:	f7fe f885 	bl	8000524 <__aeabi_i2d>
 800241a:	a36b      	add	r3, pc, #428	; (adr r3, 80025c8 <_etoa+0x320>)
 800241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002420:	f7fe f8ea 	bl	80005f8 <__aeabi_dmul>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	4b6f      	ldr	r3, [pc, #444]	; (80025f0 <_etoa+0x348>)
 8002432:	f7fd ff2b 	bl	800028c <__adddf3>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	f7fe fb8b 	bl	8000b58 <__aeabi_d2iz>
 8002442:	4603      	mov	r3, r0
 8002444:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002446:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002448:	f7fe f86c 	bl	8000524 <__aeabi_i2d>
 800244c:	a360      	add	r3, pc, #384	; (adr r3, 80025d0 <_etoa+0x328>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	f7fe f8d1 	bl	80005f8 <__aeabi_dmul>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4614      	mov	r4, r2
 800245c:	461d      	mov	r5, r3
 800245e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002460:	f7fe f860 	bl	8000524 <__aeabi_i2d>
 8002464:	a35c      	add	r3, pc, #368	; (adr r3, 80025d8 <_etoa+0x330>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f7fe f8c5 	bl	80005f8 <__aeabi_dmul>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4620      	mov	r0, r4
 8002474:	4629      	mov	r1, r5
 8002476:	f7fd ff07 	bl	8000288 <__aeabi_dsub>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 8002482:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002486:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800248a:	f7fe f8b5 	bl	80005f8 <__aeabi_dmul>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002498:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800249c:	4618      	mov	r0, r3
 800249e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	0503      	lsls	r3, r0, #20
 80024ac:	2200      	movs	r2, #0
 80024ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80024b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024b6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	f7fd fee5 	bl	800028c <__adddf3>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4690      	mov	r8, r2
 80024c8:	4699      	mov	r9, r3
 80024ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024ce:	f04f 0000 	mov.w	r0, #0
 80024d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80024d6:	f7fd fed7 	bl	8000288 <__aeabi_dsub>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4692      	mov	sl, r2
 80024e0:	469b      	mov	fp, r3
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	4b43      	ldr	r3, [pc, #268]	; (80025f4 <_etoa+0x34c>)
 80024e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80024ec:	f7fe f9ae 	bl	800084c <__aeabi_ddiv>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <_etoa+0x350>)
 80024fe:	f7fd fec5 	bl	800028c <__adddf3>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800250a:	f7fe f99f 	bl	800084c <__aeabi_ddiv>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	4b38      	ldr	r3, [pc, #224]	; (80025fc <_etoa+0x354>)
 800251c:	f7fd feb6 	bl	800028c <__adddf3>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002528:	f7fe f990 	bl	800084c <__aeabi_ddiv>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4650      	mov	r0, sl
 8002532:	4659      	mov	r1, fp
 8002534:	f7fd feaa 	bl	800028c <__adddf3>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4640      	mov	r0, r8
 800253e:	4649      	mov	r1, r9
 8002540:	f7fe f984 	bl	800084c <__aeabi_ddiv>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <_etoa+0x340>)
 8002552:	f7fd fe9b 	bl	800028c <__adddf3>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4620      	mov	r0, r4
 800255c:	4629      	mov	r1, r5
 800255e:	f7fe f84b 	bl	80005f8 <__aeabi_dmul>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 800256a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800256e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002572:	f7fe fab3 	bl	8000adc <__aeabi_dcmplt>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00d      	beq.n	8002598 <_etoa+0x2f0>
    expval--;
 800257c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257e:	3b01      	subs	r3, #1
 8002580:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8002582:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <_etoa+0x350>)
 800258c:	f7fe f95e 	bl	800084c <__aeabi_ddiv>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259a:	2b63      	cmp	r3, #99	; 0x63
 800259c:	dc30      	bgt.n	8002600 <_etoa+0x358>
 800259e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a0:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80025a4:	db2c      	blt.n	8002600 <_etoa+0x358>
 80025a6:	2304      	movs	r3, #4
 80025a8:	e02b      	b.n	8002602 <_etoa+0x35a>
 80025aa:	bf00      	nop
 80025ac:	f3af 8000 	nop.w
 80025b0:	509f79fb 	.word	0x509f79fb
 80025b4:	3fd34413 	.word	0x3fd34413
 80025b8:	8b60c8b3 	.word	0x8b60c8b3
 80025bc:	3fc68a28 	.word	0x3fc68a28
 80025c0:	636f4361 	.word	0x636f4361
 80025c4:	3fd287a7 	.word	0x3fd287a7
 80025c8:	0979a371 	.word	0x0979a371
 80025cc:	400a934f 	.word	0x400a934f
 80025d0:	bbb55516 	.word	0xbbb55516
 80025d4:	40026bb1 	.word	0x40026bb1
 80025d8:	fefa39ef 	.word	0xfefa39ef
 80025dc:	3fe62e42 	.word	0x3fe62e42
 80025e0:	7fefffff 	.word	0x7fefffff
 80025e4:	000fffff 	.word	0x000fffff
 80025e8:	3ff00000 	.word	0x3ff00000
 80025ec:	3ff80000 	.word	0x3ff80000
 80025f0:	3fe00000 	.word	0x3fe00000
 80025f4:	402c0000 	.word	0x402c0000
 80025f8:	40240000 	.word	0x40240000
 80025fc:	40180000 	.word	0x40180000
 8002600:	2305      	movs	r3, #5
 8002602:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002604:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260c:	2b00      	cmp	r3, #0
 800260e:	d03d      	beq.n	800268c <_etoa+0x3e4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002610:	a369      	add	r3, pc, #420	; (adr r3, 80027b8 <_etoa+0x510>)
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800261a:	f7fe fa73 	bl	8000b04 <__aeabi_dcmpge>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d024      	beq.n	800266e <_etoa+0x3c6>
 8002624:	a366      	add	r3, pc, #408	; (adr r3, 80027c0 <_etoa+0x518>)
 8002626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800262e:	f7fe fa55 	bl	8000adc <__aeabi_dcmplt>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01a      	beq.n	800266e <_etoa+0x3c6>
      if ((int)prec > expval) {
 8002638:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800263c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800263e:	429a      	cmp	r2, r3
 8002640:	da07      	bge.n	8002652 <_etoa+0x3aa>
        prec = (unsigned)((int)prec - expval - 1);
 8002642:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	3b01      	subs	r3, #1
 800264c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002650:	e002      	b.n	8002658 <_etoa+0x3b0>
      }
      else {
        prec = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002658:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800265c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	657b      	str	r3, [r7, #84]	; 0x54
 800266c:	e00e      	b.n	800268c <_etoa+0x3e4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800266e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00a      	beq.n	800268c <_etoa+0x3e4>
 8002676:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800267a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267e:	2b00      	cmp	r3, #0
 8002680:	d004      	beq.n	800268c <_etoa+0x3e4>
        --prec;
 8002682:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002686:	3b01      	subs	r3, #1
 8002688:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800268c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002690:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8002692:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002698:	429a      	cmp	r2, r3
 800269a:	d904      	bls.n	80026a6 <_etoa+0x3fe>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800269c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800269e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a4:	e001      	b.n	80026aa <_etoa+0x402>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80026aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d004      	beq.n	80026c0 <_etoa+0x418>
 80026b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <_etoa+0x418>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 80026c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <_etoa+0x432>
    value /= conv.F;
 80026c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026ce:	f7fe f8bd 	bl	800084c <__aeabi_ddiv>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80026de:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d006      	beq.n	80026f4 <_etoa+0x44c>
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	e003      	b.n	80026fc <_etoa+0x454>
 80026f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80026f8:	ed87 7b00 	vstr	d7, [r7]
 80026fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002704:	9302      	str	r3, [sp, #8]
 8002706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	ed97 0b00 	vldr	d0, [r7]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	69b9      	ldr	r1, [r7, #24]
 800271a:	69f8      	ldr	r0, [r7, #28]
 800271c:	f7ff fb64 	bl	8001de8 <_ftoa>
 8002720:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8002722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002724:	2b00      	cmp	r3, #0
 8002726:	d03f      	beq.n	80027a8 <_etoa+0x500>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8002728:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <_etoa+0x490>
 8002734:	2045      	movs	r0, #69	; 0x45
 8002736:	e000      	b.n	800273a <_etoa+0x492>
 8002738:	2065      	movs	r0, #101	; 0x65
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	1c53      	adds	r3, r2, #1
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	69fc      	ldr	r4, [r7, #28]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	69b9      	ldr	r1, [r7, #24]
 8002746:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8002748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274a:	2b00      	cmp	r3, #0
 800274c:	bfb8      	it	lt
 800274e:	425b      	neglt	r3, r3
 8002750:	4618      	mov	r0, r3
 8002752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002754:	0fdb      	lsrs	r3, r3, #31
 8002756:	b2db      	uxtb	r3, r3
 8002758:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800275a:	3a01      	subs	r2, #1
 800275c:	2105      	movs	r1, #5
 800275e:	9105      	str	r1, [sp, #20]
 8002760:	9204      	str	r2, [sp, #16]
 8002762:	2200      	movs	r2, #0
 8002764:	9203      	str	r2, [sp, #12]
 8002766:	220a      	movs	r2, #10
 8002768:	9202      	str	r2, [sp, #8]
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	9000      	str	r0, [sp, #0]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	69b9      	ldr	r1, [r7, #24]
 8002774:	69f8      	ldr	r0, [r7, #28]
 8002776:	f7ff fa5f 	bl	8001c38 <_ntoa_long>
 800277a:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800277c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00f      	beq.n	80027a8 <_etoa+0x500>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8002788:	e007      	b.n	800279a <_etoa+0x4f2>
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	1c53      	adds	r3, r2, #1
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	69fc      	ldr	r4, [r7, #28]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	69b9      	ldr	r1, [r7, #24]
 8002796:	2020      	movs	r0, #32
 8002798:	47a0      	blx	r4
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d8f0      	bhi.n	800278a <_etoa+0x4e2>
    }
  }
  return idx;
 80027a8:	697b      	ldr	r3, [r7, #20]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	375c      	adds	r7, #92	; 0x5c
 80027ae:	46bd      	mov	sp, r7
 80027b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027b4:	f3af 8000 	nop.w
 80027b8:	eb1c432d 	.word	0xeb1c432d
 80027bc:	3f1a36e2 	.word	0x3f1a36e2
 80027c0:	00000000 	.word	0x00000000
 80027c4:	412e8480 	.word	0x412e8480

080027c8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80027c8:	b5b0      	push	{r4, r5, r7, lr}
 80027ca:	b0a0      	sub	sp, #128	; 0x80
 80027cc:	af0a      	add	r7, sp, #40	; 0x28
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f040 8494 	bne.w	800310a <_vsnprintf+0x942>
    // use null output function
    out = _out_null;
 80027e2:	4ba0      	ldr	r3, [pc, #640]	; (8002a64 <_vsnprintf+0x29c>)
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 80027e6:	f000 bc90 	b.w	800310a <_vsnprintf+0x942>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b25      	cmp	r3, #37	; 0x25
 80027f0:	d00d      	beq.n	800280e <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	7818      	ldrb	r0, [r3, #0]
 80027f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027f8:	1c53      	adds	r3, r2, #1
 80027fa:	647b      	str	r3, [r7, #68]	; 0x44
 80027fc:	68fc      	ldr	r4, [r7, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	47a0      	blx	r4
      format++;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	3301      	adds	r3, #1
 8002808:	603b      	str	r3, [r7, #0]
      continue;
 800280a:	f000 bc7e 	b.w	800310a <_vsnprintf+0x942>
    }
    else {
      // yes, evaluate it
      format++;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	3b20      	subs	r3, #32
 800281e:	2b10      	cmp	r3, #16
 8002820:	d856      	bhi.n	80028d0 <_vsnprintf+0x108>
 8002822:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <_vsnprintf+0x60>)
 8002824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002828:	080028a9 	.word	0x080028a9
 800282c:	080028d1 	.word	0x080028d1
 8002830:	080028d1 	.word	0x080028d1
 8002834:	080028bd 	.word	0x080028bd
 8002838:	080028d1 	.word	0x080028d1
 800283c:	080028d1 	.word	0x080028d1
 8002840:	080028d1 	.word	0x080028d1
 8002844:	080028d1 	.word	0x080028d1
 8002848:	080028d1 	.word	0x080028d1
 800284c:	080028d1 	.word	0x080028d1
 8002850:	080028d1 	.word	0x080028d1
 8002854:	08002895 	.word	0x08002895
 8002858:	080028d1 	.word	0x080028d1
 800285c:	08002881 	.word	0x08002881
 8002860:	080028d1 	.word	0x080028d1
 8002864:	080028d1 	.word	0x080028d1
 8002868:	0800286d 	.word	0x0800286d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800286c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	657b      	str	r3, [r7, #84]	; 0x54
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	3301      	adds	r3, #1
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	2301      	movs	r3, #1
 800287c:	64bb      	str	r3, [r7, #72]	; 0x48
 800287e:	e02a      	b.n	80028d6 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002882:	f043 0302 	orr.w	r3, r3, #2
 8002886:	657b      	str	r3, [r7, #84]	; 0x54
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	603b      	str	r3, [r7, #0]
 800288e:	2301      	movs	r3, #1
 8002890:	64bb      	str	r3, [r7, #72]	; 0x48
 8002892:	e020      	b.n	80028d6 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002896:	f043 0304 	orr.w	r3, r3, #4
 800289a:	657b      	str	r3, [r7, #84]	; 0x54
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	3301      	adds	r3, #1
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	2301      	movs	r3, #1
 80028a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80028a6:	e016      	b.n	80028d6 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80028a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028aa:	f043 0308 	orr.w	r3, r3, #8
 80028ae:	657b      	str	r3, [r7, #84]	; 0x54
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	2301      	movs	r3, #1
 80028b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80028ba:	e00c      	b.n	80028d6 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80028bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028be:	f043 0310 	orr.w	r3, r3, #16
 80028c2:	657b      	str	r3, [r7, #84]	; 0x54
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	603b      	str	r3, [r7, #0]
 80028ca:	2301      	movs	r3, #1
 80028cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80028ce:	e002      	b.n	80028d6 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 80028d0:	2300      	movs	r3, #0
 80028d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80028d4:	bf00      	nop
      }
    } while (n);
 80028d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d19d      	bne.n	8002818 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff f840 	bl	800196a <_is_digit>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <_vsnprintf+0x134>
      width = _atoi(&format);
 80028f0:	463b      	mov	r3, r7
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff f850 	bl	8001998 <_atoi>
 80028f8:	6538      	str	r0, [r7, #80]	; 0x50
 80028fa:	e018      	b.n	800292e <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b2a      	cmp	r3, #42	; 0x2a
 8002902:	d114      	bne.n	800292e <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 8002904:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002906:	1d1a      	adds	r2, r3, #4
 8002908:	66ba      	str	r2, [r7, #104]	; 0x68
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002910:	2b00      	cmp	r3, #0
 8002912:	da07      	bge.n	8002924 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 8002914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002916:	f043 0302 	orr.w	r3, r3, #2
 800291a:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	425b      	negs	r3, r3
 8002920:	653b      	str	r3, [r7, #80]	; 0x50
 8002922:	e001      	b.n	8002928 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 8002924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002926:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	3301      	adds	r3, #1
 800292c:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b2e      	cmp	r3, #46	; 0x2e
 8002938:	d124      	bne.n	8002984 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 800293a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002940:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff f80c 	bl	800196a <_is_digit>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8002958:	463b      	mov	r3, r7
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff f81c 	bl	8001998 <_atoi>
 8002960:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002962:	e00f      	b.n	8002984 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b2a      	cmp	r3, #42	; 0x2a
 800296a:	d10b      	bne.n	8002984 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800296c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800296e:	1d1a      	adds	r2, r3, #4
 8002970:	66ba      	str	r2, [r7, #104]	; 0x68
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002978:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800297c:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	3301      	adds	r3, #1
 8002982:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	3b68      	subs	r3, #104	; 0x68
 800298a:	2b12      	cmp	r3, #18
 800298c:	d866      	bhi.n	8002a5c <_vsnprintf+0x294>
 800298e:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <_vsnprintf+0x1cc>)
 8002990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002994:	08002a07 	.word	0x08002a07
 8002998:	08002a5d 	.word	0x08002a5d
 800299c:	08002a3d 	.word	0x08002a3d
 80029a0:	08002a5d 	.word	0x08002a5d
 80029a4:	080029e1 	.word	0x080029e1
 80029a8:	08002a5d 	.word	0x08002a5d
 80029ac:	08002a5d 	.word	0x08002a5d
 80029b0:	08002a5d 	.word	0x08002a5d
 80029b4:	08002a5d 	.word	0x08002a5d
 80029b8:	08002a5d 	.word	0x08002a5d
 80029bc:	08002a5d 	.word	0x08002a5d
 80029c0:	08002a5d 	.word	0x08002a5d
 80029c4:	08002a2d 	.word	0x08002a2d
 80029c8:	08002a5d 	.word	0x08002a5d
 80029cc:	08002a5d 	.word	0x08002a5d
 80029d0:	08002a5d 	.word	0x08002a5d
 80029d4:	08002a5d 	.word	0x08002a5d
 80029d8:	08002a5d 	.word	0x08002a5d
 80029dc:	08002a4d 	.word	0x08002a4d
      case 'l' :
        flags |= FLAGS_LONG;
 80029e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	3301      	adds	r3, #1
 80029ec:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b6c      	cmp	r3, #108	; 0x6c
 80029f4:	d134      	bne.n	8002a60 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 80029f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029fc:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	603b      	str	r3, [r7, #0]
        }
        break;
 8002a04:	e02c      	b.n	8002a60 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a0c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b68      	cmp	r3, #104	; 0x68
 8002a1a:	d125      	bne.n	8002a68 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8002a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a22:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	603b      	str	r3, [r7, #0]
        }
        break;
 8002a2a:	e01d      	b.n	8002a68 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a32:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	3301      	adds	r3, #1
 8002a38:	603b      	str	r3, [r7, #0]
        break;
 8002a3a:	e016      	b.n	8002a6a <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a42:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	3301      	adds	r3, #1
 8002a48:	603b      	str	r3, [r7, #0]
        break;
 8002a4a:	e00e      	b.n	8002a6a <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a52:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	3301      	adds	r3, #1
 8002a58:	603b      	str	r3, [r7, #0]
        break;
 8002a5a:	e006      	b.n	8002a6a <_vsnprintf+0x2a2>
      default :
        break;
 8002a5c:	bf00      	nop
 8002a5e:	e004      	b.n	8002a6a <_vsnprintf+0x2a2>
        break;
 8002a60:	bf00      	nop
 8002a62:	e002      	b.n	8002a6a <_vsnprintf+0x2a2>
 8002a64:	080018ef 	.word	0x080018ef
        break;
 8002a68:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	3b25      	subs	r3, #37	; 0x25
 8002a70:	2b53      	cmp	r3, #83	; 0x53
 8002a72:	f200 833d 	bhi.w	80030f0 <_vsnprintf+0x928>
 8002a76:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <_vsnprintf+0x2b4>)
 8002a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7c:	080030d9 	.word	0x080030d9
 8002a80:	080030f1 	.word	0x080030f1
 8002a84:	080030f1 	.word	0x080030f1
 8002a88:	080030f1 	.word	0x080030f1
 8002a8c:	080030f1 	.word	0x080030f1
 8002a90:	080030f1 	.word	0x080030f1
 8002a94:	080030f1 	.word	0x080030f1
 8002a98:	080030f1 	.word	0x080030f1
 8002a9c:	080030f1 	.word	0x080030f1
 8002aa0:	080030f1 	.word	0x080030f1
 8002aa4:	080030f1 	.word	0x080030f1
 8002aa8:	080030f1 	.word	0x080030f1
 8002aac:	080030f1 	.word	0x080030f1
 8002ab0:	080030f1 	.word	0x080030f1
 8002ab4:	080030f1 	.word	0x080030f1
 8002ab8:	080030f1 	.word	0x080030f1
 8002abc:	080030f1 	.word	0x080030f1
 8002ac0:	080030f1 	.word	0x080030f1
 8002ac4:	080030f1 	.word	0x080030f1
 8002ac8:	080030f1 	.word	0x080030f1
 8002acc:	080030f1 	.word	0x080030f1
 8002ad0:	080030f1 	.word	0x080030f1
 8002ad4:	080030f1 	.word	0x080030f1
 8002ad8:	080030f1 	.word	0x080030f1
 8002adc:	080030f1 	.word	0x080030f1
 8002ae0:	080030f1 	.word	0x080030f1
 8002ae4:	080030f1 	.word	0x080030f1
 8002ae8:	080030f1 	.word	0x080030f1
 8002aec:	080030f1 	.word	0x080030f1
 8002af0:	080030f1 	.word	0x080030f1
 8002af4:	080030f1 	.word	0x080030f1
 8002af8:	080030f1 	.word	0x080030f1
 8002afc:	08002ea7 	.word	0x08002ea7
 8002b00:	08002e5b 	.word	0x08002e5b
 8002b04:	08002ea7 	.word	0x08002ea7
 8002b08:	080030f1 	.word	0x080030f1
 8002b0c:	080030f1 	.word	0x080030f1
 8002b10:	080030f1 	.word	0x080030f1
 8002b14:	080030f1 	.word	0x080030f1
 8002b18:	080030f1 	.word	0x080030f1
 8002b1c:	080030f1 	.word	0x080030f1
 8002b20:	080030f1 	.word	0x080030f1
 8002b24:	080030f1 	.word	0x080030f1
 8002b28:	080030f1 	.word	0x080030f1
 8002b2c:	080030f1 	.word	0x080030f1
 8002b30:	080030f1 	.word	0x080030f1
 8002b34:	080030f1 	.word	0x080030f1
 8002b38:	080030f1 	.word	0x080030f1
 8002b3c:	080030f1 	.word	0x080030f1
 8002b40:	080030f1 	.word	0x080030f1
 8002b44:	080030f1 	.word	0x080030f1
 8002b48:	08002bcd 	.word	0x08002bcd
 8002b4c:	080030f1 	.word	0x080030f1
 8002b50:	080030f1 	.word	0x080030f1
 8002b54:	080030f1 	.word	0x080030f1
 8002b58:	080030f1 	.word	0x080030f1
 8002b5c:	080030f1 	.word	0x080030f1
 8002b60:	080030f1 	.word	0x080030f1
 8002b64:	080030f1 	.word	0x080030f1
 8002b68:	080030f1 	.word	0x080030f1
 8002b6c:	080030f1 	.word	0x080030f1
 8002b70:	08002bcd 	.word	0x08002bcd
 8002b74:	08002f13 	.word	0x08002f13
 8002b78:	08002bcd 	.word	0x08002bcd
 8002b7c:	08002ea7 	.word	0x08002ea7
 8002b80:	08002e5b 	.word	0x08002e5b
 8002b84:	08002ea7 	.word	0x08002ea7
 8002b88:	080030f1 	.word	0x080030f1
 8002b8c:	08002bcd 	.word	0x08002bcd
 8002b90:	080030f1 	.word	0x080030f1
 8002b94:	080030f1 	.word	0x080030f1
 8002b98:	080030f1 	.word	0x080030f1
 8002b9c:	080030f1 	.word	0x080030f1
 8002ba0:	080030f1 	.word	0x080030f1
 8002ba4:	08002bcd 	.word	0x08002bcd
 8002ba8:	0800304b 	.word	0x0800304b
 8002bac:	080030f1 	.word	0x080030f1
 8002bb0:	080030f1 	.word	0x080030f1
 8002bb4:	08002f87 	.word	0x08002f87
 8002bb8:	080030f1 	.word	0x080030f1
 8002bbc:	08002bcd 	.word	0x08002bcd
 8002bc0:	080030f1 	.word	0x080030f1
 8002bc4:	080030f1 	.word	0x080030f1
 8002bc8:	08002bcd 	.word	0x08002bcd
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b78      	cmp	r3, #120	; 0x78
 8002bd2:	d003      	beq.n	8002bdc <_vsnprintf+0x414>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b58      	cmp	r3, #88	; 0x58
 8002bda:	d102      	bne.n	8002be2 <_vsnprintf+0x41a>
          base = 16U;
 8002bdc:	2310      	movs	r3, #16
 8002bde:	643b      	str	r3, [r7, #64]	; 0x40
 8002be0:	e013      	b.n	8002c0a <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b6f      	cmp	r3, #111	; 0x6f
 8002be8:	d102      	bne.n	8002bf0 <_vsnprintf+0x428>
          base =  8U;
 8002bea:	2308      	movs	r3, #8
 8002bec:	643b      	str	r3, [r7, #64]	; 0x40
 8002bee:	e00c      	b.n	8002c0a <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b62      	cmp	r3, #98	; 0x62
 8002bf6:	d102      	bne.n	8002bfe <_vsnprintf+0x436>
          base =  2U;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	643b      	str	r3, [r7, #64]	; 0x40
 8002bfc:	e005      	b.n	8002c0a <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8002bfe:	230a      	movs	r3, #10
 8002c00:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c04:	f023 0310 	bic.w	r3, r3, #16
 8002c08:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b58      	cmp	r3, #88	; 0x58
 8002c10:	d103      	bne.n	8002c1a <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8002c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c14:	f043 0320 	orr.w	r3, r3, #32
 8002c18:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b69      	cmp	r3, #105	; 0x69
 8002c20:	d007      	beq.n	8002c32 <_vsnprintf+0x46a>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d003      	beq.n	8002c32 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c2c:	f023 030c 	bic.w	r3, r3, #12
 8002c30:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8002c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3e:	f023 0301 	bic.w	r3, r3, #1
 8002c42:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b69      	cmp	r3, #105	; 0x69
 8002c4a:	d004      	beq.n	8002c56 <_vsnprintf+0x48e>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b64      	cmp	r3, #100	; 0x64
 8002c52:	f040 808e 	bne.w	8002d72 <_vsnprintf+0x5aa>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d02f      	beq.n	8002cc0 <_vsnprintf+0x4f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8002c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c62:	3307      	adds	r3, #7
 8002c64:	f023 0307 	bic.w	r3, r3, #7
 8002c68:	f103 0208 	add.w	r2, r3, #8
 8002c6c:	66ba      	str	r2, [r7, #104]	; 0x68
 8002c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c72:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002c76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c7a:	2a00      	cmp	r2, #0
 8002c7c:	f173 0100 	sbcs.w	r1, r3, #0
 8002c80:	da02      	bge.n	8002c88 <_vsnprintf+0x4c0>
 8002c82:	4252      	negs	r2, r2
 8002c84:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	0fdb      	lsrs	r3, r3, #31
 8002c90:	b2dc      	uxtb	r4, r3
 8002c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c94:	461a      	mov	r2, r3
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8002c9c:	9508      	str	r5, [sp, #32]
 8002c9e:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8002ca0:	9507      	str	r5, [sp, #28]
 8002ca2:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8002ca4:	9506      	str	r5, [sp, #24]
 8002ca6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002caa:	9402      	str	r4, [sp, #8]
 8002cac:	e9cd 0100 	strd	r0, r1, [sp]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff f825 	bl	8001d06 <_ntoa_long_long>
 8002cbc:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8002cbe:	e0c8      	b.n	8002e52 <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01e      	beq.n	8002d08 <_vsnprintf+0x540>
            const long value = va_arg(va, long);
 8002cca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ccc:	1d1a      	adds	r2, r3, #4
 8002cce:	66ba      	str	r2, [r7, #104]	; 0x68
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bfb8      	it	lt
 8002cda:	425b      	neglt	r3, r3
 8002cdc:	4619      	mov	r1, r3
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	0fdb      	lsrs	r3, r3, #31
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ce6:	9205      	str	r2, [sp, #20]
 8002ce8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cea:	9204      	str	r2, [sp, #16]
 8002cec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cee:	9203      	str	r2, [sp, #12]
 8002cf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002cf2:	9202      	str	r2, [sp, #8]
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	9100      	str	r1, [sp, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f7fe ff9a 	bl	8001c38 <_ntoa_long>
 8002d04:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8002d06:	e0a4      	b.n	8002e52 <_vsnprintf+0x68a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <_vsnprintf+0x556>
 8002d12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d14:	1d1a      	adds	r2, r3, #4
 8002d16:	66ba      	str	r2, [r7, #104]	; 0x68
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	e00e      	b.n	8002d3c <_vsnprintf+0x574>
 8002d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <_vsnprintf+0x56c>
 8002d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d2a:	1d1a      	adds	r2, r3, #4
 8002d2c:	66ba      	str	r2, [r7, #104]	; 0x68
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	b21b      	sxth	r3, r3
 8002d32:	e003      	b.n	8002d3c <_vsnprintf+0x574>
 8002d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d36:	1d1a      	adds	r2, r3, #4
 8002d38:	66ba      	str	r2, [r7, #104]	; 0x68
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bfb8      	it	lt
 8002d44:	425b      	neglt	r3, r3
 8002d46:	4619      	mov	r1, r3
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	0fdb      	lsrs	r3, r3, #31
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d50:	9205      	str	r2, [sp, #20]
 8002d52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d54:	9204      	str	r2, [sp, #16]
 8002d56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d58:	9203      	str	r2, [sp, #12]
 8002d5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d5c:	9202      	str	r2, [sp, #8]
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	9100      	str	r1, [sp, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7fe ff65 	bl	8001c38 <_ntoa_long>
 8002d6e:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8002d70:	e06f      	b.n	8002e52 <_vsnprintf+0x68a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8002d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d020      	beq.n	8002dbe <_vsnprintf+0x5f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8002d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d7e:	3307      	adds	r3, #7
 8002d80:	f023 0307 	bic.w	r3, r3, #7
 8002d84:	f103 0208 	add.w	r2, r3, #8
 8002d88:	66ba      	str	r2, [r7, #104]	; 0x68
 8002d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d90:	4608      	mov	r0, r1
 8002d92:	f04f 0100 	mov.w	r1, #0
 8002d96:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8002d98:	9408      	str	r4, [sp, #32]
 8002d9a:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002d9c:	9407      	str	r4, [sp, #28]
 8002d9e:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002da0:	9406      	str	r4, [sp, #24]
 8002da2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002da6:	2100      	movs	r1, #0
 8002da8:	9102      	str	r1, [sp, #8]
 8002daa:	e9cd 2300 	strd	r2, r3, [sp]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f7fe ffa6 	bl	8001d06 <_ntoa_long_long>
 8002dba:	6478      	str	r0, [r7, #68]	; 0x44
 8002dbc:	e049      	b.n	8002e52 <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d016      	beq.n	8002df6 <_vsnprintf+0x62e>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8002dc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dca:	1d1a      	adds	r2, r3, #4
 8002dcc:	66ba      	str	r2, [r7, #104]	; 0x68
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002dd2:	9205      	str	r2, [sp, #20]
 8002dd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002dd6:	9204      	str	r2, [sp, #16]
 8002dd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dda:	9203      	str	r2, [sp, #12]
 8002ddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002dde:	9202      	str	r2, [sp, #8]
 8002de0:	2200      	movs	r2, #0
 8002de2:	9201      	str	r2, [sp, #4]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f7fe ff23 	bl	8001c38 <_ntoa_long>
 8002df2:	6478      	str	r0, [r7, #68]	; 0x44
 8002df4:	e02d      	b.n	8002e52 <_vsnprintf+0x68a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8002df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <_vsnprintf+0x644>
 8002e00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e02:	1d1a      	adds	r2, r3, #4
 8002e04:	66ba      	str	r2, [r7, #104]	; 0x68
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e00e      	b.n	8002e2a <_vsnprintf+0x662>
 8002e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <_vsnprintf+0x65a>
 8002e16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e18:	1d1a      	adds	r2, r3, #4
 8002e1a:	66ba      	str	r2, [r7, #104]	; 0x68
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	e003      	b.n	8002e2a <_vsnprintf+0x662>
 8002e22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e24:	1d1a      	adds	r2, r3, #4
 8002e26:	66ba      	str	r2, [r7, #104]	; 0x68
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8002e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e2e:	9305      	str	r3, [sp, #20]
 8002e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e32:	9304      	str	r3, [sp, #16]
 8002e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e36:	9303      	str	r3, [sp, #12]
 8002e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e3a:	9302      	str	r3, [sp, #8]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f7fe fef4 	bl	8001c38 <_ntoa_long>
 8002e50:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	3301      	adds	r3, #1
 8002e56:	603b      	str	r3, [r7, #0]
        break;
 8002e58:	e157      	b.n	800310a <_vsnprintf+0x942>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b46      	cmp	r3, #70	; 0x46
 8002e60:	d103      	bne.n	8002e6a <_vsnprintf+0x6a2>
 8002e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e64:	f043 0320 	orr.w	r3, r3, #32
 8002e68:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002e6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e6c:	3307      	adds	r3, #7
 8002e6e:	f023 0307 	bic.w	r3, r3, #7
 8002e72:	f103 0208 	add.w	r2, r3, #8
 8002e76:	66ba      	str	r2, [r7, #104]	; 0x68
 8002e78:	ed93 7b00 	vldr	d7, [r3]
 8002e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e7e:	9302      	str	r3, [sp, #8]
 8002e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e82:	9301      	str	r3, [sp, #4]
 8002e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	eeb0 0a47 	vmov.f32	s0, s14
 8002e8c:	eef0 0a67 	vmov.f32	s1, s15
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f7fe ffa6 	bl	8001de8 <_ftoa>
 8002e9c:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	603b      	str	r3, [r7, #0]
        break;
 8002ea4:	e131      	b.n	800310a <_vsnprintf+0x942>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b67      	cmp	r3, #103	; 0x67
 8002eac:	d003      	beq.n	8002eb6 <_vsnprintf+0x6ee>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b47      	cmp	r3, #71	; 0x47
 8002eb4:	d103      	bne.n	8002ebe <_vsnprintf+0x6f6>
 8002eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ebc:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b45      	cmp	r3, #69	; 0x45
 8002ec4:	d003      	beq.n	8002ece <_vsnprintf+0x706>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b47      	cmp	r3, #71	; 0x47
 8002ecc:	d103      	bne.n	8002ed6 <_vsnprintf+0x70e>
 8002ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed0:	f043 0320 	orr.w	r3, r3, #32
 8002ed4:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002ed6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ed8:	3307      	adds	r3, #7
 8002eda:	f023 0307 	bic.w	r3, r3, #7
 8002ede:	f103 0208 	add.w	r2, r3, #8
 8002ee2:	66ba      	str	r2, [r7, #104]	; 0x68
 8002ee4:	ed93 7b00 	vldr	d7, [r3]
 8002ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eea:	9302      	str	r3, [sp, #8]
 8002eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ef8:	eef0 0a67 	vmov.f32	s1, s15
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f00:	68b9      	ldr	r1, [r7, #8]
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f7ff f9d0 	bl	80022a8 <_etoa>
 8002f08:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	603b      	str	r3, [r7, #0]
        break;
 8002f10:	e0fb      	b.n	800310a <_vsnprintf+0x942>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8002f12:	2301      	movs	r3, #1
 8002f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8002f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10e      	bne.n	8002f3e <_vsnprintf+0x776>
          while (l++ < width) {
 8002f20:	e007      	b.n	8002f32 <_vsnprintf+0x76a>
            out(' ', buffer, idx++, maxlen);
 8002f22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f24:	1c53      	adds	r3, r2, #1
 8002f26:	647b      	str	r3, [r7, #68]	; 0x44
 8002f28:	68fc      	ldr	r4, [r7, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	2020      	movs	r0, #32
 8002f30:	47a0      	blx	r4
          while (l++ < width) {
 8002f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d8f1      	bhi.n	8002f22 <_vsnprintf+0x75a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8002f3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f40:	1d1a      	adds	r2, r3, #4
 8002f42:	66ba      	str	r2, [r7, #104]	; 0x68
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	b2d8      	uxtb	r0, r3
 8002f48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f4a:	1c53      	adds	r3, r2, #1
 8002f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f4e:	68fc      	ldr	r4, [r7, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8002f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00e      	beq.n	8002f7e <_vsnprintf+0x7b6>
          while (l++ < width) {
 8002f60:	e007      	b.n	8002f72 <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 8002f62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f64:	1c53      	adds	r3, r2, #1
 8002f66:	647b      	str	r3, [r7, #68]	; 0x44
 8002f68:	68fc      	ldr	r4, [r7, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	2020      	movs	r0, #32
 8002f70:	47a0      	blx	r4
          while (l++ < width) {
 8002f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d8f1      	bhi.n	8002f62 <_vsnprintf+0x79a>
          }
        }
        format++;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	3301      	adds	r3, #1
 8002f82:	603b      	str	r3, [r7, #0]
        break;
 8002f84:	e0c1      	b.n	800310a <_vsnprintf+0x942>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8002f86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f88:	1d1a      	adds	r2, r3, #4
 8002f8a:	66ba      	str	r2, [r7, #104]	; 0x68
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8002f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <_vsnprintf+0x7d2>
 8002f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f98:	e001      	b.n	8002f9e <_vsnprintf+0x7d6>
 8002f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fa2:	f7fe fcc5 	bl	8001930 <_strnlen_s>
 8002fa6:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8002fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <_vsnprintf+0x7f6>
          l = (l < precision ? l : precision);
 8002fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	bf28      	it	cs
 8002fba:	4613      	movcs	r3, r2
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8002fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d11a      	bne.n	8002ffe <_vsnprintf+0x836>
          while (l++ < width) {
 8002fc8:	e007      	b.n	8002fda <_vsnprintf+0x812>
            out(' ', buffer, idx++, maxlen);
 8002fca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fcc:	1c53      	adds	r3, r2, #1
 8002fce:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd0:	68fc      	ldr	r4, [r7, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	2020      	movs	r0, #32
 8002fd8:	47a0      	blx	r4
          while (l++ < width) {
 8002fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	637a      	str	r2, [r7, #52]	; 0x34
 8002fe0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d8f1      	bhi.n	8002fca <_vsnprintf+0x802>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002fe6:	e00a      	b.n	8002ffe <_vsnprintf+0x836>
          out(*(p++), buffer, idx++, maxlen);
 8002fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	63ba      	str	r2, [r7, #56]	; 0x38
 8002fee:	7818      	ldrb	r0, [r3, #0]
 8002ff0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ff2:	1c53      	adds	r3, r2, #1
 8002ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ff6:	68fc      	ldr	r4, [r7, #12]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68b9      	ldr	r1, [r7, #8]
 8002ffc:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d009      	beq.n	800301a <_vsnprintf+0x852>
 8003006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0eb      	beq.n	8002fe8 <_vsnprintf+0x820>
 8003010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003012:	1e5a      	subs	r2, r3, #1
 8003014:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1e6      	bne.n	8002fe8 <_vsnprintf+0x820>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800301a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00e      	beq.n	8003042 <_vsnprintf+0x87a>
          while (l++ < width) {
 8003024:	e007      	b.n	8003036 <_vsnprintf+0x86e>
            out(' ', buffer, idx++, maxlen);
 8003026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003028:	1c53      	adds	r3, r2, #1
 800302a:	647b      	str	r3, [r7, #68]	; 0x44
 800302c:	68fc      	ldr	r4, [r7, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	2020      	movs	r0, #32
 8003034:	47a0      	blx	r4
          while (l++ < width) {
 8003036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	637a      	str	r2, [r7, #52]	; 0x34
 800303c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800303e:	429a      	cmp	r2, r3
 8003040:	d8f1      	bhi.n	8003026 <_vsnprintf+0x85e>
          }
        }
        format++;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	3301      	adds	r3, #1
 8003046:	603b      	str	r3, [r7, #0]
        break;
 8003048:	e05f      	b.n	800310a <_vsnprintf+0x942>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800304a:	2308      	movs	r3, #8
 800304c:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800304e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003050:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8003054:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003056:	2300      	movs	r3, #0
 8003058:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 800305c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01e      	beq.n	80030a2 <_vsnprintf+0x8da>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003066:	1d1a      	adds	r2, r3, #4
 8003068:	66ba      	str	r2, [r7, #104]	; 0x68
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003074:	9108      	str	r1, [sp, #32]
 8003076:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003078:	9107      	str	r1, [sp, #28]
 800307a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800307c:	9106      	str	r1, [sp, #24]
 800307e:	f04f 0010 	mov.w	r0, #16
 8003082:	f04f 0100 	mov.w	r1, #0
 8003086:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800308a:	2100      	movs	r1, #0
 800308c:	9102      	str	r1, [sp, #8]
 800308e:	e9cd 2300 	strd	r2, r3, [sp]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f7fe fe34 	bl	8001d06 <_ntoa_long_long>
 800309e:	6478      	str	r0, [r7, #68]	; 0x44
 80030a0:	e016      	b.n	80030d0 <_vsnprintf+0x908>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80030a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030a4:	1d1a      	adds	r2, r3, #4
 80030a6:	66ba      	str	r2, [r7, #104]	; 0x68
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ae:	9305      	str	r3, [sp, #20]
 80030b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b2:	9304      	str	r3, [sp, #16]
 80030b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b6:	9303      	str	r3, [sp, #12]
 80030b8:	2310      	movs	r3, #16
 80030ba:	9302      	str	r3, [sp, #8]
 80030bc:	2300      	movs	r3, #0
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	9200      	str	r2, [sp, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f7fe fdb5 	bl	8001c38 <_ntoa_long>
 80030ce:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	603b      	str	r3, [r7, #0]
        break;
 80030d6:	e018      	b.n	800310a <_vsnprintf+0x942>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80030d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030da:	1c53      	adds	r3, r2, #1
 80030dc:	647b      	str	r3, [r7, #68]	; 0x44
 80030de:	68fc      	ldr	r4, [r7, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	2025      	movs	r0, #37	; 0x25
 80030e6:	47a0      	blx	r4
        format++;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	3301      	adds	r3, #1
 80030ec:	603b      	str	r3, [r7, #0]
        break;
 80030ee:	e00c      	b.n	800310a <_vsnprintf+0x942>

      default :
        out(*format, buffer, idx++, maxlen);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	7818      	ldrb	r0, [r3, #0]
 80030f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030f6:	1c53      	adds	r3, r2, #1
 80030f8:	647b      	str	r3, [r7, #68]	; 0x44
 80030fa:	68fc      	ldr	r4, [r7, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	47a0      	blx	r4
        format++;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	3301      	adds	r3, #1
 8003106:	603b      	str	r3, [r7, #0]
        break;
 8003108:	bf00      	nop
  while (*format)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f47f ab6b 	bne.w	80027ea <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003114:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	429a      	cmp	r2, r3
 800311a:	d302      	bcc.n	8003122 <_vsnprintf+0x95a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	1e5a      	subs	r2, r3, #1
 8003120:	e000      	b.n	8003124 <_vsnprintf+0x95c>
 8003122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003124:	68fc      	ldr	r4, [r7, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	2000      	movs	r0, #0
 800312c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800312e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003130:	4618      	mov	r0, r3
 8003132:	3758      	adds	r7, #88	; 0x58
 8003134:	46bd      	mov	sp, r7
 8003136:	bdb0      	pop	{r4, r5, r7, pc}

08003138 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8003138:	b40f      	push	{r0, r1, r2, r3}
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8003140:	f107 031c 	add.w	r3, r7, #28
 8003144:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8003146:	1d39      	adds	r1, r7, #4
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	f04f 32ff 	mov.w	r2, #4294967295
 8003152:	4806      	ldr	r0, [pc, #24]	; (800316c <printf_+0x34>)
 8003154:	f7ff fb38 	bl	80027c8 <_vsnprintf>
 8003158:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800315a:	68fb      	ldr	r3, [r7, #12]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003166:	b004      	add	sp, #16
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	0800190b 	.word	0x0800190b

08003170 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003176:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <HAL_MspInit+0x44>)
 8003178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317a:	4a0e      	ldr	r2, [pc, #56]	; (80031b4 <HAL_MspInit+0x44>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	6613      	str	r3, [r2, #96]	; 0x60
 8003182:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <HAL_MspInit+0x44>)
 8003184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <HAL_MspInit+0x44>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	4a08      	ldr	r2, [pc, #32]	; (80031b4 <HAL_MspInit+0x44>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003198:	6593      	str	r3, [r2, #88]	; 0x58
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <HAL_MspInit+0x44>)
 800319c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000

080031b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a50      	ldr	r2, [pc, #320]	; (8003318 <HAL_SPI_MspInit+0x160>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	f040 8099 	bne.w	800330e <HAL_SPI_MspInit+0x156>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031dc:	4b4f      	ldr	r3, [pc, #316]	; (800331c <HAL_SPI_MspInit+0x164>)
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	4a4e      	ldr	r2, [pc, #312]	; (800331c <HAL_SPI_MspInit+0x164>)
 80031e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e6:	6593      	str	r3, [r2, #88]	; 0x58
 80031e8:	4b4c      	ldr	r3, [pc, #304]	; (800331c <HAL_SPI_MspInit+0x164>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f4:	4b49      	ldr	r3, [pc, #292]	; (800331c <HAL_SPI_MspInit+0x164>)
 80031f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f8:	4a48      	ldr	r2, [pc, #288]	; (800331c <HAL_SPI_MspInit+0x164>)
 80031fa:	f043 0304 	orr.w	r3, r3, #4
 80031fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003200:	4b46      	ldr	r3, [pc, #280]	; (800331c <HAL_SPI_MspInit+0x164>)
 8003202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800320c:	4b43      	ldr	r3, [pc, #268]	; (800331c <HAL_SPI_MspInit+0x164>)
 800320e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003210:	4a42      	ldr	r2, [pc, #264]	; (800331c <HAL_SPI_MspInit+0x164>)
 8003212:	f043 0302 	orr.w	r3, r3, #2
 8003216:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003218:	4b40      	ldr	r3, [pc, #256]	; (800331c <HAL_SPI_MspInit+0x164>)
 800321a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003224:	230c      	movs	r3, #12
 8003226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	2302      	movs	r3, #2
 800322a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003230:	2303      	movs	r3, #3
 8003232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003234:	2305      	movs	r3, #5
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003238:	f107 0314 	add.w	r3, r7, #20
 800323c:	4619      	mov	r1, r3
 800323e:	4838      	ldr	r0, [pc, #224]	; (8003320 <HAL_SPI_MspInit+0x168>)
 8003240:	f000 fe66 	bl	8003f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324a:	2302      	movs	r3, #2
 800324c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003252:	2303      	movs	r3, #3
 8003254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003256:	2305      	movs	r3, #5
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800325a:	f107 0314 	add.w	r3, r7, #20
 800325e:	4619      	mov	r1, r3
 8003260:	4830      	ldr	r0, [pc, #192]	; (8003324 <HAL_SPI_MspInit+0x16c>)
 8003262:	f000 fe55 	bl	8003f10 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8003266:	4b30      	ldr	r3, [pc, #192]	; (8003328 <HAL_SPI_MspInit+0x170>)
 8003268:	4a30      	ldr	r2, [pc, #192]	; (800332c <HAL_SPI_MspInit+0x174>)
 800326a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 800326c:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <HAL_SPI_MspInit+0x170>)
 800326e:	2201      	movs	r2, #1
 8003270:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003272:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <HAL_SPI_MspInit+0x170>)
 8003274:	2200      	movs	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <HAL_SPI_MspInit+0x170>)
 800327a:	2200      	movs	r2, #0
 800327c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800327e:	4b2a      	ldr	r3, [pc, #168]	; (8003328 <HAL_SPI_MspInit+0x170>)
 8003280:	2280      	movs	r2, #128	; 0x80
 8003282:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003284:	4b28      	ldr	r3, [pc, #160]	; (8003328 <HAL_SPI_MspInit+0x170>)
 8003286:	2200      	movs	r2, #0
 8003288:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800328a:	4b27      	ldr	r3, [pc, #156]	; (8003328 <HAL_SPI_MspInit+0x170>)
 800328c:	2200      	movs	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003290:	4b25      	ldr	r3, [pc, #148]	; (8003328 <HAL_SPI_MspInit+0x170>)
 8003292:	2200      	movs	r2, #0
 8003294:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003296:	4b24      	ldr	r3, [pc, #144]	; (8003328 <HAL_SPI_MspInit+0x170>)
 8003298:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800329c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800329e:	4822      	ldr	r0, [pc, #136]	; (8003328 <HAL_SPI_MspInit+0x170>)
 80032a0:	f000 fc3e 	bl	8003b20 <HAL_DMA_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_SPI_MspInit+0xf6>
    {
      Error_Handler();
 80032aa:	f7fe fb1b 	bl	80018e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1d      	ldr	r2, [pc, #116]	; (8003328 <HAL_SPI_MspInit+0x170>)
 80032b2:	659a      	str	r2, [r3, #88]	; 0x58
 80032b4:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <HAL_SPI_MspInit+0x170>)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_SPI_MspInit+0x178>)
 80032bc:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <HAL_SPI_MspInit+0x17c>)
 80032be:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80032c0:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_SPI_MspInit+0x178>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032c6:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <HAL_SPI_MspInit+0x178>)
 80032c8:	2210      	movs	r2, #16
 80032ca:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032cc:	4b18      	ldr	r3, [pc, #96]	; (8003330 <HAL_SPI_MspInit+0x178>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032d2:	4b17      	ldr	r3, [pc, #92]	; (8003330 <HAL_SPI_MspInit+0x178>)
 80032d4:	2280      	movs	r2, #128	; 0x80
 80032d6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032d8:	4b15      	ldr	r3, [pc, #84]	; (8003330 <HAL_SPI_MspInit+0x178>)
 80032da:	2200      	movs	r2, #0
 80032dc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032de:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_SPI_MspInit+0x178>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <HAL_SPI_MspInit+0x178>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <HAL_SPI_MspInit+0x178>)
 80032ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80032f2:	480f      	ldr	r0, [pc, #60]	; (8003330 <HAL_SPI_MspInit+0x178>)
 80032f4:	f000 fc14 	bl	8003b20 <HAL_DMA_Init>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 80032fe:	f7fe faf1 	bl	80018e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <HAL_SPI_MspInit+0x178>)
 8003306:	655a      	str	r2, [r3, #84]	; 0x54
 8003308:	4a09      	ldr	r2, [pc, #36]	; (8003330 <HAL_SPI_MspInit+0x178>)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800330e:	bf00      	nop
 8003310:	3728      	adds	r7, #40	; 0x28
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40003800 	.word	0x40003800
 800331c:	40021000 	.word	0x40021000
 8003320:	48000800 	.word	0x48000800
 8003324:	48000400 	.word	0x48000400
 8003328:	200002a0 	.word	0x200002a0
 800332c:	40020044 	.word	0x40020044
 8003330:	20000420 	.word	0x20000420
 8003334:	40020058 	.word	0x40020058

08003338 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a23      	ldr	r2, [pc, #140]	; (80033d4 <HAL_TIM_Base_MspInit+0x9c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d10c      	bne.n	8003364 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800334a:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <HAL_TIM_Base_MspInit+0xa0>)
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	4a22      	ldr	r2, [pc, #136]	; (80033d8 <HAL_TIM_Base_MspInit+0xa0>)
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	6593      	str	r3, [r2, #88]	; 0x58
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_TIM_Base_MspInit+0xa0>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003362:	e032      	b.n	80033ca <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM16)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <HAL_TIM_Base_MspInit+0xa4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d114      	bne.n	8003398 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800336e:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <HAL_TIM_Base_MspInit+0xa0>)
 8003370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003372:	4a19      	ldr	r2, [pc, #100]	; (80033d8 <HAL_TIM_Base_MspInit+0xa0>)
 8003374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003378:	6613      	str	r3, [r2, #96]	; 0x60
 800337a:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <HAL_TIM_Base_MspInit+0xa0>)
 800337c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003386:	2200      	movs	r2, #0
 8003388:	2100      	movs	r1, #0
 800338a:	2019      	movs	r0, #25
 800338c:	f000 fb91 	bl	8003ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003390:	2019      	movs	r0, #25
 8003392:	f000 fbaa 	bl	8003aea <HAL_NVIC_EnableIRQ>
}
 8003396:	e018      	b.n	80033ca <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM17)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a10      	ldr	r2, [pc, #64]	; (80033e0 <HAL_TIM_Base_MspInit+0xa8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d113      	bne.n	80033ca <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <HAL_TIM_Base_MspInit+0xa0>)
 80033a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a6:	4a0c      	ldr	r2, [pc, #48]	; (80033d8 <HAL_TIM_Base_MspInit+0xa0>)
 80033a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ac:	6613      	str	r3, [r2, #96]	; 0x60
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <HAL_TIM_Base_MspInit+0xa0>)
 80033b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80033ba:	2200      	movs	r2, #0
 80033bc:	2100      	movs	r1, #0
 80033be:	201a      	movs	r0, #26
 80033c0:	f000 fb77 	bl	8003ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80033c4:	201a      	movs	r0, #26
 80033c6:	f000 fb90 	bl	8003aea <HAL_NVIC_EnableIRQ>
}
 80033ca:	bf00      	nop
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40000400 	.word	0x40000400
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40014400 	.word	0x40014400
 80033e0:	40014800 	.word	0x40014800

080033e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ec:	f107 030c 	add.w	r3, r7, #12
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a11      	ldr	r2, [pc, #68]	; (8003448 <HAL_TIM_MspPostInit+0x64>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d11c      	bne.n	8003440 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003406:	4b11      	ldr	r3, [pc, #68]	; (800344c <HAL_TIM_MspPostInit+0x68>)
 8003408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340a:	4a10      	ldr	r2, [pc, #64]	; (800344c <HAL_TIM_MspPostInit+0x68>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003412:	4b0e      	ldr	r3, [pc, #56]	; (800344c <HAL_TIM_MspPostInit+0x68>)
 8003414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800341e:	2340      	movs	r3, #64	; 0x40
 8003420:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003422:	2302      	movs	r3, #2
 8003424:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342a:	2300      	movs	r3, #0
 800342c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800342e:	2302      	movs	r3, #2
 8003430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003432:	f107 030c 	add.w	r3, r7, #12
 8003436:	4619      	mov	r1, r3
 8003438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800343c:	f000 fd68 	bl	8003f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003440:	bf00      	nop
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40000400 	.word	0x40000400
 800344c:	40021000 	.word	0x40021000

08003450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a17      	ldr	r2, [pc, #92]	; (80034cc <HAL_UART_MspInit+0x7c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d128      	bne.n	80034c4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <HAL_UART_MspInit+0x80>)
 8003474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003476:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <HAL_UART_MspInit+0x80>)
 8003478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800347c:	6593      	str	r3, [r2, #88]	; 0x58
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <HAL_UART_MspInit+0x80>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_UART_MspInit+0x80>)
 800348c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348e:	4a10      	ldr	r2, [pc, #64]	; (80034d0 <HAL_UART_MspInit+0x80>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_UART_MspInit+0x80>)
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80034a2:	230c      	movs	r3, #12
 80034a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	2302      	movs	r3, #2
 80034a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ae:	2303      	movs	r3, #3
 80034b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034b2:	2307      	movs	r3, #7
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4619      	mov	r1, r3
 80034bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c0:	f000 fd26 	bl	8003f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034c4:	bf00      	nop
 80034c6:	3728      	adds	r7, #40	; 0x28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40004400 	.word	0x40004400
 80034d0:	40021000 	.word	0x40021000

080034d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034d8:	e7fe      	b.n	80034d8 <NMI_Handler+0x4>

080034da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034da:	b480      	push	{r7}
 80034dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034de:	e7fe      	b.n	80034de <HardFault_Handler+0x4>

080034e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034e4:	e7fe      	b.n	80034e4 <MemManage_Handler+0x4>

080034e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ea:	e7fe      	b.n	80034ea <BusFault_Handler+0x4>

080034ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034f0:	e7fe      	b.n	80034f0 <UsageFault_Handler+0x4>

080034f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003504:	bf00      	nop
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800350e:	b480      	push	{r7}
 8003510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003520:	f000 f9a8 	bl	8003874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003524:	bf00      	nop
 8003526:	bd80      	pop	{r7, pc}

08003528 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800352c:	4802      	ldr	r0, [pc, #8]	; (8003538 <DMA1_Channel4_IRQHandler+0x10>)
 800352e:	f000 fc0f 	bl	8003d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	200002a0 	.word	0x200002a0

0800353c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003540:	4802      	ldr	r0, [pc, #8]	; (800354c <DMA1_Channel5_IRQHandler+0x10>)
 8003542:	f000 fc05 	bl	8003d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000420 	.word	0x20000420

08003550 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003554:	4802      	ldr	r0, [pc, #8]	; (8003560 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003556:	f003 f8b7 	bl	80066c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000468 	.word	0x20000468

08003564 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003568:	4802      	ldr	r0, [pc, #8]	; (8003574 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800356a:	f003 f8ad 	bl	80066c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	200002e8 	.word	0x200002e8

08003578 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
	return 1;
 800357c:	2301      	movs	r3, #1
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <_kill>:

int _kill(int pid, int sig)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003592:	f004 fd61 	bl	8008058 <__errno>
 8003596:	4603      	mov	r3, r0
 8003598:	2216      	movs	r2, #22
 800359a:	601a      	str	r2, [r3, #0]
	return -1;
 800359c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_exit>:

void _exit (int status)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035b0:	f04f 31ff 	mov.w	r1, #4294967295
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff ffe7 	bl	8003588 <_kill>
	while (1) {}		/* Make sure we hang here */
 80035ba:	e7fe      	b.n	80035ba <_exit+0x12>

080035bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	e00a      	b.n	80035e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035ce:	f3af 8000 	nop.w
 80035d2:	4601      	mov	r1, r0
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	60ba      	str	r2, [r7, #8]
 80035da:	b2ca      	uxtb	r2, r1
 80035dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	3301      	adds	r3, #1
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	dbf0      	blt.n	80035ce <_read+0x12>
	}

return len;
 80035ec:	687b      	ldr	r3, [r7, #4]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e009      	b.n	800361c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	60ba      	str	r2, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	3301      	adds	r3, #1
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	429a      	cmp	r2, r3
 8003622:	dbf1      	blt.n	8003608 <_write+0x12>
	}
	return len;
 8003624:	687b      	ldr	r3, [r7, #4]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <_close>:

int _close(int file)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
	return -1;
 8003636:	f04f 33ff 	mov.w	r3, #4294967295
}
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003656:	605a      	str	r2, [r3, #4]
	return 0;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <_isatty>:

int _isatty(int file)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
	return 1;
 800366e:	2301      	movs	r3, #1
}
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
	return 0;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036a0:	4a14      	ldr	r2, [pc, #80]	; (80036f4 <_sbrk+0x5c>)
 80036a2:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <_sbrk+0x60>)
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036ac:	4b13      	ldr	r3, [pc, #76]	; (80036fc <_sbrk+0x64>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <_sbrk+0x64>)
 80036b6:	4a12      	ldr	r2, [pc, #72]	; (8003700 <_sbrk+0x68>)
 80036b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036ba:	4b10      	ldr	r3, [pc, #64]	; (80036fc <_sbrk+0x64>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d207      	bcs.n	80036d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036c8:	f004 fcc6 	bl	8008058 <__errno>
 80036cc:	4603      	mov	r3, r0
 80036ce:	220c      	movs	r2, #12
 80036d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295
 80036d6:	e009      	b.n	80036ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <_sbrk+0x64>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036de:	4b07      	ldr	r3, [pc, #28]	; (80036fc <_sbrk+0x64>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4413      	add	r3, r2
 80036e6:	4a05      	ldr	r2, [pc, #20]	; (80036fc <_sbrk+0x64>)
 80036e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036ea:	68fb      	ldr	r3, [r7, #12]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20018000 	.word	0x20018000
 80036f8:	00000400 	.word	0x00000400
 80036fc:	20000200 	.word	0x20000200
 8003700:	200004c8 	.word	0x200004c8

08003704 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003708:	4b15      	ldr	r3, [pc, #84]	; (8003760 <SystemInit+0x5c>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	4a14      	ldr	r2, [pc, #80]	; (8003760 <SystemInit+0x5c>)
 8003710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003718:	4b12      	ldr	r3, [pc, #72]	; (8003764 <SystemInit+0x60>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a11      	ldr	r2, [pc, #68]	; (8003764 <SystemInit+0x60>)
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003724:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <SystemInit+0x60>)
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800372a:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <SystemInit+0x60>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a0d      	ldr	r2, [pc, #52]	; (8003764 <SystemInit+0x60>)
 8003730:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003734:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003738:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <SystemInit+0x60>)
 800373c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003740:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003742:	4b08      	ldr	r3, [pc, #32]	; (8003764 <SystemInit+0x60>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a07      	ldr	r2, [pc, #28]	; (8003764 <SystemInit+0x60>)
 8003748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800374e:	4b05      	ldr	r3, [pc, #20]	; (8003764 <SystemInit+0x60>)
 8003750:	2200      	movs	r2, #0
 8003752:	619a      	str	r2, [r3, #24]
}
 8003754:	bf00      	nop
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	e000ed00 	.word	0xe000ed00
 8003764:	40021000 	.word	0x40021000

08003768 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003768:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800376c:	f7ff ffca 	bl	8003704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003770:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003772:	e003      	b.n	800377c <LoopCopyDataInit>

08003774 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003776:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003778:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800377a:	3104      	adds	r1, #4

0800377c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800377c:	480a      	ldr	r0, [pc, #40]	; (80037a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <LoopForever+0xe>)
	adds	r2, r0, r1
 8003780:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003782:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003784:	d3f6      	bcc.n	8003774 <CopyDataInit>
	ldr	r2, =_sbss
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003788:	e002      	b.n	8003790 <LoopFillZerobss>

0800378a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800378a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800378c:	f842 3b04 	str.w	r3, [r2], #4

08003790 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003790:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <LoopForever+0x16>)
	cmp	r2, r3
 8003792:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003794:	d3f9      	bcc.n	800378a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003796:	f004 fc65 	bl	8008064 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800379a:	f7fd fd6f 	bl	800127c <main>

0800379e <LoopForever>:

LoopForever:
    b LoopForever
 800379e:	e7fe      	b.n	800379e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80037a0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80037a4:	0800afcc 	.word	0x0800afcc
	ldr	r0, =_sdata
 80037a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80037ac:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80037b0:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 80037b4:	200004c8 	.word	0x200004c8

080037b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037b8:	e7fe      	b.n	80037b8 <ADC1_2_IRQHandler>
	...

080037bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c6:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <HAL_Init+0x3c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a0b      	ldr	r2, [pc, #44]	; (80037f8 <HAL_Init+0x3c>)
 80037cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037d2:	2003      	movs	r0, #3
 80037d4:	f000 f962 	bl	8003a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037d8:	2000      	movs	r0, #0
 80037da:	f000 f80f 	bl	80037fc <HAL_InitTick>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	71fb      	strb	r3, [r7, #7]
 80037e8:	e001      	b.n	80037ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037ea:	f7ff fcc1 	bl	8003170 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037ee:	79fb      	ldrb	r3, [r7, #7]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40022000 	.word	0x40022000

080037fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003808:	4b17      	ldr	r3, [pc, #92]	; (8003868 <HAL_InitTick+0x6c>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d023      	beq.n	8003858 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003810:	4b16      	ldr	r3, [pc, #88]	; (800386c <HAL_InitTick+0x70>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4b14      	ldr	r3, [pc, #80]	; (8003868 <HAL_InitTick+0x6c>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	4619      	mov	r1, r3
 800381a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800381e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	4618      	mov	r0, r3
 8003828:	f000 f96d 	bl	8003b06 <HAL_SYSTICK_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10f      	bne.n	8003852 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b0f      	cmp	r3, #15
 8003836:	d809      	bhi.n	800384c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003838:	2200      	movs	r2, #0
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
 8003840:	f000 f937 	bl	8003ab2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003844:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <HAL_InitTick+0x74>)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e007      	b.n	800385c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
 8003850:	e004      	b.n	800385c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
 8003856:	e001      	b.n	800385c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800385c:	7bfb      	ldrb	r3, [r7, #15]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000008 	.word	0x20000008
 800386c:	20000000 	.word	0x20000000
 8003870:	20000004 	.word	0x20000004

08003874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003878:	4b06      	ldr	r3, [pc, #24]	; (8003894 <HAL_IncTick+0x20>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <HAL_IncTick+0x24>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4413      	add	r3, r2
 8003884:	4a04      	ldr	r2, [pc, #16]	; (8003898 <HAL_IncTick+0x24>)
 8003886:	6013      	str	r3, [r2, #0]
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000008 	.word	0x20000008
 8003898:	200004b4 	.word	0x200004b4

0800389c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return uwTick;
 80038a0:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <HAL_GetTick+0x14>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	200004b4 	.word	0x200004b4

080038b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038bc:	f7ff ffee 	bl	800389c <HAL_GetTick>
 80038c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d005      	beq.n	80038da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_Delay+0x44>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4413      	add	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038da:	bf00      	nop
 80038dc:	f7ff ffde 	bl	800389c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d8f7      	bhi.n	80038dc <HAL_Delay+0x28>
  {
  }
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000008 	.word	0x20000008

080038fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003918:	4013      	ands	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800392c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800392e:	4a04      	ldr	r2, [pc, #16]	; (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	60d3      	str	r3, [r2, #12]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003948:	4b04      	ldr	r3, [pc, #16]	; (800395c <__NVIC_GetPriorityGrouping+0x18>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	0a1b      	lsrs	r3, r3, #8
 800394e:	f003 0307 	and.w	r3, r3, #7
}
 8003952:	4618      	mov	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396e:	2b00      	cmp	r3, #0
 8003970:	db0b      	blt.n	800398a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	f003 021f 	and.w	r2, r3, #31
 8003978:	4907      	ldr	r1, [pc, #28]	; (8003998 <__NVIC_EnableIRQ+0x38>)
 800397a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	2001      	movs	r0, #1
 8003982:	fa00 f202 	lsl.w	r2, r0, r2
 8003986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000e100 	.word	0xe000e100

0800399c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	db0a      	blt.n	80039c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	490c      	ldr	r1, [pc, #48]	; (80039e8 <__NVIC_SetPriority+0x4c>)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	0112      	lsls	r2, r2, #4
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	440b      	add	r3, r1
 80039c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039c4:	e00a      	b.n	80039dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4908      	ldr	r1, [pc, #32]	; (80039ec <__NVIC_SetPriority+0x50>)
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	3b04      	subs	r3, #4
 80039d4:	0112      	lsls	r2, r2, #4
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	440b      	add	r3, r1
 80039da:	761a      	strb	r2, [r3, #24]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	e000e100 	.word	0xe000e100
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b089      	sub	sp, #36	; 0x24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f1c3 0307 	rsb	r3, r3, #7
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	bf28      	it	cs
 8003a0e:	2304      	movcs	r3, #4
 8003a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3304      	adds	r3, #4
 8003a16:	2b06      	cmp	r3, #6
 8003a18:	d902      	bls.n	8003a20 <NVIC_EncodePriority+0x30>
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3b03      	subs	r3, #3
 8003a1e:	e000      	b.n	8003a22 <NVIC_EncodePriority+0x32>
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a24:	f04f 32ff 	mov.w	r2, #4294967295
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	401a      	ands	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a38:	f04f 31ff 	mov.w	r1, #4294967295
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a42:	43d9      	mvns	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a48:	4313      	orrs	r3, r2
         );
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3724      	adds	r7, #36	; 0x24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
	...

08003a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a68:	d301      	bcc.n	8003a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e00f      	b.n	8003a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <SysTick_Config+0x40>)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a76:	210f      	movs	r1, #15
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	f7ff ff8e 	bl	800399c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <SysTick_Config+0x40>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a86:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <SysTick_Config+0x40>)
 8003a88:	2207      	movs	r2, #7
 8003a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	e000e010 	.word	0xe000e010

08003a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff ff29 	bl	80038fc <__NVIC_SetPriorityGrouping>
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b086      	sub	sp, #24
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	4603      	mov	r3, r0
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
 8003abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ac4:	f7ff ff3e 	bl	8003944 <__NVIC_GetPriorityGrouping>
 8003ac8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	6978      	ldr	r0, [r7, #20]
 8003ad0:	f7ff ff8e 	bl	80039f0 <NVIC_EncodePriority>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ada:	4611      	mov	r1, r2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff ff5d 	bl	800399c <__NVIC_SetPriority>
}
 8003ae2:	bf00      	nop
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	4603      	mov	r3, r0
 8003af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff ff31 	bl	8003960 <__NVIC_EnableIRQ>
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff ffa2 	bl	8003a58 <SysTick_Config>
 8003b14:	4603      	mov	r3, r0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e098      	b.n	8003c64 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	4b4d      	ldr	r3, [pc, #308]	; (8003c70 <HAL_DMA_Init+0x150>)
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d80f      	bhi.n	8003b5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	4b4b      	ldr	r3, [pc, #300]	; (8003c74 <HAL_DMA_Init+0x154>)
 8003b46:	4413      	add	r3, r2
 8003b48:	4a4b      	ldr	r2, [pc, #300]	; (8003c78 <HAL_DMA_Init+0x158>)
 8003b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	009a      	lsls	r2, r3, #2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a48      	ldr	r2, [pc, #288]	; (8003c7c <HAL_DMA_Init+0x15c>)
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40
 8003b5c:	e00e      	b.n	8003b7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	4b46      	ldr	r3, [pc, #280]	; (8003c80 <HAL_DMA_Init+0x160>)
 8003b66:	4413      	add	r3, r2
 8003b68:	4a43      	ldr	r2, [pc, #268]	; (8003c78 <HAL_DMA_Init+0x158>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	009a      	lsls	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a42      	ldr	r2, [pc, #264]	; (8003c84 <HAL_DMA_Init+0x164>)
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bd6:	d039      	beq.n	8003c4c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	4a27      	ldr	r2, [pc, #156]	; (8003c7c <HAL_DMA_Init+0x15c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d11a      	bne.n	8003c18 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003be2:	4b29      	ldr	r3, [pc, #164]	; (8003c88 <HAL_DMA_Init+0x168>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	f003 031c 	and.w	r3, r3, #28
 8003bee:	210f      	movs	r1, #15
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	4924      	ldr	r1, [pc, #144]	; (8003c88 <HAL_DMA_Init+0x168>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003bfc:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <HAL_DMA_Init+0x168>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	f003 031c 	and.w	r3, r3, #28
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	491d      	ldr	r1, [pc, #116]	; (8003c88 <HAL_DMA_Init+0x168>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]
 8003c16:	e019      	b.n	8003c4c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c18:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <HAL_DMA_Init+0x16c>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c20:	f003 031c 	and.w	r3, r3, #28
 8003c24:	210f      	movs	r1, #15
 8003c26:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	4917      	ldr	r1, [pc, #92]	; (8003c8c <HAL_DMA_Init+0x16c>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c32:	4b16      	ldr	r3, [pc, #88]	; (8003c8c <HAL_DMA_Init+0x16c>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6859      	ldr	r1, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	f003 031c 	and.w	r3, r3, #28
 8003c42:	fa01 f303 	lsl.w	r3, r1, r3
 8003c46:	4911      	ldr	r1, [pc, #68]	; (8003c8c <HAL_DMA_Init+0x16c>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	40020407 	.word	0x40020407
 8003c74:	bffdfff8 	.word	0xbffdfff8
 8003c78:	cccccccd 	.word	0xcccccccd
 8003c7c:	40020000 	.word	0x40020000
 8003c80:	bffdfbf8 	.word	0xbffdfbf8
 8003c84:	40020400 	.word	0x40020400
 8003c88:	400200a8 	.word	0x400200a8
 8003c8c:	400204a8 	.word	0x400204a8

08003c90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_DMA_Start_IT+0x20>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e04b      	b.n	8003d48 <HAL_DMA_Start_IT+0xb8>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d13a      	bne.n	8003d3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0201 	bic.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f8e0 	bl	8003eae <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 020e 	orr.w	r2, r2, #14
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	e00f      	b.n	8003d28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0204 	bic.w	r2, r2, #4
 8003d16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 020a 	orr.w	r2, r2, #10
 8003d26:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	e005      	b.n	8003d46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d42:	2302      	movs	r3, #2
 8003d44:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	f003 031c 	and.w	r3, r3, #28
 8003d70:	2204      	movs	r2, #4
 8003d72:	409a      	lsls	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d026      	beq.n	8003dca <HAL_DMA_IRQHandler+0x7a>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d021      	beq.n	8003dca <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d107      	bne.n	8003da4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0204 	bic.w	r2, r2, #4
 8003da2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	f003 021c 	and.w	r2, r3, #28
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	2104      	movs	r1, #4
 8003db2:	fa01 f202 	lsl.w	r2, r1, r2
 8003db6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d071      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003dc8:	e06c      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	f003 031c 	and.w	r3, r3, #28
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d02e      	beq.n	8003e3c <HAL_DMA_IRQHandler+0xec>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d029      	beq.n	8003e3c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10b      	bne.n	8003e0e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 020a 	bic.w	r2, r2, #10
 8003e04:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	f003 021c 	and.w	r2, r3, #28
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2102      	movs	r1, #2
 8003e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e20:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d038      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e3a:	e033      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e40:	f003 031c 	and.w	r3, r3, #28
 8003e44:	2208      	movs	r2, #8
 8003e46:	409a      	lsls	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d02a      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x156>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d025      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 020e 	bic.w	r2, r2, #14
 8003e68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	f003 021c 	and.w	r2, r3, #28
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	2101      	movs	r1, #1
 8003e78:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d004      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
}
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec0:	f003 021c 	and.w	r2, r3, #28
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	2101      	movs	r1, #1
 8003eca:	fa01 f202 	lsl.w	r2, r1, r2
 8003ece:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d108      	bne.n	8003ef2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ef0:	e007      	b.n	8003f02 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	60da      	str	r2, [r3, #12]
}
 8003f02:	bf00      	nop
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
	...

08003f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f1e:	e17f      	b.n	8004220 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	2101      	movs	r1, #1
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8171 	beq.w	800421a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d00b      	beq.n	8003f58 <HAL_GPIO_Init+0x48>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d007      	beq.n	8003f58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f4c:	2b11      	cmp	r3, #17
 8003f4e:	d003      	beq.n	8003f58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b12      	cmp	r3, #18
 8003f56:	d130      	bne.n	8003fba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2203      	movs	r2, #3
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f8e:	2201      	movs	r2, #1
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	43db      	mvns	r3, r3
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	091b      	lsrs	r3, r3, #4
 8003fa4:	f003 0201 	and.w	r2, r3, #1
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d118      	bne.n	8003ff8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003fcc:	2201      	movs	r2, #1
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	08db      	lsrs	r3, r3, #3
 8003fe2:	f003 0201 	and.w	r2, r3, #1
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	2203      	movs	r2, #3
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4013      	ands	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d003      	beq.n	8004038 <HAL_GPIO_Init+0x128>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b12      	cmp	r3, #18
 8004036:	d123      	bne.n	8004080 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	08da      	lsrs	r2, r3, #3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3208      	adds	r2, #8
 8004040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004044:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	220f      	movs	r2, #15
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	08da      	lsrs	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3208      	adds	r2, #8
 800407a:	6939      	ldr	r1, [r7, #16]
 800407c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	2203      	movs	r2, #3
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	43db      	mvns	r3, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 0203 	and.w	r2, r3, #3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80ac 	beq.w	800421a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040c2:	4b5f      	ldr	r3, [pc, #380]	; (8004240 <HAL_GPIO_Init+0x330>)
 80040c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c6:	4a5e      	ldr	r2, [pc, #376]	; (8004240 <HAL_GPIO_Init+0x330>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	6613      	str	r3, [r2, #96]	; 0x60
 80040ce:	4b5c      	ldr	r3, [pc, #368]	; (8004240 <HAL_GPIO_Init+0x330>)
 80040d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040da:	4a5a      	ldr	r2, [pc, #360]	; (8004244 <HAL_GPIO_Init+0x334>)
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	089b      	lsrs	r3, r3, #2
 80040e0:	3302      	adds	r3, #2
 80040e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	220f      	movs	r2, #15
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43db      	mvns	r3, r3
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4013      	ands	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004104:	d025      	beq.n	8004152 <HAL_GPIO_Init+0x242>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a4f      	ldr	r2, [pc, #316]	; (8004248 <HAL_GPIO_Init+0x338>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01f      	beq.n	800414e <HAL_GPIO_Init+0x23e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a4e      	ldr	r2, [pc, #312]	; (800424c <HAL_GPIO_Init+0x33c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d019      	beq.n	800414a <HAL_GPIO_Init+0x23a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a4d      	ldr	r2, [pc, #308]	; (8004250 <HAL_GPIO_Init+0x340>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_GPIO_Init+0x236>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a4c      	ldr	r2, [pc, #304]	; (8004254 <HAL_GPIO_Init+0x344>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00d      	beq.n	8004142 <HAL_GPIO_Init+0x232>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a4b      	ldr	r2, [pc, #300]	; (8004258 <HAL_GPIO_Init+0x348>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d007      	beq.n	800413e <HAL_GPIO_Init+0x22e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a4a      	ldr	r2, [pc, #296]	; (800425c <HAL_GPIO_Init+0x34c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d101      	bne.n	800413a <HAL_GPIO_Init+0x22a>
 8004136:	2306      	movs	r3, #6
 8004138:	e00c      	b.n	8004154 <HAL_GPIO_Init+0x244>
 800413a:	2307      	movs	r3, #7
 800413c:	e00a      	b.n	8004154 <HAL_GPIO_Init+0x244>
 800413e:	2305      	movs	r3, #5
 8004140:	e008      	b.n	8004154 <HAL_GPIO_Init+0x244>
 8004142:	2304      	movs	r3, #4
 8004144:	e006      	b.n	8004154 <HAL_GPIO_Init+0x244>
 8004146:	2303      	movs	r3, #3
 8004148:	e004      	b.n	8004154 <HAL_GPIO_Init+0x244>
 800414a:	2302      	movs	r3, #2
 800414c:	e002      	b.n	8004154 <HAL_GPIO_Init+0x244>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <HAL_GPIO_Init+0x244>
 8004152:	2300      	movs	r3, #0
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	f002 0203 	and.w	r2, r2, #3
 800415a:	0092      	lsls	r2, r2, #2
 800415c:	4093      	lsls	r3, r2
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004164:	4937      	ldr	r1, [pc, #220]	; (8004244 <HAL_GPIO_Init+0x334>)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	3302      	adds	r3, #2
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004172:	4b3b      	ldr	r3, [pc, #236]	; (8004260 <HAL_GPIO_Init+0x350>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	43db      	mvns	r3, r3
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4013      	ands	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004196:	4a32      	ldr	r2, [pc, #200]	; (8004260 <HAL_GPIO_Init+0x350>)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800419c:	4b30      	ldr	r3, [pc, #192]	; (8004260 <HAL_GPIO_Init+0x350>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041c0:	4a27      	ldr	r2, [pc, #156]	; (8004260 <HAL_GPIO_Init+0x350>)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041c6:	4b26      	ldr	r3, [pc, #152]	; (8004260 <HAL_GPIO_Init+0x350>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	43db      	mvns	r3, r3
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4013      	ands	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041ea:	4a1d      	ldr	r2, [pc, #116]	; (8004260 <HAL_GPIO_Init+0x350>)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041f0:	4b1b      	ldr	r3, [pc, #108]	; (8004260 <HAL_GPIO_Init+0x350>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4013      	ands	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004214:	4a12      	ldr	r2, [pc, #72]	; (8004260 <HAL_GPIO_Init+0x350>)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	3301      	adds	r3, #1
 800421e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	fa22 f303 	lsr.w	r3, r2, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	f47f ae78 	bne.w	8003f20 <HAL_GPIO_Init+0x10>
  }
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40021000 	.word	0x40021000
 8004244:	40010000 	.word	0x40010000
 8004248:	48000400 	.word	0x48000400
 800424c:	48000800 	.word	0x48000800
 8004250:	48000c00 	.word	0x48000c00
 8004254:	48001000 	.word	0x48001000
 8004258:	48001400 	.word	0x48001400
 800425c:	48001800 	.word	0x48001800
 8004260:	40010400 	.word	0x40010400

08004264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	807b      	strh	r3, [r7, #2]
 8004270:	4613      	mov	r3, r2
 8004272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004274:	787b      	ldrb	r3, [r7, #1]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800427a:	887a      	ldrh	r2, [r7, #2]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004280:	e002      	b.n	8004288 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004282:	887a      	ldrh	r2, [r7, #2]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004298:	4b04      	ldr	r3, [pc, #16]	; (80042ac <HAL_PWREx_GetVoltageRange+0x18>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40007000 	.word	0x40007000

080042b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042be:	d130      	bne.n	8004322 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042c0:	4b23      	ldr	r3, [pc, #140]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042cc:	d038      	beq.n	8004340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042d6:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042de:	4b1d      	ldr	r3, [pc, #116]	; (8004354 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2232      	movs	r2, #50	; 0x32
 80042e4:	fb02 f303 	mul.w	r3, r2, r3
 80042e8:	4a1b      	ldr	r2, [pc, #108]	; (8004358 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	0c9b      	lsrs	r3, r3, #18
 80042f0:	3301      	adds	r3, #1
 80042f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042f4:	e002      	b.n	80042fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042fc:	4b14      	ldr	r3, [pc, #80]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004308:	d102      	bne.n	8004310 <HAL_PWREx_ControlVoltageScaling+0x60>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1f2      	bne.n	80042f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004310:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431c:	d110      	bne.n	8004340 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e00f      	b.n	8004342 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800432a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432e:	d007      	beq.n	8004340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004330:	4b07      	ldr	r3, [pc, #28]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004338:	4a05      	ldr	r2, [pc, #20]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800433a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800433e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40007000 	.word	0x40007000
 8004354:	20000000 	.word	0x20000000
 8004358:	431bde83 	.word	0x431bde83

0800435c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e3d4      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800436e:	4ba1      	ldr	r3, [pc, #644]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 030c 	and.w	r3, r3, #12
 8004376:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004378:	4b9e      	ldr	r3, [pc, #632]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 80e4 	beq.w	8004558 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_RCC_OscConfig+0x4a>
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	2b0c      	cmp	r3, #12
 800439a:	f040 808b 	bne.w	80044b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	f040 8087 	bne.w	80044b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043a6:	4b93      	ldr	r3, [pc, #588]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <HAL_RCC_OscConfig+0x62>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e3ac      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1a      	ldr	r2, [r3, #32]
 80043c2:	4b8c      	ldr	r3, [pc, #560]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d004      	beq.n	80043d8 <HAL_RCC_OscConfig+0x7c>
 80043ce:	4b89      	ldr	r3, [pc, #548]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d6:	e005      	b.n	80043e4 <HAL_RCC_OscConfig+0x88>
 80043d8:	4b86      	ldr	r3, [pc, #536]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80043da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d223      	bcs.n	8004430 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fd41 	bl	8004e74 <RCC_SetFlashLatencyFromMSIRange>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e38d      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043fc:	4b7d      	ldr	r3, [pc, #500]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a7c      	ldr	r2, [pc, #496]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 8004402:	f043 0308 	orr.w	r3, r3, #8
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	4b7a      	ldr	r3, [pc, #488]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	4977      	ldr	r1, [pc, #476]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 8004416:	4313      	orrs	r3, r2
 8004418:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800441a:	4b76      	ldr	r3, [pc, #472]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	4972      	ldr	r1, [pc, #456]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 800442a:	4313      	orrs	r3, r2
 800442c:	604b      	str	r3, [r1, #4]
 800442e:	e025      	b.n	800447c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004430:	4b70      	ldr	r3, [pc, #448]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a6f      	ldr	r2, [pc, #444]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 8004436:	f043 0308 	orr.w	r3, r3, #8
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	4b6d      	ldr	r3, [pc, #436]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	496a      	ldr	r1, [pc, #424]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800444e:	4b69      	ldr	r3, [pc, #420]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	4965      	ldr	r1, [pc, #404]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 800445e:	4313      	orrs	r3, r2
 8004460:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d109      	bne.n	800447c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fd01 	bl	8004e74 <RCC_SetFlashLatencyFromMSIRange>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e34d      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800447c:	f000 fc36 	bl	8004cec <HAL_RCC_GetSysClockFreq>
 8004480:	4602      	mov	r2, r0
 8004482:	4b5c      	ldr	r3, [pc, #368]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	091b      	lsrs	r3, r3, #4
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	495a      	ldr	r1, [pc, #360]	; (80045f8 <HAL_RCC_OscConfig+0x29c>)
 800448e:	5ccb      	ldrb	r3, [r1, r3]
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
 8004498:	4a58      	ldr	r2, [pc, #352]	; (80045fc <HAL_RCC_OscConfig+0x2a0>)
 800449a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800449c:	4b58      	ldr	r3, [pc, #352]	; (8004600 <HAL_RCC_OscConfig+0x2a4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff f9ab 	bl	80037fc <HAL_InitTick>
 80044a6:	4603      	mov	r3, r0
 80044a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d052      	beq.n	8004556 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
 80044b2:	e331      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d032      	beq.n	8004522 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044bc:	4b4d      	ldr	r3, [pc, #308]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a4c      	ldr	r2, [pc, #304]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044c8:	f7ff f9e8 	bl	800389c <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044d0:	f7ff f9e4 	bl	800389c <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e31a      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044e2:	4b44      	ldr	r3, [pc, #272]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044ee:	4b41      	ldr	r3, [pc, #260]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a40      	ldr	r2, [pc, #256]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80044f4:	f043 0308 	orr.w	r3, r3, #8
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	4b3e      	ldr	r3, [pc, #248]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	493b      	ldr	r1, [pc, #236]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 8004508:	4313      	orrs	r3, r2
 800450a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800450c:	4b39      	ldr	r3, [pc, #228]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	021b      	lsls	r3, r3, #8
 800451a:	4936      	ldr	r1, [pc, #216]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 800451c:	4313      	orrs	r3, r2
 800451e:	604b      	str	r3, [r1, #4]
 8004520:	e01a      	b.n	8004558 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004522:	4b34      	ldr	r3, [pc, #208]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a33      	ldr	r2, [pc, #204]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800452e:	f7ff f9b5 	bl	800389c <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004536:	f7ff f9b1 	bl	800389c <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e2e7      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004548:	4b2a      	ldr	r3, [pc, #168]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f0      	bne.n	8004536 <HAL_RCC_OscConfig+0x1da>
 8004554:	e000      	b.n	8004558 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004556:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d074      	beq.n	800464e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2b08      	cmp	r3, #8
 8004568:	d005      	beq.n	8004576 <HAL_RCC_OscConfig+0x21a>
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	2b0c      	cmp	r3, #12
 800456e:	d10e      	bne.n	800458e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2b03      	cmp	r3, #3
 8004574:	d10b      	bne.n	800458e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004576:	4b1f      	ldr	r3, [pc, #124]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d064      	beq.n	800464c <HAL_RCC_OscConfig+0x2f0>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d160      	bne.n	800464c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e2c4      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004596:	d106      	bne.n	80045a6 <HAL_RCC_OscConfig+0x24a>
 8004598:	4b16      	ldr	r3, [pc, #88]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a15      	ldr	r2, [pc, #84]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 800459e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	e01d      	b.n	80045e2 <HAL_RCC_OscConfig+0x286>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045ae:	d10c      	bne.n	80045ca <HAL_RCC_OscConfig+0x26e>
 80045b0:	4b10      	ldr	r3, [pc, #64]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a0f      	ldr	r2, [pc, #60]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80045b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a0c      	ldr	r2, [pc, #48]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80045c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	e00b      	b.n	80045e2 <HAL_RCC_OscConfig+0x286>
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80045d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a06      	ldr	r2, [pc, #24]	; (80045f4 <HAL_RCC_OscConfig+0x298>)
 80045dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d01c      	beq.n	8004624 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7ff f957 	bl	800389c <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045f0:	e011      	b.n	8004616 <HAL_RCC_OscConfig+0x2ba>
 80045f2:	bf00      	nop
 80045f4:	40021000 	.word	0x40021000
 80045f8:	0800ab90 	.word	0x0800ab90
 80045fc:	20000000 	.word	0x20000000
 8004600:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004604:	f7ff f94a 	bl	800389c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b64      	cmp	r3, #100	; 0x64
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e280      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004616:	4baf      	ldr	r3, [pc, #700]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0x2a8>
 8004622:	e014      	b.n	800464e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004624:	f7ff f93a 	bl	800389c <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800462c:	f7ff f936 	bl	800389c <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b64      	cmp	r3, #100	; 0x64
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e26c      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800463e:	4ba5      	ldr	r3, [pc, #660]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x2d0>
 800464a:	e000      	b.n	800464e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800464c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d060      	beq.n	800471c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2b04      	cmp	r3, #4
 800465e:	d005      	beq.n	800466c <HAL_RCC_OscConfig+0x310>
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	2b0c      	cmp	r3, #12
 8004664:	d119      	bne.n	800469a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d116      	bne.n	800469a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800466c:	4b99      	ldr	r3, [pc, #612]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_RCC_OscConfig+0x328>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e249      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004684:	4b93      	ldr	r3, [pc, #588]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	061b      	lsls	r3, r3, #24
 8004692:	4990      	ldr	r1, [pc, #576]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004698:	e040      	b.n	800471c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d023      	beq.n	80046ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046a2:	4b8c      	ldr	r3, [pc, #560]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a8b      	ldr	r2, [pc, #556]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 80046a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ae:	f7ff f8f5 	bl	800389c <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046b6:	f7ff f8f1 	bl	800389c <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e227      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046c8:	4b82      	ldr	r3, [pc, #520]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0f0      	beq.n	80046b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d4:	4b7f      	ldr	r3, [pc, #508]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	061b      	lsls	r3, r3, #24
 80046e2:	497c      	ldr	r1, [pc, #496]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	604b      	str	r3, [r1, #4]
 80046e8:	e018      	b.n	800471c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ea:	4b7a      	ldr	r3, [pc, #488]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a79      	ldr	r2, [pc, #484]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 80046f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f6:	f7ff f8d1 	bl	800389c <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046fe:	f7ff f8cd 	bl	800389c <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e203      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004710:	4b70      	ldr	r3, [pc, #448]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f0      	bne.n	80046fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	d03c      	beq.n	80047a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01c      	beq.n	800476a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004730:	4b68      	ldr	r3, [pc, #416]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 8004732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004736:	4a67      	ldr	r2, [pc, #412]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004740:	f7ff f8ac 	bl	800389c <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004748:	f7ff f8a8 	bl	800389c <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e1de      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800475a:	4b5e      	ldr	r3, [pc, #376]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 800475c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0ef      	beq.n	8004748 <HAL_RCC_OscConfig+0x3ec>
 8004768:	e01b      	b.n	80047a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800476a:	4b5a      	ldr	r3, [pc, #360]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 800476c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004770:	4a58      	ldr	r2, [pc, #352]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 8004772:	f023 0301 	bic.w	r3, r3, #1
 8004776:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477a:	f7ff f88f 	bl	800389c <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004782:	f7ff f88b 	bl	800389c <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e1c1      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004794:	4b4f      	ldr	r3, [pc, #316]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 8004796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1ef      	bne.n	8004782 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80a6 	beq.w	80048fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b0:	2300      	movs	r3, #0
 80047b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047b4:	4b47      	ldr	r3, [pc, #284]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 80047b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10d      	bne.n	80047dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c0:	4b44      	ldr	r3, [pc, #272]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 80047c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c4:	4a43      	ldr	r2, [pc, #268]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 80047c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ca:	6593      	str	r3, [r2, #88]	; 0x58
 80047cc:	4b41      	ldr	r3, [pc, #260]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 80047ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d8:	2301      	movs	r3, #1
 80047da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047dc:	4b3e      	ldr	r3, [pc, #248]	; (80048d8 <HAL_RCC_OscConfig+0x57c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d118      	bne.n	800481a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047e8:	4b3b      	ldr	r3, [pc, #236]	; (80048d8 <HAL_RCC_OscConfig+0x57c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a3a      	ldr	r2, [pc, #232]	; (80048d8 <HAL_RCC_OscConfig+0x57c>)
 80047ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047f4:	f7ff f852 	bl	800389c <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047fc:	f7ff f84e 	bl	800389c <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e184      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800480e:	4b32      	ldr	r3, [pc, #200]	; (80048d8 <HAL_RCC_OscConfig+0x57c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d108      	bne.n	8004834 <HAL_RCC_OscConfig+0x4d8>
 8004822:	4b2c      	ldr	r3, [pc, #176]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004828:	4a2a      	ldr	r2, [pc, #168]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004832:	e024      	b.n	800487e <HAL_RCC_OscConfig+0x522>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b05      	cmp	r3, #5
 800483a:	d110      	bne.n	800485e <HAL_RCC_OscConfig+0x502>
 800483c:	4b25      	ldr	r3, [pc, #148]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004842:	4a24      	ldr	r2, [pc, #144]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 8004844:	f043 0304 	orr.w	r3, r3, #4
 8004848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800484c:	4b21      	ldr	r3, [pc, #132]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	4a20      	ldr	r2, [pc, #128]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800485c:	e00f      	b.n	800487e <HAL_RCC_OscConfig+0x522>
 800485e:	4b1d      	ldr	r3, [pc, #116]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 8004860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004864:	4a1b      	ldr	r2, [pc, #108]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 8004866:	f023 0301 	bic.w	r3, r3, #1
 800486a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800486e:	4b19      	ldr	r3, [pc, #100]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004874:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 8004876:	f023 0304 	bic.w	r3, r3, #4
 800487a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d016      	beq.n	80048b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004886:	f7ff f809 	bl	800389c <HAL_GetTick>
 800488a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800488c:	e00a      	b.n	80048a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800488e:	f7ff f805 	bl	800389c <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	f241 3288 	movw	r2, #5000	; 0x1388
 800489c:	4293      	cmp	r3, r2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e139      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a4:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <HAL_RCC_OscConfig+0x578>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0ed      	beq.n	800488e <HAL_RCC_OscConfig+0x532>
 80048b2:	e01a      	b.n	80048ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b4:	f7fe fff2 	bl	800389c <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048ba:	e00f      	b.n	80048dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048bc:	f7fe ffee 	bl	800389c <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d906      	bls.n	80048dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e122      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
 80048d2:	bf00      	nop
 80048d4:	40021000 	.word	0x40021000
 80048d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048dc:	4b90      	ldr	r3, [pc, #576]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e8      	bne.n	80048bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ea:	7ffb      	ldrb	r3, [r7, #31]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d105      	bne.n	80048fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f0:	4b8b      	ldr	r3, [pc, #556]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 80048f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f4:	4a8a      	ldr	r2, [pc, #552]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 80048f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8108 	beq.w	8004b16 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	2b02      	cmp	r3, #2
 800490c:	f040 80d0 	bne.w	8004ab0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004910:	4b83      	ldr	r3, [pc, #524]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f003 0203 	and.w	r2, r3, #3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	429a      	cmp	r2, r3
 8004922:	d130      	bne.n	8004986 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	3b01      	subs	r3, #1
 8004930:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004932:	429a      	cmp	r2, r3
 8004934:	d127      	bne.n	8004986 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004940:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d11f      	bne.n	8004986 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004950:	2a07      	cmp	r2, #7
 8004952:	bf14      	ite	ne
 8004954:	2201      	movne	r2, #1
 8004956:	2200      	moveq	r2, #0
 8004958:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800495a:	4293      	cmp	r3, r2
 800495c:	d113      	bne.n	8004986 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004968:	085b      	lsrs	r3, r3, #1
 800496a:	3b01      	subs	r3, #1
 800496c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d109      	bne.n	8004986 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	085b      	lsrs	r3, r3, #1
 800497e:	3b01      	subs	r3, #1
 8004980:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d06e      	beq.n	8004a64 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b0c      	cmp	r3, #12
 800498a:	d069      	beq.n	8004a60 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800498c:	4b64      	ldr	r3, [pc, #400]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d105      	bne.n	80049a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004998:	4b61      	ldr	r3, [pc, #388]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0b7      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049a8:	4b5d      	ldr	r3, [pc, #372]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a5c      	ldr	r2, [pc, #368]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 80049ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049b4:	f7fe ff72 	bl	800389c <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049bc:	f7fe ff6e 	bl	800389c <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e0a4      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ce:	4b54      	ldr	r3, [pc, #336]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049da:	4b51      	ldr	r3, [pc, #324]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	4b51      	ldr	r3, [pc, #324]	; (8004b24 <HAL_RCC_OscConfig+0x7c8>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049ea:	3a01      	subs	r2, #1
 80049ec:	0112      	lsls	r2, r2, #4
 80049ee:	4311      	orrs	r1, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049f4:	0212      	lsls	r2, r2, #8
 80049f6:	4311      	orrs	r1, r2
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049fc:	0852      	lsrs	r2, r2, #1
 80049fe:	3a01      	subs	r2, #1
 8004a00:	0552      	lsls	r2, r2, #21
 8004a02:	4311      	orrs	r1, r2
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a08:	0852      	lsrs	r2, r2, #1
 8004a0a:	3a01      	subs	r2, #1
 8004a0c:	0652      	lsls	r2, r2, #25
 8004a0e:	4311      	orrs	r1, r2
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a14:	0912      	lsrs	r2, r2, #4
 8004a16:	0452      	lsls	r2, r2, #17
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	4941      	ldr	r1, [pc, #260]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a20:	4b3f      	ldr	r3, [pc, #252]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a3e      	ldr	r2, [pc, #248]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a2c:	4b3c      	ldr	r3, [pc, #240]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4a3b      	ldr	r2, [pc, #236]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a38:	f7fe ff30 	bl	800389c <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a40:	f7fe ff2c 	bl	800389c <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e062      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a52:	4b33      	ldr	r3, [pc, #204]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f0      	beq.n	8004a40 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a5e:	e05a      	b.n	8004b16 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e059      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a64:	4b2e      	ldr	r3, [pc, #184]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d152      	bne.n	8004b16 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a70:	4b2b      	ldr	r3, [pc, #172]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a2a      	ldr	r2, [pc, #168]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a7c:	4b28      	ldr	r3, [pc, #160]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a27      	ldr	r2, [pc, #156]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a88:	f7fe ff08 	bl	800389c <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a90:	f7fe ff04 	bl	800389c <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e03a      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa2:	4b1f      	ldr	r3, [pc, #124]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f0      	beq.n	8004a90 <HAL_RCC_OscConfig+0x734>
 8004aae:	e032      	b.n	8004b16 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2b0c      	cmp	r3, #12
 8004ab4:	d02d      	beq.n	8004b12 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab6:	4b1a      	ldr	r3, [pc, #104]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a19      	ldr	r2, [pc, #100]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004abc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ac0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004ac2:	4b17      	ldr	r3, [pc, #92]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d105      	bne.n	8004ada <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ace:	4b14      	ldr	r3, [pc, #80]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	4a13      	ldr	r2, [pc, #76]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004ad4:	f023 0303 	bic.w	r3, r3, #3
 8004ad8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ada:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	4a10      	ldr	r2, [pc, #64]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004ae0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aea:	f7fe fed7 	bl	800389c <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af2:	f7fe fed3 	bl	800389c <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e009      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b04:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <HAL_RCC_OscConfig+0x7c4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f0      	bne.n	8004af2 <HAL_RCC_OscConfig+0x796>
 8004b10:	e001      	b.n	8004b16 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3720      	adds	r7, #32
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40021000 	.word	0x40021000
 8004b24:	f99d808c 	.word	0xf99d808c

08004b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e0c8      	b.n	8004cce <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b3c:	4b66      	ldr	r3, [pc, #408]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d910      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4a:	4b63      	ldr	r3, [pc, #396]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 0207 	bic.w	r2, r3, #7
 8004b52:	4961      	ldr	r1, [pc, #388]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b5f      	ldr	r3, [pc, #380]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0b0      	b.n	8004cce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d04c      	beq.n	8004c12 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d107      	bne.n	8004b90 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b80:	4b56      	ldr	r3, [pc, #344]	; (8004cdc <HAL_RCC_ClockConfig+0x1b4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d121      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e09e      	b.n	8004cce <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d107      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b98:	4b50      	ldr	r3, [pc, #320]	; (8004cdc <HAL_RCC_ClockConfig+0x1b4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d115      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e092      	b.n	8004cce <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d107      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bb0:	4b4a      	ldr	r3, [pc, #296]	; (8004cdc <HAL_RCC_ClockConfig+0x1b4>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d109      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e086      	b.n	8004cce <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bc0:	4b46      	ldr	r3, [pc, #280]	; (8004cdc <HAL_RCC_ClockConfig+0x1b4>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e07e      	b.n	8004cce <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bd0:	4b42      	ldr	r3, [pc, #264]	; (8004cdc <HAL_RCC_ClockConfig+0x1b4>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f023 0203 	bic.w	r2, r3, #3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	493f      	ldr	r1, [pc, #252]	; (8004cdc <HAL_RCC_ClockConfig+0x1b4>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be2:	f7fe fe5b 	bl	800389c <HAL_GetTick>
 8004be6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be8:	e00a      	b.n	8004c00 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bea:	f7fe fe57 	bl	800389c <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e066      	b.n	8004cce <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c00:	4b36      	ldr	r3, [pc, #216]	; (8004cdc <HAL_RCC_ClockConfig+0x1b4>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 020c 	and.w	r2, r3, #12
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d1eb      	bne.n	8004bea <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d008      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c1e:	4b2f      	ldr	r3, [pc, #188]	; (8004cdc <HAL_RCC_ClockConfig+0x1b4>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	492c      	ldr	r1, [pc, #176]	; (8004cdc <HAL_RCC_ClockConfig+0x1b4>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c30:	4b29      	ldr	r3, [pc, #164]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d210      	bcs.n	8004c60 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b26      	ldr	r3, [pc, #152]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 0207 	bic.w	r2, r3, #7
 8004c46:	4924      	ldr	r1, [pc, #144]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4e:	4b22      	ldr	r3, [pc, #136]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e036      	b.n	8004cce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c6c:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <HAL_RCC_ClockConfig+0x1b4>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4918      	ldr	r1, [pc, #96]	; (8004cdc <HAL_RCC_ClockConfig+0x1b4>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <HAL_RCC_ClockConfig+0x1b4>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	4910      	ldr	r1, [pc, #64]	; (8004cdc <HAL_RCC_ClockConfig+0x1b4>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c9e:	f000 f825 	bl	8004cec <HAL_RCC_GetSysClockFreq>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	4b0d      	ldr	r3, [pc, #52]	; (8004cdc <HAL_RCC_ClockConfig+0x1b4>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	490c      	ldr	r1, [pc, #48]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb0:	5ccb      	ldrb	r3, [r1, r3]
 8004cb2:	f003 031f 	and.w	r3, r3, #31
 8004cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cba:	4a0a      	ldr	r2, [pc, #40]	; (8004ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cbe:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe fd9a 	bl	80037fc <HAL_InitTick>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ccc:	7afb      	ldrb	r3, [r7, #11]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40022000 	.word	0x40022000
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	0800ab90 	.word	0x0800ab90
 8004ce4:	20000000 	.word	0x20000000
 8004ce8:	20000004 	.word	0x20000004

08004cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b089      	sub	sp, #36	; 0x24
 8004cf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cfa:	4b3e      	ldr	r3, [pc, #248]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
 8004d02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d04:	4b3b      	ldr	r3, [pc, #236]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_RCC_GetSysClockFreq+0x34>
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	2b0c      	cmp	r3, #12
 8004d18:	d121      	bne.n	8004d5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d11e      	bne.n	8004d5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d20:	4b34      	ldr	r3, [pc, #208]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d107      	bne.n	8004d3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d2c:	4b31      	ldr	r3, [pc, #196]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d32:	0a1b      	lsrs	r3, r3, #8
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	61fb      	str	r3, [r7, #28]
 8004d3a:	e005      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d3c:	4b2d      	ldr	r3, [pc, #180]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d48:	4a2b      	ldr	r2, [pc, #172]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10d      	bne.n	8004d74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d5c:	e00a      	b.n	8004d74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d102      	bne.n	8004d6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d64:	4b25      	ldr	r3, [pc, #148]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x110>)
 8004d66:	61bb      	str	r3, [r7, #24]
 8004d68:	e004      	b.n	8004d74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d101      	bne.n	8004d74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d70:	4b23      	ldr	r3, [pc, #140]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b0c      	cmp	r3, #12
 8004d78:	d134      	bne.n	8004de4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d7a:	4b1e      	ldr	r3, [pc, #120]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d003      	beq.n	8004d92 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d003      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0xac>
 8004d90:	e005      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d92:	4b1a      	ldr	r3, [pc, #104]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x110>)
 8004d94:	617b      	str	r3, [r7, #20]
      break;
 8004d96:	e005      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d98:	4b19      	ldr	r3, [pc, #100]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d9a:	617b      	str	r3, [r7, #20]
      break;
 8004d9c:	e002      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	617b      	str	r3, [r7, #20]
      break;
 8004da2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004da4:	4b13      	ldr	r3, [pc, #76]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	3301      	adds	r3, #1
 8004db0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004db2:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	0a1b      	lsrs	r3, r3, #8
 8004db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	fb02 f203 	mul.w	r2, r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dca:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	0e5b      	lsrs	r3, r3, #25
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004de4:	69bb      	ldr	r3, [r7, #24]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3724      	adds	r7, #36	; 0x24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40021000 	.word	0x40021000
 8004df8:	0800aba8 	.word	0x0800aba8
 8004dfc:	00f42400 	.word	0x00f42400
 8004e00:	007a1200 	.word	0x007a1200

08004e04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e08:	4b03      	ldr	r3, [pc, #12]	; (8004e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	20000000 	.word	0x20000000

08004e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e20:	f7ff fff0 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 8004e24:	4602      	mov	r2, r0
 8004e26:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	0a1b      	lsrs	r3, r3, #8
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	4904      	ldr	r1, [pc, #16]	; (8004e44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e32:	5ccb      	ldrb	r3, [r1, r3]
 8004e34:	f003 031f 	and.w	r3, r3, #31
 8004e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40021000 	.word	0x40021000
 8004e44:	0800aba0 	.word	0x0800aba0

08004e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e4c:	f7ff ffda 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 8004e50:	4602      	mov	r2, r0
 8004e52:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	0adb      	lsrs	r3, r3, #11
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	4904      	ldr	r1, [pc, #16]	; (8004e70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e5e:	5ccb      	ldrb	r3, [r1, r3]
 8004e60:	f003 031f 	and.w	r3, r3, #31
 8004e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	0800aba0 	.word	0x0800aba0

08004e74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e80:	4b2a      	ldr	r3, [pc, #168]	; (8004f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e8c:	f7ff fa02 	bl	8004294 <HAL_PWREx_GetVoltageRange>
 8004e90:	6178      	str	r0, [r7, #20]
 8004e92:	e014      	b.n	8004ebe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e94:	4b25      	ldr	r3, [pc, #148]	; (8004f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e98:	4a24      	ldr	r2, [pc, #144]	; (8004f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8004ea0:	4b22      	ldr	r3, [pc, #136]	; (8004f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004eac:	f7ff f9f2 	bl	8004294 <HAL_PWREx_GetVoltageRange>
 8004eb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004eb2:	4b1e      	ldr	r3, [pc, #120]	; (8004f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb6:	4a1d      	ldr	r2, [pc, #116]	; (8004f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec4:	d10b      	bne.n	8004ede <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b80      	cmp	r3, #128	; 0x80
 8004eca:	d919      	bls.n	8004f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2ba0      	cmp	r3, #160	; 0xa0
 8004ed0:	d902      	bls.n	8004ed8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	e013      	b.n	8004f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ed8:	2301      	movs	r3, #1
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	e010      	b.n	8004f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b80      	cmp	r3, #128	; 0x80
 8004ee2:	d902      	bls.n	8004eea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	e00a      	b.n	8004f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b80      	cmp	r3, #128	; 0x80
 8004eee:	d102      	bne.n	8004ef6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	e004      	b.n	8004f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b70      	cmp	r3, #112	; 0x70
 8004efa:	d101      	bne.n	8004f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004efc:	2301      	movs	r3, #1
 8004efe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f00:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f023 0207 	bic.w	r2, r3, #7
 8004f08:	4909      	ldr	r1, [pc, #36]	; (8004f30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f10:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d001      	beq.n	8004f22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	40022000 	.word	0x40022000

08004f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f40:	2300      	movs	r3, #0
 8004f42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d041      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f58:	d02a      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f5e:	d824      	bhi.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f64:	d008      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f6a:	d81e      	bhi.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f74:	d010      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f76:	e018      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f78:	4b86      	ldr	r3, [pc, #536]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	4a85      	ldr	r2, [pc, #532]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f84:	e015      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fabb 	bl	8005508 <RCCEx_PLLSAI1_Config>
 8004f92:	4603      	mov	r3, r0
 8004f94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f96:	e00c      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3320      	adds	r3, #32
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fba6 	bl	80056f0 <RCCEx_PLLSAI2_Config>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fa8:	e003      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	74fb      	strb	r3, [r7, #19]
      break;
 8004fae:	e000      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fb2:	7cfb      	ldrb	r3, [r7, #19]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10b      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fb8:	4b76      	ldr	r3, [pc, #472]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fc6:	4973      	ldr	r1, [pc, #460]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fce:	e001      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd0:	7cfb      	ldrb	r3, [r7, #19]
 8004fd2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d041      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fe4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004fe8:	d02a      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004fea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004fee:	d824      	bhi.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ff0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ff4:	d008      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ff6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ffa:	d81e      	bhi.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005004:	d010      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005006:	e018      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005008:	4b62      	ldr	r3, [pc, #392]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4a61      	ldr	r2, [pc, #388]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800500e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005012:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005014:	e015      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3304      	adds	r3, #4
 800501a:	2100      	movs	r1, #0
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fa73 	bl	8005508 <RCCEx_PLLSAI1_Config>
 8005022:	4603      	mov	r3, r0
 8005024:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005026:	e00c      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3320      	adds	r3, #32
 800502c:	2100      	movs	r1, #0
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fb5e 	bl	80056f0 <RCCEx_PLLSAI2_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005038:	e003      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	74fb      	strb	r3, [r7, #19]
      break;
 800503e:	e000      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005042:	7cfb      	ldrb	r3, [r7, #19]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10b      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005048:	4b52      	ldr	r3, [pc, #328]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005056:	494f      	ldr	r1, [pc, #316]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800505e:	e001      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005060:	7cfb      	ldrb	r3, [r7, #19]
 8005062:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 80a0 	beq.w	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005072:	2300      	movs	r3, #0
 8005074:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005076:	4b47      	ldr	r3, [pc, #284]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005086:	2300      	movs	r3, #0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00d      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800508c:	4b41      	ldr	r3, [pc, #260]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005090:	4a40      	ldr	r2, [pc, #256]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005096:	6593      	str	r3, [r2, #88]	; 0x58
 8005098:	4b3e      	ldr	r3, [pc, #248]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800509a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a0:	60bb      	str	r3, [r7, #8]
 80050a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a4:	2301      	movs	r3, #1
 80050a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050a8:	4b3b      	ldr	r3, [pc, #236]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a3a      	ldr	r2, [pc, #232]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050b4:	f7fe fbf2 	bl	800389c <HAL_GetTick>
 80050b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050ba:	e009      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050bc:	f7fe fbee 	bl	800389c <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d902      	bls.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	74fb      	strb	r3, [r7, #19]
        break;
 80050ce:	e005      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050d0:	4b31      	ldr	r3, [pc, #196]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0ef      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80050dc:	7cfb      	ldrb	r3, [r7, #19]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d15c      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050e2:	4b2c      	ldr	r3, [pc, #176]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01f      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d019      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005100:	4b24      	ldr	r3, [pc, #144]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800510a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800510c:	4b21      	ldr	r3, [pc, #132]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	4a20      	ldr	r2, [pc, #128]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800511c:	4b1d      	ldr	r3, [pc, #116]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005122:	4a1c      	ldr	r2, [pc, #112]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800512c:	4a19      	ldr	r2, [pc, #100]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d016      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513e:	f7fe fbad 	bl	800389c <HAL_GetTick>
 8005142:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005144:	e00b      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005146:	f7fe fba9 	bl	800389c <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	f241 3288 	movw	r2, #5000	; 0x1388
 8005154:	4293      	cmp	r3, r2
 8005156:	d902      	bls.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	74fb      	strb	r3, [r7, #19]
            break;
 800515c:	e006      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800515e:	4b0d      	ldr	r3, [pc, #52]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0ec      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800516c:	7cfb      	ldrb	r3, [r7, #19]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10c      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005172:	4b08      	ldr	r3, [pc, #32]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005178:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005182:	4904      	ldr	r1, [pc, #16]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800518a:	e009      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800518c:	7cfb      	ldrb	r3, [r7, #19]
 800518e:	74bb      	strb	r3, [r7, #18]
 8005190:	e006      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005192:	bf00      	nop
 8005194:	40021000 	.word	0x40021000
 8005198:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519c:	7cfb      	ldrb	r3, [r7, #19]
 800519e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051a0:	7c7b      	ldrb	r3, [r7, #17]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d105      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a6:	4b9e      	ldr	r3, [pc, #632]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051aa:	4a9d      	ldr	r2, [pc, #628]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051be:	4b98      	ldr	r3, [pc, #608]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c4:	f023 0203 	bic.w	r2, r3, #3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	4994      	ldr	r1, [pc, #592]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051e0:	4b8f      	ldr	r3, [pc, #572]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e6:	f023 020c 	bic.w	r2, r3, #12
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ee:	498c      	ldr	r1, [pc, #560]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005202:	4b87      	ldr	r3, [pc, #540]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005208:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	4983      	ldr	r1, [pc, #524]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005224:	4b7e      	ldr	r3, [pc, #504]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005232:	497b      	ldr	r1, [pc, #492]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0310 	and.w	r3, r3, #16
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005246:	4b76      	ldr	r3, [pc, #472]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005254:	4972      	ldr	r1, [pc, #456]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005268:	4b6d      	ldr	r3, [pc, #436]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005276:	496a      	ldr	r1, [pc, #424]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800528a:	4b65      	ldr	r3, [pc, #404]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005290:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005298:	4961      	ldr	r1, [pc, #388]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052ac:	4b5c      	ldr	r3, [pc, #368]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ba:	4959      	ldr	r1, [pc, #356]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ce:	4b54      	ldr	r3, [pc, #336]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052dc:	4950      	ldr	r1, [pc, #320]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052f0:	4b4b      	ldr	r3, [pc, #300]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fe:	4948      	ldr	r1, [pc, #288]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005312:	4b43      	ldr	r3, [pc, #268]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005318:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005320:	493f      	ldr	r1, [pc, #252]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d028      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005334:	4b3a      	ldr	r3, [pc, #232]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005342:	4937      	ldr	r1, [pc, #220]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005344:	4313      	orrs	r3, r2
 8005346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800534e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005352:	d106      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005354:	4b32      	ldr	r3, [pc, #200]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	4a31      	ldr	r2, [pc, #196]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800535e:	60d3      	str	r3, [r2, #12]
 8005360:	e011      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005366:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800536a:	d10c      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3304      	adds	r3, #4
 8005370:	2101      	movs	r1, #1
 8005372:	4618      	mov	r0, r3
 8005374:	f000 f8c8 	bl	8005508 <RCCEx_PLLSAI1_Config>
 8005378:	4603      	mov	r3, r0
 800537a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800537c:	7cfb      	ldrb	r3, [r7, #19]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005382:	7cfb      	ldrb	r3, [r7, #19]
 8005384:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d028      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005392:	4b23      	ldr	r3, [pc, #140]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a0:	491f      	ldr	r1, [pc, #124]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053b0:	d106      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b2:	4b1b      	ldr	r3, [pc, #108]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	4a1a      	ldr	r2, [pc, #104]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053bc:	60d3      	str	r3, [r2, #12]
 80053be:	e011      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053c8:	d10c      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3304      	adds	r3, #4
 80053ce:	2101      	movs	r1, #1
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 f899 	bl	8005508 <RCCEx_PLLSAI1_Config>
 80053d6:	4603      	mov	r3, r0
 80053d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053da:	7cfb      	ldrb	r3, [r7, #19]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80053e0:	7cfb      	ldrb	r3, [r7, #19]
 80053e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d02b      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053f0:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053fe:	4908      	ldr	r1, [pc, #32]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800540a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800540e:	d109      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005410:	4b03      	ldr	r3, [pc, #12]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	4a02      	ldr	r2, [pc, #8]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800541a:	60d3      	str	r3, [r2, #12]
 800541c:	e014      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800541e:	bf00      	nop
 8005420:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800542c:	d10c      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3304      	adds	r3, #4
 8005432:	2101      	movs	r1, #1
 8005434:	4618      	mov	r0, r3
 8005436:	f000 f867 	bl	8005508 <RCCEx_PLLSAI1_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800543e:	7cfb      	ldrb	r3, [r7, #19]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005444:	7cfb      	ldrb	r3, [r7, #19]
 8005446:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d02f      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005454:	4b2b      	ldr	r3, [pc, #172]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005462:	4928      	ldr	r1, [pc, #160]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800546e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005472:	d10d      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3304      	adds	r3, #4
 8005478:	2102      	movs	r1, #2
 800547a:	4618      	mov	r0, r3
 800547c:	f000 f844 	bl	8005508 <RCCEx_PLLSAI1_Config>
 8005480:	4603      	mov	r3, r0
 8005482:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005484:	7cfb      	ldrb	r3, [r7, #19]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d014      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800548a:	7cfb      	ldrb	r3, [r7, #19]
 800548c:	74bb      	strb	r3, [r7, #18]
 800548e:	e011      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005498:	d10c      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3320      	adds	r3, #32
 800549e:	2102      	movs	r1, #2
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 f925 	bl	80056f0 <RCCEx_PLLSAI2_Config>
 80054a6:	4603      	mov	r3, r0
 80054a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054aa:	7cfb      	ldrb	r3, [r7, #19]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054b0:	7cfb      	ldrb	r3, [r7, #19]
 80054b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054c0:	4b10      	ldr	r3, [pc, #64]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ce:	490d      	ldr	r1, [pc, #52]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00b      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054e2:	4b08      	ldr	r3, [pc, #32]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f2:	4904      	ldr	r1, [pc, #16]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40021000 	.word	0x40021000

08005508 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005516:	4b75      	ldr	r3, [pc, #468]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d018      	beq.n	8005554 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005522:	4b72      	ldr	r3, [pc, #456]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0203 	and.w	r2, r3, #3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d10d      	bne.n	800554e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
       ||
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800553a:	4b6c      	ldr	r3, [pc, #432]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	091b      	lsrs	r3, r3, #4
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
       ||
 800554a:	429a      	cmp	r2, r3
 800554c:	d047      	beq.n	80055de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
 8005552:	e044      	b.n	80055de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b03      	cmp	r3, #3
 800555a:	d018      	beq.n	800558e <RCCEx_PLLSAI1_Config+0x86>
 800555c:	2b03      	cmp	r3, #3
 800555e:	d825      	bhi.n	80055ac <RCCEx_PLLSAI1_Config+0xa4>
 8005560:	2b01      	cmp	r3, #1
 8005562:	d002      	beq.n	800556a <RCCEx_PLLSAI1_Config+0x62>
 8005564:	2b02      	cmp	r3, #2
 8005566:	d009      	beq.n	800557c <RCCEx_PLLSAI1_Config+0x74>
 8005568:	e020      	b.n	80055ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800556a:	4b60      	ldr	r3, [pc, #384]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d11d      	bne.n	80055b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800557a:	e01a      	b.n	80055b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800557c:	4b5b      	ldr	r3, [pc, #364]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005584:	2b00      	cmp	r3, #0
 8005586:	d116      	bne.n	80055b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800558c:	e013      	b.n	80055b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800558e:	4b57      	ldr	r3, [pc, #348]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10f      	bne.n	80055ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800559a:	4b54      	ldr	r3, [pc, #336]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d109      	bne.n	80055ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055aa:	e006      	b.n	80055ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	73fb      	strb	r3, [r7, #15]
      break;
 80055b0:	e004      	b.n	80055bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055b2:	bf00      	nop
 80055b4:	e002      	b.n	80055bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055b6:	bf00      	nop
 80055b8:	e000      	b.n	80055bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10d      	bne.n	80055de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055c2:	4b4a      	ldr	r3, [pc, #296]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6819      	ldr	r1, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	430b      	orrs	r3, r1
 80055d8:	4944      	ldr	r1, [pc, #272]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055de:	7bfb      	ldrb	r3, [r7, #15]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d17d      	bne.n	80056e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055e4:	4b41      	ldr	r3, [pc, #260]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a40      	ldr	r2, [pc, #256]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055f0:	f7fe f954 	bl	800389c <HAL_GetTick>
 80055f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055f6:	e009      	b.n	800560c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055f8:	f7fe f950 	bl	800389c <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d902      	bls.n	800560c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	73fb      	strb	r3, [r7, #15]
        break;
 800560a:	e005      	b.n	8005618 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800560c:	4b37      	ldr	r3, [pc, #220]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1ef      	bne.n	80055f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d160      	bne.n	80056e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d111      	bne.n	8005648 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005624:	4b31      	ldr	r3, [pc, #196]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800562c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6892      	ldr	r2, [r2, #8]
 8005634:	0211      	lsls	r1, r2, #8
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	68d2      	ldr	r2, [r2, #12]
 800563a:	0912      	lsrs	r2, r2, #4
 800563c:	0452      	lsls	r2, r2, #17
 800563e:	430a      	orrs	r2, r1
 8005640:	492a      	ldr	r1, [pc, #168]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005642:	4313      	orrs	r3, r2
 8005644:	610b      	str	r3, [r1, #16]
 8005646:	e027      	b.n	8005698 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d112      	bne.n	8005674 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800564e:	4b27      	ldr	r3, [pc, #156]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005656:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6892      	ldr	r2, [r2, #8]
 800565e:	0211      	lsls	r1, r2, #8
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6912      	ldr	r2, [r2, #16]
 8005664:	0852      	lsrs	r2, r2, #1
 8005666:	3a01      	subs	r2, #1
 8005668:	0552      	lsls	r2, r2, #21
 800566a:	430a      	orrs	r2, r1
 800566c:	491f      	ldr	r1, [pc, #124]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800566e:	4313      	orrs	r3, r2
 8005670:	610b      	str	r3, [r1, #16]
 8005672:	e011      	b.n	8005698 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005674:	4b1d      	ldr	r3, [pc, #116]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800567c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6892      	ldr	r2, [r2, #8]
 8005684:	0211      	lsls	r1, r2, #8
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6952      	ldr	r2, [r2, #20]
 800568a:	0852      	lsrs	r2, r2, #1
 800568c:	3a01      	subs	r2, #1
 800568e:	0652      	lsls	r2, r2, #25
 8005690:	430a      	orrs	r2, r1
 8005692:	4916      	ldr	r1, [pc, #88]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005694:	4313      	orrs	r3, r2
 8005696:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005698:	4b14      	ldr	r3, [pc, #80]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a13      	ldr	r2, [pc, #76]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800569e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a4:	f7fe f8fa 	bl	800389c <HAL_GetTick>
 80056a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056aa:	e009      	b.n	80056c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056ac:	f7fe f8f6 	bl	800389c <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d902      	bls.n	80056c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	73fb      	strb	r3, [r7, #15]
          break;
 80056be:	e005      	b.n	80056cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056c0:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0ef      	beq.n	80056ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056d2:	4b06      	ldr	r3, [pc, #24]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d4:	691a      	ldr	r2, [r3, #16]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	4904      	ldr	r1, [pc, #16]	; (80056ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40021000 	.word	0x40021000

080056f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056fe:	4b6a      	ldr	r3, [pc, #424]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d018      	beq.n	800573c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800570a:	4b67      	ldr	r3, [pc, #412]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f003 0203 	and.w	r2, r3, #3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d10d      	bne.n	8005736 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
       ||
 800571e:	2b00      	cmp	r3, #0
 8005720:	d009      	beq.n	8005736 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005722:	4b61      	ldr	r3, [pc, #388]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	091b      	lsrs	r3, r3, #4
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
       ||
 8005732:	429a      	cmp	r2, r3
 8005734:	d047      	beq.n	80057c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	73fb      	strb	r3, [r7, #15]
 800573a:	e044      	b.n	80057c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d018      	beq.n	8005776 <RCCEx_PLLSAI2_Config+0x86>
 8005744:	2b03      	cmp	r3, #3
 8005746:	d825      	bhi.n	8005794 <RCCEx_PLLSAI2_Config+0xa4>
 8005748:	2b01      	cmp	r3, #1
 800574a:	d002      	beq.n	8005752 <RCCEx_PLLSAI2_Config+0x62>
 800574c:	2b02      	cmp	r3, #2
 800574e:	d009      	beq.n	8005764 <RCCEx_PLLSAI2_Config+0x74>
 8005750:	e020      	b.n	8005794 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005752:	4b55      	ldr	r3, [pc, #340]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d11d      	bne.n	800579a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005762:	e01a      	b.n	800579a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005764:	4b50      	ldr	r3, [pc, #320]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800576c:	2b00      	cmp	r3, #0
 800576e:	d116      	bne.n	800579e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005774:	e013      	b.n	800579e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005776:	4b4c      	ldr	r3, [pc, #304]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10f      	bne.n	80057a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005782:	4b49      	ldr	r3, [pc, #292]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d109      	bne.n	80057a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005792:	e006      	b.n	80057a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	73fb      	strb	r3, [r7, #15]
      break;
 8005798:	e004      	b.n	80057a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800579a:	bf00      	nop
 800579c:	e002      	b.n	80057a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800579e:	bf00      	nop
 80057a0:	e000      	b.n	80057a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10d      	bne.n	80057c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057aa:	4b3f      	ldr	r3, [pc, #252]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6819      	ldr	r1, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	430b      	orrs	r3, r1
 80057c0:	4939      	ldr	r1, [pc, #228]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d167      	bne.n	800589c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80057cc:	4b36      	ldr	r3, [pc, #216]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a35      	ldr	r2, [pc, #212]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057d8:	f7fe f860 	bl	800389c <HAL_GetTick>
 80057dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057de:	e009      	b.n	80057f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057e0:	f7fe f85c 	bl	800389c <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d902      	bls.n	80057f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	73fb      	strb	r3, [r7, #15]
        break;
 80057f2:	e005      	b.n	8005800 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057f4:	4b2c      	ldr	r3, [pc, #176]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1ef      	bne.n	80057e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005800:	7bfb      	ldrb	r3, [r7, #15]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d14a      	bne.n	800589c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d111      	bne.n	8005830 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800580c:	4b26      	ldr	r3, [pc, #152]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6892      	ldr	r2, [r2, #8]
 800581c:	0211      	lsls	r1, r2, #8
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	68d2      	ldr	r2, [r2, #12]
 8005822:	0912      	lsrs	r2, r2, #4
 8005824:	0452      	lsls	r2, r2, #17
 8005826:	430a      	orrs	r2, r1
 8005828:	491f      	ldr	r1, [pc, #124]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800582a:	4313      	orrs	r3, r2
 800582c:	614b      	str	r3, [r1, #20]
 800582e:	e011      	b.n	8005854 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005830:	4b1d      	ldr	r3, [pc, #116]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005838:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6892      	ldr	r2, [r2, #8]
 8005840:	0211      	lsls	r1, r2, #8
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6912      	ldr	r2, [r2, #16]
 8005846:	0852      	lsrs	r2, r2, #1
 8005848:	3a01      	subs	r2, #1
 800584a:	0652      	lsls	r2, r2, #25
 800584c:	430a      	orrs	r2, r1
 800584e:	4916      	ldr	r1, [pc, #88]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005850:	4313      	orrs	r3, r2
 8005852:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005854:	4b14      	ldr	r3, [pc, #80]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a13      	ldr	r2, [pc, #76]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800585a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800585e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005860:	f7fe f81c 	bl	800389c <HAL_GetTick>
 8005864:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005866:	e009      	b.n	800587c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005868:	f7fe f818 	bl	800389c <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d902      	bls.n	800587c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	73fb      	strb	r3, [r7, #15]
          break;
 800587a:	e005      	b.n	8005888 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0ef      	beq.n	8005868 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800588e:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005890:	695a      	ldr	r2, [r3, #20]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	4904      	ldr	r1, [pc, #16]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005898:	4313      	orrs	r3, r2
 800589a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800589c:	7bfb      	ldrb	r3, [r7, #15]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40021000 	.word	0x40021000

080058ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e095      	b.n	80059ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d108      	bne.n	80058d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ce:	d009      	beq.n	80058e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	61da      	str	r2, [r3, #28]
 80058d6:	e005      	b.n	80058e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fd fc5a 	bl	80031b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800591a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005924:	d902      	bls.n	800592c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	e002      	b.n	8005932 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800592c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005930:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800593a:	d007      	beq.n	800594c <HAL_SPI_Init+0xa0>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005944:	d002      	beq.n	800594c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005984:	431a      	orrs	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598e:	ea42 0103 	orr.w	r1, r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	0c1b      	lsrs	r3, r3, #16
 80059a8:	f003 0204 	and.w	r2, r3, #4
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	431a      	orrs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80059c8:	ea42 0103 	orr.w	r1, r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e16c      	b.n	8005cee <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a22:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005a2a:	7dbb      	ldrb	r3, [r7, #22]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d00d      	beq.n	8005a4c <HAL_SPI_TransmitReceive_DMA+0x58>
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a36:	d106      	bne.n	8005a46 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d102      	bne.n	8005a46 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005a40:	7dbb      	ldrb	r3, [r7, #22]
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d002      	beq.n	8005a4c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005a46:	2302      	movs	r3, #2
 8005a48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a4a:	e14b      	b.n	8005ce4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005a58:	887b      	ldrh	r3, [r7, #2]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d102      	bne.n	8005a64 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a62:	e13f      	b.n	8005ce4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d003      	beq.n	8005a78 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2205      	movs	r2, #5
 8005a74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	887a      	ldrh	r2, [r7, #2]
 8005a88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	887a      	ldrh	r2, [r7, #2]
 8005a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	887a      	ldrh	r2, [r7, #2]
 8005a9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	887a      	ldrh	r2, [r7, #2]
 8005aa2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8005ac0:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005aca:	d908      	bls.n	8005ade <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ada:	605a      	str	r2, [r3, #4]
 8005adc:	e06f      	b.n	8005bbe <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005aec:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af8:	d126      	bne.n	8005b48 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10f      	bne.n	8005b26 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b14:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	085b      	lsrs	r3, r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b24:	e010      	b.n	8005b48 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b34:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	085b      	lsrs	r3, r3, #1
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3301      	adds	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b52:	d134      	bne.n	8005bbe <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b62:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d111      	bne.n	8005b98 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b82:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	085b      	lsrs	r3, r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005b96:	e012      	b.n	8005bbe <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ba6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d108      	bne.n	8005bdc <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bce:	4a4a      	ldr	r2, [pc, #296]	; (8005cf8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8005bd0:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd6:	4a49      	ldr	r2, [pc, #292]	; (8005cfc <HAL_SPI_TransmitReceive_DMA+0x308>)
 8005bd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8005bda:	e007      	b.n	8005bec <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be0:	4a47      	ldr	r2, [pc, #284]	; (8005d00 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8005be2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be8:	4a46      	ldr	r2, [pc, #280]	; (8005d04 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8005bea:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf0:	4a45      	ldr	r2, [pc, #276]	; (8005d08 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8005bf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	330c      	adds	r3, #12
 8005c06:	4619      	mov	r1, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c14:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005c16:	f7fe f83b 	bl	8003c90 <HAL_DMA_Start_IT>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00c      	beq.n	8005c3a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c24:	f043 0210 	orr.w	r2, r3, #16
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005c38:	e054      	b.n	8005ce4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0201 	orr.w	r2, r2, #1
 8005c48:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c4e:	2200      	movs	r2, #0
 8005c50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c56:	2200      	movs	r2, #0
 8005c58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5e:	2200      	movs	r2, #0
 8005c60:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c66:	2200      	movs	r2, #0
 8005c68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	4619      	mov	r1, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	330c      	adds	r3, #12
 8005c7a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c80:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005c82:	f7fe f805 	bl	8003c90 <HAL_DMA_Start_IT>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00c      	beq.n	8005ca6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c90:	f043 0210 	orr.w	r2, r3, #16
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005ca4:	e01e      	b.n	8005ce4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb0:	2b40      	cmp	r3, #64	; 0x40
 8005cb2:	d007      	beq.n	8005cc4 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cc2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0220 	orr.w	r2, r2, #32
 8005cd2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0202 	orr.w	r2, r2, #2
 8005ce2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	08005e81 	.word	0x08005e81
 8005cfc:	08005d49 	.word	0x08005d49
 8005d00:	08005e9d 	.word	0x08005e9d
 8005d04:	08005df1 	.word	0x08005df1
 8005d08:	08005eb9 	.word	0x08005eb9

08005d0c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d56:	f7fd fda1 	bl	800389c <HAL_GetTick>
 8005d5a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	d03c      	beq.n	8005de4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0220 	bic.w	r2, r2, #32
 8005d78:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10d      	bne.n	8005d9e <SPI_DMAReceiveCplt+0x56>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d8a:	d108      	bne.n	8005d9e <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0203 	bic.w	r2, r2, #3
 8005d9a:	605a      	str	r2, [r3, #4]
 8005d9c:	e007      	b.n	8005dae <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0201 	bic.w	r2, r2, #1
 8005dac:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	2164      	movs	r1, #100	; 0x64
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 f9ba 	bl	800612c <SPI_EndRxTransaction>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7fb fa37 	bl	8001250 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005de2:	e002      	b.n	8005dea <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff ff91 	bl	8005d0c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dfe:	f7fd fd4d 	bl	800389c <HAL_GetTick>
 8005e02:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	d030      	beq.n	8005e74 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0220 	bic.w	r2, r2, #32
 8005e20:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	2164      	movs	r1, #100	; 0x64
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 f9d8 	bl	80061dc <SPI_EndRxTxTransaction>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e36:	f043 0220 	orr.w	r2, r3, #32
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0203 	bic.w	r2, r2, #3
 8005e4c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f7fb f9ef 	bl	8001250 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005e72:	e002      	b.n	8005e7a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f7fb f9d7 	bl	8001228 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f7ff ff46 	bl	8005d20 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e94:	bf00      	nop
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f7ff ff42 	bl	8005d34 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005eb0:	bf00      	nop
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0203 	bic.w	r2, r2, #3
 8005ed4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eda:	f043 0210 	orr.w	r2, r3, #16
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f7fb f9b0 	bl	8001250 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ef0:	bf00      	nop
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	4613      	mov	r3, r2
 8005f06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f08:	f7fd fcc8 	bl	800389c <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	1a9b      	subs	r3, r3, r2
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	4413      	add	r3, r2
 8005f16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f18:	f7fd fcc0 	bl	800389c <HAL_GetTick>
 8005f1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f1e:	4b39      	ldr	r3, [pc, #228]	; (8006004 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	015b      	lsls	r3, r3, #5
 8005f24:	0d1b      	lsrs	r3, r3, #20
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	fb02 f303 	mul.w	r3, r2, r3
 8005f2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f2e:	e054      	b.n	8005fda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f36:	d050      	beq.n	8005fda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f38:	f7fd fcb0 	bl	800389c <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d902      	bls.n	8005f4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d13d      	bne.n	8005fca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f66:	d111      	bne.n	8005f8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f70:	d004      	beq.n	8005f7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f7a:	d107      	bne.n	8005f8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f94:	d10f      	bne.n	8005fb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e017      	b.n	8005ffa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	bf0c      	ite	eq
 8005fea:	2301      	moveq	r3, #1
 8005fec:	2300      	movne	r3, #0
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d19b      	bne.n	8005f30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3720      	adds	r7, #32
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20000000 	.word	0x20000000

08006008 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006016:	f7fd fc41 	bl	800389c <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601e:	1a9b      	subs	r3, r3, r2
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	4413      	add	r3, r2
 8006024:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006026:	f7fd fc39 	bl	800389c <HAL_GetTick>
 800602a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800602c:	4b3e      	ldr	r3, [pc, #248]	; (8006128 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	4613      	mov	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	00da      	lsls	r2, r3, #3
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	0d1b      	lsrs	r3, r3, #20
 800603c:	69fa      	ldr	r2, [r7, #28]
 800603e:	fb02 f303 	mul.w	r3, r2, r3
 8006042:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8006044:	e062      	b.n	800610c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800604c:	d109      	bne.n	8006062 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d106      	bne.n	8006062 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	330c      	adds	r3, #12
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006060:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006068:	d050      	beq.n	800610c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800606a:	f7fd fc17 	bl	800389c <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	429a      	cmp	r2, r3
 8006078:	d902      	bls.n	8006080 <SPI_WaitFifoStateUntilTimeout+0x78>
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d13d      	bne.n	80060fc <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800608e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006098:	d111      	bne.n	80060be <SPI_WaitFifoStateUntilTimeout+0xb6>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a2:	d004      	beq.n	80060ae <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ac:	d107      	bne.n	80060be <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c6:	d10f      	bne.n	80060e8 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e010      	b.n	800611e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	3b01      	subs	r3, #1
 800610a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	4013      	ands	r3, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	429a      	cmp	r2, r3
 800611a:	d194      	bne.n	8006046 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3720      	adds	r7, #32
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000000 	.word	0x20000000

0800612c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af02      	add	r7, sp, #8
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006140:	d111      	bne.n	8006166 <SPI_EndRxTransaction+0x3a>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800614a:	d004      	beq.n	8006156 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006154:	d107      	bne.n	8006166 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006164:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2200      	movs	r2, #0
 800616e:	2180      	movs	r1, #128	; 0x80
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f7ff fec1 	bl	8005ef8 <SPI_WaitFlagStateUntilTimeout>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d007      	beq.n	800618c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006180:	f043 0220 	orr.w	r2, r3, #32
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e023      	b.n	80061d4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006194:	d11d      	bne.n	80061d2 <SPI_EndRxTransaction+0xa6>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800619e:	d004      	beq.n	80061aa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a8:	d113      	bne.n	80061d2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7ff ff26 	bl	8006008 <SPI_WaitFifoStateUntilTimeout>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d007      	beq.n	80061d2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c6:	f043 0220 	orr.w	r2, r3, #32
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e000      	b.n	80061d4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af02      	add	r7, sp, #8
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f7ff ff07 	bl	8006008 <SPI_WaitFifoStateUntilTimeout>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d007      	beq.n	8006210 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006204:	f043 0220 	orr.w	r2, r3, #32
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e027      	b.n	8006260 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2200      	movs	r2, #0
 8006218:	2180      	movs	r1, #128	; 0x80
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f7ff fe6c 	bl	8005ef8 <SPI_WaitFlagStateUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d007      	beq.n	8006236 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800622a:	f043 0220 	orr.w	r2, r3, #32
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e014      	b.n	8006260 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2200      	movs	r2, #0
 800623e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f7ff fee0 	bl	8006008 <SPI_WaitFifoStateUntilTimeout>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d007      	beq.n	800625e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006252:	f043 0220 	orr.w	r2, r3, #32
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e000      	b.n	8006260 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e049      	b.n	800630e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fd f852 	bl	8003338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4619      	mov	r1, r3
 80062a6:	4610      	mov	r0, r2
 80062a8:	f000 fd2c 	bl	8006d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b01      	cmp	r3, #1
 800632a:	d001      	beq.n	8006330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e04f      	b.n	80063d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68da      	ldr	r2, [r3, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0201 	orr.w	r2, r2, #1
 8006346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a23      	ldr	r2, [pc, #140]	; (80063dc <HAL_TIM_Base_Start_IT+0xc4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d01d      	beq.n	800638e <HAL_TIM_Base_Start_IT+0x76>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635a:	d018      	beq.n	800638e <HAL_TIM_Base_Start_IT+0x76>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a1f      	ldr	r2, [pc, #124]	; (80063e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d013      	beq.n	800638e <HAL_TIM_Base_Start_IT+0x76>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a1e      	ldr	r2, [pc, #120]	; (80063e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00e      	beq.n	800638e <HAL_TIM_Base_Start_IT+0x76>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a1c      	ldr	r2, [pc, #112]	; (80063e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d009      	beq.n	800638e <HAL_TIM_Base_Start_IT+0x76>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a1b      	ldr	r2, [pc, #108]	; (80063ec <HAL_TIM_Base_Start_IT+0xd4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d004      	beq.n	800638e <HAL_TIM_Base_Start_IT+0x76>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a19      	ldr	r2, [pc, #100]	; (80063f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d115      	bne.n	80063ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	4b17      	ldr	r3, [pc, #92]	; (80063f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006396:	4013      	ands	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2b06      	cmp	r3, #6
 800639e:	d015      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0xb4>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a6:	d011      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b8:	e008      	b.n	80063cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0201 	orr.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	e000      	b.n	80063ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	40012c00 	.word	0x40012c00
 80063e0:	40000400 	.word	0x40000400
 80063e4:	40000800 	.word	0x40000800
 80063e8:	40000c00 	.word	0x40000c00
 80063ec:	40013400 	.word	0x40013400
 80063f0:	40014000 	.word	0x40014000
 80063f4:	00010007 	.word	0x00010007

080063f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e049      	b.n	800649e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f841 	bl	80064a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3304      	adds	r3, #4
 8006434:	4619      	mov	r1, r3
 8006436:	4610      	mov	r0, r2
 8006438:	f000 fc64 	bl	8006d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
	...

080064bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d109      	bne.n	80064e0 <HAL_TIM_PWM_Start+0x24>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	bf14      	ite	ne
 80064d8:	2301      	movne	r3, #1
 80064da:	2300      	moveq	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	e03c      	b.n	800655a <HAL_TIM_PWM_Start+0x9e>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d109      	bne.n	80064fa <HAL_TIM_PWM_Start+0x3e>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	bf14      	ite	ne
 80064f2:	2301      	movne	r3, #1
 80064f4:	2300      	moveq	r3, #0
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	e02f      	b.n	800655a <HAL_TIM_PWM_Start+0x9e>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d109      	bne.n	8006514 <HAL_TIM_PWM_Start+0x58>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b01      	cmp	r3, #1
 800650a:	bf14      	ite	ne
 800650c:	2301      	movne	r3, #1
 800650e:	2300      	moveq	r3, #0
 8006510:	b2db      	uxtb	r3, r3
 8006512:	e022      	b.n	800655a <HAL_TIM_PWM_Start+0x9e>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b0c      	cmp	r3, #12
 8006518:	d109      	bne.n	800652e <HAL_TIM_PWM_Start+0x72>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b01      	cmp	r3, #1
 8006524:	bf14      	ite	ne
 8006526:	2301      	movne	r3, #1
 8006528:	2300      	moveq	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	e015      	b.n	800655a <HAL_TIM_PWM_Start+0x9e>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b10      	cmp	r3, #16
 8006532:	d109      	bne.n	8006548 <HAL_TIM_PWM_Start+0x8c>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b01      	cmp	r3, #1
 800653e:	bf14      	ite	ne
 8006540:	2301      	movne	r3, #1
 8006542:	2300      	moveq	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	e008      	b.n	800655a <HAL_TIM_PWM_Start+0x9e>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b01      	cmp	r3, #1
 8006552:	bf14      	ite	ne
 8006554:	2301      	movne	r3, #1
 8006556:	2300      	moveq	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e09c      	b.n	800669c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d104      	bne.n	8006572 <HAL_TIM_PWM_Start+0xb6>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006570:	e023      	b.n	80065ba <HAL_TIM_PWM_Start+0xfe>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b04      	cmp	r3, #4
 8006576:	d104      	bne.n	8006582 <HAL_TIM_PWM_Start+0xc6>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006580:	e01b      	b.n	80065ba <HAL_TIM_PWM_Start+0xfe>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b08      	cmp	r3, #8
 8006586:	d104      	bne.n	8006592 <HAL_TIM_PWM_Start+0xd6>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006590:	e013      	b.n	80065ba <HAL_TIM_PWM_Start+0xfe>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b0c      	cmp	r3, #12
 8006596:	d104      	bne.n	80065a2 <HAL_TIM_PWM_Start+0xe6>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065a0:	e00b      	b.n	80065ba <HAL_TIM_PWM_Start+0xfe>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b10      	cmp	r3, #16
 80065a6:	d104      	bne.n	80065b2 <HAL_TIM_PWM_Start+0xf6>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065b0:	e003      	b.n	80065ba <HAL_TIM_PWM_Start+0xfe>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2202      	movs	r2, #2
 80065b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2201      	movs	r2, #1
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 ffa8 	bl	8007518 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a35      	ldr	r2, [pc, #212]	; (80066a4 <HAL_TIM_PWM_Start+0x1e8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d013      	beq.n	80065fa <HAL_TIM_PWM_Start+0x13e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a34      	ldr	r2, [pc, #208]	; (80066a8 <HAL_TIM_PWM_Start+0x1ec>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00e      	beq.n	80065fa <HAL_TIM_PWM_Start+0x13e>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a32      	ldr	r2, [pc, #200]	; (80066ac <HAL_TIM_PWM_Start+0x1f0>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d009      	beq.n	80065fa <HAL_TIM_PWM_Start+0x13e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a31      	ldr	r2, [pc, #196]	; (80066b0 <HAL_TIM_PWM_Start+0x1f4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d004      	beq.n	80065fa <HAL_TIM_PWM_Start+0x13e>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a2f      	ldr	r2, [pc, #188]	; (80066b4 <HAL_TIM_PWM_Start+0x1f8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d101      	bne.n	80065fe <HAL_TIM_PWM_Start+0x142>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <HAL_TIM_PWM_Start+0x144>
 80065fe:	2300      	movs	r3, #0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d007      	beq.n	8006614 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006612:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a22      	ldr	r2, [pc, #136]	; (80066a4 <HAL_TIM_PWM_Start+0x1e8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d01d      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006626:	d018      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a22      	ldr	r2, [pc, #136]	; (80066b8 <HAL_TIM_PWM_Start+0x1fc>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d013      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a21      	ldr	r2, [pc, #132]	; (80066bc <HAL_TIM_PWM_Start+0x200>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00e      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a1f      	ldr	r2, [pc, #124]	; (80066c0 <HAL_TIM_PWM_Start+0x204>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d009      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a17      	ldr	r2, [pc, #92]	; (80066a8 <HAL_TIM_PWM_Start+0x1ec>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d004      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a15      	ldr	r2, [pc, #84]	; (80066ac <HAL_TIM_PWM_Start+0x1f0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d115      	bne.n	8006686 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	4b18      	ldr	r3, [pc, #96]	; (80066c4 <HAL_TIM_PWM_Start+0x208>)
 8006662:	4013      	ands	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b06      	cmp	r3, #6
 800666a:	d015      	beq.n	8006698 <HAL_TIM_PWM_Start+0x1dc>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006672:	d011      	beq.n	8006698 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0201 	orr.w	r2, r2, #1
 8006682:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006684:	e008      	b.n	8006698 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0201 	orr.w	r2, r2, #1
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	e000      	b.n	800669a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006698:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	40012c00 	.word	0x40012c00
 80066a8:	40013400 	.word	0x40013400
 80066ac:	40014000 	.word	0x40014000
 80066b0:	40014400 	.word	0x40014400
 80066b4:	40014800 	.word	0x40014800
 80066b8:	40000400 	.word	0x40000400
 80066bc:	40000800 	.word	0x40000800
 80066c0:	40000c00 	.word	0x40000c00
 80066c4:	00010007 	.word	0x00010007

080066c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d122      	bne.n	8006724 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d11b      	bne.n	8006724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f06f 0202 	mvn.w	r2, #2
 80066f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fadc 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 8006710:	e005      	b.n	800671e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 face 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fadf 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0304 	and.w	r3, r3, #4
 800672e:	2b04      	cmp	r3, #4
 8006730:	d122      	bne.n	8006778 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b04      	cmp	r3, #4
 800673e:	d11b      	bne.n	8006778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0204 	mvn.w	r2, #4
 8006748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2202      	movs	r2, #2
 800674e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fab2 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 8006764:	e005      	b.n	8006772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 faa4 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fab5 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	f003 0308 	and.w	r3, r3, #8
 8006782:	2b08      	cmp	r3, #8
 8006784:	d122      	bne.n	80067cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	2b08      	cmp	r3, #8
 8006792:	d11b      	bne.n	80067cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f06f 0208 	mvn.w	r2, #8
 800679c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2204      	movs	r2, #4
 80067a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fa88 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 80067b8:	e005      	b.n	80067c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fa7a 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fa8b 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f003 0310 	and.w	r3, r3, #16
 80067d6:	2b10      	cmp	r3, #16
 80067d8:	d122      	bne.n	8006820 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f003 0310 	and.w	r3, r3, #16
 80067e4:	2b10      	cmp	r3, #16
 80067e6:	d11b      	bne.n	8006820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f06f 0210 	mvn.w	r2, #16
 80067f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2208      	movs	r2, #8
 80067f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fa5e 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 800680c:	e005      	b.n	800681a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fa50 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fa61 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b01      	cmp	r3, #1
 800682c:	d10e      	bne.n	800684c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b01      	cmp	r3, #1
 800683a:	d107      	bne.n	800684c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f06f 0201 	mvn.w	r2, #1
 8006844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fa fcc8 	bl	80011dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006856:	2b80      	cmp	r3, #128	; 0x80
 8006858:	d10e      	bne.n	8006878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006864:	2b80      	cmp	r3, #128	; 0x80
 8006866:	d107      	bne.n	8006878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 ff08 	bl	8007688 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006886:	d10e      	bne.n	80068a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006892:	2b80      	cmp	r3, #128	; 0x80
 8006894:	d107      	bne.n	80068a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800689e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fefb 	bl	800769c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b0:	2b40      	cmp	r3, #64	; 0x40
 80068b2:	d10e      	bne.n	80068d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068be:	2b40      	cmp	r3, #64	; 0x40
 80068c0:	d107      	bne.n	80068d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fa0f 	bl	8006cf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	f003 0320 	and.w	r3, r3, #32
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d10e      	bne.n	80068fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	d107      	bne.n	80068fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f06f 0220 	mvn.w	r2, #32
 80068f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 febb 	bl	8007674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068fe:	bf00      	nop
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800691a:	2b01      	cmp	r3, #1
 800691c:	d101      	bne.n	8006922 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800691e:	2302      	movs	r3, #2
 8006920:	e0fd      	b.n	8006b1e <HAL_TIM_PWM_ConfigChannel+0x216>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b14      	cmp	r3, #20
 800692e:	f200 80f0 	bhi.w	8006b12 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006932:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	0800698d 	.word	0x0800698d
 800693c:	08006b13 	.word	0x08006b13
 8006940:	08006b13 	.word	0x08006b13
 8006944:	08006b13 	.word	0x08006b13
 8006948:	080069cd 	.word	0x080069cd
 800694c:	08006b13 	.word	0x08006b13
 8006950:	08006b13 	.word	0x08006b13
 8006954:	08006b13 	.word	0x08006b13
 8006958:	08006a0f 	.word	0x08006a0f
 800695c:	08006b13 	.word	0x08006b13
 8006960:	08006b13 	.word	0x08006b13
 8006964:	08006b13 	.word	0x08006b13
 8006968:	08006a4f 	.word	0x08006a4f
 800696c:	08006b13 	.word	0x08006b13
 8006970:	08006b13 	.word	0x08006b13
 8006974:	08006b13 	.word	0x08006b13
 8006978:	08006a91 	.word	0x08006a91
 800697c:	08006b13 	.word	0x08006b13
 8006980:	08006b13 	.word	0x08006b13
 8006984:	08006b13 	.word	0x08006b13
 8006988:	08006ad1 	.word	0x08006ad1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68b9      	ldr	r1, [r7, #8]
 8006992:	4618      	mov	r0, r3
 8006994:	f000 fa50 	bl	8006e38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	699a      	ldr	r2, [r3, #24]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0208 	orr.w	r2, r2, #8
 80069a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699a      	ldr	r2, [r3, #24]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0204 	bic.w	r2, r2, #4
 80069b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6999      	ldr	r1, [r3, #24]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	619a      	str	r2, [r3, #24]
      break;
 80069ca:	e0a3      	b.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68b9      	ldr	r1, [r7, #8]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 fac0 	bl	8006f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	699a      	ldr	r2, [r3, #24]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699a      	ldr	r2, [r3, #24]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6999      	ldr	r1, [r3, #24]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	021a      	lsls	r2, r3, #8
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	619a      	str	r2, [r3, #24]
      break;
 8006a0c:	e082      	b.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68b9      	ldr	r1, [r7, #8]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 fb29 	bl	800706c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69da      	ldr	r2, [r3, #28]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0208 	orr.w	r2, r2, #8
 8006a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69da      	ldr	r2, [r3, #28]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0204 	bic.w	r2, r2, #4
 8006a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69d9      	ldr	r1, [r3, #28]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	61da      	str	r2, [r3, #28]
      break;
 8006a4c:	e062      	b.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68b9      	ldr	r1, [r7, #8]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 fb91 	bl	800717c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69da      	ldr	r2, [r3, #28]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69da      	ldr	r2, [r3, #28]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69d9      	ldr	r1, [r3, #28]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	021a      	lsls	r2, r3, #8
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	61da      	str	r2, [r3, #28]
      break;
 8006a8e:	e041      	b.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fbda 	bl	8007250 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0208 	orr.w	r2, r2, #8
 8006aaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0204 	bic.w	r2, r2, #4
 8006aba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	691a      	ldr	r2, [r3, #16]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ace:	e021      	b.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68b9      	ldr	r1, [r7, #8]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fc1e 	bl	8007318 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006afa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	021a      	lsls	r2, r3, #8
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b10:	e000      	b.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006b12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop

08006b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_TIM_ConfigClockSource+0x18>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e0b5      	b.n	8006cac <HAL_TIM_ConfigClockSource+0x184>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b7c:	d03e      	beq.n	8006bfc <HAL_TIM_ConfigClockSource+0xd4>
 8006b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b82:	f200 8087 	bhi.w	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8a:	f000 8085 	beq.w	8006c98 <HAL_TIM_ConfigClockSource+0x170>
 8006b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b92:	d87f      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006b94:	2b70      	cmp	r3, #112	; 0x70
 8006b96:	d01a      	beq.n	8006bce <HAL_TIM_ConfigClockSource+0xa6>
 8006b98:	2b70      	cmp	r3, #112	; 0x70
 8006b9a:	d87b      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006b9c:	2b60      	cmp	r3, #96	; 0x60
 8006b9e:	d050      	beq.n	8006c42 <HAL_TIM_ConfigClockSource+0x11a>
 8006ba0:	2b60      	cmp	r3, #96	; 0x60
 8006ba2:	d877      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba4:	2b50      	cmp	r3, #80	; 0x50
 8006ba6:	d03c      	beq.n	8006c22 <HAL_TIM_ConfigClockSource+0xfa>
 8006ba8:	2b50      	cmp	r3, #80	; 0x50
 8006baa:	d873      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	d058      	beq.n	8006c62 <HAL_TIM_ConfigClockSource+0x13a>
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d86f      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb4:	2b30      	cmp	r3, #48	; 0x30
 8006bb6:	d064      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x15a>
 8006bb8:	2b30      	cmp	r3, #48	; 0x30
 8006bba:	d86b      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d060      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x15a>
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d867      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d05c      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x15a>
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	d05a      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006bcc:	e062      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6818      	ldr	r0, [r3, #0]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	6899      	ldr	r1, [r3, #8]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f000 fc7b 	bl	80074d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bf0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	609a      	str	r2, [r3, #8]
      break;
 8006bfa:	e04e      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	6899      	ldr	r1, [r3, #8]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f000 fc64 	bl	80074d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c1e:	609a      	str	r2, [r3, #8]
      break;
 8006c20:	e03b      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6818      	ldr	r0, [r3, #0]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	6859      	ldr	r1, [r3, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f000 fbd8 	bl	80073e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2150      	movs	r1, #80	; 0x50
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fc31 	bl	80074a2 <TIM_ITRx_SetConfig>
      break;
 8006c40:	e02b      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6818      	ldr	r0, [r3, #0]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	6859      	ldr	r1, [r3, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f000 fbf7 	bl	8007442 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2160      	movs	r1, #96	; 0x60
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 fc21 	bl	80074a2 <TIM_ITRx_SetConfig>
      break;
 8006c60:	e01b      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6818      	ldr	r0, [r3, #0]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6859      	ldr	r1, [r3, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f000 fbb8 	bl	80073e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2140      	movs	r1, #64	; 0x40
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fc11 	bl	80074a2 <TIM_ITRx_SetConfig>
      break;
 8006c80:	e00b      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	f000 fc08 	bl	80074a2 <TIM_ITRx_SetConfig>
        break;
 8006c92:	e002      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006c94:	bf00      	nop
 8006c96:	e000      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006c98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a40      	ldr	r2, [pc, #256]	; (8006e18 <TIM_Base_SetConfig+0x114>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d013      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d22:	d00f      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a3d      	ldr	r2, [pc, #244]	; (8006e1c <TIM_Base_SetConfig+0x118>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00b      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a3c      	ldr	r2, [pc, #240]	; (8006e20 <TIM_Base_SetConfig+0x11c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d007      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a3b      	ldr	r2, [pc, #236]	; (8006e24 <TIM_Base_SetConfig+0x120>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a3a      	ldr	r2, [pc, #232]	; (8006e28 <TIM_Base_SetConfig+0x124>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d108      	bne.n	8006d56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a2f      	ldr	r2, [pc, #188]	; (8006e18 <TIM_Base_SetConfig+0x114>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d01f      	beq.n	8006d9e <TIM_Base_SetConfig+0x9a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d64:	d01b      	beq.n	8006d9e <TIM_Base_SetConfig+0x9a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a2c      	ldr	r2, [pc, #176]	; (8006e1c <TIM_Base_SetConfig+0x118>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d017      	beq.n	8006d9e <TIM_Base_SetConfig+0x9a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a2b      	ldr	r2, [pc, #172]	; (8006e20 <TIM_Base_SetConfig+0x11c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d013      	beq.n	8006d9e <TIM_Base_SetConfig+0x9a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a2a      	ldr	r2, [pc, #168]	; (8006e24 <TIM_Base_SetConfig+0x120>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00f      	beq.n	8006d9e <TIM_Base_SetConfig+0x9a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a29      	ldr	r2, [pc, #164]	; (8006e28 <TIM_Base_SetConfig+0x124>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00b      	beq.n	8006d9e <TIM_Base_SetConfig+0x9a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a28      	ldr	r2, [pc, #160]	; (8006e2c <TIM_Base_SetConfig+0x128>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d007      	beq.n	8006d9e <TIM_Base_SetConfig+0x9a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a27      	ldr	r2, [pc, #156]	; (8006e30 <TIM_Base_SetConfig+0x12c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d003      	beq.n	8006d9e <TIM_Base_SetConfig+0x9a>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a26      	ldr	r2, [pc, #152]	; (8006e34 <TIM_Base_SetConfig+0x130>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d108      	bne.n	8006db0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a10      	ldr	r2, [pc, #64]	; (8006e18 <TIM_Base_SetConfig+0x114>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00f      	beq.n	8006dfc <TIM_Base_SetConfig+0xf8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a12      	ldr	r2, [pc, #72]	; (8006e28 <TIM_Base_SetConfig+0x124>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d00b      	beq.n	8006dfc <TIM_Base_SetConfig+0xf8>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a11      	ldr	r2, [pc, #68]	; (8006e2c <TIM_Base_SetConfig+0x128>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d007      	beq.n	8006dfc <TIM_Base_SetConfig+0xf8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a10      	ldr	r2, [pc, #64]	; (8006e30 <TIM_Base_SetConfig+0x12c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d003      	beq.n	8006dfc <TIM_Base_SetConfig+0xf8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a0f      	ldr	r2, [pc, #60]	; (8006e34 <TIM_Base_SetConfig+0x130>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d103      	bne.n	8006e04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	615a      	str	r2, [r3, #20]
}
 8006e0a:	bf00      	nop
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40012c00 	.word	0x40012c00
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40000800 	.word	0x40000800
 8006e24:	40000c00 	.word	0x40000c00
 8006e28:	40013400 	.word	0x40013400
 8006e2c:	40014000 	.word	0x40014000
 8006e30:	40014400 	.word	0x40014400
 8006e34:	40014800 	.word	0x40014800

08006e38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	f023 0201 	bic.w	r2, r3, #1
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0303 	bic.w	r3, r3, #3
 8006e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f023 0302 	bic.w	r3, r3, #2
 8006e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a2c      	ldr	r2, [pc, #176]	; (8006f44 <TIM_OC1_SetConfig+0x10c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d00f      	beq.n	8006eb8 <TIM_OC1_SetConfig+0x80>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a2b      	ldr	r2, [pc, #172]	; (8006f48 <TIM_OC1_SetConfig+0x110>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00b      	beq.n	8006eb8 <TIM_OC1_SetConfig+0x80>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a2a      	ldr	r2, [pc, #168]	; (8006f4c <TIM_OC1_SetConfig+0x114>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d007      	beq.n	8006eb8 <TIM_OC1_SetConfig+0x80>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a29      	ldr	r2, [pc, #164]	; (8006f50 <TIM_OC1_SetConfig+0x118>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d003      	beq.n	8006eb8 <TIM_OC1_SetConfig+0x80>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a28      	ldr	r2, [pc, #160]	; (8006f54 <TIM_OC1_SetConfig+0x11c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d10c      	bne.n	8006ed2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f023 0308 	bic.w	r3, r3, #8
 8006ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f023 0304 	bic.w	r3, r3, #4
 8006ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a1b      	ldr	r2, [pc, #108]	; (8006f44 <TIM_OC1_SetConfig+0x10c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d00f      	beq.n	8006efa <TIM_OC1_SetConfig+0xc2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a1a      	ldr	r2, [pc, #104]	; (8006f48 <TIM_OC1_SetConfig+0x110>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00b      	beq.n	8006efa <TIM_OC1_SetConfig+0xc2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a19      	ldr	r2, [pc, #100]	; (8006f4c <TIM_OC1_SetConfig+0x114>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d007      	beq.n	8006efa <TIM_OC1_SetConfig+0xc2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a18      	ldr	r2, [pc, #96]	; (8006f50 <TIM_OC1_SetConfig+0x118>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d003      	beq.n	8006efa <TIM_OC1_SetConfig+0xc2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a17      	ldr	r2, [pc, #92]	; (8006f54 <TIM_OC1_SetConfig+0x11c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d111      	bne.n	8006f1e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	621a      	str	r2, [r3, #32]
}
 8006f38:	bf00      	nop
 8006f3a:	371c      	adds	r7, #28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	40012c00 	.word	0x40012c00
 8006f48:	40013400 	.word	0x40013400
 8006f4c:	40014000 	.word	0x40014000
 8006f50:	40014400 	.word	0x40014400
 8006f54:	40014800 	.word	0x40014800

08006f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	f023 0210 	bic.w	r2, r3, #16
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	021b      	lsls	r3, r3, #8
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f023 0320 	bic.w	r3, r3, #32
 8006fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	011b      	lsls	r3, r3, #4
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a28      	ldr	r2, [pc, #160]	; (8007058 <TIM_OC2_SetConfig+0x100>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d003      	beq.n	8006fc4 <TIM_OC2_SetConfig+0x6c>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a27      	ldr	r2, [pc, #156]	; (800705c <TIM_OC2_SetConfig+0x104>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d10d      	bne.n	8006fe0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a1d      	ldr	r2, [pc, #116]	; (8007058 <TIM_OC2_SetConfig+0x100>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00f      	beq.n	8007008 <TIM_OC2_SetConfig+0xb0>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a1c      	ldr	r2, [pc, #112]	; (800705c <TIM_OC2_SetConfig+0x104>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d00b      	beq.n	8007008 <TIM_OC2_SetConfig+0xb0>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a1b      	ldr	r2, [pc, #108]	; (8007060 <TIM_OC2_SetConfig+0x108>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d007      	beq.n	8007008 <TIM_OC2_SetConfig+0xb0>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a1a      	ldr	r2, [pc, #104]	; (8007064 <TIM_OC2_SetConfig+0x10c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d003      	beq.n	8007008 <TIM_OC2_SetConfig+0xb0>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a19      	ldr	r2, [pc, #100]	; (8007068 <TIM_OC2_SetConfig+0x110>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d113      	bne.n	8007030 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800700e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4313      	orrs	r3, r2
 8007022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	4313      	orrs	r3, r2
 800702e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	40012c00 	.word	0x40012c00
 800705c:	40013400 	.word	0x40013400
 8007060:	40014000 	.word	0x40014000
 8007064:	40014400 	.word	0x40014400
 8007068:	40014800 	.word	0x40014800

0800706c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800709a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 0303 	bic.w	r3, r3, #3
 80070a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	021b      	lsls	r3, r3, #8
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a27      	ldr	r2, [pc, #156]	; (8007168 <TIM_OC3_SetConfig+0xfc>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d003      	beq.n	80070d6 <TIM_OC3_SetConfig+0x6a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a26      	ldr	r2, [pc, #152]	; (800716c <TIM_OC3_SetConfig+0x100>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d10d      	bne.n	80070f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	021b      	lsls	r3, r3, #8
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a1c      	ldr	r2, [pc, #112]	; (8007168 <TIM_OC3_SetConfig+0xfc>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d00f      	beq.n	800711a <TIM_OC3_SetConfig+0xae>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a1b      	ldr	r2, [pc, #108]	; (800716c <TIM_OC3_SetConfig+0x100>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d00b      	beq.n	800711a <TIM_OC3_SetConfig+0xae>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a1a      	ldr	r2, [pc, #104]	; (8007170 <TIM_OC3_SetConfig+0x104>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d007      	beq.n	800711a <TIM_OC3_SetConfig+0xae>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a19      	ldr	r2, [pc, #100]	; (8007174 <TIM_OC3_SetConfig+0x108>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d003      	beq.n	800711a <TIM_OC3_SetConfig+0xae>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a18      	ldr	r2, [pc, #96]	; (8007178 <TIM_OC3_SetConfig+0x10c>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d113      	bne.n	8007142 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	4313      	orrs	r3, r2
 8007134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	621a      	str	r2, [r3, #32]
}
 800715c:	bf00      	nop
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	40012c00 	.word	0x40012c00
 800716c:	40013400 	.word	0x40013400
 8007170:	40014000 	.word	0x40014000
 8007174:	40014400 	.word	0x40014400
 8007178:	40014800 	.word	0x40014800

0800717c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	021b      	lsls	r3, r3, #8
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	031b      	lsls	r3, r3, #12
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a18      	ldr	r2, [pc, #96]	; (800723c <TIM_OC4_SetConfig+0xc0>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00f      	beq.n	8007200 <TIM_OC4_SetConfig+0x84>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a17      	ldr	r2, [pc, #92]	; (8007240 <TIM_OC4_SetConfig+0xc4>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00b      	beq.n	8007200 <TIM_OC4_SetConfig+0x84>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a16      	ldr	r2, [pc, #88]	; (8007244 <TIM_OC4_SetConfig+0xc8>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d007      	beq.n	8007200 <TIM_OC4_SetConfig+0x84>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a15      	ldr	r2, [pc, #84]	; (8007248 <TIM_OC4_SetConfig+0xcc>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d003      	beq.n	8007200 <TIM_OC4_SetConfig+0x84>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a14      	ldr	r2, [pc, #80]	; (800724c <TIM_OC4_SetConfig+0xd0>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d109      	bne.n	8007214 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007206:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	019b      	lsls	r3, r3, #6
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	4313      	orrs	r3, r2
 8007212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	621a      	str	r2, [r3, #32]
}
 800722e:	bf00      	nop
 8007230:	371c      	adds	r7, #28
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	40012c00 	.word	0x40012c00
 8007240:	40013400 	.word	0x40013400
 8007244:	40014000 	.word	0x40014000
 8007248:	40014400 	.word	0x40014400
 800724c:	40014800 	.word	0x40014800

08007250 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800727e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4313      	orrs	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007294:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	041b      	lsls	r3, r3, #16
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	4313      	orrs	r3, r2
 80072a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a17      	ldr	r2, [pc, #92]	; (8007304 <TIM_OC5_SetConfig+0xb4>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d00f      	beq.n	80072ca <TIM_OC5_SetConfig+0x7a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a16      	ldr	r2, [pc, #88]	; (8007308 <TIM_OC5_SetConfig+0xb8>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d00b      	beq.n	80072ca <TIM_OC5_SetConfig+0x7a>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a15      	ldr	r2, [pc, #84]	; (800730c <TIM_OC5_SetConfig+0xbc>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d007      	beq.n	80072ca <TIM_OC5_SetConfig+0x7a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a14      	ldr	r2, [pc, #80]	; (8007310 <TIM_OC5_SetConfig+0xc0>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d003      	beq.n	80072ca <TIM_OC5_SetConfig+0x7a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a13      	ldr	r2, [pc, #76]	; (8007314 <TIM_OC5_SetConfig+0xc4>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d109      	bne.n	80072de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	021b      	lsls	r3, r3, #8
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	4313      	orrs	r3, r2
 80072dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	621a      	str	r2, [r3, #32]
}
 80072f8:	bf00      	nop
 80072fa:	371c      	adds	r7, #28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	40012c00 	.word	0x40012c00
 8007308:	40013400 	.word	0x40013400
 800730c:	40014000 	.word	0x40014000
 8007310:	40014400 	.word	0x40014400
 8007314:	40014800 	.word	0x40014800

08007318 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800734a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	021b      	lsls	r3, r3, #8
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	4313      	orrs	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800735e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	051b      	lsls	r3, r3, #20
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	4313      	orrs	r3, r2
 800736a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a18      	ldr	r2, [pc, #96]	; (80073d0 <TIM_OC6_SetConfig+0xb8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00f      	beq.n	8007394 <TIM_OC6_SetConfig+0x7c>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a17      	ldr	r2, [pc, #92]	; (80073d4 <TIM_OC6_SetConfig+0xbc>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d00b      	beq.n	8007394 <TIM_OC6_SetConfig+0x7c>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a16      	ldr	r2, [pc, #88]	; (80073d8 <TIM_OC6_SetConfig+0xc0>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d007      	beq.n	8007394 <TIM_OC6_SetConfig+0x7c>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a15      	ldr	r2, [pc, #84]	; (80073dc <TIM_OC6_SetConfig+0xc4>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d003      	beq.n	8007394 <TIM_OC6_SetConfig+0x7c>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a14      	ldr	r2, [pc, #80]	; (80073e0 <TIM_OC6_SetConfig+0xc8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d109      	bne.n	80073a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800739a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	029b      	lsls	r3, r3, #10
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	621a      	str	r2, [r3, #32]
}
 80073c2:	bf00      	nop
 80073c4:	371c      	adds	r7, #28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	40012c00 	.word	0x40012c00
 80073d4:	40013400 	.word	0x40013400
 80073d8:	40014000 	.word	0x40014000
 80073dc:	40014400 	.word	0x40014400
 80073e0:	40014800 	.word	0x40014800

080073e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f023 0201 	bic.w	r2, r3, #1
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800740e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	011b      	lsls	r3, r3, #4
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4313      	orrs	r3, r2
 8007418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f023 030a 	bic.w	r3, r3, #10
 8007420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	621a      	str	r2, [r3, #32]
}
 8007436:	bf00      	nop
 8007438:	371c      	adds	r7, #28
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007442:	b480      	push	{r7}
 8007444:	b087      	sub	sp, #28
 8007446:	af00      	add	r7, sp, #0
 8007448:	60f8      	str	r0, [r7, #12]
 800744a:	60b9      	str	r1, [r7, #8]
 800744c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	f023 0210 	bic.w	r2, r3, #16
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800746c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	031b      	lsls	r3, r3, #12
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	4313      	orrs	r3, r2
 8007476:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800747e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	621a      	str	r2, [r3, #32]
}
 8007496:	bf00      	nop
 8007498:	371c      	adds	r7, #28
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b085      	sub	sp, #20
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4313      	orrs	r3, r2
 80074c0:	f043 0307 	orr.w	r3, r3, #7
 80074c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	609a      	str	r2, [r3, #8]
}
 80074cc:	bf00      	nop
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	021a      	lsls	r2, r3, #8
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	431a      	orrs	r2, r3
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	4313      	orrs	r3, r2
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	4313      	orrs	r3, r2
 8007504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	609a      	str	r2, [r3, #8]
}
 800750c:	bf00      	nop
 800750e:	371c      	adds	r7, #28
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f003 031f 	and.w	r3, r3, #31
 800752a:	2201      	movs	r2, #1
 800752c:	fa02 f303 	lsl.w	r3, r2, r3
 8007530:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a1a      	ldr	r2, [r3, #32]
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	43db      	mvns	r3, r3
 800753a:	401a      	ands	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6a1a      	ldr	r2, [r3, #32]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f003 031f 	and.w	r3, r3, #31
 800754a:	6879      	ldr	r1, [r7, #4]
 800754c:	fa01 f303 	lsl.w	r3, r1, r3
 8007550:	431a      	orrs	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	621a      	str	r2, [r3, #32]
}
 8007556:	bf00      	nop
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
	...

08007564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007574:	2b01      	cmp	r3, #1
 8007576:	d101      	bne.n	800757c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007578:	2302      	movs	r3, #2
 800757a:	e068      	b.n	800764e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a2e      	ldr	r2, [pc, #184]	; (800765c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d004      	beq.n	80075b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a2d      	ldr	r2, [pc, #180]	; (8007660 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d108      	bne.n	80075c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4313      	orrs	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a1e      	ldr	r2, [pc, #120]	; (800765c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d01d      	beq.n	8007622 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ee:	d018      	beq.n	8007622 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a1b      	ldr	r2, [pc, #108]	; (8007664 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d013      	beq.n	8007622 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a1a      	ldr	r2, [pc, #104]	; (8007668 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d00e      	beq.n	8007622 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a18      	ldr	r2, [pc, #96]	; (800766c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d009      	beq.n	8007622 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a13      	ldr	r2, [pc, #76]	; (8007660 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d004      	beq.n	8007622 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a14      	ldr	r2, [pc, #80]	; (8007670 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d10c      	bne.n	800763c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	4313      	orrs	r3, r2
 8007632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	40012c00 	.word	0x40012c00
 8007660:	40013400 	.word	0x40013400
 8007664:	40000400 	.word	0x40000400
 8007668:	40000800 	.word	0x40000800
 800766c:	40000c00 	.word	0x40000c00
 8007670:	40014000 	.word	0x40014000

08007674 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e040      	b.n	8007744 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d106      	bne.n	80076d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7fb febc 	bl	8003450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2224      	movs	r2, #36	; 0x24
 80076dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0201 	bic.w	r2, r2, #1
 80076ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f8c0 	bl	8007874 <UART_SetConfig>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d101      	bne.n	80076fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e022      	b.n	8007744 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fb3e 	bl	8007d88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800771a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689a      	ldr	r2, [r3, #8]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800772a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0201 	orr.w	r2, r2, #1
 800773a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fbc5 	bl	8007ecc <UART_CheckIdleState>
 8007742:	4603      	mov	r3, r0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08a      	sub	sp, #40	; 0x28
 8007750:	af02      	add	r7, sp, #8
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	603b      	str	r3, [r7, #0]
 8007758:	4613      	mov	r3, r2
 800775a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007760:	2b20      	cmp	r3, #32
 8007762:	f040 8082 	bne.w	800786a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <HAL_UART_Transmit+0x26>
 800776c:	88fb      	ldrh	r3, [r7, #6]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e07a      	b.n	800786c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800777c:	2b01      	cmp	r3, #1
 800777e:	d101      	bne.n	8007784 <HAL_UART_Transmit+0x38>
 8007780:	2302      	movs	r3, #2
 8007782:	e073      	b.n	800786c <HAL_UART_Transmit+0x120>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2221      	movs	r2, #33	; 0x21
 8007798:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800779a:	f7fc f87f 	bl	800389c <HAL_GetTick>
 800779e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	88fa      	ldrh	r2, [r7, #6]
 80077a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	88fa      	ldrh	r2, [r7, #6]
 80077ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b8:	d108      	bne.n	80077cc <HAL_UART_Transmit+0x80>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d104      	bne.n	80077cc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80077c2:	2300      	movs	r3, #0
 80077c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	61bb      	str	r3, [r7, #24]
 80077ca:	e003      	b.n	80077d4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077d0:	2300      	movs	r3, #0
 80077d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80077dc:	e02d      	b.n	800783a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2200      	movs	r2, #0
 80077e6:	2180      	movs	r1, #128	; 0x80
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 fbb8 	bl	8007f5e <UART_WaitOnFlagUntilTimeout>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d001      	beq.n	80077f8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e039      	b.n	800786c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10b      	bne.n	8007816 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	881a      	ldrh	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800780a:	b292      	uxth	r2, r2
 800780c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	3302      	adds	r3, #2
 8007812:	61bb      	str	r3, [r7, #24]
 8007814:	e008      	b.n	8007828 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	781a      	ldrb	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	b292      	uxth	r2, r2
 8007820:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	3301      	adds	r3, #1
 8007826:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800782e:	b29b      	uxth	r3, r3
 8007830:	3b01      	subs	r3, #1
 8007832:	b29a      	uxth	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007840:	b29b      	uxth	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1cb      	bne.n	80077de <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2200      	movs	r2, #0
 800784e:	2140      	movs	r1, #64	; 0x40
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 fb84 	bl	8007f5e <UART_WaitOnFlagUntilTimeout>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e005      	b.n	800786c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2220      	movs	r2, #32
 8007864:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	e000      	b.n	800786c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800786a:	2302      	movs	r3, #2
  }
}
 800786c:	4618      	mov	r0, r3
 800786e:	3720      	adds	r7, #32
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007874:	b5b0      	push	{r4, r5, r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	4313      	orrs	r3, r2
 8007896:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	4bad      	ldr	r3, [pc, #692]	; (8007b54 <UART_SetConfig+0x2e0>)
 80078a0:	4013      	ands	r3, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	6812      	ldr	r2, [r2, #0]
 80078a6:	69f9      	ldr	r1, [r7, #28]
 80078a8:	430b      	orrs	r3, r1
 80078aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68da      	ldr	r2, [r3, #12]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4aa2      	ldr	r2, [pc, #648]	; (8007b58 <UART_SetConfig+0x2e4>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d004      	beq.n	80078dc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	69fa      	ldr	r2, [r7, #28]
 80078d8:	4313      	orrs	r3, r2
 80078da:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a99      	ldr	r2, [pc, #612]	; (8007b5c <UART_SetConfig+0x2e8>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d121      	bne.n	800793e <UART_SetConfig+0xca>
 80078fa:	4b99      	ldr	r3, [pc, #612]	; (8007b60 <UART_SetConfig+0x2ec>)
 80078fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007900:	f003 0303 	and.w	r3, r3, #3
 8007904:	2b03      	cmp	r3, #3
 8007906:	d817      	bhi.n	8007938 <UART_SetConfig+0xc4>
 8007908:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <UART_SetConfig+0x9c>)
 800790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790e:	bf00      	nop
 8007910:	08007921 	.word	0x08007921
 8007914:	0800792d 	.word	0x0800792d
 8007918:	08007927 	.word	0x08007927
 800791c:	08007933 	.word	0x08007933
 8007920:	2301      	movs	r3, #1
 8007922:	76fb      	strb	r3, [r7, #27]
 8007924:	e0e7      	b.n	8007af6 <UART_SetConfig+0x282>
 8007926:	2302      	movs	r3, #2
 8007928:	76fb      	strb	r3, [r7, #27]
 800792a:	e0e4      	b.n	8007af6 <UART_SetConfig+0x282>
 800792c:	2304      	movs	r3, #4
 800792e:	76fb      	strb	r3, [r7, #27]
 8007930:	e0e1      	b.n	8007af6 <UART_SetConfig+0x282>
 8007932:	2308      	movs	r3, #8
 8007934:	76fb      	strb	r3, [r7, #27]
 8007936:	e0de      	b.n	8007af6 <UART_SetConfig+0x282>
 8007938:	2310      	movs	r3, #16
 800793a:	76fb      	strb	r3, [r7, #27]
 800793c:	e0db      	b.n	8007af6 <UART_SetConfig+0x282>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a88      	ldr	r2, [pc, #544]	; (8007b64 <UART_SetConfig+0x2f0>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d132      	bne.n	80079ae <UART_SetConfig+0x13a>
 8007948:	4b85      	ldr	r3, [pc, #532]	; (8007b60 <UART_SetConfig+0x2ec>)
 800794a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800794e:	f003 030c 	and.w	r3, r3, #12
 8007952:	2b0c      	cmp	r3, #12
 8007954:	d828      	bhi.n	80079a8 <UART_SetConfig+0x134>
 8007956:	a201      	add	r2, pc, #4	; (adr r2, 800795c <UART_SetConfig+0xe8>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	08007991 	.word	0x08007991
 8007960:	080079a9 	.word	0x080079a9
 8007964:	080079a9 	.word	0x080079a9
 8007968:	080079a9 	.word	0x080079a9
 800796c:	0800799d 	.word	0x0800799d
 8007970:	080079a9 	.word	0x080079a9
 8007974:	080079a9 	.word	0x080079a9
 8007978:	080079a9 	.word	0x080079a9
 800797c:	08007997 	.word	0x08007997
 8007980:	080079a9 	.word	0x080079a9
 8007984:	080079a9 	.word	0x080079a9
 8007988:	080079a9 	.word	0x080079a9
 800798c:	080079a3 	.word	0x080079a3
 8007990:	2300      	movs	r3, #0
 8007992:	76fb      	strb	r3, [r7, #27]
 8007994:	e0af      	b.n	8007af6 <UART_SetConfig+0x282>
 8007996:	2302      	movs	r3, #2
 8007998:	76fb      	strb	r3, [r7, #27]
 800799a:	e0ac      	b.n	8007af6 <UART_SetConfig+0x282>
 800799c:	2304      	movs	r3, #4
 800799e:	76fb      	strb	r3, [r7, #27]
 80079a0:	e0a9      	b.n	8007af6 <UART_SetConfig+0x282>
 80079a2:	2308      	movs	r3, #8
 80079a4:	76fb      	strb	r3, [r7, #27]
 80079a6:	e0a6      	b.n	8007af6 <UART_SetConfig+0x282>
 80079a8:	2310      	movs	r3, #16
 80079aa:	76fb      	strb	r3, [r7, #27]
 80079ac:	e0a3      	b.n	8007af6 <UART_SetConfig+0x282>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a6d      	ldr	r2, [pc, #436]	; (8007b68 <UART_SetConfig+0x2f4>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d120      	bne.n	80079fa <UART_SetConfig+0x186>
 80079b8:	4b69      	ldr	r3, [pc, #420]	; (8007b60 <UART_SetConfig+0x2ec>)
 80079ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079c2:	2b30      	cmp	r3, #48	; 0x30
 80079c4:	d013      	beq.n	80079ee <UART_SetConfig+0x17a>
 80079c6:	2b30      	cmp	r3, #48	; 0x30
 80079c8:	d814      	bhi.n	80079f4 <UART_SetConfig+0x180>
 80079ca:	2b20      	cmp	r3, #32
 80079cc:	d009      	beq.n	80079e2 <UART_SetConfig+0x16e>
 80079ce:	2b20      	cmp	r3, #32
 80079d0:	d810      	bhi.n	80079f4 <UART_SetConfig+0x180>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <UART_SetConfig+0x168>
 80079d6:	2b10      	cmp	r3, #16
 80079d8:	d006      	beq.n	80079e8 <UART_SetConfig+0x174>
 80079da:	e00b      	b.n	80079f4 <UART_SetConfig+0x180>
 80079dc:	2300      	movs	r3, #0
 80079de:	76fb      	strb	r3, [r7, #27]
 80079e0:	e089      	b.n	8007af6 <UART_SetConfig+0x282>
 80079e2:	2302      	movs	r3, #2
 80079e4:	76fb      	strb	r3, [r7, #27]
 80079e6:	e086      	b.n	8007af6 <UART_SetConfig+0x282>
 80079e8:	2304      	movs	r3, #4
 80079ea:	76fb      	strb	r3, [r7, #27]
 80079ec:	e083      	b.n	8007af6 <UART_SetConfig+0x282>
 80079ee:	2308      	movs	r3, #8
 80079f0:	76fb      	strb	r3, [r7, #27]
 80079f2:	e080      	b.n	8007af6 <UART_SetConfig+0x282>
 80079f4:	2310      	movs	r3, #16
 80079f6:	76fb      	strb	r3, [r7, #27]
 80079f8:	e07d      	b.n	8007af6 <UART_SetConfig+0x282>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a5b      	ldr	r2, [pc, #364]	; (8007b6c <UART_SetConfig+0x2f8>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d120      	bne.n	8007a46 <UART_SetConfig+0x1d2>
 8007a04:	4b56      	ldr	r3, [pc, #344]	; (8007b60 <UART_SetConfig+0x2ec>)
 8007a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8007a10:	d013      	beq.n	8007a3a <UART_SetConfig+0x1c6>
 8007a12:	2bc0      	cmp	r3, #192	; 0xc0
 8007a14:	d814      	bhi.n	8007a40 <UART_SetConfig+0x1cc>
 8007a16:	2b80      	cmp	r3, #128	; 0x80
 8007a18:	d009      	beq.n	8007a2e <UART_SetConfig+0x1ba>
 8007a1a:	2b80      	cmp	r3, #128	; 0x80
 8007a1c:	d810      	bhi.n	8007a40 <UART_SetConfig+0x1cc>
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <UART_SetConfig+0x1b4>
 8007a22:	2b40      	cmp	r3, #64	; 0x40
 8007a24:	d006      	beq.n	8007a34 <UART_SetConfig+0x1c0>
 8007a26:	e00b      	b.n	8007a40 <UART_SetConfig+0x1cc>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	76fb      	strb	r3, [r7, #27]
 8007a2c:	e063      	b.n	8007af6 <UART_SetConfig+0x282>
 8007a2e:	2302      	movs	r3, #2
 8007a30:	76fb      	strb	r3, [r7, #27]
 8007a32:	e060      	b.n	8007af6 <UART_SetConfig+0x282>
 8007a34:	2304      	movs	r3, #4
 8007a36:	76fb      	strb	r3, [r7, #27]
 8007a38:	e05d      	b.n	8007af6 <UART_SetConfig+0x282>
 8007a3a:	2308      	movs	r3, #8
 8007a3c:	76fb      	strb	r3, [r7, #27]
 8007a3e:	e05a      	b.n	8007af6 <UART_SetConfig+0x282>
 8007a40:	2310      	movs	r3, #16
 8007a42:	76fb      	strb	r3, [r7, #27]
 8007a44:	e057      	b.n	8007af6 <UART_SetConfig+0x282>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a49      	ldr	r2, [pc, #292]	; (8007b70 <UART_SetConfig+0x2fc>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d125      	bne.n	8007a9c <UART_SetConfig+0x228>
 8007a50:	4b43      	ldr	r3, [pc, #268]	; (8007b60 <UART_SetConfig+0x2ec>)
 8007a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a5e:	d017      	beq.n	8007a90 <UART_SetConfig+0x21c>
 8007a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a64:	d817      	bhi.n	8007a96 <UART_SetConfig+0x222>
 8007a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a6a:	d00b      	beq.n	8007a84 <UART_SetConfig+0x210>
 8007a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a70:	d811      	bhi.n	8007a96 <UART_SetConfig+0x222>
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <UART_SetConfig+0x20a>
 8007a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a7a:	d006      	beq.n	8007a8a <UART_SetConfig+0x216>
 8007a7c:	e00b      	b.n	8007a96 <UART_SetConfig+0x222>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	76fb      	strb	r3, [r7, #27]
 8007a82:	e038      	b.n	8007af6 <UART_SetConfig+0x282>
 8007a84:	2302      	movs	r3, #2
 8007a86:	76fb      	strb	r3, [r7, #27]
 8007a88:	e035      	b.n	8007af6 <UART_SetConfig+0x282>
 8007a8a:	2304      	movs	r3, #4
 8007a8c:	76fb      	strb	r3, [r7, #27]
 8007a8e:	e032      	b.n	8007af6 <UART_SetConfig+0x282>
 8007a90:	2308      	movs	r3, #8
 8007a92:	76fb      	strb	r3, [r7, #27]
 8007a94:	e02f      	b.n	8007af6 <UART_SetConfig+0x282>
 8007a96:	2310      	movs	r3, #16
 8007a98:	76fb      	strb	r3, [r7, #27]
 8007a9a:	e02c      	b.n	8007af6 <UART_SetConfig+0x282>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a2d      	ldr	r2, [pc, #180]	; (8007b58 <UART_SetConfig+0x2e4>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d125      	bne.n	8007af2 <UART_SetConfig+0x27e>
 8007aa6:	4b2e      	ldr	r3, [pc, #184]	; (8007b60 <UART_SetConfig+0x2ec>)
 8007aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ab0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ab4:	d017      	beq.n	8007ae6 <UART_SetConfig+0x272>
 8007ab6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007aba:	d817      	bhi.n	8007aec <UART_SetConfig+0x278>
 8007abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ac0:	d00b      	beq.n	8007ada <UART_SetConfig+0x266>
 8007ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ac6:	d811      	bhi.n	8007aec <UART_SetConfig+0x278>
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <UART_SetConfig+0x260>
 8007acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad0:	d006      	beq.n	8007ae0 <UART_SetConfig+0x26c>
 8007ad2:	e00b      	b.n	8007aec <UART_SetConfig+0x278>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	76fb      	strb	r3, [r7, #27]
 8007ad8:	e00d      	b.n	8007af6 <UART_SetConfig+0x282>
 8007ada:	2302      	movs	r3, #2
 8007adc:	76fb      	strb	r3, [r7, #27]
 8007ade:	e00a      	b.n	8007af6 <UART_SetConfig+0x282>
 8007ae0:	2304      	movs	r3, #4
 8007ae2:	76fb      	strb	r3, [r7, #27]
 8007ae4:	e007      	b.n	8007af6 <UART_SetConfig+0x282>
 8007ae6:	2308      	movs	r3, #8
 8007ae8:	76fb      	strb	r3, [r7, #27]
 8007aea:	e004      	b.n	8007af6 <UART_SetConfig+0x282>
 8007aec:	2310      	movs	r3, #16
 8007aee:	76fb      	strb	r3, [r7, #27]
 8007af0:	e001      	b.n	8007af6 <UART_SetConfig+0x282>
 8007af2:	2310      	movs	r3, #16
 8007af4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a17      	ldr	r2, [pc, #92]	; (8007b58 <UART_SetConfig+0x2e4>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	f040 8087 	bne.w	8007c10 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b02:	7efb      	ldrb	r3, [r7, #27]
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d837      	bhi.n	8007b78 <UART_SetConfig+0x304>
 8007b08:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <UART_SetConfig+0x29c>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b35 	.word	0x08007b35
 8007b14:	08007b79 	.word	0x08007b79
 8007b18:	08007b3d 	.word	0x08007b3d
 8007b1c:	08007b79 	.word	0x08007b79
 8007b20:	08007b43 	.word	0x08007b43
 8007b24:	08007b79 	.word	0x08007b79
 8007b28:	08007b79 	.word	0x08007b79
 8007b2c:	08007b79 	.word	0x08007b79
 8007b30:	08007b4b 	.word	0x08007b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b34:	f7fd f972 	bl	8004e1c <HAL_RCC_GetPCLK1Freq>
 8007b38:	6178      	str	r0, [r7, #20]
        break;
 8007b3a:	e022      	b.n	8007b82 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b3c:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <UART_SetConfig+0x300>)
 8007b3e:	617b      	str	r3, [r7, #20]
        break;
 8007b40:	e01f      	b.n	8007b82 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b42:	f7fd f8d3 	bl	8004cec <HAL_RCC_GetSysClockFreq>
 8007b46:	6178      	str	r0, [r7, #20]
        break;
 8007b48:	e01b      	b.n	8007b82 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b4e:	617b      	str	r3, [r7, #20]
        break;
 8007b50:	e017      	b.n	8007b82 <UART_SetConfig+0x30e>
 8007b52:	bf00      	nop
 8007b54:	efff69f3 	.word	0xefff69f3
 8007b58:	40008000 	.word	0x40008000
 8007b5c:	40013800 	.word	0x40013800
 8007b60:	40021000 	.word	0x40021000
 8007b64:	40004400 	.word	0x40004400
 8007b68:	40004800 	.word	0x40004800
 8007b6c:	40004c00 	.word	0x40004c00
 8007b70:	40005000 	.word	0x40005000
 8007b74:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	76bb      	strb	r3, [r7, #26]
        break;
 8007b80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 80f1 	beq.w	8007d6c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	005b      	lsls	r3, r3, #1
 8007b92:	4413      	add	r3, r2
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d305      	bcc.n	8007ba6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d902      	bls.n	8007bac <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	76bb      	strb	r3, [r7, #26]
 8007baa:	e0df      	b.n	8007d6c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f04f 0100 	mov.w	r1, #0
 8007bb4:	f04f 0200 	mov.w	r2, #0
 8007bb8:	f04f 0300 	mov.w	r3, #0
 8007bbc:	020b      	lsls	r3, r1, #8
 8007bbe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007bc2:	0202      	lsls	r2, r0, #8
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	6849      	ldr	r1, [r1, #4]
 8007bc8:	0849      	lsrs	r1, r1, #1
 8007bca:	4608      	mov	r0, r1
 8007bcc:	f04f 0100 	mov.w	r1, #0
 8007bd0:	1814      	adds	r4, r2, r0
 8007bd2:	eb43 0501 	adc.w	r5, r3, r1
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f04f 0300 	mov.w	r3, #0
 8007be0:	4620      	mov	r0, r4
 8007be2:	4629      	mov	r1, r5
 8007be4:	f7f9 f850 	bl	8000c88 <__aeabi_uldivmod>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4613      	mov	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bf6:	d308      	bcc.n	8007c0a <UART_SetConfig+0x396>
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bfe:	d204      	bcs.n	8007c0a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	60da      	str	r2, [r3, #12]
 8007c08:	e0b0      	b.n	8007d6c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	76bb      	strb	r3, [r7, #26]
 8007c0e:	e0ad      	b.n	8007d6c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	69db      	ldr	r3, [r3, #28]
 8007c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c18:	d15c      	bne.n	8007cd4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8007c1a:	7efb      	ldrb	r3, [r7, #27]
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	d828      	bhi.n	8007c72 <UART_SetConfig+0x3fe>
 8007c20:	a201      	add	r2, pc, #4	; (adr r2, 8007c28 <UART_SetConfig+0x3b4>)
 8007c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c26:	bf00      	nop
 8007c28:	08007c4d 	.word	0x08007c4d
 8007c2c:	08007c55 	.word	0x08007c55
 8007c30:	08007c5d 	.word	0x08007c5d
 8007c34:	08007c73 	.word	0x08007c73
 8007c38:	08007c63 	.word	0x08007c63
 8007c3c:	08007c73 	.word	0x08007c73
 8007c40:	08007c73 	.word	0x08007c73
 8007c44:	08007c73 	.word	0x08007c73
 8007c48:	08007c6b 	.word	0x08007c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c4c:	f7fd f8e6 	bl	8004e1c <HAL_RCC_GetPCLK1Freq>
 8007c50:	6178      	str	r0, [r7, #20]
        break;
 8007c52:	e013      	b.n	8007c7c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c54:	f7fd f8f8 	bl	8004e48 <HAL_RCC_GetPCLK2Freq>
 8007c58:	6178      	str	r0, [r7, #20]
        break;
 8007c5a:	e00f      	b.n	8007c7c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c5c:	4b49      	ldr	r3, [pc, #292]	; (8007d84 <UART_SetConfig+0x510>)
 8007c5e:	617b      	str	r3, [r7, #20]
        break;
 8007c60:	e00c      	b.n	8007c7c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c62:	f7fd f843 	bl	8004cec <HAL_RCC_GetSysClockFreq>
 8007c66:	6178      	str	r0, [r7, #20]
        break;
 8007c68:	e008      	b.n	8007c7c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c6e:	617b      	str	r3, [r7, #20]
        break;
 8007c70:	e004      	b.n	8007c7c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	76bb      	strb	r3, [r7, #26]
        break;
 8007c7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d074      	beq.n	8007d6c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	005a      	lsls	r2, r3, #1
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	085b      	lsrs	r3, r3, #1
 8007c8c:	441a      	add	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	2b0f      	cmp	r3, #15
 8007c9e:	d916      	bls.n	8007cce <UART_SetConfig+0x45a>
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ca6:	d212      	bcs.n	8007cce <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	f023 030f 	bic.w	r3, r3, #15
 8007cb0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	085b      	lsrs	r3, r3, #1
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	f003 0307 	and.w	r3, r3, #7
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	89fb      	ldrh	r3, [r7, #14]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	89fa      	ldrh	r2, [r7, #14]
 8007cca:	60da      	str	r2, [r3, #12]
 8007ccc:	e04e      	b.n	8007d6c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	76bb      	strb	r3, [r7, #26]
 8007cd2:	e04b      	b.n	8007d6c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cd4:	7efb      	ldrb	r3, [r7, #27]
 8007cd6:	2b08      	cmp	r3, #8
 8007cd8:	d827      	bhi.n	8007d2a <UART_SetConfig+0x4b6>
 8007cda:	a201      	add	r2, pc, #4	; (adr r2, 8007ce0 <UART_SetConfig+0x46c>)
 8007cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce0:	08007d05 	.word	0x08007d05
 8007ce4:	08007d0d 	.word	0x08007d0d
 8007ce8:	08007d15 	.word	0x08007d15
 8007cec:	08007d2b 	.word	0x08007d2b
 8007cf0:	08007d1b 	.word	0x08007d1b
 8007cf4:	08007d2b 	.word	0x08007d2b
 8007cf8:	08007d2b 	.word	0x08007d2b
 8007cfc:	08007d2b 	.word	0x08007d2b
 8007d00:	08007d23 	.word	0x08007d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d04:	f7fd f88a 	bl	8004e1c <HAL_RCC_GetPCLK1Freq>
 8007d08:	6178      	str	r0, [r7, #20]
        break;
 8007d0a:	e013      	b.n	8007d34 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d0c:	f7fd f89c 	bl	8004e48 <HAL_RCC_GetPCLK2Freq>
 8007d10:	6178      	str	r0, [r7, #20]
        break;
 8007d12:	e00f      	b.n	8007d34 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d14:	4b1b      	ldr	r3, [pc, #108]	; (8007d84 <UART_SetConfig+0x510>)
 8007d16:	617b      	str	r3, [r7, #20]
        break;
 8007d18:	e00c      	b.n	8007d34 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d1a:	f7fc ffe7 	bl	8004cec <HAL_RCC_GetSysClockFreq>
 8007d1e:	6178      	str	r0, [r7, #20]
        break;
 8007d20:	e008      	b.n	8007d34 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d26:	617b      	str	r3, [r7, #20]
        break;
 8007d28:	e004      	b.n	8007d34 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	76bb      	strb	r3, [r7, #26]
        break;
 8007d32:	bf00      	nop
    }

    if (pclk != 0U)
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d018      	beq.n	8007d6c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	085a      	lsrs	r2, r3, #1
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	441a      	add	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	2b0f      	cmp	r3, #15
 8007d54:	d908      	bls.n	8007d68 <UART_SetConfig+0x4f4>
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d5c:	d204      	bcs.n	8007d68 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	60da      	str	r2, [r3, #12]
 8007d66:	e001      	b.n	8007d6c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007d78:	7ebb      	ldrb	r3, [r7, #26]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3720      	adds	r7, #32
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bdb0      	pop	{r4, r5, r7, pc}
 8007d82:	bf00      	nop
 8007d84:	00f42400 	.word	0x00f42400

08007d88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00a      	beq.n	8007db2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00a      	beq.n	8007dd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00a      	beq.n	8007df6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	f003 0308 	and.w	r3, r3, #8
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00a      	beq.n	8007e18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1c:	f003 0310 	and.w	r3, r3, #16
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00a      	beq.n	8007e3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3e:	f003 0320 	and.w	r3, r3, #32
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00a      	beq.n	8007e5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01a      	beq.n	8007e9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e86:	d10a      	bne.n	8007e9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00a      	beq.n	8007ec0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	605a      	str	r2, [r3, #4]
  }
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af02      	add	r7, sp, #8
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007edc:	f7fb fcde 	bl	800389c <HAL_GetTick>
 8007ee0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0308 	and.w	r3, r3, #8
 8007eec:	2b08      	cmp	r3, #8
 8007eee:	d10e      	bne.n	8007f0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ef0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f82d 	bl	8007f5e <UART_WaitOnFlagUntilTimeout>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d001      	beq.n	8007f0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e023      	b.n	8007f56 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0304 	and.w	r3, r3, #4
 8007f18:	2b04      	cmp	r3, #4
 8007f1a:	d10e      	bne.n	8007f3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f817 	bl	8007f5e <UART_WaitOnFlagUntilTimeout>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e00d      	b.n	8007f56 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2220      	movs	r2, #32
 8007f44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	603b      	str	r3, [r7, #0]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f6e:	e05e      	b.n	800802e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f76:	d05a      	beq.n	800802e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f78:	f7fb fc90 	bl	800389c <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d302      	bcc.n	8007f8e <UART_WaitOnFlagUntilTimeout+0x30>
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d11b      	bne.n	8007fc6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f9c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 0201 	bic.w	r2, r2, #1
 8007fac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e043      	b.n	800804e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0304 	and.w	r3, r3, #4
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d02c      	beq.n	800802e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fe2:	d124      	bne.n	800802e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fec:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ffc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	689a      	ldr	r2, [r3, #8]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 0201 	bic.w	r2, r2, #1
 800800c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2220      	movs	r2, #32
 8008012:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2220      	movs	r2, #32
 8008018:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2220      	movs	r2, #32
 800801e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e00f      	b.n	800804e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	69da      	ldr	r2, [r3, #28]
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	4013      	ands	r3, r2
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	429a      	cmp	r2, r3
 800803c:	bf0c      	ite	eq
 800803e:	2301      	moveq	r3, #1
 8008040:	2300      	movne	r3, #0
 8008042:	b2db      	uxtb	r3, r3
 8008044:	461a      	mov	r2, r3
 8008046:	79fb      	ldrb	r3, [r7, #7]
 8008048:	429a      	cmp	r2, r3
 800804a:	d091      	beq.n	8007f70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <__errno>:
 8008058:	4b01      	ldr	r3, [pc, #4]	; (8008060 <__errno+0x8>)
 800805a:	6818      	ldr	r0, [r3, #0]
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	2000000c 	.word	0x2000000c

08008064 <__libc_init_array>:
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	4d0d      	ldr	r5, [pc, #52]	; (800809c <__libc_init_array+0x38>)
 8008068:	4c0d      	ldr	r4, [pc, #52]	; (80080a0 <__libc_init_array+0x3c>)
 800806a:	1b64      	subs	r4, r4, r5
 800806c:	10a4      	asrs	r4, r4, #2
 800806e:	2600      	movs	r6, #0
 8008070:	42a6      	cmp	r6, r4
 8008072:	d109      	bne.n	8008088 <__libc_init_array+0x24>
 8008074:	4d0b      	ldr	r5, [pc, #44]	; (80080a4 <__libc_init_array+0x40>)
 8008076:	4c0c      	ldr	r4, [pc, #48]	; (80080a8 <__libc_init_array+0x44>)
 8008078:	f002 fcf0 	bl	800aa5c <_init>
 800807c:	1b64      	subs	r4, r4, r5
 800807e:	10a4      	asrs	r4, r4, #2
 8008080:	2600      	movs	r6, #0
 8008082:	42a6      	cmp	r6, r4
 8008084:	d105      	bne.n	8008092 <__libc_init_array+0x2e>
 8008086:	bd70      	pop	{r4, r5, r6, pc}
 8008088:	f855 3b04 	ldr.w	r3, [r5], #4
 800808c:	4798      	blx	r3
 800808e:	3601      	adds	r6, #1
 8008090:	e7ee      	b.n	8008070 <__libc_init_array+0xc>
 8008092:	f855 3b04 	ldr.w	r3, [r5], #4
 8008096:	4798      	blx	r3
 8008098:	3601      	adds	r6, #1
 800809a:	e7f2      	b.n	8008082 <__libc_init_array+0x1e>
 800809c:	0800afc4 	.word	0x0800afc4
 80080a0:	0800afc4 	.word	0x0800afc4
 80080a4:	0800afc4 	.word	0x0800afc4
 80080a8:	0800afc8 	.word	0x0800afc8

080080ac <memset>:
 80080ac:	4402      	add	r2, r0
 80080ae:	4603      	mov	r3, r0
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d100      	bne.n	80080b6 <memset+0xa>
 80080b4:	4770      	bx	lr
 80080b6:	f803 1b01 	strb.w	r1, [r3], #1
 80080ba:	e7f9      	b.n	80080b0 <memset+0x4>

080080bc <__cvt>:
 80080bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080c0:	ec55 4b10 	vmov	r4, r5, d0
 80080c4:	2d00      	cmp	r5, #0
 80080c6:	460e      	mov	r6, r1
 80080c8:	4619      	mov	r1, r3
 80080ca:	462b      	mov	r3, r5
 80080cc:	bfbb      	ittet	lt
 80080ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080d2:	461d      	movlt	r5, r3
 80080d4:	2300      	movge	r3, #0
 80080d6:	232d      	movlt	r3, #45	; 0x2d
 80080d8:	700b      	strb	r3, [r1, #0]
 80080da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080e0:	4691      	mov	r9, r2
 80080e2:	f023 0820 	bic.w	r8, r3, #32
 80080e6:	bfbc      	itt	lt
 80080e8:	4622      	movlt	r2, r4
 80080ea:	4614      	movlt	r4, r2
 80080ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080f0:	d005      	beq.n	80080fe <__cvt+0x42>
 80080f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080f6:	d100      	bne.n	80080fa <__cvt+0x3e>
 80080f8:	3601      	adds	r6, #1
 80080fa:	2102      	movs	r1, #2
 80080fc:	e000      	b.n	8008100 <__cvt+0x44>
 80080fe:	2103      	movs	r1, #3
 8008100:	ab03      	add	r3, sp, #12
 8008102:	9301      	str	r3, [sp, #4]
 8008104:	ab02      	add	r3, sp, #8
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	ec45 4b10 	vmov	d0, r4, r5
 800810c:	4653      	mov	r3, sl
 800810e:	4632      	mov	r2, r6
 8008110:	f000 fcca 	bl	8008aa8 <_dtoa_r>
 8008114:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008118:	4607      	mov	r7, r0
 800811a:	d102      	bne.n	8008122 <__cvt+0x66>
 800811c:	f019 0f01 	tst.w	r9, #1
 8008120:	d022      	beq.n	8008168 <__cvt+0xac>
 8008122:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008126:	eb07 0906 	add.w	r9, r7, r6
 800812a:	d110      	bne.n	800814e <__cvt+0x92>
 800812c:	783b      	ldrb	r3, [r7, #0]
 800812e:	2b30      	cmp	r3, #48	; 0x30
 8008130:	d10a      	bne.n	8008148 <__cvt+0x8c>
 8008132:	2200      	movs	r2, #0
 8008134:	2300      	movs	r3, #0
 8008136:	4620      	mov	r0, r4
 8008138:	4629      	mov	r1, r5
 800813a:	f7f8 fcc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800813e:	b918      	cbnz	r0, 8008148 <__cvt+0x8c>
 8008140:	f1c6 0601 	rsb	r6, r6, #1
 8008144:	f8ca 6000 	str.w	r6, [sl]
 8008148:	f8da 3000 	ldr.w	r3, [sl]
 800814c:	4499      	add	r9, r3
 800814e:	2200      	movs	r2, #0
 8008150:	2300      	movs	r3, #0
 8008152:	4620      	mov	r0, r4
 8008154:	4629      	mov	r1, r5
 8008156:	f7f8 fcb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800815a:	b108      	cbz	r0, 8008160 <__cvt+0xa4>
 800815c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008160:	2230      	movs	r2, #48	; 0x30
 8008162:	9b03      	ldr	r3, [sp, #12]
 8008164:	454b      	cmp	r3, r9
 8008166:	d307      	bcc.n	8008178 <__cvt+0xbc>
 8008168:	9b03      	ldr	r3, [sp, #12]
 800816a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800816c:	1bdb      	subs	r3, r3, r7
 800816e:	4638      	mov	r0, r7
 8008170:	6013      	str	r3, [r2, #0]
 8008172:	b004      	add	sp, #16
 8008174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008178:	1c59      	adds	r1, r3, #1
 800817a:	9103      	str	r1, [sp, #12]
 800817c:	701a      	strb	r2, [r3, #0]
 800817e:	e7f0      	b.n	8008162 <__cvt+0xa6>

08008180 <__exponent>:
 8008180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008182:	4603      	mov	r3, r0
 8008184:	2900      	cmp	r1, #0
 8008186:	bfb8      	it	lt
 8008188:	4249      	neglt	r1, r1
 800818a:	f803 2b02 	strb.w	r2, [r3], #2
 800818e:	bfb4      	ite	lt
 8008190:	222d      	movlt	r2, #45	; 0x2d
 8008192:	222b      	movge	r2, #43	; 0x2b
 8008194:	2909      	cmp	r1, #9
 8008196:	7042      	strb	r2, [r0, #1]
 8008198:	dd2a      	ble.n	80081f0 <__exponent+0x70>
 800819a:	f10d 0407 	add.w	r4, sp, #7
 800819e:	46a4      	mov	ip, r4
 80081a0:	270a      	movs	r7, #10
 80081a2:	46a6      	mov	lr, r4
 80081a4:	460a      	mov	r2, r1
 80081a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80081aa:	fb07 1516 	mls	r5, r7, r6, r1
 80081ae:	3530      	adds	r5, #48	; 0x30
 80081b0:	2a63      	cmp	r2, #99	; 0x63
 80081b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80081b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80081ba:	4631      	mov	r1, r6
 80081bc:	dcf1      	bgt.n	80081a2 <__exponent+0x22>
 80081be:	3130      	adds	r1, #48	; 0x30
 80081c0:	f1ae 0502 	sub.w	r5, lr, #2
 80081c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081c8:	1c44      	adds	r4, r0, #1
 80081ca:	4629      	mov	r1, r5
 80081cc:	4561      	cmp	r1, ip
 80081ce:	d30a      	bcc.n	80081e6 <__exponent+0x66>
 80081d0:	f10d 0209 	add.w	r2, sp, #9
 80081d4:	eba2 020e 	sub.w	r2, r2, lr
 80081d8:	4565      	cmp	r5, ip
 80081da:	bf88      	it	hi
 80081dc:	2200      	movhi	r2, #0
 80081de:	4413      	add	r3, r2
 80081e0:	1a18      	subs	r0, r3, r0
 80081e2:	b003      	add	sp, #12
 80081e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081ee:	e7ed      	b.n	80081cc <__exponent+0x4c>
 80081f0:	2330      	movs	r3, #48	; 0x30
 80081f2:	3130      	adds	r1, #48	; 0x30
 80081f4:	7083      	strb	r3, [r0, #2]
 80081f6:	70c1      	strb	r1, [r0, #3]
 80081f8:	1d03      	adds	r3, r0, #4
 80081fa:	e7f1      	b.n	80081e0 <__exponent+0x60>

080081fc <_printf_float>:
 80081fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008200:	ed2d 8b02 	vpush	{d8}
 8008204:	b08d      	sub	sp, #52	; 0x34
 8008206:	460c      	mov	r4, r1
 8008208:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800820c:	4616      	mov	r6, r2
 800820e:	461f      	mov	r7, r3
 8008210:	4605      	mov	r5, r0
 8008212:	f001 fa35 	bl	8009680 <_localeconv_r>
 8008216:	f8d0 a000 	ldr.w	sl, [r0]
 800821a:	4650      	mov	r0, sl
 800821c:	f7f7 ffd8 	bl	80001d0 <strlen>
 8008220:	2300      	movs	r3, #0
 8008222:	930a      	str	r3, [sp, #40]	; 0x28
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	9305      	str	r3, [sp, #20]
 8008228:	f8d8 3000 	ldr.w	r3, [r8]
 800822c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008230:	3307      	adds	r3, #7
 8008232:	f023 0307 	bic.w	r3, r3, #7
 8008236:	f103 0208 	add.w	r2, r3, #8
 800823a:	f8c8 2000 	str.w	r2, [r8]
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008246:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800824a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800824e:	9307      	str	r3, [sp, #28]
 8008250:	f8cd 8018 	str.w	r8, [sp, #24]
 8008254:	ee08 0a10 	vmov	s16, r0
 8008258:	4b9f      	ldr	r3, [pc, #636]	; (80084d8 <_printf_float+0x2dc>)
 800825a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800825e:	f04f 32ff 	mov.w	r2, #4294967295
 8008262:	f7f8 fc63 	bl	8000b2c <__aeabi_dcmpun>
 8008266:	bb88      	cbnz	r0, 80082cc <_printf_float+0xd0>
 8008268:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800826c:	4b9a      	ldr	r3, [pc, #616]	; (80084d8 <_printf_float+0x2dc>)
 800826e:	f04f 32ff 	mov.w	r2, #4294967295
 8008272:	f7f8 fc3d 	bl	8000af0 <__aeabi_dcmple>
 8008276:	bb48      	cbnz	r0, 80082cc <_printf_float+0xd0>
 8008278:	2200      	movs	r2, #0
 800827a:	2300      	movs	r3, #0
 800827c:	4640      	mov	r0, r8
 800827e:	4649      	mov	r1, r9
 8008280:	f7f8 fc2c 	bl	8000adc <__aeabi_dcmplt>
 8008284:	b110      	cbz	r0, 800828c <_printf_float+0x90>
 8008286:	232d      	movs	r3, #45	; 0x2d
 8008288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800828c:	4b93      	ldr	r3, [pc, #588]	; (80084dc <_printf_float+0x2e0>)
 800828e:	4894      	ldr	r0, [pc, #592]	; (80084e0 <_printf_float+0x2e4>)
 8008290:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008294:	bf94      	ite	ls
 8008296:	4698      	movls	r8, r3
 8008298:	4680      	movhi	r8, r0
 800829a:	2303      	movs	r3, #3
 800829c:	6123      	str	r3, [r4, #16]
 800829e:	9b05      	ldr	r3, [sp, #20]
 80082a0:	f023 0204 	bic.w	r2, r3, #4
 80082a4:	6022      	str	r2, [r4, #0]
 80082a6:	f04f 0900 	mov.w	r9, #0
 80082aa:	9700      	str	r7, [sp, #0]
 80082ac:	4633      	mov	r3, r6
 80082ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80082b0:	4621      	mov	r1, r4
 80082b2:	4628      	mov	r0, r5
 80082b4:	f000 f9d8 	bl	8008668 <_printf_common>
 80082b8:	3001      	adds	r0, #1
 80082ba:	f040 8090 	bne.w	80083de <_printf_float+0x1e2>
 80082be:	f04f 30ff 	mov.w	r0, #4294967295
 80082c2:	b00d      	add	sp, #52	; 0x34
 80082c4:	ecbd 8b02 	vpop	{d8}
 80082c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082cc:	4642      	mov	r2, r8
 80082ce:	464b      	mov	r3, r9
 80082d0:	4640      	mov	r0, r8
 80082d2:	4649      	mov	r1, r9
 80082d4:	f7f8 fc2a 	bl	8000b2c <__aeabi_dcmpun>
 80082d8:	b140      	cbz	r0, 80082ec <_printf_float+0xf0>
 80082da:	464b      	mov	r3, r9
 80082dc:	2b00      	cmp	r3, #0
 80082de:	bfbc      	itt	lt
 80082e0:	232d      	movlt	r3, #45	; 0x2d
 80082e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082e6:	487f      	ldr	r0, [pc, #508]	; (80084e4 <_printf_float+0x2e8>)
 80082e8:	4b7f      	ldr	r3, [pc, #508]	; (80084e8 <_printf_float+0x2ec>)
 80082ea:	e7d1      	b.n	8008290 <_printf_float+0x94>
 80082ec:	6863      	ldr	r3, [r4, #4]
 80082ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082f2:	9206      	str	r2, [sp, #24]
 80082f4:	1c5a      	adds	r2, r3, #1
 80082f6:	d13f      	bne.n	8008378 <_printf_float+0x17c>
 80082f8:	2306      	movs	r3, #6
 80082fa:	6063      	str	r3, [r4, #4]
 80082fc:	9b05      	ldr	r3, [sp, #20]
 80082fe:	6861      	ldr	r1, [r4, #4]
 8008300:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008304:	2300      	movs	r3, #0
 8008306:	9303      	str	r3, [sp, #12]
 8008308:	ab0a      	add	r3, sp, #40	; 0x28
 800830a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800830e:	ab09      	add	r3, sp, #36	; 0x24
 8008310:	ec49 8b10 	vmov	d0, r8, r9
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	6022      	str	r2, [r4, #0]
 8008318:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800831c:	4628      	mov	r0, r5
 800831e:	f7ff fecd 	bl	80080bc <__cvt>
 8008322:	9b06      	ldr	r3, [sp, #24]
 8008324:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008326:	2b47      	cmp	r3, #71	; 0x47
 8008328:	4680      	mov	r8, r0
 800832a:	d108      	bne.n	800833e <_printf_float+0x142>
 800832c:	1cc8      	adds	r0, r1, #3
 800832e:	db02      	blt.n	8008336 <_printf_float+0x13a>
 8008330:	6863      	ldr	r3, [r4, #4]
 8008332:	4299      	cmp	r1, r3
 8008334:	dd41      	ble.n	80083ba <_printf_float+0x1be>
 8008336:	f1ab 0b02 	sub.w	fp, fp, #2
 800833a:	fa5f fb8b 	uxtb.w	fp, fp
 800833e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008342:	d820      	bhi.n	8008386 <_printf_float+0x18a>
 8008344:	3901      	subs	r1, #1
 8008346:	465a      	mov	r2, fp
 8008348:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800834c:	9109      	str	r1, [sp, #36]	; 0x24
 800834e:	f7ff ff17 	bl	8008180 <__exponent>
 8008352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008354:	1813      	adds	r3, r2, r0
 8008356:	2a01      	cmp	r2, #1
 8008358:	4681      	mov	r9, r0
 800835a:	6123      	str	r3, [r4, #16]
 800835c:	dc02      	bgt.n	8008364 <_printf_float+0x168>
 800835e:	6822      	ldr	r2, [r4, #0]
 8008360:	07d2      	lsls	r2, r2, #31
 8008362:	d501      	bpl.n	8008368 <_printf_float+0x16c>
 8008364:	3301      	adds	r3, #1
 8008366:	6123      	str	r3, [r4, #16]
 8008368:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800836c:	2b00      	cmp	r3, #0
 800836e:	d09c      	beq.n	80082aa <_printf_float+0xae>
 8008370:	232d      	movs	r3, #45	; 0x2d
 8008372:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008376:	e798      	b.n	80082aa <_printf_float+0xae>
 8008378:	9a06      	ldr	r2, [sp, #24]
 800837a:	2a47      	cmp	r2, #71	; 0x47
 800837c:	d1be      	bne.n	80082fc <_printf_float+0x100>
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1bc      	bne.n	80082fc <_printf_float+0x100>
 8008382:	2301      	movs	r3, #1
 8008384:	e7b9      	b.n	80082fa <_printf_float+0xfe>
 8008386:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800838a:	d118      	bne.n	80083be <_printf_float+0x1c2>
 800838c:	2900      	cmp	r1, #0
 800838e:	6863      	ldr	r3, [r4, #4]
 8008390:	dd0b      	ble.n	80083aa <_printf_float+0x1ae>
 8008392:	6121      	str	r1, [r4, #16]
 8008394:	b913      	cbnz	r3, 800839c <_printf_float+0x1a0>
 8008396:	6822      	ldr	r2, [r4, #0]
 8008398:	07d0      	lsls	r0, r2, #31
 800839a:	d502      	bpl.n	80083a2 <_printf_float+0x1a6>
 800839c:	3301      	adds	r3, #1
 800839e:	440b      	add	r3, r1
 80083a0:	6123      	str	r3, [r4, #16]
 80083a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80083a4:	f04f 0900 	mov.w	r9, #0
 80083a8:	e7de      	b.n	8008368 <_printf_float+0x16c>
 80083aa:	b913      	cbnz	r3, 80083b2 <_printf_float+0x1b6>
 80083ac:	6822      	ldr	r2, [r4, #0]
 80083ae:	07d2      	lsls	r2, r2, #31
 80083b0:	d501      	bpl.n	80083b6 <_printf_float+0x1ba>
 80083b2:	3302      	adds	r3, #2
 80083b4:	e7f4      	b.n	80083a0 <_printf_float+0x1a4>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e7f2      	b.n	80083a0 <_printf_float+0x1a4>
 80083ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c0:	4299      	cmp	r1, r3
 80083c2:	db05      	blt.n	80083d0 <_printf_float+0x1d4>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	6121      	str	r1, [r4, #16]
 80083c8:	07d8      	lsls	r0, r3, #31
 80083ca:	d5ea      	bpl.n	80083a2 <_printf_float+0x1a6>
 80083cc:	1c4b      	adds	r3, r1, #1
 80083ce:	e7e7      	b.n	80083a0 <_printf_float+0x1a4>
 80083d0:	2900      	cmp	r1, #0
 80083d2:	bfd4      	ite	le
 80083d4:	f1c1 0202 	rsble	r2, r1, #2
 80083d8:	2201      	movgt	r2, #1
 80083da:	4413      	add	r3, r2
 80083dc:	e7e0      	b.n	80083a0 <_printf_float+0x1a4>
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	055a      	lsls	r2, r3, #21
 80083e2:	d407      	bmi.n	80083f4 <_printf_float+0x1f8>
 80083e4:	6923      	ldr	r3, [r4, #16]
 80083e6:	4642      	mov	r2, r8
 80083e8:	4631      	mov	r1, r6
 80083ea:	4628      	mov	r0, r5
 80083ec:	47b8      	blx	r7
 80083ee:	3001      	adds	r0, #1
 80083f0:	d12c      	bne.n	800844c <_printf_float+0x250>
 80083f2:	e764      	b.n	80082be <_printf_float+0xc2>
 80083f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083f8:	f240 80e0 	bls.w	80085bc <_printf_float+0x3c0>
 80083fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008400:	2200      	movs	r2, #0
 8008402:	2300      	movs	r3, #0
 8008404:	f7f8 fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 8008408:	2800      	cmp	r0, #0
 800840a:	d034      	beq.n	8008476 <_printf_float+0x27a>
 800840c:	4a37      	ldr	r2, [pc, #220]	; (80084ec <_printf_float+0x2f0>)
 800840e:	2301      	movs	r3, #1
 8008410:	4631      	mov	r1, r6
 8008412:	4628      	mov	r0, r5
 8008414:	47b8      	blx	r7
 8008416:	3001      	adds	r0, #1
 8008418:	f43f af51 	beq.w	80082be <_printf_float+0xc2>
 800841c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008420:	429a      	cmp	r2, r3
 8008422:	db02      	blt.n	800842a <_printf_float+0x22e>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	07d8      	lsls	r0, r3, #31
 8008428:	d510      	bpl.n	800844c <_printf_float+0x250>
 800842a:	ee18 3a10 	vmov	r3, s16
 800842e:	4652      	mov	r2, sl
 8008430:	4631      	mov	r1, r6
 8008432:	4628      	mov	r0, r5
 8008434:	47b8      	blx	r7
 8008436:	3001      	adds	r0, #1
 8008438:	f43f af41 	beq.w	80082be <_printf_float+0xc2>
 800843c:	f04f 0800 	mov.w	r8, #0
 8008440:	f104 091a 	add.w	r9, r4, #26
 8008444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008446:	3b01      	subs	r3, #1
 8008448:	4543      	cmp	r3, r8
 800844a:	dc09      	bgt.n	8008460 <_printf_float+0x264>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	079b      	lsls	r3, r3, #30
 8008450:	f100 8105 	bmi.w	800865e <_printf_float+0x462>
 8008454:	68e0      	ldr	r0, [r4, #12]
 8008456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008458:	4298      	cmp	r0, r3
 800845a:	bfb8      	it	lt
 800845c:	4618      	movlt	r0, r3
 800845e:	e730      	b.n	80082c2 <_printf_float+0xc6>
 8008460:	2301      	movs	r3, #1
 8008462:	464a      	mov	r2, r9
 8008464:	4631      	mov	r1, r6
 8008466:	4628      	mov	r0, r5
 8008468:	47b8      	blx	r7
 800846a:	3001      	adds	r0, #1
 800846c:	f43f af27 	beq.w	80082be <_printf_float+0xc2>
 8008470:	f108 0801 	add.w	r8, r8, #1
 8008474:	e7e6      	b.n	8008444 <_printf_float+0x248>
 8008476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008478:	2b00      	cmp	r3, #0
 800847a:	dc39      	bgt.n	80084f0 <_printf_float+0x2f4>
 800847c:	4a1b      	ldr	r2, [pc, #108]	; (80084ec <_printf_float+0x2f0>)
 800847e:	2301      	movs	r3, #1
 8008480:	4631      	mov	r1, r6
 8008482:	4628      	mov	r0, r5
 8008484:	47b8      	blx	r7
 8008486:	3001      	adds	r0, #1
 8008488:	f43f af19 	beq.w	80082be <_printf_float+0xc2>
 800848c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008490:	4313      	orrs	r3, r2
 8008492:	d102      	bne.n	800849a <_printf_float+0x29e>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	07d9      	lsls	r1, r3, #31
 8008498:	d5d8      	bpl.n	800844c <_printf_float+0x250>
 800849a:	ee18 3a10 	vmov	r3, s16
 800849e:	4652      	mov	r2, sl
 80084a0:	4631      	mov	r1, r6
 80084a2:	4628      	mov	r0, r5
 80084a4:	47b8      	blx	r7
 80084a6:	3001      	adds	r0, #1
 80084a8:	f43f af09 	beq.w	80082be <_printf_float+0xc2>
 80084ac:	f04f 0900 	mov.w	r9, #0
 80084b0:	f104 0a1a 	add.w	sl, r4, #26
 80084b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084b6:	425b      	negs	r3, r3
 80084b8:	454b      	cmp	r3, r9
 80084ba:	dc01      	bgt.n	80084c0 <_printf_float+0x2c4>
 80084bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084be:	e792      	b.n	80083e6 <_printf_float+0x1ea>
 80084c0:	2301      	movs	r3, #1
 80084c2:	4652      	mov	r2, sl
 80084c4:	4631      	mov	r1, r6
 80084c6:	4628      	mov	r0, r5
 80084c8:	47b8      	blx	r7
 80084ca:	3001      	adds	r0, #1
 80084cc:	f43f aef7 	beq.w	80082be <_printf_float+0xc2>
 80084d0:	f109 0901 	add.w	r9, r9, #1
 80084d4:	e7ee      	b.n	80084b4 <_printf_float+0x2b8>
 80084d6:	bf00      	nop
 80084d8:	7fefffff 	.word	0x7fefffff
 80084dc:	0800abdc 	.word	0x0800abdc
 80084e0:	0800abe0 	.word	0x0800abe0
 80084e4:	0800abe8 	.word	0x0800abe8
 80084e8:	0800abe4 	.word	0x0800abe4
 80084ec:	0800abec 	.word	0x0800abec
 80084f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084f4:	429a      	cmp	r2, r3
 80084f6:	bfa8      	it	ge
 80084f8:	461a      	movge	r2, r3
 80084fa:	2a00      	cmp	r2, #0
 80084fc:	4691      	mov	r9, r2
 80084fe:	dc37      	bgt.n	8008570 <_printf_float+0x374>
 8008500:	f04f 0b00 	mov.w	fp, #0
 8008504:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008508:	f104 021a 	add.w	r2, r4, #26
 800850c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800850e:	9305      	str	r3, [sp, #20]
 8008510:	eba3 0309 	sub.w	r3, r3, r9
 8008514:	455b      	cmp	r3, fp
 8008516:	dc33      	bgt.n	8008580 <_printf_float+0x384>
 8008518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800851c:	429a      	cmp	r2, r3
 800851e:	db3b      	blt.n	8008598 <_printf_float+0x39c>
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	07da      	lsls	r2, r3, #31
 8008524:	d438      	bmi.n	8008598 <_printf_float+0x39c>
 8008526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008528:	9b05      	ldr	r3, [sp, #20]
 800852a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	eba2 0901 	sub.w	r9, r2, r1
 8008532:	4599      	cmp	r9, r3
 8008534:	bfa8      	it	ge
 8008536:	4699      	movge	r9, r3
 8008538:	f1b9 0f00 	cmp.w	r9, #0
 800853c:	dc35      	bgt.n	80085aa <_printf_float+0x3ae>
 800853e:	f04f 0800 	mov.w	r8, #0
 8008542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008546:	f104 0a1a 	add.w	sl, r4, #26
 800854a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800854e:	1a9b      	subs	r3, r3, r2
 8008550:	eba3 0309 	sub.w	r3, r3, r9
 8008554:	4543      	cmp	r3, r8
 8008556:	f77f af79 	ble.w	800844c <_printf_float+0x250>
 800855a:	2301      	movs	r3, #1
 800855c:	4652      	mov	r2, sl
 800855e:	4631      	mov	r1, r6
 8008560:	4628      	mov	r0, r5
 8008562:	47b8      	blx	r7
 8008564:	3001      	adds	r0, #1
 8008566:	f43f aeaa 	beq.w	80082be <_printf_float+0xc2>
 800856a:	f108 0801 	add.w	r8, r8, #1
 800856e:	e7ec      	b.n	800854a <_printf_float+0x34e>
 8008570:	4613      	mov	r3, r2
 8008572:	4631      	mov	r1, r6
 8008574:	4642      	mov	r2, r8
 8008576:	4628      	mov	r0, r5
 8008578:	47b8      	blx	r7
 800857a:	3001      	adds	r0, #1
 800857c:	d1c0      	bne.n	8008500 <_printf_float+0x304>
 800857e:	e69e      	b.n	80082be <_printf_float+0xc2>
 8008580:	2301      	movs	r3, #1
 8008582:	4631      	mov	r1, r6
 8008584:	4628      	mov	r0, r5
 8008586:	9205      	str	r2, [sp, #20]
 8008588:	47b8      	blx	r7
 800858a:	3001      	adds	r0, #1
 800858c:	f43f ae97 	beq.w	80082be <_printf_float+0xc2>
 8008590:	9a05      	ldr	r2, [sp, #20]
 8008592:	f10b 0b01 	add.w	fp, fp, #1
 8008596:	e7b9      	b.n	800850c <_printf_float+0x310>
 8008598:	ee18 3a10 	vmov	r3, s16
 800859c:	4652      	mov	r2, sl
 800859e:	4631      	mov	r1, r6
 80085a0:	4628      	mov	r0, r5
 80085a2:	47b8      	blx	r7
 80085a4:	3001      	adds	r0, #1
 80085a6:	d1be      	bne.n	8008526 <_printf_float+0x32a>
 80085a8:	e689      	b.n	80082be <_printf_float+0xc2>
 80085aa:	9a05      	ldr	r2, [sp, #20]
 80085ac:	464b      	mov	r3, r9
 80085ae:	4442      	add	r2, r8
 80085b0:	4631      	mov	r1, r6
 80085b2:	4628      	mov	r0, r5
 80085b4:	47b8      	blx	r7
 80085b6:	3001      	adds	r0, #1
 80085b8:	d1c1      	bne.n	800853e <_printf_float+0x342>
 80085ba:	e680      	b.n	80082be <_printf_float+0xc2>
 80085bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085be:	2a01      	cmp	r2, #1
 80085c0:	dc01      	bgt.n	80085c6 <_printf_float+0x3ca>
 80085c2:	07db      	lsls	r3, r3, #31
 80085c4:	d538      	bpl.n	8008638 <_printf_float+0x43c>
 80085c6:	2301      	movs	r3, #1
 80085c8:	4642      	mov	r2, r8
 80085ca:	4631      	mov	r1, r6
 80085cc:	4628      	mov	r0, r5
 80085ce:	47b8      	blx	r7
 80085d0:	3001      	adds	r0, #1
 80085d2:	f43f ae74 	beq.w	80082be <_printf_float+0xc2>
 80085d6:	ee18 3a10 	vmov	r3, s16
 80085da:	4652      	mov	r2, sl
 80085dc:	4631      	mov	r1, r6
 80085de:	4628      	mov	r0, r5
 80085e0:	47b8      	blx	r7
 80085e2:	3001      	adds	r0, #1
 80085e4:	f43f ae6b 	beq.w	80082be <_printf_float+0xc2>
 80085e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085ec:	2200      	movs	r2, #0
 80085ee:	2300      	movs	r3, #0
 80085f0:	f7f8 fa6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80085f4:	b9d8      	cbnz	r0, 800862e <_printf_float+0x432>
 80085f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f8:	f108 0201 	add.w	r2, r8, #1
 80085fc:	3b01      	subs	r3, #1
 80085fe:	4631      	mov	r1, r6
 8008600:	4628      	mov	r0, r5
 8008602:	47b8      	blx	r7
 8008604:	3001      	adds	r0, #1
 8008606:	d10e      	bne.n	8008626 <_printf_float+0x42a>
 8008608:	e659      	b.n	80082be <_printf_float+0xc2>
 800860a:	2301      	movs	r3, #1
 800860c:	4652      	mov	r2, sl
 800860e:	4631      	mov	r1, r6
 8008610:	4628      	mov	r0, r5
 8008612:	47b8      	blx	r7
 8008614:	3001      	adds	r0, #1
 8008616:	f43f ae52 	beq.w	80082be <_printf_float+0xc2>
 800861a:	f108 0801 	add.w	r8, r8, #1
 800861e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008620:	3b01      	subs	r3, #1
 8008622:	4543      	cmp	r3, r8
 8008624:	dcf1      	bgt.n	800860a <_printf_float+0x40e>
 8008626:	464b      	mov	r3, r9
 8008628:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800862c:	e6dc      	b.n	80083e8 <_printf_float+0x1ec>
 800862e:	f04f 0800 	mov.w	r8, #0
 8008632:	f104 0a1a 	add.w	sl, r4, #26
 8008636:	e7f2      	b.n	800861e <_printf_float+0x422>
 8008638:	2301      	movs	r3, #1
 800863a:	4642      	mov	r2, r8
 800863c:	e7df      	b.n	80085fe <_printf_float+0x402>
 800863e:	2301      	movs	r3, #1
 8008640:	464a      	mov	r2, r9
 8008642:	4631      	mov	r1, r6
 8008644:	4628      	mov	r0, r5
 8008646:	47b8      	blx	r7
 8008648:	3001      	adds	r0, #1
 800864a:	f43f ae38 	beq.w	80082be <_printf_float+0xc2>
 800864e:	f108 0801 	add.w	r8, r8, #1
 8008652:	68e3      	ldr	r3, [r4, #12]
 8008654:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008656:	1a5b      	subs	r3, r3, r1
 8008658:	4543      	cmp	r3, r8
 800865a:	dcf0      	bgt.n	800863e <_printf_float+0x442>
 800865c:	e6fa      	b.n	8008454 <_printf_float+0x258>
 800865e:	f04f 0800 	mov.w	r8, #0
 8008662:	f104 0919 	add.w	r9, r4, #25
 8008666:	e7f4      	b.n	8008652 <_printf_float+0x456>

08008668 <_printf_common>:
 8008668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800866c:	4616      	mov	r6, r2
 800866e:	4699      	mov	r9, r3
 8008670:	688a      	ldr	r2, [r1, #8]
 8008672:	690b      	ldr	r3, [r1, #16]
 8008674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008678:	4293      	cmp	r3, r2
 800867a:	bfb8      	it	lt
 800867c:	4613      	movlt	r3, r2
 800867e:	6033      	str	r3, [r6, #0]
 8008680:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008684:	4607      	mov	r7, r0
 8008686:	460c      	mov	r4, r1
 8008688:	b10a      	cbz	r2, 800868e <_printf_common+0x26>
 800868a:	3301      	adds	r3, #1
 800868c:	6033      	str	r3, [r6, #0]
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	0699      	lsls	r1, r3, #26
 8008692:	bf42      	ittt	mi
 8008694:	6833      	ldrmi	r3, [r6, #0]
 8008696:	3302      	addmi	r3, #2
 8008698:	6033      	strmi	r3, [r6, #0]
 800869a:	6825      	ldr	r5, [r4, #0]
 800869c:	f015 0506 	ands.w	r5, r5, #6
 80086a0:	d106      	bne.n	80086b0 <_printf_common+0x48>
 80086a2:	f104 0a19 	add.w	sl, r4, #25
 80086a6:	68e3      	ldr	r3, [r4, #12]
 80086a8:	6832      	ldr	r2, [r6, #0]
 80086aa:	1a9b      	subs	r3, r3, r2
 80086ac:	42ab      	cmp	r3, r5
 80086ae:	dc26      	bgt.n	80086fe <_printf_common+0x96>
 80086b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086b4:	1e13      	subs	r3, r2, #0
 80086b6:	6822      	ldr	r2, [r4, #0]
 80086b8:	bf18      	it	ne
 80086ba:	2301      	movne	r3, #1
 80086bc:	0692      	lsls	r2, r2, #26
 80086be:	d42b      	bmi.n	8008718 <_printf_common+0xb0>
 80086c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086c4:	4649      	mov	r1, r9
 80086c6:	4638      	mov	r0, r7
 80086c8:	47c0      	blx	r8
 80086ca:	3001      	adds	r0, #1
 80086cc:	d01e      	beq.n	800870c <_printf_common+0xa4>
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	68e5      	ldr	r5, [r4, #12]
 80086d2:	6832      	ldr	r2, [r6, #0]
 80086d4:	f003 0306 	and.w	r3, r3, #6
 80086d8:	2b04      	cmp	r3, #4
 80086da:	bf08      	it	eq
 80086dc:	1aad      	subeq	r5, r5, r2
 80086de:	68a3      	ldr	r3, [r4, #8]
 80086e0:	6922      	ldr	r2, [r4, #16]
 80086e2:	bf0c      	ite	eq
 80086e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086e8:	2500      	movne	r5, #0
 80086ea:	4293      	cmp	r3, r2
 80086ec:	bfc4      	itt	gt
 80086ee:	1a9b      	subgt	r3, r3, r2
 80086f0:	18ed      	addgt	r5, r5, r3
 80086f2:	2600      	movs	r6, #0
 80086f4:	341a      	adds	r4, #26
 80086f6:	42b5      	cmp	r5, r6
 80086f8:	d11a      	bne.n	8008730 <_printf_common+0xc8>
 80086fa:	2000      	movs	r0, #0
 80086fc:	e008      	b.n	8008710 <_printf_common+0xa8>
 80086fe:	2301      	movs	r3, #1
 8008700:	4652      	mov	r2, sl
 8008702:	4649      	mov	r1, r9
 8008704:	4638      	mov	r0, r7
 8008706:	47c0      	blx	r8
 8008708:	3001      	adds	r0, #1
 800870a:	d103      	bne.n	8008714 <_printf_common+0xac>
 800870c:	f04f 30ff 	mov.w	r0, #4294967295
 8008710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008714:	3501      	adds	r5, #1
 8008716:	e7c6      	b.n	80086a6 <_printf_common+0x3e>
 8008718:	18e1      	adds	r1, r4, r3
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	2030      	movs	r0, #48	; 0x30
 800871e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008722:	4422      	add	r2, r4
 8008724:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008728:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800872c:	3302      	adds	r3, #2
 800872e:	e7c7      	b.n	80086c0 <_printf_common+0x58>
 8008730:	2301      	movs	r3, #1
 8008732:	4622      	mov	r2, r4
 8008734:	4649      	mov	r1, r9
 8008736:	4638      	mov	r0, r7
 8008738:	47c0      	blx	r8
 800873a:	3001      	adds	r0, #1
 800873c:	d0e6      	beq.n	800870c <_printf_common+0xa4>
 800873e:	3601      	adds	r6, #1
 8008740:	e7d9      	b.n	80086f6 <_printf_common+0x8e>
	...

08008744 <_printf_i>:
 8008744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	460c      	mov	r4, r1
 800874a:	4691      	mov	r9, r2
 800874c:	7e27      	ldrb	r7, [r4, #24]
 800874e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008750:	2f78      	cmp	r7, #120	; 0x78
 8008752:	4680      	mov	r8, r0
 8008754:	469a      	mov	sl, r3
 8008756:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800875a:	d807      	bhi.n	800876c <_printf_i+0x28>
 800875c:	2f62      	cmp	r7, #98	; 0x62
 800875e:	d80a      	bhi.n	8008776 <_printf_i+0x32>
 8008760:	2f00      	cmp	r7, #0
 8008762:	f000 80d8 	beq.w	8008916 <_printf_i+0x1d2>
 8008766:	2f58      	cmp	r7, #88	; 0x58
 8008768:	f000 80a3 	beq.w	80088b2 <_printf_i+0x16e>
 800876c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008770:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008774:	e03a      	b.n	80087ec <_printf_i+0xa8>
 8008776:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800877a:	2b15      	cmp	r3, #21
 800877c:	d8f6      	bhi.n	800876c <_printf_i+0x28>
 800877e:	a001      	add	r0, pc, #4	; (adr r0, 8008784 <_printf_i+0x40>)
 8008780:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008784:	080087dd 	.word	0x080087dd
 8008788:	080087f1 	.word	0x080087f1
 800878c:	0800876d 	.word	0x0800876d
 8008790:	0800876d 	.word	0x0800876d
 8008794:	0800876d 	.word	0x0800876d
 8008798:	0800876d 	.word	0x0800876d
 800879c:	080087f1 	.word	0x080087f1
 80087a0:	0800876d 	.word	0x0800876d
 80087a4:	0800876d 	.word	0x0800876d
 80087a8:	0800876d 	.word	0x0800876d
 80087ac:	0800876d 	.word	0x0800876d
 80087b0:	080088fd 	.word	0x080088fd
 80087b4:	08008821 	.word	0x08008821
 80087b8:	080088df 	.word	0x080088df
 80087bc:	0800876d 	.word	0x0800876d
 80087c0:	0800876d 	.word	0x0800876d
 80087c4:	0800891f 	.word	0x0800891f
 80087c8:	0800876d 	.word	0x0800876d
 80087cc:	08008821 	.word	0x08008821
 80087d0:	0800876d 	.word	0x0800876d
 80087d4:	0800876d 	.word	0x0800876d
 80087d8:	080088e7 	.word	0x080088e7
 80087dc:	680b      	ldr	r3, [r1, #0]
 80087de:	1d1a      	adds	r2, r3, #4
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	600a      	str	r2, [r1, #0]
 80087e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087ec:	2301      	movs	r3, #1
 80087ee:	e0a3      	b.n	8008938 <_printf_i+0x1f4>
 80087f0:	6825      	ldr	r5, [r4, #0]
 80087f2:	6808      	ldr	r0, [r1, #0]
 80087f4:	062e      	lsls	r6, r5, #24
 80087f6:	f100 0304 	add.w	r3, r0, #4
 80087fa:	d50a      	bpl.n	8008812 <_printf_i+0xce>
 80087fc:	6805      	ldr	r5, [r0, #0]
 80087fe:	600b      	str	r3, [r1, #0]
 8008800:	2d00      	cmp	r5, #0
 8008802:	da03      	bge.n	800880c <_printf_i+0xc8>
 8008804:	232d      	movs	r3, #45	; 0x2d
 8008806:	426d      	negs	r5, r5
 8008808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800880c:	485e      	ldr	r0, [pc, #376]	; (8008988 <_printf_i+0x244>)
 800880e:	230a      	movs	r3, #10
 8008810:	e019      	b.n	8008846 <_printf_i+0x102>
 8008812:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008816:	6805      	ldr	r5, [r0, #0]
 8008818:	600b      	str	r3, [r1, #0]
 800881a:	bf18      	it	ne
 800881c:	b22d      	sxthne	r5, r5
 800881e:	e7ef      	b.n	8008800 <_printf_i+0xbc>
 8008820:	680b      	ldr	r3, [r1, #0]
 8008822:	6825      	ldr	r5, [r4, #0]
 8008824:	1d18      	adds	r0, r3, #4
 8008826:	6008      	str	r0, [r1, #0]
 8008828:	0628      	lsls	r0, r5, #24
 800882a:	d501      	bpl.n	8008830 <_printf_i+0xec>
 800882c:	681d      	ldr	r5, [r3, #0]
 800882e:	e002      	b.n	8008836 <_printf_i+0xf2>
 8008830:	0669      	lsls	r1, r5, #25
 8008832:	d5fb      	bpl.n	800882c <_printf_i+0xe8>
 8008834:	881d      	ldrh	r5, [r3, #0]
 8008836:	4854      	ldr	r0, [pc, #336]	; (8008988 <_printf_i+0x244>)
 8008838:	2f6f      	cmp	r7, #111	; 0x6f
 800883a:	bf0c      	ite	eq
 800883c:	2308      	moveq	r3, #8
 800883e:	230a      	movne	r3, #10
 8008840:	2100      	movs	r1, #0
 8008842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008846:	6866      	ldr	r6, [r4, #4]
 8008848:	60a6      	str	r6, [r4, #8]
 800884a:	2e00      	cmp	r6, #0
 800884c:	bfa2      	ittt	ge
 800884e:	6821      	ldrge	r1, [r4, #0]
 8008850:	f021 0104 	bicge.w	r1, r1, #4
 8008854:	6021      	strge	r1, [r4, #0]
 8008856:	b90d      	cbnz	r5, 800885c <_printf_i+0x118>
 8008858:	2e00      	cmp	r6, #0
 800885a:	d04d      	beq.n	80088f8 <_printf_i+0x1b4>
 800885c:	4616      	mov	r6, r2
 800885e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008862:	fb03 5711 	mls	r7, r3, r1, r5
 8008866:	5dc7      	ldrb	r7, [r0, r7]
 8008868:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800886c:	462f      	mov	r7, r5
 800886e:	42bb      	cmp	r3, r7
 8008870:	460d      	mov	r5, r1
 8008872:	d9f4      	bls.n	800885e <_printf_i+0x11a>
 8008874:	2b08      	cmp	r3, #8
 8008876:	d10b      	bne.n	8008890 <_printf_i+0x14c>
 8008878:	6823      	ldr	r3, [r4, #0]
 800887a:	07df      	lsls	r7, r3, #31
 800887c:	d508      	bpl.n	8008890 <_printf_i+0x14c>
 800887e:	6923      	ldr	r3, [r4, #16]
 8008880:	6861      	ldr	r1, [r4, #4]
 8008882:	4299      	cmp	r1, r3
 8008884:	bfde      	ittt	le
 8008886:	2330      	movle	r3, #48	; 0x30
 8008888:	f806 3c01 	strble.w	r3, [r6, #-1]
 800888c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008890:	1b92      	subs	r2, r2, r6
 8008892:	6122      	str	r2, [r4, #16]
 8008894:	f8cd a000 	str.w	sl, [sp]
 8008898:	464b      	mov	r3, r9
 800889a:	aa03      	add	r2, sp, #12
 800889c:	4621      	mov	r1, r4
 800889e:	4640      	mov	r0, r8
 80088a0:	f7ff fee2 	bl	8008668 <_printf_common>
 80088a4:	3001      	adds	r0, #1
 80088a6:	d14c      	bne.n	8008942 <_printf_i+0x1fe>
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ac:	b004      	add	sp, #16
 80088ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b2:	4835      	ldr	r0, [pc, #212]	; (8008988 <_printf_i+0x244>)
 80088b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	680e      	ldr	r6, [r1, #0]
 80088bc:	061f      	lsls	r7, r3, #24
 80088be:	f856 5b04 	ldr.w	r5, [r6], #4
 80088c2:	600e      	str	r6, [r1, #0]
 80088c4:	d514      	bpl.n	80088f0 <_printf_i+0x1ac>
 80088c6:	07d9      	lsls	r1, r3, #31
 80088c8:	bf44      	itt	mi
 80088ca:	f043 0320 	orrmi.w	r3, r3, #32
 80088ce:	6023      	strmi	r3, [r4, #0]
 80088d0:	b91d      	cbnz	r5, 80088da <_printf_i+0x196>
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	f023 0320 	bic.w	r3, r3, #32
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	2310      	movs	r3, #16
 80088dc:	e7b0      	b.n	8008840 <_printf_i+0xfc>
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	f043 0320 	orr.w	r3, r3, #32
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	2378      	movs	r3, #120	; 0x78
 80088e8:	4828      	ldr	r0, [pc, #160]	; (800898c <_printf_i+0x248>)
 80088ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088ee:	e7e3      	b.n	80088b8 <_printf_i+0x174>
 80088f0:	065e      	lsls	r6, r3, #25
 80088f2:	bf48      	it	mi
 80088f4:	b2ad      	uxthmi	r5, r5
 80088f6:	e7e6      	b.n	80088c6 <_printf_i+0x182>
 80088f8:	4616      	mov	r6, r2
 80088fa:	e7bb      	b.n	8008874 <_printf_i+0x130>
 80088fc:	680b      	ldr	r3, [r1, #0]
 80088fe:	6826      	ldr	r6, [r4, #0]
 8008900:	6960      	ldr	r0, [r4, #20]
 8008902:	1d1d      	adds	r5, r3, #4
 8008904:	600d      	str	r5, [r1, #0]
 8008906:	0635      	lsls	r5, r6, #24
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	d501      	bpl.n	8008910 <_printf_i+0x1cc>
 800890c:	6018      	str	r0, [r3, #0]
 800890e:	e002      	b.n	8008916 <_printf_i+0x1d2>
 8008910:	0671      	lsls	r1, r6, #25
 8008912:	d5fb      	bpl.n	800890c <_printf_i+0x1c8>
 8008914:	8018      	strh	r0, [r3, #0]
 8008916:	2300      	movs	r3, #0
 8008918:	6123      	str	r3, [r4, #16]
 800891a:	4616      	mov	r6, r2
 800891c:	e7ba      	b.n	8008894 <_printf_i+0x150>
 800891e:	680b      	ldr	r3, [r1, #0]
 8008920:	1d1a      	adds	r2, r3, #4
 8008922:	600a      	str	r2, [r1, #0]
 8008924:	681e      	ldr	r6, [r3, #0]
 8008926:	6862      	ldr	r2, [r4, #4]
 8008928:	2100      	movs	r1, #0
 800892a:	4630      	mov	r0, r6
 800892c:	f7f7 fc58 	bl	80001e0 <memchr>
 8008930:	b108      	cbz	r0, 8008936 <_printf_i+0x1f2>
 8008932:	1b80      	subs	r0, r0, r6
 8008934:	6060      	str	r0, [r4, #4]
 8008936:	6863      	ldr	r3, [r4, #4]
 8008938:	6123      	str	r3, [r4, #16]
 800893a:	2300      	movs	r3, #0
 800893c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008940:	e7a8      	b.n	8008894 <_printf_i+0x150>
 8008942:	6923      	ldr	r3, [r4, #16]
 8008944:	4632      	mov	r2, r6
 8008946:	4649      	mov	r1, r9
 8008948:	4640      	mov	r0, r8
 800894a:	47d0      	blx	sl
 800894c:	3001      	adds	r0, #1
 800894e:	d0ab      	beq.n	80088a8 <_printf_i+0x164>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	079b      	lsls	r3, r3, #30
 8008954:	d413      	bmi.n	800897e <_printf_i+0x23a>
 8008956:	68e0      	ldr	r0, [r4, #12]
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	4298      	cmp	r0, r3
 800895c:	bfb8      	it	lt
 800895e:	4618      	movlt	r0, r3
 8008960:	e7a4      	b.n	80088ac <_printf_i+0x168>
 8008962:	2301      	movs	r3, #1
 8008964:	4632      	mov	r2, r6
 8008966:	4649      	mov	r1, r9
 8008968:	4640      	mov	r0, r8
 800896a:	47d0      	blx	sl
 800896c:	3001      	adds	r0, #1
 800896e:	d09b      	beq.n	80088a8 <_printf_i+0x164>
 8008970:	3501      	adds	r5, #1
 8008972:	68e3      	ldr	r3, [r4, #12]
 8008974:	9903      	ldr	r1, [sp, #12]
 8008976:	1a5b      	subs	r3, r3, r1
 8008978:	42ab      	cmp	r3, r5
 800897a:	dcf2      	bgt.n	8008962 <_printf_i+0x21e>
 800897c:	e7eb      	b.n	8008956 <_printf_i+0x212>
 800897e:	2500      	movs	r5, #0
 8008980:	f104 0619 	add.w	r6, r4, #25
 8008984:	e7f5      	b.n	8008972 <_printf_i+0x22e>
 8008986:	bf00      	nop
 8008988:	0800abee 	.word	0x0800abee
 800898c:	0800abff 	.word	0x0800abff

08008990 <quorem>:
 8008990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	6903      	ldr	r3, [r0, #16]
 8008996:	690c      	ldr	r4, [r1, #16]
 8008998:	42a3      	cmp	r3, r4
 800899a:	4607      	mov	r7, r0
 800899c:	f2c0 8081 	blt.w	8008aa2 <quorem+0x112>
 80089a0:	3c01      	subs	r4, #1
 80089a2:	f101 0814 	add.w	r8, r1, #20
 80089a6:	f100 0514 	add.w	r5, r0, #20
 80089aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089ae:	9301      	str	r3, [sp, #4]
 80089b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089b8:	3301      	adds	r3, #1
 80089ba:	429a      	cmp	r2, r3
 80089bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80089c8:	d331      	bcc.n	8008a2e <quorem+0x9e>
 80089ca:	f04f 0e00 	mov.w	lr, #0
 80089ce:	4640      	mov	r0, r8
 80089d0:	46ac      	mov	ip, r5
 80089d2:	46f2      	mov	sl, lr
 80089d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80089d8:	b293      	uxth	r3, r2
 80089da:	fb06 e303 	mla	r3, r6, r3, lr
 80089de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	ebaa 0303 	sub.w	r3, sl, r3
 80089e8:	0c12      	lsrs	r2, r2, #16
 80089ea:	f8dc a000 	ldr.w	sl, [ip]
 80089ee:	fb06 e202 	mla	r2, r6, r2, lr
 80089f2:	fa13 f38a 	uxtah	r3, r3, sl
 80089f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089fa:	fa1f fa82 	uxth.w	sl, r2
 80089fe:	f8dc 2000 	ldr.w	r2, [ip]
 8008a02:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008a06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a10:	4581      	cmp	r9, r0
 8008a12:	f84c 3b04 	str.w	r3, [ip], #4
 8008a16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a1a:	d2db      	bcs.n	80089d4 <quorem+0x44>
 8008a1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a20:	b92b      	cbnz	r3, 8008a2e <quorem+0x9e>
 8008a22:	9b01      	ldr	r3, [sp, #4]
 8008a24:	3b04      	subs	r3, #4
 8008a26:	429d      	cmp	r5, r3
 8008a28:	461a      	mov	r2, r3
 8008a2a:	d32e      	bcc.n	8008a8a <quorem+0xfa>
 8008a2c:	613c      	str	r4, [r7, #16]
 8008a2e:	4638      	mov	r0, r7
 8008a30:	f001 f8be 	bl	8009bb0 <__mcmp>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	db24      	blt.n	8008a82 <quorem+0xf2>
 8008a38:	3601      	adds	r6, #1
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	f04f 0c00 	mov.w	ip, #0
 8008a40:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a44:	f8d0 e000 	ldr.w	lr, [r0]
 8008a48:	b293      	uxth	r3, r2
 8008a4a:	ebac 0303 	sub.w	r3, ip, r3
 8008a4e:	0c12      	lsrs	r2, r2, #16
 8008a50:	fa13 f38e 	uxtah	r3, r3, lr
 8008a54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a62:	45c1      	cmp	r9, r8
 8008a64:	f840 3b04 	str.w	r3, [r0], #4
 8008a68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a6c:	d2e8      	bcs.n	8008a40 <quorem+0xb0>
 8008a6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a76:	b922      	cbnz	r2, 8008a82 <quorem+0xf2>
 8008a78:	3b04      	subs	r3, #4
 8008a7a:	429d      	cmp	r5, r3
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	d30a      	bcc.n	8008a96 <quorem+0x106>
 8008a80:	613c      	str	r4, [r7, #16]
 8008a82:	4630      	mov	r0, r6
 8008a84:	b003      	add	sp, #12
 8008a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8a:	6812      	ldr	r2, [r2, #0]
 8008a8c:	3b04      	subs	r3, #4
 8008a8e:	2a00      	cmp	r2, #0
 8008a90:	d1cc      	bne.n	8008a2c <quorem+0x9c>
 8008a92:	3c01      	subs	r4, #1
 8008a94:	e7c7      	b.n	8008a26 <quorem+0x96>
 8008a96:	6812      	ldr	r2, [r2, #0]
 8008a98:	3b04      	subs	r3, #4
 8008a9a:	2a00      	cmp	r2, #0
 8008a9c:	d1f0      	bne.n	8008a80 <quorem+0xf0>
 8008a9e:	3c01      	subs	r4, #1
 8008aa0:	e7eb      	b.n	8008a7a <quorem+0xea>
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	e7ee      	b.n	8008a84 <quorem+0xf4>
	...

08008aa8 <_dtoa_r>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	ed2d 8b02 	vpush	{d8}
 8008ab0:	ec57 6b10 	vmov	r6, r7, d0
 8008ab4:	b095      	sub	sp, #84	; 0x54
 8008ab6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ab8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008abc:	9105      	str	r1, [sp, #20]
 8008abe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ac6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ac8:	b975      	cbnz	r5, 8008ae8 <_dtoa_r+0x40>
 8008aca:	2010      	movs	r0, #16
 8008acc:	f000 fddc 	bl	8009688 <malloc>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	6260      	str	r0, [r4, #36]	; 0x24
 8008ad4:	b920      	cbnz	r0, 8008ae0 <_dtoa_r+0x38>
 8008ad6:	4bb2      	ldr	r3, [pc, #712]	; (8008da0 <_dtoa_r+0x2f8>)
 8008ad8:	21ea      	movs	r1, #234	; 0xea
 8008ada:	48b2      	ldr	r0, [pc, #712]	; (8008da4 <_dtoa_r+0x2fc>)
 8008adc:	f001 fa32 	bl	8009f44 <__assert_func>
 8008ae0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ae4:	6005      	str	r5, [r0, #0]
 8008ae6:	60c5      	str	r5, [r0, #12]
 8008ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008aea:	6819      	ldr	r1, [r3, #0]
 8008aec:	b151      	cbz	r1, 8008b04 <_dtoa_r+0x5c>
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	604a      	str	r2, [r1, #4]
 8008af2:	2301      	movs	r3, #1
 8008af4:	4093      	lsls	r3, r2
 8008af6:	608b      	str	r3, [r1, #8]
 8008af8:	4620      	mov	r0, r4
 8008afa:	f000 fe1b 	bl	8009734 <_Bfree>
 8008afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b00:	2200      	movs	r2, #0
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	1e3b      	subs	r3, r7, #0
 8008b06:	bfb9      	ittee	lt
 8008b08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b0c:	9303      	strlt	r3, [sp, #12]
 8008b0e:	2300      	movge	r3, #0
 8008b10:	f8c8 3000 	strge.w	r3, [r8]
 8008b14:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008b18:	4ba3      	ldr	r3, [pc, #652]	; (8008da8 <_dtoa_r+0x300>)
 8008b1a:	bfbc      	itt	lt
 8008b1c:	2201      	movlt	r2, #1
 8008b1e:	f8c8 2000 	strlt.w	r2, [r8]
 8008b22:	ea33 0309 	bics.w	r3, r3, r9
 8008b26:	d11b      	bne.n	8008b60 <_dtoa_r+0xb8>
 8008b28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b2e:	6013      	str	r3, [r2, #0]
 8008b30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b34:	4333      	orrs	r3, r6
 8008b36:	f000 857a 	beq.w	800962e <_dtoa_r+0xb86>
 8008b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b3c:	b963      	cbnz	r3, 8008b58 <_dtoa_r+0xb0>
 8008b3e:	4b9b      	ldr	r3, [pc, #620]	; (8008dac <_dtoa_r+0x304>)
 8008b40:	e024      	b.n	8008b8c <_dtoa_r+0xe4>
 8008b42:	4b9b      	ldr	r3, [pc, #620]	; (8008db0 <_dtoa_r+0x308>)
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	3308      	adds	r3, #8
 8008b48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b4a:	6013      	str	r3, [r2, #0]
 8008b4c:	9800      	ldr	r0, [sp, #0]
 8008b4e:	b015      	add	sp, #84	; 0x54
 8008b50:	ecbd 8b02 	vpop	{d8}
 8008b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b58:	4b94      	ldr	r3, [pc, #592]	; (8008dac <_dtoa_r+0x304>)
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	3303      	adds	r3, #3
 8008b5e:	e7f3      	b.n	8008b48 <_dtoa_r+0xa0>
 8008b60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b64:	2200      	movs	r2, #0
 8008b66:	ec51 0b17 	vmov	r0, r1, d7
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008b70:	f7f7 ffaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b74:	4680      	mov	r8, r0
 8008b76:	b158      	cbz	r0, 8008b90 <_dtoa_r+0xe8>
 8008b78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	6013      	str	r3, [r2, #0]
 8008b7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 8551 	beq.w	8009628 <_dtoa_r+0xb80>
 8008b86:	488b      	ldr	r0, [pc, #556]	; (8008db4 <_dtoa_r+0x30c>)
 8008b88:	6018      	str	r0, [r3, #0]
 8008b8a:	1e43      	subs	r3, r0, #1
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	e7dd      	b.n	8008b4c <_dtoa_r+0xa4>
 8008b90:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008b94:	aa12      	add	r2, sp, #72	; 0x48
 8008b96:	a913      	add	r1, sp, #76	; 0x4c
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f001 f8ad 	bl	8009cf8 <__d2b>
 8008b9e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ba2:	4683      	mov	fp, r0
 8008ba4:	2d00      	cmp	r5, #0
 8008ba6:	d07c      	beq.n	8008ca2 <_dtoa_r+0x1fa>
 8008ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008baa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008bae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bb2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008bb6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008bba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008bbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008bc2:	4b7d      	ldr	r3, [pc, #500]	; (8008db8 <_dtoa_r+0x310>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	4639      	mov	r1, r7
 8008bca:	f7f7 fb5d 	bl	8000288 <__aeabi_dsub>
 8008bce:	a36e      	add	r3, pc, #440	; (adr r3, 8008d88 <_dtoa_r+0x2e0>)
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	f7f7 fd10 	bl	80005f8 <__aeabi_dmul>
 8008bd8:	a36d      	add	r3, pc, #436	; (adr r3, 8008d90 <_dtoa_r+0x2e8>)
 8008bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bde:	f7f7 fb55 	bl	800028c <__adddf3>
 8008be2:	4606      	mov	r6, r0
 8008be4:	4628      	mov	r0, r5
 8008be6:	460f      	mov	r7, r1
 8008be8:	f7f7 fc9c 	bl	8000524 <__aeabi_i2d>
 8008bec:	a36a      	add	r3, pc, #424	; (adr r3, 8008d98 <_dtoa_r+0x2f0>)
 8008bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf2:	f7f7 fd01 	bl	80005f8 <__aeabi_dmul>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	4639      	mov	r1, r7
 8008bfe:	f7f7 fb45 	bl	800028c <__adddf3>
 8008c02:	4606      	mov	r6, r0
 8008c04:	460f      	mov	r7, r1
 8008c06:	f7f7 ffa7 	bl	8000b58 <__aeabi_d2iz>
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	4682      	mov	sl, r0
 8008c0e:	2300      	movs	r3, #0
 8008c10:	4630      	mov	r0, r6
 8008c12:	4639      	mov	r1, r7
 8008c14:	f7f7 ff62 	bl	8000adc <__aeabi_dcmplt>
 8008c18:	b148      	cbz	r0, 8008c2e <_dtoa_r+0x186>
 8008c1a:	4650      	mov	r0, sl
 8008c1c:	f7f7 fc82 	bl	8000524 <__aeabi_i2d>
 8008c20:	4632      	mov	r2, r6
 8008c22:	463b      	mov	r3, r7
 8008c24:	f7f7 ff50 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c28:	b908      	cbnz	r0, 8008c2e <_dtoa_r+0x186>
 8008c2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c2e:	f1ba 0f16 	cmp.w	sl, #22
 8008c32:	d854      	bhi.n	8008cde <_dtoa_r+0x236>
 8008c34:	4b61      	ldr	r3, [pc, #388]	; (8008dbc <_dtoa_r+0x314>)
 8008c36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c42:	f7f7 ff4b 	bl	8000adc <__aeabi_dcmplt>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d04b      	beq.n	8008ce2 <_dtoa_r+0x23a>
 8008c4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c4e:	2300      	movs	r3, #0
 8008c50:	930e      	str	r3, [sp, #56]	; 0x38
 8008c52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c54:	1b5d      	subs	r5, r3, r5
 8008c56:	1e6b      	subs	r3, r5, #1
 8008c58:	9304      	str	r3, [sp, #16]
 8008c5a:	bf43      	ittte	mi
 8008c5c:	2300      	movmi	r3, #0
 8008c5e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008c62:	9304      	strmi	r3, [sp, #16]
 8008c64:	f04f 0800 	movpl.w	r8, #0
 8008c68:	f1ba 0f00 	cmp.w	sl, #0
 8008c6c:	db3b      	blt.n	8008ce6 <_dtoa_r+0x23e>
 8008c6e:	9b04      	ldr	r3, [sp, #16]
 8008c70:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008c74:	4453      	add	r3, sl
 8008c76:	9304      	str	r3, [sp, #16]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	9306      	str	r3, [sp, #24]
 8008c7c:	9b05      	ldr	r3, [sp, #20]
 8008c7e:	2b09      	cmp	r3, #9
 8008c80:	d869      	bhi.n	8008d56 <_dtoa_r+0x2ae>
 8008c82:	2b05      	cmp	r3, #5
 8008c84:	bfc4      	itt	gt
 8008c86:	3b04      	subgt	r3, #4
 8008c88:	9305      	strgt	r3, [sp, #20]
 8008c8a:	9b05      	ldr	r3, [sp, #20]
 8008c8c:	f1a3 0302 	sub.w	r3, r3, #2
 8008c90:	bfcc      	ite	gt
 8008c92:	2500      	movgt	r5, #0
 8008c94:	2501      	movle	r5, #1
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	d869      	bhi.n	8008d6e <_dtoa_r+0x2c6>
 8008c9a:	e8df f003 	tbb	[pc, r3]
 8008c9e:	4e2c      	.short	0x4e2c
 8008ca0:	5a4c      	.short	0x5a4c
 8008ca2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008ca6:	441d      	add	r5, r3
 8008ca8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008cac:	2b20      	cmp	r3, #32
 8008cae:	bfc1      	itttt	gt
 8008cb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008cb4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008cb8:	fa09 f303 	lslgt.w	r3, r9, r3
 8008cbc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008cc0:	bfda      	itte	le
 8008cc2:	f1c3 0320 	rsble	r3, r3, #32
 8008cc6:	fa06 f003 	lslle.w	r0, r6, r3
 8008cca:	4318      	orrgt	r0, r3
 8008ccc:	f7f7 fc1a 	bl	8000504 <__aeabi_ui2d>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008cd8:	3d01      	subs	r5, #1
 8008cda:	9310      	str	r3, [sp, #64]	; 0x40
 8008cdc:	e771      	b.n	8008bc2 <_dtoa_r+0x11a>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e7b6      	b.n	8008c50 <_dtoa_r+0x1a8>
 8008ce2:	900e      	str	r0, [sp, #56]	; 0x38
 8008ce4:	e7b5      	b.n	8008c52 <_dtoa_r+0x1aa>
 8008ce6:	f1ca 0300 	rsb	r3, sl, #0
 8008cea:	9306      	str	r3, [sp, #24]
 8008cec:	2300      	movs	r3, #0
 8008cee:	eba8 080a 	sub.w	r8, r8, sl
 8008cf2:	930d      	str	r3, [sp, #52]	; 0x34
 8008cf4:	e7c2      	b.n	8008c7c <_dtoa_r+0x1d4>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	9308      	str	r3, [sp, #32]
 8008cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	dc39      	bgt.n	8008d74 <_dtoa_r+0x2cc>
 8008d00:	f04f 0901 	mov.w	r9, #1
 8008d04:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d08:	464b      	mov	r3, r9
 8008d0a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008d0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d10:	2200      	movs	r2, #0
 8008d12:	6042      	str	r2, [r0, #4]
 8008d14:	2204      	movs	r2, #4
 8008d16:	f102 0614 	add.w	r6, r2, #20
 8008d1a:	429e      	cmp	r6, r3
 8008d1c:	6841      	ldr	r1, [r0, #4]
 8008d1e:	d92f      	bls.n	8008d80 <_dtoa_r+0x2d8>
 8008d20:	4620      	mov	r0, r4
 8008d22:	f000 fcc7 	bl	80096b4 <_Balloc>
 8008d26:	9000      	str	r0, [sp, #0]
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d14b      	bne.n	8008dc4 <_dtoa_r+0x31c>
 8008d2c:	4b24      	ldr	r3, [pc, #144]	; (8008dc0 <_dtoa_r+0x318>)
 8008d2e:	4602      	mov	r2, r0
 8008d30:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d34:	e6d1      	b.n	8008ada <_dtoa_r+0x32>
 8008d36:	2301      	movs	r3, #1
 8008d38:	e7de      	b.n	8008cf8 <_dtoa_r+0x250>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	9308      	str	r3, [sp, #32]
 8008d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d40:	eb0a 0903 	add.w	r9, sl, r3
 8008d44:	f109 0301 	add.w	r3, r9, #1
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	9301      	str	r3, [sp, #4]
 8008d4c:	bfb8      	it	lt
 8008d4e:	2301      	movlt	r3, #1
 8008d50:	e7dd      	b.n	8008d0e <_dtoa_r+0x266>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e7f2      	b.n	8008d3c <_dtoa_r+0x294>
 8008d56:	2501      	movs	r5, #1
 8008d58:	2300      	movs	r3, #0
 8008d5a:	9305      	str	r3, [sp, #20]
 8008d5c:	9508      	str	r5, [sp, #32]
 8008d5e:	f04f 39ff 	mov.w	r9, #4294967295
 8008d62:	2200      	movs	r2, #0
 8008d64:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d68:	2312      	movs	r3, #18
 8008d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8008d6c:	e7cf      	b.n	8008d0e <_dtoa_r+0x266>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	9308      	str	r3, [sp, #32]
 8008d72:	e7f4      	b.n	8008d5e <_dtoa_r+0x2b6>
 8008d74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008d78:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d7c:	464b      	mov	r3, r9
 8008d7e:	e7c6      	b.n	8008d0e <_dtoa_r+0x266>
 8008d80:	3101      	adds	r1, #1
 8008d82:	6041      	str	r1, [r0, #4]
 8008d84:	0052      	lsls	r2, r2, #1
 8008d86:	e7c6      	b.n	8008d16 <_dtoa_r+0x26e>
 8008d88:	636f4361 	.word	0x636f4361
 8008d8c:	3fd287a7 	.word	0x3fd287a7
 8008d90:	8b60c8b3 	.word	0x8b60c8b3
 8008d94:	3fc68a28 	.word	0x3fc68a28
 8008d98:	509f79fb 	.word	0x509f79fb
 8008d9c:	3fd34413 	.word	0x3fd34413
 8008da0:	0800ac1d 	.word	0x0800ac1d
 8008da4:	0800ac34 	.word	0x0800ac34
 8008da8:	7ff00000 	.word	0x7ff00000
 8008dac:	0800ac19 	.word	0x0800ac19
 8008db0:	0800ac10 	.word	0x0800ac10
 8008db4:	0800abed 	.word	0x0800abed
 8008db8:	3ff80000 	.word	0x3ff80000
 8008dbc:	0800ad30 	.word	0x0800ad30
 8008dc0:	0800ac93 	.word	0x0800ac93
 8008dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dc6:	9a00      	ldr	r2, [sp, #0]
 8008dc8:	601a      	str	r2, [r3, #0]
 8008dca:	9b01      	ldr	r3, [sp, #4]
 8008dcc:	2b0e      	cmp	r3, #14
 8008dce:	f200 80ad 	bhi.w	8008f2c <_dtoa_r+0x484>
 8008dd2:	2d00      	cmp	r5, #0
 8008dd4:	f000 80aa 	beq.w	8008f2c <_dtoa_r+0x484>
 8008dd8:	f1ba 0f00 	cmp.w	sl, #0
 8008ddc:	dd36      	ble.n	8008e4c <_dtoa_r+0x3a4>
 8008dde:	4ac3      	ldr	r2, [pc, #780]	; (80090ec <_dtoa_r+0x644>)
 8008de0:	f00a 030f 	and.w	r3, sl, #15
 8008de4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008de8:	ed93 7b00 	vldr	d7, [r3]
 8008dec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008df0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008df4:	eeb0 8a47 	vmov.f32	s16, s14
 8008df8:	eef0 8a67 	vmov.f32	s17, s15
 8008dfc:	d016      	beq.n	8008e2c <_dtoa_r+0x384>
 8008dfe:	4bbc      	ldr	r3, [pc, #752]	; (80090f0 <_dtoa_r+0x648>)
 8008e00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e08:	f7f7 fd20 	bl	800084c <__aeabi_ddiv>
 8008e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e10:	f007 070f 	and.w	r7, r7, #15
 8008e14:	2503      	movs	r5, #3
 8008e16:	4eb6      	ldr	r6, [pc, #728]	; (80090f0 <_dtoa_r+0x648>)
 8008e18:	b957      	cbnz	r7, 8008e30 <_dtoa_r+0x388>
 8008e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e1e:	ec53 2b18 	vmov	r2, r3, d8
 8008e22:	f7f7 fd13 	bl	800084c <__aeabi_ddiv>
 8008e26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e2a:	e029      	b.n	8008e80 <_dtoa_r+0x3d8>
 8008e2c:	2502      	movs	r5, #2
 8008e2e:	e7f2      	b.n	8008e16 <_dtoa_r+0x36e>
 8008e30:	07f9      	lsls	r1, r7, #31
 8008e32:	d508      	bpl.n	8008e46 <_dtoa_r+0x39e>
 8008e34:	ec51 0b18 	vmov	r0, r1, d8
 8008e38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e3c:	f7f7 fbdc 	bl	80005f8 <__aeabi_dmul>
 8008e40:	ec41 0b18 	vmov	d8, r0, r1
 8008e44:	3501      	adds	r5, #1
 8008e46:	107f      	asrs	r7, r7, #1
 8008e48:	3608      	adds	r6, #8
 8008e4a:	e7e5      	b.n	8008e18 <_dtoa_r+0x370>
 8008e4c:	f000 80a6 	beq.w	8008f9c <_dtoa_r+0x4f4>
 8008e50:	f1ca 0600 	rsb	r6, sl, #0
 8008e54:	4ba5      	ldr	r3, [pc, #660]	; (80090ec <_dtoa_r+0x644>)
 8008e56:	4fa6      	ldr	r7, [pc, #664]	; (80090f0 <_dtoa_r+0x648>)
 8008e58:	f006 020f 	and.w	r2, r6, #15
 8008e5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e68:	f7f7 fbc6 	bl	80005f8 <__aeabi_dmul>
 8008e6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e70:	1136      	asrs	r6, r6, #4
 8008e72:	2300      	movs	r3, #0
 8008e74:	2502      	movs	r5, #2
 8008e76:	2e00      	cmp	r6, #0
 8008e78:	f040 8085 	bne.w	8008f86 <_dtoa_r+0x4de>
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1d2      	bne.n	8008e26 <_dtoa_r+0x37e>
 8008e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f000 808c 	beq.w	8008fa0 <_dtoa_r+0x4f8>
 8008e88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e8c:	4b99      	ldr	r3, [pc, #612]	; (80090f4 <_dtoa_r+0x64c>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	4630      	mov	r0, r6
 8008e92:	4639      	mov	r1, r7
 8008e94:	f7f7 fe22 	bl	8000adc <__aeabi_dcmplt>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	f000 8081 	beq.w	8008fa0 <_dtoa_r+0x4f8>
 8008e9e:	9b01      	ldr	r3, [sp, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d07d      	beq.n	8008fa0 <_dtoa_r+0x4f8>
 8008ea4:	f1b9 0f00 	cmp.w	r9, #0
 8008ea8:	dd3c      	ble.n	8008f24 <_dtoa_r+0x47c>
 8008eaa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008eae:	9307      	str	r3, [sp, #28]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	4b91      	ldr	r3, [pc, #580]	; (80090f8 <_dtoa_r+0x650>)
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	4639      	mov	r1, r7
 8008eb8:	f7f7 fb9e 	bl	80005f8 <__aeabi_dmul>
 8008ebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ec0:	3501      	adds	r5, #1
 8008ec2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008ec6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f7f7 fb2a 	bl	8000524 <__aeabi_i2d>
 8008ed0:	4632      	mov	r2, r6
 8008ed2:	463b      	mov	r3, r7
 8008ed4:	f7f7 fb90 	bl	80005f8 <__aeabi_dmul>
 8008ed8:	4b88      	ldr	r3, [pc, #544]	; (80090fc <_dtoa_r+0x654>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	f7f7 f9d6 	bl	800028c <__adddf3>
 8008ee0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ee8:	9303      	str	r3, [sp, #12]
 8008eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d15c      	bne.n	8008faa <_dtoa_r+0x502>
 8008ef0:	4b83      	ldr	r3, [pc, #524]	; (8009100 <_dtoa_r+0x658>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	4639      	mov	r1, r7
 8008ef8:	f7f7 f9c6 	bl	8000288 <__aeabi_dsub>
 8008efc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f00:	4606      	mov	r6, r0
 8008f02:	460f      	mov	r7, r1
 8008f04:	f7f7 fe08 	bl	8000b18 <__aeabi_dcmpgt>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	f040 8296 	bne.w	800943a <_dtoa_r+0x992>
 8008f0e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008f12:	4630      	mov	r0, r6
 8008f14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f18:	4639      	mov	r1, r7
 8008f1a:	f7f7 fddf 	bl	8000adc <__aeabi_dcmplt>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f040 8288 	bne.w	8009434 <_dtoa_r+0x98c>
 8008f24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f2c0 8158 	blt.w	80091e4 <_dtoa_r+0x73c>
 8008f34:	f1ba 0f0e 	cmp.w	sl, #14
 8008f38:	f300 8154 	bgt.w	80091e4 <_dtoa_r+0x73c>
 8008f3c:	4b6b      	ldr	r3, [pc, #428]	; (80090ec <_dtoa_r+0x644>)
 8008f3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f42:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f280 80e3 	bge.w	8009114 <_dtoa_r+0x66c>
 8008f4e:	9b01      	ldr	r3, [sp, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f300 80df 	bgt.w	8009114 <_dtoa_r+0x66c>
 8008f56:	f040 826d 	bne.w	8009434 <_dtoa_r+0x98c>
 8008f5a:	4b69      	ldr	r3, [pc, #420]	; (8009100 <_dtoa_r+0x658>)
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	4640      	mov	r0, r8
 8008f60:	4649      	mov	r1, r9
 8008f62:	f7f7 fb49 	bl	80005f8 <__aeabi_dmul>
 8008f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f6a:	f7f7 fdcb 	bl	8000b04 <__aeabi_dcmpge>
 8008f6e:	9e01      	ldr	r6, [sp, #4]
 8008f70:	4637      	mov	r7, r6
 8008f72:	2800      	cmp	r0, #0
 8008f74:	f040 8243 	bne.w	80093fe <_dtoa_r+0x956>
 8008f78:	9d00      	ldr	r5, [sp, #0]
 8008f7a:	2331      	movs	r3, #49	; 0x31
 8008f7c:	f805 3b01 	strb.w	r3, [r5], #1
 8008f80:	f10a 0a01 	add.w	sl, sl, #1
 8008f84:	e23f      	b.n	8009406 <_dtoa_r+0x95e>
 8008f86:	07f2      	lsls	r2, r6, #31
 8008f88:	d505      	bpl.n	8008f96 <_dtoa_r+0x4ee>
 8008f8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f8e:	f7f7 fb33 	bl	80005f8 <__aeabi_dmul>
 8008f92:	3501      	adds	r5, #1
 8008f94:	2301      	movs	r3, #1
 8008f96:	1076      	asrs	r6, r6, #1
 8008f98:	3708      	adds	r7, #8
 8008f9a:	e76c      	b.n	8008e76 <_dtoa_r+0x3ce>
 8008f9c:	2502      	movs	r5, #2
 8008f9e:	e76f      	b.n	8008e80 <_dtoa_r+0x3d8>
 8008fa0:	9b01      	ldr	r3, [sp, #4]
 8008fa2:	f8cd a01c 	str.w	sl, [sp, #28]
 8008fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8008fa8:	e78d      	b.n	8008ec6 <_dtoa_r+0x41e>
 8008faa:	9900      	ldr	r1, [sp, #0]
 8008fac:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008fae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fb0:	4b4e      	ldr	r3, [pc, #312]	; (80090ec <_dtoa_r+0x644>)
 8008fb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fb6:	4401      	add	r1, r0
 8008fb8:	9102      	str	r1, [sp, #8]
 8008fba:	9908      	ldr	r1, [sp, #32]
 8008fbc:	eeb0 8a47 	vmov.f32	s16, s14
 8008fc0:	eef0 8a67 	vmov.f32	s17, s15
 8008fc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fcc:	2900      	cmp	r1, #0
 8008fce:	d045      	beq.n	800905c <_dtoa_r+0x5b4>
 8008fd0:	494c      	ldr	r1, [pc, #304]	; (8009104 <_dtoa_r+0x65c>)
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	f7f7 fc3a 	bl	800084c <__aeabi_ddiv>
 8008fd8:	ec53 2b18 	vmov	r2, r3, d8
 8008fdc:	f7f7 f954 	bl	8000288 <__aeabi_dsub>
 8008fe0:	9d00      	ldr	r5, [sp, #0]
 8008fe2:	ec41 0b18 	vmov	d8, r0, r1
 8008fe6:	4639      	mov	r1, r7
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f7f7 fdb5 	bl	8000b58 <__aeabi_d2iz>
 8008fee:	900c      	str	r0, [sp, #48]	; 0x30
 8008ff0:	f7f7 fa98 	bl	8000524 <__aeabi_i2d>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	4639      	mov	r1, r7
 8008ffc:	f7f7 f944 	bl	8000288 <__aeabi_dsub>
 8009000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009002:	3330      	adds	r3, #48	; 0x30
 8009004:	f805 3b01 	strb.w	r3, [r5], #1
 8009008:	ec53 2b18 	vmov	r2, r3, d8
 800900c:	4606      	mov	r6, r0
 800900e:	460f      	mov	r7, r1
 8009010:	f7f7 fd64 	bl	8000adc <__aeabi_dcmplt>
 8009014:	2800      	cmp	r0, #0
 8009016:	d165      	bne.n	80090e4 <_dtoa_r+0x63c>
 8009018:	4632      	mov	r2, r6
 800901a:	463b      	mov	r3, r7
 800901c:	4935      	ldr	r1, [pc, #212]	; (80090f4 <_dtoa_r+0x64c>)
 800901e:	2000      	movs	r0, #0
 8009020:	f7f7 f932 	bl	8000288 <__aeabi_dsub>
 8009024:	ec53 2b18 	vmov	r2, r3, d8
 8009028:	f7f7 fd58 	bl	8000adc <__aeabi_dcmplt>
 800902c:	2800      	cmp	r0, #0
 800902e:	f040 80b9 	bne.w	80091a4 <_dtoa_r+0x6fc>
 8009032:	9b02      	ldr	r3, [sp, #8]
 8009034:	429d      	cmp	r5, r3
 8009036:	f43f af75 	beq.w	8008f24 <_dtoa_r+0x47c>
 800903a:	4b2f      	ldr	r3, [pc, #188]	; (80090f8 <_dtoa_r+0x650>)
 800903c:	ec51 0b18 	vmov	r0, r1, d8
 8009040:	2200      	movs	r2, #0
 8009042:	f7f7 fad9 	bl	80005f8 <__aeabi_dmul>
 8009046:	4b2c      	ldr	r3, [pc, #176]	; (80090f8 <_dtoa_r+0x650>)
 8009048:	ec41 0b18 	vmov	d8, r0, r1
 800904c:	2200      	movs	r2, #0
 800904e:	4630      	mov	r0, r6
 8009050:	4639      	mov	r1, r7
 8009052:	f7f7 fad1 	bl	80005f8 <__aeabi_dmul>
 8009056:	4606      	mov	r6, r0
 8009058:	460f      	mov	r7, r1
 800905a:	e7c4      	b.n	8008fe6 <_dtoa_r+0x53e>
 800905c:	ec51 0b17 	vmov	r0, r1, d7
 8009060:	f7f7 faca 	bl	80005f8 <__aeabi_dmul>
 8009064:	9b02      	ldr	r3, [sp, #8]
 8009066:	9d00      	ldr	r5, [sp, #0]
 8009068:	930c      	str	r3, [sp, #48]	; 0x30
 800906a:	ec41 0b18 	vmov	d8, r0, r1
 800906e:	4639      	mov	r1, r7
 8009070:	4630      	mov	r0, r6
 8009072:	f7f7 fd71 	bl	8000b58 <__aeabi_d2iz>
 8009076:	9011      	str	r0, [sp, #68]	; 0x44
 8009078:	f7f7 fa54 	bl	8000524 <__aeabi_i2d>
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	4630      	mov	r0, r6
 8009082:	4639      	mov	r1, r7
 8009084:	f7f7 f900 	bl	8000288 <__aeabi_dsub>
 8009088:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800908a:	3330      	adds	r3, #48	; 0x30
 800908c:	f805 3b01 	strb.w	r3, [r5], #1
 8009090:	9b02      	ldr	r3, [sp, #8]
 8009092:	429d      	cmp	r5, r3
 8009094:	4606      	mov	r6, r0
 8009096:	460f      	mov	r7, r1
 8009098:	f04f 0200 	mov.w	r2, #0
 800909c:	d134      	bne.n	8009108 <_dtoa_r+0x660>
 800909e:	4b19      	ldr	r3, [pc, #100]	; (8009104 <_dtoa_r+0x65c>)
 80090a0:	ec51 0b18 	vmov	r0, r1, d8
 80090a4:	f7f7 f8f2 	bl	800028c <__adddf3>
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4630      	mov	r0, r6
 80090ae:	4639      	mov	r1, r7
 80090b0:	f7f7 fd32 	bl	8000b18 <__aeabi_dcmpgt>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d175      	bne.n	80091a4 <_dtoa_r+0x6fc>
 80090b8:	ec53 2b18 	vmov	r2, r3, d8
 80090bc:	4911      	ldr	r1, [pc, #68]	; (8009104 <_dtoa_r+0x65c>)
 80090be:	2000      	movs	r0, #0
 80090c0:	f7f7 f8e2 	bl	8000288 <__aeabi_dsub>
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	4630      	mov	r0, r6
 80090ca:	4639      	mov	r1, r7
 80090cc:	f7f7 fd06 	bl	8000adc <__aeabi_dcmplt>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	f43f af27 	beq.w	8008f24 <_dtoa_r+0x47c>
 80090d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090d8:	1e6b      	subs	r3, r5, #1
 80090da:	930c      	str	r3, [sp, #48]	; 0x30
 80090dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090e0:	2b30      	cmp	r3, #48	; 0x30
 80090e2:	d0f8      	beq.n	80090d6 <_dtoa_r+0x62e>
 80090e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80090e8:	e04a      	b.n	8009180 <_dtoa_r+0x6d8>
 80090ea:	bf00      	nop
 80090ec:	0800ad30 	.word	0x0800ad30
 80090f0:	0800ad08 	.word	0x0800ad08
 80090f4:	3ff00000 	.word	0x3ff00000
 80090f8:	40240000 	.word	0x40240000
 80090fc:	401c0000 	.word	0x401c0000
 8009100:	40140000 	.word	0x40140000
 8009104:	3fe00000 	.word	0x3fe00000
 8009108:	4baf      	ldr	r3, [pc, #700]	; (80093c8 <_dtoa_r+0x920>)
 800910a:	f7f7 fa75 	bl	80005f8 <__aeabi_dmul>
 800910e:	4606      	mov	r6, r0
 8009110:	460f      	mov	r7, r1
 8009112:	e7ac      	b.n	800906e <_dtoa_r+0x5c6>
 8009114:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009118:	9d00      	ldr	r5, [sp, #0]
 800911a:	4642      	mov	r2, r8
 800911c:	464b      	mov	r3, r9
 800911e:	4630      	mov	r0, r6
 8009120:	4639      	mov	r1, r7
 8009122:	f7f7 fb93 	bl	800084c <__aeabi_ddiv>
 8009126:	f7f7 fd17 	bl	8000b58 <__aeabi_d2iz>
 800912a:	9002      	str	r0, [sp, #8]
 800912c:	f7f7 f9fa 	bl	8000524 <__aeabi_i2d>
 8009130:	4642      	mov	r2, r8
 8009132:	464b      	mov	r3, r9
 8009134:	f7f7 fa60 	bl	80005f8 <__aeabi_dmul>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	4630      	mov	r0, r6
 800913e:	4639      	mov	r1, r7
 8009140:	f7f7 f8a2 	bl	8000288 <__aeabi_dsub>
 8009144:	9e02      	ldr	r6, [sp, #8]
 8009146:	9f01      	ldr	r7, [sp, #4]
 8009148:	3630      	adds	r6, #48	; 0x30
 800914a:	f805 6b01 	strb.w	r6, [r5], #1
 800914e:	9e00      	ldr	r6, [sp, #0]
 8009150:	1bae      	subs	r6, r5, r6
 8009152:	42b7      	cmp	r7, r6
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	d137      	bne.n	80091ca <_dtoa_r+0x722>
 800915a:	f7f7 f897 	bl	800028c <__adddf3>
 800915e:	4642      	mov	r2, r8
 8009160:	464b      	mov	r3, r9
 8009162:	4606      	mov	r6, r0
 8009164:	460f      	mov	r7, r1
 8009166:	f7f7 fcd7 	bl	8000b18 <__aeabi_dcmpgt>
 800916a:	b9c8      	cbnz	r0, 80091a0 <_dtoa_r+0x6f8>
 800916c:	4642      	mov	r2, r8
 800916e:	464b      	mov	r3, r9
 8009170:	4630      	mov	r0, r6
 8009172:	4639      	mov	r1, r7
 8009174:	f7f7 fca8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009178:	b110      	cbz	r0, 8009180 <_dtoa_r+0x6d8>
 800917a:	9b02      	ldr	r3, [sp, #8]
 800917c:	07d9      	lsls	r1, r3, #31
 800917e:	d40f      	bmi.n	80091a0 <_dtoa_r+0x6f8>
 8009180:	4620      	mov	r0, r4
 8009182:	4659      	mov	r1, fp
 8009184:	f000 fad6 	bl	8009734 <_Bfree>
 8009188:	2300      	movs	r3, #0
 800918a:	702b      	strb	r3, [r5, #0]
 800918c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800918e:	f10a 0001 	add.w	r0, sl, #1
 8009192:	6018      	str	r0, [r3, #0]
 8009194:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009196:	2b00      	cmp	r3, #0
 8009198:	f43f acd8 	beq.w	8008b4c <_dtoa_r+0xa4>
 800919c:	601d      	str	r5, [r3, #0]
 800919e:	e4d5      	b.n	8008b4c <_dtoa_r+0xa4>
 80091a0:	f8cd a01c 	str.w	sl, [sp, #28]
 80091a4:	462b      	mov	r3, r5
 80091a6:	461d      	mov	r5, r3
 80091a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091ac:	2a39      	cmp	r2, #57	; 0x39
 80091ae:	d108      	bne.n	80091c2 <_dtoa_r+0x71a>
 80091b0:	9a00      	ldr	r2, [sp, #0]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d1f7      	bne.n	80091a6 <_dtoa_r+0x6fe>
 80091b6:	9a07      	ldr	r2, [sp, #28]
 80091b8:	9900      	ldr	r1, [sp, #0]
 80091ba:	3201      	adds	r2, #1
 80091bc:	9207      	str	r2, [sp, #28]
 80091be:	2230      	movs	r2, #48	; 0x30
 80091c0:	700a      	strb	r2, [r1, #0]
 80091c2:	781a      	ldrb	r2, [r3, #0]
 80091c4:	3201      	adds	r2, #1
 80091c6:	701a      	strb	r2, [r3, #0]
 80091c8:	e78c      	b.n	80090e4 <_dtoa_r+0x63c>
 80091ca:	4b7f      	ldr	r3, [pc, #508]	; (80093c8 <_dtoa_r+0x920>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	f7f7 fa13 	bl	80005f8 <__aeabi_dmul>
 80091d2:	2200      	movs	r2, #0
 80091d4:	2300      	movs	r3, #0
 80091d6:	4606      	mov	r6, r0
 80091d8:	460f      	mov	r7, r1
 80091da:	f7f7 fc75 	bl	8000ac8 <__aeabi_dcmpeq>
 80091de:	2800      	cmp	r0, #0
 80091e0:	d09b      	beq.n	800911a <_dtoa_r+0x672>
 80091e2:	e7cd      	b.n	8009180 <_dtoa_r+0x6d8>
 80091e4:	9a08      	ldr	r2, [sp, #32]
 80091e6:	2a00      	cmp	r2, #0
 80091e8:	f000 80c4 	beq.w	8009374 <_dtoa_r+0x8cc>
 80091ec:	9a05      	ldr	r2, [sp, #20]
 80091ee:	2a01      	cmp	r2, #1
 80091f0:	f300 80a8 	bgt.w	8009344 <_dtoa_r+0x89c>
 80091f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091f6:	2a00      	cmp	r2, #0
 80091f8:	f000 80a0 	beq.w	800933c <_dtoa_r+0x894>
 80091fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009200:	9e06      	ldr	r6, [sp, #24]
 8009202:	4645      	mov	r5, r8
 8009204:	9a04      	ldr	r2, [sp, #16]
 8009206:	2101      	movs	r1, #1
 8009208:	441a      	add	r2, r3
 800920a:	4620      	mov	r0, r4
 800920c:	4498      	add	r8, r3
 800920e:	9204      	str	r2, [sp, #16]
 8009210:	f000 fb4c 	bl	80098ac <__i2b>
 8009214:	4607      	mov	r7, r0
 8009216:	2d00      	cmp	r5, #0
 8009218:	dd0b      	ble.n	8009232 <_dtoa_r+0x78a>
 800921a:	9b04      	ldr	r3, [sp, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	dd08      	ble.n	8009232 <_dtoa_r+0x78a>
 8009220:	42ab      	cmp	r3, r5
 8009222:	9a04      	ldr	r2, [sp, #16]
 8009224:	bfa8      	it	ge
 8009226:	462b      	movge	r3, r5
 8009228:	eba8 0803 	sub.w	r8, r8, r3
 800922c:	1aed      	subs	r5, r5, r3
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	9304      	str	r3, [sp, #16]
 8009232:	9b06      	ldr	r3, [sp, #24]
 8009234:	b1fb      	cbz	r3, 8009276 <_dtoa_r+0x7ce>
 8009236:	9b08      	ldr	r3, [sp, #32]
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 809f 	beq.w	800937c <_dtoa_r+0x8d4>
 800923e:	2e00      	cmp	r6, #0
 8009240:	dd11      	ble.n	8009266 <_dtoa_r+0x7be>
 8009242:	4639      	mov	r1, r7
 8009244:	4632      	mov	r2, r6
 8009246:	4620      	mov	r0, r4
 8009248:	f000 fbec 	bl	8009a24 <__pow5mult>
 800924c:	465a      	mov	r2, fp
 800924e:	4601      	mov	r1, r0
 8009250:	4607      	mov	r7, r0
 8009252:	4620      	mov	r0, r4
 8009254:	f000 fb40 	bl	80098d8 <__multiply>
 8009258:	4659      	mov	r1, fp
 800925a:	9007      	str	r0, [sp, #28]
 800925c:	4620      	mov	r0, r4
 800925e:	f000 fa69 	bl	8009734 <_Bfree>
 8009262:	9b07      	ldr	r3, [sp, #28]
 8009264:	469b      	mov	fp, r3
 8009266:	9b06      	ldr	r3, [sp, #24]
 8009268:	1b9a      	subs	r2, r3, r6
 800926a:	d004      	beq.n	8009276 <_dtoa_r+0x7ce>
 800926c:	4659      	mov	r1, fp
 800926e:	4620      	mov	r0, r4
 8009270:	f000 fbd8 	bl	8009a24 <__pow5mult>
 8009274:	4683      	mov	fp, r0
 8009276:	2101      	movs	r1, #1
 8009278:	4620      	mov	r0, r4
 800927a:	f000 fb17 	bl	80098ac <__i2b>
 800927e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009280:	2b00      	cmp	r3, #0
 8009282:	4606      	mov	r6, r0
 8009284:	dd7c      	ble.n	8009380 <_dtoa_r+0x8d8>
 8009286:	461a      	mov	r2, r3
 8009288:	4601      	mov	r1, r0
 800928a:	4620      	mov	r0, r4
 800928c:	f000 fbca 	bl	8009a24 <__pow5mult>
 8009290:	9b05      	ldr	r3, [sp, #20]
 8009292:	2b01      	cmp	r3, #1
 8009294:	4606      	mov	r6, r0
 8009296:	dd76      	ble.n	8009386 <_dtoa_r+0x8de>
 8009298:	2300      	movs	r3, #0
 800929a:	9306      	str	r3, [sp, #24]
 800929c:	6933      	ldr	r3, [r6, #16]
 800929e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092a2:	6918      	ldr	r0, [r3, #16]
 80092a4:	f000 fab2 	bl	800980c <__hi0bits>
 80092a8:	f1c0 0020 	rsb	r0, r0, #32
 80092ac:	9b04      	ldr	r3, [sp, #16]
 80092ae:	4418      	add	r0, r3
 80092b0:	f010 001f 	ands.w	r0, r0, #31
 80092b4:	f000 8086 	beq.w	80093c4 <_dtoa_r+0x91c>
 80092b8:	f1c0 0320 	rsb	r3, r0, #32
 80092bc:	2b04      	cmp	r3, #4
 80092be:	dd7f      	ble.n	80093c0 <_dtoa_r+0x918>
 80092c0:	f1c0 001c 	rsb	r0, r0, #28
 80092c4:	9b04      	ldr	r3, [sp, #16]
 80092c6:	4403      	add	r3, r0
 80092c8:	4480      	add	r8, r0
 80092ca:	4405      	add	r5, r0
 80092cc:	9304      	str	r3, [sp, #16]
 80092ce:	f1b8 0f00 	cmp.w	r8, #0
 80092d2:	dd05      	ble.n	80092e0 <_dtoa_r+0x838>
 80092d4:	4659      	mov	r1, fp
 80092d6:	4642      	mov	r2, r8
 80092d8:	4620      	mov	r0, r4
 80092da:	f000 fbfd 	bl	8009ad8 <__lshift>
 80092de:	4683      	mov	fp, r0
 80092e0:	9b04      	ldr	r3, [sp, #16]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	dd05      	ble.n	80092f2 <_dtoa_r+0x84a>
 80092e6:	4631      	mov	r1, r6
 80092e8:	461a      	mov	r2, r3
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 fbf4 	bl	8009ad8 <__lshift>
 80092f0:	4606      	mov	r6, r0
 80092f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d069      	beq.n	80093cc <_dtoa_r+0x924>
 80092f8:	4631      	mov	r1, r6
 80092fa:	4658      	mov	r0, fp
 80092fc:	f000 fc58 	bl	8009bb0 <__mcmp>
 8009300:	2800      	cmp	r0, #0
 8009302:	da63      	bge.n	80093cc <_dtoa_r+0x924>
 8009304:	2300      	movs	r3, #0
 8009306:	4659      	mov	r1, fp
 8009308:	220a      	movs	r2, #10
 800930a:	4620      	mov	r0, r4
 800930c:	f000 fa34 	bl	8009778 <__multadd>
 8009310:	9b08      	ldr	r3, [sp, #32]
 8009312:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009316:	4683      	mov	fp, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	f000 818f 	beq.w	800963c <_dtoa_r+0xb94>
 800931e:	4639      	mov	r1, r7
 8009320:	2300      	movs	r3, #0
 8009322:	220a      	movs	r2, #10
 8009324:	4620      	mov	r0, r4
 8009326:	f000 fa27 	bl	8009778 <__multadd>
 800932a:	f1b9 0f00 	cmp.w	r9, #0
 800932e:	4607      	mov	r7, r0
 8009330:	f300 808e 	bgt.w	8009450 <_dtoa_r+0x9a8>
 8009334:	9b05      	ldr	r3, [sp, #20]
 8009336:	2b02      	cmp	r3, #2
 8009338:	dc50      	bgt.n	80093dc <_dtoa_r+0x934>
 800933a:	e089      	b.n	8009450 <_dtoa_r+0x9a8>
 800933c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800933e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009342:	e75d      	b.n	8009200 <_dtoa_r+0x758>
 8009344:	9b01      	ldr	r3, [sp, #4]
 8009346:	1e5e      	subs	r6, r3, #1
 8009348:	9b06      	ldr	r3, [sp, #24]
 800934a:	42b3      	cmp	r3, r6
 800934c:	bfbf      	itttt	lt
 800934e:	9b06      	ldrlt	r3, [sp, #24]
 8009350:	9606      	strlt	r6, [sp, #24]
 8009352:	1af2      	sublt	r2, r6, r3
 8009354:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009356:	bfb6      	itet	lt
 8009358:	189b      	addlt	r3, r3, r2
 800935a:	1b9e      	subge	r6, r3, r6
 800935c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800935e:	9b01      	ldr	r3, [sp, #4]
 8009360:	bfb8      	it	lt
 8009362:	2600      	movlt	r6, #0
 8009364:	2b00      	cmp	r3, #0
 8009366:	bfb5      	itete	lt
 8009368:	eba8 0503 	sublt.w	r5, r8, r3
 800936c:	9b01      	ldrge	r3, [sp, #4]
 800936e:	2300      	movlt	r3, #0
 8009370:	4645      	movge	r5, r8
 8009372:	e747      	b.n	8009204 <_dtoa_r+0x75c>
 8009374:	9e06      	ldr	r6, [sp, #24]
 8009376:	9f08      	ldr	r7, [sp, #32]
 8009378:	4645      	mov	r5, r8
 800937a:	e74c      	b.n	8009216 <_dtoa_r+0x76e>
 800937c:	9a06      	ldr	r2, [sp, #24]
 800937e:	e775      	b.n	800926c <_dtoa_r+0x7c4>
 8009380:	9b05      	ldr	r3, [sp, #20]
 8009382:	2b01      	cmp	r3, #1
 8009384:	dc18      	bgt.n	80093b8 <_dtoa_r+0x910>
 8009386:	9b02      	ldr	r3, [sp, #8]
 8009388:	b9b3      	cbnz	r3, 80093b8 <_dtoa_r+0x910>
 800938a:	9b03      	ldr	r3, [sp, #12]
 800938c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009390:	b9a3      	cbnz	r3, 80093bc <_dtoa_r+0x914>
 8009392:	9b03      	ldr	r3, [sp, #12]
 8009394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009398:	0d1b      	lsrs	r3, r3, #20
 800939a:	051b      	lsls	r3, r3, #20
 800939c:	b12b      	cbz	r3, 80093aa <_dtoa_r+0x902>
 800939e:	9b04      	ldr	r3, [sp, #16]
 80093a0:	3301      	adds	r3, #1
 80093a2:	9304      	str	r3, [sp, #16]
 80093a4:	f108 0801 	add.w	r8, r8, #1
 80093a8:	2301      	movs	r3, #1
 80093aa:	9306      	str	r3, [sp, #24]
 80093ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f47f af74 	bne.w	800929c <_dtoa_r+0x7f4>
 80093b4:	2001      	movs	r0, #1
 80093b6:	e779      	b.n	80092ac <_dtoa_r+0x804>
 80093b8:	2300      	movs	r3, #0
 80093ba:	e7f6      	b.n	80093aa <_dtoa_r+0x902>
 80093bc:	9b02      	ldr	r3, [sp, #8]
 80093be:	e7f4      	b.n	80093aa <_dtoa_r+0x902>
 80093c0:	d085      	beq.n	80092ce <_dtoa_r+0x826>
 80093c2:	4618      	mov	r0, r3
 80093c4:	301c      	adds	r0, #28
 80093c6:	e77d      	b.n	80092c4 <_dtoa_r+0x81c>
 80093c8:	40240000 	.word	0x40240000
 80093cc:	9b01      	ldr	r3, [sp, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	dc38      	bgt.n	8009444 <_dtoa_r+0x99c>
 80093d2:	9b05      	ldr	r3, [sp, #20]
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	dd35      	ble.n	8009444 <_dtoa_r+0x99c>
 80093d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80093dc:	f1b9 0f00 	cmp.w	r9, #0
 80093e0:	d10d      	bne.n	80093fe <_dtoa_r+0x956>
 80093e2:	4631      	mov	r1, r6
 80093e4:	464b      	mov	r3, r9
 80093e6:	2205      	movs	r2, #5
 80093e8:	4620      	mov	r0, r4
 80093ea:	f000 f9c5 	bl	8009778 <__multadd>
 80093ee:	4601      	mov	r1, r0
 80093f0:	4606      	mov	r6, r0
 80093f2:	4658      	mov	r0, fp
 80093f4:	f000 fbdc 	bl	8009bb0 <__mcmp>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	f73f adbd 	bgt.w	8008f78 <_dtoa_r+0x4d0>
 80093fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009400:	9d00      	ldr	r5, [sp, #0]
 8009402:	ea6f 0a03 	mvn.w	sl, r3
 8009406:	f04f 0800 	mov.w	r8, #0
 800940a:	4631      	mov	r1, r6
 800940c:	4620      	mov	r0, r4
 800940e:	f000 f991 	bl	8009734 <_Bfree>
 8009412:	2f00      	cmp	r7, #0
 8009414:	f43f aeb4 	beq.w	8009180 <_dtoa_r+0x6d8>
 8009418:	f1b8 0f00 	cmp.w	r8, #0
 800941c:	d005      	beq.n	800942a <_dtoa_r+0x982>
 800941e:	45b8      	cmp	r8, r7
 8009420:	d003      	beq.n	800942a <_dtoa_r+0x982>
 8009422:	4641      	mov	r1, r8
 8009424:	4620      	mov	r0, r4
 8009426:	f000 f985 	bl	8009734 <_Bfree>
 800942a:	4639      	mov	r1, r7
 800942c:	4620      	mov	r0, r4
 800942e:	f000 f981 	bl	8009734 <_Bfree>
 8009432:	e6a5      	b.n	8009180 <_dtoa_r+0x6d8>
 8009434:	2600      	movs	r6, #0
 8009436:	4637      	mov	r7, r6
 8009438:	e7e1      	b.n	80093fe <_dtoa_r+0x956>
 800943a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800943c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009440:	4637      	mov	r7, r6
 8009442:	e599      	b.n	8008f78 <_dtoa_r+0x4d0>
 8009444:	9b08      	ldr	r3, [sp, #32]
 8009446:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 80fd 	beq.w	800964a <_dtoa_r+0xba2>
 8009450:	2d00      	cmp	r5, #0
 8009452:	dd05      	ble.n	8009460 <_dtoa_r+0x9b8>
 8009454:	4639      	mov	r1, r7
 8009456:	462a      	mov	r2, r5
 8009458:	4620      	mov	r0, r4
 800945a:	f000 fb3d 	bl	8009ad8 <__lshift>
 800945e:	4607      	mov	r7, r0
 8009460:	9b06      	ldr	r3, [sp, #24]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d05c      	beq.n	8009520 <_dtoa_r+0xa78>
 8009466:	6879      	ldr	r1, [r7, #4]
 8009468:	4620      	mov	r0, r4
 800946a:	f000 f923 	bl	80096b4 <_Balloc>
 800946e:	4605      	mov	r5, r0
 8009470:	b928      	cbnz	r0, 800947e <_dtoa_r+0x9d6>
 8009472:	4b80      	ldr	r3, [pc, #512]	; (8009674 <_dtoa_r+0xbcc>)
 8009474:	4602      	mov	r2, r0
 8009476:	f240 21ea 	movw	r1, #746	; 0x2ea
 800947a:	f7ff bb2e 	b.w	8008ada <_dtoa_r+0x32>
 800947e:	693a      	ldr	r2, [r7, #16]
 8009480:	3202      	adds	r2, #2
 8009482:	0092      	lsls	r2, r2, #2
 8009484:	f107 010c 	add.w	r1, r7, #12
 8009488:	300c      	adds	r0, #12
 800948a:	f000 f905 	bl	8009698 <memcpy>
 800948e:	2201      	movs	r2, #1
 8009490:	4629      	mov	r1, r5
 8009492:	4620      	mov	r0, r4
 8009494:	f000 fb20 	bl	8009ad8 <__lshift>
 8009498:	9b00      	ldr	r3, [sp, #0]
 800949a:	3301      	adds	r3, #1
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	9b00      	ldr	r3, [sp, #0]
 80094a0:	444b      	add	r3, r9
 80094a2:	9307      	str	r3, [sp, #28]
 80094a4:	9b02      	ldr	r3, [sp, #8]
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	46b8      	mov	r8, r7
 80094ac:	9306      	str	r3, [sp, #24]
 80094ae:	4607      	mov	r7, r0
 80094b0:	9b01      	ldr	r3, [sp, #4]
 80094b2:	4631      	mov	r1, r6
 80094b4:	3b01      	subs	r3, #1
 80094b6:	4658      	mov	r0, fp
 80094b8:	9302      	str	r3, [sp, #8]
 80094ba:	f7ff fa69 	bl	8008990 <quorem>
 80094be:	4603      	mov	r3, r0
 80094c0:	3330      	adds	r3, #48	; 0x30
 80094c2:	9004      	str	r0, [sp, #16]
 80094c4:	4641      	mov	r1, r8
 80094c6:	4658      	mov	r0, fp
 80094c8:	9308      	str	r3, [sp, #32]
 80094ca:	f000 fb71 	bl	8009bb0 <__mcmp>
 80094ce:	463a      	mov	r2, r7
 80094d0:	4681      	mov	r9, r0
 80094d2:	4631      	mov	r1, r6
 80094d4:	4620      	mov	r0, r4
 80094d6:	f000 fb87 	bl	8009be8 <__mdiff>
 80094da:	68c2      	ldr	r2, [r0, #12]
 80094dc:	9b08      	ldr	r3, [sp, #32]
 80094de:	4605      	mov	r5, r0
 80094e0:	bb02      	cbnz	r2, 8009524 <_dtoa_r+0xa7c>
 80094e2:	4601      	mov	r1, r0
 80094e4:	4658      	mov	r0, fp
 80094e6:	f000 fb63 	bl	8009bb0 <__mcmp>
 80094ea:	9b08      	ldr	r3, [sp, #32]
 80094ec:	4602      	mov	r2, r0
 80094ee:	4629      	mov	r1, r5
 80094f0:	4620      	mov	r0, r4
 80094f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80094f6:	f000 f91d 	bl	8009734 <_Bfree>
 80094fa:	9b05      	ldr	r3, [sp, #20]
 80094fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094fe:	9d01      	ldr	r5, [sp, #4]
 8009500:	ea43 0102 	orr.w	r1, r3, r2
 8009504:	9b06      	ldr	r3, [sp, #24]
 8009506:	430b      	orrs	r3, r1
 8009508:	9b08      	ldr	r3, [sp, #32]
 800950a:	d10d      	bne.n	8009528 <_dtoa_r+0xa80>
 800950c:	2b39      	cmp	r3, #57	; 0x39
 800950e:	d029      	beq.n	8009564 <_dtoa_r+0xabc>
 8009510:	f1b9 0f00 	cmp.w	r9, #0
 8009514:	dd01      	ble.n	800951a <_dtoa_r+0xa72>
 8009516:	9b04      	ldr	r3, [sp, #16]
 8009518:	3331      	adds	r3, #49	; 0x31
 800951a:	9a02      	ldr	r2, [sp, #8]
 800951c:	7013      	strb	r3, [r2, #0]
 800951e:	e774      	b.n	800940a <_dtoa_r+0x962>
 8009520:	4638      	mov	r0, r7
 8009522:	e7b9      	b.n	8009498 <_dtoa_r+0x9f0>
 8009524:	2201      	movs	r2, #1
 8009526:	e7e2      	b.n	80094ee <_dtoa_r+0xa46>
 8009528:	f1b9 0f00 	cmp.w	r9, #0
 800952c:	db06      	blt.n	800953c <_dtoa_r+0xa94>
 800952e:	9905      	ldr	r1, [sp, #20]
 8009530:	ea41 0909 	orr.w	r9, r1, r9
 8009534:	9906      	ldr	r1, [sp, #24]
 8009536:	ea59 0101 	orrs.w	r1, r9, r1
 800953a:	d120      	bne.n	800957e <_dtoa_r+0xad6>
 800953c:	2a00      	cmp	r2, #0
 800953e:	ddec      	ble.n	800951a <_dtoa_r+0xa72>
 8009540:	4659      	mov	r1, fp
 8009542:	2201      	movs	r2, #1
 8009544:	4620      	mov	r0, r4
 8009546:	9301      	str	r3, [sp, #4]
 8009548:	f000 fac6 	bl	8009ad8 <__lshift>
 800954c:	4631      	mov	r1, r6
 800954e:	4683      	mov	fp, r0
 8009550:	f000 fb2e 	bl	8009bb0 <__mcmp>
 8009554:	2800      	cmp	r0, #0
 8009556:	9b01      	ldr	r3, [sp, #4]
 8009558:	dc02      	bgt.n	8009560 <_dtoa_r+0xab8>
 800955a:	d1de      	bne.n	800951a <_dtoa_r+0xa72>
 800955c:	07da      	lsls	r2, r3, #31
 800955e:	d5dc      	bpl.n	800951a <_dtoa_r+0xa72>
 8009560:	2b39      	cmp	r3, #57	; 0x39
 8009562:	d1d8      	bne.n	8009516 <_dtoa_r+0xa6e>
 8009564:	9a02      	ldr	r2, [sp, #8]
 8009566:	2339      	movs	r3, #57	; 0x39
 8009568:	7013      	strb	r3, [r2, #0]
 800956a:	462b      	mov	r3, r5
 800956c:	461d      	mov	r5, r3
 800956e:	3b01      	subs	r3, #1
 8009570:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009574:	2a39      	cmp	r2, #57	; 0x39
 8009576:	d050      	beq.n	800961a <_dtoa_r+0xb72>
 8009578:	3201      	adds	r2, #1
 800957a:	701a      	strb	r2, [r3, #0]
 800957c:	e745      	b.n	800940a <_dtoa_r+0x962>
 800957e:	2a00      	cmp	r2, #0
 8009580:	dd03      	ble.n	800958a <_dtoa_r+0xae2>
 8009582:	2b39      	cmp	r3, #57	; 0x39
 8009584:	d0ee      	beq.n	8009564 <_dtoa_r+0xabc>
 8009586:	3301      	adds	r3, #1
 8009588:	e7c7      	b.n	800951a <_dtoa_r+0xa72>
 800958a:	9a01      	ldr	r2, [sp, #4]
 800958c:	9907      	ldr	r1, [sp, #28]
 800958e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009592:	428a      	cmp	r2, r1
 8009594:	d02a      	beq.n	80095ec <_dtoa_r+0xb44>
 8009596:	4659      	mov	r1, fp
 8009598:	2300      	movs	r3, #0
 800959a:	220a      	movs	r2, #10
 800959c:	4620      	mov	r0, r4
 800959e:	f000 f8eb 	bl	8009778 <__multadd>
 80095a2:	45b8      	cmp	r8, r7
 80095a4:	4683      	mov	fp, r0
 80095a6:	f04f 0300 	mov.w	r3, #0
 80095aa:	f04f 020a 	mov.w	r2, #10
 80095ae:	4641      	mov	r1, r8
 80095b0:	4620      	mov	r0, r4
 80095b2:	d107      	bne.n	80095c4 <_dtoa_r+0xb1c>
 80095b4:	f000 f8e0 	bl	8009778 <__multadd>
 80095b8:	4680      	mov	r8, r0
 80095ba:	4607      	mov	r7, r0
 80095bc:	9b01      	ldr	r3, [sp, #4]
 80095be:	3301      	adds	r3, #1
 80095c0:	9301      	str	r3, [sp, #4]
 80095c2:	e775      	b.n	80094b0 <_dtoa_r+0xa08>
 80095c4:	f000 f8d8 	bl	8009778 <__multadd>
 80095c8:	4639      	mov	r1, r7
 80095ca:	4680      	mov	r8, r0
 80095cc:	2300      	movs	r3, #0
 80095ce:	220a      	movs	r2, #10
 80095d0:	4620      	mov	r0, r4
 80095d2:	f000 f8d1 	bl	8009778 <__multadd>
 80095d6:	4607      	mov	r7, r0
 80095d8:	e7f0      	b.n	80095bc <_dtoa_r+0xb14>
 80095da:	f1b9 0f00 	cmp.w	r9, #0
 80095de:	9a00      	ldr	r2, [sp, #0]
 80095e0:	bfcc      	ite	gt
 80095e2:	464d      	movgt	r5, r9
 80095e4:	2501      	movle	r5, #1
 80095e6:	4415      	add	r5, r2
 80095e8:	f04f 0800 	mov.w	r8, #0
 80095ec:	4659      	mov	r1, fp
 80095ee:	2201      	movs	r2, #1
 80095f0:	4620      	mov	r0, r4
 80095f2:	9301      	str	r3, [sp, #4]
 80095f4:	f000 fa70 	bl	8009ad8 <__lshift>
 80095f8:	4631      	mov	r1, r6
 80095fa:	4683      	mov	fp, r0
 80095fc:	f000 fad8 	bl	8009bb0 <__mcmp>
 8009600:	2800      	cmp	r0, #0
 8009602:	dcb2      	bgt.n	800956a <_dtoa_r+0xac2>
 8009604:	d102      	bne.n	800960c <_dtoa_r+0xb64>
 8009606:	9b01      	ldr	r3, [sp, #4]
 8009608:	07db      	lsls	r3, r3, #31
 800960a:	d4ae      	bmi.n	800956a <_dtoa_r+0xac2>
 800960c:	462b      	mov	r3, r5
 800960e:	461d      	mov	r5, r3
 8009610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009614:	2a30      	cmp	r2, #48	; 0x30
 8009616:	d0fa      	beq.n	800960e <_dtoa_r+0xb66>
 8009618:	e6f7      	b.n	800940a <_dtoa_r+0x962>
 800961a:	9a00      	ldr	r2, [sp, #0]
 800961c:	429a      	cmp	r2, r3
 800961e:	d1a5      	bne.n	800956c <_dtoa_r+0xac4>
 8009620:	f10a 0a01 	add.w	sl, sl, #1
 8009624:	2331      	movs	r3, #49	; 0x31
 8009626:	e779      	b.n	800951c <_dtoa_r+0xa74>
 8009628:	4b13      	ldr	r3, [pc, #76]	; (8009678 <_dtoa_r+0xbd0>)
 800962a:	f7ff baaf 	b.w	8008b8c <_dtoa_r+0xe4>
 800962e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009630:	2b00      	cmp	r3, #0
 8009632:	f47f aa86 	bne.w	8008b42 <_dtoa_r+0x9a>
 8009636:	4b11      	ldr	r3, [pc, #68]	; (800967c <_dtoa_r+0xbd4>)
 8009638:	f7ff baa8 	b.w	8008b8c <_dtoa_r+0xe4>
 800963c:	f1b9 0f00 	cmp.w	r9, #0
 8009640:	dc03      	bgt.n	800964a <_dtoa_r+0xba2>
 8009642:	9b05      	ldr	r3, [sp, #20]
 8009644:	2b02      	cmp	r3, #2
 8009646:	f73f aec9 	bgt.w	80093dc <_dtoa_r+0x934>
 800964a:	9d00      	ldr	r5, [sp, #0]
 800964c:	4631      	mov	r1, r6
 800964e:	4658      	mov	r0, fp
 8009650:	f7ff f99e 	bl	8008990 <quorem>
 8009654:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009658:	f805 3b01 	strb.w	r3, [r5], #1
 800965c:	9a00      	ldr	r2, [sp, #0]
 800965e:	1aaa      	subs	r2, r5, r2
 8009660:	4591      	cmp	r9, r2
 8009662:	ddba      	ble.n	80095da <_dtoa_r+0xb32>
 8009664:	4659      	mov	r1, fp
 8009666:	2300      	movs	r3, #0
 8009668:	220a      	movs	r2, #10
 800966a:	4620      	mov	r0, r4
 800966c:	f000 f884 	bl	8009778 <__multadd>
 8009670:	4683      	mov	fp, r0
 8009672:	e7eb      	b.n	800964c <_dtoa_r+0xba4>
 8009674:	0800ac93 	.word	0x0800ac93
 8009678:	0800abec 	.word	0x0800abec
 800967c:	0800ac10 	.word	0x0800ac10

08009680 <_localeconv_r>:
 8009680:	4800      	ldr	r0, [pc, #0]	; (8009684 <_localeconv_r+0x4>)
 8009682:	4770      	bx	lr
 8009684:	20000160 	.word	0x20000160

08009688 <malloc>:
 8009688:	4b02      	ldr	r3, [pc, #8]	; (8009694 <malloc+0xc>)
 800968a:	4601      	mov	r1, r0
 800968c:	6818      	ldr	r0, [r3, #0]
 800968e:	f000 bbef 	b.w	8009e70 <_malloc_r>
 8009692:	bf00      	nop
 8009694:	2000000c 	.word	0x2000000c

08009698 <memcpy>:
 8009698:	440a      	add	r2, r1
 800969a:	4291      	cmp	r1, r2
 800969c:	f100 33ff 	add.w	r3, r0, #4294967295
 80096a0:	d100      	bne.n	80096a4 <memcpy+0xc>
 80096a2:	4770      	bx	lr
 80096a4:	b510      	push	{r4, lr}
 80096a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096ae:	4291      	cmp	r1, r2
 80096b0:	d1f9      	bne.n	80096a6 <memcpy+0xe>
 80096b2:	bd10      	pop	{r4, pc}

080096b4 <_Balloc>:
 80096b4:	b570      	push	{r4, r5, r6, lr}
 80096b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096b8:	4604      	mov	r4, r0
 80096ba:	460d      	mov	r5, r1
 80096bc:	b976      	cbnz	r6, 80096dc <_Balloc+0x28>
 80096be:	2010      	movs	r0, #16
 80096c0:	f7ff ffe2 	bl	8009688 <malloc>
 80096c4:	4602      	mov	r2, r0
 80096c6:	6260      	str	r0, [r4, #36]	; 0x24
 80096c8:	b920      	cbnz	r0, 80096d4 <_Balloc+0x20>
 80096ca:	4b18      	ldr	r3, [pc, #96]	; (800972c <_Balloc+0x78>)
 80096cc:	4818      	ldr	r0, [pc, #96]	; (8009730 <_Balloc+0x7c>)
 80096ce:	2166      	movs	r1, #102	; 0x66
 80096d0:	f000 fc38 	bl	8009f44 <__assert_func>
 80096d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096d8:	6006      	str	r6, [r0, #0]
 80096da:	60c6      	str	r6, [r0, #12]
 80096dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80096de:	68f3      	ldr	r3, [r6, #12]
 80096e0:	b183      	cbz	r3, 8009704 <_Balloc+0x50>
 80096e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096ea:	b9b8      	cbnz	r0, 800971c <_Balloc+0x68>
 80096ec:	2101      	movs	r1, #1
 80096ee:	fa01 f605 	lsl.w	r6, r1, r5
 80096f2:	1d72      	adds	r2, r6, #5
 80096f4:	0092      	lsls	r2, r2, #2
 80096f6:	4620      	mov	r0, r4
 80096f8:	f000 fb5a 	bl	8009db0 <_calloc_r>
 80096fc:	b160      	cbz	r0, 8009718 <_Balloc+0x64>
 80096fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009702:	e00e      	b.n	8009722 <_Balloc+0x6e>
 8009704:	2221      	movs	r2, #33	; 0x21
 8009706:	2104      	movs	r1, #4
 8009708:	4620      	mov	r0, r4
 800970a:	f000 fb51 	bl	8009db0 <_calloc_r>
 800970e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009710:	60f0      	str	r0, [r6, #12]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1e4      	bne.n	80096e2 <_Balloc+0x2e>
 8009718:	2000      	movs	r0, #0
 800971a:	bd70      	pop	{r4, r5, r6, pc}
 800971c:	6802      	ldr	r2, [r0, #0]
 800971e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009722:	2300      	movs	r3, #0
 8009724:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009728:	e7f7      	b.n	800971a <_Balloc+0x66>
 800972a:	bf00      	nop
 800972c:	0800ac1d 	.word	0x0800ac1d
 8009730:	0800aca4 	.word	0x0800aca4

08009734 <_Bfree>:
 8009734:	b570      	push	{r4, r5, r6, lr}
 8009736:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009738:	4605      	mov	r5, r0
 800973a:	460c      	mov	r4, r1
 800973c:	b976      	cbnz	r6, 800975c <_Bfree+0x28>
 800973e:	2010      	movs	r0, #16
 8009740:	f7ff ffa2 	bl	8009688 <malloc>
 8009744:	4602      	mov	r2, r0
 8009746:	6268      	str	r0, [r5, #36]	; 0x24
 8009748:	b920      	cbnz	r0, 8009754 <_Bfree+0x20>
 800974a:	4b09      	ldr	r3, [pc, #36]	; (8009770 <_Bfree+0x3c>)
 800974c:	4809      	ldr	r0, [pc, #36]	; (8009774 <_Bfree+0x40>)
 800974e:	218a      	movs	r1, #138	; 0x8a
 8009750:	f000 fbf8 	bl	8009f44 <__assert_func>
 8009754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009758:	6006      	str	r6, [r0, #0]
 800975a:	60c6      	str	r6, [r0, #12]
 800975c:	b13c      	cbz	r4, 800976e <_Bfree+0x3a>
 800975e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009760:	6862      	ldr	r2, [r4, #4]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009768:	6021      	str	r1, [r4, #0]
 800976a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800976e:	bd70      	pop	{r4, r5, r6, pc}
 8009770:	0800ac1d 	.word	0x0800ac1d
 8009774:	0800aca4 	.word	0x0800aca4

08009778 <__multadd>:
 8009778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800977c:	690e      	ldr	r6, [r1, #16]
 800977e:	4607      	mov	r7, r0
 8009780:	4698      	mov	r8, r3
 8009782:	460c      	mov	r4, r1
 8009784:	f101 0014 	add.w	r0, r1, #20
 8009788:	2300      	movs	r3, #0
 800978a:	6805      	ldr	r5, [r0, #0]
 800978c:	b2a9      	uxth	r1, r5
 800978e:	fb02 8101 	mla	r1, r2, r1, r8
 8009792:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009796:	0c2d      	lsrs	r5, r5, #16
 8009798:	fb02 c505 	mla	r5, r2, r5, ip
 800979c:	b289      	uxth	r1, r1
 800979e:	3301      	adds	r3, #1
 80097a0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80097a4:	429e      	cmp	r6, r3
 80097a6:	f840 1b04 	str.w	r1, [r0], #4
 80097aa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80097ae:	dcec      	bgt.n	800978a <__multadd+0x12>
 80097b0:	f1b8 0f00 	cmp.w	r8, #0
 80097b4:	d022      	beq.n	80097fc <__multadd+0x84>
 80097b6:	68a3      	ldr	r3, [r4, #8]
 80097b8:	42b3      	cmp	r3, r6
 80097ba:	dc19      	bgt.n	80097f0 <__multadd+0x78>
 80097bc:	6861      	ldr	r1, [r4, #4]
 80097be:	4638      	mov	r0, r7
 80097c0:	3101      	adds	r1, #1
 80097c2:	f7ff ff77 	bl	80096b4 <_Balloc>
 80097c6:	4605      	mov	r5, r0
 80097c8:	b928      	cbnz	r0, 80097d6 <__multadd+0x5e>
 80097ca:	4602      	mov	r2, r0
 80097cc:	4b0d      	ldr	r3, [pc, #52]	; (8009804 <__multadd+0x8c>)
 80097ce:	480e      	ldr	r0, [pc, #56]	; (8009808 <__multadd+0x90>)
 80097d0:	21b5      	movs	r1, #181	; 0xb5
 80097d2:	f000 fbb7 	bl	8009f44 <__assert_func>
 80097d6:	6922      	ldr	r2, [r4, #16]
 80097d8:	3202      	adds	r2, #2
 80097da:	f104 010c 	add.w	r1, r4, #12
 80097de:	0092      	lsls	r2, r2, #2
 80097e0:	300c      	adds	r0, #12
 80097e2:	f7ff ff59 	bl	8009698 <memcpy>
 80097e6:	4621      	mov	r1, r4
 80097e8:	4638      	mov	r0, r7
 80097ea:	f7ff ffa3 	bl	8009734 <_Bfree>
 80097ee:	462c      	mov	r4, r5
 80097f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80097f4:	3601      	adds	r6, #1
 80097f6:	f8c3 8014 	str.w	r8, [r3, #20]
 80097fa:	6126      	str	r6, [r4, #16]
 80097fc:	4620      	mov	r0, r4
 80097fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009802:	bf00      	nop
 8009804:	0800ac93 	.word	0x0800ac93
 8009808:	0800aca4 	.word	0x0800aca4

0800980c <__hi0bits>:
 800980c:	0c03      	lsrs	r3, r0, #16
 800980e:	041b      	lsls	r3, r3, #16
 8009810:	b9d3      	cbnz	r3, 8009848 <__hi0bits+0x3c>
 8009812:	0400      	lsls	r0, r0, #16
 8009814:	2310      	movs	r3, #16
 8009816:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800981a:	bf04      	itt	eq
 800981c:	0200      	lsleq	r0, r0, #8
 800981e:	3308      	addeq	r3, #8
 8009820:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009824:	bf04      	itt	eq
 8009826:	0100      	lsleq	r0, r0, #4
 8009828:	3304      	addeq	r3, #4
 800982a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800982e:	bf04      	itt	eq
 8009830:	0080      	lsleq	r0, r0, #2
 8009832:	3302      	addeq	r3, #2
 8009834:	2800      	cmp	r0, #0
 8009836:	db05      	blt.n	8009844 <__hi0bits+0x38>
 8009838:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800983c:	f103 0301 	add.w	r3, r3, #1
 8009840:	bf08      	it	eq
 8009842:	2320      	moveq	r3, #32
 8009844:	4618      	mov	r0, r3
 8009846:	4770      	bx	lr
 8009848:	2300      	movs	r3, #0
 800984a:	e7e4      	b.n	8009816 <__hi0bits+0xa>

0800984c <__lo0bits>:
 800984c:	6803      	ldr	r3, [r0, #0]
 800984e:	f013 0207 	ands.w	r2, r3, #7
 8009852:	4601      	mov	r1, r0
 8009854:	d00b      	beq.n	800986e <__lo0bits+0x22>
 8009856:	07da      	lsls	r2, r3, #31
 8009858:	d424      	bmi.n	80098a4 <__lo0bits+0x58>
 800985a:	0798      	lsls	r0, r3, #30
 800985c:	bf49      	itett	mi
 800985e:	085b      	lsrmi	r3, r3, #1
 8009860:	089b      	lsrpl	r3, r3, #2
 8009862:	2001      	movmi	r0, #1
 8009864:	600b      	strmi	r3, [r1, #0]
 8009866:	bf5c      	itt	pl
 8009868:	600b      	strpl	r3, [r1, #0]
 800986a:	2002      	movpl	r0, #2
 800986c:	4770      	bx	lr
 800986e:	b298      	uxth	r0, r3
 8009870:	b9b0      	cbnz	r0, 80098a0 <__lo0bits+0x54>
 8009872:	0c1b      	lsrs	r3, r3, #16
 8009874:	2010      	movs	r0, #16
 8009876:	f013 0fff 	tst.w	r3, #255	; 0xff
 800987a:	bf04      	itt	eq
 800987c:	0a1b      	lsreq	r3, r3, #8
 800987e:	3008      	addeq	r0, #8
 8009880:	071a      	lsls	r2, r3, #28
 8009882:	bf04      	itt	eq
 8009884:	091b      	lsreq	r3, r3, #4
 8009886:	3004      	addeq	r0, #4
 8009888:	079a      	lsls	r2, r3, #30
 800988a:	bf04      	itt	eq
 800988c:	089b      	lsreq	r3, r3, #2
 800988e:	3002      	addeq	r0, #2
 8009890:	07da      	lsls	r2, r3, #31
 8009892:	d403      	bmi.n	800989c <__lo0bits+0x50>
 8009894:	085b      	lsrs	r3, r3, #1
 8009896:	f100 0001 	add.w	r0, r0, #1
 800989a:	d005      	beq.n	80098a8 <__lo0bits+0x5c>
 800989c:	600b      	str	r3, [r1, #0]
 800989e:	4770      	bx	lr
 80098a0:	4610      	mov	r0, r2
 80098a2:	e7e8      	b.n	8009876 <__lo0bits+0x2a>
 80098a4:	2000      	movs	r0, #0
 80098a6:	4770      	bx	lr
 80098a8:	2020      	movs	r0, #32
 80098aa:	4770      	bx	lr

080098ac <__i2b>:
 80098ac:	b510      	push	{r4, lr}
 80098ae:	460c      	mov	r4, r1
 80098b0:	2101      	movs	r1, #1
 80098b2:	f7ff feff 	bl	80096b4 <_Balloc>
 80098b6:	4602      	mov	r2, r0
 80098b8:	b928      	cbnz	r0, 80098c6 <__i2b+0x1a>
 80098ba:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <__i2b+0x24>)
 80098bc:	4805      	ldr	r0, [pc, #20]	; (80098d4 <__i2b+0x28>)
 80098be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80098c2:	f000 fb3f 	bl	8009f44 <__assert_func>
 80098c6:	2301      	movs	r3, #1
 80098c8:	6144      	str	r4, [r0, #20]
 80098ca:	6103      	str	r3, [r0, #16]
 80098cc:	bd10      	pop	{r4, pc}
 80098ce:	bf00      	nop
 80098d0:	0800ac93 	.word	0x0800ac93
 80098d4:	0800aca4 	.word	0x0800aca4

080098d8 <__multiply>:
 80098d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	4614      	mov	r4, r2
 80098de:	690a      	ldr	r2, [r1, #16]
 80098e0:	6923      	ldr	r3, [r4, #16]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	bfb8      	it	lt
 80098e6:	460b      	movlt	r3, r1
 80098e8:	460d      	mov	r5, r1
 80098ea:	bfbc      	itt	lt
 80098ec:	4625      	movlt	r5, r4
 80098ee:	461c      	movlt	r4, r3
 80098f0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80098f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80098f8:	68ab      	ldr	r3, [r5, #8]
 80098fa:	6869      	ldr	r1, [r5, #4]
 80098fc:	eb0a 0709 	add.w	r7, sl, r9
 8009900:	42bb      	cmp	r3, r7
 8009902:	b085      	sub	sp, #20
 8009904:	bfb8      	it	lt
 8009906:	3101      	addlt	r1, #1
 8009908:	f7ff fed4 	bl	80096b4 <_Balloc>
 800990c:	b930      	cbnz	r0, 800991c <__multiply+0x44>
 800990e:	4602      	mov	r2, r0
 8009910:	4b42      	ldr	r3, [pc, #264]	; (8009a1c <__multiply+0x144>)
 8009912:	4843      	ldr	r0, [pc, #268]	; (8009a20 <__multiply+0x148>)
 8009914:	f240 115d 	movw	r1, #349	; 0x15d
 8009918:	f000 fb14 	bl	8009f44 <__assert_func>
 800991c:	f100 0614 	add.w	r6, r0, #20
 8009920:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009924:	4633      	mov	r3, r6
 8009926:	2200      	movs	r2, #0
 8009928:	4543      	cmp	r3, r8
 800992a:	d31e      	bcc.n	800996a <__multiply+0x92>
 800992c:	f105 0c14 	add.w	ip, r5, #20
 8009930:	f104 0314 	add.w	r3, r4, #20
 8009934:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009938:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800993c:	9202      	str	r2, [sp, #8]
 800993e:	ebac 0205 	sub.w	r2, ip, r5
 8009942:	3a15      	subs	r2, #21
 8009944:	f022 0203 	bic.w	r2, r2, #3
 8009948:	3204      	adds	r2, #4
 800994a:	f105 0115 	add.w	r1, r5, #21
 800994e:	458c      	cmp	ip, r1
 8009950:	bf38      	it	cc
 8009952:	2204      	movcc	r2, #4
 8009954:	9201      	str	r2, [sp, #4]
 8009956:	9a02      	ldr	r2, [sp, #8]
 8009958:	9303      	str	r3, [sp, #12]
 800995a:	429a      	cmp	r2, r3
 800995c:	d808      	bhi.n	8009970 <__multiply+0x98>
 800995e:	2f00      	cmp	r7, #0
 8009960:	dc55      	bgt.n	8009a0e <__multiply+0x136>
 8009962:	6107      	str	r7, [r0, #16]
 8009964:	b005      	add	sp, #20
 8009966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996a:	f843 2b04 	str.w	r2, [r3], #4
 800996e:	e7db      	b.n	8009928 <__multiply+0x50>
 8009970:	f8b3 a000 	ldrh.w	sl, [r3]
 8009974:	f1ba 0f00 	cmp.w	sl, #0
 8009978:	d020      	beq.n	80099bc <__multiply+0xe4>
 800997a:	f105 0e14 	add.w	lr, r5, #20
 800997e:	46b1      	mov	r9, r6
 8009980:	2200      	movs	r2, #0
 8009982:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009986:	f8d9 b000 	ldr.w	fp, [r9]
 800998a:	b2a1      	uxth	r1, r4
 800998c:	fa1f fb8b 	uxth.w	fp, fp
 8009990:	fb0a b101 	mla	r1, sl, r1, fp
 8009994:	4411      	add	r1, r2
 8009996:	f8d9 2000 	ldr.w	r2, [r9]
 800999a:	0c24      	lsrs	r4, r4, #16
 800999c:	0c12      	lsrs	r2, r2, #16
 800999e:	fb0a 2404 	mla	r4, sl, r4, r2
 80099a2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80099a6:	b289      	uxth	r1, r1
 80099a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80099ac:	45f4      	cmp	ip, lr
 80099ae:	f849 1b04 	str.w	r1, [r9], #4
 80099b2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80099b6:	d8e4      	bhi.n	8009982 <__multiply+0xaa>
 80099b8:	9901      	ldr	r1, [sp, #4]
 80099ba:	5072      	str	r2, [r6, r1]
 80099bc:	9a03      	ldr	r2, [sp, #12]
 80099be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80099c2:	3304      	adds	r3, #4
 80099c4:	f1b9 0f00 	cmp.w	r9, #0
 80099c8:	d01f      	beq.n	8009a0a <__multiply+0x132>
 80099ca:	6834      	ldr	r4, [r6, #0]
 80099cc:	f105 0114 	add.w	r1, r5, #20
 80099d0:	46b6      	mov	lr, r6
 80099d2:	f04f 0a00 	mov.w	sl, #0
 80099d6:	880a      	ldrh	r2, [r1, #0]
 80099d8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80099dc:	fb09 b202 	mla	r2, r9, r2, fp
 80099e0:	4492      	add	sl, r2
 80099e2:	b2a4      	uxth	r4, r4
 80099e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80099e8:	f84e 4b04 	str.w	r4, [lr], #4
 80099ec:	f851 4b04 	ldr.w	r4, [r1], #4
 80099f0:	f8be 2000 	ldrh.w	r2, [lr]
 80099f4:	0c24      	lsrs	r4, r4, #16
 80099f6:	fb09 2404 	mla	r4, r9, r4, r2
 80099fa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80099fe:	458c      	cmp	ip, r1
 8009a00:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009a04:	d8e7      	bhi.n	80099d6 <__multiply+0xfe>
 8009a06:	9a01      	ldr	r2, [sp, #4]
 8009a08:	50b4      	str	r4, [r6, r2]
 8009a0a:	3604      	adds	r6, #4
 8009a0c:	e7a3      	b.n	8009956 <__multiply+0x7e>
 8009a0e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1a5      	bne.n	8009962 <__multiply+0x8a>
 8009a16:	3f01      	subs	r7, #1
 8009a18:	e7a1      	b.n	800995e <__multiply+0x86>
 8009a1a:	bf00      	nop
 8009a1c:	0800ac93 	.word	0x0800ac93
 8009a20:	0800aca4 	.word	0x0800aca4

08009a24 <__pow5mult>:
 8009a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a28:	4615      	mov	r5, r2
 8009a2a:	f012 0203 	ands.w	r2, r2, #3
 8009a2e:	4606      	mov	r6, r0
 8009a30:	460f      	mov	r7, r1
 8009a32:	d007      	beq.n	8009a44 <__pow5mult+0x20>
 8009a34:	4c25      	ldr	r4, [pc, #148]	; (8009acc <__pow5mult+0xa8>)
 8009a36:	3a01      	subs	r2, #1
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a3e:	f7ff fe9b 	bl	8009778 <__multadd>
 8009a42:	4607      	mov	r7, r0
 8009a44:	10ad      	asrs	r5, r5, #2
 8009a46:	d03d      	beq.n	8009ac4 <__pow5mult+0xa0>
 8009a48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a4a:	b97c      	cbnz	r4, 8009a6c <__pow5mult+0x48>
 8009a4c:	2010      	movs	r0, #16
 8009a4e:	f7ff fe1b 	bl	8009688 <malloc>
 8009a52:	4602      	mov	r2, r0
 8009a54:	6270      	str	r0, [r6, #36]	; 0x24
 8009a56:	b928      	cbnz	r0, 8009a64 <__pow5mult+0x40>
 8009a58:	4b1d      	ldr	r3, [pc, #116]	; (8009ad0 <__pow5mult+0xac>)
 8009a5a:	481e      	ldr	r0, [pc, #120]	; (8009ad4 <__pow5mult+0xb0>)
 8009a5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a60:	f000 fa70 	bl	8009f44 <__assert_func>
 8009a64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a68:	6004      	str	r4, [r0, #0]
 8009a6a:	60c4      	str	r4, [r0, #12]
 8009a6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a74:	b94c      	cbnz	r4, 8009a8a <__pow5mult+0x66>
 8009a76:	f240 2171 	movw	r1, #625	; 0x271
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f7ff ff16 	bl	80098ac <__i2b>
 8009a80:	2300      	movs	r3, #0
 8009a82:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a86:	4604      	mov	r4, r0
 8009a88:	6003      	str	r3, [r0, #0]
 8009a8a:	f04f 0900 	mov.w	r9, #0
 8009a8e:	07eb      	lsls	r3, r5, #31
 8009a90:	d50a      	bpl.n	8009aa8 <__pow5mult+0x84>
 8009a92:	4639      	mov	r1, r7
 8009a94:	4622      	mov	r2, r4
 8009a96:	4630      	mov	r0, r6
 8009a98:	f7ff ff1e 	bl	80098d8 <__multiply>
 8009a9c:	4639      	mov	r1, r7
 8009a9e:	4680      	mov	r8, r0
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f7ff fe47 	bl	8009734 <_Bfree>
 8009aa6:	4647      	mov	r7, r8
 8009aa8:	106d      	asrs	r5, r5, #1
 8009aaa:	d00b      	beq.n	8009ac4 <__pow5mult+0xa0>
 8009aac:	6820      	ldr	r0, [r4, #0]
 8009aae:	b938      	cbnz	r0, 8009ac0 <__pow5mult+0x9c>
 8009ab0:	4622      	mov	r2, r4
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	f7ff ff0f 	bl	80098d8 <__multiply>
 8009aba:	6020      	str	r0, [r4, #0]
 8009abc:	f8c0 9000 	str.w	r9, [r0]
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	e7e4      	b.n	8009a8e <__pow5mult+0x6a>
 8009ac4:	4638      	mov	r0, r7
 8009ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aca:	bf00      	nop
 8009acc:	0800adf8 	.word	0x0800adf8
 8009ad0:	0800ac1d 	.word	0x0800ac1d
 8009ad4:	0800aca4 	.word	0x0800aca4

08009ad8 <__lshift>:
 8009ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009adc:	460c      	mov	r4, r1
 8009ade:	6849      	ldr	r1, [r1, #4]
 8009ae0:	6923      	ldr	r3, [r4, #16]
 8009ae2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ae6:	68a3      	ldr	r3, [r4, #8]
 8009ae8:	4607      	mov	r7, r0
 8009aea:	4691      	mov	r9, r2
 8009aec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009af0:	f108 0601 	add.w	r6, r8, #1
 8009af4:	42b3      	cmp	r3, r6
 8009af6:	db0b      	blt.n	8009b10 <__lshift+0x38>
 8009af8:	4638      	mov	r0, r7
 8009afa:	f7ff fddb 	bl	80096b4 <_Balloc>
 8009afe:	4605      	mov	r5, r0
 8009b00:	b948      	cbnz	r0, 8009b16 <__lshift+0x3e>
 8009b02:	4602      	mov	r2, r0
 8009b04:	4b28      	ldr	r3, [pc, #160]	; (8009ba8 <__lshift+0xd0>)
 8009b06:	4829      	ldr	r0, [pc, #164]	; (8009bac <__lshift+0xd4>)
 8009b08:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b0c:	f000 fa1a 	bl	8009f44 <__assert_func>
 8009b10:	3101      	adds	r1, #1
 8009b12:	005b      	lsls	r3, r3, #1
 8009b14:	e7ee      	b.n	8009af4 <__lshift+0x1c>
 8009b16:	2300      	movs	r3, #0
 8009b18:	f100 0114 	add.w	r1, r0, #20
 8009b1c:	f100 0210 	add.w	r2, r0, #16
 8009b20:	4618      	mov	r0, r3
 8009b22:	4553      	cmp	r3, sl
 8009b24:	db33      	blt.n	8009b8e <__lshift+0xb6>
 8009b26:	6920      	ldr	r0, [r4, #16]
 8009b28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b2c:	f104 0314 	add.w	r3, r4, #20
 8009b30:	f019 091f 	ands.w	r9, r9, #31
 8009b34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b3c:	d02b      	beq.n	8009b96 <__lshift+0xbe>
 8009b3e:	f1c9 0e20 	rsb	lr, r9, #32
 8009b42:	468a      	mov	sl, r1
 8009b44:	2200      	movs	r2, #0
 8009b46:	6818      	ldr	r0, [r3, #0]
 8009b48:	fa00 f009 	lsl.w	r0, r0, r9
 8009b4c:	4302      	orrs	r2, r0
 8009b4e:	f84a 2b04 	str.w	r2, [sl], #4
 8009b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b56:	459c      	cmp	ip, r3
 8009b58:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b5c:	d8f3      	bhi.n	8009b46 <__lshift+0x6e>
 8009b5e:	ebac 0304 	sub.w	r3, ip, r4
 8009b62:	3b15      	subs	r3, #21
 8009b64:	f023 0303 	bic.w	r3, r3, #3
 8009b68:	3304      	adds	r3, #4
 8009b6a:	f104 0015 	add.w	r0, r4, #21
 8009b6e:	4584      	cmp	ip, r0
 8009b70:	bf38      	it	cc
 8009b72:	2304      	movcc	r3, #4
 8009b74:	50ca      	str	r2, [r1, r3]
 8009b76:	b10a      	cbz	r2, 8009b7c <__lshift+0xa4>
 8009b78:	f108 0602 	add.w	r6, r8, #2
 8009b7c:	3e01      	subs	r6, #1
 8009b7e:	4638      	mov	r0, r7
 8009b80:	612e      	str	r6, [r5, #16]
 8009b82:	4621      	mov	r1, r4
 8009b84:	f7ff fdd6 	bl	8009734 <_Bfree>
 8009b88:	4628      	mov	r0, r5
 8009b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b92:	3301      	adds	r3, #1
 8009b94:	e7c5      	b.n	8009b22 <__lshift+0x4a>
 8009b96:	3904      	subs	r1, #4
 8009b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ba0:	459c      	cmp	ip, r3
 8009ba2:	d8f9      	bhi.n	8009b98 <__lshift+0xc0>
 8009ba4:	e7ea      	b.n	8009b7c <__lshift+0xa4>
 8009ba6:	bf00      	nop
 8009ba8:	0800ac93 	.word	0x0800ac93
 8009bac:	0800aca4 	.word	0x0800aca4

08009bb0 <__mcmp>:
 8009bb0:	b530      	push	{r4, r5, lr}
 8009bb2:	6902      	ldr	r2, [r0, #16]
 8009bb4:	690c      	ldr	r4, [r1, #16]
 8009bb6:	1b12      	subs	r2, r2, r4
 8009bb8:	d10e      	bne.n	8009bd8 <__mcmp+0x28>
 8009bba:	f100 0314 	add.w	r3, r0, #20
 8009bbe:	3114      	adds	r1, #20
 8009bc0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009bc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009bc8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009bcc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009bd0:	42a5      	cmp	r5, r4
 8009bd2:	d003      	beq.n	8009bdc <__mcmp+0x2c>
 8009bd4:	d305      	bcc.n	8009be2 <__mcmp+0x32>
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	4610      	mov	r0, r2
 8009bda:	bd30      	pop	{r4, r5, pc}
 8009bdc:	4283      	cmp	r3, r0
 8009bde:	d3f3      	bcc.n	8009bc8 <__mcmp+0x18>
 8009be0:	e7fa      	b.n	8009bd8 <__mcmp+0x28>
 8009be2:	f04f 32ff 	mov.w	r2, #4294967295
 8009be6:	e7f7      	b.n	8009bd8 <__mcmp+0x28>

08009be8 <__mdiff>:
 8009be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bec:	460c      	mov	r4, r1
 8009bee:	4606      	mov	r6, r0
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	4617      	mov	r7, r2
 8009bf6:	f7ff ffdb 	bl	8009bb0 <__mcmp>
 8009bfa:	1e05      	subs	r5, r0, #0
 8009bfc:	d110      	bne.n	8009c20 <__mdiff+0x38>
 8009bfe:	4629      	mov	r1, r5
 8009c00:	4630      	mov	r0, r6
 8009c02:	f7ff fd57 	bl	80096b4 <_Balloc>
 8009c06:	b930      	cbnz	r0, 8009c16 <__mdiff+0x2e>
 8009c08:	4b39      	ldr	r3, [pc, #228]	; (8009cf0 <__mdiff+0x108>)
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	f240 2132 	movw	r1, #562	; 0x232
 8009c10:	4838      	ldr	r0, [pc, #224]	; (8009cf4 <__mdiff+0x10c>)
 8009c12:	f000 f997 	bl	8009f44 <__assert_func>
 8009c16:	2301      	movs	r3, #1
 8009c18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c20:	bfa4      	itt	ge
 8009c22:	463b      	movge	r3, r7
 8009c24:	4627      	movge	r7, r4
 8009c26:	4630      	mov	r0, r6
 8009c28:	6879      	ldr	r1, [r7, #4]
 8009c2a:	bfa6      	itte	ge
 8009c2c:	461c      	movge	r4, r3
 8009c2e:	2500      	movge	r5, #0
 8009c30:	2501      	movlt	r5, #1
 8009c32:	f7ff fd3f 	bl	80096b4 <_Balloc>
 8009c36:	b920      	cbnz	r0, 8009c42 <__mdiff+0x5a>
 8009c38:	4b2d      	ldr	r3, [pc, #180]	; (8009cf0 <__mdiff+0x108>)
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c40:	e7e6      	b.n	8009c10 <__mdiff+0x28>
 8009c42:	693e      	ldr	r6, [r7, #16]
 8009c44:	60c5      	str	r5, [r0, #12]
 8009c46:	6925      	ldr	r5, [r4, #16]
 8009c48:	f107 0114 	add.w	r1, r7, #20
 8009c4c:	f104 0914 	add.w	r9, r4, #20
 8009c50:	f100 0e14 	add.w	lr, r0, #20
 8009c54:	f107 0210 	add.w	r2, r7, #16
 8009c58:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009c5c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009c60:	46f2      	mov	sl, lr
 8009c62:	2700      	movs	r7, #0
 8009c64:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c6c:	fa1f f883 	uxth.w	r8, r3
 8009c70:	fa17 f78b 	uxtah	r7, r7, fp
 8009c74:	0c1b      	lsrs	r3, r3, #16
 8009c76:	eba7 0808 	sub.w	r8, r7, r8
 8009c7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c82:	fa1f f888 	uxth.w	r8, r8
 8009c86:	141f      	asrs	r7, r3, #16
 8009c88:	454d      	cmp	r5, r9
 8009c8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c8e:	f84a 3b04 	str.w	r3, [sl], #4
 8009c92:	d8e7      	bhi.n	8009c64 <__mdiff+0x7c>
 8009c94:	1b2b      	subs	r3, r5, r4
 8009c96:	3b15      	subs	r3, #21
 8009c98:	f023 0303 	bic.w	r3, r3, #3
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	3415      	adds	r4, #21
 8009ca0:	42a5      	cmp	r5, r4
 8009ca2:	bf38      	it	cc
 8009ca4:	2304      	movcc	r3, #4
 8009ca6:	4419      	add	r1, r3
 8009ca8:	4473      	add	r3, lr
 8009caa:	469e      	mov	lr, r3
 8009cac:	460d      	mov	r5, r1
 8009cae:	4565      	cmp	r5, ip
 8009cb0:	d30e      	bcc.n	8009cd0 <__mdiff+0xe8>
 8009cb2:	f10c 0203 	add.w	r2, ip, #3
 8009cb6:	1a52      	subs	r2, r2, r1
 8009cb8:	f022 0203 	bic.w	r2, r2, #3
 8009cbc:	3903      	subs	r1, #3
 8009cbe:	458c      	cmp	ip, r1
 8009cc0:	bf38      	it	cc
 8009cc2:	2200      	movcc	r2, #0
 8009cc4:	441a      	add	r2, r3
 8009cc6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009cca:	b17b      	cbz	r3, 8009cec <__mdiff+0x104>
 8009ccc:	6106      	str	r6, [r0, #16]
 8009cce:	e7a5      	b.n	8009c1c <__mdiff+0x34>
 8009cd0:	f855 8b04 	ldr.w	r8, [r5], #4
 8009cd4:	fa17 f488 	uxtah	r4, r7, r8
 8009cd8:	1422      	asrs	r2, r4, #16
 8009cda:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009cde:	b2a4      	uxth	r4, r4
 8009ce0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009ce4:	f84e 4b04 	str.w	r4, [lr], #4
 8009ce8:	1417      	asrs	r7, r2, #16
 8009cea:	e7e0      	b.n	8009cae <__mdiff+0xc6>
 8009cec:	3e01      	subs	r6, #1
 8009cee:	e7ea      	b.n	8009cc6 <__mdiff+0xde>
 8009cf0:	0800ac93 	.word	0x0800ac93
 8009cf4:	0800aca4 	.word	0x0800aca4

08009cf8 <__d2b>:
 8009cf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cfc:	4689      	mov	r9, r1
 8009cfe:	2101      	movs	r1, #1
 8009d00:	ec57 6b10 	vmov	r6, r7, d0
 8009d04:	4690      	mov	r8, r2
 8009d06:	f7ff fcd5 	bl	80096b4 <_Balloc>
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	b930      	cbnz	r0, 8009d1c <__d2b+0x24>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	4b25      	ldr	r3, [pc, #148]	; (8009da8 <__d2b+0xb0>)
 8009d12:	4826      	ldr	r0, [pc, #152]	; (8009dac <__d2b+0xb4>)
 8009d14:	f240 310a 	movw	r1, #778	; 0x30a
 8009d18:	f000 f914 	bl	8009f44 <__assert_func>
 8009d1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009d20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d24:	bb35      	cbnz	r5, 8009d74 <__d2b+0x7c>
 8009d26:	2e00      	cmp	r6, #0
 8009d28:	9301      	str	r3, [sp, #4]
 8009d2a:	d028      	beq.n	8009d7e <__d2b+0x86>
 8009d2c:	4668      	mov	r0, sp
 8009d2e:	9600      	str	r6, [sp, #0]
 8009d30:	f7ff fd8c 	bl	800984c <__lo0bits>
 8009d34:	9900      	ldr	r1, [sp, #0]
 8009d36:	b300      	cbz	r0, 8009d7a <__d2b+0x82>
 8009d38:	9a01      	ldr	r2, [sp, #4]
 8009d3a:	f1c0 0320 	rsb	r3, r0, #32
 8009d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d42:	430b      	orrs	r3, r1
 8009d44:	40c2      	lsrs	r2, r0
 8009d46:	6163      	str	r3, [r4, #20]
 8009d48:	9201      	str	r2, [sp, #4]
 8009d4a:	9b01      	ldr	r3, [sp, #4]
 8009d4c:	61a3      	str	r3, [r4, #24]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	bf14      	ite	ne
 8009d52:	2202      	movne	r2, #2
 8009d54:	2201      	moveq	r2, #1
 8009d56:	6122      	str	r2, [r4, #16]
 8009d58:	b1d5      	cbz	r5, 8009d90 <__d2b+0x98>
 8009d5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d5e:	4405      	add	r5, r0
 8009d60:	f8c9 5000 	str.w	r5, [r9]
 8009d64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d68:	f8c8 0000 	str.w	r0, [r8]
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	b003      	add	sp, #12
 8009d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d78:	e7d5      	b.n	8009d26 <__d2b+0x2e>
 8009d7a:	6161      	str	r1, [r4, #20]
 8009d7c:	e7e5      	b.n	8009d4a <__d2b+0x52>
 8009d7e:	a801      	add	r0, sp, #4
 8009d80:	f7ff fd64 	bl	800984c <__lo0bits>
 8009d84:	9b01      	ldr	r3, [sp, #4]
 8009d86:	6163      	str	r3, [r4, #20]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	6122      	str	r2, [r4, #16]
 8009d8c:	3020      	adds	r0, #32
 8009d8e:	e7e3      	b.n	8009d58 <__d2b+0x60>
 8009d90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d98:	f8c9 0000 	str.w	r0, [r9]
 8009d9c:	6918      	ldr	r0, [r3, #16]
 8009d9e:	f7ff fd35 	bl	800980c <__hi0bits>
 8009da2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009da6:	e7df      	b.n	8009d68 <__d2b+0x70>
 8009da8:	0800ac93 	.word	0x0800ac93
 8009dac:	0800aca4 	.word	0x0800aca4

08009db0 <_calloc_r>:
 8009db0:	b513      	push	{r0, r1, r4, lr}
 8009db2:	434a      	muls	r2, r1
 8009db4:	4611      	mov	r1, r2
 8009db6:	9201      	str	r2, [sp, #4]
 8009db8:	f000 f85a 	bl	8009e70 <_malloc_r>
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	b118      	cbz	r0, 8009dc8 <_calloc_r+0x18>
 8009dc0:	9a01      	ldr	r2, [sp, #4]
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	f7fe f972 	bl	80080ac <memset>
 8009dc8:	4620      	mov	r0, r4
 8009dca:	b002      	add	sp, #8
 8009dcc:	bd10      	pop	{r4, pc}
	...

08009dd0 <_free_r>:
 8009dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dd2:	2900      	cmp	r1, #0
 8009dd4:	d048      	beq.n	8009e68 <_free_r+0x98>
 8009dd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dda:	9001      	str	r0, [sp, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f1a1 0404 	sub.w	r4, r1, #4
 8009de2:	bfb8      	it	lt
 8009de4:	18e4      	addlt	r4, r4, r3
 8009de6:	f000 f8ef 	bl	8009fc8 <__malloc_lock>
 8009dea:	4a20      	ldr	r2, [pc, #128]	; (8009e6c <_free_r+0x9c>)
 8009dec:	9801      	ldr	r0, [sp, #4]
 8009dee:	6813      	ldr	r3, [r2, #0]
 8009df0:	4615      	mov	r5, r2
 8009df2:	b933      	cbnz	r3, 8009e02 <_free_r+0x32>
 8009df4:	6063      	str	r3, [r4, #4]
 8009df6:	6014      	str	r4, [r2, #0]
 8009df8:	b003      	add	sp, #12
 8009dfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dfe:	f000 b8e9 	b.w	8009fd4 <__malloc_unlock>
 8009e02:	42a3      	cmp	r3, r4
 8009e04:	d90b      	bls.n	8009e1e <_free_r+0x4e>
 8009e06:	6821      	ldr	r1, [r4, #0]
 8009e08:	1862      	adds	r2, r4, r1
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	bf04      	itt	eq
 8009e0e:	681a      	ldreq	r2, [r3, #0]
 8009e10:	685b      	ldreq	r3, [r3, #4]
 8009e12:	6063      	str	r3, [r4, #4]
 8009e14:	bf04      	itt	eq
 8009e16:	1852      	addeq	r2, r2, r1
 8009e18:	6022      	streq	r2, [r4, #0]
 8009e1a:	602c      	str	r4, [r5, #0]
 8009e1c:	e7ec      	b.n	8009df8 <_free_r+0x28>
 8009e1e:	461a      	mov	r2, r3
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	b10b      	cbz	r3, 8009e28 <_free_r+0x58>
 8009e24:	42a3      	cmp	r3, r4
 8009e26:	d9fa      	bls.n	8009e1e <_free_r+0x4e>
 8009e28:	6811      	ldr	r1, [r2, #0]
 8009e2a:	1855      	adds	r5, r2, r1
 8009e2c:	42a5      	cmp	r5, r4
 8009e2e:	d10b      	bne.n	8009e48 <_free_r+0x78>
 8009e30:	6824      	ldr	r4, [r4, #0]
 8009e32:	4421      	add	r1, r4
 8009e34:	1854      	adds	r4, r2, r1
 8009e36:	42a3      	cmp	r3, r4
 8009e38:	6011      	str	r1, [r2, #0]
 8009e3a:	d1dd      	bne.n	8009df8 <_free_r+0x28>
 8009e3c:	681c      	ldr	r4, [r3, #0]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	6053      	str	r3, [r2, #4]
 8009e42:	4421      	add	r1, r4
 8009e44:	6011      	str	r1, [r2, #0]
 8009e46:	e7d7      	b.n	8009df8 <_free_r+0x28>
 8009e48:	d902      	bls.n	8009e50 <_free_r+0x80>
 8009e4a:	230c      	movs	r3, #12
 8009e4c:	6003      	str	r3, [r0, #0]
 8009e4e:	e7d3      	b.n	8009df8 <_free_r+0x28>
 8009e50:	6825      	ldr	r5, [r4, #0]
 8009e52:	1961      	adds	r1, r4, r5
 8009e54:	428b      	cmp	r3, r1
 8009e56:	bf04      	itt	eq
 8009e58:	6819      	ldreq	r1, [r3, #0]
 8009e5a:	685b      	ldreq	r3, [r3, #4]
 8009e5c:	6063      	str	r3, [r4, #4]
 8009e5e:	bf04      	itt	eq
 8009e60:	1949      	addeq	r1, r1, r5
 8009e62:	6021      	streq	r1, [r4, #0]
 8009e64:	6054      	str	r4, [r2, #4]
 8009e66:	e7c7      	b.n	8009df8 <_free_r+0x28>
 8009e68:	b003      	add	sp, #12
 8009e6a:	bd30      	pop	{r4, r5, pc}
 8009e6c:	20000204 	.word	0x20000204

08009e70 <_malloc_r>:
 8009e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e72:	1ccd      	adds	r5, r1, #3
 8009e74:	f025 0503 	bic.w	r5, r5, #3
 8009e78:	3508      	adds	r5, #8
 8009e7a:	2d0c      	cmp	r5, #12
 8009e7c:	bf38      	it	cc
 8009e7e:	250c      	movcc	r5, #12
 8009e80:	2d00      	cmp	r5, #0
 8009e82:	4606      	mov	r6, r0
 8009e84:	db01      	blt.n	8009e8a <_malloc_r+0x1a>
 8009e86:	42a9      	cmp	r1, r5
 8009e88:	d903      	bls.n	8009e92 <_malloc_r+0x22>
 8009e8a:	230c      	movs	r3, #12
 8009e8c:	6033      	str	r3, [r6, #0]
 8009e8e:	2000      	movs	r0, #0
 8009e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e92:	f000 f899 	bl	8009fc8 <__malloc_lock>
 8009e96:	4921      	ldr	r1, [pc, #132]	; (8009f1c <_malloc_r+0xac>)
 8009e98:	680a      	ldr	r2, [r1, #0]
 8009e9a:	4614      	mov	r4, r2
 8009e9c:	b99c      	cbnz	r4, 8009ec6 <_malloc_r+0x56>
 8009e9e:	4f20      	ldr	r7, [pc, #128]	; (8009f20 <_malloc_r+0xb0>)
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	b923      	cbnz	r3, 8009eae <_malloc_r+0x3e>
 8009ea4:	4621      	mov	r1, r4
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	f000 f83c 	bl	8009f24 <_sbrk_r>
 8009eac:	6038      	str	r0, [r7, #0]
 8009eae:	4629      	mov	r1, r5
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	f000 f837 	bl	8009f24 <_sbrk_r>
 8009eb6:	1c43      	adds	r3, r0, #1
 8009eb8:	d123      	bne.n	8009f02 <_malloc_r+0x92>
 8009eba:	230c      	movs	r3, #12
 8009ebc:	6033      	str	r3, [r6, #0]
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	f000 f888 	bl	8009fd4 <__malloc_unlock>
 8009ec4:	e7e3      	b.n	8009e8e <_malloc_r+0x1e>
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	1b5b      	subs	r3, r3, r5
 8009eca:	d417      	bmi.n	8009efc <_malloc_r+0x8c>
 8009ecc:	2b0b      	cmp	r3, #11
 8009ece:	d903      	bls.n	8009ed8 <_malloc_r+0x68>
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	441c      	add	r4, r3
 8009ed4:	6025      	str	r5, [r4, #0]
 8009ed6:	e004      	b.n	8009ee2 <_malloc_r+0x72>
 8009ed8:	6863      	ldr	r3, [r4, #4]
 8009eda:	42a2      	cmp	r2, r4
 8009edc:	bf0c      	ite	eq
 8009ede:	600b      	streq	r3, [r1, #0]
 8009ee0:	6053      	strne	r3, [r2, #4]
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f000 f876 	bl	8009fd4 <__malloc_unlock>
 8009ee8:	f104 000b 	add.w	r0, r4, #11
 8009eec:	1d23      	adds	r3, r4, #4
 8009eee:	f020 0007 	bic.w	r0, r0, #7
 8009ef2:	1ac2      	subs	r2, r0, r3
 8009ef4:	d0cc      	beq.n	8009e90 <_malloc_r+0x20>
 8009ef6:	1a1b      	subs	r3, r3, r0
 8009ef8:	50a3      	str	r3, [r4, r2]
 8009efa:	e7c9      	b.n	8009e90 <_malloc_r+0x20>
 8009efc:	4622      	mov	r2, r4
 8009efe:	6864      	ldr	r4, [r4, #4]
 8009f00:	e7cc      	b.n	8009e9c <_malloc_r+0x2c>
 8009f02:	1cc4      	adds	r4, r0, #3
 8009f04:	f024 0403 	bic.w	r4, r4, #3
 8009f08:	42a0      	cmp	r0, r4
 8009f0a:	d0e3      	beq.n	8009ed4 <_malloc_r+0x64>
 8009f0c:	1a21      	subs	r1, r4, r0
 8009f0e:	4630      	mov	r0, r6
 8009f10:	f000 f808 	bl	8009f24 <_sbrk_r>
 8009f14:	3001      	adds	r0, #1
 8009f16:	d1dd      	bne.n	8009ed4 <_malloc_r+0x64>
 8009f18:	e7cf      	b.n	8009eba <_malloc_r+0x4a>
 8009f1a:	bf00      	nop
 8009f1c:	20000204 	.word	0x20000204
 8009f20:	20000208 	.word	0x20000208

08009f24 <_sbrk_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	4d06      	ldr	r5, [pc, #24]	; (8009f40 <_sbrk_r+0x1c>)
 8009f28:	2300      	movs	r3, #0
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	4608      	mov	r0, r1
 8009f2e:	602b      	str	r3, [r5, #0]
 8009f30:	f7f9 fbb2 	bl	8003698 <_sbrk>
 8009f34:	1c43      	adds	r3, r0, #1
 8009f36:	d102      	bne.n	8009f3e <_sbrk_r+0x1a>
 8009f38:	682b      	ldr	r3, [r5, #0]
 8009f3a:	b103      	cbz	r3, 8009f3e <_sbrk_r+0x1a>
 8009f3c:	6023      	str	r3, [r4, #0]
 8009f3e:	bd38      	pop	{r3, r4, r5, pc}
 8009f40:	200004b8 	.word	0x200004b8

08009f44 <__assert_func>:
 8009f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f46:	4614      	mov	r4, r2
 8009f48:	461a      	mov	r2, r3
 8009f4a:	4b09      	ldr	r3, [pc, #36]	; (8009f70 <__assert_func+0x2c>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4605      	mov	r5, r0
 8009f50:	68d8      	ldr	r0, [r3, #12]
 8009f52:	b14c      	cbz	r4, 8009f68 <__assert_func+0x24>
 8009f54:	4b07      	ldr	r3, [pc, #28]	; (8009f74 <__assert_func+0x30>)
 8009f56:	9100      	str	r1, [sp, #0]
 8009f58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f5c:	4906      	ldr	r1, [pc, #24]	; (8009f78 <__assert_func+0x34>)
 8009f5e:	462b      	mov	r3, r5
 8009f60:	f000 f80e 	bl	8009f80 <fiprintf>
 8009f64:	f000 fa64 	bl	800a430 <abort>
 8009f68:	4b04      	ldr	r3, [pc, #16]	; (8009f7c <__assert_func+0x38>)
 8009f6a:	461c      	mov	r4, r3
 8009f6c:	e7f3      	b.n	8009f56 <__assert_func+0x12>
 8009f6e:	bf00      	nop
 8009f70:	2000000c 	.word	0x2000000c
 8009f74:	0800ae04 	.word	0x0800ae04
 8009f78:	0800ae11 	.word	0x0800ae11
 8009f7c:	0800ae3f 	.word	0x0800ae3f

08009f80 <fiprintf>:
 8009f80:	b40e      	push	{r1, r2, r3}
 8009f82:	b503      	push	{r0, r1, lr}
 8009f84:	4601      	mov	r1, r0
 8009f86:	ab03      	add	r3, sp, #12
 8009f88:	4805      	ldr	r0, [pc, #20]	; (8009fa0 <fiprintf+0x20>)
 8009f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f8e:	6800      	ldr	r0, [r0, #0]
 8009f90:	9301      	str	r3, [sp, #4]
 8009f92:	f000 f84f 	bl	800a034 <_vfiprintf_r>
 8009f96:	b002      	add	sp, #8
 8009f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f9c:	b003      	add	sp, #12
 8009f9e:	4770      	bx	lr
 8009fa0:	2000000c 	.word	0x2000000c

08009fa4 <__ascii_mbtowc>:
 8009fa4:	b082      	sub	sp, #8
 8009fa6:	b901      	cbnz	r1, 8009faa <__ascii_mbtowc+0x6>
 8009fa8:	a901      	add	r1, sp, #4
 8009faa:	b142      	cbz	r2, 8009fbe <__ascii_mbtowc+0x1a>
 8009fac:	b14b      	cbz	r3, 8009fc2 <__ascii_mbtowc+0x1e>
 8009fae:	7813      	ldrb	r3, [r2, #0]
 8009fb0:	600b      	str	r3, [r1, #0]
 8009fb2:	7812      	ldrb	r2, [r2, #0]
 8009fb4:	1e10      	subs	r0, r2, #0
 8009fb6:	bf18      	it	ne
 8009fb8:	2001      	movne	r0, #1
 8009fba:	b002      	add	sp, #8
 8009fbc:	4770      	bx	lr
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	e7fb      	b.n	8009fba <__ascii_mbtowc+0x16>
 8009fc2:	f06f 0001 	mvn.w	r0, #1
 8009fc6:	e7f8      	b.n	8009fba <__ascii_mbtowc+0x16>

08009fc8 <__malloc_lock>:
 8009fc8:	4801      	ldr	r0, [pc, #4]	; (8009fd0 <__malloc_lock+0x8>)
 8009fca:	f000 bbf1 	b.w	800a7b0 <__retarget_lock_acquire_recursive>
 8009fce:	bf00      	nop
 8009fd0:	200004c0 	.word	0x200004c0

08009fd4 <__malloc_unlock>:
 8009fd4:	4801      	ldr	r0, [pc, #4]	; (8009fdc <__malloc_unlock+0x8>)
 8009fd6:	f000 bbec 	b.w	800a7b2 <__retarget_lock_release_recursive>
 8009fda:	bf00      	nop
 8009fdc:	200004c0 	.word	0x200004c0

08009fe0 <__sfputc_r>:
 8009fe0:	6893      	ldr	r3, [r2, #8]
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	b410      	push	{r4}
 8009fe8:	6093      	str	r3, [r2, #8]
 8009fea:	da08      	bge.n	8009ffe <__sfputc_r+0x1e>
 8009fec:	6994      	ldr	r4, [r2, #24]
 8009fee:	42a3      	cmp	r3, r4
 8009ff0:	db01      	blt.n	8009ff6 <__sfputc_r+0x16>
 8009ff2:	290a      	cmp	r1, #10
 8009ff4:	d103      	bne.n	8009ffe <__sfputc_r+0x1e>
 8009ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ffa:	f000 b94b 	b.w	800a294 <__swbuf_r>
 8009ffe:	6813      	ldr	r3, [r2, #0]
 800a000:	1c58      	adds	r0, r3, #1
 800a002:	6010      	str	r0, [r2, #0]
 800a004:	7019      	strb	r1, [r3, #0]
 800a006:	4608      	mov	r0, r1
 800a008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <__sfputs_r>:
 800a00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a010:	4606      	mov	r6, r0
 800a012:	460f      	mov	r7, r1
 800a014:	4614      	mov	r4, r2
 800a016:	18d5      	adds	r5, r2, r3
 800a018:	42ac      	cmp	r4, r5
 800a01a:	d101      	bne.n	800a020 <__sfputs_r+0x12>
 800a01c:	2000      	movs	r0, #0
 800a01e:	e007      	b.n	800a030 <__sfputs_r+0x22>
 800a020:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a024:	463a      	mov	r2, r7
 800a026:	4630      	mov	r0, r6
 800a028:	f7ff ffda 	bl	8009fe0 <__sfputc_r>
 800a02c:	1c43      	adds	r3, r0, #1
 800a02e:	d1f3      	bne.n	800a018 <__sfputs_r+0xa>
 800a030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a034 <_vfiprintf_r>:
 800a034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a038:	460d      	mov	r5, r1
 800a03a:	b09d      	sub	sp, #116	; 0x74
 800a03c:	4614      	mov	r4, r2
 800a03e:	4698      	mov	r8, r3
 800a040:	4606      	mov	r6, r0
 800a042:	b118      	cbz	r0, 800a04c <_vfiprintf_r+0x18>
 800a044:	6983      	ldr	r3, [r0, #24]
 800a046:	b90b      	cbnz	r3, 800a04c <_vfiprintf_r+0x18>
 800a048:	f000 fb14 	bl	800a674 <__sinit>
 800a04c:	4b89      	ldr	r3, [pc, #548]	; (800a274 <_vfiprintf_r+0x240>)
 800a04e:	429d      	cmp	r5, r3
 800a050:	d11b      	bne.n	800a08a <_vfiprintf_r+0x56>
 800a052:	6875      	ldr	r5, [r6, #4]
 800a054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a056:	07d9      	lsls	r1, r3, #31
 800a058:	d405      	bmi.n	800a066 <_vfiprintf_r+0x32>
 800a05a:	89ab      	ldrh	r3, [r5, #12]
 800a05c:	059a      	lsls	r2, r3, #22
 800a05e:	d402      	bmi.n	800a066 <_vfiprintf_r+0x32>
 800a060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a062:	f000 fba5 	bl	800a7b0 <__retarget_lock_acquire_recursive>
 800a066:	89ab      	ldrh	r3, [r5, #12]
 800a068:	071b      	lsls	r3, r3, #28
 800a06a:	d501      	bpl.n	800a070 <_vfiprintf_r+0x3c>
 800a06c:	692b      	ldr	r3, [r5, #16]
 800a06e:	b9eb      	cbnz	r3, 800a0ac <_vfiprintf_r+0x78>
 800a070:	4629      	mov	r1, r5
 800a072:	4630      	mov	r0, r6
 800a074:	f000 f96e 	bl	800a354 <__swsetup_r>
 800a078:	b1c0      	cbz	r0, 800a0ac <_vfiprintf_r+0x78>
 800a07a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a07c:	07dc      	lsls	r4, r3, #31
 800a07e:	d50e      	bpl.n	800a09e <_vfiprintf_r+0x6a>
 800a080:	f04f 30ff 	mov.w	r0, #4294967295
 800a084:	b01d      	add	sp, #116	; 0x74
 800a086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08a:	4b7b      	ldr	r3, [pc, #492]	; (800a278 <_vfiprintf_r+0x244>)
 800a08c:	429d      	cmp	r5, r3
 800a08e:	d101      	bne.n	800a094 <_vfiprintf_r+0x60>
 800a090:	68b5      	ldr	r5, [r6, #8]
 800a092:	e7df      	b.n	800a054 <_vfiprintf_r+0x20>
 800a094:	4b79      	ldr	r3, [pc, #484]	; (800a27c <_vfiprintf_r+0x248>)
 800a096:	429d      	cmp	r5, r3
 800a098:	bf08      	it	eq
 800a09a:	68f5      	ldreq	r5, [r6, #12]
 800a09c:	e7da      	b.n	800a054 <_vfiprintf_r+0x20>
 800a09e:	89ab      	ldrh	r3, [r5, #12]
 800a0a0:	0598      	lsls	r0, r3, #22
 800a0a2:	d4ed      	bmi.n	800a080 <_vfiprintf_r+0x4c>
 800a0a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0a6:	f000 fb84 	bl	800a7b2 <__retarget_lock_release_recursive>
 800a0aa:	e7e9      	b.n	800a080 <_vfiprintf_r+0x4c>
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a0b0:	2320      	movs	r3, #32
 800a0b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0ba:	2330      	movs	r3, #48	; 0x30
 800a0bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a280 <_vfiprintf_r+0x24c>
 800a0c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0c4:	f04f 0901 	mov.w	r9, #1
 800a0c8:	4623      	mov	r3, r4
 800a0ca:	469a      	mov	sl, r3
 800a0cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0d0:	b10a      	cbz	r2, 800a0d6 <_vfiprintf_r+0xa2>
 800a0d2:	2a25      	cmp	r2, #37	; 0x25
 800a0d4:	d1f9      	bne.n	800a0ca <_vfiprintf_r+0x96>
 800a0d6:	ebba 0b04 	subs.w	fp, sl, r4
 800a0da:	d00b      	beq.n	800a0f4 <_vfiprintf_r+0xc0>
 800a0dc:	465b      	mov	r3, fp
 800a0de:	4622      	mov	r2, r4
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f7ff ff93 	bl	800a00e <__sfputs_r>
 800a0e8:	3001      	adds	r0, #1
 800a0ea:	f000 80aa 	beq.w	800a242 <_vfiprintf_r+0x20e>
 800a0ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0f0:	445a      	add	r2, fp
 800a0f2:	9209      	str	r2, [sp, #36]	; 0x24
 800a0f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 80a2 	beq.w	800a242 <_vfiprintf_r+0x20e>
 800a0fe:	2300      	movs	r3, #0
 800a100:	f04f 32ff 	mov.w	r2, #4294967295
 800a104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a108:	f10a 0a01 	add.w	sl, sl, #1
 800a10c:	9304      	str	r3, [sp, #16]
 800a10e:	9307      	str	r3, [sp, #28]
 800a110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a114:	931a      	str	r3, [sp, #104]	; 0x68
 800a116:	4654      	mov	r4, sl
 800a118:	2205      	movs	r2, #5
 800a11a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a11e:	4858      	ldr	r0, [pc, #352]	; (800a280 <_vfiprintf_r+0x24c>)
 800a120:	f7f6 f85e 	bl	80001e0 <memchr>
 800a124:	9a04      	ldr	r2, [sp, #16]
 800a126:	b9d8      	cbnz	r0, 800a160 <_vfiprintf_r+0x12c>
 800a128:	06d1      	lsls	r1, r2, #27
 800a12a:	bf44      	itt	mi
 800a12c:	2320      	movmi	r3, #32
 800a12e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a132:	0713      	lsls	r3, r2, #28
 800a134:	bf44      	itt	mi
 800a136:	232b      	movmi	r3, #43	; 0x2b
 800a138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a13c:	f89a 3000 	ldrb.w	r3, [sl]
 800a140:	2b2a      	cmp	r3, #42	; 0x2a
 800a142:	d015      	beq.n	800a170 <_vfiprintf_r+0x13c>
 800a144:	9a07      	ldr	r2, [sp, #28]
 800a146:	4654      	mov	r4, sl
 800a148:	2000      	movs	r0, #0
 800a14a:	f04f 0c0a 	mov.w	ip, #10
 800a14e:	4621      	mov	r1, r4
 800a150:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a154:	3b30      	subs	r3, #48	; 0x30
 800a156:	2b09      	cmp	r3, #9
 800a158:	d94e      	bls.n	800a1f8 <_vfiprintf_r+0x1c4>
 800a15a:	b1b0      	cbz	r0, 800a18a <_vfiprintf_r+0x156>
 800a15c:	9207      	str	r2, [sp, #28]
 800a15e:	e014      	b.n	800a18a <_vfiprintf_r+0x156>
 800a160:	eba0 0308 	sub.w	r3, r0, r8
 800a164:	fa09 f303 	lsl.w	r3, r9, r3
 800a168:	4313      	orrs	r3, r2
 800a16a:	9304      	str	r3, [sp, #16]
 800a16c:	46a2      	mov	sl, r4
 800a16e:	e7d2      	b.n	800a116 <_vfiprintf_r+0xe2>
 800a170:	9b03      	ldr	r3, [sp, #12]
 800a172:	1d19      	adds	r1, r3, #4
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	9103      	str	r1, [sp, #12]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	bfbb      	ittet	lt
 800a17c:	425b      	neglt	r3, r3
 800a17e:	f042 0202 	orrlt.w	r2, r2, #2
 800a182:	9307      	strge	r3, [sp, #28]
 800a184:	9307      	strlt	r3, [sp, #28]
 800a186:	bfb8      	it	lt
 800a188:	9204      	strlt	r2, [sp, #16]
 800a18a:	7823      	ldrb	r3, [r4, #0]
 800a18c:	2b2e      	cmp	r3, #46	; 0x2e
 800a18e:	d10c      	bne.n	800a1aa <_vfiprintf_r+0x176>
 800a190:	7863      	ldrb	r3, [r4, #1]
 800a192:	2b2a      	cmp	r3, #42	; 0x2a
 800a194:	d135      	bne.n	800a202 <_vfiprintf_r+0x1ce>
 800a196:	9b03      	ldr	r3, [sp, #12]
 800a198:	1d1a      	adds	r2, r3, #4
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	9203      	str	r2, [sp, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	bfb8      	it	lt
 800a1a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1a6:	3402      	adds	r4, #2
 800a1a8:	9305      	str	r3, [sp, #20]
 800a1aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a290 <_vfiprintf_r+0x25c>
 800a1ae:	7821      	ldrb	r1, [r4, #0]
 800a1b0:	2203      	movs	r2, #3
 800a1b2:	4650      	mov	r0, sl
 800a1b4:	f7f6 f814 	bl	80001e0 <memchr>
 800a1b8:	b140      	cbz	r0, 800a1cc <_vfiprintf_r+0x198>
 800a1ba:	2340      	movs	r3, #64	; 0x40
 800a1bc:	eba0 000a 	sub.w	r0, r0, sl
 800a1c0:	fa03 f000 	lsl.w	r0, r3, r0
 800a1c4:	9b04      	ldr	r3, [sp, #16]
 800a1c6:	4303      	orrs	r3, r0
 800a1c8:	3401      	adds	r4, #1
 800a1ca:	9304      	str	r3, [sp, #16]
 800a1cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1d0:	482c      	ldr	r0, [pc, #176]	; (800a284 <_vfiprintf_r+0x250>)
 800a1d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1d6:	2206      	movs	r2, #6
 800a1d8:	f7f6 f802 	bl	80001e0 <memchr>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d03f      	beq.n	800a260 <_vfiprintf_r+0x22c>
 800a1e0:	4b29      	ldr	r3, [pc, #164]	; (800a288 <_vfiprintf_r+0x254>)
 800a1e2:	bb1b      	cbnz	r3, 800a22c <_vfiprintf_r+0x1f8>
 800a1e4:	9b03      	ldr	r3, [sp, #12]
 800a1e6:	3307      	adds	r3, #7
 800a1e8:	f023 0307 	bic.w	r3, r3, #7
 800a1ec:	3308      	adds	r3, #8
 800a1ee:	9303      	str	r3, [sp, #12]
 800a1f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f2:	443b      	add	r3, r7
 800a1f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a1f6:	e767      	b.n	800a0c8 <_vfiprintf_r+0x94>
 800a1f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1fc:	460c      	mov	r4, r1
 800a1fe:	2001      	movs	r0, #1
 800a200:	e7a5      	b.n	800a14e <_vfiprintf_r+0x11a>
 800a202:	2300      	movs	r3, #0
 800a204:	3401      	adds	r4, #1
 800a206:	9305      	str	r3, [sp, #20]
 800a208:	4619      	mov	r1, r3
 800a20a:	f04f 0c0a 	mov.w	ip, #10
 800a20e:	4620      	mov	r0, r4
 800a210:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a214:	3a30      	subs	r2, #48	; 0x30
 800a216:	2a09      	cmp	r2, #9
 800a218:	d903      	bls.n	800a222 <_vfiprintf_r+0x1ee>
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d0c5      	beq.n	800a1aa <_vfiprintf_r+0x176>
 800a21e:	9105      	str	r1, [sp, #20]
 800a220:	e7c3      	b.n	800a1aa <_vfiprintf_r+0x176>
 800a222:	fb0c 2101 	mla	r1, ip, r1, r2
 800a226:	4604      	mov	r4, r0
 800a228:	2301      	movs	r3, #1
 800a22a:	e7f0      	b.n	800a20e <_vfiprintf_r+0x1da>
 800a22c:	ab03      	add	r3, sp, #12
 800a22e:	9300      	str	r3, [sp, #0]
 800a230:	462a      	mov	r2, r5
 800a232:	4b16      	ldr	r3, [pc, #88]	; (800a28c <_vfiprintf_r+0x258>)
 800a234:	a904      	add	r1, sp, #16
 800a236:	4630      	mov	r0, r6
 800a238:	f7fd ffe0 	bl	80081fc <_printf_float>
 800a23c:	4607      	mov	r7, r0
 800a23e:	1c78      	adds	r0, r7, #1
 800a240:	d1d6      	bne.n	800a1f0 <_vfiprintf_r+0x1bc>
 800a242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a244:	07d9      	lsls	r1, r3, #31
 800a246:	d405      	bmi.n	800a254 <_vfiprintf_r+0x220>
 800a248:	89ab      	ldrh	r3, [r5, #12]
 800a24a:	059a      	lsls	r2, r3, #22
 800a24c:	d402      	bmi.n	800a254 <_vfiprintf_r+0x220>
 800a24e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a250:	f000 faaf 	bl	800a7b2 <__retarget_lock_release_recursive>
 800a254:	89ab      	ldrh	r3, [r5, #12]
 800a256:	065b      	lsls	r3, r3, #25
 800a258:	f53f af12 	bmi.w	800a080 <_vfiprintf_r+0x4c>
 800a25c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a25e:	e711      	b.n	800a084 <_vfiprintf_r+0x50>
 800a260:	ab03      	add	r3, sp, #12
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	462a      	mov	r2, r5
 800a266:	4b09      	ldr	r3, [pc, #36]	; (800a28c <_vfiprintf_r+0x258>)
 800a268:	a904      	add	r1, sp, #16
 800a26a:	4630      	mov	r0, r6
 800a26c:	f7fe fa6a 	bl	8008744 <_printf_i>
 800a270:	e7e4      	b.n	800a23c <_vfiprintf_r+0x208>
 800a272:	bf00      	nop
 800a274:	0800af7c 	.word	0x0800af7c
 800a278:	0800af9c 	.word	0x0800af9c
 800a27c:	0800af5c 	.word	0x0800af5c
 800a280:	0800ae4a 	.word	0x0800ae4a
 800a284:	0800ae54 	.word	0x0800ae54
 800a288:	080081fd 	.word	0x080081fd
 800a28c:	0800a00f 	.word	0x0800a00f
 800a290:	0800ae50 	.word	0x0800ae50

0800a294 <__swbuf_r>:
 800a294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a296:	460e      	mov	r6, r1
 800a298:	4614      	mov	r4, r2
 800a29a:	4605      	mov	r5, r0
 800a29c:	b118      	cbz	r0, 800a2a6 <__swbuf_r+0x12>
 800a29e:	6983      	ldr	r3, [r0, #24]
 800a2a0:	b90b      	cbnz	r3, 800a2a6 <__swbuf_r+0x12>
 800a2a2:	f000 f9e7 	bl	800a674 <__sinit>
 800a2a6:	4b21      	ldr	r3, [pc, #132]	; (800a32c <__swbuf_r+0x98>)
 800a2a8:	429c      	cmp	r4, r3
 800a2aa:	d12b      	bne.n	800a304 <__swbuf_r+0x70>
 800a2ac:	686c      	ldr	r4, [r5, #4]
 800a2ae:	69a3      	ldr	r3, [r4, #24]
 800a2b0:	60a3      	str	r3, [r4, #8]
 800a2b2:	89a3      	ldrh	r3, [r4, #12]
 800a2b4:	071a      	lsls	r2, r3, #28
 800a2b6:	d52f      	bpl.n	800a318 <__swbuf_r+0x84>
 800a2b8:	6923      	ldr	r3, [r4, #16]
 800a2ba:	b36b      	cbz	r3, 800a318 <__swbuf_r+0x84>
 800a2bc:	6923      	ldr	r3, [r4, #16]
 800a2be:	6820      	ldr	r0, [r4, #0]
 800a2c0:	1ac0      	subs	r0, r0, r3
 800a2c2:	6963      	ldr	r3, [r4, #20]
 800a2c4:	b2f6      	uxtb	r6, r6
 800a2c6:	4283      	cmp	r3, r0
 800a2c8:	4637      	mov	r7, r6
 800a2ca:	dc04      	bgt.n	800a2d6 <__swbuf_r+0x42>
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f000 f93c 	bl	800a54c <_fflush_r>
 800a2d4:	bb30      	cbnz	r0, 800a324 <__swbuf_r+0x90>
 800a2d6:	68a3      	ldr	r3, [r4, #8]
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	60a3      	str	r3, [r4, #8]
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	1c5a      	adds	r2, r3, #1
 800a2e0:	6022      	str	r2, [r4, #0]
 800a2e2:	701e      	strb	r6, [r3, #0]
 800a2e4:	6963      	ldr	r3, [r4, #20]
 800a2e6:	3001      	adds	r0, #1
 800a2e8:	4283      	cmp	r3, r0
 800a2ea:	d004      	beq.n	800a2f6 <__swbuf_r+0x62>
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	07db      	lsls	r3, r3, #31
 800a2f0:	d506      	bpl.n	800a300 <__swbuf_r+0x6c>
 800a2f2:	2e0a      	cmp	r6, #10
 800a2f4:	d104      	bne.n	800a300 <__swbuf_r+0x6c>
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	f000 f927 	bl	800a54c <_fflush_r>
 800a2fe:	b988      	cbnz	r0, 800a324 <__swbuf_r+0x90>
 800a300:	4638      	mov	r0, r7
 800a302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a304:	4b0a      	ldr	r3, [pc, #40]	; (800a330 <__swbuf_r+0x9c>)
 800a306:	429c      	cmp	r4, r3
 800a308:	d101      	bne.n	800a30e <__swbuf_r+0x7a>
 800a30a:	68ac      	ldr	r4, [r5, #8]
 800a30c:	e7cf      	b.n	800a2ae <__swbuf_r+0x1a>
 800a30e:	4b09      	ldr	r3, [pc, #36]	; (800a334 <__swbuf_r+0xa0>)
 800a310:	429c      	cmp	r4, r3
 800a312:	bf08      	it	eq
 800a314:	68ec      	ldreq	r4, [r5, #12]
 800a316:	e7ca      	b.n	800a2ae <__swbuf_r+0x1a>
 800a318:	4621      	mov	r1, r4
 800a31a:	4628      	mov	r0, r5
 800a31c:	f000 f81a 	bl	800a354 <__swsetup_r>
 800a320:	2800      	cmp	r0, #0
 800a322:	d0cb      	beq.n	800a2bc <__swbuf_r+0x28>
 800a324:	f04f 37ff 	mov.w	r7, #4294967295
 800a328:	e7ea      	b.n	800a300 <__swbuf_r+0x6c>
 800a32a:	bf00      	nop
 800a32c:	0800af7c 	.word	0x0800af7c
 800a330:	0800af9c 	.word	0x0800af9c
 800a334:	0800af5c 	.word	0x0800af5c

0800a338 <__ascii_wctomb>:
 800a338:	b149      	cbz	r1, 800a34e <__ascii_wctomb+0x16>
 800a33a:	2aff      	cmp	r2, #255	; 0xff
 800a33c:	bf85      	ittet	hi
 800a33e:	238a      	movhi	r3, #138	; 0x8a
 800a340:	6003      	strhi	r3, [r0, #0]
 800a342:	700a      	strbls	r2, [r1, #0]
 800a344:	f04f 30ff 	movhi.w	r0, #4294967295
 800a348:	bf98      	it	ls
 800a34a:	2001      	movls	r0, #1
 800a34c:	4770      	bx	lr
 800a34e:	4608      	mov	r0, r1
 800a350:	4770      	bx	lr
	...

0800a354 <__swsetup_r>:
 800a354:	4b32      	ldr	r3, [pc, #200]	; (800a420 <__swsetup_r+0xcc>)
 800a356:	b570      	push	{r4, r5, r6, lr}
 800a358:	681d      	ldr	r5, [r3, #0]
 800a35a:	4606      	mov	r6, r0
 800a35c:	460c      	mov	r4, r1
 800a35e:	b125      	cbz	r5, 800a36a <__swsetup_r+0x16>
 800a360:	69ab      	ldr	r3, [r5, #24]
 800a362:	b913      	cbnz	r3, 800a36a <__swsetup_r+0x16>
 800a364:	4628      	mov	r0, r5
 800a366:	f000 f985 	bl	800a674 <__sinit>
 800a36a:	4b2e      	ldr	r3, [pc, #184]	; (800a424 <__swsetup_r+0xd0>)
 800a36c:	429c      	cmp	r4, r3
 800a36e:	d10f      	bne.n	800a390 <__swsetup_r+0x3c>
 800a370:	686c      	ldr	r4, [r5, #4]
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a378:	0719      	lsls	r1, r3, #28
 800a37a:	d42c      	bmi.n	800a3d6 <__swsetup_r+0x82>
 800a37c:	06dd      	lsls	r5, r3, #27
 800a37e:	d411      	bmi.n	800a3a4 <__swsetup_r+0x50>
 800a380:	2309      	movs	r3, #9
 800a382:	6033      	str	r3, [r6, #0]
 800a384:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a388:	81a3      	strh	r3, [r4, #12]
 800a38a:	f04f 30ff 	mov.w	r0, #4294967295
 800a38e:	e03e      	b.n	800a40e <__swsetup_r+0xba>
 800a390:	4b25      	ldr	r3, [pc, #148]	; (800a428 <__swsetup_r+0xd4>)
 800a392:	429c      	cmp	r4, r3
 800a394:	d101      	bne.n	800a39a <__swsetup_r+0x46>
 800a396:	68ac      	ldr	r4, [r5, #8]
 800a398:	e7eb      	b.n	800a372 <__swsetup_r+0x1e>
 800a39a:	4b24      	ldr	r3, [pc, #144]	; (800a42c <__swsetup_r+0xd8>)
 800a39c:	429c      	cmp	r4, r3
 800a39e:	bf08      	it	eq
 800a3a0:	68ec      	ldreq	r4, [r5, #12]
 800a3a2:	e7e6      	b.n	800a372 <__swsetup_r+0x1e>
 800a3a4:	0758      	lsls	r0, r3, #29
 800a3a6:	d512      	bpl.n	800a3ce <__swsetup_r+0x7a>
 800a3a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3aa:	b141      	cbz	r1, 800a3be <__swsetup_r+0x6a>
 800a3ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3b0:	4299      	cmp	r1, r3
 800a3b2:	d002      	beq.n	800a3ba <__swsetup_r+0x66>
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	f7ff fd0b 	bl	8009dd0 <_free_r>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	6363      	str	r3, [r4, #52]	; 0x34
 800a3be:	89a3      	ldrh	r3, [r4, #12]
 800a3c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3c4:	81a3      	strh	r3, [r4, #12]
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	6063      	str	r3, [r4, #4]
 800a3ca:	6923      	ldr	r3, [r4, #16]
 800a3cc:	6023      	str	r3, [r4, #0]
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	f043 0308 	orr.w	r3, r3, #8
 800a3d4:	81a3      	strh	r3, [r4, #12]
 800a3d6:	6923      	ldr	r3, [r4, #16]
 800a3d8:	b94b      	cbnz	r3, 800a3ee <__swsetup_r+0x9a>
 800a3da:	89a3      	ldrh	r3, [r4, #12]
 800a3dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3e4:	d003      	beq.n	800a3ee <__swsetup_r+0x9a>
 800a3e6:	4621      	mov	r1, r4
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	f000 fa07 	bl	800a7fc <__smakebuf_r>
 800a3ee:	89a0      	ldrh	r0, [r4, #12]
 800a3f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3f4:	f010 0301 	ands.w	r3, r0, #1
 800a3f8:	d00a      	beq.n	800a410 <__swsetup_r+0xbc>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	60a3      	str	r3, [r4, #8]
 800a3fe:	6963      	ldr	r3, [r4, #20]
 800a400:	425b      	negs	r3, r3
 800a402:	61a3      	str	r3, [r4, #24]
 800a404:	6923      	ldr	r3, [r4, #16]
 800a406:	b943      	cbnz	r3, 800a41a <__swsetup_r+0xc6>
 800a408:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a40c:	d1ba      	bne.n	800a384 <__swsetup_r+0x30>
 800a40e:	bd70      	pop	{r4, r5, r6, pc}
 800a410:	0781      	lsls	r1, r0, #30
 800a412:	bf58      	it	pl
 800a414:	6963      	ldrpl	r3, [r4, #20]
 800a416:	60a3      	str	r3, [r4, #8]
 800a418:	e7f4      	b.n	800a404 <__swsetup_r+0xb0>
 800a41a:	2000      	movs	r0, #0
 800a41c:	e7f7      	b.n	800a40e <__swsetup_r+0xba>
 800a41e:	bf00      	nop
 800a420:	2000000c 	.word	0x2000000c
 800a424:	0800af7c 	.word	0x0800af7c
 800a428:	0800af9c 	.word	0x0800af9c
 800a42c:	0800af5c 	.word	0x0800af5c

0800a430 <abort>:
 800a430:	b508      	push	{r3, lr}
 800a432:	2006      	movs	r0, #6
 800a434:	f000 fa4a 	bl	800a8cc <raise>
 800a438:	2001      	movs	r0, #1
 800a43a:	f7f9 f8b5 	bl	80035a8 <_exit>
	...

0800a440 <__sflush_r>:
 800a440:	898a      	ldrh	r2, [r1, #12]
 800a442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a446:	4605      	mov	r5, r0
 800a448:	0710      	lsls	r0, r2, #28
 800a44a:	460c      	mov	r4, r1
 800a44c:	d458      	bmi.n	800a500 <__sflush_r+0xc0>
 800a44e:	684b      	ldr	r3, [r1, #4]
 800a450:	2b00      	cmp	r3, #0
 800a452:	dc05      	bgt.n	800a460 <__sflush_r+0x20>
 800a454:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a456:	2b00      	cmp	r3, #0
 800a458:	dc02      	bgt.n	800a460 <__sflush_r+0x20>
 800a45a:	2000      	movs	r0, #0
 800a45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a460:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a462:	2e00      	cmp	r6, #0
 800a464:	d0f9      	beq.n	800a45a <__sflush_r+0x1a>
 800a466:	2300      	movs	r3, #0
 800a468:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a46c:	682f      	ldr	r7, [r5, #0]
 800a46e:	602b      	str	r3, [r5, #0]
 800a470:	d032      	beq.n	800a4d8 <__sflush_r+0x98>
 800a472:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a474:	89a3      	ldrh	r3, [r4, #12]
 800a476:	075a      	lsls	r2, r3, #29
 800a478:	d505      	bpl.n	800a486 <__sflush_r+0x46>
 800a47a:	6863      	ldr	r3, [r4, #4]
 800a47c:	1ac0      	subs	r0, r0, r3
 800a47e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a480:	b10b      	cbz	r3, 800a486 <__sflush_r+0x46>
 800a482:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a484:	1ac0      	subs	r0, r0, r3
 800a486:	2300      	movs	r3, #0
 800a488:	4602      	mov	r2, r0
 800a48a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a48c:	6a21      	ldr	r1, [r4, #32]
 800a48e:	4628      	mov	r0, r5
 800a490:	47b0      	blx	r6
 800a492:	1c43      	adds	r3, r0, #1
 800a494:	89a3      	ldrh	r3, [r4, #12]
 800a496:	d106      	bne.n	800a4a6 <__sflush_r+0x66>
 800a498:	6829      	ldr	r1, [r5, #0]
 800a49a:	291d      	cmp	r1, #29
 800a49c:	d82c      	bhi.n	800a4f8 <__sflush_r+0xb8>
 800a49e:	4a2a      	ldr	r2, [pc, #168]	; (800a548 <__sflush_r+0x108>)
 800a4a0:	40ca      	lsrs	r2, r1
 800a4a2:	07d6      	lsls	r6, r2, #31
 800a4a4:	d528      	bpl.n	800a4f8 <__sflush_r+0xb8>
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	6062      	str	r2, [r4, #4]
 800a4aa:	04d9      	lsls	r1, r3, #19
 800a4ac:	6922      	ldr	r2, [r4, #16]
 800a4ae:	6022      	str	r2, [r4, #0]
 800a4b0:	d504      	bpl.n	800a4bc <__sflush_r+0x7c>
 800a4b2:	1c42      	adds	r2, r0, #1
 800a4b4:	d101      	bne.n	800a4ba <__sflush_r+0x7a>
 800a4b6:	682b      	ldr	r3, [r5, #0]
 800a4b8:	b903      	cbnz	r3, 800a4bc <__sflush_r+0x7c>
 800a4ba:	6560      	str	r0, [r4, #84]	; 0x54
 800a4bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4be:	602f      	str	r7, [r5, #0]
 800a4c0:	2900      	cmp	r1, #0
 800a4c2:	d0ca      	beq.n	800a45a <__sflush_r+0x1a>
 800a4c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4c8:	4299      	cmp	r1, r3
 800a4ca:	d002      	beq.n	800a4d2 <__sflush_r+0x92>
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	f7ff fc7f 	bl	8009dd0 <_free_r>
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	6360      	str	r0, [r4, #52]	; 0x34
 800a4d6:	e7c1      	b.n	800a45c <__sflush_r+0x1c>
 800a4d8:	6a21      	ldr	r1, [r4, #32]
 800a4da:	2301      	movs	r3, #1
 800a4dc:	4628      	mov	r0, r5
 800a4de:	47b0      	blx	r6
 800a4e0:	1c41      	adds	r1, r0, #1
 800a4e2:	d1c7      	bne.n	800a474 <__sflush_r+0x34>
 800a4e4:	682b      	ldr	r3, [r5, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d0c4      	beq.n	800a474 <__sflush_r+0x34>
 800a4ea:	2b1d      	cmp	r3, #29
 800a4ec:	d001      	beq.n	800a4f2 <__sflush_r+0xb2>
 800a4ee:	2b16      	cmp	r3, #22
 800a4f0:	d101      	bne.n	800a4f6 <__sflush_r+0xb6>
 800a4f2:	602f      	str	r7, [r5, #0]
 800a4f4:	e7b1      	b.n	800a45a <__sflush_r+0x1a>
 800a4f6:	89a3      	ldrh	r3, [r4, #12]
 800a4f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4fc:	81a3      	strh	r3, [r4, #12]
 800a4fe:	e7ad      	b.n	800a45c <__sflush_r+0x1c>
 800a500:	690f      	ldr	r7, [r1, #16]
 800a502:	2f00      	cmp	r7, #0
 800a504:	d0a9      	beq.n	800a45a <__sflush_r+0x1a>
 800a506:	0793      	lsls	r3, r2, #30
 800a508:	680e      	ldr	r6, [r1, #0]
 800a50a:	bf08      	it	eq
 800a50c:	694b      	ldreq	r3, [r1, #20]
 800a50e:	600f      	str	r7, [r1, #0]
 800a510:	bf18      	it	ne
 800a512:	2300      	movne	r3, #0
 800a514:	eba6 0807 	sub.w	r8, r6, r7
 800a518:	608b      	str	r3, [r1, #8]
 800a51a:	f1b8 0f00 	cmp.w	r8, #0
 800a51e:	dd9c      	ble.n	800a45a <__sflush_r+0x1a>
 800a520:	6a21      	ldr	r1, [r4, #32]
 800a522:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a524:	4643      	mov	r3, r8
 800a526:	463a      	mov	r2, r7
 800a528:	4628      	mov	r0, r5
 800a52a:	47b0      	blx	r6
 800a52c:	2800      	cmp	r0, #0
 800a52e:	dc06      	bgt.n	800a53e <__sflush_r+0xfe>
 800a530:	89a3      	ldrh	r3, [r4, #12]
 800a532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a536:	81a3      	strh	r3, [r4, #12]
 800a538:	f04f 30ff 	mov.w	r0, #4294967295
 800a53c:	e78e      	b.n	800a45c <__sflush_r+0x1c>
 800a53e:	4407      	add	r7, r0
 800a540:	eba8 0800 	sub.w	r8, r8, r0
 800a544:	e7e9      	b.n	800a51a <__sflush_r+0xda>
 800a546:	bf00      	nop
 800a548:	20400001 	.word	0x20400001

0800a54c <_fflush_r>:
 800a54c:	b538      	push	{r3, r4, r5, lr}
 800a54e:	690b      	ldr	r3, [r1, #16]
 800a550:	4605      	mov	r5, r0
 800a552:	460c      	mov	r4, r1
 800a554:	b913      	cbnz	r3, 800a55c <_fflush_r+0x10>
 800a556:	2500      	movs	r5, #0
 800a558:	4628      	mov	r0, r5
 800a55a:	bd38      	pop	{r3, r4, r5, pc}
 800a55c:	b118      	cbz	r0, 800a566 <_fflush_r+0x1a>
 800a55e:	6983      	ldr	r3, [r0, #24]
 800a560:	b90b      	cbnz	r3, 800a566 <_fflush_r+0x1a>
 800a562:	f000 f887 	bl	800a674 <__sinit>
 800a566:	4b14      	ldr	r3, [pc, #80]	; (800a5b8 <_fflush_r+0x6c>)
 800a568:	429c      	cmp	r4, r3
 800a56a:	d11b      	bne.n	800a5a4 <_fflush_r+0x58>
 800a56c:	686c      	ldr	r4, [r5, #4]
 800a56e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d0ef      	beq.n	800a556 <_fflush_r+0xa>
 800a576:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a578:	07d0      	lsls	r0, r2, #31
 800a57a:	d404      	bmi.n	800a586 <_fflush_r+0x3a>
 800a57c:	0599      	lsls	r1, r3, #22
 800a57e:	d402      	bmi.n	800a586 <_fflush_r+0x3a>
 800a580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a582:	f000 f915 	bl	800a7b0 <__retarget_lock_acquire_recursive>
 800a586:	4628      	mov	r0, r5
 800a588:	4621      	mov	r1, r4
 800a58a:	f7ff ff59 	bl	800a440 <__sflush_r>
 800a58e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a590:	07da      	lsls	r2, r3, #31
 800a592:	4605      	mov	r5, r0
 800a594:	d4e0      	bmi.n	800a558 <_fflush_r+0xc>
 800a596:	89a3      	ldrh	r3, [r4, #12]
 800a598:	059b      	lsls	r3, r3, #22
 800a59a:	d4dd      	bmi.n	800a558 <_fflush_r+0xc>
 800a59c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a59e:	f000 f908 	bl	800a7b2 <__retarget_lock_release_recursive>
 800a5a2:	e7d9      	b.n	800a558 <_fflush_r+0xc>
 800a5a4:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <_fflush_r+0x70>)
 800a5a6:	429c      	cmp	r4, r3
 800a5a8:	d101      	bne.n	800a5ae <_fflush_r+0x62>
 800a5aa:	68ac      	ldr	r4, [r5, #8]
 800a5ac:	e7df      	b.n	800a56e <_fflush_r+0x22>
 800a5ae:	4b04      	ldr	r3, [pc, #16]	; (800a5c0 <_fflush_r+0x74>)
 800a5b0:	429c      	cmp	r4, r3
 800a5b2:	bf08      	it	eq
 800a5b4:	68ec      	ldreq	r4, [r5, #12]
 800a5b6:	e7da      	b.n	800a56e <_fflush_r+0x22>
 800a5b8:	0800af7c 	.word	0x0800af7c
 800a5bc:	0800af9c 	.word	0x0800af9c
 800a5c0:	0800af5c 	.word	0x0800af5c

0800a5c4 <std>:
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	b510      	push	{r4, lr}
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a5ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5d2:	6083      	str	r3, [r0, #8]
 800a5d4:	8181      	strh	r1, [r0, #12]
 800a5d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a5d8:	81c2      	strh	r2, [r0, #14]
 800a5da:	6183      	str	r3, [r0, #24]
 800a5dc:	4619      	mov	r1, r3
 800a5de:	2208      	movs	r2, #8
 800a5e0:	305c      	adds	r0, #92	; 0x5c
 800a5e2:	f7fd fd63 	bl	80080ac <memset>
 800a5e6:	4b05      	ldr	r3, [pc, #20]	; (800a5fc <std+0x38>)
 800a5e8:	6263      	str	r3, [r4, #36]	; 0x24
 800a5ea:	4b05      	ldr	r3, [pc, #20]	; (800a600 <std+0x3c>)
 800a5ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5ee:	4b05      	ldr	r3, [pc, #20]	; (800a604 <std+0x40>)
 800a5f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5f2:	4b05      	ldr	r3, [pc, #20]	; (800a608 <std+0x44>)
 800a5f4:	6224      	str	r4, [r4, #32]
 800a5f6:	6323      	str	r3, [r4, #48]	; 0x30
 800a5f8:	bd10      	pop	{r4, pc}
 800a5fa:	bf00      	nop
 800a5fc:	0800a905 	.word	0x0800a905
 800a600:	0800a927 	.word	0x0800a927
 800a604:	0800a95f 	.word	0x0800a95f
 800a608:	0800a983 	.word	0x0800a983

0800a60c <_cleanup_r>:
 800a60c:	4901      	ldr	r1, [pc, #4]	; (800a614 <_cleanup_r+0x8>)
 800a60e:	f000 b8af 	b.w	800a770 <_fwalk_reent>
 800a612:	bf00      	nop
 800a614:	0800a54d 	.word	0x0800a54d

0800a618 <__sfmoreglue>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	1e4a      	subs	r2, r1, #1
 800a61c:	2568      	movs	r5, #104	; 0x68
 800a61e:	4355      	muls	r5, r2
 800a620:	460e      	mov	r6, r1
 800a622:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a626:	f7ff fc23 	bl	8009e70 <_malloc_r>
 800a62a:	4604      	mov	r4, r0
 800a62c:	b140      	cbz	r0, 800a640 <__sfmoreglue+0x28>
 800a62e:	2100      	movs	r1, #0
 800a630:	e9c0 1600 	strd	r1, r6, [r0]
 800a634:	300c      	adds	r0, #12
 800a636:	60a0      	str	r0, [r4, #8]
 800a638:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a63c:	f7fd fd36 	bl	80080ac <memset>
 800a640:	4620      	mov	r0, r4
 800a642:	bd70      	pop	{r4, r5, r6, pc}

0800a644 <__sfp_lock_acquire>:
 800a644:	4801      	ldr	r0, [pc, #4]	; (800a64c <__sfp_lock_acquire+0x8>)
 800a646:	f000 b8b3 	b.w	800a7b0 <__retarget_lock_acquire_recursive>
 800a64a:	bf00      	nop
 800a64c:	200004c4 	.word	0x200004c4

0800a650 <__sfp_lock_release>:
 800a650:	4801      	ldr	r0, [pc, #4]	; (800a658 <__sfp_lock_release+0x8>)
 800a652:	f000 b8ae 	b.w	800a7b2 <__retarget_lock_release_recursive>
 800a656:	bf00      	nop
 800a658:	200004c4 	.word	0x200004c4

0800a65c <__sinit_lock_acquire>:
 800a65c:	4801      	ldr	r0, [pc, #4]	; (800a664 <__sinit_lock_acquire+0x8>)
 800a65e:	f000 b8a7 	b.w	800a7b0 <__retarget_lock_acquire_recursive>
 800a662:	bf00      	nop
 800a664:	200004bf 	.word	0x200004bf

0800a668 <__sinit_lock_release>:
 800a668:	4801      	ldr	r0, [pc, #4]	; (800a670 <__sinit_lock_release+0x8>)
 800a66a:	f000 b8a2 	b.w	800a7b2 <__retarget_lock_release_recursive>
 800a66e:	bf00      	nop
 800a670:	200004bf 	.word	0x200004bf

0800a674 <__sinit>:
 800a674:	b510      	push	{r4, lr}
 800a676:	4604      	mov	r4, r0
 800a678:	f7ff fff0 	bl	800a65c <__sinit_lock_acquire>
 800a67c:	69a3      	ldr	r3, [r4, #24]
 800a67e:	b11b      	cbz	r3, 800a688 <__sinit+0x14>
 800a680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a684:	f7ff bff0 	b.w	800a668 <__sinit_lock_release>
 800a688:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a68c:	6523      	str	r3, [r4, #80]	; 0x50
 800a68e:	4b13      	ldr	r3, [pc, #76]	; (800a6dc <__sinit+0x68>)
 800a690:	4a13      	ldr	r2, [pc, #76]	; (800a6e0 <__sinit+0x6c>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	62a2      	str	r2, [r4, #40]	; 0x28
 800a696:	42a3      	cmp	r3, r4
 800a698:	bf04      	itt	eq
 800a69a:	2301      	moveq	r3, #1
 800a69c:	61a3      	streq	r3, [r4, #24]
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f000 f820 	bl	800a6e4 <__sfp>
 800a6a4:	6060      	str	r0, [r4, #4]
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f000 f81c 	bl	800a6e4 <__sfp>
 800a6ac:	60a0      	str	r0, [r4, #8]
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f000 f818 	bl	800a6e4 <__sfp>
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	60e0      	str	r0, [r4, #12]
 800a6b8:	2104      	movs	r1, #4
 800a6ba:	6860      	ldr	r0, [r4, #4]
 800a6bc:	f7ff ff82 	bl	800a5c4 <std>
 800a6c0:	68a0      	ldr	r0, [r4, #8]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	2109      	movs	r1, #9
 800a6c6:	f7ff ff7d 	bl	800a5c4 <std>
 800a6ca:	68e0      	ldr	r0, [r4, #12]
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	2112      	movs	r1, #18
 800a6d0:	f7ff ff78 	bl	800a5c4 <std>
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	61a3      	str	r3, [r4, #24]
 800a6d8:	e7d2      	b.n	800a680 <__sinit+0xc>
 800a6da:	bf00      	nop
 800a6dc:	0800abd8 	.word	0x0800abd8
 800a6e0:	0800a60d 	.word	0x0800a60d

0800a6e4 <__sfp>:
 800a6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e6:	4607      	mov	r7, r0
 800a6e8:	f7ff ffac 	bl	800a644 <__sfp_lock_acquire>
 800a6ec:	4b1e      	ldr	r3, [pc, #120]	; (800a768 <__sfp+0x84>)
 800a6ee:	681e      	ldr	r6, [r3, #0]
 800a6f0:	69b3      	ldr	r3, [r6, #24]
 800a6f2:	b913      	cbnz	r3, 800a6fa <__sfp+0x16>
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	f7ff ffbd 	bl	800a674 <__sinit>
 800a6fa:	3648      	adds	r6, #72	; 0x48
 800a6fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a700:	3b01      	subs	r3, #1
 800a702:	d503      	bpl.n	800a70c <__sfp+0x28>
 800a704:	6833      	ldr	r3, [r6, #0]
 800a706:	b30b      	cbz	r3, 800a74c <__sfp+0x68>
 800a708:	6836      	ldr	r6, [r6, #0]
 800a70a:	e7f7      	b.n	800a6fc <__sfp+0x18>
 800a70c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a710:	b9d5      	cbnz	r5, 800a748 <__sfp+0x64>
 800a712:	4b16      	ldr	r3, [pc, #88]	; (800a76c <__sfp+0x88>)
 800a714:	60e3      	str	r3, [r4, #12]
 800a716:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a71a:	6665      	str	r5, [r4, #100]	; 0x64
 800a71c:	f000 f847 	bl	800a7ae <__retarget_lock_init_recursive>
 800a720:	f7ff ff96 	bl	800a650 <__sfp_lock_release>
 800a724:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a728:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a72c:	6025      	str	r5, [r4, #0]
 800a72e:	61a5      	str	r5, [r4, #24]
 800a730:	2208      	movs	r2, #8
 800a732:	4629      	mov	r1, r5
 800a734:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a738:	f7fd fcb8 	bl	80080ac <memset>
 800a73c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a740:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a744:	4620      	mov	r0, r4
 800a746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a748:	3468      	adds	r4, #104	; 0x68
 800a74a:	e7d9      	b.n	800a700 <__sfp+0x1c>
 800a74c:	2104      	movs	r1, #4
 800a74e:	4638      	mov	r0, r7
 800a750:	f7ff ff62 	bl	800a618 <__sfmoreglue>
 800a754:	4604      	mov	r4, r0
 800a756:	6030      	str	r0, [r6, #0]
 800a758:	2800      	cmp	r0, #0
 800a75a:	d1d5      	bne.n	800a708 <__sfp+0x24>
 800a75c:	f7ff ff78 	bl	800a650 <__sfp_lock_release>
 800a760:	230c      	movs	r3, #12
 800a762:	603b      	str	r3, [r7, #0]
 800a764:	e7ee      	b.n	800a744 <__sfp+0x60>
 800a766:	bf00      	nop
 800a768:	0800abd8 	.word	0x0800abd8
 800a76c:	ffff0001 	.word	0xffff0001

0800a770 <_fwalk_reent>:
 800a770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a774:	4606      	mov	r6, r0
 800a776:	4688      	mov	r8, r1
 800a778:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a77c:	2700      	movs	r7, #0
 800a77e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a782:	f1b9 0901 	subs.w	r9, r9, #1
 800a786:	d505      	bpl.n	800a794 <_fwalk_reent+0x24>
 800a788:	6824      	ldr	r4, [r4, #0]
 800a78a:	2c00      	cmp	r4, #0
 800a78c:	d1f7      	bne.n	800a77e <_fwalk_reent+0xe>
 800a78e:	4638      	mov	r0, r7
 800a790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a794:	89ab      	ldrh	r3, [r5, #12]
 800a796:	2b01      	cmp	r3, #1
 800a798:	d907      	bls.n	800a7aa <_fwalk_reent+0x3a>
 800a79a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	d003      	beq.n	800a7aa <_fwalk_reent+0x3a>
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	47c0      	blx	r8
 800a7a8:	4307      	orrs	r7, r0
 800a7aa:	3568      	adds	r5, #104	; 0x68
 800a7ac:	e7e9      	b.n	800a782 <_fwalk_reent+0x12>

0800a7ae <__retarget_lock_init_recursive>:
 800a7ae:	4770      	bx	lr

0800a7b0 <__retarget_lock_acquire_recursive>:
 800a7b0:	4770      	bx	lr

0800a7b2 <__retarget_lock_release_recursive>:
 800a7b2:	4770      	bx	lr

0800a7b4 <__swhatbuf_r>:
 800a7b4:	b570      	push	{r4, r5, r6, lr}
 800a7b6:	460e      	mov	r6, r1
 800a7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7bc:	2900      	cmp	r1, #0
 800a7be:	b096      	sub	sp, #88	; 0x58
 800a7c0:	4614      	mov	r4, r2
 800a7c2:	461d      	mov	r5, r3
 800a7c4:	da07      	bge.n	800a7d6 <__swhatbuf_r+0x22>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	602b      	str	r3, [r5, #0]
 800a7ca:	89b3      	ldrh	r3, [r6, #12]
 800a7cc:	061a      	lsls	r2, r3, #24
 800a7ce:	d410      	bmi.n	800a7f2 <__swhatbuf_r+0x3e>
 800a7d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7d4:	e00e      	b.n	800a7f4 <__swhatbuf_r+0x40>
 800a7d6:	466a      	mov	r2, sp
 800a7d8:	f000 f8fa 	bl	800a9d0 <_fstat_r>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	dbf2      	blt.n	800a7c6 <__swhatbuf_r+0x12>
 800a7e0:	9a01      	ldr	r2, [sp, #4]
 800a7e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7ea:	425a      	negs	r2, r3
 800a7ec:	415a      	adcs	r2, r3
 800a7ee:	602a      	str	r2, [r5, #0]
 800a7f0:	e7ee      	b.n	800a7d0 <__swhatbuf_r+0x1c>
 800a7f2:	2340      	movs	r3, #64	; 0x40
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	6023      	str	r3, [r4, #0]
 800a7f8:	b016      	add	sp, #88	; 0x58
 800a7fa:	bd70      	pop	{r4, r5, r6, pc}

0800a7fc <__smakebuf_r>:
 800a7fc:	898b      	ldrh	r3, [r1, #12]
 800a7fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a800:	079d      	lsls	r5, r3, #30
 800a802:	4606      	mov	r6, r0
 800a804:	460c      	mov	r4, r1
 800a806:	d507      	bpl.n	800a818 <__smakebuf_r+0x1c>
 800a808:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a80c:	6023      	str	r3, [r4, #0]
 800a80e:	6123      	str	r3, [r4, #16]
 800a810:	2301      	movs	r3, #1
 800a812:	6163      	str	r3, [r4, #20]
 800a814:	b002      	add	sp, #8
 800a816:	bd70      	pop	{r4, r5, r6, pc}
 800a818:	ab01      	add	r3, sp, #4
 800a81a:	466a      	mov	r2, sp
 800a81c:	f7ff ffca 	bl	800a7b4 <__swhatbuf_r>
 800a820:	9900      	ldr	r1, [sp, #0]
 800a822:	4605      	mov	r5, r0
 800a824:	4630      	mov	r0, r6
 800a826:	f7ff fb23 	bl	8009e70 <_malloc_r>
 800a82a:	b948      	cbnz	r0, 800a840 <__smakebuf_r+0x44>
 800a82c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a830:	059a      	lsls	r2, r3, #22
 800a832:	d4ef      	bmi.n	800a814 <__smakebuf_r+0x18>
 800a834:	f023 0303 	bic.w	r3, r3, #3
 800a838:	f043 0302 	orr.w	r3, r3, #2
 800a83c:	81a3      	strh	r3, [r4, #12]
 800a83e:	e7e3      	b.n	800a808 <__smakebuf_r+0xc>
 800a840:	4b0d      	ldr	r3, [pc, #52]	; (800a878 <__smakebuf_r+0x7c>)
 800a842:	62b3      	str	r3, [r6, #40]	; 0x28
 800a844:	89a3      	ldrh	r3, [r4, #12]
 800a846:	6020      	str	r0, [r4, #0]
 800a848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a84c:	81a3      	strh	r3, [r4, #12]
 800a84e:	9b00      	ldr	r3, [sp, #0]
 800a850:	6163      	str	r3, [r4, #20]
 800a852:	9b01      	ldr	r3, [sp, #4]
 800a854:	6120      	str	r0, [r4, #16]
 800a856:	b15b      	cbz	r3, 800a870 <__smakebuf_r+0x74>
 800a858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a85c:	4630      	mov	r0, r6
 800a85e:	f000 f8c9 	bl	800a9f4 <_isatty_r>
 800a862:	b128      	cbz	r0, 800a870 <__smakebuf_r+0x74>
 800a864:	89a3      	ldrh	r3, [r4, #12]
 800a866:	f023 0303 	bic.w	r3, r3, #3
 800a86a:	f043 0301 	orr.w	r3, r3, #1
 800a86e:	81a3      	strh	r3, [r4, #12]
 800a870:	89a0      	ldrh	r0, [r4, #12]
 800a872:	4305      	orrs	r5, r0
 800a874:	81a5      	strh	r5, [r4, #12]
 800a876:	e7cd      	b.n	800a814 <__smakebuf_r+0x18>
 800a878:	0800a60d 	.word	0x0800a60d

0800a87c <_raise_r>:
 800a87c:	291f      	cmp	r1, #31
 800a87e:	b538      	push	{r3, r4, r5, lr}
 800a880:	4604      	mov	r4, r0
 800a882:	460d      	mov	r5, r1
 800a884:	d904      	bls.n	800a890 <_raise_r+0x14>
 800a886:	2316      	movs	r3, #22
 800a888:	6003      	str	r3, [r0, #0]
 800a88a:	f04f 30ff 	mov.w	r0, #4294967295
 800a88e:	bd38      	pop	{r3, r4, r5, pc}
 800a890:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a892:	b112      	cbz	r2, 800a89a <_raise_r+0x1e>
 800a894:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a898:	b94b      	cbnz	r3, 800a8ae <_raise_r+0x32>
 800a89a:	4620      	mov	r0, r4
 800a89c:	f000 f830 	bl	800a900 <_getpid_r>
 800a8a0:	462a      	mov	r2, r5
 800a8a2:	4601      	mov	r1, r0
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8aa:	f000 b817 	b.w	800a8dc <_kill_r>
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d00a      	beq.n	800a8c8 <_raise_r+0x4c>
 800a8b2:	1c59      	adds	r1, r3, #1
 800a8b4:	d103      	bne.n	800a8be <_raise_r+0x42>
 800a8b6:	2316      	movs	r3, #22
 800a8b8:	6003      	str	r3, [r0, #0]
 800a8ba:	2001      	movs	r0, #1
 800a8bc:	e7e7      	b.n	800a88e <_raise_r+0x12>
 800a8be:	2400      	movs	r4, #0
 800a8c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	4798      	blx	r3
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	e7e0      	b.n	800a88e <_raise_r+0x12>

0800a8cc <raise>:
 800a8cc:	4b02      	ldr	r3, [pc, #8]	; (800a8d8 <raise+0xc>)
 800a8ce:	4601      	mov	r1, r0
 800a8d0:	6818      	ldr	r0, [r3, #0]
 800a8d2:	f7ff bfd3 	b.w	800a87c <_raise_r>
 800a8d6:	bf00      	nop
 800a8d8:	2000000c 	.word	0x2000000c

0800a8dc <_kill_r>:
 800a8dc:	b538      	push	{r3, r4, r5, lr}
 800a8de:	4d07      	ldr	r5, [pc, #28]	; (800a8fc <_kill_r+0x20>)
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	4608      	mov	r0, r1
 800a8e6:	4611      	mov	r1, r2
 800a8e8:	602b      	str	r3, [r5, #0]
 800a8ea:	f7f8 fe4d 	bl	8003588 <_kill>
 800a8ee:	1c43      	adds	r3, r0, #1
 800a8f0:	d102      	bne.n	800a8f8 <_kill_r+0x1c>
 800a8f2:	682b      	ldr	r3, [r5, #0]
 800a8f4:	b103      	cbz	r3, 800a8f8 <_kill_r+0x1c>
 800a8f6:	6023      	str	r3, [r4, #0]
 800a8f8:	bd38      	pop	{r3, r4, r5, pc}
 800a8fa:	bf00      	nop
 800a8fc:	200004b8 	.word	0x200004b8

0800a900 <_getpid_r>:
 800a900:	f7f8 be3a 	b.w	8003578 <_getpid>

0800a904 <__sread>:
 800a904:	b510      	push	{r4, lr}
 800a906:	460c      	mov	r4, r1
 800a908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a90c:	f000 f894 	bl	800aa38 <_read_r>
 800a910:	2800      	cmp	r0, #0
 800a912:	bfab      	itete	ge
 800a914:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a916:	89a3      	ldrhlt	r3, [r4, #12]
 800a918:	181b      	addge	r3, r3, r0
 800a91a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a91e:	bfac      	ite	ge
 800a920:	6563      	strge	r3, [r4, #84]	; 0x54
 800a922:	81a3      	strhlt	r3, [r4, #12]
 800a924:	bd10      	pop	{r4, pc}

0800a926 <__swrite>:
 800a926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a92a:	461f      	mov	r7, r3
 800a92c:	898b      	ldrh	r3, [r1, #12]
 800a92e:	05db      	lsls	r3, r3, #23
 800a930:	4605      	mov	r5, r0
 800a932:	460c      	mov	r4, r1
 800a934:	4616      	mov	r6, r2
 800a936:	d505      	bpl.n	800a944 <__swrite+0x1e>
 800a938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a93c:	2302      	movs	r3, #2
 800a93e:	2200      	movs	r2, #0
 800a940:	f000 f868 	bl	800aa14 <_lseek_r>
 800a944:	89a3      	ldrh	r3, [r4, #12]
 800a946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a94a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a94e:	81a3      	strh	r3, [r4, #12]
 800a950:	4632      	mov	r2, r6
 800a952:	463b      	mov	r3, r7
 800a954:	4628      	mov	r0, r5
 800a956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a95a:	f000 b817 	b.w	800a98c <_write_r>

0800a95e <__sseek>:
 800a95e:	b510      	push	{r4, lr}
 800a960:	460c      	mov	r4, r1
 800a962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a966:	f000 f855 	bl	800aa14 <_lseek_r>
 800a96a:	1c43      	adds	r3, r0, #1
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	bf15      	itete	ne
 800a970:	6560      	strne	r0, [r4, #84]	; 0x54
 800a972:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a976:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a97a:	81a3      	strheq	r3, [r4, #12]
 800a97c:	bf18      	it	ne
 800a97e:	81a3      	strhne	r3, [r4, #12]
 800a980:	bd10      	pop	{r4, pc}

0800a982 <__sclose>:
 800a982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a986:	f000 b813 	b.w	800a9b0 <_close_r>
	...

0800a98c <_write_r>:
 800a98c:	b538      	push	{r3, r4, r5, lr}
 800a98e:	4d07      	ldr	r5, [pc, #28]	; (800a9ac <_write_r+0x20>)
 800a990:	4604      	mov	r4, r0
 800a992:	4608      	mov	r0, r1
 800a994:	4611      	mov	r1, r2
 800a996:	2200      	movs	r2, #0
 800a998:	602a      	str	r2, [r5, #0]
 800a99a:	461a      	mov	r2, r3
 800a99c:	f7f8 fe2b 	bl	80035f6 <_write>
 800a9a0:	1c43      	adds	r3, r0, #1
 800a9a2:	d102      	bne.n	800a9aa <_write_r+0x1e>
 800a9a4:	682b      	ldr	r3, [r5, #0]
 800a9a6:	b103      	cbz	r3, 800a9aa <_write_r+0x1e>
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	bd38      	pop	{r3, r4, r5, pc}
 800a9ac:	200004b8 	.word	0x200004b8

0800a9b0 <_close_r>:
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	4d06      	ldr	r5, [pc, #24]	; (800a9cc <_close_r+0x1c>)
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	4608      	mov	r0, r1
 800a9ba:	602b      	str	r3, [r5, #0]
 800a9bc:	f7f8 fe37 	bl	800362e <_close>
 800a9c0:	1c43      	adds	r3, r0, #1
 800a9c2:	d102      	bne.n	800a9ca <_close_r+0x1a>
 800a9c4:	682b      	ldr	r3, [r5, #0]
 800a9c6:	b103      	cbz	r3, 800a9ca <_close_r+0x1a>
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	bd38      	pop	{r3, r4, r5, pc}
 800a9cc:	200004b8 	.word	0x200004b8

0800a9d0 <_fstat_r>:
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	4d07      	ldr	r5, [pc, #28]	; (800a9f0 <_fstat_r+0x20>)
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	4608      	mov	r0, r1
 800a9da:	4611      	mov	r1, r2
 800a9dc:	602b      	str	r3, [r5, #0]
 800a9de:	f7f8 fe32 	bl	8003646 <_fstat>
 800a9e2:	1c43      	adds	r3, r0, #1
 800a9e4:	d102      	bne.n	800a9ec <_fstat_r+0x1c>
 800a9e6:	682b      	ldr	r3, [r5, #0]
 800a9e8:	b103      	cbz	r3, 800a9ec <_fstat_r+0x1c>
 800a9ea:	6023      	str	r3, [r4, #0]
 800a9ec:	bd38      	pop	{r3, r4, r5, pc}
 800a9ee:	bf00      	nop
 800a9f0:	200004b8 	.word	0x200004b8

0800a9f4 <_isatty_r>:
 800a9f4:	b538      	push	{r3, r4, r5, lr}
 800a9f6:	4d06      	ldr	r5, [pc, #24]	; (800aa10 <_isatty_r+0x1c>)
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	4608      	mov	r0, r1
 800a9fe:	602b      	str	r3, [r5, #0]
 800aa00:	f7f8 fe31 	bl	8003666 <_isatty>
 800aa04:	1c43      	adds	r3, r0, #1
 800aa06:	d102      	bne.n	800aa0e <_isatty_r+0x1a>
 800aa08:	682b      	ldr	r3, [r5, #0]
 800aa0a:	b103      	cbz	r3, 800aa0e <_isatty_r+0x1a>
 800aa0c:	6023      	str	r3, [r4, #0]
 800aa0e:	bd38      	pop	{r3, r4, r5, pc}
 800aa10:	200004b8 	.word	0x200004b8

0800aa14 <_lseek_r>:
 800aa14:	b538      	push	{r3, r4, r5, lr}
 800aa16:	4d07      	ldr	r5, [pc, #28]	; (800aa34 <_lseek_r+0x20>)
 800aa18:	4604      	mov	r4, r0
 800aa1a:	4608      	mov	r0, r1
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	2200      	movs	r2, #0
 800aa20:	602a      	str	r2, [r5, #0]
 800aa22:	461a      	mov	r2, r3
 800aa24:	f7f8 fe2a 	bl	800367c <_lseek>
 800aa28:	1c43      	adds	r3, r0, #1
 800aa2a:	d102      	bne.n	800aa32 <_lseek_r+0x1e>
 800aa2c:	682b      	ldr	r3, [r5, #0]
 800aa2e:	b103      	cbz	r3, 800aa32 <_lseek_r+0x1e>
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	bd38      	pop	{r3, r4, r5, pc}
 800aa34:	200004b8 	.word	0x200004b8

0800aa38 <_read_r>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	4d07      	ldr	r5, [pc, #28]	; (800aa58 <_read_r+0x20>)
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	4608      	mov	r0, r1
 800aa40:	4611      	mov	r1, r2
 800aa42:	2200      	movs	r2, #0
 800aa44:	602a      	str	r2, [r5, #0]
 800aa46:	461a      	mov	r2, r3
 800aa48:	f7f8 fdb8 	bl	80035bc <_read>
 800aa4c:	1c43      	adds	r3, r0, #1
 800aa4e:	d102      	bne.n	800aa56 <_read_r+0x1e>
 800aa50:	682b      	ldr	r3, [r5, #0]
 800aa52:	b103      	cbz	r3, 800aa56 <_read_r+0x1e>
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	bd38      	pop	{r3, r4, r5, pc}
 800aa58:	200004b8 	.word	0x200004b8

0800aa5c <_init>:
 800aa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5e:	bf00      	nop
 800aa60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa62:	bc08      	pop	{r3}
 800aa64:	469e      	mov	lr, r3
 800aa66:	4770      	bx	lr

0800aa68 <_fini>:
 800aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6a:	bf00      	nop
 800aa6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa6e:	bc08      	pop	{r3}
 800aa70:	469e      	mov	lr, r3
 800aa72:	4770      	bx	lr
