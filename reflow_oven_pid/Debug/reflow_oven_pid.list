
reflow_oven_pid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08009540  08009540  00019540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a14  08009a14  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009a14  08009a14  00019a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a1c  08009a1c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a1c  08009a1c  00019a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a20  08009a20  00019a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200001dc  08009c00  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08009c00  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001474f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000278c  00000000  00000000  0003495b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  000370e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  000382c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028716  00000000  00000000  000393b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001352e  00000000  00000000  00061ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7b31  00000000  00000000  00074ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016cb2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf8  00000000  00000000  0016cb80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009524 	.word	0x08009524

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009524 	.word	0x08009524

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <MAX31855K_Init>:
 * @param hspi          Pointer to SPI handler.
 * @param max_cs_port   GPIO port of MAX31855K chip-select.
 * @param max_cs_pin    GPIO pin number of MAX31855K chip-select.
 */
void MAX31855K_Init(MAX31855K_t *max, SPI_HandleTypeDef *hspi, GPIO_TypeDef *max_cs_port, uint16_t max_cs_pin)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	807b      	strh	r3, [r7, #2]
    max->spi_handle = hspi;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	601a      	str	r2, [r3, #0]
    max->cs_port = max_cs_port;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	605a      	str	r2, [r3, #4]
    max->cs_pin = max_cs_pin;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	887a      	ldrh	r2, [r7, #2]
 8000f5e:	811a      	strh	r2, [r3, #8]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <MAX31855K_RxDMA>:
 * @brief Read data from MAX31855K in non-blocking mode through DMA controller.
 * 
 * @param max Pointer to MAX321885K_t structure containing configuration parameters and data.
 */
void MAX31855K_RxDMA(MAX31855K_t *max)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
    /* Pull CS line low */
    HAL_GPIO_WritePin(max->cs_port, max->cs_pin, GPIO_PIN_RESET);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6858      	ldr	r0, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	891b      	ldrh	r3, [r3, #8]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f001 fd0e 	bl	80029a0 <HAL_GPIO_WritePin>

    /* Execute DMA transfer */
    HAL_StatusTypeDef err = HAL_SPI_TransmitReceive_DMA(max->spi_handle, max->tx_buf, max->rx_buf, sizeof(max->rx_buf));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f103 010a 	add.w	r1, r3, #10
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f103 020e 	add.w	r2, r3, #14
 8000f94:	2304      	movs	r3, #4
 8000f96:	f003 f8cb 	bl	8004130 <HAL_SPI_TransmitReceive_DMA>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	73fb      	strb	r3, [r7, #15]
    if (err != HAL_OK)
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00a      	beq.n	8000fba <MAX31855K_RxDMA+0x4e>
    {
        HAL_GPIO_WritePin(max->cs_port, max->cs_pin, GPIO_PIN_SET);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6858      	ldr	r0, [r3, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	891b      	ldrh	r3, [r3, #8]
 8000fac:	2201      	movs	r2, #1
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f001 fcf6 	bl	80029a0 <HAL_GPIO_WritePin>
        max->err = MAX_SPI_DMA_FAIL;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2205      	movs	r2, #5
 8000fb8:	761a      	strb	r2, [r3, #24]
    }
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <MAX31885K_RxDMA_Complete>:
 *        Function should be called from within SPI_RX_Cplt callback function.
 * 
 * @param max Pointer to MAX321885K_t structure containing configuration parameters and data.
 */
void MAX31885K_RxDMA_Complete(MAX31855K_t *max)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(max->cs_port, max->cs_pin, GPIO_PIN_SET);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6858      	ldr	r0, [r3, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	891b      	ldrh	r3, [r3, #8]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f001 fce3 	bl	80029a0 <HAL_GPIO_WritePin>
    max->data32 = max->rx_buf[0] << 24 | (max->rx_buf[1] << 16) | (max->rx_buf[2] << 8) | max->rx_buf[3];
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7b9b      	ldrb	r3, [r3, #14]
 8000fde:	061a      	lsls	r2, r3, #24
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7bdb      	ldrb	r3, [r3, #15]
 8000fe4:	041b      	lsls	r3, r3, #16
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7c1b      	ldrb	r3, [r3, #16]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	7c52      	ldrb	r2, [r2, #17]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	615a      	str	r2, [r3, #20]
    MAX31855K_error_check(max);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 f804 	bl	800100a <MAX31855K_error_check>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <MAX31855K_error_check>:
 * @brief Check data for device faults or SPI read error.
 * 
 * @param max MAX31855K_t object to read raw data and to hold error value. 
 */
static void MAX31855K_error_check(MAX31855K_t *max)
{
 800100a:	b480      	push	{r7}
 800100c:	b085      	sub	sp, #20
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
    if (max->data32 == 0)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d103      	bne.n	8001022 <MAX31855K_error_check+0x18>
    {
        max->err = MAX_ZEROS;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2204      	movs	r2, #4
 800101e:	761a      	strb	r2, [r3, #24]
    }
    else
    {
        max->err = MAX_OK;
    }
}
 8001020:	e024      	b.n	800106c <MAX31855K_error_check+0x62>
    else if (max->data32 & ((uint32_t)1 << 16))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d019      	beq.n	8001062 <MAX31855K_error_check+0x58>
        uint8_t fault = max->data32 & 0x7;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	73fb      	strb	r3, [r7, #15]
        switch (fault)
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b04      	cmp	r3, #4
 800103e:	d006      	beq.n	800104e <MAX31855K_error_check+0x44>
 8001040:	2b04      	cmp	r3, #4
 8001042:	dc12      	bgt.n	800106a <MAX31855K_error_check+0x60>
 8001044:	2b01      	cmp	r3, #1
 8001046:	d008      	beq.n	800105a <MAX31855K_error_check+0x50>
 8001048:	2b02      	cmp	r3, #2
 800104a:	d003      	beq.n	8001054 <MAX31855K_error_check+0x4a>
            break;
 800104c:	e00d      	b.n	800106a <MAX31855K_error_check+0x60>
            max->err = MAX_SHORT_VCC;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	761a      	strb	r2, [r3, #24]
            max->err = MAX_SHORT_GND;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2202      	movs	r2, #2
 8001058:	761a      	strb	r2, [r3, #24]
            max->err = MAX_OPEN;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2203      	movs	r2, #3
 800105e:	761a      	strb	r2, [r3, #24]
            break;
 8001060:	e003      	b.n	800106a <MAX31855K_error_check+0x60>
        max->err = MAX_OK;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	e000      	b.n	800106c <MAX31855K_error_check+0x62>
            break;
 800106a:	bf00      	nop
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <MAX31855K_Get_HJ>:
 * @pre Check that max's error value equals MAX_OK.
 * @param max Pointer to MAX321885K_t structure containing configuration parameters and data.
 * @return float Hot junction temperature.
 */
float MAX31855K_Get_HJ(MAX31855K_t *max)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
    /* Extract HJ temperature. */
    uint32_t data = max->data32;     // Capture latest data reading.
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	60bb      	str	r3, [r7, #8]
    int16_t val = 0;                // Value prior to temperature conversion.
 8001086:	2300      	movs	r3, #0
 8001088:	81fb      	strh	r3, [r7, #14]
    if (data & ((uint32_t)1 << 31)) // Perform sign-extension.
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b00      	cmp	r3, #0
 800108e:	da09      	bge.n	80010a4 <MAX31855K_Get_HJ+0x2c>
    {
        val = 0xC000 | ((data >> 18) & 0x3FFF);
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	0c9b      	lsrs	r3, r3, #18
 8001094:	b29b      	uxth	r3, r3
 8001096:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800109a:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800109e:	b29b      	uxth	r3, r3
 80010a0:	81fb      	strh	r3, [r7, #14]
 80010a2:	e002      	b.n	80010aa <MAX31855K_Get_HJ+0x32>
    }
    else
    {
        val = data >> 18;
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	0c9b      	lsrs	r3, r3, #18
 80010a8:	81fb      	strh	r3, [r7, #14]
    }
    return val * HJ_RES;
 80010aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fa38 	bl	8000524 <__aeabi_i2d>
 80010b4:	f04f 0200 	mov.w	r2, #0
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <MAX31855K_Get_HJ+0x64>)
 80010ba:	f7ff fa9d 	bl	80005f8 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fd6f 	bl	8000ba8 <__aeabi_d2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	ee07 3a90 	vmov	s15, r3
}
 80010d0:	eeb0 0a67 	vmov.f32	s0, s15
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	3fd00000 	.word	0x3fd00000

080010e0 <MAX31855K_Get_CJ>:
 * @pre Check that max's error value equals MAX_OK.
 * @param max Pointer to MAX321885K_t structure containing configuration parameters and data.
 * @return float Cold junction temperature.
 */
float MAX31855K_Get_CJ(MAX31855K_t *max)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    /* Extract CJ temperature. */
    uint32_t data = max->data32;      // Capture latest data reading.
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	60bb      	str	r3, [r7, #8]
    int16_t val = 0;                  // Value prior to temperature conversion.
 80010ee:	2300      	movs	r3, #0
 80010f0:	81fb      	strh	r3, [r7, #14]
    if (data & ((uint32_t)1 << 15)) // Perform sign-extension.
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d009      	beq.n	8001110 <MAX31855K_Get_CJ+0x30>
    {
        val = 0xF000 | ((data >> 4) & 0xFFF);
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	b29b      	uxth	r3, r3
 8001102:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001106:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800110a:	b29b      	uxth	r3, r3
 800110c:	81fb      	strh	r3, [r7, #14]
 800110e:	e005      	b.n	800111c <MAX31855K_Get_CJ+0x3c>
    }
    else
    {
        val = (data >> 4) & 0xFFF;
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	b21b      	sxth	r3, r3
 8001116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800111a:	81fb      	strh	r3, [r7, #14]
    }
    return val * CJ_RES;
 800111c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f9ff 	bl	8000524 <__aeabi_i2d>
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <MAX31855K_Get_CJ+0x6c>)
 800112c:	f7ff fa64 	bl	80005f8 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fd36 	bl	8000ba8 <__aeabi_d2f>
 800113c:	4603      	mov	r3, r0
 800113e:	ee07 3a90 	vmov	s15, r3
}
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	3fb00000 	.word	0x3fb00000

08001150 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Callback Function for TIM16 and TIM17 interrupt.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    if (htim == &htim16) // Every 1 s.
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d108      	bne.n	8001172 <HAL_TIM_PeriodElapsedCallback+0x22>
    {
        bin_sem = 1;
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
        count++;
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	4a08      	ldr	r2, [pc, #32]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800116e:	6013      	str	r3, [r2, #0]
    }
    else if (htim == &htim17) // Every 0.07 s.
    {
        MAX31855K_RxDMA(&max31855K);
    }
}
 8001170:	e006      	b.n	8001180 <HAL_TIM_PeriodElapsedCallback+0x30>
    else if (htim == &htim17) // Every 0.07 s.
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d102      	bne.n	8001180 <HAL_TIM_PeriodElapsedCallback+0x30>
        MAX31855K_RxDMA(&max31855K);
 800117a:	4807      	ldr	r0, [pc, #28]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800117c:	f7ff fef6 	bl	8000f6c <MAX31855K_RxDMA>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000438 	.word	0x20000438
 800118c:	200001f8 	.word	0x200001f8
 8001190:	200001fc 	.word	0x200001fc
 8001194:	200002b8 	.word	0x200002b8
 8001198:	20000304 	.word	0x20000304

0800119c <HAL_SPI_TxRxCpltCallback>:

// Callback once DMA receive from MAX31855K is completed.
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi2)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <HAL_SPI_TxRxCpltCallback+0x20>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d102      	bne.n	80011b2 <HAL_SPI_TxRxCpltCallback+0x16>
    {
        MAX31885K_RxDMA_Complete(&max31855K);
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <HAL_SPI_TxRxCpltCallback+0x24>)
 80011ae:	f7ff ff08 	bl	8000fc2 <MAX31885K_RxDMA_Complete>
    }
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000020c 	.word	0x2000020c
 80011c0:	20000304 	.word	0x20000304

080011c4 <HAL_SPI_ErrorCallback>:

// Callback if error occurred during DMA receive from MAX31855K.
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

    if (hspi == &hspi2)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a06      	ldr	r2, [pc, #24]	; (80011e8 <HAL_SPI_ErrorCallback+0x24>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d102      	bne.n	80011da <HAL_SPI_ErrorCallback+0x16>
    {
        max31855K.err = MAX_SPI_DMA_FAIL;
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_SPI_ErrorCallback+0x28>)
 80011d6:	2205      	movs	r2, #5
 80011d8:	761a      	strb	r2, [r3, #24]
    }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	2000020c 	.word	0x2000020c
 80011ec:	20000304 	.word	0x20000304

080011f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011f4:	b09e      	sub	sp, #120	; 0x78
 80011f6:	af04      	add	r7, sp, #16
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80011f8:	f000 fe7e 	bl	8001ef8 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80011fc:	f000 f904 	bl	8001408 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001200:	f000 fad4 	bl	80017ac <MX_GPIO_Init>
    MX_DMA_Init();
 8001204:	f000 faac 	bl	8001760 <MX_DMA_Init>
    MX_USART2_UART_Init();
 8001208:	f000 fa7a 	bl	8001700 <MX_USART2_UART_Init>
    MX_TIM16_Init();
 800120c:	f000 fa28 	bl	8001660 <MX_TIM16_Init>
    MX_SPI2_Init();
 8001210:	f000 f970 	bl	80014f4 <MX_SPI2_Init>
    MX_TIM3_Init();
 8001214:	f000 f9ac 	bl	8001570 <MX_TIM3_Init>
    MX_TIM17_Init();
 8001218:	f000 fa4a 	bl	80016b0 <MX_TIM17_Init>
    /* USER CODE BEGIN 2 */

    __HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1); // Set OC1PE bit to preload PWM value.
 800121c:	4b69      	ldr	r3, [pc, #420]	; (80013c4 <main+0x1d4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	4b68      	ldr	r3, [pc, #416]	; (80013c4 <main+0x1d4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0208 	orr.w	r2, r2, #8
 800122a:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Start_IT(&htim16);                     // Start 1 s timer interrupt.
 800122c:	4866      	ldr	r0, [pc, #408]	; (80013c8 <main+0x1d8>)
 800122e:	f003 fc11 	bl	8004a54 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim17);                     // Start 0.07 s timer interrupt.
 8001232:	4866      	ldr	r0, [pc, #408]	; (80013cc <main+0x1dc>)
 8001234:	f003 fc0e 	bl	8004a54 <HAL_TIM_Base_Start_IT>

    MAX31855K_Init(&max31855K, &hspi2, MAX_CS_GPIO_Port, MAX_CS_Pin);
 8001238:	2310      	movs	r3, #16
 800123a:	4a65      	ldr	r2, [pc, #404]	; (80013d0 <main+0x1e0>)
 800123c:	4965      	ldr	r1, [pc, #404]	; (80013d4 <main+0x1e4>)
 800123e:	4866      	ldr	r0, [pc, #408]	; (80013d8 <main+0x1e8>)
 8001240:	f7ff fe7e 	bl	8000f40 <MAX31855K_Init>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    // Create local variables:
    uint8_t set_point = 170;                  // TODO: Update set point
 8001244:	23aa      	movs	r3, #170	; 0xaa
 8001246:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Duty cycle initialized to 0%.
 800124a:	2100      	movs	r1, #0
 800124c:	485d      	ldr	r0, [pc, #372]	; (80013c4 <main+0x1d4>)
 800124e:	f003 fcd3 	bl	8004bf8 <HAL_TIM_PWM_Start>
    char UART_buf[100] = {0};
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2260      	movs	r2, #96	; 0x60
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f005 fac3 	bl	80067e8 <memset>

    while (1)
    {
        // Wait for timer interrupt.
        while (bin_sem == 0)
 8001262:	e002      	b.n	800126a <main+0x7a>
        {
            HAL_Delay(1);
 8001264:	2001      	movs	r0, #1
 8001266:	f000 fec3 	bl	8001ff0 <HAL_Delay>
        while (bin_sem == 0)
 800126a:	4b5c      	ldr	r3, [pc, #368]	; (80013dc <main+0x1ec>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f7      	beq.n	8001264 <main+0x74>
        }
        bin_sem = 0;
 8001274:	4b59      	ldr	r3, [pc, #356]	; (80013dc <main+0x1ec>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]

        // Pseudo-state machine.
        switch (count)
 800127a:	4b59      	ldr	r3, [pc, #356]	; (80013e0 <main+0x1f0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001282:	d023      	beq.n	80012cc <main+0xdc>
 8001284:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001288:	d826      	bhi.n	80012d8 <main+0xe8>
 800128a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800128e:	4293      	cmp	r3, r2
 8001290:	d016      	beq.n	80012c0 <main+0xd0>
 8001292:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001296:	4293      	cmp	r3, r2
 8001298:	d81e      	bhi.n	80012d8 <main+0xe8>
 800129a:	2b64      	cmp	r3, #100	; 0x64
 800129c:	d004      	beq.n	80012a8 <main+0xb8>
 800129e:	f240 22ee 	movw	r2, #750	; 0x2ee
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d006      	beq.n	80012b4 <main+0xc4>
            break;
        case 2000:
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1023); // 25% Duty Cycle
            break;
        default:
            break;
 80012a6:	e017      	b.n	80012d8 <main+0xe8>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2047); // 50% Duty Cycle
 80012a8:	4b46      	ldr	r3, [pc, #280]	; (80013c4 <main+0x1d4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80012b0:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 80012b2:	e012      	b.n	80012da <main+0xea>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 4095); // 100% Duty Cycle
 80012b4:	4b43      	ldr	r3, [pc, #268]	; (80013c4 <main+0x1d4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80012bc:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 80012be:	e00c      	b.n	80012da <main+0xea>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 3071); // 75% Duty Cycle
 80012c0:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <main+0x1d4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f640 32ff 	movw	r2, #3071	; 0xbff
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 80012ca:	e006      	b.n	80012da <main+0xea>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1023); // 25% Duty Cycle
 80012cc:	4b3d      	ldr	r3, [pc, #244]	; (80013c4 <main+0x1d4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 80012d6:	e000      	b.n	80012da <main+0xea>
            break;
 80012d8:	bf00      	nop
        }

        // Transmit set point, MCU control signal and temperature reading.

        switch (max31855K.err) // Automatically updated every ~0.07 s
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <main+0x1e8>)
 80012dc:	7e1b      	ldrb	r3, [r3, #24]
 80012de:	2b05      	cmp	r3, #5
 80012e0:	d85d      	bhi.n	800139e <main+0x1ae>
 80012e2:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <main+0xf8>)
 80012e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e8:	08001301 	.word	0x08001301
 80012ec:	08001363 	.word	0x08001363
 80012f0:	0800136f 	.word	0x0800136f
 80012f4:	0800137b 	.word	0x0800137b
 80012f8:	08001387 	.word	0x08001387
 80012fc:	08001393 	.word	0x08001393
        {
        case MAX_OK:
            sprintf(UART_buf, "%d %d %.2f %.2f\r\n", set_point,
 8001300:	f897 6067 	ldrb.w	r6, [r7, #103]	; 0x67
                    (uint16_t)__HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1) * 100 / 4095,
 8001304:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <main+0x1d4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130a:	b29b      	uxth	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	2364      	movs	r3, #100	; 0x64
 8001310:	fb03 f302 	mul.w	r3, r3, r2
            sprintf(UART_buf, "%d %d %.2f %.2f\r\n", set_point,
 8001314:	4a33      	ldr	r2, [pc, #204]	; (80013e4 <main+0x1f4>)
 8001316:	fb82 1203 	smull	r1, r2, r2, r3
 800131a:	441a      	add	r2, r3
 800131c:	12d2      	asrs	r2, r2, #11
 800131e:	17db      	asrs	r3, r3, #31
 8001320:	eba2 0803 	sub.w	r8, r2, r3
                    MAX31855K_Get_HJ(&max31855K),
 8001324:	482c      	ldr	r0, [pc, #176]	; (80013d8 <main+0x1e8>)
 8001326:	f7ff fea7 	bl	8001078 <MAX31855K_Get_HJ>
 800132a:	ee10 3a10 	vmov	r3, s0
            sprintf(UART_buf, "%d %d %.2f %.2f\r\n", set_point,
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f90a 	bl	8000548 <__aeabi_f2d>
 8001334:	4604      	mov	r4, r0
 8001336:	460d      	mov	r5, r1
                    MAX31855K_Get_CJ(&max31855K));
 8001338:	4827      	ldr	r0, [pc, #156]	; (80013d8 <main+0x1e8>)
 800133a:	f7ff fed1 	bl	80010e0 <MAX31855K_Get_CJ>
 800133e:	ee10 3a10 	vmov	r3, s0
            sprintf(UART_buf, "%d %d %.2f %.2f\r\n", set_point,
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f900 	bl	8000548 <__aeabi_f2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4638      	mov	r0, r7
 800134e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001352:	e9cd 4500 	strd	r4, r5, [sp]
 8001356:	4643      	mov	r3, r8
 8001358:	4632      	mov	r2, r6
 800135a:	4923      	ldr	r1, [pc, #140]	; (80013e8 <main+0x1f8>)
 800135c:	f005 feb6 	bl	80070cc <siprintf>
            break;
 8001360:	e023      	b.n	80013aa <main+0x1ba>
        case MAX_SHORT_VCC:
            sprintf(UART_buf, "Thermocouple shorted to VCC\r\n");
 8001362:	463b      	mov	r3, r7
 8001364:	4921      	ldr	r1, [pc, #132]	; (80013ec <main+0x1fc>)
 8001366:	4618      	mov	r0, r3
 8001368:	f005 feb0 	bl	80070cc <siprintf>
            break;
 800136c:	e01d      	b.n	80013aa <main+0x1ba>
        case MAX_SHORT_GND:
            sprintf(UART_buf, "Thermocouple shorted to GND\r\n");
 800136e:	463b      	mov	r3, r7
 8001370:	491f      	ldr	r1, [pc, #124]	; (80013f0 <main+0x200>)
 8001372:	4618      	mov	r0, r3
 8001374:	f005 feaa 	bl	80070cc <siprintf>
            break;
 8001378:	e017      	b.n	80013aa <main+0x1ba>
        case MAX_OPEN:
            sprintf(UART_buf, "Thermocouple connection is open\r\n");
 800137a:	463b      	mov	r3, r7
 800137c:	491d      	ldr	r1, [pc, #116]	; (80013f4 <main+0x204>)
 800137e:	4618      	mov	r0, r3
 8001380:	f005 fea4 	bl	80070cc <siprintf>
            break;
 8001384:	e011      	b.n	80013aa <main+0x1ba>
        case MAX_ZEROS:
            sprintf(UART_buf, "SPI read only 0s\r\n");
 8001386:	463b      	mov	r3, r7
 8001388:	491b      	ldr	r1, [pc, #108]	; (80013f8 <main+0x208>)
 800138a:	4618      	mov	r0, r3
 800138c:	f005 fe9e 	bl	80070cc <siprintf>
            break;
 8001390:	e00b      	b.n	80013aa <main+0x1ba>
        case MAX_SPI_DMA_FAIL:
            sprintf(UART_buf, "SPI DMA Fail\r\n");
 8001392:	463b      	mov	r3, r7
 8001394:	4919      	ldr	r1, [pc, #100]	; (80013fc <main+0x20c>)
 8001396:	4618      	mov	r0, r3
 8001398:	f005 fe98 	bl	80070cc <siprintf>
            break;
 800139c:	e005      	b.n	80013aa <main+0x1ba>
        default:
            sprintf(UART_buf, "Unknown error");
 800139e:	463b      	mov	r3, r7
 80013a0:	4917      	ldr	r1, [pc, #92]	; (8001400 <main+0x210>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f005 fe92 	bl	80070cc <siprintf>
            break;
 80013a8:	bf00      	nop
        }
        HAL_UART_Transmit(&huart2, (uint8_t *)UART_buf, strlen(UART_buf), HAL_MAX_DELAY);
 80013aa:	463b      	mov	r3, r7
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7fe ff0f 	bl	80001d0 <strlen>
 80013b2:	4603      	mov	r3, r0
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4639      	mov	r1, r7
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	4811      	ldr	r0, [pc, #68]	; (8001404 <main+0x214>)
 80013be:	f004 fd63 	bl	8005e88 <HAL_UART_Transmit>
        while (bin_sem == 0)
 80013c2:	e752      	b.n	800126a <main+0x7a>
 80013c4:	20000320 	.word	0x20000320
 80013c8:	20000438 	.word	0x20000438
 80013cc:	200002b8 	.word	0x200002b8
 80013d0:	48000800 	.word	0x48000800
 80013d4:	2000020c 	.word	0x2000020c
 80013d8:	20000304 	.word	0x20000304
 80013dc:	200001f8 	.word	0x200001f8
 80013e0:	200001fc 	.word	0x200001fc
 80013e4:	80080081 	.word	0x80080081
 80013e8:	08009540 	.word	0x08009540
 80013ec:	08009554 	.word	0x08009554
 80013f0:	08009574 	.word	0x08009574
 80013f4:	08009594 	.word	0x08009594
 80013f8:	080095b8 	.word	0x080095b8
 80013fc:	080095cc 	.word	0x080095cc
 8001400:	080095dc 	.word	0x080095dc
 8001404:	2000036c 	.word	0x2000036c

08001408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b0b8      	sub	sp, #224	; 0xe0
 800140c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001412:	2244      	movs	r2, #68	; 0x44
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f005 f9e6 	bl	80067e8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800142c:	463b      	mov	r3, r7
 800142e:	2288      	movs	r2, #136	; 0x88
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f005 f9d8 	bl	80067e8 <memset>

    /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001438:	2302      	movs	r3, #2
 800143a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001442:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001446:	2310      	movs	r3, #16
 8001448:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144c:	2302      	movs	r3, #2
 800144e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001452:	2302      	movs	r3, #2
 8001454:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_OscInitStruct.PLL.PLLM = 1;
 8001458:	2301      	movs	r3, #1
 800145a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_OscInitStruct.PLL.PLLN = 10;
 800145e:	230a      	movs	r3, #10
 8001460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001464:	2307      	movs	r3, #7
 8001466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800146a:	2302      	movs	r3, #2
 800146c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001470:	2302      	movs	r3, #2
 8001472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001476:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800147a:	4618      	mov	r0, r3
 800147c:	f001 fb0c 	bl	8002a98 <HAL_RCC_OscConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0x82>
    {
        Error_Handler();
 8001486:	f000 fa0b 	bl	80018a0 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
  */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800148a:	230f      	movs	r3, #15
 800148c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001490:	2303      	movs	r3, #3
 8001492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80014ac:	2104      	movs	r1, #4
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 fed8 	bl	8003264 <HAL_RCC_ClockConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0xb6>
    {
        Error_Handler();
 80014ba:	f000 f9f1 	bl	80018a0 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014be:	2302      	movs	r3, #2
 80014c0:	603b      	str	r3, [r7, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c6:	463b      	mov	r3, r7
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 f8d1 	bl	8003670 <HAL_RCCEx_PeriphCLKConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <SystemClock_Config+0xd0>
    {
        Error_Handler();
 80014d4:	f000 f9e4 	bl	80018a0 <Error_Handler>
    }
    /** Configure the main internal regulator output voltage
  */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014dc:	f001 fa86 	bl	80029ec <HAL_PWREx_ControlVoltageScaling>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0xe2>
    {
        Error_Handler();
 80014e6:	f000 f9db 	bl	80018a0 <Error_Handler>
    }
}
 80014ea:	bf00      	nop
 80014ec:	37e0      	adds	r7, #224	; 0xe0
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI2_Init 1 */

    /* USER CODE END SPI2_Init 1 */
    /* SPI2 parameter configuration*/
    hspi2.Instance = SPI2;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <MX_SPI2_Init+0x74>)
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <MX_SPI2_Init+0x78>)
 80014fc:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_SPI2_Init+0x74>)
 8001500:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001504:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <MX_SPI2_Init+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_SPI2_Init+0x74>)
 800150e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001512:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_SPI2_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <MX_SPI2_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_SPI2_Init+0x74>)
 8001522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001526:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_SPI2_Init+0x74>)
 800152a:	2228      	movs	r2, #40	; 0x28
 800152c:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_SPI2_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_SPI2_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_SPI2_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
    hspi2.Init.CRCPolynomial = 7;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_SPI2_Init+0x74>)
 8001542:	2207      	movs	r2, #7
 8001544:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_SPI2_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_SPI2_Init+0x74>)
 800154e:	2208      	movs	r2, #8
 8001550:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_SPI2_Init+0x74>)
 8001554:	f002 fd48 	bl	8003fe8 <HAL_SPI_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_SPI2_Init+0x6e>
    {
        Error_Handler();
 800155e:	f000 f99f 	bl	80018a0 <Error_Handler>
    }
    /* USER CODE BEGIN SPI2_Init 2 */

    /* USER CODE END SPI2_Init 2 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000020c 	.word	0x2000020c
 800156c:	40003800 	.word	0x40003800

08001570 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08e      	sub	sp, #56	; 0x38
 8001574:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001590:	463b      	mov	r3, r7
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
 800159e:	615a      	str	r2, [r3, #20]
 80015a0:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 80015a2:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015a4:	4a2d      	ldr	r2, [pc, #180]	; (800165c <MX_TIM3_Init+0xec>)
 80015a6:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 9768 - 1;
 80015a8:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015aa:	f242 6227 	movw	r2, #9767	; 0x2627
 80015ae:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b0:	4b29      	ldr	r3, [pc, #164]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 4095 - 1;
 80015b6:	4b28      	ldr	r3, [pc, #160]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015b8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80015bc:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015be:	4b26      	ldr	r3, [pc, #152]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c4:	4b24      	ldr	r3, [pc, #144]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015ca:	4823      	ldr	r0, [pc, #140]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015cc:	f003 f9ea 	bl	80049a4 <HAL_TIM_Base_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM3_Init+0x6a>
    {
        Error_Handler();
 80015d6:	f000 f963 	bl	80018a0 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e4:	4619      	mov	r1, r3
 80015e6:	481c      	ldr	r0, [pc, #112]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015e8:	f003 fe3c 	bl	8005264 <HAL_TIM_ConfigClockSource>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM3_Init+0x86>
    {
        Error_Handler();
 80015f2:	f000 f955 	bl	80018a0 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015f6:	4818      	ldr	r0, [pc, #96]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015f8:	f003 fa9c 	bl	8004b34 <HAL_TIM_PWM_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM3_Init+0x96>
    {
        Error_Handler();
 8001602:	f000 f94d 	bl	80018a0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	4619      	mov	r1, r3
 8001614:	4810      	ldr	r0, [pc, #64]	; (8001658 <MX_TIM3_Init+0xe8>)
 8001616:	f004 fb43 	bl	8005ca0 <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM3_Init+0xb4>
    {
        Error_Handler();
 8001620:	f000 f93e 	bl	80018a0 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001624:	2360      	movs	r3, #96	; 0x60
 8001626:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	4619      	mov	r1, r3
 800163a:	4807      	ldr	r0, [pc, #28]	; (8001658 <MX_TIM3_Init+0xe8>)
 800163c:	f003 fd02 	bl	8005044 <HAL_TIM_PWM_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM3_Init+0xda>
    {
        Error_Handler();
 8001646:	f000 f92b 	bl	80018a0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 800164a:	4803      	ldr	r0, [pc, #12]	; (8001658 <MX_TIM3_Init+0xe8>)
 800164c:	f000 fa68 	bl	8001b20 <HAL_TIM_MspPostInit>
}
 8001650:	bf00      	nop
 8001652:	3738      	adds	r7, #56	; 0x38
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000320 	.word	0x20000320
 800165c:	40000400 	.word	0x40000400

08001660 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
    /* USER CODE END TIM16_Init 0 */

    /* USER CODE BEGIN TIM16_Init 1 */

    /* USER CODE END TIM16_Init 1 */
    htim16.Instance = TIM16;
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <MX_TIM16_Init+0x48>)
 8001666:	4a11      	ldr	r2, [pc, #68]	; (80016ac <MX_TIM16_Init+0x4c>)
 8001668:	601a      	str	r2, [r3, #0]
    htim16.Init.Prescaler = 8000 - 1;
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <MX_TIM16_Init+0x48>)
 800166c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001670:	605a      	str	r2, [r3, #4]
    htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <MX_TIM16_Init+0x48>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
    htim16.Init.Period = 10000 - 1;
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <MX_TIM16_Init+0x48>)
 800167a:	f242 720f 	movw	r2, #9999	; 0x270f
 800167e:	60da      	str	r2, [r3, #12]
    htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_TIM16_Init+0x48>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
    htim16.Init.RepetitionCounter = 0;
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <MX_TIM16_Init+0x48>)
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
    htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_TIM16_Init+0x48>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_TIM16_Init+0x48>)
 8001694:	f003 f986 	bl	80049a4 <HAL_TIM_Base_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM16_Init+0x42>
    {
        Error_Handler();
 800169e:	f000 f8ff 	bl	80018a0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM16_Init 2 */

    /* USER CODE END TIM16_Init 2 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000438 	.word	0x20000438
 80016ac:	40014400 	.word	0x40014400

080016b0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
    /* USER CODE END TIM17_Init 0 */

    /* USER CODE BEGIN TIM17_Init 1 */

    /* USER CODE END TIM17_Init 1 */
    htim17.Instance = TIM17;
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <MX_TIM17_Init+0x48>)
 80016b6:	4a11      	ldr	r2, [pc, #68]	; (80016fc <MX_TIM17_Init+0x4c>)
 80016b8:	601a      	str	r2, [r3, #0]
    htim17.Init.Prescaler = 8000 - 1;
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_TIM17_Init+0x48>)
 80016bc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80016c0:	605a      	str	r2, [r3, #4]
    htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <MX_TIM17_Init+0x48>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
    htim17.Init.Period = 700 - 1;
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <MX_TIM17_Init+0x48>)
 80016ca:	f240 22bb 	movw	r2, #699	; 0x2bb
 80016ce:	60da      	str	r2, [r3, #12]
    htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_TIM17_Init+0x48>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
    htim17.Init.RepetitionCounter = 0;
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <MX_TIM17_Init+0x48>)
 80016d8:	2200      	movs	r2, #0
 80016da:	615a      	str	r2, [r3, #20]
    htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_TIM17_Init+0x48>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_TIM17_Init+0x48>)
 80016e4:	f003 f95e 	bl	80049a4 <HAL_TIM_Base_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM17_Init+0x42>
    {
        Error_Handler();
 80016ee:	f000 f8d7 	bl	80018a0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM17_Init 2 */

    /* USER CODE END TIM17_Init 2 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200002b8 	.word	0x200002b8
 80016fc:	40014800 	.word	0x40014800

08001700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_USART2_UART_Init+0x58>)
 8001706:	4a15      	ldr	r2, [pc, #84]	; (800175c <MX_USART2_UART_Init+0x5c>)
 8001708:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <MX_USART2_UART_Init+0x58>)
 800170c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001710:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART2_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_USART2_UART_Init+0x58>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART2_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART2_UART_Init+0x58>)
 8001726:	220c      	movs	r2, #12
 8001728:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART2_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART2_UART_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART2_UART_Init+0x58>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART2_UART_Init+0x58>)
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART2_UART_Init+0x58>)
 8001744:	f004 fb52 	bl	8005dec <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART2_UART_Init+0x52>
    {
        Error_Handler();
 800174e:	f000 f8a7 	bl	80018a0 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000036c 	.word	0x2000036c
 800175c:	40004400 	.word	0x40004400

08001760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <MX_DMA_Init+0x48>)
 8001768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176a:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <MX_DMA_Init+0x48>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6493      	str	r3, [r2, #72]	; 0x48
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <MX_DMA_Init+0x48>)
 8001774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Channel4_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	200e      	movs	r0, #14
 8001784:	f000 fd33 	bl	80021ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001788:	200e      	movs	r0, #14
 800178a:	f000 fd4c 	bl	8002226 <HAL_NVIC_EnableIRQ>
    /* DMA1_Channel5_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	200f      	movs	r0, #15
 8001794:	f000 fd2b 	bl	80021ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001798:	200f      	movs	r0, #15
 800179a:	f000 fd44 	bl	8002226 <HAL_NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000

080017ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c2:	4b34      	ldr	r3, [pc, #208]	; (8001894 <MX_GPIO_Init+0xe8>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	4a33      	ldr	r2, [pc, #204]	; (8001894 <MX_GPIO_Init+0xe8>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ce:	4b31      	ldr	r3, [pc, #196]	; (8001894 <MX_GPIO_Init+0xe8>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80017da:	4b2e      	ldr	r3, [pc, #184]	; (8001894 <MX_GPIO_Init+0xe8>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017de:	4a2d      	ldr	r2, [pc, #180]	; (8001894 <MX_GPIO_Init+0xe8>)
 80017e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e6:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <MX_GPIO_Init+0xe8>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	4b28      	ldr	r3, [pc, #160]	; (8001894 <MX_GPIO_Init+0xe8>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	4a27      	ldr	r2, [pc, #156]	; (8001894 <MX_GPIO_Init+0xe8>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fe:	4b25      	ldr	r3, [pc, #148]	; (8001894 <MX_GPIO_Init+0xe8>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	4b22      	ldr	r3, [pc, #136]	; (8001894 <MX_GPIO_Init+0xe8>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	4a21      	ldr	r2, [pc, #132]	; (8001894 <MX_GPIO_Init+0xe8>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <MX_GPIO_Init+0xe8>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	2120      	movs	r1, #32
 8001826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182a:	f001 f8b9 	bl	80029a0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(MAX_CS_GPIO_Port, MAX_CS_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2110      	movs	r1, #16
 8001832:	4819      	ldr	r0, [pc, #100]	; (8001898 <MX_GPIO_Init+0xec>)
 8001834:	f001 f8b4 	bl	80029a0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8001838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800183c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800183e:	4b17      	ldr	r3, [pc, #92]	; (800189c <MX_GPIO_Init+0xf0>)
 8001840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	4812      	ldr	r0, [pc, #72]	; (8001898 <MX_GPIO_Init+0xec>)
 800184e:	f000 fefd 	bl	800264c <HAL_GPIO_Init>

    /*Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 8001852:	2320      	movs	r3, #32
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186c:	f000 feee 	bl	800264c <HAL_GPIO_Init>

    /*Configure GPIO pin : MAX_CS_Pin */
    GPIO_InitStruct.Pin = MAX_CS_Pin;
 8001870:	2310      	movs	r3, #16
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MAX_CS_GPIO_Port, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	4804      	ldr	r0, [pc, #16]	; (8001898 <MX_GPIO_Init+0xec>)
 8001888:	f000 fee0 	bl	800264c <HAL_GPIO_Init>
}
 800188c:	bf00      	nop
 800188e:	3728      	adds	r7, #40	; 0x28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000
 8001898:	48000800 	.word	0x48000800
 800189c:	10210000 	.word	0x10210000

080018a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a4:	b672      	cpsid	i
}
 80018a6:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80018a8:	e7fe      	b.n	80018a8 <Error_Handler+0x8>
	...

080018ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <HAL_MspInit+0x44>)
 80018b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b6:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <HAL_MspInit+0x44>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6613      	str	r3, [r2, #96]	; 0x60
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_MspInit+0x44>)
 80018c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_MspInit+0x44>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <HAL_MspInit+0x44>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d4:	6593      	str	r3, [r2, #88]	; 0x58
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_MspInit+0x44>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000

080018f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a50      	ldr	r2, [pc, #320]	; (8001a54 <HAL_SPI_MspInit+0x160>)
 8001912:	4293      	cmp	r3, r2
 8001914:	f040 8099 	bne.w	8001a4a <HAL_SPI_MspInit+0x156>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001918:	4b4f      	ldr	r3, [pc, #316]	; (8001a58 <HAL_SPI_MspInit+0x164>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	4a4e      	ldr	r2, [pc, #312]	; (8001a58 <HAL_SPI_MspInit+0x164>)
 800191e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001922:	6593      	str	r3, [r2, #88]	; 0x58
 8001924:	4b4c      	ldr	r3, [pc, #304]	; (8001a58 <HAL_SPI_MspInit+0x164>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001930:	4b49      	ldr	r3, [pc, #292]	; (8001a58 <HAL_SPI_MspInit+0x164>)
 8001932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001934:	4a48      	ldr	r2, [pc, #288]	; (8001a58 <HAL_SPI_MspInit+0x164>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193c:	4b46      	ldr	r3, [pc, #280]	; (8001a58 <HAL_SPI_MspInit+0x164>)
 800193e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001948:	4b43      	ldr	r3, [pc, #268]	; (8001a58 <HAL_SPI_MspInit+0x164>)
 800194a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194c:	4a42      	ldr	r2, [pc, #264]	; (8001a58 <HAL_SPI_MspInit+0x164>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001954:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <HAL_SPI_MspInit+0x164>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001960:	230c      	movs	r3, #12
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001970:	2305      	movs	r3, #5
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	4838      	ldr	r0, [pc, #224]	; (8001a5c <HAL_SPI_MspInit+0x168>)
 800197c:	f000 fe66 	bl	800264c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001992:	2305      	movs	r3, #5
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4830      	ldr	r0, [pc, #192]	; (8001a60 <HAL_SPI_MspInit+0x16c>)
 800199e:	f000 fe55 	bl	800264c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80019a2:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <HAL_SPI_MspInit+0x170>)
 80019a4:	4a30      	ldr	r2, [pc, #192]	; (8001a68 <HAL_SPI_MspInit+0x174>)
 80019a6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 80019a8:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <HAL_SPI_MspInit+0x170>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ae:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_SPI_MspInit+0x170>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b4:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <HAL_SPI_MspInit+0x170>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_SPI_MspInit+0x170>)
 80019bc:	2280      	movs	r2, #128	; 0x80
 80019be:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019c0:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <HAL_SPI_MspInit+0x170>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019c6:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_SPI_MspInit+0x170>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_SPI_MspInit+0x170>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80019d2:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_SPI_MspInit+0x170>)
 80019d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80019da:	4822      	ldr	r0, [pc, #136]	; (8001a64 <HAL_SPI_MspInit+0x170>)
 80019dc:	f000 fc3e 	bl	800225c <HAL_DMA_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_SPI_MspInit+0xf6>
    {
      Error_Handler();
 80019e6:	f7ff ff5b 	bl	80018a0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a1d      	ldr	r2, [pc, #116]	; (8001a64 <HAL_SPI_MspInit+0x170>)
 80019ee:	659a      	str	r2, [r3, #88]	; 0x58
 80019f0:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <HAL_SPI_MspInit+0x170>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_SPI_MspInit+0x178>)
 80019f8:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <HAL_SPI_MspInit+0x17c>)
 80019fa:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_SPI_MspInit+0x178>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_SPI_MspInit+0x178>)
 8001a04:	2210      	movs	r2, #16
 8001a06:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_SPI_MspInit+0x178>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_SPI_MspInit+0x178>)
 8001a10:	2280      	movs	r2, #128	; 0x80
 8001a12:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_SPI_MspInit+0x178>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_SPI_MspInit+0x178>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_SPI_MspInit+0x178>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_SPI_MspInit+0x178>)
 8001a28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001a2e:	480f      	ldr	r0, [pc, #60]	; (8001a6c <HAL_SPI_MspInit+0x178>)
 8001a30:	f000 fc14 	bl	800225c <HAL_DMA_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8001a3a:	f7ff ff31 	bl	80018a0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <HAL_SPI_MspInit+0x178>)
 8001a42:	655a      	str	r2, [r3, #84]	; 0x54
 8001a44:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <HAL_SPI_MspInit+0x178>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a4a:	bf00      	nop
 8001a4c:	3728      	adds	r7, #40	; 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40003800 	.word	0x40003800
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	48000800 	.word	0x48000800
 8001a60:	48000400 	.word	0x48000400
 8001a64:	20000270 	.word	0x20000270
 8001a68:	40020044 	.word	0x40020044
 8001a6c:	200003f0 	.word	0x200003f0
 8001a70:	40020058 	.word	0x40020058

08001a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a23      	ldr	r2, [pc, #140]	; (8001b10 <HAL_TIM_Base_MspInit+0x9c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d10c      	bne.n	8001aa0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <HAL_TIM_Base_MspInit+0xa0>)
 8001a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8a:	4a22      	ldr	r2, [pc, #136]	; (8001b14 <HAL_TIM_Base_MspInit+0xa0>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	6593      	str	r3, [r2, #88]	; 0x58
 8001a92:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <HAL_TIM_Base_MspInit+0xa0>)
 8001a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001a9e:	e032      	b.n	8001b06 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM16)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1c      	ldr	r2, [pc, #112]	; (8001b18 <HAL_TIM_Base_MspInit+0xa4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d114      	bne.n	8001ad4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <HAL_TIM_Base_MspInit+0xa0>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	4a19      	ldr	r2, [pc, #100]	; (8001b14 <HAL_TIM_Base_MspInit+0xa0>)
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ab6:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <HAL_TIM_Base_MspInit+0xa0>)
 8001ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2019      	movs	r0, #25
 8001ac8:	f000 fb91 	bl	80021ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001acc:	2019      	movs	r0, #25
 8001ace:	f000 fbaa 	bl	8002226 <HAL_NVIC_EnableIRQ>
}
 8001ad2:	e018      	b.n	8001b06 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM17)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <HAL_TIM_Base_MspInit+0xa8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d113      	bne.n	8001b06 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001ade:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_TIM_Base_MspInit+0xa0>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae2:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <HAL_TIM_Base_MspInit+0xa0>)
 8001ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_TIM_Base_MspInit+0xa0>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	201a      	movs	r0, #26
 8001afc:	f000 fb77 	bl	80021ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001b00:	201a      	movs	r0, #26
 8001b02:	f000 fb90 	bl	8002226 <HAL_NVIC_EnableIRQ>
}
 8001b06:	bf00      	nop
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40000400 	.word	0x40000400
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40014400 	.word	0x40014400
 8001b1c:	40014800 	.word	0x40014800

08001b20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <HAL_TIM_MspPostInit+0x64>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d11c      	bne.n	8001b7c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_TIM_MspPostInit+0x68>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	4a10      	ldr	r2, [pc, #64]	; (8001b88 <HAL_TIM_MspPostInit+0x68>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_TIM_MspPostInit+0x68>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b5a:	2340      	movs	r3, #64	; 0x40
 8001b5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	4619      	mov	r1, r3
 8001b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b78:	f000 fd68 	bl	800264c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b7c:	bf00      	nop
 8001b7e:	3720      	adds	r7, #32
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40000400 	.word	0x40000400
 8001b88:	40021000 	.word	0x40021000

08001b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a17      	ldr	r2, [pc, #92]	; (8001c08 <HAL_UART_MspInit+0x7c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d128      	bne.n	8001c00 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_UART_MspInit+0x80>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	4a16      	ldr	r2, [pc, #88]	; (8001c0c <HAL_UART_MspInit+0x80>)
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bba:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_UART_MspInit+0x80>)
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_UART_MspInit+0x80>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	4a10      	ldr	r2, [pc, #64]	; (8001c0c <HAL_UART_MspInit+0x80>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <HAL_UART_MspInit+0x80>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bde:	230c      	movs	r3, #12
 8001be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bea:	2303      	movs	r3, #3
 8001bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bee:	2307      	movs	r3, #7
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfc:	f000 fd26 	bl	800264c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40004400 	.word	0x40004400
 8001c0c:	40021000 	.word	0x40021000

08001c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <NMI_Handler+0x4>

08001c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <HardFault_Handler+0x4>

08001c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <MemManage_Handler+0x4>

08001c22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c26:	e7fe      	b.n	8001c26 <BusFault_Handler+0x4>

08001c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <UsageFault_Handler+0x4>

08001c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c5c:	f000 f9a8 	bl	8001fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <DMA1_Channel4_IRQHandler+0x10>)
 8001c6a:	f000 fc0f 	bl	800248c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000270 	.word	0x20000270

08001c78 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <DMA1_Channel5_IRQHandler+0x10>)
 8001c7e:	f000 fc05 	bl	800248c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200003f0 	.word	0x200003f0

08001c8c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c92:	f003 f8b7 	bl	8004e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000438 	.word	0x20000438

08001ca0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001ca6:	f003 f8ad 	bl	8004e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200002b8 	.word	0x200002b8

08001cb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
	return 1;
 8001cb8:	2301      	movs	r3, #1
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_kill>:

int _kill(int pid, int sig)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cce:	f004 fd61 	bl	8006794 <__errno>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2216      	movs	r2, #22
 8001cd6:	601a      	str	r2, [r3, #0]
	return -1;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_exit>:

void _exit (int status)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ffe7 	bl	8001cc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cf6:	e7fe      	b.n	8001cf6 <_exit+0x12>

08001cf8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	e00a      	b.n	8001d20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d0a:	f3af 8000 	nop.w
 8001d0e:	4601      	mov	r1, r0
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	60ba      	str	r2, [r7, #8]
 8001d16:	b2ca      	uxtb	r2, r1
 8001d18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbf0      	blt.n	8001d0a <_read+0x12>
	}

return len;
 8001d28:	687b      	ldr	r3, [r7, #4]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e009      	b.n	8001d58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	60ba      	str	r2, [r7, #8]
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3301      	adds	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dbf1      	blt.n	8001d44 <_write+0x12>
	}
	return len;
 8001d60:	687b      	ldr	r3, [r7, #4]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_close>:

int _close(int file)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
	return -1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d92:	605a      	str	r2, [r3, #4]
	return 0;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <_isatty>:

int _isatty(int file)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
	return 1;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
	return 0;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <_sbrk+0x5c>)
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <_sbrk+0x60>)
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <_sbrk+0x64>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <_sbrk+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e04:	f004 fcc6 	bl	8006794 <__errno>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e12:	e009      	b.n	8001e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <_sbrk+0x64>)
 8001e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20018000 	.word	0x20018000
 8001e34:	00000400 	.word	0x00000400
 8001e38:	20000200 	.word	0x20000200
 8001e3c:	20000498 	.word	0x20000498

08001e40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <SystemInit+0x5c>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4a:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <SystemInit+0x5c>)
 8001e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <SystemInit+0x60>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a11      	ldr	r2, [pc, #68]	; (8001ea0 <SystemInit+0x60>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <SystemInit+0x60>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <SystemInit+0x60>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a0d      	ldr	r2, [pc, #52]	; (8001ea0 <SystemInit+0x60>)
 8001e6c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001e70:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001e74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <SystemInit+0x60>)
 8001e78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e7c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <SystemInit+0x60>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <SystemInit+0x60>)
 8001e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SystemInit+0x60>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed00 	.word	0xe000ed00
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001edc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ea8:	f7ff ffca 	bl	8001e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001eac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001eae:	e003      	b.n	8001eb8 <LoopCopyDataInit>

08001eb0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001eb2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001eb4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001eb6:	3104      	adds	r1, #4

08001eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001eb8:	480a      	ldr	r0, [pc, #40]	; (8001ee4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ebc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ebe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ec0:	d3f6      	bcc.n	8001eb0 <CopyDataInit>
	ldr	r2, =_sbss
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ec4:	e002      	b.n	8001ecc <LoopFillZerobss>

08001ec6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ec6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ec8:	f842 3b04 	str.w	r3, [r2], #4

08001ecc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <LoopForever+0x16>)
	cmp	r2, r3
 8001ece:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ed0:	d3f9      	bcc.n	8001ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ed2:	f004 fc65 	bl	80067a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ed6:	f7ff f98b 	bl	80011f0 <main>

08001eda <LoopForever>:

LoopForever:
    b LoopForever
 8001eda:	e7fe      	b.n	8001eda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001edc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001ee0:	08009a24 	.word	0x08009a24
	ldr	r0, =_sdata
 8001ee4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ee8:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001eec:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001ef0:	20000498 	.word	0x20000498

08001ef4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ef4:	e7fe      	b.n	8001ef4 <ADC1_2_IRQHandler>
	...

08001ef8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_Init+0x3c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <HAL_Init+0x3c>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0e:	2003      	movs	r0, #3
 8001f10:	f000 f962 	bl	80021d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f14:	2000      	movs	r0, #0
 8001f16:	f000 f80f 	bl	8001f38 <HAL_InitTick>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	71fb      	strb	r3, [r7, #7]
 8001f24:	e001      	b.n	8001f2a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f26:	f7ff fcc1 	bl	80018ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40022000 	.word	0x40022000

08001f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f44:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <HAL_InitTick+0x6c>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d023      	beq.n	8001f94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f4c:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <HAL_InitTick+0x70>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <HAL_InitTick+0x6c>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f96d 	bl	8002242 <HAL_SYSTICK_Config>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10f      	bne.n	8001f8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b0f      	cmp	r3, #15
 8001f72:	d809      	bhi.n	8001f88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f74:	2200      	movs	r2, #0
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f000 f937 	bl	80021ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f80:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <HAL_InitTick+0x74>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e007      	b.n	8001f98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	e004      	b.n	8001f98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	e001      	b.n	8001f98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000008 	.word	0x20000008
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	20000004 	.word	0x20000004

08001fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_IncTick+0x20>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	20000484 	.word	0x20000484

08001fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return uwTick;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_GetTick+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000484 	.word	0x20000484

08001ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff8:	f7ff ffee 	bl	8001fd8 <HAL_GetTick>
 8001ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d005      	beq.n	8002016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_Delay+0x44>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4413      	add	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002016:	bf00      	nop
 8002018:	f7ff ffde 	bl	8001fd8 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	429a      	cmp	r2, r3
 8002026:	d8f7      	bhi.n	8002018 <HAL_Delay+0x28>
  {
  }
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000008 	.word	0x20000008

08002038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002054:	4013      	ands	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206a:	4a04      	ldr	r2, [pc, #16]	; (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	60d3      	str	r3, [r2, #12]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <__NVIC_GetPriorityGrouping+0x18>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	0a1b      	lsrs	r3, r3, #8
 800208a:	f003 0307 	and.w	r3, r3, #7
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	db0b      	blt.n	80020c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	f003 021f 	and.w	r2, r3, #31
 80020b4:	4907      	ldr	r1, [pc, #28]	; (80020d4 <__NVIC_EnableIRQ+0x38>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2001      	movs	r0, #1
 80020be:	fa00 f202 	lsl.w	r2, r0, r2
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000e100 	.word	0xe000e100

080020d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	db0a      	blt.n	8002102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	490c      	ldr	r1, [pc, #48]	; (8002124 <__NVIC_SetPriority+0x4c>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	0112      	lsls	r2, r2, #4
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	440b      	add	r3, r1
 80020fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002100:	e00a      	b.n	8002118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4908      	ldr	r1, [pc, #32]	; (8002128 <__NVIC_SetPriority+0x50>)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	3b04      	subs	r3, #4
 8002110:	0112      	lsls	r2, r2, #4
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	440b      	add	r3, r1
 8002116:	761a      	strb	r2, [r3, #24]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000e100 	.word	0xe000e100
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f1c3 0307 	rsb	r3, r3, #7
 8002146:	2b04      	cmp	r3, #4
 8002148:	bf28      	it	cs
 800214a:	2304      	movcs	r3, #4
 800214c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3304      	adds	r3, #4
 8002152:	2b06      	cmp	r3, #6
 8002154:	d902      	bls.n	800215c <NVIC_EncodePriority+0x30>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3b03      	subs	r3, #3
 800215a:	e000      	b.n	800215e <NVIC_EncodePriority+0x32>
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	f04f 32ff 	mov.w	r2, #4294967295
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	401a      	ands	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002174:	f04f 31ff 	mov.w	r1, #4294967295
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	43d9      	mvns	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	4313      	orrs	r3, r2
         );
}
 8002186:	4618      	mov	r0, r3
 8002188:	3724      	adds	r7, #36	; 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a4:	d301      	bcc.n	80021aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00f      	b.n	80021ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <SysTick_Config+0x40>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b2:	210f      	movs	r1, #15
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	f7ff ff8e 	bl	80020d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <SysTick_Config+0x40>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <SysTick_Config+0x40>)
 80021c4:	2207      	movs	r2, #7
 80021c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	e000e010 	.word	0xe000e010

080021d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff29 	bl	8002038 <__NVIC_SetPriorityGrouping>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002200:	f7ff ff3e 	bl	8002080 <__NVIC_GetPriorityGrouping>
 8002204:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	6978      	ldr	r0, [r7, #20]
 800220c:	f7ff ff8e 	bl	800212c <NVIC_EncodePriority>
 8002210:	4602      	mov	r2, r0
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff5d 	bl	80020d8 <__NVIC_SetPriority>
}
 800221e:	bf00      	nop
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff31 	bl	800209c <__NVIC_EnableIRQ>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff ffa2 	bl	8002194 <SysTick_Config>
 8002250:	4603      	mov	r3, r0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e098      	b.n	80023a0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	4b4d      	ldr	r3, [pc, #308]	; (80023ac <HAL_DMA_Init+0x150>)
 8002276:	429a      	cmp	r2, r3
 8002278:	d80f      	bhi.n	800229a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	4b4b      	ldr	r3, [pc, #300]	; (80023b0 <HAL_DMA_Init+0x154>)
 8002282:	4413      	add	r3, r2
 8002284:	4a4b      	ldr	r2, [pc, #300]	; (80023b4 <HAL_DMA_Init+0x158>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	009a      	lsls	r2, r3, #2
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a48      	ldr	r2, [pc, #288]	; (80023b8 <HAL_DMA_Init+0x15c>)
 8002296:	641a      	str	r2, [r3, #64]	; 0x40
 8002298:	e00e      	b.n	80022b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	4b46      	ldr	r3, [pc, #280]	; (80023bc <HAL_DMA_Init+0x160>)
 80022a2:	4413      	add	r3, r2
 80022a4:	4a43      	ldr	r2, [pc, #268]	; (80023b4 <HAL_DMA_Init+0x158>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	009a      	lsls	r2, r3, #2
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a42      	ldr	r2, [pc, #264]	; (80023c0 <HAL_DMA_Init+0x164>)
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80022ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80022dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002312:	d039      	beq.n	8002388 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	4a27      	ldr	r2, [pc, #156]	; (80023b8 <HAL_DMA_Init+0x15c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d11a      	bne.n	8002354 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800231e:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <HAL_DMA_Init+0x168>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f003 031c 	and.w	r3, r3, #28
 800232a:	210f      	movs	r1, #15
 800232c:	fa01 f303 	lsl.w	r3, r1, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	4924      	ldr	r1, [pc, #144]	; (80023c4 <HAL_DMA_Init+0x168>)
 8002334:	4013      	ands	r3, r2
 8002336:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002338:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <HAL_DMA_Init+0x168>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6859      	ldr	r1, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002344:	f003 031c 	and.w	r3, r3, #28
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	491d      	ldr	r1, [pc, #116]	; (80023c4 <HAL_DMA_Init+0x168>)
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]
 8002352:	e019      	b.n	8002388 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002354:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <HAL_DMA_Init+0x16c>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235c:	f003 031c 	and.w	r3, r3, #28
 8002360:	210f      	movs	r1, #15
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	4917      	ldr	r1, [pc, #92]	; (80023c8 <HAL_DMA_Init+0x16c>)
 800236a:	4013      	ands	r3, r2
 800236c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800236e:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <HAL_DMA_Init+0x16c>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6859      	ldr	r1, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f003 031c 	and.w	r3, r3, #28
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	4911      	ldr	r1, [pc, #68]	; (80023c8 <HAL_DMA_Init+0x16c>)
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	40020407 	.word	0x40020407
 80023b0:	bffdfff8 	.word	0xbffdfff8
 80023b4:	cccccccd 	.word	0xcccccccd
 80023b8:	40020000 	.word	0x40020000
 80023bc:	bffdfbf8 	.word	0xbffdfbf8
 80023c0:	40020400 	.word	0x40020400
 80023c4:	400200a8 	.word	0x400200a8
 80023c8:	400204a8 	.word	0x400204a8

080023cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_DMA_Start_IT+0x20>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e04b      	b.n	8002484 <HAL_DMA_Start_IT+0xb8>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d13a      	bne.n	8002476 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0201 	bic.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f8e0 	bl	80025ea <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 020e 	orr.w	r2, r2, #14
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	e00f      	b.n	8002464 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0204 	bic.w	r2, r2, #4
 8002452:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 020a 	orr.w	r2, r2, #10
 8002462:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	e005      	b.n	8002482 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800247e:	2302      	movs	r3, #2
 8002480:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002482:	7dfb      	ldrb	r3, [r7, #23]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a8:	f003 031c 	and.w	r3, r3, #28
 80024ac:	2204      	movs	r2, #4
 80024ae:	409a      	lsls	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d026      	beq.n	8002506 <HAL_DMA_IRQHandler+0x7a>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d021      	beq.n	8002506 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d107      	bne.n	80024e0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0204 	bic.w	r2, r2, #4
 80024de:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	f003 021c 	and.w	r2, r3, #28
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	2104      	movs	r1, #4
 80024ee:	fa01 f202 	lsl.w	r2, r1, r2
 80024f2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d071      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002504:	e06c      	b.n	80025e0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f003 031c 	and.w	r3, r3, #28
 800250e:	2202      	movs	r2, #2
 8002510:	409a      	lsls	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d02e      	beq.n	8002578 <HAL_DMA_IRQHandler+0xec>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d029      	beq.n	8002578 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10b      	bne.n	800254a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 020a 	bic.w	r2, r2, #10
 8002540:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	f003 021c 	and.w	r2, r3, #28
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	2102      	movs	r1, #2
 8002558:	fa01 f202 	lsl.w	r2, r1, r2
 800255c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	2b00      	cmp	r3, #0
 800256c:	d038      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002576:	e033      	b.n	80025e0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	f003 031c 	and.w	r3, r3, #28
 8002580:	2208      	movs	r2, #8
 8002582:	409a      	lsls	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4013      	ands	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d02a      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x156>
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d025      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 020e 	bic.w	r2, r2, #14
 80025a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f003 021c 	and.w	r2, r3, #28
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	2101      	movs	r1, #1
 80025b4:	fa01 f202 	lsl.w	r2, r1, r2
 80025b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d004      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
}
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	f003 021c 	and.w	r2, r3, #28
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f202 	lsl.w	r2, r1, r2
 800260a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b10      	cmp	r3, #16
 800261a:	d108      	bne.n	800262e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800262c:	e007      	b.n	800263e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	60da      	str	r2, [r3, #12]
}
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265a:	e17f      	b.n	800295c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2101      	movs	r1, #1
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	4013      	ands	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8171 	beq.w	8002956 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d00b      	beq.n	8002694 <HAL_GPIO_Init+0x48>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d007      	beq.n	8002694 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002688:	2b11      	cmp	r3, #17
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b12      	cmp	r3, #18
 8002692:	d130      	bne.n	80026f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ca:	2201      	movs	r2, #1
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	f003 0201 	and.w	r2, r3, #1
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d118      	bne.n	8002734 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002708:	2201      	movs	r2, #1
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	08db      	lsrs	r3, r3, #3
 800271e:	f003 0201 	and.w	r2, r3, #1
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	2203      	movs	r2, #3
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x128>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b12      	cmp	r3, #18
 8002772:	d123      	bne.n	80027bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	08da      	lsrs	r2, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3208      	adds	r2, #8
 800277c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	220f      	movs	r2, #15
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	08da      	lsrs	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3208      	adds	r2, #8
 80027b6:	6939      	ldr	r1, [r7, #16]
 80027b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0203 	and.w	r2, r3, #3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80ac 	beq.w	8002956 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fe:	4b5f      	ldr	r3, [pc, #380]	; (800297c <HAL_GPIO_Init+0x330>)
 8002800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002802:	4a5e      	ldr	r2, [pc, #376]	; (800297c <HAL_GPIO_Init+0x330>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6613      	str	r3, [r2, #96]	; 0x60
 800280a:	4b5c      	ldr	r3, [pc, #368]	; (800297c <HAL_GPIO_Init+0x330>)
 800280c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002816:	4a5a      	ldr	r2, [pc, #360]	; (8002980 <HAL_GPIO_Init+0x334>)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3302      	adds	r3, #2
 800281e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002822:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	220f      	movs	r2, #15
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002840:	d025      	beq.n	800288e <HAL_GPIO_Init+0x242>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4f      	ldr	r2, [pc, #316]	; (8002984 <HAL_GPIO_Init+0x338>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01f      	beq.n	800288a <HAL_GPIO_Init+0x23e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4e      	ldr	r2, [pc, #312]	; (8002988 <HAL_GPIO_Init+0x33c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d019      	beq.n	8002886 <HAL_GPIO_Init+0x23a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4d      	ldr	r2, [pc, #308]	; (800298c <HAL_GPIO_Init+0x340>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d013      	beq.n	8002882 <HAL_GPIO_Init+0x236>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4c      	ldr	r2, [pc, #304]	; (8002990 <HAL_GPIO_Init+0x344>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00d      	beq.n	800287e <HAL_GPIO_Init+0x232>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4b      	ldr	r2, [pc, #300]	; (8002994 <HAL_GPIO_Init+0x348>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d007      	beq.n	800287a <HAL_GPIO_Init+0x22e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4a      	ldr	r2, [pc, #296]	; (8002998 <HAL_GPIO_Init+0x34c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d101      	bne.n	8002876 <HAL_GPIO_Init+0x22a>
 8002872:	2306      	movs	r3, #6
 8002874:	e00c      	b.n	8002890 <HAL_GPIO_Init+0x244>
 8002876:	2307      	movs	r3, #7
 8002878:	e00a      	b.n	8002890 <HAL_GPIO_Init+0x244>
 800287a:	2305      	movs	r3, #5
 800287c:	e008      	b.n	8002890 <HAL_GPIO_Init+0x244>
 800287e:	2304      	movs	r3, #4
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x244>
 8002882:	2303      	movs	r3, #3
 8002884:	e004      	b.n	8002890 <HAL_GPIO_Init+0x244>
 8002886:	2302      	movs	r3, #2
 8002888:	e002      	b.n	8002890 <HAL_GPIO_Init+0x244>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_GPIO_Init+0x244>
 800288e:	2300      	movs	r3, #0
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	f002 0203 	and.w	r2, r2, #3
 8002896:	0092      	lsls	r2, r2, #2
 8002898:	4093      	lsls	r3, r2
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028a0:	4937      	ldr	r1, [pc, #220]	; (8002980 <HAL_GPIO_Init+0x334>)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3302      	adds	r3, #2
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028ae:	4b3b      	ldr	r3, [pc, #236]	; (800299c <HAL_GPIO_Init+0x350>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028d2:	4a32      	ldr	r2, [pc, #200]	; (800299c <HAL_GPIO_Init+0x350>)
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80028d8:	4b30      	ldr	r3, [pc, #192]	; (800299c <HAL_GPIO_Init+0x350>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028fc:	4a27      	ldr	r2, [pc, #156]	; (800299c <HAL_GPIO_Init+0x350>)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002902:	4b26      	ldr	r3, [pc, #152]	; (800299c <HAL_GPIO_Init+0x350>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002926:	4a1d      	ldr	r2, [pc, #116]	; (800299c <HAL_GPIO_Init+0x350>)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_GPIO_Init+0x350>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002950:	4a12      	ldr	r2, [pc, #72]	; (800299c <HAL_GPIO_Init+0x350>)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3301      	adds	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	f47f ae78 	bne.w	800265c <HAL_GPIO_Init+0x10>
  }
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000
 8002980:	40010000 	.word	0x40010000
 8002984:	48000400 	.word	0x48000400
 8002988:	48000800 	.word	0x48000800
 800298c:	48000c00 	.word	0x48000c00
 8002990:	48001000 	.word	0x48001000
 8002994:	48001400 	.word	0x48001400
 8002998:	48001800 	.word	0x48001800
 800299c:	40010400 	.word	0x40010400

080029a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
 80029ac:	4613      	mov	r3, r2
 80029ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b0:	787b      	ldrb	r3, [r7, #1]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029b6:	887a      	ldrh	r2, [r7, #2]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029bc:	e002      	b.n	80029c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029be:	887a      	ldrh	r2, [r7, #2]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40007000 	.word	0x40007000

080029ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029fa:	d130      	bne.n	8002a5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029fc:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a08:	d038      	beq.n	8002a7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a12:	4a1e      	ldr	r2, [pc, #120]	; (8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2232      	movs	r2, #50	; 0x32
 8002a20:	fb02 f303 	mul.w	r3, r2, r3
 8002a24:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	0c9b      	lsrs	r3, r3, #18
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a30:	e002      	b.n	8002a38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a44:	d102      	bne.n	8002a4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f2      	bne.n	8002a32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a58:	d110      	bne.n	8002a7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e00f      	b.n	8002a7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6a:	d007      	beq.n	8002a7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a6c:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a74:	4a05      	ldr	r2, [pc, #20]	; (8002a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	20000000 	.word	0x20000000
 8002a94:	431bde83 	.word	0x431bde83

08002a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e3d4      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aaa:	4ba1      	ldr	r3, [pc, #644]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ab4:	4b9e      	ldr	r3, [pc, #632]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 80e4 	beq.w	8002c94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x4a>
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	f040 808b 	bne.w	8002bf0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	f040 8087 	bne.w	8002bf0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ae2:	4b93      	ldr	r3, [pc, #588]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_RCC_OscConfig+0x62>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e3ac      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1a      	ldr	r2, [r3, #32]
 8002afe:	4b8c      	ldr	r3, [pc, #560]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d004      	beq.n	8002b14 <HAL_RCC_OscConfig+0x7c>
 8002b0a:	4b89      	ldr	r3, [pc, #548]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b12:	e005      	b.n	8002b20 <HAL_RCC_OscConfig+0x88>
 8002b14:	4b86      	ldr	r3, [pc, #536]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1a:	091b      	lsrs	r3, r3, #4
 8002b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d223      	bcs.n	8002b6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fd41 	bl	80035b0 <RCC_SetFlashLatencyFromMSIRange>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e38d      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b38:	4b7d      	ldr	r3, [pc, #500]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a7c      	ldr	r2, [pc, #496]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002b3e:	f043 0308 	orr.w	r3, r3, #8
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b7a      	ldr	r3, [pc, #488]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4977      	ldr	r1, [pc, #476]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b56:	4b76      	ldr	r3, [pc, #472]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	4972      	ldr	r1, [pc, #456]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
 8002b6a:	e025      	b.n	8002bb8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b6c:	4b70      	ldr	r3, [pc, #448]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a6f      	ldr	r2, [pc, #444]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002b72:	f043 0308 	orr.w	r3, r3, #8
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b6d      	ldr	r3, [pc, #436]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	496a      	ldr	r1, [pc, #424]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b8a:	4b69      	ldr	r3, [pc, #420]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	4965      	ldr	r1, [pc, #404]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d109      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fd01 	bl	80035b0 <RCC_SetFlashLatencyFromMSIRange>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e34d      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bb8:	f000 fc36 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b5c      	ldr	r3, [pc, #368]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	495a      	ldr	r1, [pc, #360]	; (8002d34 <HAL_RCC_OscConfig+0x29c>)
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd4:	4a58      	ldr	r2, [pc, #352]	; (8002d38 <HAL_RCC_OscConfig+0x2a0>)
 8002bd6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bd8:	4b58      	ldr	r3, [pc, #352]	; (8002d3c <HAL_RCC_OscConfig+0x2a4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff f9ab 	bl	8001f38 <HAL_InitTick>
 8002be2:	4603      	mov	r3, r0
 8002be4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d052      	beq.n	8002c92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	e331      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d032      	beq.n	8002c5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bf8:	4b4d      	ldr	r3, [pc, #308]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a4c      	ldr	r2, [pc, #304]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c04:	f7ff f9e8 	bl	8001fd8 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c0c:	f7ff f9e4 	bl	8001fd8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e31a      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c1e:	4b44      	ldr	r3, [pc, #272]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c2a:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a40      	ldr	r2, [pc, #256]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002c30:	f043 0308 	orr.w	r3, r3, #8
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b3e      	ldr	r3, [pc, #248]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	493b      	ldr	r1, [pc, #236]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c48:	4b39      	ldr	r3, [pc, #228]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	4936      	ldr	r1, [pc, #216]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
 8002c5c:	e01a      	b.n	8002c94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c5e:	4b34      	ldr	r3, [pc, #208]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a33      	ldr	r2, [pc, #204]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c6a:	f7ff f9b5 	bl	8001fd8 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c72:	f7ff f9b1 	bl	8001fd8 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e2e7      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c84:	4b2a      	ldr	r3, [pc, #168]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1f0      	bne.n	8002c72 <HAL_RCC_OscConfig+0x1da>
 8002c90:	e000      	b.n	8002c94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d074      	beq.n	8002d8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d005      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x21a>
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b0c      	cmp	r3, #12
 8002caa:	d10e      	bne.n	8002cca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d10b      	bne.n	8002cca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb2:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d064      	beq.n	8002d88 <HAL_RCC_OscConfig+0x2f0>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d160      	bne.n	8002d88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e2c4      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x24a>
 8002cd4:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a15      	ldr	r2, [pc, #84]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	e01d      	b.n	8002d1e <HAL_RCC_OscConfig+0x286>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cea:	d10c      	bne.n	8002d06 <HAL_RCC_OscConfig+0x26e>
 8002cec:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002cf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a0c      	ldr	r2, [pc, #48]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	e00b      	b.n	8002d1e <HAL_RCC_OscConfig+0x286>
 8002d06:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a06      	ldr	r2, [pc, #24]	; (8002d30 <HAL_RCC_OscConfig+0x298>)
 8002d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d01c      	beq.n	8002d60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7ff f957 	bl	8001fd8 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d2c:	e011      	b.n	8002d52 <HAL_RCC_OscConfig+0x2ba>
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	080095ec 	.word	0x080095ec
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d40:	f7ff f94a 	bl	8001fd8 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e280      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d52:	4baf      	ldr	r3, [pc, #700]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x2a8>
 8002d5e:	e014      	b.n	8002d8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7ff f93a 	bl	8001fd8 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7ff f936 	bl	8001fd8 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e26c      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d7a:	4ba5      	ldr	r3, [pc, #660]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x2d0>
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d060      	beq.n	8002e58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_OscConfig+0x310>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	d119      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d116      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da8:	4b99      	ldr	r3, [pc, #612]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x328>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e249      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc0:	4b93      	ldr	r3, [pc, #588]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	061b      	lsls	r3, r3, #24
 8002dce:	4990      	ldr	r1, [pc, #576]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd4:	e040      	b.n	8002e58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d023      	beq.n	8002e26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dde:	4b8c      	ldr	r3, [pc, #560]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a8b      	ldr	r2, [pc, #556]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7ff f8f5 	bl	8001fd8 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df2:	f7ff f8f1 	bl	8001fd8 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e227      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e04:	4b82      	ldr	r3, [pc, #520]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e10:	4b7f      	ldr	r3, [pc, #508]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	061b      	lsls	r3, r3, #24
 8002e1e:	497c      	ldr	r1, [pc, #496]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]
 8002e24:	e018      	b.n	8002e58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e26:	4b7a      	ldr	r3, [pc, #488]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a79      	ldr	r2, [pc, #484]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7ff f8d1 	bl	8001fd8 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3a:	f7ff f8cd 	bl	8001fd8 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e203      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e4c:	4b70      	ldr	r3, [pc, #448]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d03c      	beq.n	8002ede <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01c      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e6c:	4b68      	ldr	r3, [pc, #416]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e72:	4a67      	ldr	r2, [pc, #412]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7c:	f7ff f8ac 	bl	8001fd8 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e84:	f7ff f8a8 	bl	8001fd8 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e1de      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e96:	4b5e      	ldr	r3, [pc, #376]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0ef      	beq.n	8002e84 <HAL_RCC_OscConfig+0x3ec>
 8002ea4:	e01b      	b.n	8002ede <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea6:	4b5a      	ldr	r3, [pc, #360]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eac:	4a58      	ldr	r2, [pc, #352]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002eae:	f023 0301 	bic.w	r3, r3, #1
 8002eb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7ff f88f 	bl	8001fd8 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ebe:	f7ff f88b 	bl	8001fd8 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e1c1      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ed0:	4b4f      	ldr	r3, [pc, #316]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ef      	bne.n	8002ebe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80a6 	beq.w	8003038 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eec:	2300      	movs	r3, #0
 8002eee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ef0:	4b47      	ldr	r3, [pc, #284]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10d      	bne.n	8002f18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efc:	4b44      	ldr	r3, [pc, #272]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f00:	4a43      	ldr	r2, [pc, #268]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f06:	6593      	str	r3, [r2, #88]	; 0x58
 8002f08:	4b41      	ldr	r3, [pc, #260]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f14:	2301      	movs	r3, #1
 8002f16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f18:	4b3e      	ldr	r3, [pc, #248]	; (8003014 <HAL_RCC_OscConfig+0x57c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d118      	bne.n	8002f56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f24:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <HAL_RCC_OscConfig+0x57c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a3a      	ldr	r2, [pc, #232]	; (8003014 <HAL_RCC_OscConfig+0x57c>)
 8002f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f30:	f7ff f852 	bl	8001fd8 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f38:	f7ff f84e 	bl	8001fd8 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e184      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f4a:	4b32      	ldr	r3, [pc, #200]	; (8003014 <HAL_RCC_OscConfig+0x57c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d108      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4d8>
 8002f5e:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f64:	4a2a      	ldr	r2, [pc, #168]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f6e:	e024      	b.n	8002fba <HAL_RCC_OscConfig+0x522>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b05      	cmp	r3, #5
 8002f76:	d110      	bne.n	8002f9a <HAL_RCC_OscConfig+0x502>
 8002f78:	4b25      	ldr	r3, [pc, #148]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	4a24      	ldr	r2, [pc, #144]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002f80:	f043 0304 	orr.w	r3, r3, #4
 8002f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f88:	4b21      	ldr	r3, [pc, #132]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8e:	4a20      	ldr	r2, [pc, #128]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f98:	e00f      	b.n	8002fba <HAL_RCC_OscConfig+0x522>
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa0:	4a1b      	ldr	r2, [pc, #108]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002faa:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb0:	4a17      	ldr	r2, [pc, #92]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002fb2:	f023 0304 	bic.w	r3, r3, #4
 8002fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d016      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc2:	f7ff f809 	bl	8001fd8 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7ff f805 	bl	8001fd8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e139      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_RCC_OscConfig+0x578>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0ed      	beq.n	8002fca <HAL_RCC_OscConfig+0x532>
 8002fee:	e01a      	b.n	8003026 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7fe fff2 	bl	8001fd8 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ff6:	e00f      	b.n	8003018 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff8:	f7fe ffee 	bl	8001fd8 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f241 3288 	movw	r2, #5000	; 0x1388
 8003006:	4293      	cmp	r3, r2
 8003008:	d906      	bls.n	8003018 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e122      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003018:	4b90      	ldr	r3, [pc, #576]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1e8      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003026:	7ffb      	ldrb	r3, [r7, #31]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d105      	bne.n	8003038 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800302c:	4b8b      	ldr	r3, [pc, #556]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 800302e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003030:	4a8a      	ldr	r2, [pc, #552]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 8003032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003036:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8108 	beq.w	8003252 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	2b02      	cmp	r3, #2
 8003048:	f040 80d0 	bne.w	80031ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800304c:	4b83      	ldr	r3, [pc, #524]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f003 0203 	and.w	r2, r3, #3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	429a      	cmp	r2, r3
 800305e:	d130      	bne.n	80030c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	3b01      	subs	r3, #1
 800306c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d127      	bne.n	80030c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d11f      	bne.n	80030c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800308c:	2a07      	cmp	r2, #7
 800308e:	bf14      	ite	ne
 8003090:	2201      	movne	r2, #1
 8003092:	2200      	moveq	r2, #0
 8003094:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003096:	4293      	cmp	r3, r2
 8003098:	d113      	bne.n	80030c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a4:	085b      	lsrs	r3, r3, #1
 80030a6:	3b01      	subs	r3, #1
 80030a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d109      	bne.n	80030c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	085b      	lsrs	r3, r3, #1
 80030ba:	3b01      	subs	r3, #1
 80030bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d06e      	beq.n	80031a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2b0c      	cmp	r3, #12
 80030c6:	d069      	beq.n	800319c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030c8:	4b64      	ldr	r3, [pc, #400]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d105      	bne.n	80030e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030d4:	4b61      	ldr	r3, [pc, #388]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0b7      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030e4:	4b5d      	ldr	r3, [pc, #372]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a5c      	ldr	r2, [pc, #368]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 80030ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030f0:	f7fe ff72 	bl	8001fd8 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fe ff6e 	bl	8001fd8 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e0a4      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800310a:	4b54      	ldr	r3, [pc, #336]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003116:	4b51      	ldr	r3, [pc, #324]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	4b51      	ldr	r3, [pc, #324]	; (8003260 <HAL_RCC_OscConfig+0x7c8>)
 800311c:	4013      	ands	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003126:	3a01      	subs	r2, #1
 8003128:	0112      	lsls	r2, r2, #4
 800312a:	4311      	orrs	r1, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003130:	0212      	lsls	r2, r2, #8
 8003132:	4311      	orrs	r1, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003138:	0852      	lsrs	r2, r2, #1
 800313a:	3a01      	subs	r2, #1
 800313c:	0552      	lsls	r2, r2, #21
 800313e:	4311      	orrs	r1, r2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003144:	0852      	lsrs	r2, r2, #1
 8003146:	3a01      	subs	r2, #1
 8003148:	0652      	lsls	r2, r2, #25
 800314a:	4311      	orrs	r1, r2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003150:	0912      	lsrs	r2, r2, #4
 8003152:	0452      	lsls	r2, r2, #17
 8003154:	430a      	orrs	r2, r1
 8003156:	4941      	ldr	r1, [pc, #260]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800315c:	4b3f      	ldr	r3, [pc, #252]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a3e      	ldr	r2, [pc, #248]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 8003162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003166:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003168:	4b3c      	ldr	r3, [pc, #240]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4a3b      	ldr	r2, [pc, #236]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 800316e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003172:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003174:	f7fe ff30 	bl	8001fd8 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317c:	f7fe ff2c 	bl	8001fd8 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e062      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318e:	4b33      	ldr	r3, [pc, #204]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800319a:	e05a      	b.n	8003252 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e059      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a0:	4b2e      	ldr	r3, [pc, #184]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d152      	bne.n	8003252 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031ac:	4b2b      	ldr	r3, [pc, #172]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a2a      	ldr	r2, [pc, #168]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 80031b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031b8:	4b28      	ldr	r3, [pc, #160]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4a27      	ldr	r2, [pc, #156]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 80031be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031c4:	f7fe ff08 	bl	8001fd8 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031cc:	f7fe ff04 	bl	8001fd8 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e03a      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031de:	4b1f      	ldr	r3, [pc, #124]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x734>
 80031ea:	e032      	b.n	8003252 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b0c      	cmp	r3, #12
 80031f0:	d02d      	beq.n	800324e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f2:	4b1a      	ldr	r3, [pc, #104]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a19      	ldr	r2, [pc, #100]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 80031f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031fc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80031fe:	4b17      	ldr	r3, [pc, #92]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d105      	bne.n	8003216 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800320a:	4b14      	ldr	r3, [pc, #80]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	4a13      	ldr	r2, [pc, #76]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 8003210:	f023 0303 	bic.w	r3, r3, #3
 8003214:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003216:	4b11      	ldr	r3, [pc, #68]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	4a10      	ldr	r2, [pc, #64]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 800321c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003224:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003226:	f7fe fed7 	bl	8001fd8 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322e:	f7fe fed3 	bl	8001fd8 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e009      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <HAL_RCC_OscConfig+0x7c4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f0      	bne.n	800322e <HAL_RCC_OscConfig+0x796>
 800324c:	e001      	b.n	8003252 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3720      	adds	r7, #32
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40021000 	.word	0x40021000
 8003260:	f99d808c 	.word	0xf99d808c

08003264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0c8      	b.n	800340a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003278:	4b66      	ldr	r3, [pc, #408]	; (8003414 <HAL_RCC_ClockConfig+0x1b0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d910      	bls.n	80032a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b63      	ldr	r3, [pc, #396]	; (8003414 <HAL_RCC_ClockConfig+0x1b0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 0207 	bic.w	r2, r3, #7
 800328e:	4961      	ldr	r1, [pc, #388]	; (8003414 <HAL_RCC_ClockConfig+0x1b0>)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003296:	4b5f      	ldr	r3, [pc, #380]	; (8003414 <HAL_RCC_ClockConfig+0x1b0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0b0      	b.n	800340a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d04c      	beq.n	800334e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d107      	bne.n	80032cc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032bc:	4b56      	ldr	r3, [pc, #344]	; (8003418 <HAL_RCC_ClockConfig+0x1b4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d121      	bne.n	800330c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e09e      	b.n	800340a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d107      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d4:	4b50      	ldr	r3, [pc, #320]	; (8003418 <HAL_RCC_ClockConfig+0x1b4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d115      	bne.n	800330c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e092      	b.n	800340a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d107      	bne.n	80032fc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032ec:	4b4a      	ldr	r3, [pc, #296]	; (8003418 <HAL_RCC_ClockConfig+0x1b4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d109      	bne.n	800330c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e086      	b.n	800340a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032fc:	4b46      	ldr	r3, [pc, #280]	; (8003418 <HAL_RCC_ClockConfig+0x1b4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e07e      	b.n	800340a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800330c:	4b42      	ldr	r3, [pc, #264]	; (8003418 <HAL_RCC_ClockConfig+0x1b4>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f023 0203 	bic.w	r2, r3, #3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	493f      	ldr	r1, [pc, #252]	; (8003418 <HAL_RCC_ClockConfig+0x1b4>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800331e:	f7fe fe5b 	bl	8001fd8 <HAL_GetTick>
 8003322:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003324:	e00a      	b.n	800333c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003326:	f7fe fe57 	bl	8001fd8 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	f241 3288 	movw	r2, #5000	; 0x1388
 8003334:	4293      	cmp	r3, r2
 8003336:	d901      	bls.n	800333c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e066      	b.n	800340a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333c:	4b36      	ldr	r3, [pc, #216]	; (8003418 <HAL_RCC_ClockConfig+0x1b4>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 020c 	and.w	r2, r3, #12
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	429a      	cmp	r2, r3
 800334c:	d1eb      	bne.n	8003326 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d008      	beq.n	800336c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800335a:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <HAL_RCC_ClockConfig+0x1b4>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	492c      	ldr	r1, [pc, #176]	; (8003418 <HAL_RCC_ClockConfig+0x1b4>)
 8003368:	4313      	orrs	r3, r2
 800336a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800336c:	4b29      	ldr	r3, [pc, #164]	; (8003414 <HAL_RCC_ClockConfig+0x1b0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d210      	bcs.n	800339c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b26      	ldr	r3, [pc, #152]	; (8003414 <HAL_RCC_ClockConfig+0x1b0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 0207 	bic.w	r2, r3, #7
 8003382:	4924      	ldr	r1, [pc, #144]	; (8003414 <HAL_RCC_ClockConfig+0x1b0>)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <HAL_RCC_ClockConfig+0x1b0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e036      	b.n	800340a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <HAL_RCC_ClockConfig+0x1b4>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4918      	ldr	r1, [pc, #96]	; (8003418 <HAL_RCC_ClockConfig+0x1b4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c6:	4b14      	ldr	r3, [pc, #80]	; (8003418 <HAL_RCC_ClockConfig+0x1b4>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4910      	ldr	r1, [pc, #64]	; (8003418 <HAL_RCC_ClockConfig+0x1b4>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033da:	f000 f825 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80033de:	4602      	mov	r2, r0
 80033e0:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <HAL_RCC_ClockConfig+0x1b4>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	490c      	ldr	r1, [pc, #48]	; (800341c <HAL_RCC_ClockConfig+0x1b8>)
 80033ec:	5ccb      	ldrb	r3, [r1, r3]
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	fa22 f303 	lsr.w	r3, r2, r3
 80033f6:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033fa:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <HAL_RCC_ClockConfig+0x1c0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fe fd9a 	bl	8001f38 <HAL_InitTick>
 8003404:	4603      	mov	r3, r0
 8003406:	72fb      	strb	r3, [r7, #11]

  return status;
 8003408:	7afb      	ldrb	r3, [r7, #11]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40022000 	.word	0x40022000
 8003418:	40021000 	.word	0x40021000
 800341c:	080095ec 	.word	0x080095ec
 8003420:	20000000 	.word	0x20000000
 8003424:	20000004 	.word	0x20000004

08003428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	; 0x24
 800342c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003436:	4b3e      	ldr	r3, [pc, #248]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003440:	4b3b      	ldr	r3, [pc, #236]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x34>
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2b0c      	cmp	r3, #12
 8003454:	d121      	bne.n	800349a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d11e      	bne.n	800349a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800345c:	4b34      	ldr	r3, [pc, #208]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d107      	bne.n	8003478 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003468:	4b31      	ldr	r3, [pc, #196]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 800346a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	e005      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003478:	4b2d      	ldr	r3, [pc, #180]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003484:	4a2b      	ldr	r2, [pc, #172]	; (8003534 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10d      	bne.n	80034b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b04      	cmp	r3, #4
 800349e:	d102      	bne.n	80034a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034a0:	4b25      	ldr	r3, [pc, #148]	; (8003538 <HAL_RCC_GetSysClockFreq+0x110>)
 80034a2:	61bb      	str	r3, [r7, #24]
 80034a4:	e004      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034ac:	4b23      	ldr	r3, [pc, #140]	; (800353c <HAL_RCC_GetSysClockFreq+0x114>)
 80034ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b0c      	cmp	r3, #12
 80034b4:	d134      	bne.n	8003520 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034b6:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d003      	beq.n	80034ce <HAL_RCC_GetSysClockFreq+0xa6>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d003      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0xac>
 80034cc:	e005      	b.n	80034da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034ce:	4b1a      	ldr	r3, [pc, #104]	; (8003538 <HAL_RCC_GetSysClockFreq+0x110>)
 80034d0:	617b      	str	r3, [r7, #20]
      break;
 80034d2:	e005      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034d4:	4b19      	ldr	r3, [pc, #100]	; (800353c <HAL_RCC_GetSysClockFreq+0x114>)
 80034d6:	617b      	str	r3, [r7, #20]
      break;
 80034d8:	e002      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	617b      	str	r3, [r7, #20]
      break;
 80034de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034e0:	4b13      	ldr	r3, [pc, #76]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	091b      	lsrs	r3, r3, #4
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	3301      	adds	r3, #1
 80034ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034ee:	4b10      	ldr	r3, [pc, #64]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	fb02 f203 	mul.w	r2, r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	fbb2 f3f3 	udiv	r3, r2, r3
 8003504:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003506:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	0e5b      	lsrs	r3, r3, #25
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	3301      	adds	r3, #1
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003520:	69bb      	ldr	r3, [r7, #24]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3724      	adds	r7, #36	; 0x24
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	08009604 	.word	0x08009604
 8003538:	00f42400 	.word	0x00f42400
 800353c:	007a1200 	.word	0x007a1200

08003540 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003544:	4b03      	ldr	r3, [pc, #12]	; (8003554 <HAL_RCC_GetHCLKFreq+0x14>)
 8003546:	681b      	ldr	r3, [r3, #0]
}
 8003548:	4618      	mov	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	20000000 	.word	0x20000000

08003558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800355c:	f7ff fff0 	bl	8003540 <HAL_RCC_GetHCLKFreq>
 8003560:	4602      	mov	r2, r0
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	4904      	ldr	r1, [pc, #16]	; (8003580 <HAL_RCC_GetPCLK1Freq+0x28>)
 800356e:	5ccb      	ldrb	r3, [r1, r3]
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003578:	4618      	mov	r0, r3
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40021000 	.word	0x40021000
 8003580:	080095fc 	.word	0x080095fc

08003584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003588:	f7ff ffda 	bl	8003540 <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	0adb      	lsrs	r3, r3, #11
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4904      	ldr	r1, [pc, #16]	; (80035ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	080095fc 	.word	0x080095fc

080035b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035bc:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035c8:	f7ff fa02 	bl	80029d0 <HAL_PWREx_GetVoltageRange>
 80035cc:	6178      	str	r0, [r7, #20]
 80035ce:	e014      	b.n	80035fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035d0:	4b25      	ldr	r3, [pc, #148]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	4a24      	ldr	r2, [pc, #144]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035da:	6593      	str	r3, [r2, #88]	; 0x58
 80035dc:	4b22      	ldr	r3, [pc, #136]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035e8:	f7ff f9f2 	bl	80029d0 <HAL_PWREx_GetVoltageRange>
 80035ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035ee:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003600:	d10b      	bne.n	800361a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b80      	cmp	r3, #128	; 0x80
 8003606:	d919      	bls.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2ba0      	cmp	r3, #160	; 0xa0
 800360c:	d902      	bls.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800360e:	2302      	movs	r3, #2
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	e013      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003614:	2301      	movs	r3, #1
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	e010      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b80      	cmp	r3, #128	; 0x80
 800361e:	d902      	bls.n	8003626 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003620:	2303      	movs	r3, #3
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	e00a      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b80      	cmp	r3, #128	; 0x80
 800362a:	d102      	bne.n	8003632 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800362c:	2302      	movs	r3, #2
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	e004      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b70      	cmp	r3, #112	; 0x70
 8003636:	d101      	bne.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003638:	2301      	movs	r3, #1
 800363a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f023 0207 	bic.w	r2, r3, #7
 8003644:	4909      	ldr	r1, [pc, #36]	; (800366c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800364c:	4b07      	ldr	r3, [pc, #28]	; (800366c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	429a      	cmp	r2, r3
 8003658:	d001      	beq.n	800365e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	40022000 	.word	0x40022000

08003670 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003678:	2300      	movs	r3, #0
 800367a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800367c:	2300      	movs	r3, #0
 800367e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003688:	2b00      	cmp	r3, #0
 800368a:	d041      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003690:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003694:	d02a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003696:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800369a:	d824      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800369c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036a0:	d008      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036a6:	d81e      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b0:	d010      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036b2:	e018      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036b4:	4b86      	ldr	r3, [pc, #536]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4a85      	ldr	r2, [pc, #532]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036c0:	e015      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fabb 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036d2:	e00c      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3320      	adds	r3, #32
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fba6 	bl	8003e2c <RCCEx_PLLSAI2_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036e4:	e003      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	74fb      	strb	r3, [r7, #19]
      break;
 80036ea:	e000      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ee:	7cfb      	ldrb	r3, [r7, #19]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036f4:	4b76      	ldr	r3, [pc, #472]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003702:	4973      	ldr	r1, [pc, #460]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800370a:	e001      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d041      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003720:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003724:	d02a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003726:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800372a:	d824      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800372c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003730:	d008      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003736:	d81e      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800373c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003740:	d010      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003742:	e018      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003744:	4b62      	ldr	r3, [pc, #392]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a61      	ldr	r2, [pc, #388]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003750:	e015      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3304      	adds	r3, #4
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fa73 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003762:	e00c      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3320      	adds	r3, #32
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fb5e 	bl	8003e2c <RCCEx_PLLSAI2_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003774:	e003      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	74fb      	strb	r3, [r7, #19]
      break;
 800377a:	e000      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800377c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800377e:	7cfb      	ldrb	r3, [r7, #19]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10b      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003784:	4b52      	ldr	r3, [pc, #328]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003792:	494f      	ldr	r1, [pc, #316]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800379a:	e001      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80a0 	beq.w	80038ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ae:	2300      	movs	r3, #0
 80037b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037b2:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037c2:	2300      	movs	r3, #0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00d      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c8:	4b41      	ldr	r3, [pc, #260]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	4a40      	ldr	r2, [pc, #256]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d2:	6593      	str	r3, [r2, #88]	; 0x58
 80037d4:	4b3e      	ldr	r3, [pc, #248]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e0:	2301      	movs	r3, #1
 80037e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037e4:	4b3b      	ldr	r3, [pc, #236]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a3a      	ldr	r2, [pc, #232]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037f0:	f7fe fbf2 	bl	8001fd8 <HAL_GetTick>
 80037f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037f6:	e009      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f8:	f7fe fbee 	bl	8001fd8 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d902      	bls.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	74fb      	strb	r3, [r7, #19]
        break;
 800380a:	e005      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800380c:	4b31      	ldr	r3, [pc, #196]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0ef      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d15c      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800381e:	4b2c      	ldr	r3, [pc, #176]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003828:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01f      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	429a      	cmp	r2, r3
 800383a:	d019      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800383c:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003846:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003848:	4b21      	ldr	r3, [pc, #132]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	4a20      	ldr	r2, [pc, #128]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003858:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385e:	4a1c      	ldr	r2, [pc, #112]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003868:	4a19      	ldr	r2, [pc, #100]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d016      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387a:	f7fe fbad 	bl	8001fd8 <HAL_GetTick>
 800387e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003880:	e00b      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003882:	f7fe fba9 	bl	8001fd8 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003890:	4293      	cmp	r3, r2
 8003892:	d902      	bls.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	74fb      	strb	r3, [r7, #19]
            break;
 8003898:	e006      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800389a:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0ec      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038a8:	7cfb      	ldrb	r3, [r7, #19]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038be:	4904      	ldr	r1, [pc, #16]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038c6:	e009      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	74bb      	strb	r3, [r7, #18]
 80038cc:	e006      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80038ce:	bf00      	nop
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038dc:	7c7b      	ldrb	r3, [r7, #17]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d105      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e2:	4b9e      	ldr	r3, [pc, #632]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e6:	4a9d      	ldr	r2, [pc, #628]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038fa:	4b98      	ldr	r3, [pc, #608]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003900:	f023 0203 	bic.w	r2, r3, #3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	4994      	ldr	r1, [pc, #592]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800391c:	4b8f      	ldr	r3, [pc, #572]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	f023 020c 	bic.w	r2, r3, #12
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392a:	498c      	ldr	r1, [pc, #560]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800393e:	4b87      	ldr	r3, [pc, #540]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003944:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	4983      	ldr	r1, [pc, #524]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003960:	4b7e      	ldr	r3, [pc, #504]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003966:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	497b      	ldr	r1, [pc, #492]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0310 	and.w	r3, r3, #16
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003982:	4b76      	ldr	r3, [pc, #472]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003990:	4972      	ldr	r1, [pc, #456]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039a4:	4b6d      	ldr	r3, [pc, #436]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b2:	496a      	ldr	r1, [pc, #424]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039c6:	4b65      	ldr	r3, [pc, #404]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d4:	4961      	ldr	r1, [pc, #388]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039e8:	4b5c      	ldr	r3, [pc, #368]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f6:	4959      	ldr	r1, [pc, #356]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a0a:	4b54      	ldr	r3, [pc, #336]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a18:	4950      	ldr	r1, [pc, #320]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a2c:	4b4b      	ldr	r3, [pc, #300]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3a:	4948      	ldr	r1, [pc, #288]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a4e:	4b43      	ldr	r3, [pc, #268]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5c:	493f      	ldr	r1, [pc, #252]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d028      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a70:	4b3a      	ldr	r3, [pc, #232]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a7e:	4937      	ldr	r1, [pc, #220]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a8e:	d106      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a90:	4b32      	ldr	r3, [pc, #200]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4a31      	ldr	r2, [pc, #196]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a9a:	60d3      	str	r3, [r2, #12]
 8003a9c:	e011      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aa6:	d10c      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	2101      	movs	r1, #1
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 f8c8 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ab8:	7cfb      	ldrb	r3, [r7, #19]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d028      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ace:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003adc:	491f      	ldr	r1, [pc, #124]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aec:	d106      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aee:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	4a1a      	ldr	r2, [pc, #104]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003af8:	60d3      	str	r3, [r2, #12]
 8003afa:	e011      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 f899 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b16:	7cfb      	ldrb	r3, [r7, #19]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b1c:	7cfb      	ldrb	r3, [r7, #19]
 8003b1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d02b      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3a:	4908      	ldr	r1, [pc, #32]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b4a:	d109      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b4c:	4b03      	ldr	r3, [pc, #12]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4a02      	ldr	r2, [pc, #8]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b56:	60d3      	str	r3, [r2, #12]
 8003b58:	e014      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b68:	d10c      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	2101      	movs	r1, #1
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 f867 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 8003b76:	4603      	mov	r3, r0
 8003b78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b7a:	7cfb      	ldrb	r3, [r7, #19]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b80:	7cfb      	ldrb	r3, [r7, #19]
 8003b82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d02f      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b90:	4b2b      	ldr	r3, [pc, #172]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b9e:	4928      	ldr	r1, [pc, #160]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003baa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bae:	d10d      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	2102      	movs	r1, #2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f844 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bc0:	7cfb      	ldrb	r3, [r7, #19]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d014      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bc6:	7cfb      	ldrb	r3, [r7, #19]
 8003bc8:	74bb      	strb	r3, [r7, #18]
 8003bca:	e011      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3320      	adds	r3, #32
 8003bda:	2102      	movs	r1, #2
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 f925 	bl	8003e2c <RCCEx_PLLSAI2_Config>
 8003be2:	4603      	mov	r3, r0
 8003be4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003be6:	7cfb      	ldrb	r3, [r7, #19]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bec:	7cfb      	ldrb	r3, [r7, #19]
 8003bee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bfc:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c0a:	490d      	ldr	r1, [pc, #52]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c2e:	4904      	ldr	r1, [pc, #16]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c36:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021000 	.word	0x40021000

08003c44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c52:	4b75      	ldr	r3, [pc, #468]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d018      	beq.n	8003c90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c5e:	4b72      	ldr	r3, [pc, #456]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0203 	and.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d10d      	bne.n	8003c8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
       ||
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c76:	4b6c      	ldr	r3, [pc, #432]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
       ||
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d047      	beq.n	8003d1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
 8003c8e:	e044      	b.n	8003d1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d018      	beq.n	8003cca <RCCEx_PLLSAI1_Config+0x86>
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d825      	bhi.n	8003ce8 <RCCEx_PLLSAI1_Config+0xa4>
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d002      	beq.n	8003ca6 <RCCEx_PLLSAI1_Config+0x62>
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d009      	beq.n	8003cb8 <RCCEx_PLLSAI1_Config+0x74>
 8003ca4:	e020      	b.n	8003ce8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ca6:	4b60      	ldr	r3, [pc, #384]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d11d      	bne.n	8003cee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb6:	e01a      	b.n	8003cee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cb8:	4b5b      	ldr	r3, [pc, #364]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d116      	bne.n	8003cf2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc8:	e013      	b.n	8003cf2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cca:	4b57      	ldr	r3, [pc, #348]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10f      	bne.n	8003cf6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cd6:	4b54      	ldr	r3, [pc, #336]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ce6:	e006      	b.n	8003cf6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
      break;
 8003cec:	e004      	b.n	8003cf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cee:	bf00      	nop
 8003cf0:	e002      	b.n	8003cf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e000      	b.n	8003cf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cf6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10d      	bne.n	8003d1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cfe:	4b4a      	ldr	r3, [pc, #296]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	430b      	orrs	r3, r1
 8003d14:	4944      	ldr	r1, [pc, #272]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d17d      	bne.n	8003e1c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d20:	4b41      	ldr	r3, [pc, #260]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a40      	ldr	r2, [pc, #256]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d2c:	f7fe f954 	bl	8001fd8 <HAL_GetTick>
 8003d30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d32:	e009      	b.n	8003d48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d34:	f7fe f950 	bl	8001fd8 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d902      	bls.n	8003d48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	73fb      	strb	r3, [r7, #15]
        break;
 8003d46:	e005      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d48:	4b37      	ldr	r3, [pc, #220]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1ef      	bne.n	8003d34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d160      	bne.n	8003e1c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d111      	bne.n	8003d84 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d60:	4b31      	ldr	r3, [pc, #196]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6892      	ldr	r2, [r2, #8]
 8003d70:	0211      	lsls	r1, r2, #8
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68d2      	ldr	r2, [r2, #12]
 8003d76:	0912      	lsrs	r2, r2, #4
 8003d78:	0452      	lsls	r2, r2, #17
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	492a      	ldr	r1, [pc, #168]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	610b      	str	r3, [r1, #16]
 8003d82:	e027      	b.n	8003dd4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d112      	bne.n	8003db0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d8a:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6892      	ldr	r2, [r2, #8]
 8003d9a:	0211      	lsls	r1, r2, #8
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6912      	ldr	r2, [r2, #16]
 8003da0:	0852      	lsrs	r2, r2, #1
 8003da2:	3a01      	subs	r2, #1
 8003da4:	0552      	lsls	r2, r2, #21
 8003da6:	430a      	orrs	r2, r1
 8003da8:	491f      	ldr	r1, [pc, #124]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	610b      	str	r3, [r1, #16]
 8003dae:	e011      	b.n	8003dd4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003db0:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003db8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6892      	ldr	r2, [r2, #8]
 8003dc0:	0211      	lsls	r1, r2, #8
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6952      	ldr	r2, [r2, #20]
 8003dc6:	0852      	lsrs	r2, r2, #1
 8003dc8:	3a01      	subs	r2, #1
 8003dca:	0652      	lsls	r2, r2, #25
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	4916      	ldr	r1, [pc, #88]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de0:	f7fe f8fa 	bl	8001fd8 <HAL_GetTick>
 8003de4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003de6:	e009      	b.n	8003dfc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003de8:	f7fe f8f6 	bl	8001fd8 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d902      	bls.n	8003dfc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	73fb      	strb	r3, [r7, #15]
          break;
 8003dfa:	e005      	b.n	8003e08 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dfc:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0ef      	beq.n	8003de8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	4904      	ldr	r1, [pc, #16]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000

08003e2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e3a:	4b6a      	ldr	r3, [pc, #424]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d018      	beq.n	8003e78 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e46:	4b67      	ldr	r3, [pc, #412]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 0203 	and.w	r2, r3, #3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d10d      	bne.n	8003e72 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
       ||
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e5e:	4b61      	ldr	r3, [pc, #388]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
       ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d047      	beq.n	8003f02 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
 8003e76:	e044      	b.n	8003f02 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d018      	beq.n	8003eb2 <RCCEx_PLLSAI2_Config+0x86>
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d825      	bhi.n	8003ed0 <RCCEx_PLLSAI2_Config+0xa4>
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d002      	beq.n	8003e8e <RCCEx_PLLSAI2_Config+0x62>
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d009      	beq.n	8003ea0 <RCCEx_PLLSAI2_Config+0x74>
 8003e8c:	e020      	b.n	8003ed0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e8e:	4b55      	ldr	r3, [pc, #340]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d11d      	bne.n	8003ed6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e9e:	e01a      	b.n	8003ed6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ea0:	4b50      	ldr	r3, [pc, #320]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d116      	bne.n	8003eda <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb0:	e013      	b.n	8003eda <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003eb2:	4b4c      	ldr	r3, [pc, #304]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10f      	bne.n	8003ede <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ebe:	4b49      	ldr	r3, [pc, #292]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ece:	e006      	b.n	8003ede <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ed4:	e004      	b.n	8003ee0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ed6:	bf00      	nop
 8003ed8:	e002      	b.n	8003ee0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003eda:	bf00      	nop
 8003edc:	e000      	b.n	8003ee0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ede:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10d      	bne.n	8003f02 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ee6:	4b3f      	ldr	r3, [pc, #252]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6819      	ldr	r1, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	430b      	orrs	r3, r1
 8003efc:	4939      	ldr	r1, [pc, #228]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d167      	bne.n	8003fd8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f08:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a35      	ldr	r2, [pc, #212]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f14:	f7fe f860 	bl	8001fd8 <HAL_GetTick>
 8003f18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f1a:	e009      	b.n	8003f30 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f1c:	f7fe f85c 	bl	8001fd8 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d902      	bls.n	8003f30 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	73fb      	strb	r3, [r7, #15]
        break;
 8003f2e:	e005      	b.n	8003f3c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f30:	4b2c      	ldr	r3, [pc, #176]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1ef      	bne.n	8003f1c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d14a      	bne.n	8003fd8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d111      	bne.n	8003f6c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f48:	4b26      	ldr	r3, [pc, #152]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6892      	ldr	r2, [r2, #8]
 8003f58:	0211      	lsls	r1, r2, #8
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68d2      	ldr	r2, [r2, #12]
 8003f5e:	0912      	lsrs	r2, r2, #4
 8003f60:	0452      	lsls	r2, r2, #17
 8003f62:	430a      	orrs	r2, r1
 8003f64:	491f      	ldr	r1, [pc, #124]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	614b      	str	r3, [r1, #20]
 8003f6a:	e011      	b.n	8003f90 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f6c:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6892      	ldr	r2, [r2, #8]
 8003f7c:	0211      	lsls	r1, r2, #8
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6912      	ldr	r2, [r2, #16]
 8003f82:	0852      	lsrs	r2, r2, #1
 8003f84:	3a01      	subs	r2, #1
 8003f86:	0652      	lsls	r2, r2, #25
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	4916      	ldr	r1, [pc, #88]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f90:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a13      	ldr	r2, [pc, #76]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9c:	f7fe f81c 	bl	8001fd8 <HAL_GetTick>
 8003fa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fa2:	e009      	b.n	8003fb8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fa4:	f7fe f818 	bl	8001fd8 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d902      	bls.n	8003fb8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	73fb      	strb	r3, [r7, #15]
          break;
 8003fb6:	e005      	b.n	8003fc4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0ef      	beq.n	8003fa4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	4904      	ldr	r1, [pc, #16]	; (8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40021000 	.word	0x40021000

08003fe8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e095      	b.n	8004126 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d108      	bne.n	8004014 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800400a:	d009      	beq.n	8004020 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	61da      	str	r2, [r3, #28]
 8004012:	e005      	b.n	8004020 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fd fc5a 	bl	80018f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004056:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004060:	d902      	bls.n	8004068 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	e002      	b.n	800406e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800406c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004076:	d007      	beq.n	8004088 <HAL_SPI_Init+0xa0>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004080:	d002      	beq.n	8004088 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ca:	ea42 0103 	orr.w	r1, r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	0c1b      	lsrs	r3, r3, #16
 80040e4:	f003 0204 	and.w	r2, r3, #4
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004104:	ea42 0103 	orr.w	r1, r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_SPI_TransmitReceive_DMA+0x20>
 800414c:	2302      	movs	r3, #2
 800414e:	e16c      	b.n	800442a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800415e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004166:	7dbb      	ldrb	r3, [r7, #22]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d00d      	beq.n	8004188 <HAL_SPI_TransmitReceive_DMA+0x58>
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004172:	d106      	bne.n	8004182 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d102      	bne.n	8004182 <HAL_SPI_TransmitReceive_DMA+0x52>
 800417c:	7dbb      	ldrb	r3, [r7, #22]
 800417e:	2b04      	cmp	r3, #4
 8004180:	d002      	beq.n	8004188 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004182:	2302      	movs	r3, #2
 8004184:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004186:	e14b      	b.n	8004420 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004194:	887b      	ldrh	r3, [r7, #2]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800419e:	e13f      	b.n	8004420 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d003      	beq.n	80041b4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2205      	movs	r2, #5
 80041b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	887a      	ldrh	r2, [r7, #2]
 80041c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	887a      	ldrh	r2, [r7, #2]
 80041ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	887a      	ldrh	r2, [r7, #2]
 80041d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	887a      	ldrh	r2, [r7, #2]
 80041de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80041fc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004206:	d908      	bls.n	800421a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	e06f      	b.n	80042fa <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004228:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004234:	d126      	bne.n	8004284 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10f      	bne.n	8004262 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004250:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004256:	b29b      	uxth	r3, r3
 8004258:	085b      	lsrs	r3, r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004260:	e010      	b.n	8004284 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004270:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004276:	b29b      	uxth	r3, r3
 8004278:	085b      	lsrs	r3, r3, #1
 800427a:	b29b      	uxth	r3, r3
 800427c:	3301      	adds	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428e:	d134      	bne.n	80042fa <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800429e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d111      	bne.n	80042d4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042be:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	085b      	lsrs	r3, r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80042d2:	e012      	b.n	80042fa <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042e2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	085b      	lsrs	r3, r3, #1
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3301      	adds	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b04      	cmp	r3, #4
 8004304:	d108      	bne.n	8004318 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430a:	4a4a      	ldr	r2, [pc, #296]	; (8004434 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800430c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004312:	4a49      	ldr	r2, [pc, #292]	; (8004438 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8004314:	62da      	str	r2, [r3, #44]	; 0x2c
 8004316:	e007      	b.n	8004328 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431c:	4a47      	ldr	r2, [pc, #284]	; (800443c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	4a46      	ldr	r2, [pc, #280]	; (8004440 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8004326:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432c:	4a45      	ldr	r2, [pc, #276]	; (8004444 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800432e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004334:	2200      	movs	r2, #0
 8004336:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	330c      	adds	r3, #12
 8004342:	4619      	mov	r1, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004350:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004352:	f7fe f83b 	bl	80023cc <HAL_DMA_Start_IT>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00c      	beq.n	8004376 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004360:	f043 0210 	orr.w	r2, r3, #16
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004374:	e054      	b.n	8004420 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0201 	orr.w	r2, r2, #1
 8004384:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004392:	2200      	movs	r2, #0
 8004394:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	2200      	movs	r2, #0
 800439c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	2200      	movs	r2, #0
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	4619      	mov	r1, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	330c      	adds	r3, #12
 80043b6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043bc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80043be:	f7fe f805 	bl	80023cc <HAL_DMA_Start_IT>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00c      	beq.n	80043e2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043cc:	f043 0210 	orr.w	r2, r3, #16
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80043e0:	e01e      	b.n	8004420 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ec:	2b40      	cmp	r3, #64	; 0x40
 80043ee:	d007      	beq.n	8004400 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043fe:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0220 	orr.w	r2, r2, #32
 800440e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0202 	orr.w	r2, r2, #2
 800441e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004428:	7dfb      	ldrb	r3, [r7, #23]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	080045bd 	.word	0x080045bd
 8004438:	08004485 	.word	0x08004485
 800443c:	080045d9 	.word	0x080045d9
 8004440:	0800452d 	.word	0x0800452d
 8004444:	080045f5 	.word	0x080045f5

08004448 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004492:	f7fd fda1 	bl	8001fd8 <HAL_GetTick>
 8004496:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0320 	and.w	r3, r3, #32
 80044a2:	2b20      	cmp	r3, #32
 80044a4:	d03c      	beq.n	8004520 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0220 	bic.w	r2, r2, #32
 80044b4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10d      	bne.n	80044da <SPI_DMAReceiveCplt+0x56>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044c6:	d108      	bne.n	80044da <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0203 	bic.w	r2, r2, #3
 80044d6:	605a      	str	r2, [r3, #4]
 80044d8:	e007      	b.n	80044ea <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	2164      	movs	r1, #100	; 0x64
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f9ba 	bl	8004868 <SPI_EndRxTransaction>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f7fc fe53 	bl	80011c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800451e:	e002      	b.n	8004526 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7ff ff91 	bl	8004448 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800453a:	f7fd fd4d 	bl	8001fd8 <HAL_GetTick>
 800453e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b20      	cmp	r3, #32
 800454c:	d030      	beq.n	80045b0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0220 	bic.w	r2, r2, #32
 800455c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	2164      	movs	r1, #100	; 0x64
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f9d8 	bl	8004918 <SPI_EndRxTxTransaction>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004572:	f043 0220 	orr.w	r2, r3, #32
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0203 	bic.w	r2, r2, #3
 8004588:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f7fc fe0b 	bl	80011c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80045ae:	e002      	b.n	80045b6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f7fc fdf3 	bl	800119c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f7ff ff46 	bl	800445c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f7ff ff42 	bl	8004470 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0203 	bic.w	r2, r2, #3
 8004610:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004616:	f043 0210 	orr.w	r2, r3, #16
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7fc fdcc 	bl	80011c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004644:	f7fd fcc8 	bl	8001fd8 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	4413      	add	r3, r2
 8004652:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004654:	f7fd fcc0 	bl	8001fd8 <HAL_GetTick>
 8004658:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800465a:	4b39      	ldr	r3, [pc, #228]	; (8004740 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	015b      	lsls	r3, r3, #5
 8004660:	0d1b      	lsrs	r3, r3, #20
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	fb02 f303 	mul.w	r3, r2, r3
 8004668:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800466a:	e054      	b.n	8004716 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004672:	d050      	beq.n	8004716 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004674:	f7fd fcb0 	bl	8001fd8 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	429a      	cmp	r2, r3
 8004682:	d902      	bls.n	800468a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d13d      	bne.n	8004706 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004698:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046a2:	d111      	bne.n	80046c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ac:	d004      	beq.n	80046b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b6:	d107      	bne.n	80046c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d0:	d10f      	bne.n	80046f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e017      	b.n	8004736 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	3b01      	subs	r3, #1
 8004714:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4013      	ands	r3, r2
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	429a      	cmp	r2, r3
 8004724:	bf0c      	ite	eq
 8004726:	2301      	moveq	r3, #1
 8004728:	2300      	movne	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	429a      	cmp	r2, r3
 8004732:	d19b      	bne.n	800466c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000000 	.word	0x20000000

08004744 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004752:	f7fd fc41 	bl	8001fd8 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	4413      	add	r3, r2
 8004760:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004762:	f7fd fc39 	bl	8001fd8 <HAL_GetTick>
 8004766:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004768:	4b3e      	ldr	r3, [pc, #248]	; (8004864 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	00da      	lsls	r2, r3, #3
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	0d1b      	lsrs	r3, r3, #20
 8004778:	69fa      	ldr	r2, [r7, #28]
 800477a:	fb02 f303 	mul.w	r3, r2, r3
 800477e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004780:	e062      	b.n	8004848 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004788:	d109      	bne.n	800479e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d106      	bne.n	800479e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	330c      	adds	r3, #12
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800479c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d050      	beq.n	8004848 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047a6:	f7fd fc17 	bl	8001fd8 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d902      	bls.n	80047bc <SPI_WaitFifoStateUntilTimeout+0x78>
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d13d      	bne.n	8004838 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d4:	d111      	bne.n	80047fa <SPI_WaitFifoStateUntilTimeout+0xb6>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047de:	d004      	beq.n	80047ea <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e8:	d107      	bne.n	80047fa <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004802:	d10f      	bne.n	8004824 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004822:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e010      	b.n	800485a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	3b01      	subs	r3, #1
 8004846:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4013      	ands	r3, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	429a      	cmp	r2, r3
 8004856:	d194      	bne.n	8004782 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3720      	adds	r7, #32
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000000 	.word	0x20000000

08004868 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af02      	add	r7, sp, #8
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800487c:	d111      	bne.n	80048a2 <SPI_EndRxTransaction+0x3a>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004886:	d004      	beq.n	8004892 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004890:	d107      	bne.n	80048a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048a0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2200      	movs	r2, #0
 80048aa:	2180      	movs	r1, #128	; 0x80
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f7ff fec1 	bl	8004634 <SPI_WaitFlagStateUntilTimeout>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d007      	beq.n	80048c8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048bc:	f043 0220 	orr.w	r2, r3, #32
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e023      	b.n	8004910 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048d0:	d11d      	bne.n	800490e <SPI_EndRxTransaction+0xa6>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048da:	d004      	beq.n	80048e6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e4:	d113      	bne.n	800490e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f7ff ff26 	bl	8004744 <SPI_WaitFifoStateUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d007      	beq.n	800490e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004902:	f043 0220 	orr.w	r2, r3, #32
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e000      	b.n	8004910 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af02      	add	r7, sp, #8
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2200      	movs	r2, #0
 800492c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7ff ff07 	bl	8004744 <SPI_WaitFifoStateUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004940:	f043 0220 	orr.w	r2, r3, #32
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e027      	b.n	800499c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2200      	movs	r2, #0
 8004954:	2180      	movs	r1, #128	; 0x80
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f7ff fe6c 	bl	8004634 <SPI_WaitFlagStateUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004966:	f043 0220 	orr.w	r2, r3, #32
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e014      	b.n	800499c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2200      	movs	r2, #0
 800497a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f7ff fee0 	bl	8004744 <SPI_WaitFifoStateUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498e:	f043 0220 	orr.w	r2, r3, #32
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e000      	b.n	800499c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e049      	b.n	8004a4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fd f852 	bl	8001a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3304      	adds	r3, #4
 80049e0:	4619      	mov	r1, r3
 80049e2:	4610      	mov	r0, r2
 80049e4:	f000 fd2c 	bl	8005440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d001      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e04f      	b.n	8004b0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a23      	ldr	r2, [pc, #140]	; (8004b18 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d01d      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a96:	d018      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <HAL_TIM_Base_Start_IT+0xc8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <HAL_TIM_Base_Start_IT+0xcc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00e      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1c      	ldr	r2, [pc, #112]	; (8004b24 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d009      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1b      	ldr	r2, [pc, #108]	; (8004b28 <HAL_TIM_Base_Start_IT+0xd4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d004      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d115      	bne.n	8004af6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	4b17      	ldr	r3, [pc, #92]	; (8004b30 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b06      	cmp	r3, #6
 8004ada:	d015      	beq.n	8004b08 <HAL_TIM_Base_Start_IT+0xb4>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae2:	d011      	beq.n	8004b08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af4:	e008      	b.n	8004b08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0201 	orr.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e000      	b.n	8004b0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	40012c00 	.word	0x40012c00
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40013400 	.word	0x40013400
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	00010007 	.word	0x00010007

08004b34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e049      	b.n	8004bda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f841 	bl	8004be2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f000 fc64 	bl	8005440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
	...

08004bf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d109      	bne.n	8004c1c <HAL_TIM_PWM_Start+0x24>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	bf14      	ite	ne
 8004c14:	2301      	movne	r3, #1
 8004c16:	2300      	moveq	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	e03c      	b.n	8004c96 <HAL_TIM_PWM_Start+0x9e>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d109      	bne.n	8004c36 <HAL_TIM_PWM_Start+0x3e>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	bf14      	ite	ne
 8004c2e:	2301      	movne	r3, #1
 8004c30:	2300      	moveq	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	e02f      	b.n	8004c96 <HAL_TIM_PWM_Start+0x9e>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d109      	bne.n	8004c50 <HAL_TIM_PWM_Start+0x58>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	bf14      	ite	ne
 8004c48:	2301      	movne	r3, #1
 8004c4a:	2300      	moveq	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	e022      	b.n	8004c96 <HAL_TIM_PWM_Start+0x9e>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b0c      	cmp	r3, #12
 8004c54:	d109      	bne.n	8004c6a <HAL_TIM_PWM_Start+0x72>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	bf14      	ite	ne
 8004c62:	2301      	movne	r3, #1
 8004c64:	2300      	moveq	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	e015      	b.n	8004c96 <HAL_TIM_PWM_Start+0x9e>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d109      	bne.n	8004c84 <HAL_TIM_PWM_Start+0x8c>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	bf14      	ite	ne
 8004c7c:	2301      	movne	r3, #1
 8004c7e:	2300      	moveq	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	e008      	b.n	8004c96 <HAL_TIM_PWM_Start+0x9e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	bf14      	ite	ne
 8004c90:	2301      	movne	r3, #1
 8004c92:	2300      	moveq	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e09c      	b.n	8004dd8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d104      	bne.n	8004cae <HAL_TIM_PWM_Start+0xb6>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cac:	e023      	b.n	8004cf6 <HAL_TIM_PWM_Start+0xfe>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d104      	bne.n	8004cbe <HAL_TIM_PWM_Start+0xc6>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cbc:	e01b      	b.n	8004cf6 <HAL_TIM_PWM_Start+0xfe>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d104      	bne.n	8004cce <HAL_TIM_PWM_Start+0xd6>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ccc:	e013      	b.n	8004cf6 <HAL_TIM_PWM_Start+0xfe>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b0c      	cmp	r3, #12
 8004cd2:	d104      	bne.n	8004cde <HAL_TIM_PWM_Start+0xe6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cdc:	e00b      	b.n	8004cf6 <HAL_TIM_PWM_Start+0xfe>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d104      	bne.n	8004cee <HAL_TIM_PWM_Start+0xf6>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cec:	e003      	b.n	8004cf6 <HAL_TIM_PWM_Start+0xfe>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	6839      	ldr	r1, [r7, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 ffa8 	bl	8005c54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a35      	ldr	r2, [pc, #212]	; (8004de0 <HAL_TIM_PWM_Start+0x1e8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <HAL_TIM_PWM_Start+0x13e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a34      	ldr	r2, [pc, #208]	; (8004de4 <HAL_TIM_PWM_Start+0x1ec>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00e      	beq.n	8004d36 <HAL_TIM_PWM_Start+0x13e>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a32      	ldr	r2, [pc, #200]	; (8004de8 <HAL_TIM_PWM_Start+0x1f0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d009      	beq.n	8004d36 <HAL_TIM_PWM_Start+0x13e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a31      	ldr	r2, [pc, #196]	; (8004dec <HAL_TIM_PWM_Start+0x1f4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <HAL_TIM_PWM_Start+0x13e>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a2f      	ldr	r2, [pc, #188]	; (8004df0 <HAL_TIM_PWM_Start+0x1f8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d101      	bne.n	8004d3a <HAL_TIM_PWM_Start+0x142>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <HAL_TIM_PWM_Start+0x144>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a22      	ldr	r2, [pc, #136]	; (8004de0 <HAL_TIM_PWM_Start+0x1e8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d01d      	beq.n	8004d96 <HAL_TIM_PWM_Start+0x19e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d62:	d018      	beq.n	8004d96 <HAL_TIM_PWM_Start+0x19e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a22      	ldr	r2, [pc, #136]	; (8004df4 <HAL_TIM_PWM_Start+0x1fc>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <HAL_TIM_PWM_Start+0x19e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a21      	ldr	r2, [pc, #132]	; (8004df8 <HAL_TIM_PWM_Start+0x200>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00e      	beq.n	8004d96 <HAL_TIM_PWM_Start+0x19e>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1f      	ldr	r2, [pc, #124]	; (8004dfc <HAL_TIM_PWM_Start+0x204>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d009      	beq.n	8004d96 <HAL_TIM_PWM_Start+0x19e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a17      	ldr	r2, [pc, #92]	; (8004de4 <HAL_TIM_PWM_Start+0x1ec>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <HAL_TIM_PWM_Start+0x19e>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a15      	ldr	r2, [pc, #84]	; (8004de8 <HAL_TIM_PWM_Start+0x1f0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d115      	bne.n	8004dc2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	4b18      	ldr	r3, [pc, #96]	; (8004e00 <HAL_TIM_PWM_Start+0x208>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b06      	cmp	r3, #6
 8004da6:	d015      	beq.n	8004dd4 <HAL_TIM_PWM_Start+0x1dc>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dae:	d011      	beq.n	8004dd4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc0:	e008      	b.n	8004dd4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0201 	orr.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	e000      	b.n	8004dd6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40012c00 	.word	0x40012c00
 8004de4:	40013400 	.word	0x40013400
 8004de8:	40014000 	.word	0x40014000
 8004dec:	40014400 	.word	0x40014400
 8004df0:	40014800 	.word	0x40014800
 8004df4:	40000400 	.word	0x40000400
 8004df8:	40000800 	.word	0x40000800
 8004dfc:	40000c00 	.word	0x40000c00
 8004e00:	00010007 	.word	0x00010007

08004e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d122      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d11b      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0202 	mvn.w	r2, #2
 8004e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fadc 	bl	8005404 <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 face 	bl	80053f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fadf 	bl	8005418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d122      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0204 	mvn.w	r2, #4
 8004e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fab2 	bl	8005404 <HAL_TIM_IC_CaptureCallback>
 8004ea0:	e005      	b.n	8004eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 faa4 	bl	80053f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fab5 	bl	8005418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d122      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d11b      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0208 	mvn.w	r2, #8
 8004ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2204      	movs	r2, #4
 8004ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fa88 	bl	8005404 <HAL_TIM_IC_CaptureCallback>
 8004ef4:	e005      	b.n	8004f02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fa7a 	bl	80053f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fa8b 	bl	8005418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b10      	cmp	r3, #16
 8004f14:	d122      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0310 	and.w	r3, r3, #16
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d11b      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f06f 0210 	mvn.w	r2, #16
 8004f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2208      	movs	r2, #8
 8004f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fa5e 	bl	8005404 <HAL_TIM_IC_CaptureCallback>
 8004f48:	e005      	b.n	8004f56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fa50 	bl	80053f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fa61 	bl	8005418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d10e      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d107      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0201 	mvn.w	r2, #1
 8004f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fc f8e4 	bl	8001150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f92:	2b80      	cmp	r3, #128	; 0x80
 8004f94:	d10e      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa0:	2b80      	cmp	r3, #128	; 0x80
 8004fa2:	d107      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 ff08 	bl	8005dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc2:	d10e      	bne.n	8004fe2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fce:	2b80      	cmp	r3, #128	; 0x80
 8004fd0:	d107      	bne.n	8004fe2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 fefb 	bl	8005dd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fec:	2b40      	cmp	r3, #64	; 0x40
 8004fee:	d10e      	bne.n	800500e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b40      	cmp	r3, #64	; 0x40
 8004ffc:	d107      	bne.n	800500e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fa0f 	bl	800542c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b20      	cmp	r3, #32
 800501a:	d10e      	bne.n	800503a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b20      	cmp	r3, #32
 8005028:	d107      	bne.n	800503a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f06f 0220 	mvn.w	r2, #32
 8005032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 febb 	bl	8005db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800503a:	bf00      	nop
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800505a:	2302      	movs	r3, #2
 800505c:	e0fd      	b.n	800525a <HAL_TIM_PWM_ConfigChannel+0x216>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b14      	cmp	r3, #20
 800506a:	f200 80f0 	bhi.w	800524e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800506e:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005074:	080050c9 	.word	0x080050c9
 8005078:	0800524f 	.word	0x0800524f
 800507c:	0800524f 	.word	0x0800524f
 8005080:	0800524f 	.word	0x0800524f
 8005084:	08005109 	.word	0x08005109
 8005088:	0800524f 	.word	0x0800524f
 800508c:	0800524f 	.word	0x0800524f
 8005090:	0800524f 	.word	0x0800524f
 8005094:	0800514b 	.word	0x0800514b
 8005098:	0800524f 	.word	0x0800524f
 800509c:	0800524f 	.word	0x0800524f
 80050a0:	0800524f 	.word	0x0800524f
 80050a4:	0800518b 	.word	0x0800518b
 80050a8:	0800524f 	.word	0x0800524f
 80050ac:	0800524f 	.word	0x0800524f
 80050b0:	0800524f 	.word	0x0800524f
 80050b4:	080051cd 	.word	0x080051cd
 80050b8:	0800524f 	.word	0x0800524f
 80050bc:	0800524f 	.word	0x0800524f
 80050c0:	0800524f 	.word	0x0800524f
 80050c4:	0800520d 	.word	0x0800520d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fa50 	bl	8005574 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0208 	orr.w	r2, r2, #8
 80050e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0204 	bic.w	r2, r2, #4
 80050f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6999      	ldr	r1, [r3, #24]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	691a      	ldr	r2, [r3, #16]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	619a      	str	r2, [r3, #24]
      break;
 8005106:	e0a3      	b.n	8005250 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fac0 	bl	8005694 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699a      	ldr	r2, [r3, #24]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6999      	ldr	r1, [r3, #24]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	021a      	lsls	r2, r3, #8
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	619a      	str	r2, [r3, #24]
      break;
 8005148:	e082      	b.n	8005250 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fb29 	bl	80057a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69da      	ldr	r2, [r3, #28]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0208 	orr.w	r2, r2, #8
 8005164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0204 	bic.w	r2, r2, #4
 8005174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69d9      	ldr	r1, [r3, #28]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	61da      	str	r2, [r3, #28]
      break;
 8005188:	e062      	b.n	8005250 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fb91 	bl	80058b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69da      	ldr	r2, [r3, #28]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69d9      	ldr	r1, [r3, #28]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	021a      	lsls	r2, r3, #8
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	61da      	str	r2, [r3, #28]
      break;
 80051ca:	e041      	b.n	8005250 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fbda 	bl	800598c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0208 	orr.w	r2, r2, #8
 80051e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0204 	bic.w	r2, r2, #4
 80051f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	691a      	ldr	r2, [r3, #16]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800520a:	e021      	b.n	8005250 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68b9      	ldr	r1, [r7, #8]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fc1e 	bl	8005a54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005226:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005236:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	021a      	lsls	r2, r3, #8
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800524c:	e000      	b.n	8005250 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800524e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop

08005264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_TIM_ConfigClockSource+0x18>
 8005278:	2302      	movs	r3, #2
 800527a:	e0b5      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x184>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800529e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b8:	d03e      	beq.n	8005338 <HAL_TIM_ConfigClockSource+0xd4>
 80052ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052be:	f200 8087 	bhi.w	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
 80052c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c6:	f000 8085 	beq.w	80053d4 <HAL_TIM_ConfigClockSource+0x170>
 80052ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ce:	d87f      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
 80052d0:	2b70      	cmp	r3, #112	; 0x70
 80052d2:	d01a      	beq.n	800530a <HAL_TIM_ConfigClockSource+0xa6>
 80052d4:	2b70      	cmp	r3, #112	; 0x70
 80052d6:	d87b      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
 80052d8:	2b60      	cmp	r3, #96	; 0x60
 80052da:	d050      	beq.n	800537e <HAL_TIM_ConfigClockSource+0x11a>
 80052dc:	2b60      	cmp	r3, #96	; 0x60
 80052de:	d877      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
 80052e0:	2b50      	cmp	r3, #80	; 0x50
 80052e2:	d03c      	beq.n	800535e <HAL_TIM_ConfigClockSource+0xfa>
 80052e4:	2b50      	cmp	r3, #80	; 0x50
 80052e6:	d873      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
 80052e8:	2b40      	cmp	r3, #64	; 0x40
 80052ea:	d058      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x13a>
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	d86f      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
 80052f0:	2b30      	cmp	r3, #48	; 0x30
 80052f2:	d064      	beq.n	80053be <HAL_TIM_ConfigClockSource+0x15a>
 80052f4:	2b30      	cmp	r3, #48	; 0x30
 80052f6:	d86b      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	d060      	beq.n	80053be <HAL_TIM_ConfigClockSource+0x15a>
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d867      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d05c      	beq.n	80053be <HAL_TIM_ConfigClockSource+0x15a>
 8005304:	2b10      	cmp	r3, #16
 8005306:	d05a      	beq.n	80053be <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005308:	e062      	b.n	80053d0 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6818      	ldr	r0, [r3, #0]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	6899      	ldr	r1, [r3, #8]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f000 fc7b 	bl	8005c14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800532c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	609a      	str	r2, [r3, #8]
      break;
 8005336:	e04e      	b.n	80053d6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	6899      	ldr	r1, [r3, #8]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f000 fc64 	bl	8005c14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800535a:	609a      	str	r2, [r3, #8]
      break;
 800535c:	e03b      	b.n	80053d6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	6859      	ldr	r1, [r3, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	461a      	mov	r2, r3
 800536c:	f000 fbd8 	bl	8005b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2150      	movs	r1, #80	; 0x50
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fc31 	bl	8005bde <TIM_ITRx_SetConfig>
      break;
 800537c:	e02b      	b.n	80053d6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	6859      	ldr	r1, [r3, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	461a      	mov	r2, r3
 800538c:	f000 fbf7 	bl	8005b7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2160      	movs	r1, #96	; 0x60
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fc21 	bl	8005bde <TIM_ITRx_SetConfig>
      break;
 800539c:	e01b      	b.n	80053d6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6818      	ldr	r0, [r3, #0]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	6859      	ldr	r1, [r3, #4]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	461a      	mov	r2, r3
 80053ac:	f000 fbb8 	bl	8005b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2140      	movs	r1, #64	; 0x40
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fc11 	bl	8005bde <TIM_ITRx_SetConfig>
      break;
 80053bc:	e00b      	b.n	80053d6 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4619      	mov	r1, r3
 80053c8:	4610      	mov	r0, r2
 80053ca:	f000 fc08 	bl	8005bde <TIM_ITRx_SetConfig>
        break;
 80053ce:	e002      	b.n	80053d6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80053d0:	bf00      	nop
 80053d2:	e000      	b.n	80053d6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80053d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a40      	ldr	r2, [pc, #256]	; (8005554 <TIM_Base_SetConfig+0x114>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d013      	beq.n	8005480 <TIM_Base_SetConfig+0x40>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545e:	d00f      	beq.n	8005480 <TIM_Base_SetConfig+0x40>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a3d      	ldr	r2, [pc, #244]	; (8005558 <TIM_Base_SetConfig+0x118>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00b      	beq.n	8005480 <TIM_Base_SetConfig+0x40>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a3c      	ldr	r2, [pc, #240]	; (800555c <TIM_Base_SetConfig+0x11c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d007      	beq.n	8005480 <TIM_Base_SetConfig+0x40>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a3b      	ldr	r2, [pc, #236]	; (8005560 <TIM_Base_SetConfig+0x120>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d003      	beq.n	8005480 <TIM_Base_SetConfig+0x40>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a3a      	ldr	r2, [pc, #232]	; (8005564 <TIM_Base_SetConfig+0x124>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d108      	bne.n	8005492 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a2f      	ldr	r2, [pc, #188]	; (8005554 <TIM_Base_SetConfig+0x114>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d01f      	beq.n	80054da <TIM_Base_SetConfig+0x9a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a0:	d01b      	beq.n	80054da <TIM_Base_SetConfig+0x9a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a2c      	ldr	r2, [pc, #176]	; (8005558 <TIM_Base_SetConfig+0x118>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d017      	beq.n	80054da <TIM_Base_SetConfig+0x9a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a2b      	ldr	r2, [pc, #172]	; (800555c <TIM_Base_SetConfig+0x11c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d013      	beq.n	80054da <TIM_Base_SetConfig+0x9a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a2a      	ldr	r2, [pc, #168]	; (8005560 <TIM_Base_SetConfig+0x120>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00f      	beq.n	80054da <TIM_Base_SetConfig+0x9a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a29      	ldr	r2, [pc, #164]	; (8005564 <TIM_Base_SetConfig+0x124>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00b      	beq.n	80054da <TIM_Base_SetConfig+0x9a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a28      	ldr	r2, [pc, #160]	; (8005568 <TIM_Base_SetConfig+0x128>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d007      	beq.n	80054da <TIM_Base_SetConfig+0x9a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a27      	ldr	r2, [pc, #156]	; (800556c <TIM_Base_SetConfig+0x12c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d003      	beq.n	80054da <TIM_Base_SetConfig+0x9a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a26      	ldr	r2, [pc, #152]	; (8005570 <TIM_Base_SetConfig+0x130>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d108      	bne.n	80054ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a10      	ldr	r2, [pc, #64]	; (8005554 <TIM_Base_SetConfig+0x114>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00f      	beq.n	8005538 <TIM_Base_SetConfig+0xf8>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a12      	ldr	r2, [pc, #72]	; (8005564 <TIM_Base_SetConfig+0x124>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00b      	beq.n	8005538 <TIM_Base_SetConfig+0xf8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a11      	ldr	r2, [pc, #68]	; (8005568 <TIM_Base_SetConfig+0x128>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d007      	beq.n	8005538 <TIM_Base_SetConfig+0xf8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a10      	ldr	r2, [pc, #64]	; (800556c <TIM_Base_SetConfig+0x12c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d003      	beq.n	8005538 <TIM_Base_SetConfig+0xf8>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a0f      	ldr	r2, [pc, #60]	; (8005570 <TIM_Base_SetConfig+0x130>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d103      	bne.n	8005540 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	615a      	str	r2, [r3, #20]
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40012c00 	.word	0x40012c00
 8005558:	40000400 	.word	0x40000400
 800555c:	40000800 	.word	0x40000800
 8005560:	40000c00 	.word	0x40000c00
 8005564:	40013400 	.word	0x40013400
 8005568:	40014000 	.word	0x40014000
 800556c:	40014400 	.word	0x40014400
 8005570:	40014800 	.word	0x40014800

08005574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f023 0201 	bic.w	r2, r3, #1
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0303 	bic.w	r3, r3, #3
 80055ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f023 0302 	bic.w	r3, r3, #2
 80055c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a2c      	ldr	r2, [pc, #176]	; (8005680 <TIM_OC1_SetConfig+0x10c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00f      	beq.n	80055f4 <TIM_OC1_SetConfig+0x80>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a2b      	ldr	r2, [pc, #172]	; (8005684 <TIM_OC1_SetConfig+0x110>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00b      	beq.n	80055f4 <TIM_OC1_SetConfig+0x80>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a2a      	ldr	r2, [pc, #168]	; (8005688 <TIM_OC1_SetConfig+0x114>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d007      	beq.n	80055f4 <TIM_OC1_SetConfig+0x80>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a29      	ldr	r2, [pc, #164]	; (800568c <TIM_OC1_SetConfig+0x118>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d003      	beq.n	80055f4 <TIM_OC1_SetConfig+0x80>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a28      	ldr	r2, [pc, #160]	; (8005690 <TIM_OC1_SetConfig+0x11c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d10c      	bne.n	800560e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f023 0308 	bic.w	r3, r3, #8
 80055fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f023 0304 	bic.w	r3, r3, #4
 800560c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <TIM_OC1_SetConfig+0x10c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00f      	beq.n	8005636 <TIM_OC1_SetConfig+0xc2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a1a      	ldr	r2, [pc, #104]	; (8005684 <TIM_OC1_SetConfig+0x110>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00b      	beq.n	8005636 <TIM_OC1_SetConfig+0xc2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a19      	ldr	r2, [pc, #100]	; (8005688 <TIM_OC1_SetConfig+0x114>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d007      	beq.n	8005636 <TIM_OC1_SetConfig+0xc2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a18      	ldr	r2, [pc, #96]	; (800568c <TIM_OC1_SetConfig+0x118>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d003      	beq.n	8005636 <TIM_OC1_SetConfig+0xc2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a17      	ldr	r2, [pc, #92]	; (8005690 <TIM_OC1_SetConfig+0x11c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d111      	bne.n	800565a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800563c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	621a      	str	r2, [r3, #32]
}
 8005674:	bf00      	nop
 8005676:	371c      	adds	r7, #28
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	40012c00 	.word	0x40012c00
 8005684:	40013400 	.word	0x40013400
 8005688:	40014000 	.word	0x40014000
 800568c:	40014400 	.word	0x40014400
 8005690:	40014800 	.word	0x40014800

08005694 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	f023 0210 	bic.w	r2, r3, #16
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	021b      	lsls	r3, r3, #8
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f023 0320 	bic.w	r3, r3, #32
 80056e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a28      	ldr	r2, [pc, #160]	; (8005794 <TIM_OC2_SetConfig+0x100>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d003      	beq.n	8005700 <TIM_OC2_SetConfig+0x6c>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a27      	ldr	r2, [pc, #156]	; (8005798 <TIM_OC2_SetConfig+0x104>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d10d      	bne.n	800571c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4313      	orrs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800571a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a1d      	ldr	r2, [pc, #116]	; (8005794 <TIM_OC2_SetConfig+0x100>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00f      	beq.n	8005744 <TIM_OC2_SetConfig+0xb0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a1c      	ldr	r2, [pc, #112]	; (8005798 <TIM_OC2_SetConfig+0x104>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d00b      	beq.n	8005744 <TIM_OC2_SetConfig+0xb0>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a1b      	ldr	r2, [pc, #108]	; (800579c <TIM_OC2_SetConfig+0x108>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d007      	beq.n	8005744 <TIM_OC2_SetConfig+0xb0>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a1a      	ldr	r2, [pc, #104]	; (80057a0 <TIM_OC2_SetConfig+0x10c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_OC2_SetConfig+0xb0>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a19      	ldr	r2, [pc, #100]	; (80057a4 <TIM_OC2_SetConfig+0x110>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d113      	bne.n	800576c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800574a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005752:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	621a      	str	r2, [r3, #32]
}
 8005786:	bf00      	nop
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40012c00 	.word	0x40012c00
 8005798:	40013400 	.word	0x40013400
 800579c:	40014000 	.word	0x40014000
 80057a0:	40014400 	.word	0x40014400
 80057a4:	40014800 	.word	0x40014800

080057a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0303 	bic.w	r3, r3, #3
 80057e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a27      	ldr	r2, [pc, #156]	; (80058a4 <TIM_OC3_SetConfig+0xfc>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d003      	beq.n	8005812 <TIM_OC3_SetConfig+0x6a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a26      	ldr	r2, [pc, #152]	; (80058a8 <TIM_OC3_SetConfig+0x100>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d10d      	bne.n	800582e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800582c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a1c      	ldr	r2, [pc, #112]	; (80058a4 <TIM_OC3_SetConfig+0xfc>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00f      	beq.n	8005856 <TIM_OC3_SetConfig+0xae>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a1b      	ldr	r2, [pc, #108]	; (80058a8 <TIM_OC3_SetConfig+0x100>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00b      	beq.n	8005856 <TIM_OC3_SetConfig+0xae>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a1a      	ldr	r2, [pc, #104]	; (80058ac <TIM_OC3_SetConfig+0x104>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d007      	beq.n	8005856 <TIM_OC3_SetConfig+0xae>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a19      	ldr	r2, [pc, #100]	; (80058b0 <TIM_OC3_SetConfig+0x108>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d003      	beq.n	8005856 <TIM_OC3_SetConfig+0xae>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a18      	ldr	r2, [pc, #96]	; (80058b4 <TIM_OC3_SetConfig+0x10c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d113      	bne.n	800587e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800585c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	621a      	str	r2, [r3, #32]
}
 8005898:	bf00      	nop
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	40012c00 	.word	0x40012c00
 80058a8:	40013400 	.word	0x40013400
 80058ac:	40014000 	.word	0x40014000
 80058b0:	40014400 	.word	0x40014400
 80058b4:	40014800 	.word	0x40014800

080058b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	021b      	lsls	r3, r3, #8
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	031b      	lsls	r3, r3, #12
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a18      	ldr	r2, [pc, #96]	; (8005978 <TIM_OC4_SetConfig+0xc0>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00f      	beq.n	800593c <TIM_OC4_SetConfig+0x84>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a17      	ldr	r2, [pc, #92]	; (800597c <TIM_OC4_SetConfig+0xc4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00b      	beq.n	800593c <TIM_OC4_SetConfig+0x84>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a16      	ldr	r2, [pc, #88]	; (8005980 <TIM_OC4_SetConfig+0xc8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d007      	beq.n	800593c <TIM_OC4_SetConfig+0x84>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a15      	ldr	r2, [pc, #84]	; (8005984 <TIM_OC4_SetConfig+0xcc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_OC4_SetConfig+0x84>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a14      	ldr	r2, [pc, #80]	; (8005988 <TIM_OC4_SetConfig+0xd0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d109      	bne.n	8005950 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005942:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	019b      	lsls	r3, r3, #6
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	621a      	str	r2, [r3, #32]
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40012c00 	.word	0x40012c00
 800597c:	40013400 	.word	0x40013400
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800

0800598c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80059d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	041b      	lsls	r3, r3, #16
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a17      	ldr	r2, [pc, #92]	; (8005a40 <TIM_OC5_SetConfig+0xb4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00f      	beq.n	8005a06 <TIM_OC5_SetConfig+0x7a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a16      	ldr	r2, [pc, #88]	; (8005a44 <TIM_OC5_SetConfig+0xb8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00b      	beq.n	8005a06 <TIM_OC5_SetConfig+0x7a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a15      	ldr	r2, [pc, #84]	; (8005a48 <TIM_OC5_SetConfig+0xbc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d007      	beq.n	8005a06 <TIM_OC5_SetConfig+0x7a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a14      	ldr	r2, [pc, #80]	; (8005a4c <TIM_OC5_SetConfig+0xc0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d003      	beq.n	8005a06 <TIM_OC5_SetConfig+0x7a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a13      	ldr	r2, [pc, #76]	; (8005a50 <TIM_OC5_SetConfig+0xc4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d109      	bne.n	8005a1a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	021b      	lsls	r3, r3, #8
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	621a      	str	r2, [r3, #32]
}
 8005a34:	bf00      	nop
 8005a36:	371c      	adds	r7, #28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	40012c00 	.word	0x40012c00
 8005a44:	40013400 	.word	0x40013400
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40014400 	.word	0x40014400
 8005a50:	40014800 	.word	0x40014800

08005a54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	021b      	lsls	r3, r3, #8
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	051b      	lsls	r3, r3, #20
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a18      	ldr	r2, [pc, #96]	; (8005b0c <TIM_OC6_SetConfig+0xb8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00f      	beq.n	8005ad0 <TIM_OC6_SetConfig+0x7c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a17      	ldr	r2, [pc, #92]	; (8005b10 <TIM_OC6_SetConfig+0xbc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00b      	beq.n	8005ad0 <TIM_OC6_SetConfig+0x7c>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a16      	ldr	r2, [pc, #88]	; (8005b14 <TIM_OC6_SetConfig+0xc0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d007      	beq.n	8005ad0 <TIM_OC6_SetConfig+0x7c>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a15      	ldr	r2, [pc, #84]	; (8005b18 <TIM_OC6_SetConfig+0xc4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_OC6_SetConfig+0x7c>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a14      	ldr	r2, [pc, #80]	; (8005b1c <TIM_OC6_SetConfig+0xc8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d109      	bne.n	8005ae4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	029b      	lsls	r3, r3, #10
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	621a      	str	r2, [r3, #32]
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40013400 	.word	0x40013400
 8005b14:	40014000 	.word	0x40014000
 8005b18:	40014400 	.word	0x40014400
 8005b1c:	40014800 	.word	0x40014800

08005b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	f023 0201 	bic.w	r2, r3, #1
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f023 030a 	bic.w	r3, r3, #10
 8005b5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	621a      	str	r2, [r3, #32]
}
 8005b72:	bf00      	nop
 8005b74:	371c      	adds	r7, #28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b087      	sub	sp, #28
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	f023 0210 	bic.w	r2, r3, #16
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ba8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	031b      	lsls	r3, r3, #12
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	621a      	str	r2, [r3, #32]
}
 8005bd2:	bf00      	nop
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b085      	sub	sp, #20
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f043 0307 	orr.w	r3, r3, #7
 8005c00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	609a      	str	r2, [r3, #8]
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	021a      	lsls	r2, r3, #8
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	431a      	orrs	r2, r3
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	609a      	str	r2, [r3, #8]
}
 8005c48:	bf00      	nop
 8005c4a:	371c      	adds	r7, #28
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f003 031f 	and.w	r3, r3, #31
 8005c66:	2201      	movs	r2, #1
 8005c68:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6a1a      	ldr	r2, [r3, #32]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	43db      	mvns	r3, r3
 8005c76:	401a      	ands	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a1a      	ldr	r2, [r3, #32]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 031f 	and.w	r3, r3, #31
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	621a      	str	r2, [r3, #32]
}
 8005c92:	bf00      	nop
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
	...

08005ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e068      	b.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a2e      	ldr	r2, [pc, #184]	; (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d004      	beq.n	8005cec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a2d      	ldr	r2, [pc, #180]	; (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d108      	bne.n	8005cfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cf2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1e      	ldr	r2, [pc, #120]	; (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d01d      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2a:	d018      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a1b      	ldr	r2, [pc, #108]	; (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d013      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a1a      	ldr	r2, [pc, #104]	; (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00e      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a18      	ldr	r2, [pc, #96]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d009      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a13      	ldr	r2, [pc, #76]	; (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d004      	beq.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a14      	ldr	r2, [pc, #80]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d10c      	bne.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40012c00 	.word	0x40012c00
 8005d9c:	40013400 	.word	0x40013400
 8005da0:	40000400 	.word	0x40000400
 8005da4:	40000800 	.word	0x40000800
 8005da8:	40000c00 	.word	0x40000c00
 8005dac:	40014000 	.word	0x40014000

08005db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e040      	b.n	8005e80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d106      	bne.n	8005e14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7fb febc 	bl	8001b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2224      	movs	r2, #36	; 0x24
 8005e18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0201 	bic.w	r2, r2, #1
 8005e28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f8c0 	bl	8005fb0 <UART_SetConfig>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e022      	b.n	8005e80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fb3e 	bl	80064c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689a      	ldr	r2, [r3, #8]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0201 	orr.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fbc5 	bl	8006608 <UART_CheckIdleState>
 8005e7e:	4603      	mov	r3, r0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08a      	sub	sp, #40	; 0x28
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	4613      	mov	r3, r2
 8005e96:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e9c:	2b20      	cmp	r3, #32
 8005e9e:	f040 8082 	bne.w	8005fa6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <HAL_UART_Transmit+0x26>
 8005ea8:	88fb      	ldrh	r3, [r7, #6]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e07a      	b.n	8005fa8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_UART_Transmit+0x38>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e073      	b.n	8005fa8 <HAL_UART_Transmit+0x120>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2221      	movs	r2, #33	; 0x21
 8005ed4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ed6:	f7fc f87f 	bl	8001fd8 <HAL_GetTick>
 8005eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	88fa      	ldrh	r2, [r7, #6]
 8005ee0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	88fa      	ldrh	r2, [r7, #6]
 8005ee8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef4:	d108      	bne.n	8005f08 <HAL_UART_Transmit+0x80>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d104      	bne.n	8005f08 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	e003      	b.n	8005f10 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005f18:	e02d      	b.n	8005f76 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2200      	movs	r2, #0
 8005f22:	2180      	movs	r1, #128	; 0x80
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 fbb8 	bl	800669a <UART_WaitOnFlagUntilTimeout>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e039      	b.n	8005fa8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10b      	bne.n	8005f52 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	881a      	ldrh	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f46:	b292      	uxth	r2, r2
 8005f48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	3302      	adds	r3, #2
 8005f4e:	61bb      	str	r3, [r7, #24]
 8005f50:	e008      	b.n	8005f64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	781a      	ldrb	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	b292      	uxth	r2, r2
 8005f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	3301      	adds	r3, #1
 8005f62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1cb      	bne.n	8005f1a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2140      	movs	r1, #64	; 0x40
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 fb84 	bl	800669a <UART_WaitOnFlagUntilTimeout>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e005      	b.n	8005fa8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e000      	b.n	8005fa8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005fa6:	2302      	movs	r3, #2
  }
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3720      	adds	r7, #32
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb0:	b5b0      	push	{r4, r5, r7, lr}
 8005fb2:	b088      	sub	sp, #32
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	4bad      	ldr	r3, [pc, #692]	; (8006290 <UART_SetConfig+0x2e0>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6812      	ldr	r2, [r2, #0]
 8005fe2:	69f9      	ldr	r1, [r7, #28]
 8005fe4:	430b      	orrs	r3, r1
 8005fe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4aa2      	ldr	r2, [pc, #648]	; (8006294 <UART_SetConfig+0x2e4>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d004      	beq.n	8006018 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	4313      	orrs	r3, r2
 8006016:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	430a      	orrs	r2, r1
 800602a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a99      	ldr	r2, [pc, #612]	; (8006298 <UART_SetConfig+0x2e8>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d121      	bne.n	800607a <UART_SetConfig+0xca>
 8006036:	4b99      	ldr	r3, [pc, #612]	; (800629c <UART_SetConfig+0x2ec>)
 8006038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603c:	f003 0303 	and.w	r3, r3, #3
 8006040:	2b03      	cmp	r3, #3
 8006042:	d817      	bhi.n	8006074 <UART_SetConfig+0xc4>
 8006044:	a201      	add	r2, pc, #4	; (adr r2, 800604c <UART_SetConfig+0x9c>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	0800605d 	.word	0x0800605d
 8006050:	08006069 	.word	0x08006069
 8006054:	08006063 	.word	0x08006063
 8006058:	0800606f 	.word	0x0800606f
 800605c:	2301      	movs	r3, #1
 800605e:	76fb      	strb	r3, [r7, #27]
 8006060:	e0e7      	b.n	8006232 <UART_SetConfig+0x282>
 8006062:	2302      	movs	r3, #2
 8006064:	76fb      	strb	r3, [r7, #27]
 8006066:	e0e4      	b.n	8006232 <UART_SetConfig+0x282>
 8006068:	2304      	movs	r3, #4
 800606a:	76fb      	strb	r3, [r7, #27]
 800606c:	e0e1      	b.n	8006232 <UART_SetConfig+0x282>
 800606e:	2308      	movs	r3, #8
 8006070:	76fb      	strb	r3, [r7, #27]
 8006072:	e0de      	b.n	8006232 <UART_SetConfig+0x282>
 8006074:	2310      	movs	r3, #16
 8006076:	76fb      	strb	r3, [r7, #27]
 8006078:	e0db      	b.n	8006232 <UART_SetConfig+0x282>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a88      	ldr	r2, [pc, #544]	; (80062a0 <UART_SetConfig+0x2f0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d132      	bne.n	80060ea <UART_SetConfig+0x13a>
 8006084:	4b85      	ldr	r3, [pc, #532]	; (800629c <UART_SetConfig+0x2ec>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608a:	f003 030c 	and.w	r3, r3, #12
 800608e:	2b0c      	cmp	r3, #12
 8006090:	d828      	bhi.n	80060e4 <UART_SetConfig+0x134>
 8006092:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <UART_SetConfig+0xe8>)
 8006094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006098:	080060cd 	.word	0x080060cd
 800609c:	080060e5 	.word	0x080060e5
 80060a0:	080060e5 	.word	0x080060e5
 80060a4:	080060e5 	.word	0x080060e5
 80060a8:	080060d9 	.word	0x080060d9
 80060ac:	080060e5 	.word	0x080060e5
 80060b0:	080060e5 	.word	0x080060e5
 80060b4:	080060e5 	.word	0x080060e5
 80060b8:	080060d3 	.word	0x080060d3
 80060bc:	080060e5 	.word	0x080060e5
 80060c0:	080060e5 	.word	0x080060e5
 80060c4:	080060e5 	.word	0x080060e5
 80060c8:	080060df 	.word	0x080060df
 80060cc:	2300      	movs	r3, #0
 80060ce:	76fb      	strb	r3, [r7, #27]
 80060d0:	e0af      	b.n	8006232 <UART_SetConfig+0x282>
 80060d2:	2302      	movs	r3, #2
 80060d4:	76fb      	strb	r3, [r7, #27]
 80060d6:	e0ac      	b.n	8006232 <UART_SetConfig+0x282>
 80060d8:	2304      	movs	r3, #4
 80060da:	76fb      	strb	r3, [r7, #27]
 80060dc:	e0a9      	b.n	8006232 <UART_SetConfig+0x282>
 80060de:	2308      	movs	r3, #8
 80060e0:	76fb      	strb	r3, [r7, #27]
 80060e2:	e0a6      	b.n	8006232 <UART_SetConfig+0x282>
 80060e4:	2310      	movs	r3, #16
 80060e6:	76fb      	strb	r3, [r7, #27]
 80060e8:	e0a3      	b.n	8006232 <UART_SetConfig+0x282>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a6d      	ldr	r2, [pc, #436]	; (80062a4 <UART_SetConfig+0x2f4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d120      	bne.n	8006136 <UART_SetConfig+0x186>
 80060f4:	4b69      	ldr	r3, [pc, #420]	; (800629c <UART_SetConfig+0x2ec>)
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060fe:	2b30      	cmp	r3, #48	; 0x30
 8006100:	d013      	beq.n	800612a <UART_SetConfig+0x17a>
 8006102:	2b30      	cmp	r3, #48	; 0x30
 8006104:	d814      	bhi.n	8006130 <UART_SetConfig+0x180>
 8006106:	2b20      	cmp	r3, #32
 8006108:	d009      	beq.n	800611e <UART_SetConfig+0x16e>
 800610a:	2b20      	cmp	r3, #32
 800610c:	d810      	bhi.n	8006130 <UART_SetConfig+0x180>
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <UART_SetConfig+0x168>
 8006112:	2b10      	cmp	r3, #16
 8006114:	d006      	beq.n	8006124 <UART_SetConfig+0x174>
 8006116:	e00b      	b.n	8006130 <UART_SetConfig+0x180>
 8006118:	2300      	movs	r3, #0
 800611a:	76fb      	strb	r3, [r7, #27]
 800611c:	e089      	b.n	8006232 <UART_SetConfig+0x282>
 800611e:	2302      	movs	r3, #2
 8006120:	76fb      	strb	r3, [r7, #27]
 8006122:	e086      	b.n	8006232 <UART_SetConfig+0x282>
 8006124:	2304      	movs	r3, #4
 8006126:	76fb      	strb	r3, [r7, #27]
 8006128:	e083      	b.n	8006232 <UART_SetConfig+0x282>
 800612a:	2308      	movs	r3, #8
 800612c:	76fb      	strb	r3, [r7, #27]
 800612e:	e080      	b.n	8006232 <UART_SetConfig+0x282>
 8006130:	2310      	movs	r3, #16
 8006132:	76fb      	strb	r3, [r7, #27]
 8006134:	e07d      	b.n	8006232 <UART_SetConfig+0x282>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a5b      	ldr	r2, [pc, #364]	; (80062a8 <UART_SetConfig+0x2f8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d120      	bne.n	8006182 <UART_SetConfig+0x1d2>
 8006140:	4b56      	ldr	r3, [pc, #344]	; (800629c <UART_SetConfig+0x2ec>)
 8006142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006146:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800614a:	2bc0      	cmp	r3, #192	; 0xc0
 800614c:	d013      	beq.n	8006176 <UART_SetConfig+0x1c6>
 800614e:	2bc0      	cmp	r3, #192	; 0xc0
 8006150:	d814      	bhi.n	800617c <UART_SetConfig+0x1cc>
 8006152:	2b80      	cmp	r3, #128	; 0x80
 8006154:	d009      	beq.n	800616a <UART_SetConfig+0x1ba>
 8006156:	2b80      	cmp	r3, #128	; 0x80
 8006158:	d810      	bhi.n	800617c <UART_SetConfig+0x1cc>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <UART_SetConfig+0x1b4>
 800615e:	2b40      	cmp	r3, #64	; 0x40
 8006160:	d006      	beq.n	8006170 <UART_SetConfig+0x1c0>
 8006162:	e00b      	b.n	800617c <UART_SetConfig+0x1cc>
 8006164:	2300      	movs	r3, #0
 8006166:	76fb      	strb	r3, [r7, #27]
 8006168:	e063      	b.n	8006232 <UART_SetConfig+0x282>
 800616a:	2302      	movs	r3, #2
 800616c:	76fb      	strb	r3, [r7, #27]
 800616e:	e060      	b.n	8006232 <UART_SetConfig+0x282>
 8006170:	2304      	movs	r3, #4
 8006172:	76fb      	strb	r3, [r7, #27]
 8006174:	e05d      	b.n	8006232 <UART_SetConfig+0x282>
 8006176:	2308      	movs	r3, #8
 8006178:	76fb      	strb	r3, [r7, #27]
 800617a:	e05a      	b.n	8006232 <UART_SetConfig+0x282>
 800617c:	2310      	movs	r3, #16
 800617e:	76fb      	strb	r3, [r7, #27]
 8006180:	e057      	b.n	8006232 <UART_SetConfig+0x282>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a49      	ldr	r2, [pc, #292]	; (80062ac <UART_SetConfig+0x2fc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d125      	bne.n	80061d8 <UART_SetConfig+0x228>
 800618c:	4b43      	ldr	r3, [pc, #268]	; (800629c <UART_SetConfig+0x2ec>)
 800618e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800619a:	d017      	beq.n	80061cc <UART_SetConfig+0x21c>
 800619c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a0:	d817      	bhi.n	80061d2 <UART_SetConfig+0x222>
 80061a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a6:	d00b      	beq.n	80061c0 <UART_SetConfig+0x210>
 80061a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ac:	d811      	bhi.n	80061d2 <UART_SetConfig+0x222>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <UART_SetConfig+0x20a>
 80061b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b6:	d006      	beq.n	80061c6 <UART_SetConfig+0x216>
 80061b8:	e00b      	b.n	80061d2 <UART_SetConfig+0x222>
 80061ba:	2300      	movs	r3, #0
 80061bc:	76fb      	strb	r3, [r7, #27]
 80061be:	e038      	b.n	8006232 <UART_SetConfig+0x282>
 80061c0:	2302      	movs	r3, #2
 80061c2:	76fb      	strb	r3, [r7, #27]
 80061c4:	e035      	b.n	8006232 <UART_SetConfig+0x282>
 80061c6:	2304      	movs	r3, #4
 80061c8:	76fb      	strb	r3, [r7, #27]
 80061ca:	e032      	b.n	8006232 <UART_SetConfig+0x282>
 80061cc:	2308      	movs	r3, #8
 80061ce:	76fb      	strb	r3, [r7, #27]
 80061d0:	e02f      	b.n	8006232 <UART_SetConfig+0x282>
 80061d2:	2310      	movs	r3, #16
 80061d4:	76fb      	strb	r3, [r7, #27]
 80061d6:	e02c      	b.n	8006232 <UART_SetConfig+0x282>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a2d      	ldr	r2, [pc, #180]	; (8006294 <UART_SetConfig+0x2e4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d125      	bne.n	800622e <UART_SetConfig+0x27e>
 80061e2:	4b2e      	ldr	r3, [pc, #184]	; (800629c <UART_SetConfig+0x2ec>)
 80061e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061f0:	d017      	beq.n	8006222 <UART_SetConfig+0x272>
 80061f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061f6:	d817      	bhi.n	8006228 <UART_SetConfig+0x278>
 80061f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061fc:	d00b      	beq.n	8006216 <UART_SetConfig+0x266>
 80061fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006202:	d811      	bhi.n	8006228 <UART_SetConfig+0x278>
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <UART_SetConfig+0x260>
 8006208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800620c:	d006      	beq.n	800621c <UART_SetConfig+0x26c>
 800620e:	e00b      	b.n	8006228 <UART_SetConfig+0x278>
 8006210:	2300      	movs	r3, #0
 8006212:	76fb      	strb	r3, [r7, #27]
 8006214:	e00d      	b.n	8006232 <UART_SetConfig+0x282>
 8006216:	2302      	movs	r3, #2
 8006218:	76fb      	strb	r3, [r7, #27]
 800621a:	e00a      	b.n	8006232 <UART_SetConfig+0x282>
 800621c:	2304      	movs	r3, #4
 800621e:	76fb      	strb	r3, [r7, #27]
 8006220:	e007      	b.n	8006232 <UART_SetConfig+0x282>
 8006222:	2308      	movs	r3, #8
 8006224:	76fb      	strb	r3, [r7, #27]
 8006226:	e004      	b.n	8006232 <UART_SetConfig+0x282>
 8006228:	2310      	movs	r3, #16
 800622a:	76fb      	strb	r3, [r7, #27]
 800622c:	e001      	b.n	8006232 <UART_SetConfig+0x282>
 800622e:	2310      	movs	r3, #16
 8006230:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a17      	ldr	r2, [pc, #92]	; (8006294 <UART_SetConfig+0x2e4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	f040 8087 	bne.w	800634c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800623e:	7efb      	ldrb	r3, [r7, #27]
 8006240:	2b08      	cmp	r3, #8
 8006242:	d837      	bhi.n	80062b4 <UART_SetConfig+0x304>
 8006244:	a201      	add	r2, pc, #4	; (adr r2, 800624c <UART_SetConfig+0x29c>)
 8006246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624a:	bf00      	nop
 800624c:	08006271 	.word	0x08006271
 8006250:	080062b5 	.word	0x080062b5
 8006254:	08006279 	.word	0x08006279
 8006258:	080062b5 	.word	0x080062b5
 800625c:	0800627f 	.word	0x0800627f
 8006260:	080062b5 	.word	0x080062b5
 8006264:	080062b5 	.word	0x080062b5
 8006268:	080062b5 	.word	0x080062b5
 800626c:	08006287 	.word	0x08006287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006270:	f7fd f972 	bl	8003558 <HAL_RCC_GetPCLK1Freq>
 8006274:	6178      	str	r0, [r7, #20]
        break;
 8006276:	e022      	b.n	80062be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006278:	4b0d      	ldr	r3, [pc, #52]	; (80062b0 <UART_SetConfig+0x300>)
 800627a:	617b      	str	r3, [r7, #20]
        break;
 800627c:	e01f      	b.n	80062be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800627e:	f7fd f8d3 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 8006282:	6178      	str	r0, [r7, #20]
        break;
 8006284:	e01b      	b.n	80062be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800628a:	617b      	str	r3, [r7, #20]
        break;
 800628c:	e017      	b.n	80062be <UART_SetConfig+0x30e>
 800628e:	bf00      	nop
 8006290:	efff69f3 	.word	0xefff69f3
 8006294:	40008000 	.word	0x40008000
 8006298:	40013800 	.word	0x40013800
 800629c:	40021000 	.word	0x40021000
 80062a0:	40004400 	.word	0x40004400
 80062a4:	40004800 	.word	0x40004800
 80062a8:	40004c00 	.word	0x40004c00
 80062ac:	40005000 	.word	0x40005000
 80062b0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	76bb      	strb	r3, [r7, #26]
        break;
 80062bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 80f1 	beq.w	80064a8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	4613      	mov	r3, r2
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	4413      	add	r3, r2
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d305      	bcc.n	80062e2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d902      	bls.n	80062e8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	76bb      	strb	r3, [r7, #26]
 80062e6:	e0df      	b.n	80064a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f04f 0100 	mov.w	r1, #0
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	020b      	lsls	r3, r1, #8
 80062fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062fe:	0202      	lsls	r2, r0, #8
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	6849      	ldr	r1, [r1, #4]
 8006304:	0849      	lsrs	r1, r1, #1
 8006306:	4608      	mov	r0, r1
 8006308:	f04f 0100 	mov.w	r1, #0
 800630c:	1814      	adds	r4, r2, r0
 800630e:	eb43 0501 	adc.w	r5, r3, r1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	461a      	mov	r2, r3
 8006318:	f04f 0300 	mov.w	r3, #0
 800631c:	4620      	mov	r0, r4
 800631e:	4629      	mov	r1, r5
 8006320:	f7fa fc92 	bl	8000c48 <__aeabi_uldivmod>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4613      	mov	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006332:	d308      	bcc.n	8006346 <UART_SetConfig+0x396>
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800633a:	d204      	bcs.n	8006346 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	60da      	str	r2, [r3, #12]
 8006344:	e0b0      	b.n	80064a8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	76bb      	strb	r3, [r7, #26]
 800634a:	e0ad      	b.n	80064a8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006354:	d15c      	bne.n	8006410 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006356:	7efb      	ldrb	r3, [r7, #27]
 8006358:	2b08      	cmp	r3, #8
 800635a:	d828      	bhi.n	80063ae <UART_SetConfig+0x3fe>
 800635c:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <UART_SetConfig+0x3b4>)
 800635e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006362:	bf00      	nop
 8006364:	08006389 	.word	0x08006389
 8006368:	08006391 	.word	0x08006391
 800636c:	08006399 	.word	0x08006399
 8006370:	080063af 	.word	0x080063af
 8006374:	0800639f 	.word	0x0800639f
 8006378:	080063af 	.word	0x080063af
 800637c:	080063af 	.word	0x080063af
 8006380:	080063af 	.word	0x080063af
 8006384:	080063a7 	.word	0x080063a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006388:	f7fd f8e6 	bl	8003558 <HAL_RCC_GetPCLK1Freq>
 800638c:	6178      	str	r0, [r7, #20]
        break;
 800638e:	e013      	b.n	80063b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006390:	f7fd f8f8 	bl	8003584 <HAL_RCC_GetPCLK2Freq>
 8006394:	6178      	str	r0, [r7, #20]
        break;
 8006396:	e00f      	b.n	80063b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006398:	4b49      	ldr	r3, [pc, #292]	; (80064c0 <UART_SetConfig+0x510>)
 800639a:	617b      	str	r3, [r7, #20]
        break;
 800639c:	e00c      	b.n	80063b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800639e:	f7fd f843 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80063a2:	6178      	str	r0, [r7, #20]
        break;
 80063a4:	e008      	b.n	80063b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063aa:	617b      	str	r3, [r7, #20]
        break;
 80063ac:	e004      	b.n	80063b8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	76bb      	strb	r3, [r7, #26]
        break;
 80063b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d074      	beq.n	80064a8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	005a      	lsls	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	085b      	lsrs	r3, r3, #1
 80063c8:	441a      	add	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	2b0f      	cmp	r3, #15
 80063da:	d916      	bls.n	800640a <UART_SetConfig+0x45a>
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e2:	d212      	bcs.n	800640a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	f023 030f 	bic.w	r3, r3, #15
 80063ec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	085b      	lsrs	r3, r3, #1
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	89fb      	ldrh	r3, [r7, #14]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	89fa      	ldrh	r2, [r7, #14]
 8006406:	60da      	str	r2, [r3, #12]
 8006408:	e04e      	b.n	80064a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	76bb      	strb	r3, [r7, #26]
 800640e:	e04b      	b.n	80064a8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006410:	7efb      	ldrb	r3, [r7, #27]
 8006412:	2b08      	cmp	r3, #8
 8006414:	d827      	bhi.n	8006466 <UART_SetConfig+0x4b6>
 8006416:	a201      	add	r2, pc, #4	; (adr r2, 800641c <UART_SetConfig+0x46c>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	08006441 	.word	0x08006441
 8006420:	08006449 	.word	0x08006449
 8006424:	08006451 	.word	0x08006451
 8006428:	08006467 	.word	0x08006467
 800642c:	08006457 	.word	0x08006457
 8006430:	08006467 	.word	0x08006467
 8006434:	08006467 	.word	0x08006467
 8006438:	08006467 	.word	0x08006467
 800643c:	0800645f 	.word	0x0800645f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006440:	f7fd f88a 	bl	8003558 <HAL_RCC_GetPCLK1Freq>
 8006444:	6178      	str	r0, [r7, #20]
        break;
 8006446:	e013      	b.n	8006470 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006448:	f7fd f89c 	bl	8003584 <HAL_RCC_GetPCLK2Freq>
 800644c:	6178      	str	r0, [r7, #20]
        break;
 800644e:	e00f      	b.n	8006470 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006450:	4b1b      	ldr	r3, [pc, #108]	; (80064c0 <UART_SetConfig+0x510>)
 8006452:	617b      	str	r3, [r7, #20]
        break;
 8006454:	e00c      	b.n	8006470 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006456:	f7fc ffe7 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 800645a:	6178      	str	r0, [r7, #20]
        break;
 800645c:	e008      	b.n	8006470 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800645e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006462:	617b      	str	r3, [r7, #20]
        break;
 8006464:	e004      	b.n	8006470 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	76bb      	strb	r3, [r7, #26]
        break;
 800646e:	bf00      	nop
    }

    if (pclk != 0U)
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d018      	beq.n	80064a8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	085a      	lsrs	r2, r3, #1
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	441a      	add	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	fbb2 f3f3 	udiv	r3, r2, r3
 8006488:	b29b      	uxth	r3, r3
 800648a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	2b0f      	cmp	r3, #15
 8006490:	d908      	bls.n	80064a4 <UART_SetConfig+0x4f4>
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006498:	d204      	bcs.n	80064a4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	60da      	str	r2, [r3, #12]
 80064a2:	e001      	b.n	80064a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80064b4:	7ebb      	ldrb	r3, [r7, #26]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3720      	adds	r7, #32
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bdb0      	pop	{r4, r5, r7, pc}
 80064be:	bf00      	nop
 80064c0:	00f42400 	.word	0x00f42400

080064c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00a      	beq.n	80064ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00a      	beq.n	8006510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00a      	beq.n	8006532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00a      	beq.n	8006554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00a      	beq.n	8006576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00a      	beq.n	8006598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d01a      	beq.n	80065da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065c2:	d10a      	bne.n	80065da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
  }
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af02      	add	r7, sp, #8
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006618:	f7fb fcde 	bl	8001fd8 <HAL_GetTick>
 800661c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0308 	and.w	r3, r3, #8
 8006628:	2b08      	cmp	r3, #8
 800662a:	d10e      	bne.n	800664a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800662c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f82d 	bl	800669a <UART_WaitOnFlagUntilTimeout>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e023      	b.n	8006692 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b04      	cmp	r3, #4
 8006656:	d10e      	bne.n	8006676 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f817 	bl	800669a <UART_WaitOnFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e00d      	b.n	8006692 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2220      	movs	r2, #32
 800667a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	60b9      	str	r1, [r7, #8]
 80066a4:	603b      	str	r3, [r7, #0]
 80066a6:	4613      	mov	r3, r2
 80066a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066aa:	e05e      	b.n	800676a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d05a      	beq.n	800676a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b4:	f7fb fc90 	bl	8001fd8 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d302      	bcc.n	80066ca <UART_WaitOnFlagUntilTimeout+0x30>
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d11b      	bne.n	8006702 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066d8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 0201 	bic.w	r2, r2, #1
 80066e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2220      	movs	r2, #32
 80066ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e043      	b.n	800678a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	d02c      	beq.n	800676a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800671a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800671e:	d124      	bne.n	800676a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006728:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006738:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0201 	bic.w	r2, r2, #1
 8006748:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2220      	movs	r2, #32
 800674e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2220      	movs	r2, #32
 8006754:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2220      	movs	r2, #32
 800675a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e00f      	b.n	800678a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69da      	ldr	r2, [r3, #28]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	4013      	ands	r3, r2
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	429a      	cmp	r2, r3
 8006778:	bf0c      	ite	eq
 800677a:	2301      	moveq	r3, #1
 800677c:	2300      	movne	r3, #0
 800677e:	b2db      	uxtb	r3, r3
 8006780:	461a      	mov	r2, r3
 8006782:	79fb      	ldrb	r3, [r7, #7]
 8006784:	429a      	cmp	r2, r3
 8006786:	d091      	beq.n	80066ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <__errno>:
 8006794:	4b01      	ldr	r3, [pc, #4]	; (800679c <__errno+0x8>)
 8006796:	6818      	ldr	r0, [r3, #0]
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	2000000c 	.word	0x2000000c

080067a0 <__libc_init_array>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	4d0d      	ldr	r5, [pc, #52]	; (80067d8 <__libc_init_array+0x38>)
 80067a4:	4c0d      	ldr	r4, [pc, #52]	; (80067dc <__libc_init_array+0x3c>)
 80067a6:	1b64      	subs	r4, r4, r5
 80067a8:	10a4      	asrs	r4, r4, #2
 80067aa:	2600      	movs	r6, #0
 80067ac:	42a6      	cmp	r6, r4
 80067ae:	d109      	bne.n	80067c4 <__libc_init_array+0x24>
 80067b0:	4d0b      	ldr	r5, [pc, #44]	; (80067e0 <__libc_init_array+0x40>)
 80067b2:	4c0c      	ldr	r4, [pc, #48]	; (80067e4 <__libc_init_array+0x44>)
 80067b4:	f002 feb6 	bl	8009524 <_init>
 80067b8:	1b64      	subs	r4, r4, r5
 80067ba:	10a4      	asrs	r4, r4, #2
 80067bc:	2600      	movs	r6, #0
 80067be:	42a6      	cmp	r6, r4
 80067c0:	d105      	bne.n	80067ce <__libc_init_array+0x2e>
 80067c2:	bd70      	pop	{r4, r5, r6, pc}
 80067c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c8:	4798      	blx	r3
 80067ca:	3601      	adds	r6, #1
 80067cc:	e7ee      	b.n	80067ac <__libc_init_array+0xc>
 80067ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80067d2:	4798      	blx	r3
 80067d4:	3601      	adds	r6, #1
 80067d6:	e7f2      	b.n	80067be <__libc_init_array+0x1e>
 80067d8:	08009a1c 	.word	0x08009a1c
 80067dc:	08009a1c 	.word	0x08009a1c
 80067e0:	08009a1c 	.word	0x08009a1c
 80067e4:	08009a20 	.word	0x08009a20

080067e8 <memset>:
 80067e8:	4402      	add	r2, r0
 80067ea:	4603      	mov	r3, r0
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d100      	bne.n	80067f2 <memset+0xa>
 80067f0:	4770      	bx	lr
 80067f2:	f803 1b01 	strb.w	r1, [r3], #1
 80067f6:	e7f9      	b.n	80067ec <memset+0x4>

080067f8 <__cvt>:
 80067f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067fc:	ec55 4b10 	vmov	r4, r5, d0
 8006800:	2d00      	cmp	r5, #0
 8006802:	460e      	mov	r6, r1
 8006804:	4619      	mov	r1, r3
 8006806:	462b      	mov	r3, r5
 8006808:	bfbb      	ittet	lt
 800680a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800680e:	461d      	movlt	r5, r3
 8006810:	2300      	movge	r3, #0
 8006812:	232d      	movlt	r3, #45	; 0x2d
 8006814:	700b      	strb	r3, [r1, #0]
 8006816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006818:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800681c:	4691      	mov	r9, r2
 800681e:	f023 0820 	bic.w	r8, r3, #32
 8006822:	bfbc      	itt	lt
 8006824:	4622      	movlt	r2, r4
 8006826:	4614      	movlt	r4, r2
 8006828:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800682c:	d005      	beq.n	800683a <__cvt+0x42>
 800682e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006832:	d100      	bne.n	8006836 <__cvt+0x3e>
 8006834:	3601      	adds	r6, #1
 8006836:	2102      	movs	r1, #2
 8006838:	e000      	b.n	800683c <__cvt+0x44>
 800683a:	2103      	movs	r1, #3
 800683c:	ab03      	add	r3, sp, #12
 800683e:	9301      	str	r3, [sp, #4]
 8006840:	ab02      	add	r3, sp, #8
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	ec45 4b10 	vmov	d0, r4, r5
 8006848:	4653      	mov	r3, sl
 800684a:	4632      	mov	r2, r6
 800684c:	f000 fcec 	bl	8007228 <_dtoa_r>
 8006850:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006854:	4607      	mov	r7, r0
 8006856:	d102      	bne.n	800685e <__cvt+0x66>
 8006858:	f019 0f01 	tst.w	r9, #1
 800685c:	d022      	beq.n	80068a4 <__cvt+0xac>
 800685e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006862:	eb07 0906 	add.w	r9, r7, r6
 8006866:	d110      	bne.n	800688a <__cvt+0x92>
 8006868:	783b      	ldrb	r3, [r7, #0]
 800686a:	2b30      	cmp	r3, #48	; 0x30
 800686c:	d10a      	bne.n	8006884 <__cvt+0x8c>
 800686e:	2200      	movs	r2, #0
 8006870:	2300      	movs	r3, #0
 8006872:	4620      	mov	r0, r4
 8006874:	4629      	mov	r1, r5
 8006876:	f7fa f927 	bl	8000ac8 <__aeabi_dcmpeq>
 800687a:	b918      	cbnz	r0, 8006884 <__cvt+0x8c>
 800687c:	f1c6 0601 	rsb	r6, r6, #1
 8006880:	f8ca 6000 	str.w	r6, [sl]
 8006884:	f8da 3000 	ldr.w	r3, [sl]
 8006888:	4499      	add	r9, r3
 800688a:	2200      	movs	r2, #0
 800688c:	2300      	movs	r3, #0
 800688e:	4620      	mov	r0, r4
 8006890:	4629      	mov	r1, r5
 8006892:	f7fa f919 	bl	8000ac8 <__aeabi_dcmpeq>
 8006896:	b108      	cbz	r0, 800689c <__cvt+0xa4>
 8006898:	f8cd 900c 	str.w	r9, [sp, #12]
 800689c:	2230      	movs	r2, #48	; 0x30
 800689e:	9b03      	ldr	r3, [sp, #12]
 80068a0:	454b      	cmp	r3, r9
 80068a2:	d307      	bcc.n	80068b4 <__cvt+0xbc>
 80068a4:	9b03      	ldr	r3, [sp, #12]
 80068a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068a8:	1bdb      	subs	r3, r3, r7
 80068aa:	4638      	mov	r0, r7
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	b004      	add	sp, #16
 80068b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b4:	1c59      	adds	r1, r3, #1
 80068b6:	9103      	str	r1, [sp, #12]
 80068b8:	701a      	strb	r2, [r3, #0]
 80068ba:	e7f0      	b.n	800689e <__cvt+0xa6>

080068bc <__exponent>:
 80068bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068be:	4603      	mov	r3, r0
 80068c0:	2900      	cmp	r1, #0
 80068c2:	bfb8      	it	lt
 80068c4:	4249      	neglt	r1, r1
 80068c6:	f803 2b02 	strb.w	r2, [r3], #2
 80068ca:	bfb4      	ite	lt
 80068cc:	222d      	movlt	r2, #45	; 0x2d
 80068ce:	222b      	movge	r2, #43	; 0x2b
 80068d0:	2909      	cmp	r1, #9
 80068d2:	7042      	strb	r2, [r0, #1]
 80068d4:	dd2a      	ble.n	800692c <__exponent+0x70>
 80068d6:	f10d 0407 	add.w	r4, sp, #7
 80068da:	46a4      	mov	ip, r4
 80068dc:	270a      	movs	r7, #10
 80068de:	46a6      	mov	lr, r4
 80068e0:	460a      	mov	r2, r1
 80068e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80068e6:	fb07 1516 	mls	r5, r7, r6, r1
 80068ea:	3530      	adds	r5, #48	; 0x30
 80068ec:	2a63      	cmp	r2, #99	; 0x63
 80068ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80068f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80068f6:	4631      	mov	r1, r6
 80068f8:	dcf1      	bgt.n	80068de <__exponent+0x22>
 80068fa:	3130      	adds	r1, #48	; 0x30
 80068fc:	f1ae 0502 	sub.w	r5, lr, #2
 8006900:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006904:	1c44      	adds	r4, r0, #1
 8006906:	4629      	mov	r1, r5
 8006908:	4561      	cmp	r1, ip
 800690a:	d30a      	bcc.n	8006922 <__exponent+0x66>
 800690c:	f10d 0209 	add.w	r2, sp, #9
 8006910:	eba2 020e 	sub.w	r2, r2, lr
 8006914:	4565      	cmp	r5, ip
 8006916:	bf88      	it	hi
 8006918:	2200      	movhi	r2, #0
 800691a:	4413      	add	r3, r2
 800691c:	1a18      	subs	r0, r3, r0
 800691e:	b003      	add	sp, #12
 8006920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006926:	f804 2f01 	strb.w	r2, [r4, #1]!
 800692a:	e7ed      	b.n	8006908 <__exponent+0x4c>
 800692c:	2330      	movs	r3, #48	; 0x30
 800692e:	3130      	adds	r1, #48	; 0x30
 8006930:	7083      	strb	r3, [r0, #2]
 8006932:	70c1      	strb	r1, [r0, #3]
 8006934:	1d03      	adds	r3, r0, #4
 8006936:	e7f1      	b.n	800691c <__exponent+0x60>

08006938 <_printf_float>:
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	ed2d 8b02 	vpush	{d8}
 8006940:	b08d      	sub	sp, #52	; 0x34
 8006942:	460c      	mov	r4, r1
 8006944:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006948:	4616      	mov	r6, r2
 800694a:	461f      	mov	r7, r3
 800694c:	4605      	mov	r5, r0
 800694e:	f001 fa57 	bl	8007e00 <_localeconv_r>
 8006952:	f8d0 a000 	ldr.w	sl, [r0]
 8006956:	4650      	mov	r0, sl
 8006958:	f7f9 fc3a 	bl	80001d0 <strlen>
 800695c:	2300      	movs	r3, #0
 800695e:	930a      	str	r3, [sp, #40]	; 0x28
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	9305      	str	r3, [sp, #20]
 8006964:	f8d8 3000 	ldr.w	r3, [r8]
 8006968:	f894 b018 	ldrb.w	fp, [r4, #24]
 800696c:	3307      	adds	r3, #7
 800696e:	f023 0307 	bic.w	r3, r3, #7
 8006972:	f103 0208 	add.w	r2, r3, #8
 8006976:	f8c8 2000 	str.w	r2, [r8]
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006982:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006986:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800698a:	9307      	str	r3, [sp, #28]
 800698c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006990:	ee08 0a10 	vmov	s16, r0
 8006994:	4b9f      	ldr	r3, [pc, #636]	; (8006c14 <_printf_float+0x2dc>)
 8006996:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800699a:	f04f 32ff 	mov.w	r2, #4294967295
 800699e:	f7fa f8c5 	bl	8000b2c <__aeabi_dcmpun>
 80069a2:	bb88      	cbnz	r0, 8006a08 <_printf_float+0xd0>
 80069a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069a8:	4b9a      	ldr	r3, [pc, #616]	; (8006c14 <_printf_float+0x2dc>)
 80069aa:	f04f 32ff 	mov.w	r2, #4294967295
 80069ae:	f7fa f89f 	bl	8000af0 <__aeabi_dcmple>
 80069b2:	bb48      	cbnz	r0, 8006a08 <_printf_float+0xd0>
 80069b4:	2200      	movs	r2, #0
 80069b6:	2300      	movs	r3, #0
 80069b8:	4640      	mov	r0, r8
 80069ba:	4649      	mov	r1, r9
 80069bc:	f7fa f88e 	bl	8000adc <__aeabi_dcmplt>
 80069c0:	b110      	cbz	r0, 80069c8 <_printf_float+0x90>
 80069c2:	232d      	movs	r3, #45	; 0x2d
 80069c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c8:	4b93      	ldr	r3, [pc, #588]	; (8006c18 <_printf_float+0x2e0>)
 80069ca:	4894      	ldr	r0, [pc, #592]	; (8006c1c <_printf_float+0x2e4>)
 80069cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80069d0:	bf94      	ite	ls
 80069d2:	4698      	movls	r8, r3
 80069d4:	4680      	movhi	r8, r0
 80069d6:	2303      	movs	r3, #3
 80069d8:	6123      	str	r3, [r4, #16]
 80069da:	9b05      	ldr	r3, [sp, #20]
 80069dc:	f023 0204 	bic.w	r2, r3, #4
 80069e0:	6022      	str	r2, [r4, #0]
 80069e2:	f04f 0900 	mov.w	r9, #0
 80069e6:	9700      	str	r7, [sp, #0]
 80069e8:	4633      	mov	r3, r6
 80069ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80069ec:	4621      	mov	r1, r4
 80069ee:	4628      	mov	r0, r5
 80069f0:	f000 f9d8 	bl	8006da4 <_printf_common>
 80069f4:	3001      	adds	r0, #1
 80069f6:	f040 8090 	bne.w	8006b1a <_printf_float+0x1e2>
 80069fa:	f04f 30ff 	mov.w	r0, #4294967295
 80069fe:	b00d      	add	sp, #52	; 0x34
 8006a00:	ecbd 8b02 	vpop	{d8}
 8006a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a08:	4642      	mov	r2, r8
 8006a0a:	464b      	mov	r3, r9
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	4649      	mov	r1, r9
 8006a10:	f7fa f88c 	bl	8000b2c <__aeabi_dcmpun>
 8006a14:	b140      	cbz	r0, 8006a28 <_printf_float+0xf0>
 8006a16:	464b      	mov	r3, r9
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	bfbc      	itt	lt
 8006a1c:	232d      	movlt	r3, #45	; 0x2d
 8006a1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a22:	487f      	ldr	r0, [pc, #508]	; (8006c20 <_printf_float+0x2e8>)
 8006a24:	4b7f      	ldr	r3, [pc, #508]	; (8006c24 <_printf_float+0x2ec>)
 8006a26:	e7d1      	b.n	80069cc <_printf_float+0x94>
 8006a28:	6863      	ldr	r3, [r4, #4]
 8006a2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a2e:	9206      	str	r2, [sp, #24]
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	d13f      	bne.n	8006ab4 <_printf_float+0x17c>
 8006a34:	2306      	movs	r3, #6
 8006a36:	6063      	str	r3, [r4, #4]
 8006a38:	9b05      	ldr	r3, [sp, #20]
 8006a3a:	6861      	ldr	r1, [r4, #4]
 8006a3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a40:	2300      	movs	r3, #0
 8006a42:	9303      	str	r3, [sp, #12]
 8006a44:	ab0a      	add	r3, sp, #40	; 0x28
 8006a46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a4a:	ab09      	add	r3, sp, #36	; 0x24
 8006a4c:	ec49 8b10 	vmov	d0, r8, r9
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	6022      	str	r2, [r4, #0]
 8006a54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f7ff fecd 	bl	80067f8 <__cvt>
 8006a5e:	9b06      	ldr	r3, [sp, #24]
 8006a60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a62:	2b47      	cmp	r3, #71	; 0x47
 8006a64:	4680      	mov	r8, r0
 8006a66:	d108      	bne.n	8006a7a <_printf_float+0x142>
 8006a68:	1cc8      	adds	r0, r1, #3
 8006a6a:	db02      	blt.n	8006a72 <_printf_float+0x13a>
 8006a6c:	6863      	ldr	r3, [r4, #4]
 8006a6e:	4299      	cmp	r1, r3
 8006a70:	dd41      	ble.n	8006af6 <_printf_float+0x1be>
 8006a72:	f1ab 0b02 	sub.w	fp, fp, #2
 8006a76:	fa5f fb8b 	uxtb.w	fp, fp
 8006a7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a7e:	d820      	bhi.n	8006ac2 <_printf_float+0x18a>
 8006a80:	3901      	subs	r1, #1
 8006a82:	465a      	mov	r2, fp
 8006a84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a88:	9109      	str	r1, [sp, #36]	; 0x24
 8006a8a:	f7ff ff17 	bl	80068bc <__exponent>
 8006a8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a90:	1813      	adds	r3, r2, r0
 8006a92:	2a01      	cmp	r2, #1
 8006a94:	4681      	mov	r9, r0
 8006a96:	6123      	str	r3, [r4, #16]
 8006a98:	dc02      	bgt.n	8006aa0 <_printf_float+0x168>
 8006a9a:	6822      	ldr	r2, [r4, #0]
 8006a9c:	07d2      	lsls	r2, r2, #31
 8006a9e:	d501      	bpl.n	8006aa4 <_printf_float+0x16c>
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	6123      	str	r3, [r4, #16]
 8006aa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d09c      	beq.n	80069e6 <_printf_float+0xae>
 8006aac:	232d      	movs	r3, #45	; 0x2d
 8006aae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ab2:	e798      	b.n	80069e6 <_printf_float+0xae>
 8006ab4:	9a06      	ldr	r2, [sp, #24]
 8006ab6:	2a47      	cmp	r2, #71	; 0x47
 8006ab8:	d1be      	bne.n	8006a38 <_printf_float+0x100>
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1bc      	bne.n	8006a38 <_printf_float+0x100>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e7b9      	b.n	8006a36 <_printf_float+0xfe>
 8006ac2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ac6:	d118      	bne.n	8006afa <_printf_float+0x1c2>
 8006ac8:	2900      	cmp	r1, #0
 8006aca:	6863      	ldr	r3, [r4, #4]
 8006acc:	dd0b      	ble.n	8006ae6 <_printf_float+0x1ae>
 8006ace:	6121      	str	r1, [r4, #16]
 8006ad0:	b913      	cbnz	r3, 8006ad8 <_printf_float+0x1a0>
 8006ad2:	6822      	ldr	r2, [r4, #0]
 8006ad4:	07d0      	lsls	r0, r2, #31
 8006ad6:	d502      	bpl.n	8006ade <_printf_float+0x1a6>
 8006ad8:	3301      	adds	r3, #1
 8006ada:	440b      	add	r3, r1
 8006adc:	6123      	str	r3, [r4, #16]
 8006ade:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ae0:	f04f 0900 	mov.w	r9, #0
 8006ae4:	e7de      	b.n	8006aa4 <_printf_float+0x16c>
 8006ae6:	b913      	cbnz	r3, 8006aee <_printf_float+0x1b6>
 8006ae8:	6822      	ldr	r2, [r4, #0]
 8006aea:	07d2      	lsls	r2, r2, #31
 8006aec:	d501      	bpl.n	8006af2 <_printf_float+0x1ba>
 8006aee:	3302      	adds	r3, #2
 8006af0:	e7f4      	b.n	8006adc <_printf_float+0x1a4>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e7f2      	b.n	8006adc <_printf_float+0x1a4>
 8006af6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006afc:	4299      	cmp	r1, r3
 8006afe:	db05      	blt.n	8006b0c <_printf_float+0x1d4>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	6121      	str	r1, [r4, #16]
 8006b04:	07d8      	lsls	r0, r3, #31
 8006b06:	d5ea      	bpl.n	8006ade <_printf_float+0x1a6>
 8006b08:	1c4b      	adds	r3, r1, #1
 8006b0a:	e7e7      	b.n	8006adc <_printf_float+0x1a4>
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	bfd4      	ite	le
 8006b10:	f1c1 0202 	rsble	r2, r1, #2
 8006b14:	2201      	movgt	r2, #1
 8006b16:	4413      	add	r3, r2
 8006b18:	e7e0      	b.n	8006adc <_printf_float+0x1a4>
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	055a      	lsls	r2, r3, #21
 8006b1e:	d407      	bmi.n	8006b30 <_printf_float+0x1f8>
 8006b20:	6923      	ldr	r3, [r4, #16]
 8006b22:	4642      	mov	r2, r8
 8006b24:	4631      	mov	r1, r6
 8006b26:	4628      	mov	r0, r5
 8006b28:	47b8      	blx	r7
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	d12c      	bne.n	8006b88 <_printf_float+0x250>
 8006b2e:	e764      	b.n	80069fa <_printf_float+0xc2>
 8006b30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b34:	f240 80e0 	bls.w	8006cf8 <_printf_float+0x3c0>
 8006b38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f7f9 ffc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d034      	beq.n	8006bb2 <_printf_float+0x27a>
 8006b48:	4a37      	ldr	r2, [pc, #220]	; (8006c28 <_printf_float+0x2f0>)
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	4631      	mov	r1, r6
 8006b4e:	4628      	mov	r0, r5
 8006b50:	47b8      	blx	r7
 8006b52:	3001      	adds	r0, #1
 8006b54:	f43f af51 	beq.w	80069fa <_printf_float+0xc2>
 8006b58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	db02      	blt.n	8006b66 <_printf_float+0x22e>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	07d8      	lsls	r0, r3, #31
 8006b64:	d510      	bpl.n	8006b88 <_printf_float+0x250>
 8006b66:	ee18 3a10 	vmov	r3, s16
 8006b6a:	4652      	mov	r2, sl
 8006b6c:	4631      	mov	r1, r6
 8006b6e:	4628      	mov	r0, r5
 8006b70:	47b8      	blx	r7
 8006b72:	3001      	adds	r0, #1
 8006b74:	f43f af41 	beq.w	80069fa <_printf_float+0xc2>
 8006b78:	f04f 0800 	mov.w	r8, #0
 8006b7c:	f104 091a 	add.w	r9, r4, #26
 8006b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b82:	3b01      	subs	r3, #1
 8006b84:	4543      	cmp	r3, r8
 8006b86:	dc09      	bgt.n	8006b9c <_printf_float+0x264>
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	079b      	lsls	r3, r3, #30
 8006b8c:	f100 8105 	bmi.w	8006d9a <_printf_float+0x462>
 8006b90:	68e0      	ldr	r0, [r4, #12]
 8006b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b94:	4298      	cmp	r0, r3
 8006b96:	bfb8      	it	lt
 8006b98:	4618      	movlt	r0, r3
 8006b9a:	e730      	b.n	80069fe <_printf_float+0xc6>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	464a      	mov	r2, r9
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	47b8      	blx	r7
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	f43f af27 	beq.w	80069fa <_printf_float+0xc2>
 8006bac:	f108 0801 	add.w	r8, r8, #1
 8006bb0:	e7e6      	b.n	8006b80 <_printf_float+0x248>
 8006bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	dc39      	bgt.n	8006c2c <_printf_float+0x2f4>
 8006bb8:	4a1b      	ldr	r2, [pc, #108]	; (8006c28 <_printf_float+0x2f0>)
 8006bba:	2301      	movs	r3, #1
 8006bbc:	4631      	mov	r1, r6
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	47b8      	blx	r7
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	f43f af19 	beq.w	80069fa <_printf_float+0xc2>
 8006bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	d102      	bne.n	8006bd6 <_printf_float+0x29e>
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	07d9      	lsls	r1, r3, #31
 8006bd4:	d5d8      	bpl.n	8006b88 <_printf_float+0x250>
 8006bd6:	ee18 3a10 	vmov	r3, s16
 8006bda:	4652      	mov	r2, sl
 8006bdc:	4631      	mov	r1, r6
 8006bde:	4628      	mov	r0, r5
 8006be0:	47b8      	blx	r7
 8006be2:	3001      	adds	r0, #1
 8006be4:	f43f af09 	beq.w	80069fa <_printf_float+0xc2>
 8006be8:	f04f 0900 	mov.w	r9, #0
 8006bec:	f104 0a1a 	add.w	sl, r4, #26
 8006bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf2:	425b      	negs	r3, r3
 8006bf4:	454b      	cmp	r3, r9
 8006bf6:	dc01      	bgt.n	8006bfc <_printf_float+0x2c4>
 8006bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bfa:	e792      	b.n	8006b22 <_printf_float+0x1ea>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	4652      	mov	r2, sl
 8006c00:	4631      	mov	r1, r6
 8006c02:	4628      	mov	r0, r5
 8006c04:	47b8      	blx	r7
 8006c06:	3001      	adds	r0, #1
 8006c08:	f43f aef7 	beq.w	80069fa <_printf_float+0xc2>
 8006c0c:	f109 0901 	add.w	r9, r9, #1
 8006c10:	e7ee      	b.n	8006bf0 <_printf_float+0x2b8>
 8006c12:	bf00      	nop
 8006c14:	7fefffff 	.word	0x7fefffff
 8006c18:	08009638 	.word	0x08009638
 8006c1c:	0800963c 	.word	0x0800963c
 8006c20:	08009644 	.word	0x08009644
 8006c24:	08009640 	.word	0x08009640
 8006c28:	08009648 	.word	0x08009648
 8006c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c30:	429a      	cmp	r2, r3
 8006c32:	bfa8      	it	ge
 8006c34:	461a      	movge	r2, r3
 8006c36:	2a00      	cmp	r2, #0
 8006c38:	4691      	mov	r9, r2
 8006c3a:	dc37      	bgt.n	8006cac <_printf_float+0x374>
 8006c3c:	f04f 0b00 	mov.w	fp, #0
 8006c40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c44:	f104 021a 	add.w	r2, r4, #26
 8006c48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c4a:	9305      	str	r3, [sp, #20]
 8006c4c:	eba3 0309 	sub.w	r3, r3, r9
 8006c50:	455b      	cmp	r3, fp
 8006c52:	dc33      	bgt.n	8006cbc <_printf_float+0x384>
 8006c54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	db3b      	blt.n	8006cd4 <_printf_float+0x39c>
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	07da      	lsls	r2, r3, #31
 8006c60:	d438      	bmi.n	8006cd4 <_printf_float+0x39c>
 8006c62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c64:	9b05      	ldr	r3, [sp, #20]
 8006c66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	eba2 0901 	sub.w	r9, r2, r1
 8006c6e:	4599      	cmp	r9, r3
 8006c70:	bfa8      	it	ge
 8006c72:	4699      	movge	r9, r3
 8006c74:	f1b9 0f00 	cmp.w	r9, #0
 8006c78:	dc35      	bgt.n	8006ce6 <_printf_float+0x3ae>
 8006c7a:	f04f 0800 	mov.w	r8, #0
 8006c7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c82:	f104 0a1a 	add.w	sl, r4, #26
 8006c86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c8a:	1a9b      	subs	r3, r3, r2
 8006c8c:	eba3 0309 	sub.w	r3, r3, r9
 8006c90:	4543      	cmp	r3, r8
 8006c92:	f77f af79 	ble.w	8006b88 <_printf_float+0x250>
 8006c96:	2301      	movs	r3, #1
 8006c98:	4652      	mov	r2, sl
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	47b8      	blx	r7
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	f43f aeaa 	beq.w	80069fa <_printf_float+0xc2>
 8006ca6:	f108 0801 	add.w	r8, r8, #1
 8006caa:	e7ec      	b.n	8006c86 <_printf_float+0x34e>
 8006cac:	4613      	mov	r3, r2
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4642      	mov	r2, r8
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	47b8      	blx	r7
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	d1c0      	bne.n	8006c3c <_printf_float+0x304>
 8006cba:	e69e      	b.n	80069fa <_printf_float+0xc2>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	9205      	str	r2, [sp, #20]
 8006cc4:	47b8      	blx	r7
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	f43f ae97 	beq.w	80069fa <_printf_float+0xc2>
 8006ccc:	9a05      	ldr	r2, [sp, #20]
 8006cce:	f10b 0b01 	add.w	fp, fp, #1
 8006cd2:	e7b9      	b.n	8006c48 <_printf_float+0x310>
 8006cd4:	ee18 3a10 	vmov	r3, s16
 8006cd8:	4652      	mov	r2, sl
 8006cda:	4631      	mov	r1, r6
 8006cdc:	4628      	mov	r0, r5
 8006cde:	47b8      	blx	r7
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d1be      	bne.n	8006c62 <_printf_float+0x32a>
 8006ce4:	e689      	b.n	80069fa <_printf_float+0xc2>
 8006ce6:	9a05      	ldr	r2, [sp, #20]
 8006ce8:	464b      	mov	r3, r9
 8006cea:	4442      	add	r2, r8
 8006cec:	4631      	mov	r1, r6
 8006cee:	4628      	mov	r0, r5
 8006cf0:	47b8      	blx	r7
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	d1c1      	bne.n	8006c7a <_printf_float+0x342>
 8006cf6:	e680      	b.n	80069fa <_printf_float+0xc2>
 8006cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cfa:	2a01      	cmp	r2, #1
 8006cfc:	dc01      	bgt.n	8006d02 <_printf_float+0x3ca>
 8006cfe:	07db      	lsls	r3, r3, #31
 8006d00:	d538      	bpl.n	8006d74 <_printf_float+0x43c>
 8006d02:	2301      	movs	r3, #1
 8006d04:	4642      	mov	r2, r8
 8006d06:	4631      	mov	r1, r6
 8006d08:	4628      	mov	r0, r5
 8006d0a:	47b8      	blx	r7
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	f43f ae74 	beq.w	80069fa <_printf_float+0xc2>
 8006d12:	ee18 3a10 	vmov	r3, s16
 8006d16:	4652      	mov	r2, sl
 8006d18:	4631      	mov	r1, r6
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	47b8      	blx	r7
 8006d1e:	3001      	adds	r0, #1
 8006d20:	f43f ae6b 	beq.w	80069fa <_printf_float+0xc2>
 8006d24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f7f9 fecc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d30:	b9d8      	cbnz	r0, 8006d6a <_printf_float+0x432>
 8006d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d34:	f108 0201 	add.w	r2, r8, #1
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	47b8      	blx	r7
 8006d40:	3001      	adds	r0, #1
 8006d42:	d10e      	bne.n	8006d62 <_printf_float+0x42a>
 8006d44:	e659      	b.n	80069fa <_printf_float+0xc2>
 8006d46:	2301      	movs	r3, #1
 8006d48:	4652      	mov	r2, sl
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b8      	blx	r7
 8006d50:	3001      	adds	r0, #1
 8006d52:	f43f ae52 	beq.w	80069fa <_printf_float+0xc2>
 8006d56:	f108 0801 	add.w	r8, r8, #1
 8006d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	4543      	cmp	r3, r8
 8006d60:	dcf1      	bgt.n	8006d46 <_printf_float+0x40e>
 8006d62:	464b      	mov	r3, r9
 8006d64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d68:	e6dc      	b.n	8006b24 <_printf_float+0x1ec>
 8006d6a:	f04f 0800 	mov.w	r8, #0
 8006d6e:	f104 0a1a 	add.w	sl, r4, #26
 8006d72:	e7f2      	b.n	8006d5a <_printf_float+0x422>
 8006d74:	2301      	movs	r3, #1
 8006d76:	4642      	mov	r2, r8
 8006d78:	e7df      	b.n	8006d3a <_printf_float+0x402>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	464a      	mov	r2, r9
 8006d7e:	4631      	mov	r1, r6
 8006d80:	4628      	mov	r0, r5
 8006d82:	47b8      	blx	r7
 8006d84:	3001      	adds	r0, #1
 8006d86:	f43f ae38 	beq.w	80069fa <_printf_float+0xc2>
 8006d8a:	f108 0801 	add.w	r8, r8, #1
 8006d8e:	68e3      	ldr	r3, [r4, #12]
 8006d90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d92:	1a5b      	subs	r3, r3, r1
 8006d94:	4543      	cmp	r3, r8
 8006d96:	dcf0      	bgt.n	8006d7a <_printf_float+0x442>
 8006d98:	e6fa      	b.n	8006b90 <_printf_float+0x258>
 8006d9a:	f04f 0800 	mov.w	r8, #0
 8006d9e:	f104 0919 	add.w	r9, r4, #25
 8006da2:	e7f4      	b.n	8006d8e <_printf_float+0x456>

08006da4 <_printf_common>:
 8006da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da8:	4616      	mov	r6, r2
 8006daa:	4699      	mov	r9, r3
 8006dac:	688a      	ldr	r2, [r1, #8]
 8006dae:	690b      	ldr	r3, [r1, #16]
 8006db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006db4:	4293      	cmp	r3, r2
 8006db6:	bfb8      	it	lt
 8006db8:	4613      	movlt	r3, r2
 8006dba:	6033      	str	r3, [r6, #0]
 8006dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006dc0:	4607      	mov	r7, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	b10a      	cbz	r2, 8006dca <_printf_common+0x26>
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	6033      	str	r3, [r6, #0]
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	0699      	lsls	r1, r3, #26
 8006dce:	bf42      	ittt	mi
 8006dd0:	6833      	ldrmi	r3, [r6, #0]
 8006dd2:	3302      	addmi	r3, #2
 8006dd4:	6033      	strmi	r3, [r6, #0]
 8006dd6:	6825      	ldr	r5, [r4, #0]
 8006dd8:	f015 0506 	ands.w	r5, r5, #6
 8006ddc:	d106      	bne.n	8006dec <_printf_common+0x48>
 8006dde:	f104 0a19 	add.w	sl, r4, #25
 8006de2:	68e3      	ldr	r3, [r4, #12]
 8006de4:	6832      	ldr	r2, [r6, #0]
 8006de6:	1a9b      	subs	r3, r3, r2
 8006de8:	42ab      	cmp	r3, r5
 8006dea:	dc26      	bgt.n	8006e3a <_printf_common+0x96>
 8006dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006df0:	1e13      	subs	r3, r2, #0
 8006df2:	6822      	ldr	r2, [r4, #0]
 8006df4:	bf18      	it	ne
 8006df6:	2301      	movne	r3, #1
 8006df8:	0692      	lsls	r2, r2, #26
 8006dfa:	d42b      	bmi.n	8006e54 <_printf_common+0xb0>
 8006dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e00:	4649      	mov	r1, r9
 8006e02:	4638      	mov	r0, r7
 8006e04:	47c0      	blx	r8
 8006e06:	3001      	adds	r0, #1
 8006e08:	d01e      	beq.n	8006e48 <_printf_common+0xa4>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	68e5      	ldr	r5, [r4, #12]
 8006e0e:	6832      	ldr	r2, [r6, #0]
 8006e10:	f003 0306 	and.w	r3, r3, #6
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	bf08      	it	eq
 8006e18:	1aad      	subeq	r5, r5, r2
 8006e1a:	68a3      	ldr	r3, [r4, #8]
 8006e1c:	6922      	ldr	r2, [r4, #16]
 8006e1e:	bf0c      	ite	eq
 8006e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e24:	2500      	movne	r5, #0
 8006e26:	4293      	cmp	r3, r2
 8006e28:	bfc4      	itt	gt
 8006e2a:	1a9b      	subgt	r3, r3, r2
 8006e2c:	18ed      	addgt	r5, r5, r3
 8006e2e:	2600      	movs	r6, #0
 8006e30:	341a      	adds	r4, #26
 8006e32:	42b5      	cmp	r5, r6
 8006e34:	d11a      	bne.n	8006e6c <_printf_common+0xc8>
 8006e36:	2000      	movs	r0, #0
 8006e38:	e008      	b.n	8006e4c <_printf_common+0xa8>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	4652      	mov	r2, sl
 8006e3e:	4649      	mov	r1, r9
 8006e40:	4638      	mov	r0, r7
 8006e42:	47c0      	blx	r8
 8006e44:	3001      	adds	r0, #1
 8006e46:	d103      	bne.n	8006e50 <_printf_common+0xac>
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e50:	3501      	adds	r5, #1
 8006e52:	e7c6      	b.n	8006de2 <_printf_common+0x3e>
 8006e54:	18e1      	adds	r1, r4, r3
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	2030      	movs	r0, #48	; 0x30
 8006e5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e5e:	4422      	add	r2, r4
 8006e60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e68:	3302      	adds	r3, #2
 8006e6a:	e7c7      	b.n	8006dfc <_printf_common+0x58>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	4622      	mov	r2, r4
 8006e70:	4649      	mov	r1, r9
 8006e72:	4638      	mov	r0, r7
 8006e74:	47c0      	blx	r8
 8006e76:	3001      	adds	r0, #1
 8006e78:	d0e6      	beq.n	8006e48 <_printf_common+0xa4>
 8006e7a:	3601      	adds	r6, #1
 8006e7c:	e7d9      	b.n	8006e32 <_printf_common+0x8e>
	...

08006e80 <_printf_i>:
 8006e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e84:	460c      	mov	r4, r1
 8006e86:	4691      	mov	r9, r2
 8006e88:	7e27      	ldrb	r7, [r4, #24]
 8006e8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e8c:	2f78      	cmp	r7, #120	; 0x78
 8006e8e:	4680      	mov	r8, r0
 8006e90:	469a      	mov	sl, r3
 8006e92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e96:	d807      	bhi.n	8006ea8 <_printf_i+0x28>
 8006e98:	2f62      	cmp	r7, #98	; 0x62
 8006e9a:	d80a      	bhi.n	8006eb2 <_printf_i+0x32>
 8006e9c:	2f00      	cmp	r7, #0
 8006e9e:	f000 80d8 	beq.w	8007052 <_printf_i+0x1d2>
 8006ea2:	2f58      	cmp	r7, #88	; 0x58
 8006ea4:	f000 80a3 	beq.w	8006fee <_printf_i+0x16e>
 8006ea8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006eb0:	e03a      	b.n	8006f28 <_printf_i+0xa8>
 8006eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006eb6:	2b15      	cmp	r3, #21
 8006eb8:	d8f6      	bhi.n	8006ea8 <_printf_i+0x28>
 8006eba:	a001      	add	r0, pc, #4	; (adr r0, 8006ec0 <_printf_i+0x40>)
 8006ebc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006ec0:	08006f19 	.word	0x08006f19
 8006ec4:	08006f2d 	.word	0x08006f2d
 8006ec8:	08006ea9 	.word	0x08006ea9
 8006ecc:	08006ea9 	.word	0x08006ea9
 8006ed0:	08006ea9 	.word	0x08006ea9
 8006ed4:	08006ea9 	.word	0x08006ea9
 8006ed8:	08006f2d 	.word	0x08006f2d
 8006edc:	08006ea9 	.word	0x08006ea9
 8006ee0:	08006ea9 	.word	0x08006ea9
 8006ee4:	08006ea9 	.word	0x08006ea9
 8006ee8:	08006ea9 	.word	0x08006ea9
 8006eec:	08007039 	.word	0x08007039
 8006ef0:	08006f5d 	.word	0x08006f5d
 8006ef4:	0800701b 	.word	0x0800701b
 8006ef8:	08006ea9 	.word	0x08006ea9
 8006efc:	08006ea9 	.word	0x08006ea9
 8006f00:	0800705b 	.word	0x0800705b
 8006f04:	08006ea9 	.word	0x08006ea9
 8006f08:	08006f5d 	.word	0x08006f5d
 8006f0c:	08006ea9 	.word	0x08006ea9
 8006f10:	08006ea9 	.word	0x08006ea9
 8006f14:	08007023 	.word	0x08007023
 8006f18:	680b      	ldr	r3, [r1, #0]
 8006f1a:	1d1a      	adds	r2, r3, #4
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	600a      	str	r2, [r1, #0]
 8006f20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e0a3      	b.n	8007074 <_printf_i+0x1f4>
 8006f2c:	6825      	ldr	r5, [r4, #0]
 8006f2e:	6808      	ldr	r0, [r1, #0]
 8006f30:	062e      	lsls	r6, r5, #24
 8006f32:	f100 0304 	add.w	r3, r0, #4
 8006f36:	d50a      	bpl.n	8006f4e <_printf_i+0xce>
 8006f38:	6805      	ldr	r5, [r0, #0]
 8006f3a:	600b      	str	r3, [r1, #0]
 8006f3c:	2d00      	cmp	r5, #0
 8006f3e:	da03      	bge.n	8006f48 <_printf_i+0xc8>
 8006f40:	232d      	movs	r3, #45	; 0x2d
 8006f42:	426d      	negs	r5, r5
 8006f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f48:	485e      	ldr	r0, [pc, #376]	; (80070c4 <_printf_i+0x244>)
 8006f4a:	230a      	movs	r3, #10
 8006f4c:	e019      	b.n	8006f82 <_printf_i+0x102>
 8006f4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006f52:	6805      	ldr	r5, [r0, #0]
 8006f54:	600b      	str	r3, [r1, #0]
 8006f56:	bf18      	it	ne
 8006f58:	b22d      	sxthne	r5, r5
 8006f5a:	e7ef      	b.n	8006f3c <_printf_i+0xbc>
 8006f5c:	680b      	ldr	r3, [r1, #0]
 8006f5e:	6825      	ldr	r5, [r4, #0]
 8006f60:	1d18      	adds	r0, r3, #4
 8006f62:	6008      	str	r0, [r1, #0]
 8006f64:	0628      	lsls	r0, r5, #24
 8006f66:	d501      	bpl.n	8006f6c <_printf_i+0xec>
 8006f68:	681d      	ldr	r5, [r3, #0]
 8006f6a:	e002      	b.n	8006f72 <_printf_i+0xf2>
 8006f6c:	0669      	lsls	r1, r5, #25
 8006f6e:	d5fb      	bpl.n	8006f68 <_printf_i+0xe8>
 8006f70:	881d      	ldrh	r5, [r3, #0]
 8006f72:	4854      	ldr	r0, [pc, #336]	; (80070c4 <_printf_i+0x244>)
 8006f74:	2f6f      	cmp	r7, #111	; 0x6f
 8006f76:	bf0c      	ite	eq
 8006f78:	2308      	moveq	r3, #8
 8006f7a:	230a      	movne	r3, #10
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f82:	6866      	ldr	r6, [r4, #4]
 8006f84:	60a6      	str	r6, [r4, #8]
 8006f86:	2e00      	cmp	r6, #0
 8006f88:	bfa2      	ittt	ge
 8006f8a:	6821      	ldrge	r1, [r4, #0]
 8006f8c:	f021 0104 	bicge.w	r1, r1, #4
 8006f90:	6021      	strge	r1, [r4, #0]
 8006f92:	b90d      	cbnz	r5, 8006f98 <_printf_i+0x118>
 8006f94:	2e00      	cmp	r6, #0
 8006f96:	d04d      	beq.n	8007034 <_printf_i+0x1b4>
 8006f98:	4616      	mov	r6, r2
 8006f9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f9e:	fb03 5711 	mls	r7, r3, r1, r5
 8006fa2:	5dc7      	ldrb	r7, [r0, r7]
 8006fa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fa8:	462f      	mov	r7, r5
 8006faa:	42bb      	cmp	r3, r7
 8006fac:	460d      	mov	r5, r1
 8006fae:	d9f4      	bls.n	8006f9a <_printf_i+0x11a>
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d10b      	bne.n	8006fcc <_printf_i+0x14c>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	07df      	lsls	r7, r3, #31
 8006fb8:	d508      	bpl.n	8006fcc <_printf_i+0x14c>
 8006fba:	6923      	ldr	r3, [r4, #16]
 8006fbc:	6861      	ldr	r1, [r4, #4]
 8006fbe:	4299      	cmp	r1, r3
 8006fc0:	bfde      	ittt	le
 8006fc2:	2330      	movle	r3, #48	; 0x30
 8006fc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fcc:	1b92      	subs	r2, r2, r6
 8006fce:	6122      	str	r2, [r4, #16]
 8006fd0:	f8cd a000 	str.w	sl, [sp]
 8006fd4:	464b      	mov	r3, r9
 8006fd6:	aa03      	add	r2, sp, #12
 8006fd8:	4621      	mov	r1, r4
 8006fda:	4640      	mov	r0, r8
 8006fdc:	f7ff fee2 	bl	8006da4 <_printf_common>
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	d14c      	bne.n	800707e <_printf_i+0x1fe>
 8006fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe8:	b004      	add	sp, #16
 8006fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fee:	4835      	ldr	r0, [pc, #212]	; (80070c4 <_printf_i+0x244>)
 8006ff0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	680e      	ldr	r6, [r1, #0]
 8006ff8:	061f      	lsls	r7, r3, #24
 8006ffa:	f856 5b04 	ldr.w	r5, [r6], #4
 8006ffe:	600e      	str	r6, [r1, #0]
 8007000:	d514      	bpl.n	800702c <_printf_i+0x1ac>
 8007002:	07d9      	lsls	r1, r3, #31
 8007004:	bf44      	itt	mi
 8007006:	f043 0320 	orrmi.w	r3, r3, #32
 800700a:	6023      	strmi	r3, [r4, #0]
 800700c:	b91d      	cbnz	r5, 8007016 <_printf_i+0x196>
 800700e:	6823      	ldr	r3, [r4, #0]
 8007010:	f023 0320 	bic.w	r3, r3, #32
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	2310      	movs	r3, #16
 8007018:	e7b0      	b.n	8006f7c <_printf_i+0xfc>
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	f043 0320 	orr.w	r3, r3, #32
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	2378      	movs	r3, #120	; 0x78
 8007024:	4828      	ldr	r0, [pc, #160]	; (80070c8 <_printf_i+0x248>)
 8007026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800702a:	e7e3      	b.n	8006ff4 <_printf_i+0x174>
 800702c:	065e      	lsls	r6, r3, #25
 800702e:	bf48      	it	mi
 8007030:	b2ad      	uxthmi	r5, r5
 8007032:	e7e6      	b.n	8007002 <_printf_i+0x182>
 8007034:	4616      	mov	r6, r2
 8007036:	e7bb      	b.n	8006fb0 <_printf_i+0x130>
 8007038:	680b      	ldr	r3, [r1, #0]
 800703a:	6826      	ldr	r6, [r4, #0]
 800703c:	6960      	ldr	r0, [r4, #20]
 800703e:	1d1d      	adds	r5, r3, #4
 8007040:	600d      	str	r5, [r1, #0]
 8007042:	0635      	lsls	r5, r6, #24
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	d501      	bpl.n	800704c <_printf_i+0x1cc>
 8007048:	6018      	str	r0, [r3, #0]
 800704a:	e002      	b.n	8007052 <_printf_i+0x1d2>
 800704c:	0671      	lsls	r1, r6, #25
 800704e:	d5fb      	bpl.n	8007048 <_printf_i+0x1c8>
 8007050:	8018      	strh	r0, [r3, #0]
 8007052:	2300      	movs	r3, #0
 8007054:	6123      	str	r3, [r4, #16]
 8007056:	4616      	mov	r6, r2
 8007058:	e7ba      	b.n	8006fd0 <_printf_i+0x150>
 800705a:	680b      	ldr	r3, [r1, #0]
 800705c:	1d1a      	adds	r2, r3, #4
 800705e:	600a      	str	r2, [r1, #0]
 8007060:	681e      	ldr	r6, [r3, #0]
 8007062:	6862      	ldr	r2, [r4, #4]
 8007064:	2100      	movs	r1, #0
 8007066:	4630      	mov	r0, r6
 8007068:	f7f9 f8ba 	bl	80001e0 <memchr>
 800706c:	b108      	cbz	r0, 8007072 <_printf_i+0x1f2>
 800706e:	1b80      	subs	r0, r0, r6
 8007070:	6060      	str	r0, [r4, #4]
 8007072:	6863      	ldr	r3, [r4, #4]
 8007074:	6123      	str	r3, [r4, #16]
 8007076:	2300      	movs	r3, #0
 8007078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800707c:	e7a8      	b.n	8006fd0 <_printf_i+0x150>
 800707e:	6923      	ldr	r3, [r4, #16]
 8007080:	4632      	mov	r2, r6
 8007082:	4649      	mov	r1, r9
 8007084:	4640      	mov	r0, r8
 8007086:	47d0      	blx	sl
 8007088:	3001      	adds	r0, #1
 800708a:	d0ab      	beq.n	8006fe4 <_printf_i+0x164>
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	079b      	lsls	r3, r3, #30
 8007090:	d413      	bmi.n	80070ba <_printf_i+0x23a>
 8007092:	68e0      	ldr	r0, [r4, #12]
 8007094:	9b03      	ldr	r3, [sp, #12]
 8007096:	4298      	cmp	r0, r3
 8007098:	bfb8      	it	lt
 800709a:	4618      	movlt	r0, r3
 800709c:	e7a4      	b.n	8006fe8 <_printf_i+0x168>
 800709e:	2301      	movs	r3, #1
 80070a0:	4632      	mov	r2, r6
 80070a2:	4649      	mov	r1, r9
 80070a4:	4640      	mov	r0, r8
 80070a6:	47d0      	blx	sl
 80070a8:	3001      	adds	r0, #1
 80070aa:	d09b      	beq.n	8006fe4 <_printf_i+0x164>
 80070ac:	3501      	adds	r5, #1
 80070ae:	68e3      	ldr	r3, [r4, #12]
 80070b0:	9903      	ldr	r1, [sp, #12]
 80070b2:	1a5b      	subs	r3, r3, r1
 80070b4:	42ab      	cmp	r3, r5
 80070b6:	dcf2      	bgt.n	800709e <_printf_i+0x21e>
 80070b8:	e7eb      	b.n	8007092 <_printf_i+0x212>
 80070ba:	2500      	movs	r5, #0
 80070bc:	f104 0619 	add.w	r6, r4, #25
 80070c0:	e7f5      	b.n	80070ae <_printf_i+0x22e>
 80070c2:	bf00      	nop
 80070c4:	0800964a 	.word	0x0800964a
 80070c8:	0800965b 	.word	0x0800965b

080070cc <siprintf>:
 80070cc:	b40e      	push	{r1, r2, r3}
 80070ce:	b500      	push	{lr}
 80070d0:	b09c      	sub	sp, #112	; 0x70
 80070d2:	ab1d      	add	r3, sp, #116	; 0x74
 80070d4:	9002      	str	r0, [sp, #8]
 80070d6:	9006      	str	r0, [sp, #24]
 80070d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070dc:	4809      	ldr	r0, [pc, #36]	; (8007104 <siprintf+0x38>)
 80070de:	9107      	str	r1, [sp, #28]
 80070e0:	9104      	str	r1, [sp, #16]
 80070e2:	4909      	ldr	r1, [pc, #36]	; (8007108 <siprintf+0x3c>)
 80070e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070e8:	9105      	str	r1, [sp, #20]
 80070ea:	6800      	ldr	r0, [r0, #0]
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	a902      	add	r1, sp, #8
 80070f0:	f001 fb34 	bl	800875c <_svfiprintf_r>
 80070f4:	9b02      	ldr	r3, [sp, #8]
 80070f6:	2200      	movs	r2, #0
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	b01c      	add	sp, #112	; 0x70
 80070fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007100:	b003      	add	sp, #12
 8007102:	4770      	bx	lr
 8007104:	2000000c 	.word	0x2000000c
 8007108:	ffff0208 	.word	0xffff0208

0800710c <quorem>:
 800710c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007110:	6903      	ldr	r3, [r0, #16]
 8007112:	690c      	ldr	r4, [r1, #16]
 8007114:	42a3      	cmp	r3, r4
 8007116:	4607      	mov	r7, r0
 8007118:	f2c0 8081 	blt.w	800721e <quorem+0x112>
 800711c:	3c01      	subs	r4, #1
 800711e:	f101 0814 	add.w	r8, r1, #20
 8007122:	f100 0514 	add.w	r5, r0, #20
 8007126:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800712a:	9301      	str	r3, [sp, #4]
 800712c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007130:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007134:	3301      	adds	r3, #1
 8007136:	429a      	cmp	r2, r3
 8007138:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800713c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007140:	fbb2 f6f3 	udiv	r6, r2, r3
 8007144:	d331      	bcc.n	80071aa <quorem+0x9e>
 8007146:	f04f 0e00 	mov.w	lr, #0
 800714a:	4640      	mov	r0, r8
 800714c:	46ac      	mov	ip, r5
 800714e:	46f2      	mov	sl, lr
 8007150:	f850 2b04 	ldr.w	r2, [r0], #4
 8007154:	b293      	uxth	r3, r2
 8007156:	fb06 e303 	mla	r3, r6, r3, lr
 800715a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800715e:	b29b      	uxth	r3, r3
 8007160:	ebaa 0303 	sub.w	r3, sl, r3
 8007164:	0c12      	lsrs	r2, r2, #16
 8007166:	f8dc a000 	ldr.w	sl, [ip]
 800716a:	fb06 e202 	mla	r2, r6, r2, lr
 800716e:	fa13 f38a 	uxtah	r3, r3, sl
 8007172:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007176:	fa1f fa82 	uxth.w	sl, r2
 800717a:	f8dc 2000 	ldr.w	r2, [ip]
 800717e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007182:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007186:	b29b      	uxth	r3, r3
 8007188:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800718c:	4581      	cmp	r9, r0
 800718e:	f84c 3b04 	str.w	r3, [ip], #4
 8007192:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007196:	d2db      	bcs.n	8007150 <quorem+0x44>
 8007198:	f855 300b 	ldr.w	r3, [r5, fp]
 800719c:	b92b      	cbnz	r3, 80071aa <quorem+0x9e>
 800719e:	9b01      	ldr	r3, [sp, #4]
 80071a0:	3b04      	subs	r3, #4
 80071a2:	429d      	cmp	r5, r3
 80071a4:	461a      	mov	r2, r3
 80071a6:	d32e      	bcc.n	8007206 <quorem+0xfa>
 80071a8:	613c      	str	r4, [r7, #16]
 80071aa:	4638      	mov	r0, r7
 80071ac:	f001 f8c0 	bl	8008330 <__mcmp>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	db24      	blt.n	80071fe <quorem+0xf2>
 80071b4:	3601      	adds	r6, #1
 80071b6:	4628      	mov	r0, r5
 80071b8:	f04f 0c00 	mov.w	ip, #0
 80071bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80071c0:	f8d0 e000 	ldr.w	lr, [r0]
 80071c4:	b293      	uxth	r3, r2
 80071c6:	ebac 0303 	sub.w	r3, ip, r3
 80071ca:	0c12      	lsrs	r2, r2, #16
 80071cc:	fa13 f38e 	uxtah	r3, r3, lr
 80071d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071d8:	b29b      	uxth	r3, r3
 80071da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071de:	45c1      	cmp	r9, r8
 80071e0:	f840 3b04 	str.w	r3, [r0], #4
 80071e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80071e8:	d2e8      	bcs.n	80071bc <quorem+0xb0>
 80071ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071f2:	b922      	cbnz	r2, 80071fe <quorem+0xf2>
 80071f4:	3b04      	subs	r3, #4
 80071f6:	429d      	cmp	r5, r3
 80071f8:	461a      	mov	r2, r3
 80071fa:	d30a      	bcc.n	8007212 <quorem+0x106>
 80071fc:	613c      	str	r4, [r7, #16]
 80071fe:	4630      	mov	r0, r6
 8007200:	b003      	add	sp, #12
 8007202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007206:	6812      	ldr	r2, [r2, #0]
 8007208:	3b04      	subs	r3, #4
 800720a:	2a00      	cmp	r2, #0
 800720c:	d1cc      	bne.n	80071a8 <quorem+0x9c>
 800720e:	3c01      	subs	r4, #1
 8007210:	e7c7      	b.n	80071a2 <quorem+0x96>
 8007212:	6812      	ldr	r2, [r2, #0]
 8007214:	3b04      	subs	r3, #4
 8007216:	2a00      	cmp	r2, #0
 8007218:	d1f0      	bne.n	80071fc <quorem+0xf0>
 800721a:	3c01      	subs	r4, #1
 800721c:	e7eb      	b.n	80071f6 <quorem+0xea>
 800721e:	2000      	movs	r0, #0
 8007220:	e7ee      	b.n	8007200 <quorem+0xf4>
 8007222:	0000      	movs	r0, r0
 8007224:	0000      	movs	r0, r0
	...

08007228 <_dtoa_r>:
 8007228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722c:	ed2d 8b02 	vpush	{d8}
 8007230:	ec57 6b10 	vmov	r6, r7, d0
 8007234:	b095      	sub	sp, #84	; 0x54
 8007236:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007238:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800723c:	9105      	str	r1, [sp, #20]
 800723e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007242:	4604      	mov	r4, r0
 8007244:	9209      	str	r2, [sp, #36]	; 0x24
 8007246:	930f      	str	r3, [sp, #60]	; 0x3c
 8007248:	b975      	cbnz	r5, 8007268 <_dtoa_r+0x40>
 800724a:	2010      	movs	r0, #16
 800724c:	f000 fddc 	bl	8007e08 <malloc>
 8007250:	4602      	mov	r2, r0
 8007252:	6260      	str	r0, [r4, #36]	; 0x24
 8007254:	b920      	cbnz	r0, 8007260 <_dtoa_r+0x38>
 8007256:	4bb2      	ldr	r3, [pc, #712]	; (8007520 <_dtoa_r+0x2f8>)
 8007258:	21ea      	movs	r1, #234	; 0xea
 800725a:	48b2      	ldr	r0, [pc, #712]	; (8007524 <_dtoa_r+0x2fc>)
 800725c:	f001 fb8e 	bl	800897c <__assert_func>
 8007260:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007264:	6005      	str	r5, [r0, #0]
 8007266:	60c5      	str	r5, [r0, #12]
 8007268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800726a:	6819      	ldr	r1, [r3, #0]
 800726c:	b151      	cbz	r1, 8007284 <_dtoa_r+0x5c>
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	604a      	str	r2, [r1, #4]
 8007272:	2301      	movs	r3, #1
 8007274:	4093      	lsls	r3, r2
 8007276:	608b      	str	r3, [r1, #8]
 8007278:	4620      	mov	r0, r4
 800727a:	f000 fe1b 	bl	8007eb4 <_Bfree>
 800727e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007280:	2200      	movs	r2, #0
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	1e3b      	subs	r3, r7, #0
 8007286:	bfb9      	ittee	lt
 8007288:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800728c:	9303      	strlt	r3, [sp, #12]
 800728e:	2300      	movge	r3, #0
 8007290:	f8c8 3000 	strge.w	r3, [r8]
 8007294:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007298:	4ba3      	ldr	r3, [pc, #652]	; (8007528 <_dtoa_r+0x300>)
 800729a:	bfbc      	itt	lt
 800729c:	2201      	movlt	r2, #1
 800729e:	f8c8 2000 	strlt.w	r2, [r8]
 80072a2:	ea33 0309 	bics.w	r3, r3, r9
 80072a6:	d11b      	bne.n	80072e0 <_dtoa_r+0xb8>
 80072a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072b4:	4333      	orrs	r3, r6
 80072b6:	f000 857a 	beq.w	8007dae <_dtoa_r+0xb86>
 80072ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072bc:	b963      	cbnz	r3, 80072d8 <_dtoa_r+0xb0>
 80072be:	4b9b      	ldr	r3, [pc, #620]	; (800752c <_dtoa_r+0x304>)
 80072c0:	e024      	b.n	800730c <_dtoa_r+0xe4>
 80072c2:	4b9b      	ldr	r3, [pc, #620]	; (8007530 <_dtoa_r+0x308>)
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	3308      	adds	r3, #8
 80072c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072ca:	6013      	str	r3, [r2, #0]
 80072cc:	9800      	ldr	r0, [sp, #0]
 80072ce:	b015      	add	sp, #84	; 0x54
 80072d0:	ecbd 8b02 	vpop	{d8}
 80072d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d8:	4b94      	ldr	r3, [pc, #592]	; (800752c <_dtoa_r+0x304>)
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	3303      	adds	r3, #3
 80072de:	e7f3      	b.n	80072c8 <_dtoa_r+0xa0>
 80072e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072e4:	2200      	movs	r2, #0
 80072e6:	ec51 0b17 	vmov	r0, r1, d7
 80072ea:	2300      	movs	r3, #0
 80072ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80072f0:	f7f9 fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 80072f4:	4680      	mov	r8, r0
 80072f6:	b158      	cbz	r0, 8007310 <_dtoa_r+0xe8>
 80072f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072fa:	2301      	movs	r3, #1
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 8551 	beq.w	8007da8 <_dtoa_r+0xb80>
 8007306:	488b      	ldr	r0, [pc, #556]	; (8007534 <_dtoa_r+0x30c>)
 8007308:	6018      	str	r0, [r3, #0]
 800730a:	1e43      	subs	r3, r0, #1
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	e7dd      	b.n	80072cc <_dtoa_r+0xa4>
 8007310:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007314:	aa12      	add	r2, sp, #72	; 0x48
 8007316:	a913      	add	r1, sp, #76	; 0x4c
 8007318:	4620      	mov	r0, r4
 800731a:	f001 f8ad 	bl	8008478 <__d2b>
 800731e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007322:	4683      	mov	fp, r0
 8007324:	2d00      	cmp	r5, #0
 8007326:	d07c      	beq.n	8007422 <_dtoa_r+0x1fa>
 8007328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800732a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800732e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007332:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007336:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800733a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800733e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007342:	4b7d      	ldr	r3, [pc, #500]	; (8007538 <_dtoa_r+0x310>)
 8007344:	2200      	movs	r2, #0
 8007346:	4630      	mov	r0, r6
 8007348:	4639      	mov	r1, r7
 800734a:	f7f8 ff9d 	bl	8000288 <__aeabi_dsub>
 800734e:	a36e      	add	r3, pc, #440	; (adr r3, 8007508 <_dtoa_r+0x2e0>)
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	f7f9 f950 	bl	80005f8 <__aeabi_dmul>
 8007358:	a36d      	add	r3, pc, #436	; (adr r3, 8007510 <_dtoa_r+0x2e8>)
 800735a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735e:	f7f8 ff95 	bl	800028c <__adddf3>
 8007362:	4606      	mov	r6, r0
 8007364:	4628      	mov	r0, r5
 8007366:	460f      	mov	r7, r1
 8007368:	f7f9 f8dc 	bl	8000524 <__aeabi_i2d>
 800736c:	a36a      	add	r3, pc, #424	; (adr r3, 8007518 <_dtoa_r+0x2f0>)
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	f7f9 f941 	bl	80005f8 <__aeabi_dmul>
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	4630      	mov	r0, r6
 800737c:	4639      	mov	r1, r7
 800737e:	f7f8 ff85 	bl	800028c <__adddf3>
 8007382:	4606      	mov	r6, r0
 8007384:	460f      	mov	r7, r1
 8007386:	f7f9 fbe7 	bl	8000b58 <__aeabi_d2iz>
 800738a:	2200      	movs	r2, #0
 800738c:	4682      	mov	sl, r0
 800738e:	2300      	movs	r3, #0
 8007390:	4630      	mov	r0, r6
 8007392:	4639      	mov	r1, r7
 8007394:	f7f9 fba2 	bl	8000adc <__aeabi_dcmplt>
 8007398:	b148      	cbz	r0, 80073ae <_dtoa_r+0x186>
 800739a:	4650      	mov	r0, sl
 800739c:	f7f9 f8c2 	bl	8000524 <__aeabi_i2d>
 80073a0:	4632      	mov	r2, r6
 80073a2:	463b      	mov	r3, r7
 80073a4:	f7f9 fb90 	bl	8000ac8 <__aeabi_dcmpeq>
 80073a8:	b908      	cbnz	r0, 80073ae <_dtoa_r+0x186>
 80073aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073ae:	f1ba 0f16 	cmp.w	sl, #22
 80073b2:	d854      	bhi.n	800745e <_dtoa_r+0x236>
 80073b4:	4b61      	ldr	r3, [pc, #388]	; (800753c <_dtoa_r+0x314>)
 80073b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80073c2:	f7f9 fb8b 	bl	8000adc <__aeabi_dcmplt>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	d04b      	beq.n	8007462 <_dtoa_r+0x23a>
 80073ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073ce:	2300      	movs	r3, #0
 80073d0:	930e      	str	r3, [sp, #56]	; 0x38
 80073d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073d4:	1b5d      	subs	r5, r3, r5
 80073d6:	1e6b      	subs	r3, r5, #1
 80073d8:	9304      	str	r3, [sp, #16]
 80073da:	bf43      	ittte	mi
 80073dc:	2300      	movmi	r3, #0
 80073de:	f1c5 0801 	rsbmi	r8, r5, #1
 80073e2:	9304      	strmi	r3, [sp, #16]
 80073e4:	f04f 0800 	movpl.w	r8, #0
 80073e8:	f1ba 0f00 	cmp.w	sl, #0
 80073ec:	db3b      	blt.n	8007466 <_dtoa_r+0x23e>
 80073ee:	9b04      	ldr	r3, [sp, #16]
 80073f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80073f4:	4453      	add	r3, sl
 80073f6:	9304      	str	r3, [sp, #16]
 80073f8:	2300      	movs	r3, #0
 80073fa:	9306      	str	r3, [sp, #24]
 80073fc:	9b05      	ldr	r3, [sp, #20]
 80073fe:	2b09      	cmp	r3, #9
 8007400:	d869      	bhi.n	80074d6 <_dtoa_r+0x2ae>
 8007402:	2b05      	cmp	r3, #5
 8007404:	bfc4      	itt	gt
 8007406:	3b04      	subgt	r3, #4
 8007408:	9305      	strgt	r3, [sp, #20]
 800740a:	9b05      	ldr	r3, [sp, #20]
 800740c:	f1a3 0302 	sub.w	r3, r3, #2
 8007410:	bfcc      	ite	gt
 8007412:	2500      	movgt	r5, #0
 8007414:	2501      	movle	r5, #1
 8007416:	2b03      	cmp	r3, #3
 8007418:	d869      	bhi.n	80074ee <_dtoa_r+0x2c6>
 800741a:	e8df f003 	tbb	[pc, r3]
 800741e:	4e2c      	.short	0x4e2c
 8007420:	5a4c      	.short	0x5a4c
 8007422:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007426:	441d      	add	r5, r3
 8007428:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800742c:	2b20      	cmp	r3, #32
 800742e:	bfc1      	itttt	gt
 8007430:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007434:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007438:	fa09 f303 	lslgt.w	r3, r9, r3
 800743c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007440:	bfda      	itte	le
 8007442:	f1c3 0320 	rsble	r3, r3, #32
 8007446:	fa06 f003 	lslle.w	r0, r6, r3
 800744a:	4318      	orrgt	r0, r3
 800744c:	f7f9 f85a 	bl	8000504 <__aeabi_ui2d>
 8007450:	2301      	movs	r3, #1
 8007452:	4606      	mov	r6, r0
 8007454:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007458:	3d01      	subs	r5, #1
 800745a:	9310      	str	r3, [sp, #64]	; 0x40
 800745c:	e771      	b.n	8007342 <_dtoa_r+0x11a>
 800745e:	2301      	movs	r3, #1
 8007460:	e7b6      	b.n	80073d0 <_dtoa_r+0x1a8>
 8007462:	900e      	str	r0, [sp, #56]	; 0x38
 8007464:	e7b5      	b.n	80073d2 <_dtoa_r+0x1aa>
 8007466:	f1ca 0300 	rsb	r3, sl, #0
 800746a:	9306      	str	r3, [sp, #24]
 800746c:	2300      	movs	r3, #0
 800746e:	eba8 080a 	sub.w	r8, r8, sl
 8007472:	930d      	str	r3, [sp, #52]	; 0x34
 8007474:	e7c2      	b.n	80073fc <_dtoa_r+0x1d4>
 8007476:	2300      	movs	r3, #0
 8007478:	9308      	str	r3, [sp, #32]
 800747a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747c:	2b00      	cmp	r3, #0
 800747e:	dc39      	bgt.n	80074f4 <_dtoa_r+0x2cc>
 8007480:	f04f 0901 	mov.w	r9, #1
 8007484:	f8cd 9004 	str.w	r9, [sp, #4]
 8007488:	464b      	mov	r3, r9
 800748a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800748e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007490:	2200      	movs	r2, #0
 8007492:	6042      	str	r2, [r0, #4]
 8007494:	2204      	movs	r2, #4
 8007496:	f102 0614 	add.w	r6, r2, #20
 800749a:	429e      	cmp	r6, r3
 800749c:	6841      	ldr	r1, [r0, #4]
 800749e:	d92f      	bls.n	8007500 <_dtoa_r+0x2d8>
 80074a0:	4620      	mov	r0, r4
 80074a2:	f000 fcc7 	bl	8007e34 <_Balloc>
 80074a6:	9000      	str	r0, [sp, #0]
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d14b      	bne.n	8007544 <_dtoa_r+0x31c>
 80074ac:	4b24      	ldr	r3, [pc, #144]	; (8007540 <_dtoa_r+0x318>)
 80074ae:	4602      	mov	r2, r0
 80074b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80074b4:	e6d1      	b.n	800725a <_dtoa_r+0x32>
 80074b6:	2301      	movs	r3, #1
 80074b8:	e7de      	b.n	8007478 <_dtoa_r+0x250>
 80074ba:	2300      	movs	r3, #0
 80074bc:	9308      	str	r3, [sp, #32]
 80074be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c0:	eb0a 0903 	add.w	r9, sl, r3
 80074c4:	f109 0301 	add.w	r3, r9, #1
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	9301      	str	r3, [sp, #4]
 80074cc:	bfb8      	it	lt
 80074ce:	2301      	movlt	r3, #1
 80074d0:	e7dd      	b.n	800748e <_dtoa_r+0x266>
 80074d2:	2301      	movs	r3, #1
 80074d4:	e7f2      	b.n	80074bc <_dtoa_r+0x294>
 80074d6:	2501      	movs	r5, #1
 80074d8:	2300      	movs	r3, #0
 80074da:	9305      	str	r3, [sp, #20]
 80074dc:	9508      	str	r5, [sp, #32]
 80074de:	f04f 39ff 	mov.w	r9, #4294967295
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80074e8:	2312      	movs	r3, #18
 80074ea:	9209      	str	r2, [sp, #36]	; 0x24
 80074ec:	e7cf      	b.n	800748e <_dtoa_r+0x266>
 80074ee:	2301      	movs	r3, #1
 80074f0:	9308      	str	r3, [sp, #32]
 80074f2:	e7f4      	b.n	80074de <_dtoa_r+0x2b6>
 80074f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80074f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80074fc:	464b      	mov	r3, r9
 80074fe:	e7c6      	b.n	800748e <_dtoa_r+0x266>
 8007500:	3101      	adds	r1, #1
 8007502:	6041      	str	r1, [r0, #4]
 8007504:	0052      	lsls	r2, r2, #1
 8007506:	e7c6      	b.n	8007496 <_dtoa_r+0x26e>
 8007508:	636f4361 	.word	0x636f4361
 800750c:	3fd287a7 	.word	0x3fd287a7
 8007510:	8b60c8b3 	.word	0x8b60c8b3
 8007514:	3fc68a28 	.word	0x3fc68a28
 8007518:	509f79fb 	.word	0x509f79fb
 800751c:	3fd34413 	.word	0x3fd34413
 8007520:	08009679 	.word	0x08009679
 8007524:	08009690 	.word	0x08009690
 8007528:	7ff00000 	.word	0x7ff00000
 800752c:	08009675 	.word	0x08009675
 8007530:	0800966c 	.word	0x0800966c
 8007534:	08009649 	.word	0x08009649
 8007538:	3ff80000 	.word	0x3ff80000
 800753c:	08009788 	.word	0x08009788
 8007540:	080096ef 	.word	0x080096ef
 8007544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007546:	9a00      	ldr	r2, [sp, #0]
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	9b01      	ldr	r3, [sp, #4]
 800754c:	2b0e      	cmp	r3, #14
 800754e:	f200 80ad 	bhi.w	80076ac <_dtoa_r+0x484>
 8007552:	2d00      	cmp	r5, #0
 8007554:	f000 80aa 	beq.w	80076ac <_dtoa_r+0x484>
 8007558:	f1ba 0f00 	cmp.w	sl, #0
 800755c:	dd36      	ble.n	80075cc <_dtoa_r+0x3a4>
 800755e:	4ac3      	ldr	r2, [pc, #780]	; (800786c <_dtoa_r+0x644>)
 8007560:	f00a 030f 	and.w	r3, sl, #15
 8007564:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007568:	ed93 7b00 	vldr	d7, [r3]
 800756c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007570:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007574:	eeb0 8a47 	vmov.f32	s16, s14
 8007578:	eef0 8a67 	vmov.f32	s17, s15
 800757c:	d016      	beq.n	80075ac <_dtoa_r+0x384>
 800757e:	4bbc      	ldr	r3, [pc, #752]	; (8007870 <_dtoa_r+0x648>)
 8007580:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007584:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007588:	f7f9 f960 	bl	800084c <__aeabi_ddiv>
 800758c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007590:	f007 070f 	and.w	r7, r7, #15
 8007594:	2503      	movs	r5, #3
 8007596:	4eb6      	ldr	r6, [pc, #728]	; (8007870 <_dtoa_r+0x648>)
 8007598:	b957      	cbnz	r7, 80075b0 <_dtoa_r+0x388>
 800759a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800759e:	ec53 2b18 	vmov	r2, r3, d8
 80075a2:	f7f9 f953 	bl	800084c <__aeabi_ddiv>
 80075a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075aa:	e029      	b.n	8007600 <_dtoa_r+0x3d8>
 80075ac:	2502      	movs	r5, #2
 80075ae:	e7f2      	b.n	8007596 <_dtoa_r+0x36e>
 80075b0:	07f9      	lsls	r1, r7, #31
 80075b2:	d508      	bpl.n	80075c6 <_dtoa_r+0x39e>
 80075b4:	ec51 0b18 	vmov	r0, r1, d8
 80075b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075bc:	f7f9 f81c 	bl	80005f8 <__aeabi_dmul>
 80075c0:	ec41 0b18 	vmov	d8, r0, r1
 80075c4:	3501      	adds	r5, #1
 80075c6:	107f      	asrs	r7, r7, #1
 80075c8:	3608      	adds	r6, #8
 80075ca:	e7e5      	b.n	8007598 <_dtoa_r+0x370>
 80075cc:	f000 80a6 	beq.w	800771c <_dtoa_r+0x4f4>
 80075d0:	f1ca 0600 	rsb	r6, sl, #0
 80075d4:	4ba5      	ldr	r3, [pc, #660]	; (800786c <_dtoa_r+0x644>)
 80075d6:	4fa6      	ldr	r7, [pc, #664]	; (8007870 <_dtoa_r+0x648>)
 80075d8:	f006 020f 	and.w	r2, r6, #15
 80075dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075e8:	f7f9 f806 	bl	80005f8 <__aeabi_dmul>
 80075ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075f0:	1136      	asrs	r6, r6, #4
 80075f2:	2300      	movs	r3, #0
 80075f4:	2502      	movs	r5, #2
 80075f6:	2e00      	cmp	r6, #0
 80075f8:	f040 8085 	bne.w	8007706 <_dtoa_r+0x4de>
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1d2      	bne.n	80075a6 <_dtoa_r+0x37e>
 8007600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 808c 	beq.w	8007720 <_dtoa_r+0x4f8>
 8007608:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800760c:	4b99      	ldr	r3, [pc, #612]	; (8007874 <_dtoa_r+0x64c>)
 800760e:	2200      	movs	r2, #0
 8007610:	4630      	mov	r0, r6
 8007612:	4639      	mov	r1, r7
 8007614:	f7f9 fa62 	bl	8000adc <__aeabi_dcmplt>
 8007618:	2800      	cmp	r0, #0
 800761a:	f000 8081 	beq.w	8007720 <_dtoa_r+0x4f8>
 800761e:	9b01      	ldr	r3, [sp, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d07d      	beq.n	8007720 <_dtoa_r+0x4f8>
 8007624:	f1b9 0f00 	cmp.w	r9, #0
 8007628:	dd3c      	ble.n	80076a4 <_dtoa_r+0x47c>
 800762a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800762e:	9307      	str	r3, [sp, #28]
 8007630:	2200      	movs	r2, #0
 8007632:	4b91      	ldr	r3, [pc, #580]	; (8007878 <_dtoa_r+0x650>)
 8007634:	4630      	mov	r0, r6
 8007636:	4639      	mov	r1, r7
 8007638:	f7f8 ffde 	bl	80005f8 <__aeabi_dmul>
 800763c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007640:	3501      	adds	r5, #1
 8007642:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007646:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800764a:	4628      	mov	r0, r5
 800764c:	f7f8 ff6a 	bl	8000524 <__aeabi_i2d>
 8007650:	4632      	mov	r2, r6
 8007652:	463b      	mov	r3, r7
 8007654:	f7f8 ffd0 	bl	80005f8 <__aeabi_dmul>
 8007658:	4b88      	ldr	r3, [pc, #544]	; (800787c <_dtoa_r+0x654>)
 800765a:	2200      	movs	r2, #0
 800765c:	f7f8 fe16 	bl	800028c <__adddf3>
 8007660:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007668:	9303      	str	r3, [sp, #12]
 800766a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800766c:	2b00      	cmp	r3, #0
 800766e:	d15c      	bne.n	800772a <_dtoa_r+0x502>
 8007670:	4b83      	ldr	r3, [pc, #524]	; (8007880 <_dtoa_r+0x658>)
 8007672:	2200      	movs	r2, #0
 8007674:	4630      	mov	r0, r6
 8007676:	4639      	mov	r1, r7
 8007678:	f7f8 fe06 	bl	8000288 <__aeabi_dsub>
 800767c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007680:	4606      	mov	r6, r0
 8007682:	460f      	mov	r7, r1
 8007684:	f7f9 fa48 	bl	8000b18 <__aeabi_dcmpgt>
 8007688:	2800      	cmp	r0, #0
 800768a:	f040 8296 	bne.w	8007bba <_dtoa_r+0x992>
 800768e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007692:	4630      	mov	r0, r6
 8007694:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007698:	4639      	mov	r1, r7
 800769a:	f7f9 fa1f 	bl	8000adc <__aeabi_dcmplt>
 800769e:	2800      	cmp	r0, #0
 80076a0:	f040 8288 	bne.w	8007bb4 <_dtoa_r+0x98c>
 80076a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80076a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f2c0 8158 	blt.w	8007964 <_dtoa_r+0x73c>
 80076b4:	f1ba 0f0e 	cmp.w	sl, #14
 80076b8:	f300 8154 	bgt.w	8007964 <_dtoa_r+0x73c>
 80076bc:	4b6b      	ldr	r3, [pc, #428]	; (800786c <_dtoa_r+0x644>)
 80076be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80076c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f280 80e3 	bge.w	8007894 <_dtoa_r+0x66c>
 80076ce:	9b01      	ldr	r3, [sp, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f300 80df 	bgt.w	8007894 <_dtoa_r+0x66c>
 80076d6:	f040 826d 	bne.w	8007bb4 <_dtoa_r+0x98c>
 80076da:	4b69      	ldr	r3, [pc, #420]	; (8007880 <_dtoa_r+0x658>)
 80076dc:	2200      	movs	r2, #0
 80076de:	4640      	mov	r0, r8
 80076e0:	4649      	mov	r1, r9
 80076e2:	f7f8 ff89 	bl	80005f8 <__aeabi_dmul>
 80076e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076ea:	f7f9 fa0b 	bl	8000b04 <__aeabi_dcmpge>
 80076ee:	9e01      	ldr	r6, [sp, #4]
 80076f0:	4637      	mov	r7, r6
 80076f2:	2800      	cmp	r0, #0
 80076f4:	f040 8243 	bne.w	8007b7e <_dtoa_r+0x956>
 80076f8:	9d00      	ldr	r5, [sp, #0]
 80076fa:	2331      	movs	r3, #49	; 0x31
 80076fc:	f805 3b01 	strb.w	r3, [r5], #1
 8007700:	f10a 0a01 	add.w	sl, sl, #1
 8007704:	e23f      	b.n	8007b86 <_dtoa_r+0x95e>
 8007706:	07f2      	lsls	r2, r6, #31
 8007708:	d505      	bpl.n	8007716 <_dtoa_r+0x4ee>
 800770a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800770e:	f7f8 ff73 	bl	80005f8 <__aeabi_dmul>
 8007712:	3501      	adds	r5, #1
 8007714:	2301      	movs	r3, #1
 8007716:	1076      	asrs	r6, r6, #1
 8007718:	3708      	adds	r7, #8
 800771a:	e76c      	b.n	80075f6 <_dtoa_r+0x3ce>
 800771c:	2502      	movs	r5, #2
 800771e:	e76f      	b.n	8007600 <_dtoa_r+0x3d8>
 8007720:	9b01      	ldr	r3, [sp, #4]
 8007722:	f8cd a01c 	str.w	sl, [sp, #28]
 8007726:	930c      	str	r3, [sp, #48]	; 0x30
 8007728:	e78d      	b.n	8007646 <_dtoa_r+0x41e>
 800772a:	9900      	ldr	r1, [sp, #0]
 800772c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800772e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007730:	4b4e      	ldr	r3, [pc, #312]	; (800786c <_dtoa_r+0x644>)
 8007732:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007736:	4401      	add	r1, r0
 8007738:	9102      	str	r1, [sp, #8]
 800773a:	9908      	ldr	r1, [sp, #32]
 800773c:	eeb0 8a47 	vmov.f32	s16, s14
 8007740:	eef0 8a67 	vmov.f32	s17, s15
 8007744:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007748:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800774c:	2900      	cmp	r1, #0
 800774e:	d045      	beq.n	80077dc <_dtoa_r+0x5b4>
 8007750:	494c      	ldr	r1, [pc, #304]	; (8007884 <_dtoa_r+0x65c>)
 8007752:	2000      	movs	r0, #0
 8007754:	f7f9 f87a 	bl	800084c <__aeabi_ddiv>
 8007758:	ec53 2b18 	vmov	r2, r3, d8
 800775c:	f7f8 fd94 	bl	8000288 <__aeabi_dsub>
 8007760:	9d00      	ldr	r5, [sp, #0]
 8007762:	ec41 0b18 	vmov	d8, r0, r1
 8007766:	4639      	mov	r1, r7
 8007768:	4630      	mov	r0, r6
 800776a:	f7f9 f9f5 	bl	8000b58 <__aeabi_d2iz>
 800776e:	900c      	str	r0, [sp, #48]	; 0x30
 8007770:	f7f8 fed8 	bl	8000524 <__aeabi_i2d>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	4630      	mov	r0, r6
 800777a:	4639      	mov	r1, r7
 800777c:	f7f8 fd84 	bl	8000288 <__aeabi_dsub>
 8007780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007782:	3330      	adds	r3, #48	; 0x30
 8007784:	f805 3b01 	strb.w	r3, [r5], #1
 8007788:	ec53 2b18 	vmov	r2, r3, d8
 800778c:	4606      	mov	r6, r0
 800778e:	460f      	mov	r7, r1
 8007790:	f7f9 f9a4 	bl	8000adc <__aeabi_dcmplt>
 8007794:	2800      	cmp	r0, #0
 8007796:	d165      	bne.n	8007864 <_dtoa_r+0x63c>
 8007798:	4632      	mov	r2, r6
 800779a:	463b      	mov	r3, r7
 800779c:	4935      	ldr	r1, [pc, #212]	; (8007874 <_dtoa_r+0x64c>)
 800779e:	2000      	movs	r0, #0
 80077a0:	f7f8 fd72 	bl	8000288 <__aeabi_dsub>
 80077a4:	ec53 2b18 	vmov	r2, r3, d8
 80077a8:	f7f9 f998 	bl	8000adc <__aeabi_dcmplt>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	f040 80b9 	bne.w	8007924 <_dtoa_r+0x6fc>
 80077b2:	9b02      	ldr	r3, [sp, #8]
 80077b4:	429d      	cmp	r5, r3
 80077b6:	f43f af75 	beq.w	80076a4 <_dtoa_r+0x47c>
 80077ba:	4b2f      	ldr	r3, [pc, #188]	; (8007878 <_dtoa_r+0x650>)
 80077bc:	ec51 0b18 	vmov	r0, r1, d8
 80077c0:	2200      	movs	r2, #0
 80077c2:	f7f8 ff19 	bl	80005f8 <__aeabi_dmul>
 80077c6:	4b2c      	ldr	r3, [pc, #176]	; (8007878 <_dtoa_r+0x650>)
 80077c8:	ec41 0b18 	vmov	d8, r0, r1
 80077cc:	2200      	movs	r2, #0
 80077ce:	4630      	mov	r0, r6
 80077d0:	4639      	mov	r1, r7
 80077d2:	f7f8 ff11 	bl	80005f8 <__aeabi_dmul>
 80077d6:	4606      	mov	r6, r0
 80077d8:	460f      	mov	r7, r1
 80077da:	e7c4      	b.n	8007766 <_dtoa_r+0x53e>
 80077dc:	ec51 0b17 	vmov	r0, r1, d7
 80077e0:	f7f8 ff0a 	bl	80005f8 <__aeabi_dmul>
 80077e4:	9b02      	ldr	r3, [sp, #8]
 80077e6:	9d00      	ldr	r5, [sp, #0]
 80077e8:	930c      	str	r3, [sp, #48]	; 0x30
 80077ea:	ec41 0b18 	vmov	d8, r0, r1
 80077ee:	4639      	mov	r1, r7
 80077f0:	4630      	mov	r0, r6
 80077f2:	f7f9 f9b1 	bl	8000b58 <__aeabi_d2iz>
 80077f6:	9011      	str	r0, [sp, #68]	; 0x44
 80077f8:	f7f8 fe94 	bl	8000524 <__aeabi_i2d>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4630      	mov	r0, r6
 8007802:	4639      	mov	r1, r7
 8007804:	f7f8 fd40 	bl	8000288 <__aeabi_dsub>
 8007808:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800780a:	3330      	adds	r3, #48	; 0x30
 800780c:	f805 3b01 	strb.w	r3, [r5], #1
 8007810:	9b02      	ldr	r3, [sp, #8]
 8007812:	429d      	cmp	r5, r3
 8007814:	4606      	mov	r6, r0
 8007816:	460f      	mov	r7, r1
 8007818:	f04f 0200 	mov.w	r2, #0
 800781c:	d134      	bne.n	8007888 <_dtoa_r+0x660>
 800781e:	4b19      	ldr	r3, [pc, #100]	; (8007884 <_dtoa_r+0x65c>)
 8007820:	ec51 0b18 	vmov	r0, r1, d8
 8007824:	f7f8 fd32 	bl	800028c <__adddf3>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4630      	mov	r0, r6
 800782e:	4639      	mov	r1, r7
 8007830:	f7f9 f972 	bl	8000b18 <__aeabi_dcmpgt>
 8007834:	2800      	cmp	r0, #0
 8007836:	d175      	bne.n	8007924 <_dtoa_r+0x6fc>
 8007838:	ec53 2b18 	vmov	r2, r3, d8
 800783c:	4911      	ldr	r1, [pc, #68]	; (8007884 <_dtoa_r+0x65c>)
 800783e:	2000      	movs	r0, #0
 8007840:	f7f8 fd22 	bl	8000288 <__aeabi_dsub>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	4630      	mov	r0, r6
 800784a:	4639      	mov	r1, r7
 800784c:	f7f9 f946 	bl	8000adc <__aeabi_dcmplt>
 8007850:	2800      	cmp	r0, #0
 8007852:	f43f af27 	beq.w	80076a4 <_dtoa_r+0x47c>
 8007856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007858:	1e6b      	subs	r3, r5, #1
 800785a:	930c      	str	r3, [sp, #48]	; 0x30
 800785c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007860:	2b30      	cmp	r3, #48	; 0x30
 8007862:	d0f8      	beq.n	8007856 <_dtoa_r+0x62e>
 8007864:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007868:	e04a      	b.n	8007900 <_dtoa_r+0x6d8>
 800786a:	bf00      	nop
 800786c:	08009788 	.word	0x08009788
 8007870:	08009760 	.word	0x08009760
 8007874:	3ff00000 	.word	0x3ff00000
 8007878:	40240000 	.word	0x40240000
 800787c:	401c0000 	.word	0x401c0000
 8007880:	40140000 	.word	0x40140000
 8007884:	3fe00000 	.word	0x3fe00000
 8007888:	4baf      	ldr	r3, [pc, #700]	; (8007b48 <_dtoa_r+0x920>)
 800788a:	f7f8 feb5 	bl	80005f8 <__aeabi_dmul>
 800788e:	4606      	mov	r6, r0
 8007890:	460f      	mov	r7, r1
 8007892:	e7ac      	b.n	80077ee <_dtoa_r+0x5c6>
 8007894:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007898:	9d00      	ldr	r5, [sp, #0]
 800789a:	4642      	mov	r2, r8
 800789c:	464b      	mov	r3, r9
 800789e:	4630      	mov	r0, r6
 80078a0:	4639      	mov	r1, r7
 80078a2:	f7f8 ffd3 	bl	800084c <__aeabi_ddiv>
 80078a6:	f7f9 f957 	bl	8000b58 <__aeabi_d2iz>
 80078aa:	9002      	str	r0, [sp, #8]
 80078ac:	f7f8 fe3a 	bl	8000524 <__aeabi_i2d>
 80078b0:	4642      	mov	r2, r8
 80078b2:	464b      	mov	r3, r9
 80078b4:	f7f8 fea0 	bl	80005f8 <__aeabi_dmul>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	4630      	mov	r0, r6
 80078be:	4639      	mov	r1, r7
 80078c0:	f7f8 fce2 	bl	8000288 <__aeabi_dsub>
 80078c4:	9e02      	ldr	r6, [sp, #8]
 80078c6:	9f01      	ldr	r7, [sp, #4]
 80078c8:	3630      	adds	r6, #48	; 0x30
 80078ca:	f805 6b01 	strb.w	r6, [r5], #1
 80078ce:	9e00      	ldr	r6, [sp, #0]
 80078d0:	1bae      	subs	r6, r5, r6
 80078d2:	42b7      	cmp	r7, r6
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	d137      	bne.n	800794a <_dtoa_r+0x722>
 80078da:	f7f8 fcd7 	bl	800028c <__adddf3>
 80078de:	4642      	mov	r2, r8
 80078e0:	464b      	mov	r3, r9
 80078e2:	4606      	mov	r6, r0
 80078e4:	460f      	mov	r7, r1
 80078e6:	f7f9 f917 	bl	8000b18 <__aeabi_dcmpgt>
 80078ea:	b9c8      	cbnz	r0, 8007920 <_dtoa_r+0x6f8>
 80078ec:	4642      	mov	r2, r8
 80078ee:	464b      	mov	r3, r9
 80078f0:	4630      	mov	r0, r6
 80078f2:	4639      	mov	r1, r7
 80078f4:	f7f9 f8e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80078f8:	b110      	cbz	r0, 8007900 <_dtoa_r+0x6d8>
 80078fa:	9b02      	ldr	r3, [sp, #8]
 80078fc:	07d9      	lsls	r1, r3, #31
 80078fe:	d40f      	bmi.n	8007920 <_dtoa_r+0x6f8>
 8007900:	4620      	mov	r0, r4
 8007902:	4659      	mov	r1, fp
 8007904:	f000 fad6 	bl	8007eb4 <_Bfree>
 8007908:	2300      	movs	r3, #0
 800790a:	702b      	strb	r3, [r5, #0]
 800790c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800790e:	f10a 0001 	add.w	r0, sl, #1
 8007912:	6018      	str	r0, [r3, #0]
 8007914:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007916:	2b00      	cmp	r3, #0
 8007918:	f43f acd8 	beq.w	80072cc <_dtoa_r+0xa4>
 800791c:	601d      	str	r5, [r3, #0]
 800791e:	e4d5      	b.n	80072cc <_dtoa_r+0xa4>
 8007920:	f8cd a01c 	str.w	sl, [sp, #28]
 8007924:	462b      	mov	r3, r5
 8007926:	461d      	mov	r5, r3
 8007928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800792c:	2a39      	cmp	r2, #57	; 0x39
 800792e:	d108      	bne.n	8007942 <_dtoa_r+0x71a>
 8007930:	9a00      	ldr	r2, [sp, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d1f7      	bne.n	8007926 <_dtoa_r+0x6fe>
 8007936:	9a07      	ldr	r2, [sp, #28]
 8007938:	9900      	ldr	r1, [sp, #0]
 800793a:	3201      	adds	r2, #1
 800793c:	9207      	str	r2, [sp, #28]
 800793e:	2230      	movs	r2, #48	; 0x30
 8007940:	700a      	strb	r2, [r1, #0]
 8007942:	781a      	ldrb	r2, [r3, #0]
 8007944:	3201      	adds	r2, #1
 8007946:	701a      	strb	r2, [r3, #0]
 8007948:	e78c      	b.n	8007864 <_dtoa_r+0x63c>
 800794a:	4b7f      	ldr	r3, [pc, #508]	; (8007b48 <_dtoa_r+0x920>)
 800794c:	2200      	movs	r2, #0
 800794e:	f7f8 fe53 	bl	80005f8 <__aeabi_dmul>
 8007952:	2200      	movs	r2, #0
 8007954:	2300      	movs	r3, #0
 8007956:	4606      	mov	r6, r0
 8007958:	460f      	mov	r7, r1
 800795a:	f7f9 f8b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800795e:	2800      	cmp	r0, #0
 8007960:	d09b      	beq.n	800789a <_dtoa_r+0x672>
 8007962:	e7cd      	b.n	8007900 <_dtoa_r+0x6d8>
 8007964:	9a08      	ldr	r2, [sp, #32]
 8007966:	2a00      	cmp	r2, #0
 8007968:	f000 80c4 	beq.w	8007af4 <_dtoa_r+0x8cc>
 800796c:	9a05      	ldr	r2, [sp, #20]
 800796e:	2a01      	cmp	r2, #1
 8007970:	f300 80a8 	bgt.w	8007ac4 <_dtoa_r+0x89c>
 8007974:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007976:	2a00      	cmp	r2, #0
 8007978:	f000 80a0 	beq.w	8007abc <_dtoa_r+0x894>
 800797c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007980:	9e06      	ldr	r6, [sp, #24]
 8007982:	4645      	mov	r5, r8
 8007984:	9a04      	ldr	r2, [sp, #16]
 8007986:	2101      	movs	r1, #1
 8007988:	441a      	add	r2, r3
 800798a:	4620      	mov	r0, r4
 800798c:	4498      	add	r8, r3
 800798e:	9204      	str	r2, [sp, #16]
 8007990:	f000 fb4c 	bl	800802c <__i2b>
 8007994:	4607      	mov	r7, r0
 8007996:	2d00      	cmp	r5, #0
 8007998:	dd0b      	ble.n	80079b2 <_dtoa_r+0x78a>
 800799a:	9b04      	ldr	r3, [sp, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	dd08      	ble.n	80079b2 <_dtoa_r+0x78a>
 80079a0:	42ab      	cmp	r3, r5
 80079a2:	9a04      	ldr	r2, [sp, #16]
 80079a4:	bfa8      	it	ge
 80079a6:	462b      	movge	r3, r5
 80079a8:	eba8 0803 	sub.w	r8, r8, r3
 80079ac:	1aed      	subs	r5, r5, r3
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	9304      	str	r3, [sp, #16]
 80079b2:	9b06      	ldr	r3, [sp, #24]
 80079b4:	b1fb      	cbz	r3, 80079f6 <_dtoa_r+0x7ce>
 80079b6:	9b08      	ldr	r3, [sp, #32]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 809f 	beq.w	8007afc <_dtoa_r+0x8d4>
 80079be:	2e00      	cmp	r6, #0
 80079c0:	dd11      	ble.n	80079e6 <_dtoa_r+0x7be>
 80079c2:	4639      	mov	r1, r7
 80079c4:	4632      	mov	r2, r6
 80079c6:	4620      	mov	r0, r4
 80079c8:	f000 fbec 	bl	80081a4 <__pow5mult>
 80079cc:	465a      	mov	r2, fp
 80079ce:	4601      	mov	r1, r0
 80079d0:	4607      	mov	r7, r0
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 fb40 	bl	8008058 <__multiply>
 80079d8:	4659      	mov	r1, fp
 80079da:	9007      	str	r0, [sp, #28]
 80079dc:	4620      	mov	r0, r4
 80079de:	f000 fa69 	bl	8007eb4 <_Bfree>
 80079e2:	9b07      	ldr	r3, [sp, #28]
 80079e4:	469b      	mov	fp, r3
 80079e6:	9b06      	ldr	r3, [sp, #24]
 80079e8:	1b9a      	subs	r2, r3, r6
 80079ea:	d004      	beq.n	80079f6 <_dtoa_r+0x7ce>
 80079ec:	4659      	mov	r1, fp
 80079ee:	4620      	mov	r0, r4
 80079f0:	f000 fbd8 	bl	80081a4 <__pow5mult>
 80079f4:	4683      	mov	fp, r0
 80079f6:	2101      	movs	r1, #1
 80079f8:	4620      	mov	r0, r4
 80079fa:	f000 fb17 	bl	800802c <__i2b>
 80079fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	4606      	mov	r6, r0
 8007a04:	dd7c      	ble.n	8007b00 <_dtoa_r+0x8d8>
 8007a06:	461a      	mov	r2, r3
 8007a08:	4601      	mov	r1, r0
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f000 fbca 	bl	80081a4 <__pow5mult>
 8007a10:	9b05      	ldr	r3, [sp, #20]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	4606      	mov	r6, r0
 8007a16:	dd76      	ble.n	8007b06 <_dtoa_r+0x8de>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	9306      	str	r3, [sp, #24]
 8007a1c:	6933      	ldr	r3, [r6, #16]
 8007a1e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007a22:	6918      	ldr	r0, [r3, #16]
 8007a24:	f000 fab2 	bl	8007f8c <__hi0bits>
 8007a28:	f1c0 0020 	rsb	r0, r0, #32
 8007a2c:	9b04      	ldr	r3, [sp, #16]
 8007a2e:	4418      	add	r0, r3
 8007a30:	f010 001f 	ands.w	r0, r0, #31
 8007a34:	f000 8086 	beq.w	8007b44 <_dtoa_r+0x91c>
 8007a38:	f1c0 0320 	rsb	r3, r0, #32
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	dd7f      	ble.n	8007b40 <_dtoa_r+0x918>
 8007a40:	f1c0 001c 	rsb	r0, r0, #28
 8007a44:	9b04      	ldr	r3, [sp, #16]
 8007a46:	4403      	add	r3, r0
 8007a48:	4480      	add	r8, r0
 8007a4a:	4405      	add	r5, r0
 8007a4c:	9304      	str	r3, [sp, #16]
 8007a4e:	f1b8 0f00 	cmp.w	r8, #0
 8007a52:	dd05      	ble.n	8007a60 <_dtoa_r+0x838>
 8007a54:	4659      	mov	r1, fp
 8007a56:	4642      	mov	r2, r8
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f000 fbfd 	bl	8008258 <__lshift>
 8007a5e:	4683      	mov	fp, r0
 8007a60:	9b04      	ldr	r3, [sp, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	dd05      	ble.n	8007a72 <_dtoa_r+0x84a>
 8007a66:	4631      	mov	r1, r6
 8007a68:	461a      	mov	r2, r3
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f000 fbf4 	bl	8008258 <__lshift>
 8007a70:	4606      	mov	r6, r0
 8007a72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d069      	beq.n	8007b4c <_dtoa_r+0x924>
 8007a78:	4631      	mov	r1, r6
 8007a7a:	4658      	mov	r0, fp
 8007a7c:	f000 fc58 	bl	8008330 <__mcmp>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	da63      	bge.n	8007b4c <_dtoa_r+0x924>
 8007a84:	2300      	movs	r3, #0
 8007a86:	4659      	mov	r1, fp
 8007a88:	220a      	movs	r2, #10
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f000 fa34 	bl	8007ef8 <__multadd>
 8007a90:	9b08      	ldr	r3, [sp, #32]
 8007a92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a96:	4683      	mov	fp, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 818f 	beq.w	8007dbc <_dtoa_r+0xb94>
 8007a9e:	4639      	mov	r1, r7
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	220a      	movs	r2, #10
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f000 fa27 	bl	8007ef8 <__multadd>
 8007aaa:	f1b9 0f00 	cmp.w	r9, #0
 8007aae:	4607      	mov	r7, r0
 8007ab0:	f300 808e 	bgt.w	8007bd0 <_dtoa_r+0x9a8>
 8007ab4:	9b05      	ldr	r3, [sp, #20]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	dc50      	bgt.n	8007b5c <_dtoa_r+0x934>
 8007aba:	e089      	b.n	8007bd0 <_dtoa_r+0x9a8>
 8007abc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007abe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ac2:	e75d      	b.n	8007980 <_dtoa_r+0x758>
 8007ac4:	9b01      	ldr	r3, [sp, #4]
 8007ac6:	1e5e      	subs	r6, r3, #1
 8007ac8:	9b06      	ldr	r3, [sp, #24]
 8007aca:	42b3      	cmp	r3, r6
 8007acc:	bfbf      	itttt	lt
 8007ace:	9b06      	ldrlt	r3, [sp, #24]
 8007ad0:	9606      	strlt	r6, [sp, #24]
 8007ad2:	1af2      	sublt	r2, r6, r3
 8007ad4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007ad6:	bfb6      	itet	lt
 8007ad8:	189b      	addlt	r3, r3, r2
 8007ada:	1b9e      	subge	r6, r3, r6
 8007adc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007ade:	9b01      	ldr	r3, [sp, #4]
 8007ae0:	bfb8      	it	lt
 8007ae2:	2600      	movlt	r6, #0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	bfb5      	itete	lt
 8007ae8:	eba8 0503 	sublt.w	r5, r8, r3
 8007aec:	9b01      	ldrge	r3, [sp, #4]
 8007aee:	2300      	movlt	r3, #0
 8007af0:	4645      	movge	r5, r8
 8007af2:	e747      	b.n	8007984 <_dtoa_r+0x75c>
 8007af4:	9e06      	ldr	r6, [sp, #24]
 8007af6:	9f08      	ldr	r7, [sp, #32]
 8007af8:	4645      	mov	r5, r8
 8007afa:	e74c      	b.n	8007996 <_dtoa_r+0x76e>
 8007afc:	9a06      	ldr	r2, [sp, #24]
 8007afe:	e775      	b.n	80079ec <_dtoa_r+0x7c4>
 8007b00:	9b05      	ldr	r3, [sp, #20]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	dc18      	bgt.n	8007b38 <_dtoa_r+0x910>
 8007b06:	9b02      	ldr	r3, [sp, #8]
 8007b08:	b9b3      	cbnz	r3, 8007b38 <_dtoa_r+0x910>
 8007b0a:	9b03      	ldr	r3, [sp, #12]
 8007b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b10:	b9a3      	cbnz	r3, 8007b3c <_dtoa_r+0x914>
 8007b12:	9b03      	ldr	r3, [sp, #12]
 8007b14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b18:	0d1b      	lsrs	r3, r3, #20
 8007b1a:	051b      	lsls	r3, r3, #20
 8007b1c:	b12b      	cbz	r3, 8007b2a <_dtoa_r+0x902>
 8007b1e:	9b04      	ldr	r3, [sp, #16]
 8007b20:	3301      	adds	r3, #1
 8007b22:	9304      	str	r3, [sp, #16]
 8007b24:	f108 0801 	add.w	r8, r8, #1
 8007b28:	2301      	movs	r3, #1
 8007b2a:	9306      	str	r3, [sp, #24]
 8007b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f47f af74 	bne.w	8007a1c <_dtoa_r+0x7f4>
 8007b34:	2001      	movs	r0, #1
 8007b36:	e779      	b.n	8007a2c <_dtoa_r+0x804>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	e7f6      	b.n	8007b2a <_dtoa_r+0x902>
 8007b3c:	9b02      	ldr	r3, [sp, #8]
 8007b3e:	e7f4      	b.n	8007b2a <_dtoa_r+0x902>
 8007b40:	d085      	beq.n	8007a4e <_dtoa_r+0x826>
 8007b42:	4618      	mov	r0, r3
 8007b44:	301c      	adds	r0, #28
 8007b46:	e77d      	b.n	8007a44 <_dtoa_r+0x81c>
 8007b48:	40240000 	.word	0x40240000
 8007b4c:	9b01      	ldr	r3, [sp, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	dc38      	bgt.n	8007bc4 <_dtoa_r+0x99c>
 8007b52:	9b05      	ldr	r3, [sp, #20]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	dd35      	ble.n	8007bc4 <_dtoa_r+0x99c>
 8007b58:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007b5c:	f1b9 0f00 	cmp.w	r9, #0
 8007b60:	d10d      	bne.n	8007b7e <_dtoa_r+0x956>
 8007b62:	4631      	mov	r1, r6
 8007b64:	464b      	mov	r3, r9
 8007b66:	2205      	movs	r2, #5
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f000 f9c5 	bl	8007ef8 <__multadd>
 8007b6e:	4601      	mov	r1, r0
 8007b70:	4606      	mov	r6, r0
 8007b72:	4658      	mov	r0, fp
 8007b74:	f000 fbdc 	bl	8008330 <__mcmp>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	f73f adbd 	bgt.w	80076f8 <_dtoa_r+0x4d0>
 8007b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b80:	9d00      	ldr	r5, [sp, #0]
 8007b82:	ea6f 0a03 	mvn.w	sl, r3
 8007b86:	f04f 0800 	mov.w	r8, #0
 8007b8a:	4631      	mov	r1, r6
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f000 f991 	bl	8007eb4 <_Bfree>
 8007b92:	2f00      	cmp	r7, #0
 8007b94:	f43f aeb4 	beq.w	8007900 <_dtoa_r+0x6d8>
 8007b98:	f1b8 0f00 	cmp.w	r8, #0
 8007b9c:	d005      	beq.n	8007baa <_dtoa_r+0x982>
 8007b9e:	45b8      	cmp	r8, r7
 8007ba0:	d003      	beq.n	8007baa <_dtoa_r+0x982>
 8007ba2:	4641      	mov	r1, r8
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f000 f985 	bl	8007eb4 <_Bfree>
 8007baa:	4639      	mov	r1, r7
 8007bac:	4620      	mov	r0, r4
 8007bae:	f000 f981 	bl	8007eb4 <_Bfree>
 8007bb2:	e6a5      	b.n	8007900 <_dtoa_r+0x6d8>
 8007bb4:	2600      	movs	r6, #0
 8007bb6:	4637      	mov	r7, r6
 8007bb8:	e7e1      	b.n	8007b7e <_dtoa_r+0x956>
 8007bba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007bbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007bc0:	4637      	mov	r7, r6
 8007bc2:	e599      	b.n	80076f8 <_dtoa_r+0x4d0>
 8007bc4:	9b08      	ldr	r3, [sp, #32]
 8007bc6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 80fd 	beq.w	8007dca <_dtoa_r+0xba2>
 8007bd0:	2d00      	cmp	r5, #0
 8007bd2:	dd05      	ble.n	8007be0 <_dtoa_r+0x9b8>
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	462a      	mov	r2, r5
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f000 fb3d 	bl	8008258 <__lshift>
 8007bde:	4607      	mov	r7, r0
 8007be0:	9b06      	ldr	r3, [sp, #24]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d05c      	beq.n	8007ca0 <_dtoa_r+0xa78>
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	4620      	mov	r0, r4
 8007bea:	f000 f923 	bl	8007e34 <_Balloc>
 8007bee:	4605      	mov	r5, r0
 8007bf0:	b928      	cbnz	r0, 8007bfe <_dtoa_r+0x9d6>
 8007bf2:	4b80      	ldr	r3, [pc, #512]	; (8007df4 <_dtoa_r+0xbcc>)
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007bfa:	f7ff bb2e 	b.w	800725a <_dtoa_r+0x32>
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	3202      	adds	r2, #2
 8007c02:	0092      	lsls	r2, r2, #2
 8007c04:	f107 010c 	add.w	r1, r7, #12
 8007c08:	300c      	adds	r0, #12
 8007c0a:	f000 f905 	bl	8007e18 <memcpy>
 8007c0e:	2201      	movs	r2, #1
 8007c10:	4629      	mov	r1, r5
 8007c12:	4620      	mov	r0, r4
 8007c14:	f000 fb20 	bl	8008258 <__lshift>
 8007c18:	9b00      	ldr	r3, [sp, #0]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	9301      	str	r3, [sp, #4]
 8007c1e:	9b00      	ldr	r3, [sp, #0]
 8007c20:	444b      	add	r3, r9
 8007c22:	9307      	str	r3, [sp, #28]
 8007c24:	9b02      	ldr	r3, [sp, #8]
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	46b8      	mov	r8, r7
 8007c2c:	9306      	str	r3, [sp, #24]
 8007c2e:	4607      	mov	r7, r0
 8007c30:	9b01      	ldr	r3, [sp, #4]
 8007c32:	4631      	mov	r1, r6
 8007c34:	3b01      	subs	r3, #1
 8007c36:	4658      	mov	r0, fp
 8007c38:	9302      	str	r3, [sp, #8]
 8007c3a:	f7ff fa67 	bl	800710c <quorem>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	3330      	adds	r3, #48	; 0x30
 8007c42:	9004      	str	r0, [sp, #16]
 8007c44:	4641      	mov	r1, r8
 8007c46:	4658      	mov	r0, fp
 8007c48:	9308      	str	r3, [sp, #32]
 8007c4a:	f000 fb71 	bl	8008330 <__mcmp>
 8007c4e:	463a      	mov	r2, r7
 8007c50:	4681      	mov	r9, r0
 8007c52:	4631      	mov	r1, r6
 8007c54:	4620      	mov	r0, r4
 8007c56:	f000 fb87 	bl	8008368 <__mdiff>
 8007c5a:	68c2      	ldr	r2, [r0, #12]
 8007c5c:	9b08      	ldr	r3, [sp, #32]
 8007c5e:	4605      	mov	r5, r0
 8007c60:	bb02      	cbnz	r2, 8007ca4 <_dtoa_r+0xa7c>
 8007c62:	4601      	mov	r1, r0
 8007c64:	4658      	mov	r0, fp
 8007c66:	f000 fb63 	bl	8008330 <__mcmp>
 8007c6a:	9b08      	ldr	r3, [sp, #32]
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4620      	mov	r0, r4
 8007c72:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007c76:	f000 f91d 	bl	8007eb4 <_Bfree>
 8007c7a:	9b05      	ldr	r3, [sp, #20]
 8007c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c7e:	9d01      	ldr	r5, [sp, #4]
 8007c80:	ea43 0102 	orr.w	r1, r3, r2
 8007c84:	9b06      	ldr	r3, [sp, #24]
 8007c86:	430b      	orrs	r3, r1
 8007c88:	9b08      	ldr	r3, [sp, #32]
 8007c8a:	d10d      	bne.n	8007ca8 <_dtoa_r+0xa80>
 8007c8c:	2b39      	cmp	r3, #57	; 0x39
 8007c8e:	d029      	beq.n	8007ce4 <_dtoa_r+0xabc>
 8007c90:	f1b9 0f00 	cmp.w	r9, #0
 8007c94:	dd01      	ble.n	8007c9a <_dtoa_r+0xa72>
 8007c96:	9b04      	ldr	r3, [sp, #16]
 8007c98:	3331      	adds	r3, #49	; 0x31
 8007c9a:	9a02      	ldr	r2, [sp, #8]
 8007c9c:	7013      	strb	r3, [r2, #0]
 8007c9e:	e774      	b.n	8007b8a <_dtoa_r+0x962>
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	e7b9      	b.n	8007c18 <_dtoa_r+0x9f0>
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	e7e2      	b.n	8007c6e <_dtoa_r+0xa46>
 8007ca8:	f1b9 0f00 	cmp.w	r9, #0
 8007cac:	db06      	blt.n	8007cbc <_dtoa_r+0xa94>
 8007cae:	9905      	ldr	r1, [sp, #20]
 8007cb0:	ea41 0909 	orr.w	r9, r1, r9
 8007cb4:	9906      	ldr	r1, [sp, #24]
 8007cb6:	ea59 0101 	orrs.w	r1, r9, r1
 8007cba:	d120      	bne.n	8007cfe <_dtoa_r+0xad6>
 8007cbc:	2a00      	cmp	r2, #0
 8007cbe:	ddec      	ble.n	8007c9a <_dtoa_r+0xa72>
 8007cc0:	4659      	mov	r1, fp
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	f000 fac6 	bl	8008258 <__lshift>
 8007ccc:	4631      	mov	r1, r6
 8007cce:	4683      	mov	fp, r0
 8007cd0:	f000 fb2e 	bl	8008330 <__mcmp>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	9b01      	ldr	r3, [sp, #4]
 8007cd8:	dc02      	bgt.n	8007ce0 <_dtoa_r+0xab8>
 8007cda:	d1de      	bne.n	8007c9a <_dtoa_r+0xa72>
 8007cdc:	07da      	lsls	r2, r3, #31
 8007cde:	d5dc      	bpl.n	8007c9a <_dtoa_r+0xa72>
 8007ce0:	2b39      	cmp	r3, #57	; 0x39
 8007ce2:	d1d8      	bne.n	8007c96 <_dtoa_r+0xa6e>
 8007ce4:	9a02      	ldr	r2, [sp, #8]
 8007ce6:	2339      	movs	r3, #57	; 0x39
 8007ce8:	7013      	strb	r3, [r2, #0]
 8007cea:	462b      	mov	r3, r5
 8007cec:	461d      	mov	r5, r3
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007cf4:	2a39      	cmp	r2, #57	; 0x39
 8007cf6:	d050      	beq.n	8007d9a <_dtoa_r+0xb72>
 8007cf8:	3201      	adds	r2, #1
 8007cfa:	701a      	strb	r2, [r3, #0]
 8007cfc:	e745      	b.n	8007b8a <_dtoa_r+0x962>
 8007cfe:	2a00      	cmp	r2, #0
 8007d00:	dd03      	ble.n	8007d0a <_dtoa_r+0xae2>
 8007d02:	2b39      	cmp	r3, #57	; 0x39
 8007d04:	d0ee      	beq.n	8007ce4 <_dtoa_r+0xabc>
 8007d06:	3301      	adds	r3, #1
 8007d08:	e7c7      	b.n	8007c9a <_dtoa_r+0xa72>
 8007d0a:	9a01      	ldr	r2, [sp, #4]
 8007d0c:	9907      	ldr	r1, [sp, #28]
 8007d0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007d12:	428a      	cmp	r2, r1
 8007d14:	d02a      	beq.n	8007d6c <_dtoa_r+0xb44>
 8007d16:	4659      	mov	r1, fp
 8007d18:	2300      	movs	r3, #0
 8007d1a:	220a      	movs	r2, #10
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f000 f8eb 	bl	8007ef8 <__multadd>
 8007d22:	45b8      	cmp	r8, r7
 8007d24:	4683      	mov	fp, r0
 8007d26:	f04f 0300 	mov.w	r3, #0
 8007d2a:	f04f 020a 	mov.w	r2, #10
 8007d2e:	4641      	mov	r1, r8
 8007d30:	4620      	mov	r0, r4
 8007d32:	d107      	bne.n	8007d44 <_dtoa_r+0xb1c>
 8007d34:	f000 f8e0 	bl	8007ef8 <__multadd>
 8007d38:	4680      	mov	r8, r0
 8007d3a:	4607      	mov	r7, r0
 8007d3c:	9b01      	ldr	r3, [sp, #4]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	e775      	b.n	8007c30 <_dtoa_r+0xa08>
 8007d44:	f000 f8d8 	bl	8007ef8 <__multadd>
 8007d48:	4639      	mov	r1, r7
 8007d4a:	4680      	mov	r8, r0
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	220a      	movs	r2, #10
 8007d50:	4620      	mov	r0, r4
 8007d52:	f000 f8d1 	bl	8007ef8 <__multadd>
 8007d56:	4607      	mov	r7, r0
 8007d58:	e7f0      	b.n	8007d3c <_dtoa_r+0xb14>
 8007d5a:	f1b9 0f00 	cmp.w	r9, #0
 8007d5e:	9a00      	ldr	r2, [sp, #0]
 8007d60:	bfcc      	ite	gt
 8007d62:	464d      	movgt	r5, r9
 8007d64:	2501      	movle	r5, #1
 8007d66:	4415      	add	r5, r2
 8007d68:	f04f 0800 	mov.w	r8, #0
 8007d6c:	4659      	mov	r1, fp
 8007d6e:	2201      	movs	r2, #1
 8007d70:	4620      	mov	r0, r4
 8007d72:	9301      	str	r3, [sp, #4]
 8007d74:	f000 fa70 	bl	8008258 <__lshift>
 8007d78:	4631      	mov	r1, r6
 8007d7a:	4683      	mov	fp, r0
 8007d7c:	f000 fad8 	bl	8008330 <__mcmp>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	dcb2      	bgt.n	8007cea <_dtoa_r+0xac2>
 8007d84:	d102      	bne.n	8007d8c <_dtoa_r+0xb64>
 8007d86:	9b01      	ldr	r3, [sp, #4]
 8007d88:	07db      	lsls	r3, r3, #31
 8007d8a:	d4ae      	bmi.n	8007cea <_dtoa_r+0xac2>
 8007d8c:	462b      	mov	r3, r5
 8007d8e:	461d      	mov	r5, r3
 8007d90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d94:	2a30      	cmp	r2, #48	; 0x30
 8007d96:	d0fa      	beq.n	8007d8e <_dtoa_r+0xb66>
 8007d98:	e6f7      	b.n	8007b8a <_dtoa_r+0x962>
 8007d9a:	9a00      	ldr	r2, [sp, #0]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d1a5      	bne.n	8007cec <_dtoa_r+0xac4>
 8007da0:	f10a 0a01 	add.w	sl, sl, #1
 8007da4:	2331      	movs	r3, #49	; 0x31
 8007da6:	e779      	b.n	8007c9c <_dtoa_r+0xa74>
 8007da8:	4b13      	ldr	r3, [pc, #76]	; (8007df8 <_dtoa_r+0xbd0>)
 8007daa:	f7ff baaf 	b.w	800730c <_dtoa_r+0xe4>
 8007dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f47f aa86 	bne.w	80072c2 <_dtoa_r+0x9a>
 8007db6:	4b11      	ldr	r3, [pc, #68]	; (8007dfc <_dtoa_r+0xbd4>)
 8007db8:	f7ff baa8 	b.w	800730c <_dtoa_r+0xe4>
 8007dbc:	f1b9 0f00 	cmp.w	r9, #0
 8007dc0:	dc03      	bgt.n	8007dca <_dtoa_r+0xba2>
 8007dc2:	9b05      	ldr	r3, [sp, #20]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	f73f aec9 	bgt.w	8007b5c <_dtoa_r+0x934>
 8007dca:	9d00      	ldr	r5, [sp, #0]
 8007dcc:	4631      	mov	r1, r6
 8007dce:	4658      	mov	r0, fp
 8007dd0:	f7ff f99c 	bl	800710c <quorem>
 8007dd4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007dd8:	f805 3b01 	strb.w	r3, [r5], #1
 8007ddc:	9a00      	ldr	r2, [sp, #0]
 8007dde:	1aaa      	subs	r2, r5, r2
 8007de0:	4591      	cmp	r9, r2
 8007de2:	ddba      	ble.n	8007d5a <_dtoa_r+0xb32>
 8007de4:	4659      	mov	r1, fp
 8007de6:	2300      	movs	r3, #0
 8007de8:	220a      	movs	r2, #10
 8007dea:	4620      	mov	r0, r4
 8007dec:	f000 f884 	bl	8007ef8 <__multadd>
 8007df0:	4683      	mov	fp, r0
 8007df2:	e7eb      	b.n	8007dcc <_dtoa_r+0xba4>
 8007df4:	080096ef 	.word	0x080096ef
 8007df8:	08009648 	.word	0x08009648
 8007dfc:	0800966c 	.word	0x0800966c

08007e00 <_localeconv_r>:
 8007e00:	4800      	ldr	r0, [pc, #0]	; (8007e04 <_localeconv_r+0x4>)
 8007e02:	4770      	bx	lr
 8007e04:	20000160 	.word	0x20000160

08007e08 <malloc>:
 8007e08:	4b02      	ldr	r3, [pc, #8]	; (8007e14 <malloc+0xc>)
 8007e0a:	4601      	mov	r1, r0
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	f000 bbef 	b.w	80085f0 <_malloc_r>
 8007e12:	bf00      	nop
 8007e14:	2000000c 	.word	0x2000000c

08007e18 <memcpy>:
 8007e18:	440a      	add	r2, r1
 8007e1a:	4291      	cmp	r1, r2
 8007e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e20:	d100      	bne.n	8007e24 <memcpy+0xc>
 8007e22:	4770      	bx	lr
 8007e24:	b510      	push	{r4, lr}
 8007e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e2e:	4291      	cmp	r1, r2
 8007e30:	d1f9      	bne.n	8007e26 <memcpy+0xe>
 8007e32:	bd10      	pop	{r4, pc}

08007e34 <_Balloc>:
 8007e34:	b570      	push	{r4, r5, r6, lr}
 8007e36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e38:	4604      	mov	r4, r0
 8007e3a:	460d      	mov	r5, r1
 8007e3c:	b976      	cbnz	r6, 8007e5c <_Balloc+0x28>
 8007e3e:	2010      	movs	r0, #16
 8007e40:	f7ff ffe2 	bl	8007e08 <malloc>
 8007e44:	4602      	mov	r2, r0
 8007e46:	6260      	str	r0, [r4, #36]	; 0x24
 8007e48:	b920      	cbnz	r0, 8007e54 <_Balloc+0x20>
 8007e4a:	4b18      	ldr	r3, [pc, #96]	; (8007eac <_Balloc+0x78>)
 8007e4c:	4818      	ldr	r0, [pc, #96]	; (8007eb0 <_Balloc+0x7c>)
 8007e4e:	2166      	movs	r1, #102	; 0x66
 8007e50:	f000 fd94 	bl	800897c <__assert_func>
 8007e54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e58:	6006      	str	r6, [r0, #0]
 8007e5a:	60c6      	str	r6, [r0, #12]
 8007e5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e5e:	68f3      	ldr	r3, [r6, #12]
 8007e60:	b183      	cbz	r3, 8007e84 <_Balloc+0x50>
 8007e62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e6a:	b9b8      	cbnz	r0, 8007e9c <_Balloc+0x68>
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	fa01 f605 	lsl.w	r6, r1, r5
 8007e72:	1d72      	adds	r2, r6, #5
 8007e74:	0092      	lsls	r2, r2, #2
 8007e76:	4620      	mov	r0, r4
 8007e78:	f000 fb5a 	bl	8008530 <_calloc_r>
 8007e7c:	b160      	cbz	r0, 8007e98 <_Balloc+0x64>
 8007e7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e82:	e00e      	b.n	8007ea2 <_Balloc+0x6e>
 8007e84:	2221      	movs	r2, #33	; 0x21
 8007e86:	2104      	movs	r1, #4
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f000 fb51 	bl	8008530 <_calloc_r>
 8007e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e90:	60f0      	str	r0, [r6, #12]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1e4      	bne.n	8007e62 <_Balloc+0x2e>
 8007e98:	2000      	movs	r0, #0
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}
 8007e9c:	6802      	ldr	r2, [r0, #0]
 8007e9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ea8:	e7f7      	b.n	8007e9a <_Balloc+0x66>
 8007eaa:	bf00      	nop
 8007eac:	08009679 	.word	0x08009679
 8007eb0:	08009700 	.word	0x08009700

08007eb4 <_Bfree>:
 8007eb4:	b570      	push	{r4, r5, r6, lr}
 8007eb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007eb8:	4605      	mov	r5, r0
 8007eba:	460c      	mov	r4, r1
 8007ebc:	b976      	cbnz	r6, 8007edc <_Bfree+0x28>
 8007ebe:	2010      	movs	r0, #16
 8007ec0:	f7ff ffa2 	bl	8007e08 <malloc>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	6268      	str	r0, [r5, #36]	; 0x24
 8007ec8:	b920      	cbnz	r0, 8007ed4 <_Bfree+0x20>
 8007eca:	4b09      	ldr	r3, [pc, #36]	; (8007ef0 <_Bfree+0x3c>)
 8007ecc:	4809      	ldr	r0, [pc, #36]	; (8007ef4 <_Bfree+0x40>)
 8007ece:	218a      	movs	r1, #138	; 0x8a
 8007ed0:	f000 fd54 	bl	800897c <__assert_func>
 8007ed4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ed8:	6006      	str	r6, [r0, #0]
 8007eda:	60c6      	str	r6, [r0, #12]
 8007edc:	b13c      	cbz	r4, 8007eee <_Bfree+0x3a>
 8007ede:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ee0:	6862      	ldr	r2, [r4, #4]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ee8:	6021      	str	r1, [r4, #0]
 8007eea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007eee:	bd70      	pop	{r4, r5, r6, pc}
 8007ef0:	08009679 	.word	0x08009679
 8007ef4:	08009700 	.word	0x08009700

08007ef8 <__multadd>:
 8007ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efc:	690e      	ldr	r6, [r1, #16]
 8007efe:	4607      	mov	r7, r0
 8007f00:	4698      	mov	r8, r3
 8007f02:	460c      	mov	r4, r1
 8007f04:	f101 0014 	add.w	r0, r1, #20
 8007f08:	2300      	movs	r3, #0
 8007f0a:	6805      	ldr	r5, [r0, #0]
 8007f0c:	b2a9      	uxth	r1, r5
 8007f0e:	fb02 8101 	mla	r1, r2, r1, r8
 8007f12:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007f16:	0c2d      	lsrs	r5, r5, #16
 8007f18:	fb02 c505 	mla	r5, r2, r5, ip
 8007f1c:	b289      	uxth	r1, r1
 8007f1e:	3301      	adds	r3, #1
 8007f20:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007f24:	429e      	cmp	r6, r3
 8007f26:	f840 1b04 	str.w	r1, [r0], #4
 8007f2a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007f2e:	dcec      	bgt.n	8007f0a <__multadd+0x12>
 8007f30:	f1b8 0f00 	cmp.w	r8, #0
 8007f34:	d022      	beq.n	8007f7c <__multadd+0x84>
 8007f36:	68a3      	ldr	r3, [r4, #8]
 8007f38:	42b3      	cmp	r3, r6
 8007f3a:	dc19      	bgt.n	8007f70 <__multadd+0x78>
 8007f3c:	6861      	ldr	r1, [r4, #4]
 8007f3e:	4638      	mov	r0, r7
 8007f40:	3101      	adds	r1, #1
 8007f42:	f7ff ff77 	bl	8007e34 <_Balloc>
 8007f46:	4605      	mov	r5, r0
 8007f48:	b928      	cbnz	r0, 8007f56 <__multadd+0x5e>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	4b0d      	ldr	r3, [pc, #52]	; (8007f84 <__multadd+0x8c>)
 8007f4e:	480e      	ldr	r0, [pc, #56]	; (8007f88 <__multadd+0x90>)
 8007f50:	21b5      	movs	r1, #181	; 0xb5
 8007f52:	f000 fd13 	bl	800897c <__assert_func>
 8007f56:	6922      	ldr	r2, [r4, #16]
 8007f58:	3202      	adds	r2, #2
 8007f5a:	f104 010c 	add.w	r1, r4, #12
 8007f5e:	0092      	lsls	r2, r2, #2
 8007f60:	300c      	adds	r0, #12
 8007f62:	f7ff ff59 	bl	8007e18 <memcpy>
 8007f66:	4621      	mov	r1, r4
 8007f68:	4638      	mov	r0, r7
 8007f6a:	f7ff ffa3 	bl	8007eb4 <_Bfree>
 8007f6e:	462c      	mov	r4, r5
 8007f70:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007f74:	3601      	adds	r6, #1
 8007f76:	f8c3 8014 	str.w	r8, [r3, #20]
 8007f7a:	6126      	str	r6, [r4, #16]
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f82:	bf00      	nop
 8007f84:	080096ef 	.word	0x080096ef
 8007f88:	08009700 	.word	0x08009700

08007f8c <__hi0bits>:
 8007f8c:	0c03      	lsrs	r3, r0, #16
 8007f8e:	041b      	lsls	r3, r3, #16
 8007f90:	b9d3      	cbnz	r3, 8007fc8 <__hi0bits+0x3c>
 8007f92:	0400      	lsls	r0, r0, #16
 8007f94:	2310      	movs	r3, #16
 8007f96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f9a:	bf04      	itt	eq
 8007f9c:	0200      	lsleq	r0, r0, #8
 8007f9e:	3308      	addeq	r3, #8
 8007fa0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007fa4:	bf04      	itt	eq
 8007fa6:	0100      	lsleq	r0, r0, #4
 8007fa8:	3304      	addeq	r3, #4
 8007faa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007fae:	bf04      	itt	eq
 8007fb0:	0080      	lsleq	r0, r0, #2
 8007fb2:	3302      	addeq	r3, #2
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	db05      	blt.n	8007fc4 <__hi0bits+0x38>
 8007fb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007fbc:	f103 0301 	add.w	r3, r3, #1
 8007fc0:	bf08      	it	eq
 8007fc2:	2320      	moveq	r3, #32
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	4770      	bx	lr
 8007fc8:	2300      	movs	r3, #0
 8007fca:	e7e4      	b.n	8007f96 <__hi0bits+0xa>

08007fcc <__lo0bits>:
 8007fcc:	6803      	ldr	r3, [r0, #0]
 8007fce:	f013 0207 	ands.w	r2, r3, #7
 8007fd2:	4601      	mov	r1, r0
 8007fd4:	d00b      	beq.n	8007fee <__lo0bits+0x22>
 8007fd6:	07da      	lsls	r2, r3, #31
 8007fd8:	d424      	bmi.n	8008024 <__lo0bits+0x58>
 8007fda:	0798      	lsls	r0, r3, #30
 8007fdc:	bf49      	itett	mi
 8007fde:	085b      	lsrmi	r3, r3, #1
 8007fe0:	089b      	lsrpl	r3, r3, #2
 8007fe2:	2001      	movmi	r0, #1
 8007fe4:	600b      	strmi	r3, [r1, #0]
 8007fe6:	bf5c      	itt	pl
 8007fe8:	600b      	strpl	r3, [r1, #0]
 8007fea:	2002      	movpl	r0, #2
 8007fec:	4770      	bx	lr
 8007fee:	b298      	uxth	r0, r3
 8007ff0:	b9b0      	cbnz	r0, 8008020 <__lo0bits+0x54>
 8007ff2:	0c1b      	lsrs	r3, r3, #16
 8007ff4:	2010      	movs	r0, #16
 8007ff6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007ffa:	bf04      	itt	eq
 8007ffc:	0a1b      	lsreq	r3, r3, #8
 8007ffe:	3008      	addeq	r0, #8
 8008000:	071a      	lsls	r2, r3, #28
 8008002:	bf04      	itt	eq
 8008004:	091b      	lsreq	r3, r3, #4
 8008006:	3004      	addeq	r0, #4
 8008008:	079a      	lsls	r2, r3, #30
 800800a:	bf04      	itt	eq
 800800c:	089b      	lsreq	r3, r3, #2
 800800e:	3002      	addeq	r0, #2
 8008010:	07da      	lsls	r2, r3, #31
 8008012:	d403      	bmi.n	800801c <__lo0bits+0x50>
 8008014:	085b      	lsrs	r3, r3, #1
 8008016:	f100 0001 	add.w	r0, r0, #1
 800801a:	d005      	beq.n	8008028 <__lo0bits+0x5c>
 800801c:	600b      	str	r3, [r1, #0]
 800801e:	4770      	bx	lr
 8008020:	4610      	mov	r0, r2
 8008022:	e7e8      	b.n	8007ff6 <__lo0bits+0x2a>
 8008024:	2000      	movs	r0, #0
 8008026:	4770      	bx	lr
 8008028:	2020      	movs	r0, #32
 800802a:	4770      	bx	lr

0800802c <__i2b>:
 800802c:	b510      	push	{r4, lr}
 800802e:	460c      	mov	r4, r1
 8008030:	2101      	movs	r1, #1
 8008032:	f7ff feff 	bl	8007e34 <_Balloc>
 8008036:	4602      	mov	r2, r0
 8008038:	b928      	cbnz	r0, 8008046 <__i2b+0x1a>
 800803a:	4b05      	ldr	r3, [pc, #20]	; (8008050 <__i2b+0x24>)
 800803c:	4805      	ldr	r0, [pc, #20]	; (8008054 <__i2b+0x28>)
 800803e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008042:	f000 fc9b 	bl	800897c <__assert_func>
 8008046:	2301      	movs	r3, #1
 8008048:	6144      	str	r4, [r0, #20]
 800804a:	6103      	str	r3, [r0, #16]
 800804c:	bd10      	pop	{r4, pc}
 800804e:	bf00      	nop
 8008050:	080096ef 	.word	0x080096ef
 8008054:	08009700 	.word	0x08009700

08008058 <__multiply>:
 8008058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805c:	4614      	mov	r4, r2
 800805e:	690a      	ldr	r2, [r1, #16]
 8008060:	6923      	ldr	r3, [r4, #16]
 8008062:	429a      	cmp	r2, r3
 8008064:	bfb8      	it	lt
 8008066:	460b      	movlt	r3, r1
 8008068:	460d      	mov	r5, r1
 800806a:	bfbc      	itt	lt
 800806c:	4625      	movlt	r5, r4
 800806e:	461c      	movlt	r4, r3
 8008070:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008074:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008078:	68ab      	ldr	r3, [r5, #8]
 800807a:	6869      	ldr	r1, [r5, #4]
 800807c:	eb0a 0709 	add.w	r7, sl, r9
 8008080:	42bb      	cmp	r3, r7
 8008082:	b085      	sub	sp, #20
 8008084:	bfb8      	it	lt
 8008086:	3101      	addlt	r1, #1
 8008088:	f7ff fed4 	bl	8007e34 <_Balloc>
 800808c:	b930      	cbnz	r0, 800809c <__multiply+0x44>
 800808e:	4602      	mov	r2, r0
 8008090:	4b42      	ldr	r3, [pc, #264]	; (800819c <__multiply+0x144>)
 8008092:	4843      	ldr	r0, [pc, #268]	; (80081a0 <__multiply+0x148>)
 8008094:	f240 115d 	movw	r1, #349	; 0x15d
 8008098:	f000 fc70 	bl	800897c <__assert_func>
 800809c:	f100 0614 	add.w	r6, r0, #20
 80080a0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80080a4:	4633      	mov	r3, r6
 80080a6:	2200      	movs	r2, #0
 80080a8:	4543      	cmp	r3, r8
 80080aa:	d31e      	bcc.n	80080ea <__multiply+0x92>
 80080ac:	f105 0c14 	add.w	ip, r5, #20
 80080b0:	f104 0314 	add.w	r3, r4, #20
 80080b4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80080b8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80080bc:	9202      	str	r2, [sp, #8]
 80080be:	ebac 0205 	sub.w	r2, ip, r5
 80080c2:	3a15      	subs	r2, #21
 80080c4:	f022 0203 	bic.w	r2, r2, #3
 80080c8:	3204      	adds	r2, #4
 80080ca:	f105 0115 	add.w	r1, r5, #21
 80080ce:	458c      	cmp	ip, r1
 80080d0:	bf38      	it	cc
 80080d2:	2204      	movcc	r2, #4
 80080d4:	9201      	str	r2, [sp, #4]
 80080d6:	9a02      	ldr	r2, [sp, #8]
 80080d8:	9303      	str	r3, [sp, #12]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d808      	bhi.n	80080f0 <__multiply+0x98>
 80080de:	2f00      	cmp	r7, #0
 80080e0:	dc55      	bgt.n	800818e <__multiply+0x136>
 80080e2:	6107      	str	r7, [r0, #16]
 80080e4:	b005      	add	sp, #20
 80080e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ea:	f843 2b04 	str.w	r2, [r3], #4
 80080ee:	e7db      	b.n	80080a8 <__multiply+0x50>
 80080f0:	f8b3 a000 	ldrh.w	sl, [r3]
 80080f4:	f1ba 0f00 	cmp.w	sl, #0
 80080f8:	d020      	beq.n	800813c <__multiply+0xe4>
 80080fa:	f105 0e14 	add.w	lr, r5, #20
 80080fe:	46b1      	mov	r9, r6
 8008100:	2200      	movs	r2, #0
 8008102:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008106:	f8d9 b000 	ldr.w	fp, [r9]
 800810a:	b2a1      	uxth	r1, r4
 800810c:	fa1f fb8b 	uxth.w	fp, fp
 8008110:	fb0a b101 	mla	r1, sl, r1, fp
 8008114:	4411      	add	r1, r2
 8008116:	f8d9 2000 	ldr.w	r2, [r9]
 800811a:	0c24      	lsrs	r4, r4, #16
 800811c:	0c12      	lsrs	r2, r2, #16
 800811e:	fb0a 2404 	mla	r4, sl, r4, r2
 8008122:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008126:	b289      	uxth	r1, r1
 8008128:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800812c:	45f4      	cmp	ip, lr
 800812e:	f849 1b04 	str.w	r1, [r9], #4
 8008132:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008136:	d8e4      	bhi.n	8008102 <__multiply+0xaa>
 8008138:	9901      	ldr	r1, [sp, #4]
 800813a:	5072      	str	r2, [r6, r1]
 800813c:	9a03      	ldr	r2, [sp, #12]
 800813e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008142:	3304      	adds	r3, #4
 8008144:	f1b9 0f00 	cmp.w	r9, #0
 8008148:	d01f      	beq.n	800818a <__multiply+0x132>
 800814a:	6834      	ldr	r4, [r6, #0]
 800814c:	f105 0114 	add.w	r1, r5, #20
 8008150:	46b6      	mov	lr, r6
 8008152:	f04f 0a00 	mov.w	sl, #0
 8008156:	880a      	ldrh	r2, [r1, #0]
 8008158:	f8be b002 	ldrh.w	fp, [lr, #2]
 800815c:	fb09 b202 	mla	r2, r9, r2, fp
 8008160:	4492      	add	sl, r2
 8008162:	b2a4      	uxth	r4, r4
 8008164:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008168:	f84e 4b04 	str.w	r4, [lr], #4
 800816c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008170:	f8be 2000 	ldrh.w	r2, [lr]
 8008174:	0c24      	lsrs	r4, r4, #16
 8008176:	fb09 2404 	mla	r4, r9, r4, r2
 800817a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800817e:	458c      	cmp	ip, r1
 8008180:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008184:	d8e7      	bhi.n	8008156 <__multiply+0xfe>
 8008186:	9a01      	ldr	r2, [sp, #4]
 8008188:	50b4      	str	r4, [r6, r2]
 800818a:	3604      	adds	r6, #4
 800818c:	e7a3      	b.n	80080d6 <__multiply+0x7e>
 800818e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1a5      	bne.n	80080e2 <__multiply+0x8a>
 8008196:	3f01      	subs	r7, #1
 8008198:	e7a1      	b.n	80080de <__multiply+0x86>
 800819a:	bf00      	nop
 800819c:	080096ef 	.word	0x080096ef
 80081a0:	08009700 	.word	0x08009700

080081a4 <__pow5mult>:
 80081a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a8:	4615      	mov	r5, r2
 80081aa:	f012 0203 	ands.w	r2, r2, #3
 80081ae:	4606      	mov	r6, r0
 80081b0:	460f      	mov	r7, r1
 80081b2:	d007      	beq.n	80081c4 <__pow5mult+0x20>
 80081b4:	4c25      	ldr	r4, [pc, #148]	; (800824c <__pow5mult+0xa8>)
 80081b6:	3a01      	subs	r2, #1
 80081b8:	2300      	movs	r3, #0
 80081ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081be:	f7ff fe9b 	bl	8007ef8 <__multadd>
 80081c2:	4607      	mov	r7, r0
 80081c4:	10ad      	asrs	r5, r5, #2
 80081c6:	d03d      	beq.n	8008244 <__pow5mult+0xa0>
 80081c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80081ca:	b97c      	cbnz	r4, 80081ec <__pow5mult+0x48>
 80081cc:	2010      	movs	r0, #16
 80081ce:	f7ff fe1b 	bl	8007e08 <malloc>
 80081d2:	4602      	mov	r2, r0
 80081d4:	6270      	str	r0, [r6, #36]	; 0x24
 80081d6:	b928      	cbnz	r0, 80081e4 <__pow5mult+0x40>
 80081d8:	4b1d      	ldr	r3, [pc, #116]	; (8008250 <__pow5mult+0xac>)
 80081da:	481e      	ldr	r0, [pc, #120]	; (8008254 <__pow5mult+0xb0>)
 80081dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80081e0:	f000 fbcc 	bl	800897c <__assert_func>
 80081e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081e8:	6004      	str	r4, [r0, #0]
 80081ea:	60c4      	str	r4, [r0, #12]
 80081ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80081f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081f4:	b94c      	cbnz	r4, 800820a <__pow5mult+0x66>
 80081f6:	f240 2171 	movw	r1, #625	; 0x271
 80081fa:	4630      	mov	r0, r6
 80081fc:	f7ff ff16 	bl	800802c <__i2b>
 8008200:	2300      	movs	r3, #0
 8008202:	f8c8 0008 	str.w	r0, [r8, #8]
 8008206:	4604      	mov	r4, r0
 8008208:	6003      	str	r3, [r0, #0]
 800820a:	f04f 0900 	mov.w	r9, #0
 800820e:	07eb      	lsls	r3, r5, #31
 8008210:	d50a      	bpl.n	8008228 <__pow5mult+0x84>
 8008212:	4639      	mov	r1, r7
 8008214:	4622      	mov	r2, r4
 8008216:	4630      	mov	r0, r6
 8008218:	f7ff ff1e 	bl	8008058 <__multiply>
 800821c:	4639      	mov	r1, r7
 800821e:	4680      	mov	r8, r0
 8008220:	4630      	mov	r0, r6
 8008222:	f7ff fe47 	bl	8007eb4 <_Bfree>
 8008226:	4647      	mov	r7, r8
 8008228:	106d      	asrs	r5, r5, #1
 800822a:	d00b      	beq.n	8008244 <__pow5mult+0xa0>
 800822c:	6820      	ldr	r0, [r4, #0]
 800822e:	b938      	cbnz	r0, 8008240 <__pow5mult+0x9c>
 8008230:	4622      	mov	r2, r4
 8008232:	4621      	mov	r1, r4
 8008234:	4630      	mov	r0, r6
 8008236:	f7ff ff0f 	bl	8008058 <__multiply>
 800823a:	6020      	str	r0, [r4, #0]
 800823c:	f8c0 9000 	str.w	r9, [r0]
 8008240:	4604      	mov	r4, r0
 8008242:	e7e4      	b.n	800820e <__pow5mult+0x6a>
 8008244:	4638      	mov	r0, r7
 8008246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800824a:	bf00      	nop
 800824c:	08009850 	.word	0x08009850
 8008250:	08009679 	.word	0x08009679
 8008254:	08009700 	.word	0x08009700

08008258 <__lshift>:
 8008258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800825c:	460c      	mov	r4, r1
 800825e:	6849      	ldr	r1, [r1, #4]
 8008260:	6923      	ldr	r3, [r4, #16]
 8008262:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008266:	68a3      	ldr	r3, [r4, #8]
 8008268:	4607      	mov	r7, r0
 800826a:	4691      	mov	r9, r2
 800826c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008270:	f108 0601 	add.w	r6, r8, #1
 8008274:	42b3      	cmp	r3, r6
 8008276:	db0b      	blt.n	8008290 <__lshift+0x38>
 8008278:	4638      	mov	r0, r7
 800827a:	f7ff fddb 	bl	8007e34 <_Balloc>
 800827e:	4605      	mov	r5, r0
 8008280:	b948      	cbnz	r0, 8008296 <__lshift+0x3e>
 8008282:	4602      	mov	r2, r0
 8008284:	4b28      	ldr	r3, [pc, #160]	; (8008328 <__lshift+0xd0>)
 8008286:	4829      	ldr	r0, [pc, #164]	; (800832c <__lshift+0xd4>)
 8008288:	f240 11d9 	movw	r1, #473	; 0x1d9
 800828c:	f000 fb76 	bl	800897c <__assert_func>
 8008290:	3101      	adds	r1, #1
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	e7ee      	b.n	8008274 <__lshift+0x1c>
 8008296:	2300      	movs	r3, #0
 8008298:	f100 0114 	add.w	r1, r0, #20
 800829c:	f100 0210 	add.w	r2, r0, #16
 80082a0:	4618      	mov	r0, r3
 80082a2:	4553      	cmp	r3, sl
 80082a4:	db33      	blt.n	800830e <__lshift+0xb6>
 80082a6:	6920      	ldr	r0, [r4, #16]
 80082a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082ac:	f104 0314 	add.w	r3, r4, #20
 80082b0:	f019 091f 	ands.w	r9, r9, #31
 80082b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082bc:	d02b      	beq.n	8008316 <__lshift+0xbe>
 80082be:	f1c9 0e20 	rsb	lr, r9, #32
 80082c2:	468a      	mov	sl, r1
 80082c4:	2200      	movs	r2, #0
 80082c6:	6818      	ldr	r0, [r3, #0]
 80082c8:	fa00 f009 	lsl.w	r0, r0, r9
 80082cc:	4302      	orrs	r2, r0
 80082ce:	f84a 2b04 	str.w	r2, [sl], #4
 80082d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80082d6:	459c      	cmp	ip, r3
 80082d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80082dc:	d8f3      	bhi.n	80082c6 <__lshift+0x6e>
 80082de:	ebac 0304 	sub.w	r3, ip, r4
 80082e2:	3b15      	subs	r3, #21
 80082e4:	f023 0303 	bic.w	r3, r3, #3
 80082e8:	3304      	adds	r3, #4
 80082ea:	f104 0015 	add.w	r0, r4, #21
 80082ee:	4584      	cmp	ip, r0
 80082f0:	bf38      	it	cc
 80082f2:	2304      	movcc	r3, #4
 80082f4:	50ca      	str	r2, [r1, r3]
 80082f6:	b10a      	cbz	r2, 80082fc <__lshift+0xa4>
 80082f8:	f108 0602 	add.w	r6, r8, #2
 80082fc:	3e01      	subs	r6, #1
 80082fe:	4638      	mov	r0, r7
 8008300:	612e      	str	r6, [r5, #16]
 8008302:	4621      	mov	r1, r4
 8008304:	f7ff fdd6 	bl	8007eb4 <_Bfree>
 8008308:	4628      	mov	r0, r5
 800830a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008312:	3301      	adds	r3, #1
 8008314:	e7c5      	b.n	80082a2 <__lshift+0x4a>
 8008316:	3904      	subs	r1, #4
 8008318:	f853 2b04 	ldr.w	r2, [r3], #4
 800831c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008320:	459c      	cmp	ip, r3
 8008322:	d8f9      	bhi.n	8008318 <__lshift+0xc0>
 8008324:	e7ea      	b.n	80082fc <__lshift+0xa4>
 8008326:	bf00      	nop
 8008328:	080096ef 	.word	0x080096ef
 800832c:	08009700 	.word	0x08009700

08008330 <__mcmp>:
 8008330:	b530      	push	{r4, r5, lr}
 8008332:	6902      	ldr	r2, [r0, #16]
 8008334:	690c      	ldr	r4, [r1, #16]
 8008336:	1b12      	subs	r2, r2, r4
 8008338:	d10e      	bne.n	8008358 <__mcmp+0x28>
 800833a:	f100 0314 	add.w	r3, r0, #20
 800833e:	3114      	adds	r1, #20
 8008340:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008344:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008348:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800834c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008350:	42a5      	cmp	r5, r4
 8008352:	d003      	beq.n	800835c <__mcmp+0x2c>
 8008354:	d305      	bcc.n	8008362 <__mcmp+0x32>
 8008356:	2201      	movs	r2, #1
 8008358:	4610      	mov	r0, r2
 800835a:	bd30      	pop	{r4, r5, pc}
 800835c:	4283      	cmp	r3, r0
 800835e:	d3f3      	bcc.n	8008348 <__mcmp+0x18>
 8008360:	e7fa      	b.n	8008358 <__mcmp+0x28>
 8008362:	f04f 32ff 	mov.w	r2, #4294967295
 8008366:	e7f7      	b.n	8008358 <__mcmp+0x28>

08008368 <__mdiff>:
 8008368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836c:	460c      	mov	r4, r1
 800836e:	4606      	mov	r6, r0
 8008370:	4611      	mov	r1, r2
 8008372:	4620      	mov	r0, r4
 8008374:	4617      	mov	r7, r2
 8008376:	f7ff ffdb 	bl	8008330 <__mcmp>
 800837a:	1e05      	subs	r5, r0, #0
 800837c:	d110      	bne.n	80083a0 <__mdiff+0x38>
 800837e:	4629      	mov	r1, r5
 8008380:	4630      	mov	r0, r6
 8008382:	f7ff fd57 	bl	8007e34 <_Balloc>
 8008386:	b930      	cbnz	r0, 8008396 <__mdiff+0x2e>
 8008388:	4b39      	ldr	r3, [pc, #228]	; (8008470 <__mdiff+0x108>)
 800838a:	4602      	mov	r2, r0
 800838c:	f240 2132 	movw	r1, #562	; 0x232
 8008390:	4838      	ldr	r0, [pc, #224]	; (8008474 <__mdiff+0x10c>)
 8008392:	f000 faf3 	bl	800897c <__assert_func>
 8008396:	2301      	movs	r3, #1
 8008398:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800839c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a0:	bfa4      	itt	ge
 80083a2:	463b      	movge	r3, r7
 80083a4:	4627      	movge	r7, r4
 80083a6:	4630      	mov	r0, r6
 80083a8:	6879      	ldr	r1, [r7, #4]
 80083aa:	bfa6      	itte	ge
 80083ac:	461c      	movge	r4, r3
 80083ae:	2500      	movge	r5, #0
 80083b0:	2501      	movlt	r5, #1
 80083b2:	f7ff fd3f 	bl	8007e34 <_Balloc>
 80083b6:	b920      	cbnz	r0, 80083c2 <__mdiff+0x5a>
 80083b8:	4b2d      	ldr	r3, [pc, #180]	; (8008470 <__mdiff+0x108>)
 80083ba:	4602      	mov	r2, r0
 80083bc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80083c0:	e7e6      	b.n	8008390 <__mdiff+0x28>
 80083c2:	693e      	ldr	r6, [r7, #16]
 80083c4:	60c5      	str	r5, [r0, #12]
 80083c6:	6925      	ldr	r5, [r4, #16]
 80083c8:	f107 0114 	add.w	r1, r7, #20
 80083cc:	f104 0914 	add.w	r9, r4, #20
 80083d0:	f100 0e14 	add.w	lr, r0, #20
 80083d4:	f107 0210 	add.w	r2, r7, #16
 80083d8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80083dc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80083e0:	46f2      	mov	sl, lr
 80083e2:	2700      	movs	r7, #0
 80083e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80083e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80083ec:	fa1f f883 	uxth.w	r8, r3
 80083f0:	fa17 f78b 	uxtah	r7, r7, fp
 80083f4:	0c1b      	lsrs	r3, r3, #16
 80083f6:	eba7 0808 	sub.w	r8, r7, r8
 80083fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008402:	fa1f f888 	uxth.w	r8, r8
 8008406:	141f      	asrs	r7, r3, #16
 8008408:	454d      	cmp	r5, r9
 800840a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800840e:	f84a 3b04 	str.w	r3, [sl], #4
 8008412:	d8e7      	bhi.n	80083e4 <__mdiff+0x7c>
 8008414:	1b2b      	subs	r3, r5, r4
 8008416:	3b15      	subs	r3, #21
 8008418:	f023 0303 	bic.w	r3, r3, #3
 800841c:	3304      	adds	r3, #4
 800841e:	3415      	adds	r4, #21
 8008420:	42a5      	cmp	r5, r4
 8008422:	bf38      	it	cc
 8008424:	2304      	movcc	r3, #4
 8008426:	4419      	add	r1, r3
 8008428:	4473      	add	r3, lr
 800842a:	469e      	mov	lr, r3
 800842c:	460d      	mov	r5, r1
 800842e:	4565      	cmp	r5, ip
 8008430:	d30e      	bcc.n	8008450 <__mdiff+0xe8>
 8008432:	f10c 0203 	add.w	r2, ip, #3
 8008436:	1a52      	subs	r2, r2, r1
 8008438:	f022 0203 	bic.w	r2, r2, #3
 800843c:	3903      	subs	r1, #3
 800843e:	458c      	cmp	ip, r1
 8008440:	bf38      	it	cc
 8008442:	2200      	movcc	r2, #0
 8008444:	441a      	add	r2, r3
 8008446:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800844a:	b17b      	cbz	r3, 800846c <__mdiff+0x104>
 800844c:	6106      	str	r6, [r0, #16]
 800844e:	e7a5      	b.n	800839c <__mdiff+0x34>
 8008450:	f855 8b04 	ldr.w	r8, [r5], #4
 8008454:	fa17 f488 	uxtah	r4, r7, r8
 8008458:	1422      	asrs	r2, r4, #16
 800845a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800845e:	b2a4      	uxth	r4, r4
 8008460:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008464:	f84e 4b04 	str.w	r4, [lr], #4
 8008468:	1417      	asrs	r7, r2, #16
 800846a:	e7e0      	b.n	800842e <__mdiff+0xc6>
 800846c:	3e01      	subs	r6, #1
 800846e:	e7ea      	b.n	8008446 <__mdiff+0xde>
 8008470:	080096ef 	.word	0x080096ef
 8008474:	08009700 	.word	0x08009700

08008478 <__d2b>:
 8008478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800847c:	4689      	mov	r9, r1
 800847e:	2101      	movs	r1, #1
 8008480:	ec57 6b10 	vmov	r6, r7, d0
 8008484:	4690      	mov	r8, r2
 8008486:	f7ff fcd5 	bl	8007e34 <_Balloc>
 800848a:	4604      	mov	r4, r0
 800848c:	b930      	cbnz	r0, 800849c <__d2b+0x24>
 800848e:	4602      	mov	r2, r0
 8008490:	4b25      	ldr	r3, [pc, #148]	; (8008528 <__d2b+0xb0>)
 8008492:	4826      	ldr	r0, [pc, #152]	; (800852c <__d2b+0xb4>)
 8008494:	f240 310a 	movw	r1, #778	; 0x30a
 8008498:	f000 fa70 	bl	800897c <__assert_func>
 800849c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80084a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80084a4:	bb35      	cbnz	r5, 80084f4 <__d2b+0x7c>
 80084a6:	2e00      	cmp	r6, #0
 80084a8:	9301      	str	r3, [sp, #4]
 80084aa:	d028      	beq.n	80084fe <__d2b+0x86>
 80084ac:	4668      	mov	r0, sp
 80084ae:	9600      	str	r6, [sp, #0]
 80084b0:	f7ff fd8c 	bl	8007fcc <__lo0bits>
 80084b4:	9900      	ldr	r1, [sp, #0]
 80084b6:	b300      	cbz	r0, 80084fa <__d2b+0x82>
 80084b8:	9a01      	ldr	r2, [sp, #4]
 80084ba:	f1c0 0320 	rsb	r3, r0, #32
 80084be:	fa02 f303 	lsl.w	r3, r2, r3
 80084c2:	430b      	orrs	r3, r1
 80084c4:	40c2      	lsrs	r2, r0
 80084c6:	6163      	str	r3, [r4, #20]
 80084c8:	9201      	str	r2, [sp, #4]
 80084ca:	9b01      	ldr	r3, [sp, #4]
 80084cc:	61a3      	str	r3, [r4, #24]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	bf14      	ite	ne
 80084d2:	2202      	movne	r2, #2
 80084d4:	2201      	moveq	r2, #1
 80084d6:	6122      	str	r2, [r4, #16]
 80084d8:	b1d5      	cbz	r5, 8008510 <__d2b+0x98>
 80084da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80084de:	4405      	add	r5, r0
 80084e0:	f8c9 5000 	str.w	r5, [r9]
 80084e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084e8:	f8c8 0000 	str.w	r0, [r8]
 80084ec:	4620      	mov	r0, r4
 80084ee:	b003      	add	sp, #12
 80084f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084f8:	e7d5      	b.n	80084a6 <__d2b+0x2e>
 80084fa:	6161      	str	r1, [r4, #20]
 80084fc:	e7e5      	b.n	80084ca <__d2b+0x52>
 80084fe:	a801      	add	r0, sp, #4
 8008500:	f7ff fd64 	bl	8007fcc <__lo0bits>
 8008504:	9b01      	ldr	r3, [sp, #4]
 8008506:	6163      	str	r3, [r4, #20]
 8008508:	2201      	movs	r2, #1
 800850a:	6122      	str	r2, [r4, #16]
 800850c:	3020      	adds	r0, #32
 800850e:	e7e3      	b.n	80084d8 <__d2b+0x60>
 8008510:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008514:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008518:	f8c9 0000 	str.w	r0, [r9]
 800851c:	6918      	ldr	r0, [r3, #16]
 800851e:	f7ff fd35 	bl	8007f8c <__hi0bits>
 8008522:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008526:	e7df      	b.n	80084e8 <__d2b+0x70>
 8008528:	080096ef 	.word	0x080096ef
 800852c:	08009700 	.word	0x08009700

08008530 <_calloc_r>:
 8008530:	b513      	push	{r0, r1, r4, lr}
 8008532:	434a      	muls	r2, r1
 8008534:	4611      	mov	r1, r2
 8008536:	9201      	str	r2, [sp, #4]
 8008538:	f000 f85a 	bl	80085f0 <_malloc_r>
 800853c:	4604      	mov	r4, r0
 800853e:	b118      	cbz	r0, 8008548 <_calloc_r+0x18>
 8008540:	9a01      	ldr	r2, [sp, #4]
 8008542:	2100      	movs	r1, #0
 8008544:	f7fe f950 	bl	80067e8 <memset>
 8008548:	4620      	mov	r0, r4
 800854a:	b002      	add	sp, #8
 800854c:	bd10      	pop	{r4, pc}
	...

08008550 <_free_r>:
 8008550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008552:	2900      	cmp	r1, #0
 8008554:	d048      	beq.n	80085e8 <_free_r+0x98>
 8008556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800855a:	9001      	str	r0, [sp, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	f1a1 0404 	sub.w	r4, r1, #4
 8008562:	bfb8      	it	lt
 8008564:	18e4      	addlt	r4, r4, r3
 8008566:	f000 fa65 	bl	8008a34 <__malloc_lock>
 800856a:	4a20      	ldr	r2, [pc, #128]	; (80085ec <_free_r+0x9c>)
 800856c:	9801      	ldr	r0, [sp, #4]
 800856e:	6813      	ldr	r3, [r2, #0]
 8008570:	4615      	mov	r5, r2
 8008572:	b933      	cbnz	r3, 8008582 <_free_r+0x32>
 8008574:	6063      	str	r3, [r4, #4]
 8008576:	6014      	str	r4, [r2, #0]
 8008578:	b003      	add	sp, #12
 800857a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800857e:	f000 ba5f 	b.w	8008a40 <__malloc_unlock>
 8008582:	42a3      	cmp	r3, r4
 8008584:	d90b      	bls.n	800859e <_free_r+0x4e>
 8008586:	6821      	ldr	r1, [r4, #0]
 8008588:	1862      	adds	r2, r4, r1
 800858a:	4293      	cmp	r3, r2
 800858c:	bf04      	itt	eq
 800858e:	681a      	ldreq	r2, [r3, #0]
 8008590:	685b      	ldreq	r3, [r3, #4]
 8008592:	6063      	str	r3, [r4, #4]
 8008594:	bf04      	itt	eq
 8008596:	1852      	addeq	r2, r2, r1
 8008598:	6022      	streq	r2, [r4, #0]
 800859a:	602c      	str	r4, [r5, #0]
 800859c:	e7ec      	b.n	8008578 <_free_r+0x28>
 800859e:	461a      	mov	r2, r3
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	b10b      	cbz	r3, 80085a8 <_free_r+0x58>
 80085a4:	42a3      	cmp	r3, r4
 80085a6:	d9fa      	bls.n	800859e <_free_r+0x4e>
 80085a8:	6811      	ldr	r1, [r2, #0]
 80085aa:	1855      	adds	r5, r2, r1
 80085ac:	42a5      	cmp	r5, r4
 80085ae:	d10b      	bne.n	80085c8 <_free_r+0x78>
 80085b0:	6824      	ldr	r4, [r4, #0]
 80085b2:	4421      	add	r1, r4
 80085b4:	1854      	adds	r4, r2, r1
 80085b6:	42a3      	cmp	r3, r4
 80085b8:	6011      	str	r1, [r2, #0]
 80085ba:	d1dd      	bne.n	8008578 <_free_r+0x28>
 80085bc:	681c      	ldr	r4, [r3, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	6053      	str	r3, [r2, #4]
 80085c2:	4421      	add	r1, r4
 80085c4:	6011      	str	r1, [r2, #0]
 80085c6:	e7d7      	b.n	8008578 <_free_r+0x28>
 80085c8:	d902      	bls.n	80085d0 <_free_r+0x80>
 80085ca:	230c      	movs	r3, #12
 80085cc:	6003      	str	r3, [r0, #0]
 80085ce:	e7d3      	b.n	8008578 <_free_r+0x28>
 80085d0:	6825      	ldr	r5, [r4, #0]
 80085d2:	1961      	adds	r1, r4, r5
 80085d4:	428b      	cmp	r3, r1
 80085d6:	bf04      	itt	eq
 80085d8:	6819      	ldreq	r1, [r3, #0]
 80085da:	685b      	ldreq	r3, [r3, #4]
 80085dc:	6063      	str	r3, [r4, #4]
 80085de:	bf04      	itt	eq
 80085e0:	1949      	addeq	r1, r1, r5
 80085e2:	6021      	streq	r1, [r4, #0]
 80085e4:	6054      	str	r4, [r2, #4]
 80085e6:	e7c7      	b.n	8008578 <_free_r+0x28>
 80085e8:	b003      	add	sp, #12
 80085ea:	bd30      	pop	{r4, r5, pc}
 80085ec:	20000204 	.word	0x20000204

080085f0 <_malloc_r>:
 80085f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f2:	1ccd      	adds	r5, r1, #3
 80085f4:	f025 0503 	bic.w	r5, r5, #3
 80085f8:	3508      	adds	r5, #8
 80085fa:	2d0c      	cmp	r5, #12
 80085fc:	bf38      	it	cc
 80085fe:	250c      	movcc	r5, #12
 8008600:	2d00      	cmp	r5, #0
 8008602:	4606      	mov	r6, r0
 8008604:	db01      	blt.n	800860a <_malloc_r+0x1a>
 8008606:	42a9      	cmp	r1, r5
 8008608:	d903      	bls.n	8008612 <_malloc_r+0x22>
 800860a:	230c      	movs	r3, #12
 800860c:	6033      	str	r3, [r6, #0]
 800860e:	2000      	movs	r0, #0
 8008610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008612:	f000 fa0f 	bl	8008a34 <__malloc_lock>
 8008616:	4921      	ldr	r1, [pc, #132]	; (800869c <_malloc_r+0xac>)
 8008618:	680a      	ldr	r2, [r1, #0]
 800861a:	4614      	mov	r4, r2
 800861c:	b99c      	cbnz	r4, 8008646 <_malloc_r+0x56>
 800861e:	4f20      	ldr	r7, [pc, #128]	; (80086a0 <_malloc_r+0xb0>)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	b923      	cbnz	r3, 800862e <_malloc_r+0x3e>
 8008624:	4621      	mov	r1, r4
 8008626:	4630      	mov	r0, r6
 8008628:	f000 f998 	bl	800895c <_sbrk_r>
 800862c:	6038      	str	r0, [r7, #0]
 800862e:	4629      	mov	r1, r5
 8008630:	4630      	mov	r0, r6
 8008632:	f000 f993 	bl	800895c <_sbrk_r>
 8008636:	1c43      	adds	r3, r0, #1
 8008638:	d123      	bne.n	8008682 <_malloc_r+0x92>
 800863a:	230c      	movs	r3, #12
 800863c:	6033      	str	r3, [r6, #0]
 800863e:	4630      	mov	r0, r6
 8008640:	f000 f9fe 	bl	8008a40 <__malloc_unlock>
 8008644:	e7e3      	b.n	800860e <_malloc_r+0x1e>
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	1b5b      	subs	r3, r3, r5
 800864a:	d417      	bmi.n	800867c <_malloc_r+0x8c>
 800864c:	2b0b      	cmp	r3, #11
 800864e:	d903      	bls.n	8008658 <_malloc_r+0x68>
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	441c      	add	r4, r3
 8008654:	6025      	str	r5, [r4, #0]
 8008656:	e004      	b.n	8008662 <_malloc_r+0x72>
 8008658:	6863      	ldr	r3, [r4, #4]
 800865a:	42a2      	cmp	r2, r4
 800865c:	bf0c      	ite	eq
 800865e:	600b      	streq	r3, [r1, #0]
 8008660:	6053      	strne	r3, [r2, #4]
 8008662:	4630      	mov	r0, r6
 8008664:	f000 f9ec 	bl	8008a40 <__malloc_unlock>
 8008668:	f104 000b 	add.w	r0, r4, #11
 800866c:	1d23      	adds	r3, r4, #4
 800866e:	f020 0007 	bic.w	r0, r0, #7
 8008672:	1ac2      	subs	r2, r0, r3
 8008674:	d0cc      	beq.n	8008610 <_malloc_r+0x20>
 8008676:	1a1b      	subs	r3, r3, r0
 8008678:	50a3      	str	r3, [r4, r2]
 800867a:	e7c9      	b.n	8008610 <_malloc_r+0x20>
 800867c:	4622      	mov	r2, r4
 800867e:	6864      	ldr	r4, [r4, #4]
 8008680:	e7cc      	b.n	800861c <_malloc_r+0x2c>
 8008682:	1cc4      	adds	r4, r0, #3
 8008684:	f024 0403 	bic.w	r4, r4, #3
 8008688:	42a0      	cmp	r0, r4
 800868a:	d0e3      	beq.n	8008654 <_malloc_r+0x64>
 800868c:	1a21      	subs	r1, r4, r0
 800868e:	4630      	mov	r0, r6
 8008690:	f000 f964 	bl	800895c <_sbrk_r>
 8008694:	3001      	adds	r0, #1
 8008696:	d1dd      	bne.n	8008654 <_malloc_r+0x64>
 8008698:	e7cf      	b.n	800863a <_malloc_r+0x4a>
 800869a:	bf00      	nop
 800869c:	20000204 	.word	0x20000204
 80086a0:	20000208 	.word	0x20000208

080086a4 <__ssputs_r>:
 80086a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	688e      	ldr	r6, [r1, #8]
 80086aa:	429e      	cmp	r6, r3
 80086ac:	4682      	mov	sl, r0
 80086ae:	460c      	mov	r4, r1
 80086b0:	4690      	mov	r8, r2
 80086b2:	461f      	mov	r7, r3
 80086b4:	d838      	bhi.n	8008728 <__ssputs_r+0x84>
 80086b6:	898a      	ldrh	r2, [r1, #12]
 80086b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086bc:	d032      	beq.n	8008724 <__ssputs_r+0x80>
 80086be:	6825      	ldr	r5, [r4, #0]
 80086c0:	6909      	ldr	r1, [r1, #16]
 80086c2:	eba5 0901 	sub.w	r9, r5, r1
 80086c6:	6965      	ldr	r5, [r4, #20]
 80086c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086d0:	3301      	adds	r3, #1
 80086d2:	444b      	add	r3, r9
 80086d4:	106d      	asrs	r5, r5, #1
 80086d6:	429d      	cmp	r5, r3
 80086d8:	bf38      	it	cc
 80086da:	461d      	movcc	r5, r3
 80086dc:	0553      	lsls	r3, r2, #21
 80086de:	d531      	bpl.n	8008744 <__ssputs_r+0xa0>
 80086e0:	4629      	mov	r1, r5
 80086e2:	f7ff ff85 	bl	80085f0 <_malloc_r>
 80086e6:	4606      	mov	r6, r0
 80086e8:	b950      	cbnz	r0, 8008700 <__ssputs_r+0x5c>
 80086ea:	230c      	movs	r3, #12
 80086ec:	f8ca 3000 	str.w	r3, [sl]
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086f6:	81a3      	strh	r3, [r4, #12]
 80086f8:	f04f 30ff 	mov.w	r0, #4294967295
 80086fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008700:	6921      	ldr	r1, [r4, #16]
 8008702:	464a      	mov	r2, r9
 8008704:	f7ff fb88 	bl	8007e18 <memcpy>
 8008708:	89a3      	ldrh	r3, [r4, #12]
 800870a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800870e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008712:	81a3      	strh	r3, [r4, #12]
 8008714:	6126      	str	r6, [r4, #16]
 8008716:	6165      	str	r5, [r4, #20]
 8008718:	444e      	add	r6, r9
 800871a:	eba5 0509 	sub.w	r5, r5, r9
 800871e:	6026      	str	r6, [r4, #0]
 8008720:	60a5      	str	r5, [r4, #8]
 8008722:	463e      	mov	r6, r7
 8008724:	42be      	cmp	r6, r7
 8008726:	d900      	bls.n	800872a <__ssputs_r+0x86>
 8008728:	463e      	mov	r6, r7
 800872a:	4632      	mov	r2, r6
 800872c:	6820      	ldr	r0, [r4, #0]
 800872e:	4641      	mov	r1, r8
 8008730:	f000 f966 	bl	8008a00 <memmove>
 8008734:	68a3      	ldr	r3, [r4, #8]
 8008736:	6822      	ldr	r2, [r4, #0]
 8008738:	1b9b      	subs	r3, r3, r6
 800873a:	4432      	add	r2, r6
 800873c:	60a3      	str	r3, [r4, #8]
 800873e:	6022      	str	r2, [r4, #0]
 8008740:	2000      	movs	r0, #0
 8008742:	e7db      	b.n	80086fc <__ssputs_r+0x58>
 8008744:	462a      	mov	r2, r5
 8008746:	f000 f981 	bl	8008a4c <_realloc_r>
 800874a:	4606      	mov	r6, r0
 800874c:	2800      	cmp	r0, #0
 800874e:	d1e1      	bne.n	8008714 <__ssputs_r+0x70>
 8008750:	6921      	ldr	r1, [r4, #16]
 8008752:	4650      	mov	r0, sl
 8008754:	f7ff fefc 	bl	8008550 <_free_r>
 8008758:	e7c7      	b.n	80086ea <__ssputs_r+0x46>
	...

0800875c <_svfiprintf_r>:
 800875c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008760:	4698      	mov	r8, r3
 8008762:	898b      	ldrh	r3, [r1, #12]
 8008764:	061b      	lsls	r3, r3, #24
 8008766:	b09d      	sub	sp, #116	; 0x74
 8008768:	4607      	mov	r7, r0
 800876a:	460d      	mov	r5, r1
 800876c:	4614      	mov	r4, r2
 800876e:	d50e      	bpl.n	800878e <_svfiprintf_r+0x32>
 8008770:	690b      	ldr	r3, [r1, #16]
 8008772:	b963      	cbnz	r3, 800878e <_svfiprintf_r+0x32>
 8008774:	2140      	movs	r1, #64	; 0x40
 8008776:	f7ff ff3b 	bl	80085f0 <_malloc_r>
 800877a:	6028      	str	r0, [r5, #0]
 800877c:	6128      	str	r0, [r5, #16]
 800877e:	b920      	cbnz	r0, 800878a <_svfiprintf_r+0x2e>
 8008780:	230c      	movs	r3, #12
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	f04f 30ff 	mov.w	r0, #4294967295
 8008788:	e0d1      	b.n	800892e <_svfiprintf_r+0x1d2>
 800878a:	2340      	movs	r3, #64	; 0x40
 800878c:	616b      	str	r3, [r5, #20]
 800878e:	2300      	movs	r3, #0
 8008790:	9309      	str	r3, [sp, #36]	; 0x24
 8008792:	2320      	movs	r3, #32
 8008794:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008798:	f8cd 800c 	str.w	r8, [sp, #12]
 800879c:	2330      	movs	r3, #48	; 0x30
 800879e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008948 <_svfiprintf_r+0x1ec>
 80087a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087a6:	f04f 0901 	mov.w	r9, #1
 80087aa:	4623      	mov	r3, r4
 80087ac:	469a      	mov	sl, r3
 80087ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087b2:	b10a      	cbz	r2, 80087b8 <_svfiprintf_r+0x5c>
 80087b4:	2a25      	cmp	r2, #37	; 0x25
 80087b6:	d1f9      	bne.n	80087ac <_svfiprintf_r+0x50>
 80087b8:	ebba 0b04 	subs.w	fp, sl, r4
 80087bc:	d00b      	beq.n	80087d6 <_svfiprintf_r+0x7a>
 80087be:	465b      	mov	r3, fp
 80087c0:	4622      	mov	r2, r4
 80087c2:	4629      	mov	r1, r5
 80087c4:	4638      	mov	r0, r7
 80087c6:	f7ff ff6d 	bl	80086a4 <__ssputs_r>
 80087ca:	3001      	adds	r0, #1
 80087cc:	f000 80aa 	beq.w	8008924 <_svfiprintf_r+0x1c8>
 80087d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087d2:	445a      	add	r2, fp
 80087d4:	9209      	str	r2, [sp, #36]	; 0x24
 80087d6:	f89a 3000 	ldrb.w	r3, [sl]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 80a2 	beq.w	8008924 <_svfiprintf_r+0x1c8>
 80087e0:	2300      	movs	r3, #0
 80087e2:	f04f 32ff 	mov.w	r2, #4294967295
 80087e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ea:	f10a 0a01 	add.w	sl, sl, #1
 80087ee:	9304      	str	r3, [sp, #16]
 80087f0:	9307      	str	r3, [sp, #28]
 80087f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087f6:	931a      	str	r3, [sp, #104]	; 0x68
 80087f8:	4654      	mov	r4, sl
 80087fa:	2205      	movs	r2, #5
 80087fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008800:	4851      	ldr	r0, [pc, #324]	; (8008948 <_svfiprintf_r+0x1ec>)
 8008802:	f7f7 fced 	bl	80001e0 <memchr>
 8008806:	9a04      	ldr	r2, [sp, #16]
 8008808:	b9d8      	cbnz	r0, 8008842 <_svfiprintf_r+0xe6>
 800880a:	06d0      	lsls	r0, r2, #27
 800880c:	bf44      	itt	mi
 800880e:	2320      	movmi	r3, #32
 8008810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008814:	0711      	lsls	r1, r2, #28
 8008816:	bf44      	itt	mi
 8008818:	232b      	movmi	r3, #43	; 0x2b
 800881a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800881e:	f89a 3000 	ldrb.w	r3, [sl]
 8008822:	2b2a      	cmp	r3, #42	; 0x2a
 8008824:	d015      	beq.n	8008852 <_svfiprintf_r+0xf6>
 8008826:	9a07      	ldr	r2, [sp, #28]
 8008828:	4654      	mov	r4, sl
 800882a:	2000      	movs	r0, #0
 800882c:	f04f 0c0a 	mov.w	ip, #10
 8008830:	4621      	mov	r1, r4
 8008832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008836:	3b30      	subs	r3, #48	; 0x30
 8008838:	2b09      	cmp	r3, #9
 800883a:	d94e      	bls.n	80088da <_svfiprintf_r+0x17e>
 800883c:	b1b0      	cbz	r0, 800886c <_svfiprintf_r+0x110>
 800883e:	9207      	str	r2, [sp, #28]
 8008840:	e014      	b.n	800886c <_svfiprintf_r+0x110>
 8008842:	eba0 0308 	sub.w	r3, r0, r8
 8008846:	fa09 f303 	lsl.w	r3, r9, r3
 800884a:	4313      	orrs	r3, r2
 800884c:	9304      	str	r3, [sp, #16]
 800884e:	46a2      	mov	sl, r4
 8008850:	e7d2      	b.n	80087f8 <_svfiprintf_r+0x9c>
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	1d19      	adds	r1, r3, #4
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	9103      	str	r1, [sp, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	bfbb      	ittet	lt
 800885e:	425b      	neglt	r3, r3
 8008860:	f042 0202 	orrlt.w	r2, r2, #2
 8008864:	9307      	strge	r3, [sp, #28]
 8008866:	9307      	strlt	r3, [sp, #28]
 8008868:	bfb8      	it	lt
 800886a:	9204      	strlt	r2, [sp, #16]
 800886c:	7823      	ldrb	r3, [r4, #0]
 800886e:	2b2e      	cmp	r3, #46	; 0x2e
 8008870:	d10c      	bne.n	800888c <_svfiprintf_r+0x130>
 8008872:	7863      	ldrb	r3, [r4, #1]
 8008874:	2b2a      	cmp	r3, #42	; 0x2a
 8008876:	d135      	bne.n	80088e4 <_svfiprintf_r+0x188>
 8008878:	9b03      	ldr	r3, [sp, #12]
 800887a:	1d1a      	adds	r2, r3, #4
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	9203      	str	r2, [sp, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	bfb8      	it	lt
 8008884:	f04f 33ff 	movlt.w	r3, #4294967295
 8008888:	3402      	adds	r4, #2
 800888a:	9305      	str	r3, [sp, #20]
 800888c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008958 <_svfiprintf_r+0x1fc>
 8008890:	7821      	ldrb	r1, [r4, #0]
 8008892:	2203      	movs	r2, #3
 8008894:	4650      	mov	r0, sl
 8008896:	f7f7 fca3 	bl	80001e0 <memchr>
 800889a:	b140      	cbz	r0, 80088ae <_svfiprintf_r+0x152>
 800889c:	2340      	movs	r3, #64	; 0x40
 800889e:	eba0 000a 	sub.w	r0, r0, sl
 80088a2:	fa03 f000 	lsl.w	r0, r3, r0
 80088a6:	9b04      	ldr	r3, [sp, #16]
 80088a8:	4303      	orrs	r3, r0
 80088aa:	3401      	adds	r4, #1
 80088ac:	9304      	str	r3, [sp, #16]
 80088ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b2:	4826      	ldr	r0, [pc, #152]	; (800894c <_svfiprintf_r+0x1f0>)
 80088b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088b8:	2206      	movs	r2, #6
 80088ba:	f7f7 fc91 	bl	80001e0 <memchr>
 80088be:	2800      	cmp	r0, #0
 80088c0:	d038      	beq.n	8008934 <_svfiprintf_r+0x1d8>
 80088c2:	4b23      	ldr	r3, [pc, #140]	; (8008950 <_svfiprintf_r+0x1f4>)
 80088c4:	bb1b      	cbnz	r3, 800890e <_svfiprintf_r+0x1b2>
 80088c6:	9b03      	ldr	r3, [sp, #12]
 80088c8:	3307      	adds	r3, #7
 80088ca:	f023 0307 	bic.w	r3, r3, #7
 80088ce:	3308      	adds	r3, #8
 80088d0:	9303      	str	r3, [sp, #12]
 80088d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d4:	4433      	add	r3, r6
 80088d6:	9309      	str	r3, [sp, #36]	; 0x24
 80088d8:	e767      	b.n	80087aa <_svfiprintf_r+0x4e>
 80088da:	fb0c 3202 	mla	r2, ip, r2, r3
 80088de:	460c      	mov	r4, r1
 80088e0:	2001      	movs	r0, #1
 80088e2:	e7a5      	b.n	8008830 <_svfiprintf_r+0xd4>
 80088e4:	2300      	movs	r3, #0
 80088e6:	3401      	adds	r4, #1
 80088e8:	9305      	str	r3, [sp, #20]
 80088ea:	4619      	mov	r1, r3
 80088ec:	f04f 0c0a 	mov.w	ip, #10
 80088f0:	4620      	mov	r0, r4
 80088f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088f6:	3a30      	subs	r2, #48	; 0x30
 80088f8:	2a09      	cmp	r2, #9
 80088fa:	d903      	bls.n	8008904 <_svfiprintf_r+0x1a8>
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d0c5      	beq.n	800888c <_svfiprintf_r+0x130>
 8008900:	9105      	str	r1, [sp, #20]
 8008902:	e7c3      	b.n	800888c <_svfiprintf_r+0x130>
 8008904:	fb0c 2101 	mla	r1, ip, r1, r2
 8008908:	4604      	mov	r4, r0
 800890a:	2301      	movs	r3, #1
 800890c:	e7f0      	b.n	80088f0 <_svfiprintf_r+0x194>
 800890e:	ab03      	add	r3, sp, #12
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	462a      	mov	r2, r5
 8008914:	4b0f      	ldr	r3, [pc, #60]	; (8008954 <_svfiprintf_r+0x1f8>)
 8008916:	a904      	add	r1, sp, #16
 8008918:	4638      	mov	r0, r7
 800891a:	f7fe f80d 	bl	8006938 <_printf_float>
 800891e:	1c42      	adds	r2, r0, #1
 8008920:	4606      	mov	r6, r0
 8008922:	d1d6      	bne.n	80088d2 <_svfiprintf_r+0x176>
 8008924:	89ab      	ldrh	r3, [r5, #12]
 8008926:	065b      	lsls	r3, r3, #25
 8008928:	f53f af2c 	bmi.w	8008784 <_svfiprintf_r+0x28>
 800892c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800892e:	b01d      	add	sp, #116	; 0x74
 8008930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008934:	ab03      	add	r3, sp, #12
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	462a      	mov	r2, r5
 800893a:	4b06      	ldr	r3, [pc, #24]	; (8008954 <_svfiprintf_r+0x1f8>)
 800893c:	a904      	add	r1, sp, #16
 800893e:	4638      	mov	r0, r7
 8008940:	f7fe fa9e 	bl	8006e80 <_printf_i>
 8008944:	e7eb      	b.n	800891e <_svfiprintf_r+0x1c2>
 8008946:	bf00      	nop
 8008948:	0800985c 	.word	0x0800985c
 800894c:	08009866 	.word	0x08009866
 8008950:	08006939 	.word	0x08006939
 8008954:	080086a5 	.word	0x080086a5
 8008958:	08009862 	.word	0x08009862

0800895c <_sbrk_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4d06      	ldr	r5, [pc, #24]	; (8008978 <_sbrk_r+0x1c>)
 8008960:	2300      	movs	r3, #0
 8008962:	4604      	mov	r4, r0
 8008964:	4608      	mov	r0, r1
 8008966:	602b      	str	r3, [r5, #0]
 8008968:	f7f9 fa34 	bl	8001dd4 <_sbrk>
 800896c:	1c43      	adds	r3, r0, #1
 800896e:	d102      	bne.n	8008976 <_sbrk_r+0x1a>
 8008970:	682b      	ldr	r3, [r5, #0]
 8008972:	b103      	cbz	r3, 8008976 <_sbrk_r+0x1a>
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	bd38      	pop	{r3, r4, r5, pc}
 8008978:	20000488 	.word	0x20000488

0800897c <__assert_func>:
 800897c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800897e:	4614      	mov	r4, r2
 8008980:	461a      	mov	r2, r3
 8008982:	4b09      	ldr	r3, [pc, #36]	; (80089a8 <__assert_func+0x2c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4605      	mov	r5, r0
 8008988:	68d8      	ldr	r0, [r3, #12]
 800898a:	b14c      	cbz	r4, 80089a0 <__assert_func+0x24>
 800898c:	4b07      	ldr	r3, [pc, #28]	; (80089ac <__assert_func+0x30>)
 800898e:	9100      	str	r1, [sp, #0]
 8008990:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008994:	4906      	ldr	r1, [pc, #24]	; (80089b0 <__assert_func+0x34>)
 8008996:	462b      	mov	r3, r5
 8008998:	f000 f80e 	bl	80089b8 <fiprintf>
 800899c:	f000 faa4 	bl	8008ee8 <abort>
 80089a0:	4b04      	ldr	r3, [pc, #16]	; (80089b4 <__assert_func+0x38>)
 80089a2:	461c      	mov	r4, r3
 80089a4:	e7f3      	b.n	800898e <__assert_func+0x12>
 80089a6:	bf00      	nop
 80089a8:	2000000c 	.word	0x2000000c
 80089ac:	0800986d 	.word	0x0800986d
 80089b0:	0800987a 	.word	0x0800987a
 80089b4:	080098a8 	.word	0x080098a8

080089b8 <fiprintf>:
 80089b8:	b40e      	push	{r1, r2, r3}
 80089ba:	b503      	push	{r0, r1, lr}
 80089bc:	4601      	mov	r1, r0
 80089be:	ab03      	add	r3, sp, #12
 80089c0:	4805      	ldr	r0, [pc, #20]	; (80089d8 <fiprintf+0x20>)
 80089c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089c6:	6800      	ldr	r0, [r0, #0]
 80089c8:	9301      	str	r3, [sp, #4]
 80089ca:	f000 f88f 	bl	8008aec <_vfiprintf_r>
 80089ce:	b002      	add	sp, #8
 80089d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089d4:	b003      	add	sp, #12
 80089d6:	4770      	bx	lr
 80089d8:	2000000c 	.word	0x2000000c

080089dc <__ascii_mbtowc>:
 80089dc:	b082      	sub	sp, #8
 80089de:	b901      	cbnz	r1, 80089e2 <__ascii_mbtowc+0x6>
 80089e0:	a901      	add	r1, sp, #4
 80089e2:	b142      	cbz	r2, 80089f6 <__ascii_mbtowc+0x1a>
 80089e4:	b14b      	cbz	r3, 80089fa <__ascii_mbtowc+0x1e>
 80089e6:	7813      	ldrb	r3, [r2, #0]
 80089e8:	600b      	str	r3, [r1, #0]
 80089ea:	7812      	ldrb	r2, [r2, #0]
 80089ec:	1e10      	subs	r0, r2, #0
 80089ee:	bf18      	it	ne
 80089f0:	2001      	movne	r0, #1
 80089f2:	b002      	add	sp, #8
 80089f4:	4770      	bx	lr
 80089f6:	4610      	mov	r0, r2
 80089f8:	e7fb      	b.n	80089f2 <__ascii_mbtowc+0x16>
 80089fa:	f06f 0001 	mvn.w	r0, #1
 80089fe:	e7f8      	b.n	80089f2 <__ascii_mbtowc+0x16>

08008a00 <memmove>:
 8008a00:	4288      	cmp	r0, r1
 8008a02:	b510      	push	{r4, lr}
 8008a04:	eb01 0402 	add.w	r4, r1, r2
 8008a08:	d902      	bls.n	8008a10 <memmove+0x10>
 8008a0a:	4284      	cmp	r4, r0
 8008a0c:	4623      	mov	r3, r4
 8008a0e:	d807      	bhi.n	8008a20 <memmove+0x20>
 8008a10:	1e43      	subs	r3, r0, #1
 8008a12:	42a1      	cmp	r1, r4
 8008a14:	d008      	beq.n	8008a28 <memmove+0x28>
 8008a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a1e:	e7f8      	b.n	8008a12 <memmove+0x12>
 8008a20:	4402      	add	r2, r0
 8008a22:	4601      	mov	r1, r0
 8008a24:	428a      	cmp	r2, r1
 8008a26:	d100      	bne.n	8008a2a <memmove+0x2a>
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a32:	e7f7      	b.n	8008a24 <memmove+0x24>

08008a34 <__malloc_lock>:
 8008a34:	4801      	ldr	r0, [pc, #4]	; (8008a3c <__malloc_lock+0x8>)
 8008a36:	f000 bc17 	b.w	8009268 <__retarget_lock_acquire_recursive>
 8008a3a:	bf00      	nop
 8008a3c:	20000490 	.word	0x20000490

08008a40 <__malloc_unlock>:
 8008a40:	4801      	ldr	r0, [pc, #4]	; (8008a48 <__malloc_unlock+0x8>)
 8008a42:	f000 bc12 	b.w	800926a <__retarget_lock_release_recursive>
 8008a46:	bf00      	nop
 8008a48:	20000490 	.word	0x20000490

08008a4c <_realloc_r>:
 8008a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4e:	4607      	mov	r7, r0
 8008a50:	4614      	mov	r4, r2
 8008a52:	460e      	mov	r6, r1
 8008a54:	b921      	cbnz	r1, 8008a60 <_realloc_r+0x14>
 8008a56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	f7ff bdc8 	b.w	80085f0 <_malloc_r>
 8008a60:	b922      	cbnz	r2, 8008a6c <_realloc_r+0x20>
 8008a62:	f7ff fd75 	bl	8008550 <_free_r>
 8008a66:	4625      	mov	r5, r4
 8008a68:	4628      	mov	r0, r5
 8008a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a6c:	f000 fc62 	bl	8009334 <_malloc_usable_size_r>
 8008a70:	42a0      	cmp	r0, r4
 8008a72:	d20f      	bcs.n	8008a94 <_realloc_r+0x48>
 8008a74:	4621      	mov	r1, r4
 8008a76:	4638      	mov	r0, r7
 8008a78:	f7ff fdba 	bl	80085f0 <_malloc_r>
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d0f2      	beq.n	8008a68 <_realloc_r+0x1c>
 8008a82:	4631      	mov	r1, r6
 8008a84:	4622      	mov	r2, r4
 8008a86:	f7ff f9c7 	bl	8007e18 <memcpy>
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	4638      	mov	r0, r7
 8008a8e:	f7ff fd5f 	bl	8008550 <_free_r>
 8008a92:	e7e9      	b.n	8008a68 <_realloc_r+0x1c>
 8008a94:	4635      	mov	r5, r6
 8008a96:	e7e7      	b.n	8008a68 <_realloc_r+0x1c>

08008a98 <__sfputc_r>:
 8008a98:	6893      	ldr	r3, [r2, #8]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	b410      	push	{r4}
 8008aa0:	6093      	str	r3, [r2, #8]
 8008aa2:	da08      	bge.n	8008ab6 <__sfputc_r+0x1e>
 8008aa4:	6994      	ldr	r4, [r2, #24]
 8008aa6:	42a3      	cmp	r3, r4
 8008aa8:	db01      	blt.n	8008aae <__sfputc_r+0x16>
 8008aaa:	290a      	cmp	r1, #10
 8008aac:	d103      	bne.n	8008ab6 <__sfputc_r+0x1e>
 8008aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ab2:	f000 b94b 	b.w	8008d4c <__swbuf_r>
 8008ab6:	6813      	ldr	r3, [r2, #0]
 8008ab8:	1c58      	adds	r0, r3, #1
 8008aba:	6010      	str	r0, [r2, #0]
 8008abc:	7019      	strb	r1, [r3, #0]
 8008abe:	4608      	mov	r0, r1
 8008ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <__sfputs_r>:
 8008ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac8:	4606      	mov	r6, r0
 8008aca:	460f      	mov	r7, r1
 8008acc:	4614      	mov	r4, r2
 8008ace:	18d5      	adds	r5, r2, r3
 8008ad0:	42ac      	cmp	r4, r5
 8008ad2:	d101      	bne.n	8008ad8 <__sfputs_r+0x12>
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	e007      	b.n	8008ae8 <__sfputs_r+0x22>
 8008ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008adc:	463a      	mov	r2, r7
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f7ff ffda 	bl	8008a98 <__sfputc_r>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d1f3      	bne.n	8008ad0 <__sfputs_r+0xa>
 8008ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008aec <_vfiprintf_r>:
 8008aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af0:	460d      	mov	r5, r1
 8008af2:	b09d      	sub	sp, #116	; 0x74
 8008af4:	4614      	mov	r4, r2
 8008af6:	4698      	mov	r8, r3
 8008af8:	4606      	mov	r6, r0
 8008afa:	b118      	cbz	r0, 8008b04 <_vfiprintf_r+0x18>
 8008afc:	6983      	ldr	r3, [r0, #24]
 8008afe:	b90b      	cbnz	r3, 8008b04 <_vfiprintf_r+0x18>
 8008b00:	f000 fb14 	bl	800912c <__sinit>
 8008b04:	4b89      	ldr	r3, [pc, #548]	; (8008d2c <_vfiprintf_r+0x240>)
 8008b06:	429d      	cmp	r5, r3
 8008b08:	d11b      	bne.n	8008b42 <_vfiprintf_r+0x56>
 8008b0a:	6875      	ldr	r5, [r6, #4]
 8008b0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b0e:	07d9      	lsls	r1, r3, #31
 8008b10:	d405      	bmi.n	8008b1e <_vfiprintf_r+0x32>
 8008b12:	89ab      	ldrh	r3, [r5, #12]
 8008b14:	059a      	lsls	r2, r3, #22
 8008b16:	d402      	bmi.n	8008b1e <_vfiprintf_r+0x32>
 8008b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b1a:	f000 fba5 	bl	8009268 <__retarget_lock_acquire_recursive>
 8008b1e:	89ab      	ldrh	r3, [r5, #12]
 8008b20:	071b      	lsls	r3, r3, #28
 8008b22:	d501      	bpl.n	8008b28 <_vfiprintf_r+0x3c>
 8008b24:	692b      	ldr	r3, [r5, #16]
 8008b26:	b9eb      	cbnz	r3, 8008b64 <_vfiprintf_r+0x78>
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f000 f96e 	bl	8008e0c <__swsetup_r>
 8008b30:	b1c0      	cbz	r0, 8008b64 <_vfiprintf_r+0x78>
 8008b32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b34:	07dc      	lsls	r4, r3, #31
 8008b36:	d50e      	bpl.n	8008b56 <_vfiprintf_r+0x6a>
 8008b38:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3c:	b01d      	add	sp, #116	; 0x74
 8008b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b42:	4b7b      	ldr	r3, [pc, #492]	; (8008d30 <_vfiprintf_r+0x244>)
 8008b44:	429d      	cmp	r5, r3
 8008b46:	d101      	bne.n	8008b4c <_vfiprintf_r+0x60>
 8008b48:	68b5      	ldr	r5, [r6, #8]
 8008b4a:	e7df      	b.n	8008b0c <_vfiprintf_r+0x20>
 8008b4c:	4b79      	ldr	r3, [pc, #484]	; (8008d34 <_vfiprintf_r+0x248>)
 8008b4e:	429d      	cmp	r5, r3
 8008b50:	bf08      	it	eq
 8008b52:	68f5      	ldreq	r5, [r6, #12]
 8008b54:	e7da      	b.n	8008b0c <_vfiprintf_r+0x20>
 8008b56:	89ab      	ldrh	r3, [r5, #12]
 8008b58:	0598      	lsls	r0, r3, #22
 8008b5a:	d4ed      	bmi.n	8008b38 <_vfiprintf_r+0x4c>
 8008b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b5e:	f000 fb84 	bl	800926a <__retarget_lock_release_recursive>
 8008b62:	e7e9      	b.n	8008b38 <_vfiprintf_r+0x4c>
 8008b64:	2300      	movs	r3, #0
 8008b66:	9309      	str	r3, [sp, #36]	; 0x24
 8008b68:	2320      	movs	r3, #32
 8008b6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b72:	2330      	movs	r3, #48	; 0x30
 8008b74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d38 <_vfiprintf_r+0x24c>
 8008b78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b7c:	f04f 0901 	mov.w	r9, #1
 8008b80:	4623      	mov	r3, r4
 8008b82:	469a      	mov	sl, r3
 8008b84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b88:	b10a      	cbz	r2, 8008b8e <_vfiprintf_r+0xa2>
 8008b8a:	2a25      	cmp	r2, #37	; 0x25
 8008b8c:	d1f9      	bne.n	8008b82 <_vfiprintf_r+0x96>
 8008b8e:	ebba 0b04 	subs.w	fp, sl, r4
 8008b92:	d00b      	beq.n	8008bac <_vfiprintf_r+0xc0>
 8008b94:	465b      	mov	r3, fp
 8008b96:	4622      	mov	r2, r4
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f7ff ff93 	bl	8008ac6 <__sfputs_r>
 8008ba0:	3001      	adds	r0, #1
 8008ba2:	f000 80aa 	beq.w	8008cfa <_vfiprintf_r+0x20e>
 8008ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ba8:	445a      	add	r2, fp
 8008baa:	9209      	str	r2, [sp, #36]	; 0x24
 8008bac:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f000 80a2 	beq.w	8008cfa <_vfiprintf_r+0x20e>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bc0:	f10a 0a01 	add.w	sl, sl, #1
 8008bc4:	9304      	str	r3, [sp, #16]
 8008bc6:	9307      	str	r3, [sp, #28]
 8008bc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bcc:	931a      	str	r3, [sp, #104]	; 0x68
 8008bce:	4654      	mov	r4, sl
 8008bd0:	2205      	movs	r2, #5
 8008bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd6:	4858      	ldr	r0, [pc, #352]	; (8008d38 <_vfiprintf_r+0x24c>)
 8008bd8:	f7f7 fb02 	bl	80001e0 <memchr>
 8008bdc:	9a04      	ldr	r2, [sp, #16]
 8008bde:	b9d8      	cbnz	r0, 8008c18 <_vfiprintf_r+0x12c>
 8008be0:	06d1      	lsls	r1, r2, #27
 8008be2:	bf44      	itt	mi
 8008be4:	2320      	movmi	r3, #32
 8008be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bea:	0713      	lsls	r3, r2, #28
 8008bec:	bf44      	itt	mi
 8008bee:	232b      	movmi	r3, #43	; 0x2b
 8008bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8008bfa:	d015      	beq.n	8008c28 <_vfiprintf_r+0x13c>
 8008bfc:	9a07      	ldr	r2, [sp, #28]
 8008bfe:	4654      	mov	r4, sl
 8008c00:	2000      	movs	r0, #0
 8008c02:	f04f 0c0a 	mov.w	ip, #10
 8008c06:	4621      	mov	r1, r4
 8008c08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c0c:	3b30      	subs	r3, #48	; 0x30
 8008c0e:	2b09      	cmp	r3, #9
 8008c10:	d94e      	bls.n	8008cb0 <_vfiprintf_r+0x1c4>
 8008c12:	b1b0      	cbz	r0, 8008c42 <_vfiprintf_r+0x156>
 8008c14:	9207      	str	r2, [sp, #28]
 8008c16:	e014      	b.n	8008c42 <_vfiprintf_r+0x156>
 8008c18:	eba0 0308 	sub.w	r3, r0, r8
 8008c1c:	fa09 f303 	lsl.w	r3, r9, r3
 8008c20:	4313      	orrs	r3, r2
 8008c22:	9304      	str	r3, [sp, #16]
 8008c24:	46a2      	mov	sl, r4
 8008c26:	e7d2      	b.n	8008bce <_vfiprintf_r+0xe2>
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	1d19      	adds	r1, r3, #4
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	9103      	str	r1, [sp, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	bfbb      	ittet	lt
 8008c34:	425b      	neglt	r3, r3
 8008c36:	f042 0202 	orrlt.w	r2, r2, #2
 8008c3a:	9307      	strge	r3, [sp, #28]
 8008c3c:	9307      	strlt	r3, [sp, #28]
 8008c3e:	bfb8      	it	lt
 8008c40:	9204      	strlt	r2, [sp, #16]
 8008c42:	7823      	ldrb	r3, [r4, #0]
 8008c44:	2b2e      	cmp	r3, #46	; 0x2e
 8008c46:	d10c      	bne.n	8008c62 <_vfiprintf_r+0x176>
 8008c48:	7863      	ldrb	r3, [r4, #1]
 8008c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c4c:	d135      	bne.n	8008cba <_vfiprintf_r+0x1ce>
 8008c4e:	9b03      	ldr	r3, [sp, #12]
 8008c50:	1d1a      	adds	r2, r3, #4
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	9203      	str	r2, [sp, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	bfb8      	it	lt
 8008c5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c5e:	3402      	adds	r4, #2
 8008c60:	9305      	str	r3, [sp, #20]
 8008c62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d48 <_vfiprintf_r+0x25c>
 8008c66:	7821      	ldrb	r1, [r4, #0]
 8008c68:	2203      	movs	r2, #3
 8008c6a:	4650      	mov	r0, sl
 8008c6c:	f7f7 fab8 	bl	80001e0 <memchr>
 8008c70:	b140      	cbz	r0, 8008c84 <_vfiprintf_r+0x198>
 8008c72:	2340      	movs	r3, #64	; 0x40
 8008c74:	eba0 000a 	sub.w	r0, r0, sl
 8008c78:	fa03 f000 	lsl.w	r0, r3, r0
 8008c7c:	9b04      	ldr	r3, [sp, #16]
 8008c7e:	4303      	orrs	r3, r0
 8008c80:	3401      	adds	r4, #1
 8008c82:	9304      	str	r3, [sp, #16]
 8008c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c88:	482c      	ldr	r0, [pc, #176]	; (8008d3c <_vfiprintf_r+0x250>)
 8008c8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c8e:	2206      	movs	r2, #6
 8008c90:	f7f7 faa6 	bl	80001e0 <memchr>
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d03f      	beq.n	8008d18 <_vfiprintf_r+0x22c>
 8008c98:	4b29      	ldr	r3, [pc, #164]	; (8008d40 <_vfiprintf_r+0x254>)
 8008c9a:	bb1b      	cbnz	r3, 8008ce4 <_vfiprintf_r+0x1f8>
 8008c9c:	9b03      	ldr	r3, [sp, #12]
 8008c9e:	3307      	adds	r3, #7
 8008ca0:	f023 0307 	bic.w	r3, r3, #7
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	9303      	str	r3, [sp, #12]
 8008ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008caa:	443b      	add	r3, r7
 8008cac:	9309      	str	r3, [sp, #36]	; 0x24
 8008cae:	e767      	b.n	8008b80 <_vfiprintf_r+0x94>
 8008cb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	2001      	movs	r0, #1
 8008cb8:	e7a5      	b.n	8008c06 <_vfiprintf_r+0x11a>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	3401      	adds	r4, #1
 8008cbe:	9305      	str	r3, [sp, #20]
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	f04f 0c0a 	mov.w	ip, #10
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ccc:	3a30      	subs	r2, #48	; 0x30
 8008cce:	2a09      	cmp	r2, #9
 8008cd0:	d903      	bls.n	8008cda <_vfiprintf_r+0x1ee>
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d0c5      	beq.n	8008c62 <_vfiprintf_r+0x176>
 8008cd6:	9105      	str	r1, [sp, #20]
 8008cd8:	e7c3      	b.n	8008c62 <_vfiprintf_r+0x176>
 8008cda:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cde:	4604      	mov	r4, r0
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e7f0      	b.n	8008cc6 <_vfiprintf_r+0x1da>
 8008ce4:	ab03      	add	r3, sp, #12
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	462a      	mov	r2, r5
 8008cea:	4b16      	ldr	r3, [pc, #88]	; (8008d44 <_vfiprintf_r+0x258>)
 8008cec:	a904      	add	r1, sp, #16
 8008cee:	4630      	mov	r0, r6
 8008cf0:	f7fd fe22 	bl	8006938 <_printf_float>
 8008cf4:	4607      	mov	r7, r0
 8008cf6:	1c78      	adds	r0, r7, #1
 8008cf8:	d1d6      	bne.n	8008ca8 <_vfiprintf_r+0x1bc>
 8008cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cfc:	07d9      	lsls	r1, r3, #31
 8008cfe:	d405      	bmi.n	8008d0c <_vfiprintf_r+0x220>
 8008d00:	89ab      	ldrh	r3, [r5, #12]
 8008d02:	059a      	lsls	r2, r3, #22
 8008d04:	d402      	bmi.n	8008d0c <_vfiprintf_r+0x220>
 8008d06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d08:	f000 faaf 	bl	800926a <__retarget_lock_release_recursive>
 8008d0c:	89ab      	ldrh	r3, [r5, #12]
 8008d0e:	065b      	lsls	r3, r3, #25
 8008d10:	f53f af12 	bmi.w	8008b38 <_vfiprintf_r+0x4c>
 8008d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d16:	e711      	b.n	8008b3c <_vfiprintf_r+0x50>
 8008d18:	ab03      	add	r3, sp, #12
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	462a      	mov	r2, r5
 8008d1e:	4b09      	ldr	r3, [pc, #36]	; (8008d44 <_vfiprintf_r+0x258>)
 8008d20:	a904      	add	r1, sp, #16
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7fe f8ac 	bl	8006e80 <_printf_i>
 8008d28:	e7e4      	b.n	8008cf4 <_vfiprintf_r+0x208>
 8008d2a:	bf00      	nop
 8008d2c:	080099d4 	.word	0x080099d4
 8008d30:	080099f4 	.word	0x080099f4
 8008d34:	080099b4 	.word	0x080099b4
 8008d38:	0800985c 	.word	0x0800985c
 8008d3c:	08009866 	.word	0x08009866
 8008d40:	08006939 	.word	0x08006939
 8008d44:	08008ac7 	.word	0x08008ac7
 8008d48:	08009862 	.word	0x08009862

08008d4c <__swbuf_r>:
 8008d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4e:	460e      	mov	r6, r1
 8008d50:	4614      	mov	r4, r2
 8008d52:	4605      	mov	r5, r0
 8008d54:	b118      	cbz	r0, 8008d5e <__swbuf_r+0x12>
 8008d56:	6983      	ldr	r3, [r0, #24]
 8008d58:	b90b      	cbnz	r3, 8008d5e <__swbuf_r+0x12>
 8008d5a:	f000 f9e7 	bl	800912c <__sinit>
 8008d5e:	4b21      	ldr	r3, [pc, #132]	; (8008de4 <__swbuf_r+0x98>)
 8008d60:	429c      	cmp	r4, r3
 8008d62:	d12b      	bne.n	8008dbc <__swbuf_r+0x70>
 8008d64:	686c      	ldr	r4, [r5, #4]
 8008d66:	69a3      	ldr	r3, [r4, #24]
 8008d68:	60a3      	str	r3, [r4, #8]
 8008d6a:	89a3      	ldrh	r3, [r4, #12]
 8008d6c:	071a      	lsls	r2, r3, #28
 8008d6e:	d52f      	bpl.n	8008dd0 <__swbuf_r+0x84>
 8008d70:	6923      	ldr	r3, [r4, #16]
 8008d72:	b36b      	cbz	r3, 8008dd0 <__swbuf_r+0x84>
 8008d74:	6923      	ldr	r3, [r4, #16]
 8008d76:	6820      	ldr	r0, [r4, #0]
 8008d78:	1ac0      	subs	r0, r0, r3
 8008d7a:	6963      	ldr	r3, [r4, #20]
 8008d7c:	b2f6      	uxtb	r6, r6
 8008d7e:	4283      	cmp	r3, r0
 8008d80:	4637      	mov	r7, r6
 8008d82:	dc04      	bgt.n	8008d8e <__swbuf_r+0x42>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4628      	mov	r0, r5
 8008d88:	f000 f93c 	bl	8009004 <_fflush_r>
 8008d8c:	bb30      	cbnz	r0, 8008ddc <__swbuf_r+0x90>
 8008d8e:	68a3      	ldr	r3, [r4, #8]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	60a3      	str	r3, [r4, #8]
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	1c5a      	adds	r2, r3, #1
 8008d98:	6022      	str	r2, [r4, #0]
 8008d9a:	701e      	strb	r6, [r3, #0]
 8008d9c:	6963      	ldr	r3, [r4, #20]
 8008d9e:	3001      	adds	r0, #1
 8008da0:	4283      	cmp	r3, r0
 8008da2:	d004      	beq.n	8008dae <__swbuf_r+0x62>
 8008da4:	89a3      	ldrh	r3, [r4, #12]
 8008da6:	07db      	lsls	r3, r3, #31
 8008da8:	d506      	bpl.n	8008db8 <__swbuf_r+0x6c>
 8008daa:	2e0a      	cmp	r6, #10
 8008dac:	d104      	bne.n	8008db8 <__swbuf_r+0x6c>
 8008dae:	4621      	mov	r1, r4
 8008db0:	4628      	mov	r0, r5
 8008db2:	f000 f927 	bl	8009004 <_fflush_r>
 8008db6:	b988      	cbnz	r0, 8008ddc <__swbuf_r+0x90>
 8008db8:	4638      	mov	r0, r7
 8008dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dbc:	4b0a      	ldr	r3, [pc, #40]	; (8008de8 <__swbuf_r+0x9c>)
 8008dbe:	429c      	cmp	r4, r3
 8008dc0:	d101      	bne.n	8008dc6 <__swbuf_r+0x7a>
 8008dc2:	68ac      	ldr	r4, [r5, #8]
 8008dc4:	e7cf      	b.n	8008d66 <__swbuf_r+0x1a>
 8008dc6:	4b09      	ldr	r3, [pc, #36]	; (8008dec <__swbuf_r+0xa0>)
 8008dc8:	429c      	cmp	r4, r3
 8008dca:	bf08      	it	eq
 8008dcc:	68ec      	ldreq	r4, [r5, #12]
 8008dce:	e7ca      	b.n	8008d66 <__swbuf_r+0x1a>
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f000 f81a 	bl	8008e0c <__swsetup_r>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d0cb      	beq.n	8008d74 <__swbuf_r+0x28>
 8008ddc:	f04f 37ff 	mov.w	r7, #4294967295
 8008de0:	e7ea      	b.n	8008db8 <__swbuf_r+0x6c>
 8008de2:	bf00      	nop
 8008de4:	080099d4 	.word	0x080099d4
 8008de8:	080099f4 	.word	0x080099f4
 8008dec:	080099b4 	.word	0x080099b4

08008df0 <__ascii_wctomb>:
 8008df0:	b149      	cbz	r1, 8008e06 <__ascii_wctomb+0x16>
 8008df2:	2aff      	cmp	r2, #255	; 0xff
 8008df4:	bf85      	ittet	hi
 8008df6:	238a      	movhi	r3, #138	; 0x8a
 8008df8:	6003      	strhi	r3, [r0, #0]
 8008dfa:	700a      	strbls	r2, [r1, #0]
 8008dfc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e00:	bf98      	it	ls
 8008e02:	2001      	movls	r0, #1
 8008e04:	4770      	bx	lr
 8008e06:	4608      	mov	r0, r1
 8008e08:	4770      	bx	lr
	...

08008e0c <__swsetup_r>:
 8008e0c:	4b32      	ldr	r3, [pc, #200]	; (8008ed8 <__swsetup_r+0xcc>)
 8008e0e:	b570      	push	{r4, r5, r6, lr}
 8008e10:	681d      	ldr	r5, [r3, #0]
 8008e12:	4606      	mov	r6, r0
 8008e14:	460c      	mov	r4, r1
 8008e16:	b125      	cbz	r5, 8008e22 <__swsetup_r+0x16>
 8008e18:	69ab      	ldr	r3, [r5, #24]
 8008e1a:	b913      	cbnz	r3, 8008e22 <__swsetup_r+0x16>
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	f000 f985 	bl	800912c <__sinit>
 8008e22:	4b2e      	ldr	r3, [pc, #184]	; (8008edc <__swsetup_r+0xd0>)
 8008e24:	429c      	cmp	r4, r3
 8008e26:	d10f      	bne.n	8008e48 <__swsetup_r+0x3c>
 8008e28:	686c      	ldr	r4, [r5, #4]
 8008e2a:	89a3      	ldrh	r3, [r4, #12]
 8008e2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e30:	0719      	lsls	r1, r3, #28
 8008e32:	d42c      	bmi.n	8008e8e <__swsetup_r+0x82>
 8008e34:	06dd      	lsls	r5, r3, #27
 8008e36:	d411      	bmi.n	8008e5c <__swsetup_r+0x50>
 8008e38:	2309      	movs	r3, #9
 8008e3a:	6033      	str	r3, [r6, #0]
 8008e3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e40:	81a3      	strh	r3, [r4, #12]
 8008e42:	f04f 30ff 	mov.w	r0, #4294967295
 8008e46:	e03e      	b.n	8008ec6 <__swsetup_r+0xba>
 8008e48:	4b25      	ldr	r3, [pc, #148]	; (8008ee0 <__swsetup_r+0xd4>)
 8008e4a:	429c      	cmp	r4, r3
 8008e4c:	d101      	bne.n	8008e52 <__swsetup_r+0x46>
 8008e4e:	68ac      	ldr	r4, [r5, #8]
 8008e50:	e7eb      	b.n	8008e2a <__swsetup_r+0x1e>
 8008e52:	4b24      	ldr	r3, [pc, #144]	; (8008ee4 <__swsetup_r+0xd8>)
 8008e54:	429c      	cmp	r4, r3
 8008e56:	bf08      	it	eq
 8008e58:	68ec      	ldreq	r4, [r5, #12]
 8008e5a:	e7e6      	b.n	8008e2a <__swsetup_r+0x1e>
 8008e5c:	0758      	lsls	r0, r3, #29
 8008e5e:	d512      	bpl.n	8008e86 <__swsetup_r+0x7a>
 8008e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e62:	b141      	cbz	r1, 8008e76 <__swsetup_r+0x6a>
 8008e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e68:	4299      	cmp	r1, r3
 8008e6a:	d002      	beq.n	8008e72 <__swsetup_r+0x66>
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f7ff fb6f 	bl	8008550 <_free_r>
 8008e72:	2300      	movs	r3, #0
 8008e74:	6363      	str	r3, [r4, #52]	; 0x34
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e7c:	81a3      	strh	r3, [r4, #12]
 8008e7e:	2300      	movs	r3, #0
 8008e80:	6063      	str	r3, [r4, #4]
 8008e82:	6923      	ldr	r3, [r4, #16]
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	f043 0308 	orr.w	r3, r3, #8
 8008e8c:	81a3      	strh	r3, [r4, #12]
 8008e8e:	6923      	ldr	r3, [r4, #16]
 8008e90:	b94b      	cbnz	r3, 8008ea6 <__swsetup_r+0x9a>
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e9c:	d003      	beq.n	8008ea6 <__swsetup_r+0x9a>
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	f000 fa07 	bl	80092b4 <__smakebuf_r>
 8008ea6:	89a0      	ldrh	r0, [r4, #12]
 8008ea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008eac:	f010 0301 	ands.w	r3, r0, #1
 8008eb0:	d00a      	beq.n	8008ec8 <__swsetup_r+0xbc>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	60a3      	str	r3, [r4, #8]
 8008eb6:	6963      	ldr	r3, [r4, #20]
 8008eb8:	425b      	negs	r3, r3
 8008eba:	61a3      	str	r3, [r4, #24]
 8008ebc:	6923      	ldr	r3, [r4, #16]
 8008ebe:	b943      	cbnz	r3, 8008ed2 <__swsetup_r+0xc6>
 8008ec0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ec4:	d1ba      	bne.n	8008e3c <__swsetup_r+0x30>
 8008ec6:	bd70      	pop	{r4, r5, r6, pc}
 8008ec8:	0781      	lsls	r1, r0, #30
 8008eca:	bf58      	it	pl
 8008ecc:	6963      	ldrpl	r3, [r4, #20]
 8008ece:	60a3      	str	r3, [r4, #8]
 8008ed0:	e7f4      	b.n	8008ebc <__swsetup_r+0xb0>
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	e7f7      	b.n	8008ec6 <__swsetup_r+0xba>
 8008ed6:	bf00      	nop
 8008ed8:	2000000c 	.word	0x2000000c
 8008edc:	080099d4 	.word	0x080099d4
 8008ee0:	080099f4 	.word	0x080099f4
 8008ee4:	080099b4 	.word	0x080099b4

08008ee8 <abort>:
 8008ee8:	b508      	push	{r3, lr}
 8008eea:	2006      	movs	r0, #6
 8008eec:	f000 fa52 	bl	8009394 <raise>
 8008ef0:	2001      	movs	r0, #1
 8008ef2:	f7f8 fef7 	bl	8001ce4 <_exit>
	...

08008ef8 <__sflush_r>:
 8008ef8:	898a      	ldrh	r2, [r1, #12]
 8008efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008efe:	4605      	mov	r5, r0
 8008f00:	0710      	lsls	r0, r2, #28
 8008f02:	460c      	mov	r4, r1
 8008f04:	d458      	bmi.n	8008fb8 <__sflush_r+0xc0>
 8008f06:	684b      	ldr	r3, [r1, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	dc05      	bgt.n	8008f18 <__sflush_r+0x20>
 8008f0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	dc02      	bgt.n	8008f18 <__sflush_r+0x20>
 8008f12:	2000      	movs	r0, #0
 8008f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f1a:	2e00      	cmp	r6, #0
 8008f1c:	d0f9      	beq.n	8008f12 <__sflush_r+0x1a>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f24:	682f      	ldr	r7, [r5, #0]
 8008f26:	602b      	str	r3, [r5, #0]
 8008f28:	d032      	beq.n	8008f90 <__sflush_r+0x98>
 8008f2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f2c:	89a3      	ldrh	r3, [r4, #12]
 8008f2e:	075a      	lsls	r2, r3, #29
 8008f30:	d505      	bpl.n	8008f3e <__sflush_r+0x46>
 8008f32:	6863      	ldr	r3, [r4, #4]
 8008f34:	1ac0      	subs	r0, r0, r3
 8008f36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f38:	b10b      	cbz	r3, 8008f3e <__sflush_r+0x46>
 8008f3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f3c:	1ac0      	subs	r0, r0, r3
 8008f3e:	2300      	movs	r3, #0
 8008f40:	4602      	mov	r2, r0
 8008f42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f44:	6a21      	ldr	r1, [r4, #32]
 8008f46:	4628      	mov	r0, r5
 8008f48:	47b0      	blx	r6
 8008f4a:	1c43      	adds	r3, r0, #1
 8008f4c:	89a3      	ldrh	r3, [r4, #12]
 8008f4e:	d106      	bne.n	8008f5e <__sflush_r+0x66>
 8008f50:	6829      	ldr	r1, [r5, #0]
 8008f52:	291d      	cmp	r1, #29
 8008f54:	d82c      	bhi.n	8008fb0 <__sflush_r+0xb8>
 8008f56:	4a2a      	ldr	r2, [pc, #168]	; (8009000 <__sflush_r+0x108>)
 8008f58:	40ca      	lsrs	r2, r1
 8008f5a:	07d6      	lsls	r6, r2, #31
 8008f5c:	d528      	bpl.n	8008fb0 <__sflush_r+0xb8>
 8008f5e:	2200      	movs	r2, #0
 8008f60:	6062      	str	r2, [r4, #4]
 8008f62:	04d9      	lsls	r1, r3, #19
 8008f64:	6922      	ldr	r2, [r4, #16]
 8008f66:	6022      	str	r2, [r4, #0]
 8008f68:	d504      	bpl.n	8008f74 <__sflush_r+0x7c>
 8008f6a:	1c42      	adds	r2, r0, #1
 8008f6c:	d101      	bne.n	8008f72 <__sflush_r+0x7a>
 8008f6e:	682b      	ldr	r3, [r5, #0]
 8008f70:	b903      	cbnz	r3, 8008f74 <__sflush_r+0x7c>
 8008f72:	6560      	str	r0, [r4, #84]	; 0x54
 8008f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f76:	602f      	str	r7, [r5, #0]
 8008f78:	2900      	cmp	r1, #0
 8008f7a:	d0ca      	beq.n	8008f12 <__sflush_r+0x1a>
 8008f7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f80:	4299      	cmp	r1, r3
 8008f82:	d002      	beq.n	8008f8a <__sflush_r+0x92>
 8008f84:	4628      	mov	r0, r5
 8008f86:	f7ff fae3 	bl	8008550 <_free_r>
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	6360      	str	r0, [r4, #52]	; 0x34
 8008f8e:	e7c1      	b.n	8008f14 <__sflush_r+0x1c>
 8008f90:	6a21      	ldr	r1, [r4, #32]
 8008f92:	2301      	movs	r3, #1
 8008f94:	4628      	mov	r0, r5
 8008f96:	47b0      	blx	r6
 8008f98:	1c41      	adds	r1, r0, #1
 8008f9a:	d1c7      	bne.n	8008f2c <__sflush_r+0x34>
 8008f9c:	682b      	ldr	r3, [r5, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d0c4      	beq.n	8008f2c <__sflush_r+0x34>
 8008fa2:	2b1d      	cmp	r3, #29
 8008fa4:	d001      	beq.n	8008faa <__sflush_r+0xb2>
 8008fa6:	2b16      	cmp	r3, #22
 8008fa8:	d101      	bne.n	8008fae <__sflush_r+0xb6>
 8008faa:	602f      	str	r7, [r5, #0]
 8008fac:	e7b1      	b.n	8008f12 <__sflush_r+0x1a>
 8008fae:	89a3      	ldrh	r3, [r4, #12]
 8008fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fb4:	81a3      	strh	r3, [r4, #12]
 8008fb6:	e7ad      	b.n	8008f14 <__sflush_r+0x1c>
 8008fb8:	690f      	ldr	r7, [r1, #16]
 8008fba:	2f00      	cmp	r7, #0
 8008fbc:	d0a9      	beq.n	8008f12 <__sflush_r+0x1a>
 8008fbe:	0793      	lsls	r3, r2, #30
 8008fc0:	680e      	ldr	r6, [r1, #0]
 8008fc2:	bf08      	it	eq
 8008fc4:	694b      	ldreq	r3, [r1, #20]
 8008fc6:	600f      	str	r7, [r1, #0]
 8008fc8:	bf18      	it	ne
 8008fca:	2300      	movne	r3, #0
 8008fcc:	eba6 0807 	sub.w	r8, r6, r7
 8008fd0:	608b      	str	r3, [r1, #8]
 8008fd2:	f1b8 0f00 	cmp.w	r8, #0
 8008fd6:	dd9c      	ble.n	8008f12 <__sflush_r+0x1a>
 8008fd8:	6a21      	ldr	r1, [r4, #32]
 8008fda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fdc:	4643      	mov	r3, r8
 8008fde:	463a      	mov	r2, r7
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	47b0      	blx	r6
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	dc06      	bgt.n	8008ff6 <__sflush_r+0xfe>
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fee:	81a3      	strh	r3, [r4, #12]
 8008ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff4:	e78e      	b.n	8008f14 <__sflush_r+0x1c>
 8008ff6:	4407      	add	r7, r0
 8008ff8:	eba8 0800 	sub.w	r8, r8, r0
 8008ffc:	e7e9      	b.n	8008fd2 <__sflush_r+0xda>
 8008ffe:	bf00      	nop
 8009000:	20400001 	.word	0x20400001

08009004 <_fflush_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	690b      	ldr	r3, [r1, #16]
 8009008:	4605      	mov	r5, r0
 800900a:	460c      	mov	r4, r1
 800900c:	b913      	cbnz	r3, 8009014 <_fflush_r+0x10>
 800900e:	2500      	movs	r5, #0
 8009010:	4628      	mov	r0, r5
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	b118      	cbz	r0, 800901e <_fflush_r+0x1a>
 8009016:	6983      	ldr	r3, [r0, #24]
 8009018:	b90b      	cbnz	r3, 800901e <_fflush_r+0x1a>
 800901a:	f000 f887 	bl	800912c <__sinit>
 800901e:	4b14      	ldr	r3, [pc, #80]	; (8009070 <_fflush_r+0x6c>)
 8009020:	429c      	cmp	r4, r3
 8009022:	d11b      	bne.n	800905c <_fflush_r+0x58>
 8009024:	686c      	ldr	r4, [r5, #4]
 8009026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0ef      	beq.n	800900e <_fflush_r+0xa>
 800902e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009030:	07d0      	lsls	r0, r2, #31
 8009032:	d404      	bmi.n	800903e <_fflush_r+0x3a>
 8009034:	0599      	lsls	r1, r3, #22
 8009036:	d402      	bmi.n	800903e <_fflush_r+0x3a>
 8009038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800903a:	f000 f915 	bl	8009268 <__retarget_lock_acquire_recursive>
 800903e:	4628      	mov	r0, r5
 8009040:	4621      	mov	r1, r4
 8009042:	f7ff ff59 	bl	8008ef8 <__sflush_r>
 8009046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009048:	07da      	lsls	r2, r3, #31
 800904a:	4605      	mov	r5, r0
 800904c:	d4e0      	bmi.n	8009010 <_fflush_r+0xc>
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	059b      	lsls	r3, r3, #22
 8009052:	d4dd      	bmi.n	8009010 <_fflush_r+0xc>
 8009054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009056:	f000 f908 	bl	800926a <__retarget_lock_release_recursive>
 800905a:	e7d9      	b.n	8009010 <_fflush_r+0xc>
 800905c:	4b05      	ldr	r3, [pc, #20]	; (8009074 <_fflush_r+0x70>)
 800905e:	429c      	cmp	r4, r3
 8009060:	d101      	bne.n	8009066 <_fflush_r+0x62>
 8009062:	68ac      	ldr	r4, [r5, #8]
 8009064:	e7df      	b.n	8009026 <_fflush_r+0x22>
 8009066:	4b04      	ldr	r3, [pc, #16]	; (8009078 <_fflush_r+0x74>)
 8009068:	429c      	cmp	r4, r3
 800906a:	bf08      	it	eq
 800906c:	68ec      	ldreq	r4, [r5, #12]
 800906e:	e7da      	b.n	8009026 <_fflush_r+0x22>
 8009070:	080099d4 	.word	0x080099d4
 8009074:	080099f4 	.word	0x080099f4
 8009078:	080099b4 	.word	0x080099b4

0800907c <std>:
 800907c:	2300      	movs	r3, #0
 800907e:	b510      	push	{r4, lr}
 8009080:	4604      	mov	r4, r0
 8009082:	e9c0 3300 	strd	r3, r3, [r0]
 8009086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800908a:	6083      	str	r3, [r0, #8]
 800908c:	8181      	strh	r1, [r0, #12]
 800908e:	6643      	str	r3, [r0, #100]	; 0x64
 8009090:	81c2      	strh	r2, [r0, #14]
 8009092:	6183      	str	r3, [r0, #24]
 8009094:	4619      	mov	r1, r3
 8009096:	2208      	movs	r2, #8
 8009098:	305c      	adds	r0, #92	; 0x5c
 800909a:	f7fd fba5 	bl	80067e8 <memset>
 800909e:	4b05      	ldr	r3, [pc, #20]	; (80090b4 <std+0x38>)
 80090a0:	6263      	str	r3, [r4, #36]	; 0x24
 80090a2:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <std+0x3c>)
 80090a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80090a6:	4b05      	ldr	r3, [pc, #20]	; (80090bc <std+0x40>)
 80090a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090aa:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <std+0x44>)
 80090ac:	6224      	str	r4, [r4, #32]
 80090ae:	6323      	str	r3, [r4, #48]	; 0x30
 80090b0:	bd10      	pop	{r4, pc}
 80090b2:	bf00      	nop
 80090b4:	080093cd 	.word	0x080093cd
 80090b8:	080093ef 	.word	0x080093ef
 80090bc:	08009427 	.word	0x08009427
 80090c0:	0800944b 	.word	0x0800944b

080090c4 <_cleanup_r>:
 80090c4:	4901      	ldr	r1, [pc, #4]	; (80090cc <_cleanup_r+0x8>)
 80090c6:	f000 b8af 	b.w	8009228 <_fwalk_reent>
 80090ca:	bf00      	nop
 80090cc:	08009005 	.word	0x08009005

080090d0 <__sfmoreglue>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	1e4a      	subs	r2, r1, #1
 80090d4:	2568      	movs	r5, #104	; 0x68
 80090d6:	4355      	muls	r5, r2
 80090d8:	460e      	mov	r6, r1
 80090da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090de:	f7ff fa87 	bl	80085f0 <_malloc_r>
 80090e2:	4604      	mov	r4, r0
 80090e4:	b140      	cbz	r0, 80090f8 <__sfmoreglue+0x28>
 80090e6:	2100      	movs	r1, #0
 80090e8:	e9c0 1600 	strd	r1, r6, [r0]
 80090ec:	300c      	adds	r0, #12
 80090ee:	60a0      	str	r0, [r4, #8]
 80090f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80090f4:	f7fd fb78 	bl	80067e8 <memset>
 80090f8:	4620      	mov	r0, r4
 80090fa:	bd70      	pop	{r4, r5, r6, pc}

080090fc <__sfp_lock_acquire>:
 80090fc:	4801      	ldr	r0, [pc, #4]	; (8009104 <__sfp_lock_acquire+0x8>)
 80090fe:	f000 b8b3 	b.w	8009268 <__retarget_lock_acquire_recursive>
 8009102:	bf00      	nop
 8009104:	20000494 	.word	0x20000494

08009108 <__sfp_lock_release>:
 8009108:	4801      	ldr	r0, [pc, #4]	; (8009110 <__sfp_lock_release+0x8>)
 800910a:	f000 b8ae 	b.w	800926a <__retarget_lock_release_recursive>
 800910e:	bf00      	nop
 8009110:	20000494 	.word	0x20000494

08009114 <__sinit_lock_acquire>:
 8009114:	4801      	ldr	r0, [pc, #4]	; (800911c <__sinit_lock_acquire+0x8>)
 8009116:	f000 b8a7 	b.w	8009268 <__retarget_lock_acquire_recursive>
 800911a:	bf00      	nop
 800911c:	2000048f 	.word	0x2000048f

08009120 <__sinit_lock_release>:
 8009120:	4801      	ldr	r0, [pc, #4]	; (8009128 <__sinit_lock_release+0x8>)
 8009122:	f000 b8a2 	b.w	800926a <__retarget_lock_release_recursive>
 8009126:	bf00      	nop
 8009128:	2000048f 	.word	0x2000048f

0800912c <__sinit>:
 800912c:	b510      	push	{r4, lr}
 800912e:	4604      	mov	r4, r0
 8009130:	f7ff fff0 	bl	8009114 <__sinit_lock_acquire>
 8009134:	69a3      	ldr	r3, [r4, #24]
 8009136:	b11b      	cbz	r3, 8009140 <__sinit+0x14>
 8009138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800913c:	f7ff bff0 	b.w	8009120 <__sinit_lock_release>
 8009140:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009144:	6523      	str	r3, [r4, #80]	; 0x50
 8009146:	4b13      	ldr	r3, [pc, #76]	; (8009194 <__sinit+0x68>)
 8009148:	4a13      	ldr	r2, [pc, #76]	; (8009198 <__sinit+0x6c>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	62a2      	str	r2, [r4, #40]	; 0x28
 800914e:	42a3      	cmp	r3, r4
 8009150:	bf04      	itt	eq
 8009152:	2301      	moveq	r3, #1
 8009154:	61a3      	streq	r3, [r4, #24]
 8009156:	4620      	mov	r0, r4
 8009158:	f000 f820 	bl	800919c <__sfp>
 800915c:	6060      	str	r0, [r4, #4]
 800915e:	4620      	mov	r0, r4
 8009160:	f000 f81c 	bl	800919c <__sfp>
 8009164:	60a0      	str	r0, [r4, #8]
 8009166:	4620      	mov	r0, r4
 8009168:	f000 f818 	bl	800919c <__sfp>
 800916c:	2200      	movs	r2, #0
 800916e:	60e0      	str	r0, [r4, #12]
 8009170:	2104      	movs	r1, #4
 8009172:	6860      	ldr	r0, [r4, #4]
 8009174:	f7ff ff82 	bl	800907c <std>
 8009178:	68a0      	ldr	r0, [r4, #8]
 800917a:	2201      	movs	r2, #1
 800917c:	2109      	movs	r1, #9
 800917e:	f7ff ff7d 	bl	800907c <std>
 8009182:	68e0      	ldr	r0, [r4, #12]
 8009184:	2202      	movs	r2, #2
 8009186:	2112      	movs	r1, #18
 8009188:	f7ff ff78 	bl	800907c <std>
 800918c:	2301      	movs	r3, #1
 800918e:	61a3      	str	r3, [r4, #24]
 8009190:	e7d2      	b.n	8009138 <__sinit+0xc>
 8009192:	bf00      	nop
 8009194:	08009634 	.word	0x08009634
 8009198:	080090c5 	.word	0x080090c5

0800919c <__sfp>:
 800919c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919e:	4607      	mov	r7, r0
 80091a0:	f7ff ffac 	bl	80090fc <__sfp_lock_acquire>
 80091a4:	4b1e      	ldr	r3, [pc, #120]	; (8009220 <__sfp+0x84>)
 80091a6:	681e      	ldr	r6, [r3, #0]
 80091a8:	69b3      	ldr	r3, [r6, #24]
 80091aa:	b913      	cbnz	r3, 80091b2 <__sfp+0x16>
 80091ac:	4630      	mov	r0, r6
 80091ae:	f7ff ffbd 	bl	800912c <__sinit>
 80091b2:	3648      	adds	r6, #72	; 0x48
 80091b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091b8:	3b01      	subs	r3, #1
 80091ba:	d503      	bpl.n	80091c4 <__sfp+0x28>
 80091bc:	6833      	ldr	r3, [r6, #0]
 80091be:	b30b      	cbz	r3, 8009204 <__sfp+0x68>
 80091c0:	6836      	ldr	r6, [r6, #0]
 80091c2:	e7f7      	b.n	80091b4 <__sfp+0x18>
 80091c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091c8:	b9d5      	cbnz	r5, 8009200 <__sfp+0x64>
 80091ca:	4b16      	ldr	r3, [pc, #88]	; (8009224 <__sfp+0x88>)
 80091cc:	60e3      	str	r3, [r4, #12]
 80091ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091d2:	6665      	str	r5, [r4, #100]	; 0x64
 80091d4:	f000 f847 	bl	8009266 <__retarget_lock_init_recursive>
 80091d8:	f7ff ff96 	bl	8009108 <__sfp_lock_release>
 80091dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091e4:	6025      	str	r5, [r4, #0]
 80091e6:	61a5      	str	r5, [r4, #24]
 80091e8:	2208      	movs	r2, #8
 80091ea:	4629      	mov	r1, r5
 80091ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091f0:	f7fd fafa 	bl	80067e8 <memset>
 80091f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80091f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80091fc:	4620      	mov	r0, r4
 80091fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009200:	3468      	adds	r4, #104	; 0x68
 8009202:	e7d9      	b.n	80091b8 <__sfp+0x1c>
 8009204:	2104      	movs	r1, #4
 8009206:	4638      	mov	r0, r7
 8009208:	f7ff ff62 	bl	80090d0 <__sfmoreglue>
 800920c:	4604      	mov	r4, r0
 800920e:	6030      	str	r0, [r6, #0]
 8009210:	2800      	cmp	r0, #0
 8009212:	d1d5      	bne.n	80091c0 <__sfp+0x24>
 8009214:	f7ff ff78 	bl	8009108 <__sfp_lock_release>
 8009218:	230c      	movs	r3, #12
 800921a:	603b      	str	r3, [r7, #0]
 800921c:	e7ee      	b.n	80091fc <__sfp+0x60>
 800921e:	bf00      	nop
 8009220:	08009634 	.word	0x08009634
 8009224:	ffff0001 	.word	0xffff0001

08009228 <_fwalk_reent>:
 8009228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800922c:	4606      	mov	r6, r0
 800922e:	4688      	mov	r8, r1
 8009230:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009234:	2700      	movs	r7, #0
 8009236:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800923a:	f1b9 0901 	subs.w	r9, r9, #1
 800923e:	d505      	bpl.n	800924c <_fwalk_reent+0x24>
 8009240:	6824      	ldr	r4, [r4, #0]
 8009242:	2c00      	cmp	r4, #0
 8009244:	d1f7      	bne.n	8009236 <_fwalk_reent+0xe>
 8009246:	4638      	mov	r0, r7
 8009248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800924c:	89ab      	ldrh	r3, [r5, #12]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d907      	bls.n	8009262 <_fwalk_reent+0x3a>
 8009252:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009256:	3301      	adds	r3, #1
 8009258:	d003      	beq.n	8009262 <_fwalk_reent+0x3a>
 800925a:	4629      	mov	r1, r5
 800925c:	4630      	mov	r0, r6
 800925e:	47c0      	blx	r8
 8009260:	4307      	orrs	r7, r0
 8009262:	3568      	adds	r5, #104	; 0x68
 8009264:	e7e9      	b.n	800923a <_fwalk_reent+0x12>

08009266 <__retarget_lock_init_recursive>:
 8009266:	4770      	bx	lr

08009268 <__retarget_lock_acquire_recursive>:
 8009268:	4770      	bx	lr

0800926a <__retarget_lock_release_recursive>:
 800926a:	4770      	bx	lr

0800926c <__swhatbuf_r>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	460e      	mov	r6, r1
 8009270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009274:	2900      	cmp	r1, #0
 8009276:	b096      	sub	sp, #88	; 0x58
 8009278:	4614      	mov	r4, r2
 800927a:	461d      	mov	r5, r3
 800927c:	da07      	bge.n	800928e <__swhatbuf_r+0x22>
 800927e:	2300      	movs	r3, #0
 8009280:	602b      	str	r3, [r5, #0]
 8009282:	89b3      	ldrh	r3, [r6, #12]
 8009284:	061a      	lsls	r2, r3, #24
 8009286:	d410      	bmi.n	80092aa <__swhatbuf_r+0x3e>
 8009288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800928c:	e00e      	b.n	80092ac <__swhatbuf_r+0x40>
 800928e:	466a      	mov	r2, sp
 8009290:	f000 f902 	bl	8009498 <_fstat_r>
 8009294:	2800      	cmp	r0, #0
 8009296:	dbf2      	blt.n	800927e <__swhatbuf_r+0x12>
 8009298:	9a01      	ldr	r2, [sp, #4]
 800929a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800929e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092a2:	425a      	negs	r2, r3
 80092a4:	415a      	adcs	r2, r3
 80092a6:	602a      	str	r2, [r5, #0]
 80092a8:	e7ee      	b.n	8009288 <__swhatbuf_r+0x1c>
 80092aa:	2340      	movs	r3, #64	; 0x40
 80092ac:	2000      	movs	r0, #0
 80092ae:	6023      	str	r3, [r4, #0]
 80092b0:	b016      	add	sp, #88	; 0x58
 80092b2:	bd70      	pop	{r4, r5, r6, pc}

080092b4 <__smakebuf_r>:
 80092b4:	898b      	ldrh	r3, [r1, #12]
 80092b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092b8:	079d      	lsls	r5, r3, #30
 80092ba:	4606      	mov	r6, r0
 80092bc:	460c      	mov	r4, r1
 80092be:	d507      	bpl.n	80092d0 <__smakebuf_r+0x1c>
 80092c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092c4:	6023      	str	r3, [r4, #0]
 80092c6:	6123      	str	r3, [r4, #16]
 80092c8:	2301      	movs	r3, #1
 80092ca:	6163      	str	r3, [r4, #20]
 80092cc:	b002      	add	sp, #8
 80092ce:	bd70      	pop	{r4, r5, r6, pc}
 80092d0:	ab01      	add	r3, sp, #4
 80092d2:	466a      	mov	r2, sp
 80092d4:	f7ff ffca 	bl	800926c <__swhatbuf_r>
 80092d8:	9900      	ldr	r1, [sp, #0]
 80092da:	4605      	mov	r5, r0
 80092dc:	4630      	mov	r0, r6
 80092de:	f7ff f987 	bl	80085f0 <_malloc_r>
 80092e2:	b948      	cbnz	r0, 80092f8 <__smakebuf_r+0x44>
 80092e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092e8:	059a      	lsls	r2, r3, #22
 80092ea:	d4ef      	bmi.n	80092cc <__smakebuf_r+0x18>
 80092ec:	f023 0303 	bic.w	r3, r3, #3
 80092f0:	f043 0302 	orr.w	r3, r3, #2
 80092f4:	81a3      	strh	r3, [r4, #12]
 80092f6:	e7e3      	b.n	80092c0 <__smakebuf_r+0xc>
 80092f8:	4b0d      	ldr	r3, [pc, #52]	; (8009330 <__smakebuf_r+0x7c>)
 80092fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80092fc:	89a3      	ldrh	r3, [r4, #12]
 80092fe:	6020      	str	r0, [r4, #0]
 8009300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009304:	81a3      	strh	r3, [r4, #12]
 8009306:	9b00      	ldr	r3, [sp, #0]
 8009308:	6163      	str	r3, [r4, #20]
 800930a:	9b01      	ldr	r3, [sp, #4]
 800930c:	6120      	str	r0, [r4, #16]
 800930e:	b15b      	cbz	r3, 8009328 <__smakebuf_r+0x74>
 8009310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009314:	4630      	mov	r0, r6
 8009316:	f000 f8d1 	bl	80094bc <_isatty_r>
 800931a:	b128      	cbz	r0, 8009328 <__smakebuf_r+0x74>
 800931c:	89a3      	ldrh	r3, [r4, #12]
 800931e:	f023 0303 	bic.w	r3, r3, #3
 8009322:	f043 0301 	orr.w	r3, r3, #1
 8009326:	81a3      	strh	r3, [r4, #12]
 8009328:	89a0      	ldrh	r0, [r4, #12]
 800932a:	4305      	orrs	r5, r0
 800932c:	81a5      	strh	r5, [r4, #12]
 800932e:	e7cd      	b.n	80092cc <__smakebuf_r+0x18>
 8009330:	080090c5 	.word	0x080090c5

08009334 <_malloc_usable_size_r>:
 8009334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009338:	1f18      	subs	r0, r3, #4
 800933a:	2b00      	cmp	r3, #0
 800933c:	bfbc      	itt	lt
 800933e:	580b      	ldrlt	r3, [r1, r0]
 8009340:	18c0      	addlt	r0, r0, r3
 8009342:	4770      	bx	lr

08009344 <_raise_r>:
 8009344:	291f      	cmp	r1, #31
 8009346:	b538      	push	{r3, r4, r5, lr}
 8009348:	4604      	mov	r4, r0
 800934a:	460d      	mov	r5, r1
 800934c:	d904      	bls.n	8009358 <_raise_r+0x14>
 800934e:	2316      	movs	r3, #22
 8009350:	6003      	str	r3, [r0, #0]
 8009352:	f04f 30ff 	mov.w	r0, #4294967295
 8009356:	bd38      	pop	{r3, r4, r5, pc}
 8009358:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800935a:	b112      	cbz	r2, 8009362 <_raise_r+0x1e>
 800935c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009360:	b94b      	cbnz	r3, 8009376 <_raise_r+0x32>
 8009362:	4620      	mov	r0, r4
 8009364:	f000 f830 	bl	80093c8 <_getpid_r>
 8009368:	462a      	mov	r2, r5
 800936a:	4601      	mov	r1, r0
 800936c:	4620      	mov	r0, r4
 800936e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009372:	f000 b817 	b.w	80093a4 <_kill_r>
 8009376:	2b01      	cmp	r3, #1
 8009378:	d00a      	beq.n	8009390 <_raise_r+0x4c>
 800937a:	1c59      	adds	r1, r3, #1
 800937c:	d103      	bne.n	8009386 <_raise_r+0x42>
 800937e:	2316      	movs	r3, #22
 8009380:	6003      	str	r3, [r0, #0]
 8009382:	2001      	movs	r0, #1
 8009384:	e7e7      	b.n	8009356 <_raise_r+0x12>
 8009386:	2400      	movs	r4, #0
 8009388:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800938c:	4628      	mov	r0, r5
 800938e:	4798      	blx	r3
 8009390:	2000      	movs	r0, #0
 8009392:	e7e0      	b.n	8009356 <_raise_r+0x12>

08009394 <raise>:
 8009394:	4b02      	ldr	r3, [pc, #8]	; (80093a0 <raise+0xc>)
 8009396:	4601      	mov	r1, r0
 8009398:	6818      	ldr	r0, [r3, #0]
 800939a:	f7ff bfd3 	b.w	8009344 <_raise_r>
 800939e:	bf00      	nop
 80093a0:	2000000c 	.word	0x2000000c

080093a4 <_kill_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	4d07      	ldr	r5, [pc, #28]	; (80093c4 <_kill_r+0x20>)
 80093a8:	2300      	movs	r3, #0
 80093aa:	4604      	mov	r4, r0
 80093ac:	4608      	mov	r0, r1
 80093ae:	4611      	mov	r1, r2
 80093b0:	602b      	str	r3, [r5, #0]
 80093b2:	f7f8 fc87 	bl	8001cc4 <_kill>
 80093b6:	1c43      	adds	r3, r0, #1
 80093b8:	d102      	bne.n	80093c0 <_kill_r+0x1c>
 80093ba:	682b      	ldr	r3, [r5, #0]
 80093bc:	b103      	cbz	r3, 80093c0 <_kill_r+0x1c>
 80093be:	6023      	str	r3, [r4, #0]
 80093c0:	bd38      	pop	{r3, r4, r5, pc}
 80093c2:	bf00      	nop
 80093c4:	20000488 	.word	0x20000488

080093c8 <_getpid_r>:
 80093c8:	f7f8 bc74 	b.w	8001cb4 <_getpid>

080093cc <__sread>:
 80093cc:	b510      	push	{r4, lr}
 80093ce:	460c      	mov	r4, r1
 80093d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d4:	f000 f894 	bl	8009500 <_read_r>
 80093d8:	2800      	cmp	r0, #0
 80093da:	bfab      	itete	ge
 80093dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80093de:	89a3      	ldrhlt	r3, [r4, #12]
 80093e0:	181b      	addge	r3, r3, r0
 80093e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80093e6:	bfac      	ite	ge
 80093e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80093ea:	81a3      	strhlt	r3, [r4, #12]
 80093ec:	bd10      	pop	{r4, pc}

080093ee <__swrite>:
 80093ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f2:	461f      	mov	r7, r3
 80093f4:	898b      	ldrh	r3, [r1, #12]
 80093f6:	05db      	lsls	r3, r3, #23
 80093f8:	4605      	mov	r5, r0
 80093fa:	460c      	mov	r4, r1
 80093fc:	4616      	mov	r6, r2
 80093fe:	d505      	bpl.n	800940c <__swrite+0x1e>
 8009400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009404:	2302      	movs	r3, #2
 8009406:	2200      	movs	r2, #0
 8009408:	f000 f868 	bl	80094dc <_lseek_r>
 800940c:	89a3      	ldrh	r3, [r4, #12]
 800940e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009412:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009416:	81a3      	strh	r3, [r4, #12]
 8009418:	4632      	mov	r2, r6
 800941a:	463b      	mov	r3, r7
 800941c:	4628      	mov	r0, r5
 800941e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009422:	f000 b817 	b.w	8009454 <_write_r>

08009426 <__sseek>:
 8009426:	b510      	push	{r4, lr}
 8009428:	460c      	mov	r4, r1
 800942a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800942e:	f000 f855 	bl	80094dc <_lseek_r>
 8009432:	1c43      	adds	r3, r0, #1
 8009434:	89a3      	ldrh	r3, [r4, #12]
 8009436:	bf15      	itete	ne
 8009438:	6560      	strne	r0, [r4, #84]	; 0x54
 800943a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800943e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009442:	81a3      	strheq	r3, [r4, #12]
 8009444:	bf18      	it	ne
 8009446:	81a3      	strhne	r3, [r4, #12]
 8009448:	bd10      	pop	{r4, pc}

0800944a <__sclose>:
 800944a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800944e:	f000 b813 	b.w	8009478 <_close_r>
	...

08009454 <_write_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	4d07      	ldr	r5, [pc, #28]	; (8009474 <_write_r+0x20>)
 8009458:	4604      	mov	r4, r0
 800945a:	4608      	mov	r0, r1
 800945c:	4611      	mov	r1, r2
 800945e:	2200      	movs	r2, #0
 8009460:	602a      	str	r2, [r5, #0]
 8009462:	461a      	mov	r2, r3
 8009464:	f7f8 fc65 	bl	8001d32 <_write>
 8009468:	1c43      	adds	r3, r0, #1
 800946a:	d102      	bne.n	8009472 <_write_r+0x1e>
 800946c:	682b      	ldr	r3, [r5, #0]
 800946e:	b103      	cbz	r3, 8009472 <_write_r+0x1e>
 8009470:	6023      	str	r3, [r4, #0]
 8009472:	bd38      	pop	{r3, r4, r5, pc}
 8009474:	20000488 	.word	0x20000488

08009478 <_close_r>:
 8009478:	b538      	push	{r3, r4, r5, lr}
 800947a:	4d06      	ldr	r5, [pc, #24]	; (8009494 <_close_r+0x1c>)
 800947c:	2300      	movs	r3, #0
 800947e:	4604      	mov	r4, r0
 8009480:	4608      	mov	r0, r1
 8009482:	602b      	str	r3, [r5, #0]
 8009484:	f7f8 fc71 	bl	8001d6a <_close>
 8009488:	1c43      	adds	r3, r0, #1
 800948a:	d102      	bne.n	8009492 <_close_r+0x1a>
 800948c:	682b      	ldr	r3, [r5, #0]
 800948e:	b103      	cbz	r3, 8009492 <_close_r+0x1a>
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	20000488 	.word	0x20000488

08009498 <_fstat_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4d07      	ldr	r5, [pc, #28]	; (80094b8 <_fstat_r+0x20>)
 800949c:	2300      	movs	r3, #0
 800949e:	4604      	mov	r4, r0
 80094a0:	4608      	mov	r0, r1
 80094a2:	4611      	mov	r1, r2
 80094a4:	602b      	str	r3, [r5, #0]
 80094a6:	f7f8 fc6c 	bl	8001d82 <_fstat>
 80094aa:	1c43      	adds	r3, r0, #1
 80094ac:	d102      	bne.n	80094b4 <_fstat_r+0x1c>
 80094ae:	682b      	ldr	r3, [r5, #0]
 80094b0:	b103      	cbz	r3, 80094b4 <_fstat_r+0x1c>
 80094b2:	6023      	str	r3, [r4, #0]
 80094b4:	bd38      	pop	{r3, r4, r5, pc}
 80094b6:	bf00      	nop
 80094b8:	20000488 	.word	0x20000488

080094bc <_isatty_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4d06      	ldr	r5, [pc, #24]	; (80094d8 <_isatty_r+0x1c>)
 80094c0:	2300      	movs	r3, #0
 80094c2:	4604      	mov	r4, r0
 80094c4:	4608      	mov	r0, r1
 80094c6:	602b      	str	r3, [r5, #0]
 80094c8:	f7f8 fc6b 	bl	8001da2 <_isatty>
 80094cc:	1c43      	adds	r3, r0, #1
 80094ce:	d102      	bne.n	80094d6 <_isatty_r+0x1a>
 80094d0:	682b      	ldr	r3, [r5, #0]
 80094d2:	b103      	cbz	r3, 80094d6 <_isatty_r+0x1a>
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	bd38      	pop	{r3, r4, r5, pc}
 80094d8:	20000488 	.word	0x20000488

080094dc <_lseek_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	4d07      	ldr	r5, [pc, #28]	; (80094fc <_lseek_r+0x20>)
 80094e0:	4604      	mov	r4, r0
 80094e2:	4608      	mov	r0, r1
 80094e4:	4611      	mov	r1, r2
 80094e6:	2200      	movs	r2, #0
 80094e8:	602a      	str	r2, [r5, #0]
 80094ea:	461a      	mov	r2, r3
 80094ec:	f7f8 fc64 	bl	8001db8 <_lseek>
 80094f0:	1c43      	adds	r3, r0, #1
 80094f2:	d102      	bne.n	80094fa <_lseek_r+0x1e>
 80094f4:	682b      	ldr	r3, [r5, #0]
 80094f6:	b103      	cbz	r3, 80094fa <_lseek_r+0x1e>
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	bd38      	pop	{r3, r4, r5, pc}
 80094fc:	20000488 	.word	0x20000488

08009500 <_read_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4d07      	ldr	r5, [pc, #28]	; (8009520 <_read_r+0x20>)
 8009504:	4604      	mov	r4, r0
 8009506:	4608      	mov	r0, r1
 8009508:	4611      	mov	r1, r2
 800950a:	2200      	movs	r2, #0
 800950c:	602a      	str	r2, [r5, #0]
 800950e:	461a      	mov	r2, r3
 8009510:	f7f8 fbf2 	bl	8001cf8 <_read>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	d102      	bne.n	800951e <_read_r+0x1e>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	b103      	cbz	r3, 800951e <_read_r+0x1e>
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	20000488 	.word	0x20000488

08009524 <_init>:
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	bf00      	nop
 8009528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800952a:	bc08      	pop	{r3}
 800952c:	469e      	mov	lr, r3
 800952e:	4770      	bx	lr

08009530 <_fini>:
 8009530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009532:	bf00      	nop
 8009534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009536:	bc08      	pop	{r3}
 8009538:	469e      	mov	lr, r3
 800953a:	4770      	bx	lr
